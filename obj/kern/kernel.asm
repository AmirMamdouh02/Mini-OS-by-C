
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 20 19 00 	lgdtl  0x192018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

        # Leave a few words on the stack for the user trap frame
	movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
f0100033:	bc bc 1f 19 f0       	mov    $0xf0191fbc,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 22 00 00 00       	call   f010005f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	c7 05 58 27 86 f0 01 	movl   $0x1,0xf0862758
f0100049:	00 00 00 
f010004c:	90                   	nop
f010004d:	5d                   	pop    %ebp
f010004e:	c3                   	ret    

f010004f <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f010004f:	55                   	push   %ebp
f0100050:	89 e5                	mov    %esp,%ebp
f0100052:	c7 05 2c 27 86 f0 01 	movl   $0x1,0xf086272c
f0100059:	00 00 00 
f010005c:	90                   	nop
f010005d:	5d                   	pop    %ebp
f010005e:	c3                   	ret    

f010005f <FOS_initialize>:
void print_welcome_message();
//=======================================

//First ever function called in FOS kernel
void FOS_initialize()
{
f010005f:	55                   	push   %ebp
f0100060:	89 e5                	mov    %esp,%ebp
f0100062:	83 ec 18             	sub    $0x18,%esp
	extern char start_of_uninitialized_data_section[], end_of_kernel[];

	// Before doing anything else,
	// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
	// This ensures that all static/global variables start with zero value.
	memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100065:	ba bc 28 86 f0       	mov    $0xf08628bc,%edx
f010006a:	b8 9c 1b 86 f0       	mov    $0xf0861b9c,%eax
f010006f:	29 c2                	sub    %eax,%edx
f0100071:	89 d0                	mov    %edx,%eax
f0100073:	83 ec 04             	sub    $0x4,%esp
f0100076:	50                   	push   %eax
f0100077:	6a 00                	push   $0x0
f0100079:	68 9c 1b 86 f0       	push   $0xf0861b9c
f010007e:	e8 73 17 03 00       	call   f01317f6 <memset>
f0100083:	83 c4 10             	add    $0x10,%esp

	/*2022*/
	scheduler_status = SCH_UNINITIALIZED;
f0100086:	c7 05 54 27 86 f0 ff 	movl   $0xffffffff,0xf0862754
f010008d:	ff ff ff 

	// Initialize the console.
	// Can't call cprintf until after we do this!
	console_initialize();
f0100090:	e8 c5 0b 00 00       	call   f0100c5a <console_initialize>

	//print welcome message
	print_welcome_message();
f0100095:	e8 f2 00 00 00       	call   f010018c <print_welcome_message>

	// Lab 2 memory management initialization functions
	detect_memory();
f010009a:	e8 4b 61 00 00       	call   f01061ea <detect_memory>
	initialize_kernel_VM();
f010009f:	e8 d7 5c 00 00       	call   f0105d7b <initialize_kernel_VM>
	initialize_paging();
f01000a4:	e8 58 64 00 00       	call   f0106501 <initialize_paging>
	//	page_check();

	// Lab 3 user environment initialization functions
	env_init();
f01000a9:	e8 8e 9d 00 00       	call   f0109e3c <env_init>
	idt_init();
f01000ae:	e8 46 b3 00 00       	call   f010b3f9 <idt_init>

	//Project initializations

	setPageReplacmentAlgorithmCLOCK();
f01000b3:	e8 79 de 00 00       	call   f010df31 <setPageReplacmentAlgorithmCLOCK>
	setUHeapPlacementStrategyFIRSTFIT();
f01000b8:	e8 92 ff ff ff       	call   f010004f <setUHeapPlacementStrategyFIRSTFIT>
	setKHeapPlacementStrategyFIRSTFIT();
f01000bd:	e8 7d ff ff ff       	call   f010003f <setKHeapPlacementStrategyFIRSTFIT>

#if USE_KHEAP
	//2022:
	{
		int freeFrames_before = sys_calculate_free_frames() ;
f01000c2:	e8 1c cd 00 00       	call   f010cde3 <sys_calculate_free_frames>
f01000c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		int freeDiskFrames_before = pf_calculate_free_frames() ;
f01000ca:	e8 d7 3c 00 00       	call   f0103da6 <pf_calculate_free_frames>
f01000cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		initialize_dyn_block_system();
f01000d2:	e8 c7 77 00 00       	call   f010789e <initialize_dyn_block_system>
		int freeFrames_after = sys_calculate_free_frames() ;
f01000d7:	e8 07 cd 00 00       	call   f010cde3 <sys_calculate_free_frames>
f01000dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
		int freeDiskFrames_after = pf_calculate_free_frames() ;
f01000df:	e8 c2 3c 00 00       	call   f0103da6 <pf_calculate_free_frames>
f01000e4:	89 45 e8             	mov    %eax,-0x18(%ebp)
		test_initialize_dyn_block_system(freeFrames_before, freeDiskFrames_before, freeFrames_after, freeDiskFrames_after);
f01000e7:	ff 75 e8             	pushl  -0x18(%ebp)
f01000ea:	ff 75 ec             	pushl  -0x14(%ebp)
f01000ed:	ff 75 f0             	pushl  -0x10(%ebp)
f01000f0:	ff 75 f4             	pushl  -0xc(%ebp)
f01000f3:	e8 61 00 03 00       	call   f0130159 <test_initialize_dyn_block_system>
f01000f8:	83 c4 10             	add    $0x10,%esp
	}
	MAX_SHARES = (KERNEL_SHARES_ARR_INIT_SIZE) / sizeof(struct Share);
f01000fb:	c7 05 24 27 86 f0 61 	movl   $0x61,0xf0862724
f0100102:	00 00 00 
	MAX_SEMAPHORES = (KERNEL_SEMAPHORES_ARR_INIT_SIZE) / sizeof(struct Semaphore);
f0100105:	c7 05 b0 26 86 f0 59 	movl   $0x59,0xf08626b0
f010010c:	00 00 00 
#endif
	create_shares_array(MAX_SHARES);
f010010f:	a1 24 27 86 f0       	mov    0xf0862724,%eax
f0100114:	83 ec 0c             	sub    $0xc,%esp
f0100117:	50                   	push   %eax
f0100118:	e8 be 6f 00 00       	call   f01070db <create_shares_array>
f010011d:	83 c4 10             	add    $0x10,%esp
	create_semaphores_array(MAX_SEMAPHORES);
f0100120:	a1 b0 26 86 f0       	mov    0xf08626b0,%eax
f0100125:	83 ec 0c             	sub    $0xc,%esp
f0100128:	50                   	push   %eax
f0100129:	e8 b7 e2 00 00       	call   f010e3e5 <create_semaphores_array>
f010012e:	83 c4 10             	add    $0x10,%esp



	enableBuffering(0);
f0100131:	83 ec 0c             	sub    $0xc,%esp
f0100134:	6a 00                	push   $0x0
f0100136:	e8 03 df 00 00       	call   f010e03e <enableBuffering>
f010013b:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0) ;
f010013e:	83 ec 0c             	sub    $0xc,%esp
f0100141:	6a 00                	push   $0x0
f0100143:	e8 de de 00 00       	call   f010e026 <enableModifiedBuffer>
f0100148:	83 c4 10             	add    $0x10,%esp
	setModifiedBufferLength(1000);
f010014b:	83 ec 0c             	sub    $0xc,%esp
f010014e:	68 e8 03 00 00       	push   $0x3e8
f0100153:	e8 fe de 00 00       	call   f010e056 <setModifiedBufferLength>
f0100158:	83 c4 10             	add    $0x10,%esp

	// Lab 4 multitasking initialization functions
	pic_init();
f010015b:	e8 95 5a 00 00       	call   f0105bf5 <pic_init>
	sched_init() ;
f0100160:	e8 3e 47 00 00       	call   f01048a3 <sched_init>
	//Project initializations

	// start the kernel command prompt.
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f0100165:	83 ec 0c             	sub    $0xc,%esp
f0100168:	68 a0 33 13 f0       	push   $0xf01333a0
f010016d:	e8 9c 0b 00 00       	call   f0100d0e <cprintf>
f0100172:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f0100175:	83 ec 0c             	sub    $0xc,%esp
f0100178:	68 cc 33 13 f0       	push   $0xf01333cc
f010017d:	e8 8c 0b 00 00       	call   f0100d0e <cprintf>
f0100182:	83 c4 10             	add    $0x10,%esp
		run_command_prompt();
f0100185:	e8 aa 0b 00 00       	call   f0100d34 <run_command_prompt>
	}
f010018a:	eb d9                	jmp    f0100165 <FOS_initialize+0x106>

f010018c <print_welcome_message>:
}


void print_welcome_message()
{
f010018c:	55                   	push   %ebp
f010018d:	89 e5                	mov    %esp,%ebp
f010018f:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f0100192:	83 ec 0c             	sub    $0xc,%esp
f0100195:	68 f1 33 13 f0       	push   $0xf01333f1
f010019a:	e8 6f 0b 00 00       	call   f0100d0e <cprintf>
f010019f:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f01001a2:	83 ec 0c             	sub    $0xc,%esp
f01001a5:	68 f8 33 13 f0       	push   $0xf01333f8
f01001aa:	e8 5f 0b 00 00       	call   f0100d0e <cprintf>
f01001af:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01001b2:	83 ec 0c             	sub    $0xc,%esp
f01001b5:	68 40 34 13 f0       	push   $0xf0133440
f01001ba:	e8 4f 0b 00 00       	call   f0100d0e <cprintf>
f01001bf:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f01001c2:	83 ec 0c             	sub    $0xc,%esp
f01001c5:	68 88 34 13 f0       	push   $0xf0133488
f01001ca:	e8 3f 0b 00 00       	call   f0100d0e <cprintf>
f01001cf:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01001d2:	83 ec 0c             	sub    $0xc,%esp
f01001d5:	68 40 34 13 f0       	push   $0xf0133440
f01001da:	e8 2f 0b 00 00       	call   f0100d0e <cprintf>
f01001df:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f01001e2:	83 ec 0c             	sub    $0xc,%esp
f01001e5:	68 f8 33 13 f0       	push   $0xf01333f8
f01001ea:	e8 1f 0b 00 00       	call   f0100d0e <cprintf>
f01001ef:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f01001f2:	83 ec 0c             	sub    $0xc,%esp
f01001f5:	68 cd 34 13 f0       	push   $0xf01334cd
f01001fa:	e8 0f 0b 00 00       	call   f0100d0e <cprintf>
f01001ff:	83 c4 10             	add    $0x10,%esp
}
f0100202:	90                   	nop
f0100203:	c9                   	leave  
f0100204:	c3                   	ret    

f0100205 <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f0100205:	55                   	push   %ebp
f0100206:	89 e5                	mov    %esp,%ebp
f0100208:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f010020b:	8b 45 10             	mov    0x10(%ebp),%eax
f010020e:	a3 a0 1b 86 f0       	mov    %eax,0xf0861ba0

	va_start(ap, fmt);
f0100213:	8d 45 10             	lea    0x10(%ebp),%eax
f0100216:	83 c0 04             	add    $0x4,%eax
f0100219:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f010021c:	83 ec 04             	sub    $0x4,%esp
f010021f:	ff 75 0c             	pushl  0xc(%ebp)
f0100222:	ff 75 08             	pushl  0x8(%ebp)
f0100225:	68 d2 34 13 f0       	push   $0xf01334d2
f010022a:	e8 df 0a 00 00       	call   f0100d0e <cprintf>
f010022f:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100232:	8b 45 10             	mov    0x10(%ebp),%eax
f0100235:	83 ec 08             	sub    $0x8,%esp
f0100238:	ff 75 f4             	pushl  -0xc(%ebp)
f010023b:	50                   	push   %eax
f010023c:	e8 a4 0a 00 00       	call   f0100ce5 <vcprintf>
f0100241:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100244:	83 ec 0c             	sub    $0xc,%esp
f0100247:	68 eb 34 13 f0       	push   $0xf01334eb
f010024c:	e8 bd 0a 00 00       	call   f0100d0e <cprintf>
f0100251:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f0100254:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f0100259:	85 c0                	test   %eax,%eax
f010025b:	74 12                	je     f010026f <_panic+0x6a>
f010025d:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f0100262:	8b 40 54             	mov    0x54(%eax),%eax
f0100265:	83 f8 02             	cmp    $0x2,%eax
f0100268:	75 05                	jne    f010026f <_panic+0x6a>
	{
		//2015
		env_exit();
f010026a:	e8 c2 9a 00 00       	call   f0109d31 <env_exit>
		//env_run_cmd_prmpt() ;
	}

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010026f:	a1 54 27 86 f0       	mov    0xf0862754,%eax
f0100274:	83 f8 ff             	cmp    $0xffffffff,%eax
f0100277:	74 1b                	je     f0100294 <_panic+0x8f>
	{
		cprintf("scheduler_status=%d\n", scheduler_status);
f0100279:	a1 54 27 86 f0       	mov    0xf0862754,%eax
f010027e:	83 ec 08             	sub    $0x8,%esp
f0100281:	50                   	push   %eax
f0100282:	68 ed 34 13 f0       	push   $0xf01334ed
f0100287:	e8 82 0a 00 00       	call   f0100d0e <cprintf>
f010028c:	83 c4 10             	add    $0x10,%esp
		//2015
		fos_scheduler();
f010028f:	e8 70 44 00 00       	call   f0104704 <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f0100294:	c7 05 f4 1d 86 f0 00 	movl   $0x0,0xf0861df4
f010029b:	00 00 00 
		lcr3(phys_page_directory);
f010029e:	a1 a8 27 86 f0       	mov    0xf08627a8,%eax
f01002a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01002a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01002a9:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f01002ac:	83 ec 0c             	sub    $0xc,%esp
f01002af:	6a 00                	push   $0x0
f01002b1:	e8 7e 0a 00 00       	call   f0100d34 <run_command_prompt>
f01002b6:	83 c4 10             	add    $0x10,%esp
f01002b9:	eb f1                	jmp    f01002ac <_panic+0xa7>

f01002bb <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f01002bb:	55                   	push   %ebp
f01002bc:	89 e5                	mov    %esp,%ebp
f01002be:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01002c1:	8b 45 10             	mov    0x10(%ebp),%eax
f01002c4:	a3 a0 1b 86 f0       	mov    %eax,0xf0861ba0

	va_start(ap, fmt);
f01002c9:	8d 45 10             	lea    0x10(%ebp),%eax
f01002cc:	83 c0 04             	add    $0x4,%eax
f01002cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01002d2:	83 ec 04             	sub    $0x4,%esp
f01002d5:	ff 75 0c             	pushl  0xc(%ebp)
f01002d8:	ff 75 08             	pushl  0x8(%ebp)
f01002db:	68 d2 34 13 f0       	push   $0xf01334d2
f01002e0:	e8 29 0a 00 00       	call   f0100d0e <cprintf>
f01002e5:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01002e8:	8b 45 10             	mov    0x10(%ebp),%eax
f01002eb:	83 ec 08             	sub    $0x8,%esp
f01002ee:	ff 75 f4             	pushl  -0xc(%ebp)
f01002f1:	50                   	push   %eax
f01002f2:	e8 ee 09 00 00       	call   f0100ce5 <vcprintf>
f01002f7:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01002fa:	83 ec 0c             	sub    $0xc,%esp
f01002fd:	68 eb 34 13 f0       	push   $0xf01334eb
f0100302:	e8 07 0a 00 00       	call   f0100d0e <cprintf>
f0100307:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010030a:	a1 54 27 86 f0       	mov    0xf0862754,%eax
f010030f:	83 f8 ff             	cmp    $0xffffffff,%eax
f0100312:	74 27                	je     f010033b <_panic_all+0x80>
	{
		//exit all ready env's
		sched_exit_all_ready_envs();
f0100314:	e8 a0 51 00 00       	call   f01054b9 <sched_exit_all_ready_envs>
		if (curenv != NULL)
f0100319:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010031e:	85 c0                	test   %eax,%eax
f0100320:	74 14                	je     f0100336 <_panic_all+0x7b>
		{
			//cprintf("exit curenv...........\n");
			sched_exit_env(curenv->env_id);
f0100322:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f0100327:	8b 40 4c             	mov    0x4c(%eax),%eax
f010032a:	83 ec 0c             	sub    $0xc,%esp
f010032d:	50                   	push   %eax
f010032e:	e8 4d 4f 00 00       	call   f0105280 <sched_exit_env>
f0100333:	83 c4 10             	add    $0x10,%esp
			//env_run_cmd_prmpt() ;
		}

		fos_scheduler();
f0100336:	e8 c9 43 00 00       	call   f0104704 <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f010033b:	c7 05 f4 1d 86 f0 00 	movl   $0x0,0xf0861df4
f0100342:	00 00 00 
		lcr3(phys_page_directory);
f0100345:	a1 a8 27 86 f0       	mov    0xf08627a8,%eax
f010034a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010034d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100350:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f0100353:	83 ec 0c             	sub    $0xc,%esp
f0100356:	6a 00                	push   $0x0
f0100358:	e8 d7 09 00 00       	call   f0100d34 <run_command_prompt>
f010035d:	83 c4 10             	add    $0x10,%esp
f0100360:	eb f1                	jmp    f0100353 <_panic_all+0x98>

f0100362 <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f0100362:	55                   	push   %ebp
f0100363:	89 e5                	mov    %esp,%ebp
f0100365:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100368:	8b 45 10             	mov    0x10(%ebp),%eax
f010036b:	a3 a0 1b 86 f0       	mov    %eax,0xf0861ba0

	va_start(ap, fmt);
f0100370:	8d 45 10             	lea    0x10(%ebp),%eax
f0100373:	83 c0 04             	add    $0x4,%eax
f0100376:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f0100379:	83 ec 04             	sub    $0x4,%esp
f010037c:	ff 75 0c             	pushl  0xc(%ebp)
f010037f:	ff 75 08             	pushl  0x8(%ebp)
f0100382:	68 d2 34 13 f0       	push   $0xf01334d2
f0100387:	e8 82 09 00 00       	call   f0100d0e <cprintf>
f010038c:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f010038f:	8b 45 10             	mov    0x10(%ebp),%eax
f0100392:	83 ec 08             	sub    $0x8,%esp
f0100395:	ff 75 f4             	pushl  -0xc(%ebp)
f0100398:	50                   	push   %eax
f0100399:	e8 47 09 00 00       	call   f0100ce5 <vcprintf>
f010039e:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01003a1:	83 ec 0c             	sub    $0xc,%esp
f01003a4:	68 eb 34 13 f0       	push   $0xf01334eb
f01003a9:	e8 60 09 00 00       	call   f0100d0e <cprintf>
f01003ae:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01003b1:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f01003b6:	85 c0                	test   %eax,%eax
f01003b8:	74 28                	je     f01003e2 <_panic_into_prompt+0x80>
f01003ba:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f01003bf:	8b 40 54             	mov    0x54(%eax),%eax
f01003c2:	83 f8 02             	cmp    $0x2,%eax
f01003c5:	75 1b                	jne    f01003e2 <_panic_into_prompt+0x80>
	{
		sched_insert_exit(curenv);
f01003c7:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f01003cc:	83 ec 0c             	sub    $0xc,%esp
f01003cf:	50                   	push   %eax
f01003d0:	e8 63 47 00 00       	call   f0104b38 <sched_insert_exit>
f01003d5:	83 c4 10             	add    $0x10,%esp
		curenv = NULL;
f01003d8:	c7 05 f4 1d 86 f0 00 	movl   $0x0,0xf0861df4
f01003df:	00 00 00 
	}

	lcr3(phys_page_directory);
f01003e2:	a1 a8 27 86 f0       	mov    0xf08627a8,%eax
f01003e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01003ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01003ed:	0f 22 d8             	mov    %eax,%cr3

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f01003f0:	a1 54 27 86 f0       	mov    0xf0862754,%eax
f01003f5:	83 f8 ff             	cmp    $0xffffffff,%eax
f01003f8:	74 0a                	je     f0100404 <_panic_into_prompt+0xa2>
	{
		scheduler_status = SCH_STOPPED;
f01003fa:	c7 05 54 27 86 f0 00 	movl   $0x0,0xf0862754
f0100401:	00 00 00 
	}
	while (1)
		run_command_prompt(NULL);
f0100404:	83 ec 0c             	sub    $0xc,%esp
f0100407:	6a 00                	push   $0x0
f0100409:	e8 26 09 00 00       	call   f0100d34 <run_command_prompt>
f010040e:	83 c4 10             	add    $0x10,%esp
f0100411:	eb f1                	jmp    f0100404 <_panic_into_prompt+0xa2>

f0100413 <_warn>:
}

/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f0100413:	55                   	push   %ebp
f0100414:	89 e5                	mov    %esp,%ebp
f0100416:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0100419:	8d 45 10             	lea    0x10(%ebp),%eax
f010041c:	83 c0 04             	add    $0x4,%eax
f010041f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f0100422:	83 ec 04             	sub    $0x4,%esp
f0100425:	ff 75 0c             	pushl  0xc(%ebp)
f0100428:	ff 75 08             	pushl  0x8(%ebp)
f010042b:	68 02 35 13 f0       	push   $0xf0133502
f0100430:	e8 d9 08 00 00       	call   f0100d0e <cprintf>
f0100435:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100438:	8b 45 10             	mov    0x10(%ebp),%eax
f010043b:	83 ec 08             	sub    $0x8,%esp
f010043e:	ff 75 f4             	pushl  -0xc(%ebp)
f0100441:	50                   	push   %eax
f0100442:	e8 9e 08 00 00       	call   f0100ce5 <vcprintf>
f0100447:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010044a:	83 ec 0c             	sub    $0xc,%esp
f010044d:	68 eb 34 13 f0       	push   $0xf01334eb
f0100452:	e8 b7 08 00 00       	call   f0100d0e <cprintf>
f0100457:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f010045a:	90                   	nop
f010045b:	c9                   	leave  
f010045c:	c3                   	ret    

f010045d <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f010045d:	55                   	push   %ebp
f010045e:	89 e5                	mov    %esp,%ebp
f0100460:	83 ec 10             	sub    $0x10,%esp
f0100463:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010046a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010046d:	89 c2                	mov    %eax,%edx
f010046f:	ec                   	in     (%dx),%al
f0100470:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0100473:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f0100476:	0f b6 c0             	movzbl %al,%eax
f0100479:	83 e0 01             	and    $0x1,%eax
f010047c:	85 c0                	test   %eax,%eax
f010047e:	75 07                	jne    f0100487 <serial_proc_data+0x2a>
		return -1;
f0100480:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100485:	eb 16                	jmp    f010049d <serial_proc_data+0x40>
f0100487:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010048e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100491:	89 c2                	mov    %eax,%edx
f0100493:	ec                   	in     (%dx),%al
f0100494:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f0100497:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f010049a:	0f b6 c0             	movzbl %al,%eax
}
f010049d:	c9                   	leave  
f010049e:	c3                   	ret    

f010049f <serial_intr>:

void
serial_intr(void)
{
f010049f:	55                   	push   %ebp
f01004a0:	89 e5                	mov    %esp,%ebp
f01004a2:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f01004a5:	a1 c0 1b 86 f0       	mov    0xf0861bc0,%eax
f01004aa:	85 c0                	test   %eax,%eax
f01004ac:	74 10                	je     f01004be <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f01004ae:	83 ec 0c             	sub    $0xc,%esp
f01004b1:	68 5d 04 10 f0       	push   $0xf010045d
f01004b6:	e8 e4 05 00 00       	call   f0100a9f <cons_intr>
f01004bb:	83 c4 10             	add    $0x10,%esp
}
f01004be:	90                   	nop
f01004bf:	c9                   	leave  
f01004c0:	c3                   	ret    

f01004c1 <serial_init>:

void
serial_init(void)
{
f01004c1:	55                   	push   %ebp
f01004c2:	89 e5                	mov    %esp,%ebp
f01004c4:	83 ec 40             	sub    $0x40,%esp
f01004c7:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%ebp)
f01004ce:	c6 45 ce 00          	movb   $0x0,-0x32(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01004d2:	8a 45 ce             	mov    -0x32(%ebp),%al
f01004d5:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01004d8:	ee                   	out    %al,(%dx)
f01004d9:	c7 45 f8 fb 03 00 00 	movl   $0x3fb,-0x8(%ebp)
f01004e0:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
f01004e4:	8a 45 cf             	mov    -0x31(%ebp),%al
f01004e7:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01004ea:	ee                   	out    %al,(%dx)
f01004eb:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%ebp)
f01004f2:	c6 45 d0 0c          	movb   $0xc,-0x30(%ebp)
f01004f6:	8a 45 d0             	mov    -0x30(%ebp),%al
f01004f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01004fc:	ee                   	out    %al,(%dx)
f01004fd:	c7 45 f0 f9 03 00 00 	movl   $0x3f9,-0x10(%ebp)
f0100504:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
f0100508:	8a 45 d1             	mov    -0x2f(%ebp),%al
f010050b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010050e:	ee                   	out    %al,(%dx)
f010050f:	c7 45 ec fb 03 00 00 	movl   $0x3fb,-0x14(%ebp)
f0100516:	c6 45 d2 03          	movb   $0x3,-0x2e(%ebp)
f010051a:	8a 45 d2             	mov    -0x2e(%ebp),%al
f010051d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0100520:	ee                   	out    %al,(%dx)
f0100521:	c7 45 e8 fc 03 00 00 	movl   $0x3fc,-0x18(%ebp)
f0100528:	c6 45 d3 00          	movb   $0x0,-0x2d(%ebp)
f010052c:	8a 45 d3             	mov    -0x2d(%ebp),%al
f010052f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100532:	ee                   	out    %al,(%dx)
f0100533:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%ebp)
f010053a:	c6 45 d4 01          	movb   $0x1,-0x2c(%ebp)
f010053e:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0100541:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100544:	ee                   	out    %al,(%dx)
f0100545:	c7 45 e0 fd 03 00 00 	movl   $0x3fd,-0x20(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010054c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010054f:	89 c2                	mov    %eax,%edx
f0100551:	ec                   	in     (%dx),%al
f0100552:	88 45 d5             	mov    %al,-0x2b(%ebp)
	return data;
f0100555:	8a 45 d5             	mov    -0x2b(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f0100558:	3c ff                	cmp    $0xff,%al
f010055a:	0f 95 c0             	setne  %al
f010055d:	0f b6 c0             	movzbl %al,%eax
f0100560:	a3 c0 1b 86 f0       	mov    %eax,0xf0861bc0
f0100565:	c7 45 dc fa 03 00 00 	movl   $0x3fa,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010056c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010056f:	89 c2                	mov    %eax,%edx
f0100571:	ec                   	in     (%dx),%al
f0100572:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0100575:	c7 45 d8 f8 03 00 00 	movl   $0x3f8,-0x28(%ebp)
f010057c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010057f:	89 c2                	mov    %eax,%edx
f0100581:	ec                   	in     (%dx),%al
f0100582:	88 45 d7             	mov    %al,-0x29(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

}
f0100585:	90                   	nop
f0100586:	c9                   	leave  
f0100587:	c3                   	ret    

f0100588 <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f0100588:	55                   	push   %ebp
f0100589:	89 e5                	mov    %esp,%ebp
f010058b:	83 ec 20             	sub    $0x20,%esp
f010058e:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f0100595:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100598:	89 c2                	mov    %eax,%edx
f010059a:	ec                   	in     (%dx),%al
f010059b:	88 45 ec             	mov    %al,-0x14(%ebp)
f010059e:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f01005a5:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01005a8:	89 c2                	mov    %eax,%edx
f01005aa:	ec                   	in     (%dx),%al
f01005ab:	88 45 ed             	mov    %al,-0x13(%ebp)
f01005ae:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f01005b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01005b8:	89 c2                	mov    %eax,%edx
f01005ba:	ec                   	in     (%dx),%al
f01005bb:	88 45 ee             	mov    %al,-0x12(%ebp)
f01005be:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f01005c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01005c8:	89 c2                	mov    %eax,%edx
f01005ca:	ec                   	in     (%dx),%al
f01005cb:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f01005ce:	90                   	nop
f01005cf:	c9                   	leave  
f01005d0:	c3                   	ret    

f01005d1 <lpt_putc>:

static void
lpt_putc(int c)
{
f01005d1:	55                   	push   %ebp
f01005d2:	89 e5                	mov    %esp,%ebp
f01005d4:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01005d7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01005de:	eb 08                	jmp    f01005e8 <lpt_putc+0x17>
		delay();
f01005e0:	e8 a3 ff ff ff       	call   f0100588 <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01005e5:	ff 45 fc             	incl   -0x4(%ebp)
f01005e8:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f01005ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01005f2:	89 c2                	mov    %eax,%edx
f01005f4:	ec                   	in     (%dx),%al
f01005f5:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f01005f8:	8a 45 eb             	mov    -0x15(%ebp),%al
f01005fb:	84 c0                	test   %al,%al
f01005fd:	78 09                	js     f0100608 <lpt_putc+0x37>
f01005ff:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f0100606:	7e d8                	jle    f01005e0 <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f0100608:	8b 45 08             	mov    0x8(%ebp),%eax
f010060b:	0f b6 c0             	movzbl %al,%eax
f010060e:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f0100615:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100618:	8a 45 e8             	mov    -0x18(%ebp),%al
f010061b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010061e:	ee                   	out    %al,(%dx)
f010061f:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f0100626:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f010062a:	8a 45 e9             	mov    -0x17(%ebp),%al
f010062d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100630:	ee                   	out    %al,(%dx)
f0100631:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f0100638:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f010063c:	8a 45 ea             	mov    -0x16(%ebp),%al
f010063f:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100642:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f0100643:	90                   	nop
f0100644:	c9                   	leave  
f0100645:	c3                   	ret    

f0100646 <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f0100646:	55                   	push   %ebp
f0100647:	89 e5                	mov    %esp,%ebp
f0100649:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f010064c:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f0100653:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100656:	66 8b 00             	mov    (%eax),%ax
f0100659:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f010065d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100660:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f0100665:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100668:	66 8b 00             	mov    (%eax),%ax
f010066b:	66 3d 5a a5          	cmp    $0xa55a,%ax
f010066f:	74 13                	je     f0100684 <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f0100671:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f0100678:	c7 05 c4 1b 86 f0 b4 	movl   $0x3b4,0xf0861bc4
f010067f:	03 00 00 
f0100682:	eb 14                	jmp    f0100698 <cga_init+0x52>
	} else {
		*cp = was;
f0100684:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0100687:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f010068b:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f010068e:	c7 05 c4 1b 86 f0 d4 	movl   $0x3d4,0xf0861bc4
f0100695:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f0100698:	a1 c4 1b 86 f0       	mov    0xf0861bc4,%eax
f010069d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01006a0:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f01006a4:	8a 45 e0             	mov    -0x20(%ebp),%al
f01006a7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01006aa:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f01006ab:	a1 c4 1b 86 f0       	mov    0xf0861bc4,%eax
f01006b0:	40                   	inc    %eax
f01006b1:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01006b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01006b7:	89 c2                	mov    %eax,%edx
f01006b9:	ec                   	in     (%dx),%al
f01006ba:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f01006bd:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01006c0:	0f b6 c0             	movzbl %al,%eax
f01006c3:	c1 e0 08             	shl    $0x8,%eax
f01006c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f01006c9:	a1 c4 1b 86 f0       	mov    0xf0861bc4,%eax
f01006ce:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01006d1:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01006d5:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01006d8:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01006db:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f01006dc:	a1 c4 1b 86 f0       	mov    0xf0861bc4,%eax
f01006e1:	40                   	inc    %eax
f01006e2:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01006e5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01006e8:	89 c2                	mov    %eax,%edx
f01006ea:	ec                   	in     (%dx),%al
f01006eb:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f01006ee:	8a 45 e3             	mov    -0x1d(%ebp),%al
f01006f1:	0f b6 c0             	movzbl %al,%eax
f01006f4:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f01006f7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01006fa:	a3 c8 1b 86 f0       	mov    %eax,0xf0861bc8
	crt_pos = pos;
f01006ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100702:	66 a3 cc 1b 86 f0    	mov    %ax,0xf0861bcc
}
f0100708:	90                   	nop
f0100709:	c9                   	leave  
f010070a:	c3                   	ret    

f010070b <cga_putc>:



void
cga_putc(int c)
{
f010070b:	55                   	push   %ebp
f010070c:	89 e5                	mov    %esp,%ebp
f010070e:	53                   	push   %ebx
f010070f:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f0100712:	8b 45 08             	mov    0x8(%ebp),%eax
f0100715:	b0 00                	mov    $0x0,%al
f0100717:	85 c0                	test   %eax,%eax
f0100719:	75 07                	jne    f0100722 <cga_putc+0x17>
		c |= 0x0700;
f010071b:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f0100722:	8b 45 08             	mov    0x8(%ebp),%eax
f0100725:	0f b6 c0             	movzbl %al,%eax
f0100728:	83 f8 09             	cmp    $0x9,%eax
f010072b:	0f 84 94 00 00 00    	je     f01007c5 <cga_putc+0xba>
f0100731:	83 f8 09             	cmp    $0x9,%eax
f0100734:	7f 0a                	jg     f0100740 <cga_putc+0x35>
f0100736:	83 f8 08             	cmp    $0x8,%eax
f0100739:	74 14                	je     f010074f <cga_putc+0x44>
f010073b:	e9 c8 00 00 00       	jmp    f0100808 <cga_putc+0xfd>
f0100740:	83 f8 0a             	cmp    $0xa,%eax
f0100743:	74 49                	je     f010078e <cga_putc+0x83>
f0100745:	83 f8 0d             	cmp    $0xd,%eax
f0100748:	74 53                	je     f010079d <cga_putc+0x92>
f010074a:	e9 b9 00 00 00       	jmp    f0100808 <cga_putc+0xfd>
	case '\b':
		if (crt_pos > 0) {
f010074f:	66 a1 cc 1b 86 f0    	mov    0xf0861bcc,%ax
f0100755:	66 85 c0             	test   %ax,%ax
f0100758:	0f 84 d0 00 00 00    	je     f010082e <cga_putc+0x123>
			crt_pos--;
f010075e:	66 a1 cc 1b 86 f0    	mov    0xf0861bcc,%ax
f0100764:	48                   	dec    %eax
f0100765:	66 a3 cc 1b 86 f0    	mov    %ax,0xf0861bcc
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f010076b:	8b 15 c8 1b 86 f0    	mov    0xf0861bc8,%edx
f0100771:	66 a1 cc 1b 86 f0    	mov    0xf0861bcc,%ax
f0100777:	0f b7 c0             	movzwl %ax,%eax
f010077a:	01 c0                	add    %eax,%eax
f010077c:	01 c2                	add    %eax,%edx
f010077e:	8b 45 08             	mov    0x8(%ebp),%eax
f0100781:	b0 00                	mov    $0x0,%al
f0100783:	83 c8 20             	or     $0x20,%eax
f0100786:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f0100789:	e9 a0 00 00 00       	jmp    f010082e <cga_putc+0x123>
	case '\n':
		crt_pos += CRT_COLS;
f010078e:	66 a1 cc 1b 86 f0    	mov    0xf0861bcc,%ax
f0100794:	83 c0 50             	add    $0x50,%eax
f0100797:	66 a3 cc 1b 86 f0    	mov    %ax,0xf0861bcc
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f010079d:	66 8b 0d cc 1b 86 f0 	mov    0xf0861bcc,%cx
f01007a4:	66 a1 cc 1b 86 f0    	mov    0xf0861bcc,%ax
f01007aa:	bb 50 00 00 00       	mov    $0x50,%ebx
f01007af:	ba 00 00 00 00       	mov    $0x0,%edx
f01007b4:	66 f7 f3             	div    %bx
f01007b7:	89 d0                	mov    %edx,%eax
f01007b9:	29 c1                	sub    %eax,%ecx
f01007bb:	89 c8                	mov    %ecx,%eax
f01007bd:	66 a3 cc 1b 86 f0    	mov    %ax,0xf0861bcc
		break;
f01007c3:	eb 6a                	jmp    f010082f <cga_putc+0x124>
	case '\t':
		cons_putc(' ');
f01007c5:	83 ec 0c             	sub    $0xc,%esp
f01007c8:	6a 20                	push   $0x20
f01007ca:	e8 69 04 00 00       	call   f0100c38 <cons_putc>
f01007cf:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007d2:	83 ec 0c             	sub    $0xc,%esp
f01007d5:	6a 20                	push   $0x20
f01007d7:	e8 5c 04 00 00       	call   f0100c38 <cons_putc>
f01007dc:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007df:	83 ec 0c             	sub    $0xc,%esp
f01007e2:	6a 20                	push   $0x20
f01007e4:	e8 4f 04 00 00       	call   f0100c38 <cons_putc>
f01007e9:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007ec:	83 ec 0c             	sub    $0xc,%esp
f01007ef:	6a 20                	push   $0x20
f01007f1:	e8 42 04 00 00       	call   f0100c38 <cons_putc>
f01007f6:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007f9:	83 ec 0c             	sub    $0xc,%esp
f01007fc:	6a 20                	push   $0x20
f01007fe:	e8 35 04 00 00       	call   f0100c38 <cons_putc>
f0100803:	83 c4 10             	add    $0x10,%esp
		break;
f0100806:	eb 27                	jmp    f010082f <cga_putc+0x124>
	default:
		crt_buf[crt_pos++] = c;		/* write the character */
f0100808:	8b 0d c8 1b 86 f0    	mov    0xf0861bc8,%ecx
f010080e:	66 a1 cc 1b 86 f0    	mov    0xf0861bcc,%ax
f0100814:	8d 50 01             	lea    0x1(%eax),%edx
f0100817:	66 89 15 cc 1b 86 f0 	mov    %dx,0xf0861bcc
f010081e:	0f b7 c0             	movzwl %ax,%eax
f0100821:	01 c0                	add    %eax,%eax
f0100823:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0100826:	8b 45 08             	mov    0x8(%ebp),%eax
f0100829:	66 89 02             	mov    %ax,(%edx)
		break;
f010082c:	eb 01                	jmp    f010082f <cga_putc+0x124>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f010082e:	90                   	nop
		crt_buf[crt_pos++] = c;		/* write the character */
		break;
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f010082f:	66 a1 cc 1b 86 f0    	mov    0xf0861bcc,%ax
f0100835:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100839:	76 58                	jbe    f0100893 <cga_putc+0x188>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f010083b:	a1 c8 1b 86 f0       	mov    0xf0861bc8,%eax
f0100840:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f0100846:	a1 c8 1b 86 f0       	mov    0xf0861bc8,%eax
f010084b:	83 ec 04             	sub    $0x4,%esp
f010084e:	68 00 0f 00 00       	push   $0xf00
f0100853:	52                   	push   %edx
f0100854:	50                   	push   %eax
f0100855:	e8 cc 0f 03 00       	call   f0131826 <memcpy>
f010085a:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f010085d:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f0100864:	eb 15                	jmp    f010087b <cga_putc+0x170>
			crt_buf[i] = 0x0700 | ' ';
f0100866:	8b 15 c8 1b 86 f0    	mov    0xf0861bc8,%edx
f010086c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010086f:	01 c0                	add    %eax,%eax
f0100871:	01 d0                	add    %edx,%eax
f0100873:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f0100878:	ff 45 f4             	incl   -0xc(%ebp)
f010087b:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f0100882:	7e e2                	jle    f0100866 <cga_putc+0x15b>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f0100884:	66 a1 cc 1b 86 f0    	mov    0xf0861bcc,%ax
f010088a:	83 e8 50             	sub    $0x50,%eax
f010088d:	66 a3 cc 1b 86 f0    	mov    %ax,0xf0861bcc
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f0100893:	a1 c4 1b 86 f0       	mov    0xf0861bc4,%eax
f0100898:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010089b:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010089f:	8a 45 e0             	mov    -0x20(%ebp),%al
f01008a2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01008a5:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f01008a6:	66 a1 cc 1b 86 f0    	mov    0xf0861bcc,%ax
f01008ac:	66 c1 e8 08          	shr    $0x8,%ax
f01008b0:	0f b6 c0             	movzbl %al,%eax
f01008b3:	8b 15 c4 1b 86 f0    	mov    0xf0861bc4,%edx
f01008b9:	42                   	inc    %edx
f01008ba:	89 55 ec             	mov    %edx,-0x14(%ebp)
f01008bd:	88 45 e1             	mov    %al,-0x1f(%ebp)
f01008c0:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01008c3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01008c6:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f01008c7:	a1 c4 1b 86 f0       	mov    0xf0861bc4,%eax
f01008cc:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01008cf:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f01008d3:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01008d6:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01008d9:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f01008da:	66 a1 cc 1b 86 f0    	mov    0xf0861bcc,%ax
f01008e0:	0f b6 c0             	movzbl %al,%eax
f01008e3:	8b 15 c4 1b 86 f0    	mov    0xf0861bc4,%edx
f01008e9:	42                   	inc    %edx
f01008ea:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f01008ed:	88 45 e3             	mov    %al,-0x1d(%ebp)
f01008f0:	8a 45 e3             	mov    -0x1d(%ebp),%al
f01008f3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01008f6:	ee                   	out    %al,(%dx)
}
f01008f7:	90                   	nop
f01008f8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01008fb:	c9                   	leave  
f01008fc:	c3                   	ret    

f01008fd <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f01008fd:	55                   	push   %ebp
f01008fe:	89 e5                	mov    %esp,%ebp
f0100900:	83 ec 28             	sub    $0x28,%esp
f0100903:	c7 45 e4 64 00 00 00 	movl   $0x64,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010090a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010090d:	89 c2                	mov    %eax,%edx
f010090f:	ec                   	in     (%dx),%al
f0100910:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f0100913:	8a 45 e3             	mov    -0x1d(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f0100916:	0f b6 c0             	movzbl %al,%eax
f0100919:	83 e0 01             	and    $0x1,%eax
f010091c:	85 c0                	test   %eax,%eax
f010091e:	75 0a                	jne    f010092a <kbd_proc_data+0x2d>
		return -1;
f0100920:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100925:	e9 54 01 00 00       	jmp    f0100a7e <kbd_proc_data+0x181>
f010092a:	c7 45 ec 60 00 00 00 	movl   $0x60,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100931:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100934:	89 c2                	mov    %eax,%edx
f0100936:	ec                   	in     (%dx),%al
f0100937:	88 45 e2             	mov    %al,-0x1e(%ebp)
	return data;
f010093a:	8a 45 e2             	mov    -0x1e(%ebp),%al

	data = inb(KBDATAP);
f010093d:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f0100940:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f0100944:	75 17                	jne    f010095d <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f0100946:	a1 e8 1d 86 f0       	mov    0xf0861de8,%eax
f010094b:	83 c8 40             	or     $0x40,%eax
f010094e:	a3 e8 1d 86 f0       	mov    %eax,0xf0861de8
		return 0;
f0100953:	b8 00 00 00 00       	mov    $0x0,%eax
f0100958:	e9 21 01 00 00       	jmp    f0100a7e <kbd_proc_data+0x181>
	} else if (data & 0x80) {
f010095d:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100960:	84 c0                	test   %al,%al
f0100962:	79 44                	jns    f01009a8 <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f0100964:	a1 e8 1d 86 f0       	mov    0xf0861de8,%eax
f0100969:	83 e0 40             	and    $0x40,%eax
f010096c:	85 c0                	test   %eax,%eax
f010096e:	75 08                	jne    f0100978 <kbd_proc_data+0x7b>
f0100970:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100973:	83 e0 7f             	and    $0x7f,%eax
f0100976:	eb 03                	jmp    f010097b <kbd_proc_data+0x7e>
f0100978:	8a 45 f3             	mov    -0xd(%ebp),%al
f010097b:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f010097e:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100982:	8a 80 20 20 19 f0    	mov    -0xfe6dfe0(%eax),%al
f0100988:	83 c8 40             	or     $0x40,%eax
f010098b:	0f b6 c0             	movzbl %al,%eax
f010098e:	f7 d0                	not    %eax
f0100990:	89 c2                	mov    %eax,%edx
f0100992:	a1 e8 1d 86 f0       	mov    0xf0861de8,%eax
f0100997:	21 d0                	and    %edx,%eax
f0100999:	a3 e8 1d 86 f0       	mov    %eax,0xf0861de8
		return 0;
f010099e:	b8 00 00 00 00       	mov    $0x0,%eax
f01009a3:	e9 d6 00 00 00       	jmp    f0100a7e <kbd_proc_data+0x181>
	} else if (shift & E0ESC) {
f01009a8:	a1 e8 1d 86 f0       	mov    0xf0861de8,%eax
f01009ad:	83 e0 40             	and    $0x40,%eax
f01009b0:	85 c0                	test   %eax,%eax
f01009b2:	74 11                	je     f01009c5 <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f01009b4:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f01009b8:	a1 e8 1d 86 f0       	mov    0xf0861de8,%eax
f01009bd:	83 e0 bf             	and    $0xffffffbf,%eax
f01009c0:	a3 e8 1d 86 f0       	mov    %eax,0xf0861de8
	}

	shift |= shiftcode[data];
f01009c5:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01009c9:	8a 80 20 20 19 f0    	mov    -0xfe6dfe0(%eax),%al
f01009cf:	0f b6 d0             	movzbl %al,%edx
f01009d2:	a1 e8 1d 86 f0       	mov    0xf0861de8,%eax
f01009d7:	09 d0                	or     %edx,%eax
f01009d9:	a3 e8 1d 86 f0       	mov    %eax,0xf0861de8
	shift ^= togglecode[data];
f01009de:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01009e2:	8a 80 20 21 19 f0    	mov    -0xfe6dee0(%eax),%al
f01009e8:	0f b6 d0             	movzbl %al,%edx
f01009eb:	a1 e8 1d 86 f0       	mov    0xf0861de8,%eax
f01009f0:	31 d0                	xor    %edx,%eax
f01009f2:	a3 e8 1d 86 f0       	mov    %eax,0xf0861de8

	c = charcode[shift & (CTL | SHIFT)][data];
f01009f7:	a1 e8 1d 86 f0       	mov    0xf0861de8,%eax
f01009fc:	83 e0 03             	and    $0x3,%eax
f01009ff:	8b 14 85 20 25 19 f0 	mov    -0xfe6dae0(,%eax,4),%edx
f0100a06:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a0a:	01 d0                	add    %edx,%eax
f0100a0c:	8a 00                	mov    (%eax),%al
f0100a0e:	0f b6 c0             	movzbl %al,%eax
f0100a11:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (shift & CAPSLOCK) {
f0100a14:	a1 e8 1d 86 f0       	mov    0xf0861de8,%eax
f0100a19:	83 e0 08             	and    $0x8,%eax
f0100a1c:	85 c0                	test   %eax,%eax
f0100a1e:	74 22                	je     f0100a42 <kbd_proc_data+0x145>
		if ('a' <= c && c <= 'z')
f0100a20:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100a24:	7e 0c                	jle    f0100a32 <kbd_proc_data+0x135>
f0100a26:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f0100a2a:	7f 06                	jg     f0100a32 <kbd_proc_data+0x135>
			c += 'A' - 'a';
f0100a2c:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f0100a30:	eb 10                	jmp    f0100a42 <kbd_proc_data+0x145>
		else if ('A' <= c && c <= 'Z')
f0100a32:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f0100a36:	7e 0a                	jle    f0100a42 <kbd_proc_data+0x145>
f0100a38:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f0100a3c:	7f 04                	jg     f0100a42 <kbd_proc_data+0x145>
			c += 'a' - 'A';
f0100a3e:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f0100a42:	a1 e8 1d 86 f0       	mov    0xf0861de8,%eax
f0100a47:	f7 d0                	not    %eax
f0100a49:	83 e0 06             	and    $0x6,%eax
f0100a4c:	85 c0                	test   %eax,%eax
f0100a4e:	75 2b                	jne    f0100a7b <kbd_proc_data+0x17e>
f0100a50:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100a57:	75 22                	jne    f0100a7b <kbd_proc_data+0x17e>
		cprintf("Rebooting!\n");
f0100a59:	83 ec 0c             	sub    $0xc,%esp
f0100a5c:	68 1d 35 13 f0       	push   $0xf013351d
f0100a61:	e8 a8 02 00 00       	call   f0100d0e <cprintf>
f0100a66:	83 c4 10             	add    $0x10,%esp
f0100a69:	c7 45 e8 92 00 00 00 	movl   $0x92,-0x18(%ebp)
f0100a70:	c6 45 e1 03          	movb   $0x3,-0x1f(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100a74:	8a 45 e1             	mov    -0x1f(%ebp),%al
f0100a77:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100a7a:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f0100a7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100a7e:	c9                   	leave  
f0100a7f:	c3                   	ret    

f0100a80 <kbd_intr>:

void
kbd_intr(void)
{
f0100a80:	55                   	push   %ebp
f0100a81:	89 e5                	mov    %esp,%ebp
f0100a83:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f0100a86:	83 ec 0c             	sub    $0xc,%esp
f0100a89:	68 fd 08 10 f0       	push   $0xf01008fd
f0100a8e:	e8 0c 00 00 00       	call   f0100a9f <cons_intr>
f0100a93:	83 c4 10             	add    $0x10,%esp
}
f0100a96:	90                   	nop
f0100a97:	c9                   	leave  
f0100a98:	c3                   	ret    

f0100a99 <kbd_init>:

void
kbd_init(void)
{
f0100a99:	55                   	push   %ebp
f0100a9a:	89 e5                	mov    %esp,%ebp
}
f0100a9c:	90                   	nop
f0100a9d:	5d                   	pop    %ebp
f0100a9e:	c3                   	ret    

f0100a9f <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f0100a9f:	55                   	push   %ebp
f0100aa0:	89 e5                	mov    %esp,%ebp
f0100aa2:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f0100aa5:	eb 35                	jmp    f0100adc <cons_intr+0x3d>
		if (c == 0)
f0100aa7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100aab:	75 02                	jne    f0100aaf <cons_intr+0x10>
			continue;
f0100aad:	eb 2d                	jmp    f0100adc <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f0100aaf:	a1 e4 1d 86 f0       	mov    0xf0861de4,%eax
f0100ab4:	8d 50 01             	lea    0x1(%eax),%edx
f0100ab7:	89 15 e4 1d 86 f0    	mov    %edx,0xf0861de4
f0100abd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100ac0:	88 90 e0 1b 86 f0    	mov    %dl,-0xf79e420(%eax)
		if (cons.wpos == CONSBUFSIZE)
f0100ac6:	a1 e4 1d 86 f0       	mov    0xf0861de4,%eax
f0100acb:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100ad0:	75 0a                	jne    f0100adc <cons_intr+0x3d>
			cons.wpos = 0;
f0100ad2:	c7 05 e4 1d 86 f0 00 	movl   $0x0,0xf0861de4
f0100ad9:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f0100adc:	8b 45 08             	mov    0x8(%ebp),%eax
f0100adf:	ff d0                	call   *%eax
f0100ae1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100ae4:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100ae8:	75 bd                	jne    f0100aa7 <cons_intr+0x8>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
f0100aea:	90                   	nop
f0100aeb:	c9                   	leave  
f0100aec:	c3                   	ret    

f0100aed <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100aed:	55                   	push   %ebp
f0100aee:	89 e5                	mov    %esp,%ebp
f0100af0:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100af3:	e8 a7 f9 ff ff       	call   f010049f <serial_intr>
	kbd_intr();
f0100af8:	e8 83 ff ff ff       	call   f0100a80 <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100afd:	8b 15 e0 1d 86 f0    	mov    0xf0861de0,%edx
f0100b03:	a1 e4 1d 86 f0       	mov    0xf0861de4,%eax
f0100b08:	39 c2                	cmp    %eax,%edx
f0100b0a:	74 35                	je     f0100b41 <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100b0c:	a1 e0 1d 86 f0       	mov    0xf0861de0,%eax
f0100b11:	8d 50 01             	lea    0x1(%eax),%edx
f0100b14:	89 15 e0 1d 86 f0    	mov    %edx,0xf0861de0
f0100b1a:	8a 80 e0 1b 86 f0    	mov    -0xf79e420(%eax),%al
f0100b20:	0f b6 c0             	movzbl %al,%eax
f0100b23:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100b26:	a1 e0 1d 86 f0       	mov    0xf0861de0,%eax
f0100b2b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b30:	75 0a                	jne    f0100b3c <cons_getc+0x4f>
			cons.rpos = 0;
f0100b32:	c7 05 e0 1d 86 f0 00 	movl   $0x0,0xf0861de0
f0100b39:	00 00 00 
		return c;
f0100b3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100b3f:	eb 05                	jmp    f0100b46 <cons_getc+0x59>
	}
	return 0;
f0100b41:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100b46:	c9                   	leave  
f0100b47:	c3                   	ret    

f0100b48 <cons_getc2>:
// return the next input character from the console, or 0 if none waiting
int
cons_getc2(void)
{
f0100b48:	55                   	push   %ebp
f0100b49:	89 e5                	mov    %esp,%ebp
f0100b4b:	83 ec 18             	sub    $0x18,%esp

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).

	int c1 = 0;
f0100b4e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//serial_intr();
	{
		if (serial_exists)
f0100b55:	a1 c0 1b 86 f0       	mov    0xf0861bc0,%eax
f0100b5a:	85 c0                	test   %eax,%eax
f0100b5c:	74 41                	je     f0100b9f <cons_getc2+0x57>
		{
			if ((c1 = serial_proc_data()) != -1) {
f0100b5e:	e8 fa f8 ff ff       	call   f010045d <serial_proc_data>
f0100b63:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100b66:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100b6a:	74 33                	je     f0100b9f <cons_getc2+0x57>
				if (c1 == 0)
f0100b6c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100b70:	74 2d                	je     f0100b9f <cons_getc2+0x57>
				{
					//continue;
				}
				else
				{
					cons.buf[cons.wpos++] = c1;
f0100b72:	a1 e4 1d 86 f0       	mov    0xf0861de4,%eax
f0100b77:	8d 50 01             	lea    0x1(%eax),%edx
f0100b7a:	89 15 e4 1d 86 f0    	mov    %edx,0xf0861de4
f0100b80:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100b83:	88 90 e0 1b 86 f0    	mov    %dl,-0xf79e420(%eax)
					if (cons.wpos == CONSBUFSIZE)
f0100b89:	a1 e4 1d 86 f0       	mov    0xf0861de4,%eax
f0100b8e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b93:	75 0a                	jne    f0100b9f <cons_getc2+0x57>
						cons.wpos = 0;
f0100b95:	c7 05 e4 1d 86 f0 00 	movl   $0x0,0xf0861de4
f0100b9c:	00 00 00 
				}
			}
		}
	}

	int c2 = 0;
f0100b9f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kbd_intr();
	{
		if ((c2 = kbd_proc_data()) != -1) {
f0100ba6:	e8 52 fd ff ff       	call   f01008fd <kbd_proc_data>
f0100bab:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100bae:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0100bb2:	74 33                	je     f0100be7 <cons_getc2+0x9f>
			if (c2 == 0)
f0100bb4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100bb8:	74 2d                	je     f0100be7 <cons_getc2+0x9f>
			{
				//continue;
			}
			else
			{
				cons.buf[cons.wpos++] = c2;
f0100bba:	a1 e4 1d 86 f0       	mov    0xf0861de4,%eax
f0100bbf:	8d 50 01             	lea    0x1(%eax),%edx
f0100bc2:	89 15 e4 1d 86 f0    	mov    %edx,0xf0861de4
f0100bc8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100bcb:	88 90 e0 1b 86 f0    	mov    %dl,-0xf79e420(%eax)
				if (cons.wpos == CONSBUFSIZE)
f0100bd1:	a1 e4 1d 86 f0       	mov    0xf0861de4,%eax
f0100bd6:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100bdb:	75 0a                	jne    f0100be7 <cons_getc2+0x9f>
					cons.wpos = 0;
f0100bdd:	c7 05 e4 1d 86 f0 00 	movl   $0x0,0xf0861de4
f0100be4:	00 00 00 
	}

	// grab the next character from the input buffer.
	//cprintf("%d, %d \n", c1, c2);
	//if(c1 > 0 && c2 > 0)
	if(c2 > 0)
f0100be7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100beb:	7e 44                	jle    f0100c31 <cons_getc2+0xe9>
	{
		if (cons.rpos != cons.wpos) {
f0100bed:	8b 15 e0 1d 86 f0    	mov    0xf0861de0,%edx
f0100bf3:	a1 e4 1d 86 f0       	mov    0xf0861de4,%eax
f0100bf8:	39 c2                	cmp    %eax,%edx
f0100bfa:	74 35                	je     f0100c31 <cons_getc2+0xe9>
			c = cons.buf[cons.rpos++];
f0100bfc:	a1 e0 1d 86 f0       	mov    0xf0861de0,%eax
f0100c01:	8d 50 01             	lea    0x1(%eax),%edx
f0100c04:	89 15 e0 1d 86 f0    	mov    %edx,0xf0861de0
f0100c0a:	8a 80 e0 1b 86 f0    	mov    -0xf79e420(%eax),%al
f0100c10:	0f b6 c0             	movzbl %al,%eax
f0100c13:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (cons.rpos == CONSBUFSIZE)
f0100c16:	a1 e0 1d 86 f0       	mov    0xf0861de0,%eax
f0100c1b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100c20:	75 0a                	jne    f0100c2c <cons_getc2+0xe4>
				cons.rpos = 0;
f0100c22:	c7 05 e0 1d 86 f0 00 	movl   $0x0,0xf0861de0
f0100c29:	00 00 00 
			return c;
f0100c2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100c2f:	eb 05                	jmp    f0100c36 <cons_getc2+0xee>
		}
	}
	return 0;
f0100c31:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100c36:	c9                   	leave  
f0100c37:	c3                   	ret    

f0100c38 <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100c38:	55                   	push   %ebp
f0100c39:	89 e5                	mov    %esp,%ebp
f0100c3b:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100c3e:	ff 75 08             	pushl  0x8(%ebp)
f0100c41:	e8 8b f9 ff ff       	call   f01005d1 <lpt_putc>
f0100c46:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100c49:	83 ec 0c             	sub    $0xc,%esp
f0100c4c:	ff 75 08             	pushl  0x8(%ebp)
f0100c4f:	e8 b7 fa ff ff       	call   f010070b <cga_putc>
f0100c54:	83 c4 10             	add    $0x10,%esp
}
f0100c57:	90                   	nop
f0100c58:	c9                   	leave  
f0100c59:	c3                   	ret    

f0100c5a <console_initialize>:

// initialize the console devices
void
console_initialize(void)
{
f0100c5a:	55                   	push   %ebp
f0100c5b:	89 e5                	mov    %esp,%ebp
f0100c5d:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100c60:	e8 e1 f9 ff ff       	call   f0100646 <cga_init>
	kbd_init();
f0100c65:	e8 2f fe ff ff       	call   f0100a99 <kbd_init>
	serial_init();
f0100c6a:	e8 52 f8 ff ff       	call   f01004c1 <serial_init>

	if (!serial_exists)
f0100c6f:	a1 c0 1b 86 f0       	mov    0xf0861bc0,%eax
f0100c74:	85 c0                	test   %eax,%eax
f0100c76:	75 10                	jne    f0100c88 <console_initialize+0x2e>
		cprintf("Serial port does not exist!\n");
f0100c78:	83 ec 0c             	sub    $0xc,%esp
f0100c7b:	68 29 35 13 f0       	push   $0xf0133529
f0100c80:	e8 89 00 00 00       	call   f0100d0e <cprintf>
f0100c85:	83 c4 10             	add    $0x10,%esp
}
f0100c88:	90                   	nop
f0100c89:	c9                   	leave  
f0100c8a:	c3                   	ret    

f0100c8b <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
f0100c8b:	55                   	push   %ebp
f0100c8c:	89 e5                	mov    %esp,%ebp
f0100c8e:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100c91:	83 ec 0c             	sub    $0xc,%esp
f0100c94:	ff 75 08             	pushl  0x8(%ebp)
f0100c97:	e8 9c ff ff ff       	call   f0100c38 <cons_putc>
f0100c9c:	83 c4 10             	add    $0x10,%esp
}
f0100c9f:	90                   	nop
f0100ca0:	c9                   	leave  
f0100ca1:	c3                   	ret    

f0100ca2 <getchar>:

int
getchar(void)
{
f0100ca2:	55                   	push   %ebp
f0100ca3:	89 e5                	mov    %esp,%ebp
f0100ca5:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100ca8:	e8 40 fe ff ff       	call   f0100aed <cons_getc>
f0100cad:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100cb0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100cb4:	74 f2                	je     f0100ca8 <getchar+0x6>
		/* do nothing */;
	return c;
f0100cb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100cb9:	c9                   	leave  
f0100cba:	c3                   	ret    

f0100cbb <iscons>:

int
iscons(int fdnum)
{
f0100cbb:	55                   	push   %ebp
f0100cbc:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100cbe:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100cc3:	5d                   	pop    %ebp
f0100cc4:	c3                   	ret    

f0100cc5 <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
f0100cc5:	55                   	push   %ebp
f0100cc6:	89 e5                	mov    %esp,%ebp
f0100cc8:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0100ccb:	83 ec 0c             	sub    $0xc,%esp
f0100cce:	ff 75 08             	pushl  0x8(%ebp)
f0100cd1:	e8 b5 ff ff ff       	call   f0100c8b <cputchar>
f0100cd6:	83 c4 10             	add    $0x10,%esp
	*cnt++;
f0100cd9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100cdc:	83 c0 04             	add    $0x4,%eax
f0100cdf:	89 45 0c             	mov    %eax,0xc(%ebp)
}
f0100ce2:	90                   	nop
f0100ce3:	c9                   	leave  
f0100ce4:	c3                   	ret    

f0100ce5 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f0100ce5:	55                   	push   %ebp
f0100ce6:	89 e5                	mov    %esp,%ebp
f0100ce8:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0100ceb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0100cf2:	ff 75 0c             	pushl  0xc(%ebp)
f0100cf5:	ff 75 08             	pushl  0x8(%ebp)
f0100cf8:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0100cfb:	50                   	push   %eax
f0100cfc:	68 c5 0c 10 f0       	push   $0xf0100cc5
f0100d01:	e8 54 02 03 00       	call   f0130f5a <vprintfmt>
f0100d06:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0100d09:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100d0c:	c9                   	leave  
f0100d0d:	c3                   	ret    

f0100d0e <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0100d0e:	55                   	push   %ebp
f0100d0f:	89 e5                	mov    %esp,%ebp
f0100d11:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
f0100d14:	8d 45 0c             	lea    0xc(%ebp),%eax
f0100d17:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cnt = vcprintf(fmt, ap);
f0100d1a:	8b 45 08             	mov    0x8(%ebp),%eax
f0100d1d:	83 ec 08             	sub    $0x8,%esp
f0100d20:	ff 75 f4             	pushl  -0xc(%ebp)
f0100d23:	50                   	push   %eax
f0100d24:	e8 bc ff ff ff       	call   f0100ce5 <vcprintf>
f0100d29:	83 c4 10             	add    $0x10,%esp
f0100d2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return cnt;
f0100d2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0100d32:	c9                   	leave  
f0100d33:	c3                   	ret    

f0100d34 <run_command_prompt>:

//TODO: [PROJECT MS1] [COMMAND PROMPT] auto-complete

//invoke the command prompt
void run_command_prompt()
{
f0100d34:	55                   	push   %ebp
f0100d35:	89 e5                	mov    %esp,%ebp
f0100d37:	81 ec 08 04 00 00    	sub    $0x408,%esp
	char command_line[1024];

	while (1==1)
	{
		//get command line
		readline("FOS> ", command_line);
f0100d3d:	83 ec 08             	sub    $0x8,%esp
f0100d40:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100d46:	50                   	push   %eax
f0100d47:	68 46 35 13 f0       	push   $0xf0133546
f0100d4c:	e8 b1 06 03 00       	call   f0131402 <readline>
f0100d51:	83 c4 10             	add    $0x10,%esp

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f0100d54:	83 ec 0c             	sub    $0xc,%esp
f0100d57:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100d5d:	50                   	push   %eax
f0100d5e:	e8 0d 00 00 00       	call   f0100d70 <execute_command>
f0100d63:	83 c4 10             	add    $0x10,%esp
f0100d66:	85 c0                	test   %eax,%eax
f0100d68:	78 02                	js     f0100d6c <run_command_prompt+0x38>
				break;
	}
f0100d6a:	eb d1                	jmp    f0100d3d <run_command_prompt+0x9>
		readline("FOS> ", command_line);

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0100d6c:	90                   	nop
	}
}
f0100d6d:	90                   	nop
f0100d6e:	c9                   	leave  
f0100d6f:	c3                   	ret    

f0100d70 <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0100d70:	55                   	push   %ebp
f0100d71:	89 e5                	mov    %esp,%ebp
f0100d73:	83 ec 68             	sub    $0x68,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];


	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f0100d76:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0100d79:	50                   	push   %eax
f0100d7a:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f0100d7d:	50                   	push   %eax
f0100d7e:	68 4c 35 13 f0       	push   $0xf013354c
f0100d83:	ff 75 08             	pushl  0x8(%ebp)
f0100d86:	e8 b1 0e 03 00       	call   f0131c3c <strsplit>
f0100d8b:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0100d8e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100d91:	85 c0                	test   %eax,%eax
f0100d93:	75 0a                	jne    f0100d9f <execute_command+0x2f>
		{
		return 0;
f0100d95:	b8 00 00 00 00       	mov    $0x0,%eax
f0100d9a:	e9 18 01 00 00       	jmp    f0100eb7 <execute_command+0x147>
		}

	// Lookup in the commands array and execute the command
	int command_found = 0;
f0100d9f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int i ;

	int flag=0;
f0100da6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100dad:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0100db4:	e9 97 00 00 00       	jmp    f0100e50 <execute_command+0xe0>
	{
		if (strcmp(arguments[0], commands[i].name) == 0)
f0100db9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100dbc:	89 d0                	mov    %edx,%eax
f0100dbe:	01 c0                	add    %eax,%eax
f0100dc0:	01 d0                	add    %edx,%eax
f0100dc2:	c1 e0 02             	shl    $0x2,%eax
f0100dc5:	05 40 25 19 f0       	add    $0xf0192540,%eax
f0100dca:	8b 10                	mov    (%eax),%edx
f0100dcc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0100dcf:	83 ec 08             	sub    $0x8,%esp
f0100dd2:	52                   	push   %edx
f0100dd3:	50                   	push   %eax
f0100dd4:	e8 3b 09 03 00       	call   f0131714 <strcmp>
f0100dd9:	83 c4 10             	add    $0x10,%esp
f0100ddc:	85 c0                	test   %eax,%eax
f0100dde:	75 09                	jne    f0100de9 <execute_command+0x79>
		{
			command_found = 1;
f0100de0:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
			break;
f0100de7:	eb 77                	jmp    f0100e60 <execute_command+0xf0>
		}
		else if(strncmp(arguments[0], commands[i].name,strlen(arguments[0]))== 0){
f0100de9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0100dec:	83 ec 0c             	sub    $0xc,%esp
f0100def:	50                   	push   %eax
f0100df0:	e8 13 08 03 00       	call   f0131608 <strlen>
f0100df5:	83 c4 10             	add    $0x10,%esp
f0100df8:	89 c1                	mov    %eax,%ecx
f0100dfa:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100dfd:	89 d0                	mov    %edx,%eax
f0100dff:	01 c0                	add    %eax,%eax
f0100e01:	01 d0                	add    %edx,%eax
f0100e03:	c1 e0 02             	shl    $0x2,%eax
f0100e06:	05 40 25 19 f0       	add    $0xf0192540,%eax
f0100e0b:	8b 10                	mov    (%eax),%edx
f0100e0d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0100e10:	83 ec 04             	sub    $0x4,%esp
f0100e13:	51                   	push   %ecx
f0100e14:	52                   	push   %edx
f0100e15:	50                   	push   %eax
f0100e16:	e8 31 09 03 00       	call   f013174c <strncmp>
f0100e1b:	83 c4 10             	add    $0x10,%esp
f0100e1e:	85 c0                	test   %eax,%eax
f0100e20:	75 2b                	jne    f0100e4d <execute_command+0xdd>
			cprintf("%s\n",commands[i].name);
f0100e22:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e25:	89 d0                	mov    %edx,%eax
f0100e27:	01 c0                	add    %eax,%eax
f0100e29:	01 d0                	add    %edx,%eax
f0100e2b:	c1 e0 02             	shl    $0x2,%eax
f0100e2e:	05 40 25 19 f0       	add    $0xf0192540,%eax
f0100e33:	8b 00                	mov    (%eax),%eax
f0100e35:	83 ec 08             	sub    $0x8,%esp
f0100e38:	50                   	push   %eax
f0100e39:	68 51 35 13 f0       	push   $0xf0133551
f0100e3e:	e8 cb fe ff ff       	call   f0100d0e <cprintf>
f0100e43:	83 c4 10             	add    $0x10,%esp
		flag=1;
f0100e46:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	// Lookup in the commands array and execute the command
	int command_found = 0;
	int i ;

	int flag=0;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100e4d:	ff 45 f0             	incl   -0x10(%ebp)
f0100e50:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e53:	a1 ac 28 19 f0       	mov    0xf01928ac,%eax
f0100e58:	39 c2                	cmp    %eax,%edx
f0100e5a:	0f 82 59 ff ff ff    	jb     f0100db9 <execute_command+0x49>
			cprintf("%s\n",commands[i].name);
		flag=1;
		}
	}

	if(command_found)
f0100e60:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100e64:	74 2b                	je     f0100e91 <execute_command+0x121>
	{
		int return_value;
		return_value = commands[i].function_to_execute(number_of_arguments, arguments);
f0100e66:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e69:	89 d0                	mov    %edx,%eax
f0100e6b:	01 c0                	add    %eax,%eax
f0100e6d:	01 d0                	add    %edx,%eax
f0100e6f:	c1 e0 02             	shl    $0x2,%eax
f0100e72:	05 48 25 19 f0       	add    $0xf0192548,%eax
f0100e77:	8b 00                	mov    (%eax),%eax
f0100e79:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100e7c:	83 ec 08             	sub    $0x8,%esp
f0100e7f:	8d 4d a4             	lea    -0x5c(%ebp),%ecx
f0100e82:	51                   	push   %ecx
f0100e83:	52                   	push   %edx
f0100e84:	ff d0                	call   *%eax
f0100e86:	83 c4 10             	add    $0x10,%esp
f0100e89:	89 45 e8             	mov    %eax,-0x18(%ebp)
		return return_value;
f0100e8c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100e8f:	eb 26                	jmp    f0100eb7 <execute_command+0x147>
	}
	else if(flag== 0){
f0100e91:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0100e95:	75 1b                	jne    f0100eb2 <execute_command+0x142>

		cprintf("Unknown command '%s'\n", arguments[0]);
f0100e97:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0100e9a:	83 ec 08             	sub    $0x8,%esp
f0100e9d:	50                   	push   %eax
f0100e9e:	68 55 35 13 f0       	push   $0xf0133555
f0100ea3:	e8 66 fe ff ff       	call   f0100d0e <cprintf>
f0100ea8:	83 c4 10             	add    $0x10,%esp
		return 0;
f0100eab:	b8 00 00 00 00       	mov    $0x0,%eax
f0100eb0:	eb 05                	jmp    f0100eb7 <execute_command+0x147>
	}
	else{
		return 0;
f0100eb2:	b8 00 00 00 00       	mov    $0x0,%eax
	}

	}
f0100eb7:	c9                   	leave  
f0100eb8:	c3                   	ret    

f0100eb9 <setKHeapPlacementStrategyCONTALLOC>:
#define KHP_PLACE_FIRSTFIT 	0x1
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0100eb9:	55                   	push   %ebp
f0100eba:	89 e5                	mov    %esp,%ebp
f0100ebc:	c7 05 58 27 86 f0 00 	movl   $0x0,0xf0862758
f0100ec3:	00 00 00 
f0100ec6:	90                   	nop
f0100ec7:	5d                   	pop    %ebp
f0100ec8:	c3                   	ret    

f0100ec9 <setKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0100ec9:	55                   	push   %ebp
f0100eca:	89 e5                	mov    %esp,%ebp
f0100ecc:	c7 05 58 27 86 f0 01 	movl   $0x1,0xf0862758
f0100ed3:	00 00 00 
f0100ed6:	90                   	nop
f0100ed7:	5d                   	pop    %ebp
f0100ed8:	c3                   	ret    

f0100ed9 <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0100ed9:	55                   	push   %ebp
f0100eda:	89 e5                	mov    %esp,%ebp
f0100edc:	c7 05 58 27 86 f0 02 	movl   $0x2,0xf0862758
f0100ee3:	00 00 00 
f0100ee6:	90                   	nop
f0100ee7:	5d                   	pop    %ebp
f0100ee8:	c3                   	ret    

f0100ee9 <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0100ee9:	55                   	push   %ebp
f0100eea:	89 e5                	mov    %esp,%ebp
f0100eec:	c7 05 58 27 86 f0 03 	movl   $0x3,0xf0862758
f0100ef3:	00 00 00 
f0100ef6:	90                   	nop
f0100ef7:	5d                   	pop    %ebp
f0100ef8:	c3                   	ret    

f0100ef9 <setKHeapPlacementStrategyWORSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0100ef9:	55                   	push   %ebp
f0100efa:	89 e5                	mov    %esp,%ebp
f0100efc:	c7 05 58 27 86 f0 04 	movl   $0x4,0xf0862758
f0100f03:	00 00 00 
f0100f06:	90                   	nop
f0100f07:	5d                   	pop    %ebp
f0100f08:	c3                   	ret    

f0100f09 <isKHeapPlacementStrategyCONTALLOC>:

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0100f09:	55                   	push   %ebp
f0100f0a:	89 e5                	mov    %esp,%ebp
f0100f0c:	a1 58 27 86 f0       	mov    0xf0862758,%eax
f0100f11:	85 c0                	test   %eax,%eax
f0100f13:	75 04                	jne    f0100f19 <isKHeapPlacementStrategyCONTALLOC+0x10>
f0100f15:	b0 01                	mov    $0x1,%al
f0100f17:	eb 02                	jmp    f0100f1b <isKHeapPlacementStrategyCONTALLOC+0x12>
f0100f19:	b0 00                	mov    $0x0,%al
f0100f1b:	5d                   	pop    %ebp
f0100f1c:	c3                   	ret    

f0100f1d <isKHeapPlacementStrategyFIRSTFIT>:
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100f1d:	55                   	push   %ebp
f0100f1e:	89 e5                	mov    %esp,%ebp
f0100f20:	a1 58 27 86 f0       	mov    0xf0862758,%eax
f0100f25:	83 f8 01             	cmp    $0x1,%eax
f0100f28:	75 04                	jne    f0100f2e <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0100f2a:	b0 01                	mov    $0x1,%al
f0100f2c:	eb 02                	jmp    f0100f30 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0100f2e:	b0 00                	mov    $0x0,%al
f0100f30:	5d                   	pop    %ebp
f0100f31:	c3                   	ret    

f0100f32 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f0100f32:	55                   	push   %ebp
f0100f33:	89 e5                	mov    %esp,%ebp
f0100f35:	a1 58 27 86 f0       	mov    0xf0862758,%eax
f0100f3a:	83 f8 02             	cmp    $0x2,%eax
f0100f3d:	75 04                	jne    f0100f43 <isKHeapPlacementStrategyBESTFIT+0x11>
f0100f3f:	b0 01                	mov    $0x1,%al
f0100f41:	eb 02                	jmp    f0100f45 <isKHeapPlacementStrategyBESTFIT+0x13>
f0100f43:	b0 00                	mov    $0x0,%al
f0100f45:	5d                   	pop    %ebp
f0100f46:	c3                   	ret    

f0100f47 <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0100f47:	55                   	push   %ebp
f0100f48:	89 e5                	mov    %esp,%ebp
f0100f4a:	a1 58 27 86 f0       	mov    0xf0862758,%eax
f0100f4f:	83 f8 03             	cmp    $0x3,%eax
f0100f52:	75 04                	jne    f0100f58 <isKHeapPlacementStrategyNEXTFIT+0x11>
f0100f54:	b0 01                	mov    $0x1,%al
f0100f56:	eb 02                	jmp    f0100f5a <isKHeapPlacementStrategyNEXTFIT+0x13>
f0100f58:	b0 00                	mov    $0x0,%al
f0100f5a:	5d                   	pop    %ebp
f0100f5b:	c3                   	ret    

f0100f5c <isKHeapPlacementStrategyWORSTFIT>:
static inline uint8 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f0100f5c:	55                   	push   %ebp
f0100f5d:	89 e5                	mov    %esp,%ebp
f0100f5f:	a1 58 27 86 f0       	mov    0xf0862758,%eax
f0100f64:	83 f8 04             	cmp    $0x4,%eax
f0100f67:	75 04                	jne    f0100f6d <isKHeapPlacementStrategyWORSTFIT+0x11>
f0100f69:	b0 01                	mov    $0x1,%al
f0100f6b:	eb 02                	jmp    f0100f6f <isKHeapPlacementStrategyWORSTFIT+0x13>
f0100f6d:	b0 00                	mov    $0x0,%al
f0100f6f:	5d                   	pop    %ebp
f0100f70:	c3                   	ret    

f0100f71 <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f0100f71:	55                   	push   %ebp
f0100f72:	89 e5                	mov    %esp,%ebp
f0100f74:	c7 05 2c 27 86 f0 01 	movl   $0x1,0xf086272c
f0100f7b:	00 00 00 
f0100f7e:	90                   	nop
f0100f7f:	5d                   	pop    %ebp
f0100f80:	c3                   	ret    

f0100f81 <setUHeapPlacementStrategyBESTFIT>:
static inline void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f0100f81:	55                   	push   %ebp
f0100f82:	89 e5                	mov    %esp,%ebp
f0100f84:	c7 05 2c 27 86 f0 02 	movl   $0x2,0xf086272c
f0100f8b:	00 00 00 
f0100f8e:	90                   	nop
f0100f8f:	5d                   	pop    %ebp
f0100f90:	c3                   	ret    

f0100f91 <setUHeapPlacementStrategyNEXTFIT>:
static inline void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f0100f91:	55                   	push   %ebp
f0100f92:	89 e5                	mov    %esp,%ebp
f0100f94:	c7 05 2c 27 86 f0 03 	movl   $0x3,0xf086272c
f0100f9b:	00 00 00 
f0100f9e:	90                   	nop
f0100f9f:	5d                   	pop    %ebp
f0100fa0:	c3                   	ret    

f0100fa1 <setUHeapPlacementStrategyWORSTFIT>:
static inline void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f0100fa1:	55                   	push   %ebp
f0100fa2:	89 e5                	mov    %esp,%ebp
f0100fa4:	c7 05 2c 27 86 f0 04 	movl   $0x4,0xf086272c
f0100fab:	00 00 00 
f0100fae:	90                   	nop
f0100faf:	5d                   	pop    %ebp
f0100fb0:	c3                   	ret    

f0100fb1 <isUHeapPlacementStrategyFIRSTFIT>:

static inline uint8 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100fb1:	55                   	push   %ebp
f0100fb2:	89 e5                	mov    %esp,%ebp
f0100fb4:	a1 2c 27 86 f0       	mov    0xf086272c,%eax
f0100fb9:	83 f8 01             	cmp    $0x1,%eax
f0100fbc:	75 04                	jne    f0100fc2 <isUHeapPlacementStrategyFIRSTFIT+0x11>
f0100fbe:	b0 01                	mov    $0x1,%al
f0100fc0:	eb 02                	jmp    f0100fc4 <isUHeapPlacementStrategyFIRSTFIT+0x13>
f0100fc2:	b0 00                	mov    $0x0,%al
f0100fc4:	5d                   	pop    %ebp
f0100fc5:	c3                   	ret    

f0100fc6 <isUHeapPlacementStrategyBESTFIT>:
static inline uint8 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f0100fc6:	55                   	push   %ebp
f0100fc7:	89 e5                	mov    %esp,%ebp
f0100fc9:	a1 2c 27 86 f0       	mov    0xf086272c,%eax
f0100fce:	83 f8 02             	cmp    $0x2,%eax
f0100fd1:	75 04                	jne    f0100fd7 <isUHeapPlacementStrategyBESTFIT+0x11>
f0100fd3:	b0 01                	mov    $0x1,%al
f0100fd5:	eb 02                	jmp    f0100fd9 <isUHeapPlacementStrategyBESTFIT+0x13>
f0100fd7:	b0 00                	mov    $0x0,%al
f0100fd9:	5d                   	pop    %ebp
f0100fda:	c3                   	ret    

f0100fdb <isUHeapPlacementStrategyNEXTFIT>:
static inline uint8 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f0100fdb:	55                   	push   %ebp
f0100fdc:	89 e5                	mov    %esp,%ebp
f0100fde:	a1 2c 27 86 f0       	mov    0xf086272c,%eax
f0100fe3:	83 f8 03             	cmp    $0x3,%eax
f0100fe6:	75 04                	jne    f0100fec <isUHeapPlacementStrategyNEXTFIT+0x11>
f0100fe8:	b0 01                	mov    $0x1,%al
f0100fea:	eb 02                	jmp    f0100fee <isUHeapPlacementStrategyNEXTFIT+0x13>
f0100fec:	b0 00                	mov    $0x0,%al
f0100fee:	5d                   	pop    %ebp
f0100fef:	c3                   	ret    

f0100ff0 <isUHeapPlacementStrategyWORSTFIT>:
static inline uint8 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f0100ff0:	55                   	push   %ebp
f0100ff1:	89 e5                	mov    %esp,%ebp
f0100ff3:	a1 2c 27 86 f0       	mov    0xf086272c,%eax
f0100ff8:	83 f8 04             	cmp    $0x4,%eax
f0100ffb:	75 04                	jne    f0101001 <isUHeapPlacementStrategyWORSTFIT+0x11>
f0100ffd:	b0 01                	mov    $0x1,%al
f0100fff:	eb 02                	jmp    f0101003 <isUHeapPlacementStrategyWORSTFIT+0x13>
f0101001:	b0 00                	mov    $0x0,%al
f0101003:	5d                   	pop    %ebp
f0101004:	c3                   	ret    

f0101005 <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0101005:	55                   	push   %ebp
f0101006:	89 e5                	mov    %esp,%ebp
f0101008:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f010100b:	8b 45 08             	mov    0x8(%ebp),%eax
f010100e:	c1 e8 0c             	shr    $0xc,%eax
f0101011:	89 c2                	mov    %eax,%edx
f0101013:	a1 0c 27 86 f0       	mov    0xf086270c,%eax
f0101018:	39 c2                	cmp    %eax,%edx
f010101a:	72 14                	jb     f0101030 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f010101c:	83 ec 04             	sub    $0x4,%esp
f010101f:	68 6c 35 13 f0       	push   $0xf013356c
f0101024:	6a 55                	push   $0x55
f0101026:	68 94 35 13 f0       	push   $0xf0133594
f010102b:	e8 d5 f1 ff ff       	call   f0100205 <_panic>
	return &frames_info[PPN(physical_address)];
f0101030:	8b 15 50 27 86 f0    	mov    0xf0862750,%edx
f0101036:	8b 45 08             	mov    0x8(%ebp),%eax
f0101039:	c1 e8 0c             	shr    $0xc,%eax
f010103c:	89 c1                	mov    %eax,%ecx
f010103e:	89 c8                	mov    %ecx,%eax
f0101040:	01 c0                	add    %eax,%eax
f0101042:	01 c8                	add    %ecx,%eax
f0101044:	c1 e0 03             	shl    $0x3,%eax
f0101047:	01 d0                	add    %edx,%eax
}
f0101049:	c9                   	leave  
f010104a:	c3                   	ret    

f010104b <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f010104b:	55                   	push   %ebp
f010104c:	89 e5                	mov    %esp,%ebp
f010104e:	53                   	push   %ebx
f010104f:	83 ec 14             	sub    $0x14,%esp
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0101052:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0101059:	eb 3b                	jmp    f0101096 <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f010105b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010105e:	89 d0                	mov    %edx,%eax
f0101060:	01 c0                	add    %eax,%eax
f0101062:	01 d0                	add    %edx,%eax
f0101064:	c1 e0 02             	shl    $0x2,%eax
f0101067:	05 44 25 19 f0       	add    $0xf0192544,%eax
f010106c:	8b 10                	mov    (%eax),%edx
f010106e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101071:	89 c8                	mov    %ecx,%eax
f0101073:	01 c0                	add    %eax,%eax
f0101075:	01 c8                	add    %ecx,%eax
f0101077:	c1 e0 02             	shl    $0x2,%eax
f010107a:	05 40 25 19 f0       	add    $0xf0192540,%eax
f010107f:	8b 00                	mov    (%eax),%eax
f0101081:	83 ec 04             	sub    $0x4,%esp
f0101084:	52                   	push   %edx
f0101085:	50                   	push   %eax
f0101086:	68 0e 44 13 f0       	push   $0xf013440e
f010108b:	e8 7e fc ff ff       	call   f0100d0e <cprintf>
f0101090:	83 c4 10             	add    $0x10,%esp

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0101093:	ff 45 f4             	incl   -0xc(%ebp)
f0101096:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0101099:	a1 ac 28 19 f0       	mov    0xf01928ac,%eax
f010109e:	39 c2                	cmp    %eax,%edx
f01010a0:	72 b9                	jb     f010105b <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f01010a2:	83 ec 0c             	sub    $0xc,%esp
f01010a5:	68 17 44 13 f0       	push   $0xf0134417
f01010aa:	e8 5f fc ff ff       	call   f0100d0e <cprintf>
f01010af:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f01010b2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01010b9:	eb 42                	jmp    f01010fd <command_help+0xb2>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f01010bb:	8b 0d 14 2d 19 f0    	mov    0xf0192d14,%ecx
f01010c1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01010c4:	89 d0                	mov    %edx,%eax
f01010c6:	01 c0                	add    %eax,%eax
f01010c8:	01 d0                	add    %edx,%eax
f01010ca:	c1 e0 02             	shl    $0x2,%eax
f01010cd:	01 c8                	add    %ecx,%eax
f01010cf:	8b 50 04             	mov    0x4(%eax),%edx
f01010d2:	8b 1d 14 2d 19 f0    	mov    0xf0192d14,%ebx
f01010d8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01010db:	89 c8                	mov    %ecx,%eax
f01010dd:	01 c0                	add    %eax,%eax
f01010df:	01 c8                	add    %ecx,%eax
f01010e1:	c1 e0 02             	shl    $0x2,%eax
f01010e4:	01 d8                	add    %ebx,%eax
f01010e6:	8b 00                	mov    (%eax),%eax
f01010e8:	83 ec 04             	sub    $0x4,%esp
f01010eb:	52                   	push   %edx
f01010ec:	50                   	push   %eax
f01010ed:	68 2c 44 13 f0       	push   $0xf013442c
f01010f2:	e8 17 fc ff ff       	call   f0100d0e <cprintf>
f01010f7:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f01010fa:	ff 45 f4             	incl   -0xc(%ebp)
f01010fd:	a1 18 2d 19 f0       	mov    0xf0192d18,%eax
f0101102:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0101105:	7c b4                	jl     f01010bb <command_help+0x70>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f0101107:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010110c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010110f:	c9                   	leave  
f0101110:	c3                   	ret    

f0101111 <command_kernel_info>:

//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f0101111:	55                   	push   %ebp
f0101112:	89 e5                	mov    %esp,%ebp
f0101114:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f0101117:	83 ec 0c             	sub    $0xc,%esp
f010111a:	68 48 44 13 f0       	push   $0xf0134448
f010111f:	e8 ea fb ff ff       	call   f0100d0e <cprintf>
f0101124:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f0101127:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f010112c:	83 ec 04             	sub    $0x4,%esp
f010112f:	50                   	push   %eax
f0101130:	68 0c 00 10 f0       	push   $0xf010000c
f0101135:	68 64 44 13 f0       	push   $0xf0134464
f010113a:	e8 cf fb ff ff       	call   f0100d0e <cprintf>
f010113f:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f0101142:	b8 91 33 13 00       	mov    $0x133391,%eax
f0101147:	83 ec 04             	sub    $0x4,%esp
f010114a:	50                   	push   %eax
f010114b:	68 91 33 13 f0       	push   $0xf0133391
f0101150:	68 a0 44 13 f0       	push   $0xf01344a0
f0101155:	e8 b4 fb ff ff       	call   f0100d0e <cprintf>
f010115a:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f010115d:	b8 9c 1b 86 00       	mov    $0x861b9c,%eax
f0101162:	83 ec 04             	sub    $0x4,%esp
f0101165:	50                   	push   %eax
f0101166:	68 9c 1b 86 f0       	push   $0xf0861b9c
f010116b:	68 dc 44 13 f0       	push   $0xf01344dc
f0101170:	e8 99 fb ff ff       	call   f0100d0e <cprintf>
f0101175:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f0101178:	b8 bc 28 86 00       	mov    $0x8628bc,%eax
f010117d:	83 ec 04             	sub    $0x4,%esp
f0101180:	50                   	push   %eax
f0101181:	68 bc 28 86 f0       	push   $0xf08628bc
f0101186:	68 24 45 13 f0       	push   $0xf0134524
f010118b:	e8 7e fb ff ff       	call   f0100d0e <cprintf>
f0101190:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f0101193:	b8 bc 28 86 f0       	mov    $0xf08628bc,%eax
f0101198:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f010119e:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f01011a3:	29 c2                	sub    %eax,%edx
f01011a5:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f01011a7:	85 c0                	test   %eax,%eax
f01011a9:	79 05                	jns    f01011b0 <command_kernel_info+0x9f>
f01011ab:	05 ff 03 00 00       	add    $0x3ff,%eax
f01011b0:	c1 f8 0a             	sar    $0xa,%eax
f01011b3:	83 ec 08             	sub    $0x8,%esp
f01011b6:	50                   	push   %eax
f01011b7:	68 60 45 13 f0       	push   $0xf0134560
f01011bc:	e8 4d fb ff ff       	call   f0100d0e <cprintf>
f01011c1:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f01011c4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01011c9:	c9                   	leave  
f01011ca:	c3                   	ret    

f01011cb <command_kernel_base_info>:

//===========================================================================
//Lab3.Examples
//=============
int command_kernel_base_info(int number_of_arguments, char **arguments)
{
f01011cb:	55                   	push   %ebp
f01011cc:	89 e5                	mov    %esp,%ebp
f01011ce:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "ikb"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011d1:	83 ec 04             	sub    $0x4,%esp
f01011d4:	68 8c 45 13 f0       	push   $0xf013458c
f01011d9:	68 b0 00 00 00       	push   $0xb0
f01011de:	68 ad 45 13 f0       	push   $0xf01345ad
f01011e3:	e8 1d f0 ff ff       	call   f0100205 <_panic>

f01011e8 <command_del_kernel_base>:
	return 0;
}


int command_del_kernel_base(int number_of_arguments, char **arguments)
{
f01011e8:	55                   	push   %ebp
f01011e9:	89 e5                	mov    %esp,%ebp
f01011eb:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "dkb"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011ee:	83 ec 04             	sub    $0x4,%esp
f01011f1:	68 8c 45 13 f0       	push   $0xf013458c
f01011f6:	68 ba 00 00 00       	push   $0xba
f01011fb:	68 ad 45 13 f0       	push   $0xf01345ad
f0101200:	e8 00 f0 ff ff       	call   f0100205 <_panic>

f0101205 <command_share_page>:

	return 0;
}

int command_share_page(int number_of_arguments, char **arguments)
{
f0101205:	55                   	push   %ebp
f0101206:	89 e5                	mov    %esp,%ebp
f0101208:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "shr"
	//Comment the following line
	panic("Function is not implemented yet!");
f010120b:	83 ec 04             	sub    $0x4,%esp
f010120e:	68 8c 45 13 f0       	push   $0xf013458c
f0101213:	68 c3 00 00 00       	push   $0xc3
f0101218:	68 ad 45 13 f0       	push   $0xf01345ad
f010121d:	e8 e3 ef ff ff       	call   f0100205 <_panic>

f0101222 <command_show_mapping>:

//===========================================================================
//Lab4.Hands.On
//=============
int command_show_mapping(int number_of_arguments, char **arguments)
{
f0101222:	55                   	push   %ebp
f0101223:	89 e5                	mov    %esp,%ebp
f0101225:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sm"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101228:	83 ec 04             	sub    $0x4,%esp
f010122b:	68 8c 45 13 f0       	push   $0xf013458c
f0101230:	68 cf 00 00 00       	push   $0xcf
f0101235:	68 ad 45 13 f0       	push   $0xf01345ad
f010123a:	e8 c6 ef ff ff       	call   f0100205 <_panic>

f010123f <command_set_permission>:

	return 0 ;
}

int command_set_permission(int number_of_arguments, char **arguments)
{
f010123f:	55                   	push   %ebp
f0101240:	89 e5                	mov    %esp,%ebp
f0101242:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sp"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101245:	83 ec 04             	sub    $0x4,%esp
f0101248:	68 8c 45 13 f0       	push   $0xf013458c
f010124d:	68 d8 00 00 00       	push   $0xd8
f0101252:	68 ad 45 13 f0       	push   $0xf01345ad
f0101257:	e8 a9 ef ff ff       	call   f0100205 <_panic>

f010125c <command_share_range>:

	return 0 ;
}

int command_share_range(int number_of_arguments, char **arguments)
{
f010125c:	55                   	push   %ebp
f010125d:	89 e5                	mov    %esp,%ebp
f010125f:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sr"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101262:	83 ec 04             	sub    $0x4,%esp
f0101265:	68 8c 45 13 f0       	push   $0xf013458c
f010126a:	68 e1 00 00 00       	push   $0xe1
f010126f:	68 ad 45 13 f0       	push   $0xf01345ad
f0101274:	e8 8c ef ff ff       	call   f0100205 <_panic>

f0101279 <command_nr>:
//===========================================================================
//Lab5.Examples
//==============
//[1] Number of references on the given physical address
int command_nr(int number_of_arguments, char **arguments)
{
f0101279:	55                   	push   %ebp
f010127a:	89 e5                	mov    %esp,%ebp
f010127c:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "nr"
	//Comment the following line
	panic("Function is not implemented yet!");
f010127f:	83 ec 04             	sub    $0x4,%esp
f0101282:	68 8c 45 13 f0       	push   $0xf013458c
f0101287:	68 ee 00 00 00       	push   $0xee
f010128c:	68 ad 45 13 f0       	push   $0xf01345ad
f0101291:	e8 6f ef ff ff       	call   f0100205 <_panic>

f0101296 <command_ap>:
	return 0;
}

//[2] Allocate Page: If the given user virtual address is mapped, do nothing. Else, allocate a single frame and map it to a given virtual address in the user space
int command_ap(int number_of_arguments, char **arguments)
{
f0101296:	55                   	push   %ebp
f0101297:	89 e5                	mov    %esp,%ebp
f0101299:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "ap"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f010129c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010129f:	83 c0 04             	add    $0x4,%eax
f01012a2:	8b 00                	mov    (%eax),%eax
f01012a4:	83 ec 04             	sub    $0x4,%esp
f01012a7:	6a 10                	push   $0x10
f01012a9:	6a 00                	push   $0x0
f01012ab:	50                   	push   %eax
f01012ac:	e8 b7 06 03 00       	call   f0131968 <strtol>
f01012b1:	83 c4 10             	add    $0x10,%esp
f01012b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct FrameInfo* ptr_frame_info;
	int ret = allocate_frame(&ptr_frame_info) ;
f01012b7:	83 ec 0c             	sub    $0xc,%esp
f01012ba:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01012bd:	50                   	push   %eax
f01012be:	e8 0d 56 00 00       	call   f01068d0 <allocate_frame>
f01012c3:	83 c4 10             	add    $0x10,%esp
f01012c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	map_frame(ptr_page_directory, ptr_frame_info, va, PERM_USER | PERM_WRITEABLE);
f01012c9:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01012cc:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f01012d1:	6a 06                	push   $0x6
f01012d3:	ff 75 f4             	pushl  -0xc(%ebp)
f01012d6:	52                   	push   %edx
f01012d7:	50                   	push   %eax
f01012d8:	e8 42 5a 00 00       	call   f0106d1f <map_frame>
f01012dd:	83 c4 10             	add    $0x10,%esp

	return 0 ;
f01012e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01012e5:	c9                   	leave  
f01012e6:	c3                   	ret    

f01012e7 <command_fp>:

//[3] Free Page: Un-map a single page at the given virtual address in the user space
int command_fp(int number_of_arguments, char **arguments)
{
f01012e7:	55                   	push   %ebp
f01012e8:	89 e5                	mov    %esp,%ebp
f01012ea:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "fp"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f01012ed:	8b 45 0c             	mov    0xc(%ebp),%eax
f01012f0:	83 c0 04             	add    $0x4,%eax
f01012f3:	8b 00                	mov    (%eax),%eax
f01012f5:	83 ec 04             	sub    $0x4,%esp
f01012f8:	6a 10                	push   $0x10
f01012fa:	6a 00                	push   $0x0
f01012fc:	50                   	push   %eax
f01012fd:	e8 66 06 03 00       	call   f0131968 <strtol>
f0101302:	83 c4 10             	add    $0x10,%esp
f0101305:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// Un-map the page at this address
	unmap_frame(ptr_page_directory, va);
f0101308:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f010130d:	83 ec 08             	sub    $0x8,%esp
f0101310:	ff 75 f4             	pushl  -0xc(%ebp)
f0101313:	50                   	push   %eax
f0101314:	e8 3b 5b 00 00       	call   f0106e54 <unmap_frame>
f0101319:	83 c4 10             	add    $0x10,%esp

	return 0;
f010131c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101321:	c9                   	leave  
f0101322:	c3                   	ret    

f0101323 <command_asp>:
//===========================================================================
//Lab5.Hands-on
//==============
//[1] Allocate Shared Pages
int command_asp(int number_of_arguments, char **arguments)
{
f0101323:	55                   	push   %ebp
f0101324:	89 e5                	mov    %esp,%ebp
f0101326:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "asp"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101329:	83 ec 04             	sub    $0x4,%esp
f010132c:	68 8c 45 13 f0       	push   $0xf013458c
f0101331:	68 18 01 00 00       	push   $0x118
f0101336:	68 ad 45 13 f0       	push   $0xf01345ad
f010133b:	e8 c5 ee ff ff       	call   f0100205 <_panic>

f0101340 <command_cfp>:
}


//[2] Count Free Pages in Range
int command_cfp(int number_of_arguments, char **arguments)
{
f0101340:	55                   	push   %ebp
f0101341:	89 e5                	mov    %esp,%ebp
f0101343:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "cfp"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101346:	83 ec 04             	sub    $0x4,%esp
f0101349:	68 8c 45 13 f0       	push   $0xf013458c
f010134e:	68 23 01 00 00       	push   $0x123
f0101353:	68 ad 45 13 f0       	push   $0xf01345ad
f0101358:	e8 a8 ee ff ff       	call   f0100205 <_panic>

f010135d <command_ft>:

//===========================================================================
//Lab6.Examples
//=============
int command_ft(int number_of_arguments, char **arguments)
{
f010135d:	55                   	push   %ebp
f010135e:	89 e5                	mov    %esp,%ebp
	//TODO: LAB6 Example: fill this function. corresponding command name is "ft"
	//Comment the following line

	return 0;
f0101360:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101365:	5d                   	pop    %ebp
f0101366:	c3                   	ret    

f0101367 <command_writeusermem>:

//*****************************************************************************************//
//***************************** PROJECT HELPERS COMMAND ***********************************//
//*****************************************************************************************//
int command_writeusermem(int number_of_arguments, char **arguments)
{
f0101367:	55                   	push   %ebp
f0101368:	89 e5                	mov    %esp,%ebp
f010136a:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 3)
f010136d:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0101371:	75 37                	jne    f01013aa <command_writeusermem+0x43>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f0101373:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101376:	83 c0 04             	add    $0x4,%eax
f0101379:	8b 00                	mov    (%eax),%eax
f010137b:	83 ec 04             	sub    $0x4,%esp
f010137e:	6a 10                	push   $0x10
f0101380:	6a 00                	push   $0x0
f0101382:	50                   	push   %eax
f0101383:	e8 e0 05 03 00       	call   f0131968 <strtol>
f0101388:	83 c4 10             	add    $0x10,%esp
f010138b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address) ;
f010138e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101391:	89 45 d8             	mov    %eax,-0x28(%ebp)

		*ptr = arguments[2][0];
f0101394:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101397:	83 c0 08             	add    $0x8,%eax
f010139a:	8b 00                	mov    (%eax),%eax
f010139c:	8a 00                	mov    (%eax),%al
f010139e:	88 c2                	mov    %al,%dl
f01013a0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01013a3:	88 10                	mov    %dl,(%eax)
f01013a5:	e9 b9 00 00 00       	jmp    f0101463 <command_writeusermem+0xfc>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 4)
f01013aa:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01013ae:	0f 85 9f 00 00 00    	jne    f0101453 <command_writeusermem+0xec>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01013b4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013b7:	83 c0 04             	add    $0x4,%eax
f01013ba:	8b 00                	mov    (%eax),%eax
f01013bc:	83 ec 04             	sub    $0x4,%esp
f01013bf:	6a 0a                	push   $0xa
f01013c1:	6a 00                	push   $0x0
f01013c3:	50                   	push   %eax
f01013c4:	e8 9f 05 03 00       	call   f0131968 <strtol>
f01013c9:	83 c4 10             	add    $0x10,%esp
f01013cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f01013cf:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f01013d6:	83 ec 04             	sub    $0x4,%esp
f01013d9:	6a 00                	push   $0x0
f01013db:	8d 45 d0             	lea    -0x30(%ebp),%eax
f01013de:	50                   	push   %eax
f01013df:	ff 75 f4             	pushl  -0xc(%ebp)
f01013e2:	e8 69 89 00 00       	call   f0109d50 <envid2env>
f01013e7:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f01013ea:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013ed:	83 c0 08             	add    $0x8,%eax
f01013f0:	8b 00                	mov    (%eax),%eax
f01013f2:	83 ec 04             	sub    $0x4,%esp
f01013f5:	6a 10                	push   $0x10
f01013f7:	6a 00                	push   $0x0
f01013f9:	50                   	push   %eax
f01013fa:	e8 69 05 03 00       	call   f0131968 <strtol>
f01013ff:	83 c4 10             	add    $0x10,%esp
f0101402:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f0101405:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101408:	85 c0                	test   %eax,%eax
f010140a:	75 07                	jne    f0101413 <command_writeusermem+0xac>
f010140c:	b8 00 00 00 00       	mov    $0x0,%eax
f0101411:	eb 55                	jmp    f0101468 <command_writeusermem+0x101>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101413:	0f 20 d8             	mov    %cr3,%eax
f0101416:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f0101419:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f010141c:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32) (env->env_cr3));
f010141f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101422:	8b 40 60             	mov    0x60(%eax),%eax
f0101425:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101428:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010142b:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f010142e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101431:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		*ptr = arguments[3][0];
f0101434:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101437:	83 c0 0c             	add    $0xc,%eax
f010143a:	8b 00                	mov    (%eax),%eax
f010143c:	8a 00                	mov    (%eax),%al
f010143e:	88 c2                	mov    %al,%dl
f0101440:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101443:	88 10                	mov    %dl,(%eax)
f0101445:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101448:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010144b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010144e:	0f 22 d8             	mov    %eax,%cr3
f0101451:	eb 10                	jmp    f0101463 <command_writeusermem+0xfc>
		lcr3(oldDir);
	}
	else
	{
		cprintf("wum command: invalid number of arguments\n") ;
f0101453:	83 ec 0c             	sub    $0xc,%esp
f0101456:	68 c4 45 13 f0       	push   $0xf01345c4
f010145b:	e8 ae f8 ff ff       	call   f0100d0e <cprintf>
f0101460:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101463:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101468:	c9                   	leave  
f0101469:	c3                   	ret    

f010146a <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f010146a:	55                   	push   %ebp
f010146b:	89 e5                	mov    %esp,%ebp
f010146d:	83 ec 28             	sub    $0x28,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101470:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101473:	83 c0 04             	add    $0x4,%eax
f0101476:	8b 00                	mov    (%eax),%eax
f0101478:	83 ec 04             	sub    $0x4,%esp
f010147b:	6a 10                	push   $0x10
f010147d:	6a 00                	push   $0x0
f010147f:	50                   	push   %eax
f0101480:	e8 e3 04 03 00       	call   f0131968 <strtol>
f0101485:	83 c4 10             	add    $0x10,%esp
f0101488:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010148d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f0101490:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101493:	83 c0 08             	add    $0x8,%eax
f0101496:	8b 00                	mov    (%eax),%eax
f0101498:	83 ec 04             	sub    $0x4,%esp
f010149b:	6a 0a                	push   $0xa
f010149d:	6a 00                	push   $0x0
f010149f:	50                   	push   %eax
f01014a0:	e8 c3 04 03 00       	call   f0131968 <strtol>
f01014a5:	83 c4 10             	add    $0x10,%esp
f01014a8:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int c, i=0;
f01014ab:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int stringLen = strlen(arguments[3]);
f01014b2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014b5:	83 c0 0c             	add    $0xc,%eax
f01014b8:	8b 00                	mov    (%eax),%eax
f01014ba:	83 ec 0c             	sub    $0xc,%esp
f01014bd:	50                   	push   %eax
f01014be:	e8 45 01 03 00       	call   f0131608 <strlen>
f01014c3:	83 c4 10             	add    $0x10,%esp
f01014c6:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	for(c=0; c<size; c++)
f01014c9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01014d0:	eb 30                	jmp    f0101502 <command_writemem_k+0x98>
	{
		for(i=0;i < stringLen; i++)
f01014d2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01014d9:	eb 1c                	jmp    f01014f7 <command_writemem_k+0x8d>
		{
			*address = arguments[3][i];
f01014db:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014de:	83 c0 0c             	add    $0xc,%eax
f01014e1:	8b 10                	mov    (%eax),%edx
f01014e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01014e6:	01 d0                	add    %edx,%eax
f01014e8:	8a 00                	mov    (%eax),%al
f01014ea:	88 c2                	mov    %al,%dl
f01014ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01014ef:	88 10                	mov    %dl,(%eax)
			address++;
f01014f1:	ff 45 f4             	incl   -0xc(%ebp)
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
	{
		for(i=0;i < stringLen; i++)
f01014f4:	ff 45 ec             	incl   -0x14(%ebp)
f01014f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01014fa:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01014fd:	7c dc                	jl     f01014db <command_writemem_k+0x71>
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
f01014ff:	ff 45 f0             	incl   -0x10(%ebp)
f0101502:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101505:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0101508:	7c c8                	jl     f01014d2 <command_writemem_k+0x68>
		{
			*address = arguments[3][i];
			address++;
		}
	}
	return 0;
f010150a:	b8 00 00 00 00       	mov    $0x0,%eax


}
f010150f:	c9                   	leave  
f0101510:	c3                   	ret    

f0101511 <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f0101511:	55                   	push   %ebp
f0101512:	89 e5                	mov    %esp,%ebp
f0101514:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 2)
f0101517:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010151b:	75 42                	jne    f010155f <command_readusermem+0x4e>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f010151d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101520:	83 c0 04             	add    $0x4,%eax
f0101523:	8b 00                	mov    (%eax),%eax
f0101525:	83 ec 04             	sub    $0x4,%esp
f0101528:	6a 10                	push   $0x10
f010152a:	6a 00                	push   $0x0
f010152c:	50                   	push   %eax
f010152d:	e8 36 04 03 00       	call   f0131968 <strtol>
f0101532:	83 c4 10             	add    $0x10,%esp
f0101535:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address ) ;
f0101538:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010153b:	89 45 d8             	mov    %eax,-0x28(%ebp)

		cprintf("value at address %x = %c\n", ptr, *ptr);
f010153e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101541:	8a 00                	mov    (%eax),%al
f0101543:	0f b6 c0             	movzbl %al,%eax
f0101546:	83 ec 04             	sub    $0x4,%esp
f0101549:	50                   	push   %eax
f010154a:	ff 75 d8             	pushl  -0x28(%ebp)
f010154d:	68 ee 45 13 f0       	push   $0xf01345ee
f0101552:	e8 b7 f7 ff ff       	call   f0100d0e <cprintf>
f0101557:	83 c4 10             	add    $0x10,%esp
f010155a:	e9 c4 00 00 00       	jmp    f0101623 <command_readusermem+0x112>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 3)
f010155f:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0101563:	0f 85 aa 00 00 00    	jne    f0101613 <command_readusermem+0x102>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f0101569:	8b 45 0c             	mov    0xc(%ebp),%eax
f010156c:	83 c0 04             	add    $0x4,%eax
f010156f:	8b 00                	mov    (%eax),%eax
f0101571:	83 ec 04             	sub    $0x4,%esp
f0101574:	6a 0a                	push   $0xa
f0101576:	6a 00                	push   $0x0
f0101578:	50                   	push   %eax
f0101579:	e8 ea 03 03 00       	call   f0131968 <strtol>
f010157e:	83 c4 10             	add    $0x10,%esp
f0101581:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f0101584:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f010158b:	83 ec 04             	sub    $0x4,%esp
f010158e:	6a 00                	push   $0x0
f0101590:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101593:	50                   	push   %eax
f0101594:	ff 75 f4             	pushl  -0xc(%ebp)
f0101597:	e8 b4 87 00 00       	call   f0109d50 <envid2env>
f010159c:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f010159f:	8b 45 0c             	mov    0xc(%ebp),%eax
f01015a2:	83 c0 08             	add    $0x8,%eax
f01015a5:	8b 00                	mov    (%eax),%eax
f01015a7:	83 ec 04             	sub    $0x4,%esp
f01015aa:	6a 10                	push   $0x10
f01015ac:	6a 00                	push   $0x0
f01015ae:	50                   	push   %eax
f01015af:	e8 b4 03 03 00       	call   f0131968 <strtol>
f01015b4:	83 c4 10             	add    $0x10,%esp
f01015b7:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f01015ba:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01015bd:	85 c0                	test   %eax,%eax
f01015bf:	75 07                	jne    f01015c8 <command_readusermem+0xb7>
f01015c1:	b8 00 00 00 00       	mov    $0x0,%eax
f01015c6:	eb 60                	jmp    f0101628 <command_readusermem+0x117>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f01015c8:	0f 20 d8             	mov    %cr3,%eax
f01015cb:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f01015ce:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f01015d1:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32)( env->env_cr3));
f01015d4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01015d7:	8b 40 60             	mov    0x60(%eax),%eax
f01015da:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01015dd:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01015e0:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f01015e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01015e6:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		cprintf("value at address %x = %c\n", address, *ptr);
f01015e9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01015ec:	8a 00                	mov    (%eax),%al
f01015ee:	0f b6 c0             	movzbl %al,%eax
f01015f1:	83 ec 04             	sub    $0x4,%esp
f01015f4:	50                   	push   %eax
f01015f5:	ff 75 f0             	pushl  -0x10(%ebp)
f01015f8:	68 ee 45 13 f0       	push   $0xf01345ee
f01015fd:	e8 0c f7 ff ff       	call   f0100d0e <cprintf>
f0101602:	83 c4 10             	add    $0x10,%esp
f0101605:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101608:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010160b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010160e:	0f 22 d8             	mov    %eax,%cr3
f0101611:	eb 10                	jmp    f0101623 <command_readusermem+0x112>

		lcr3(oldDir);
	}
	else
	{
		cprintf("rum command: invalid number of arguments\n") ;
f0101613:	83 ec 0c             	sub    $0xc,%esp
f0101616:	68 08 46 13 f0       	push   $0xf0134608
f010161b:	e8 ee f6 ff ff       	call   f0100d0e <cprintf>
f0101620:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101623:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0101628:	c9                   	leave  
f0101629:	c3                   	ret    

f010162a <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f010162a:	55                   	push   %ebp
f010162b:	89 e5                	mov    %esp,%ebp
f010162d:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101630:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101633:	83 c0 04             	add    $0x4,%eax
f0101636:	8b 00                	mov    (%eax),%eax
f0101638:	83 ec 04             	sub    $0x4,%esp
f010163b:	6a 10                	push   $0x10
f010163d:	6a 00                	push   $0x0
f010163f:	50                   	push   %eax
f0101640:	e8 23 03 03 00       	call   f0131968 <strtol>
f0101645:	83 c4 10             	add    $0x10,%esp
f0101648:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010164d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f0101650:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101653:	83 c0 08             	add    $0x8,%eax
f0101656:	8b 00                	mov    (%eax),%eax
f0101658:	83 ec 04             	sub    $0x4,%esp
f010165b:	6a 0a                	push   $0xa
f010165d:	6a 00                	push   $0x0
f010165f:	50                   	push   %eax
f0101660:	e8 03 03 03 00       	call   f0131968 <strtol>
f0101665:	83 c4 10             	add    $0x10,%esp
f0101668:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int i=0;
f010166b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for(;i < size; i++)
f0101672:	eb 22                	jmp    f0101696 <command_readmem_k+0x6c>
	{
		cprintf("%c",*address++);
f0101674:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101677:	8d 50 01             	lea    0x1(%eax),%edx
f010167a:	89 55 f4             	mov    %edx,-0xc(%ebp)
f010167d:	8a 00                	mov    (%eax),%al
f010167f:	0f b6 c0             	movzbl %al,%eax
f0101682:	83 ec 08             	sub    $0x8,%esp
f0101685:	50                   	push   %eax
f0101686:	68 32 46 13 f0       	push   $0xf0134632
f010168b:	e8 7e f6 ff ff       	call   f0100d0e <cprintf>
f0101690:	83 c4 10             	add    $0x10,%esp
int command_readmem_k(int number_of_arguments, char **arguments)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int i=0;
	for(;i < size; i++)
f0101693:	ff 45 f0             	incl   -0x10(%ebp)
f0101696:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101699:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010169c:	7c d6                	jl     f0101674 <command_readmem_k+0x4a>
	{
		cprintf("%c",*address++);
	}
	cprintf("\n");
f010169e:	83 ec 0c             	sub    $0xc,%esp
f01016a1:	68 35 46 13 f0       	push   $0xf0134635
f01016a6:	e8 63 f6 ff ff       	call   f0100d0e <cprintf>
f01016ab:	83 c4 10             	add    $0x10,%esp
	return 0;
f01016ae:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01016b3:	c9                   	leave  
f01016b4:	c3                   	ret    

f01016b5 <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f01016b5:	55                   	push   %ebp
f01016b6:	89 e5                	mov    %esp,%ebp
f01016b8:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01016bb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01016be:	83 c0 04             	add    $0x4,%eax
f01016c1:	8b 00                	mov    (%eax),%eax
f01016c3:	83 ec 04             	sub    $0x4,%esp
f01016c6:	6a 0a                	push   $0xa
f01016c8:	6a 00                	push   $0x0
f01016ca:	50                   	push   %eax
f01016cb:	e8 98 02 03 00       	call   f0131968 <strtol>
f01016d0:	83 c4 10             	add    $0x10,%esp
f01016d3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f01016d6:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f01016dd:	83 ec 04             	sub    $0x4,%esp
f01016e0:	6a 00                	push   $0x0
f01016e2:	8d 45 d0             	lea    -0x30(%ebp),%eax
f01016e5:	50                   	push   %eax
f01016e6:	ff 75 ec             	pushl  -0x14(%ebp)
f01016e9:	e8 62 86 00 00       	call   f0109d50 <envid2env>
f01016ee:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f01016f1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01016f4:	83 c0 08             	add    $0x8,%eax
f01016f7:	8b 00                	mov    (%eax),%eax
f01016f9:	83 ec 04             	sub    $0x4,%esp
f01016fc:	6a 10                	push   $0x10
f01016fe:	6a 00                	push   $0x0
f0101700:	50                   	push   %eax
f0101701:	e8 62 02 03 00       	call   f0131968 <strtol>
f0101706:	83 c4 10             	add    $0x10,%esp
f0101709:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f010170c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010170f:	83 c0 0c             	add    $0xc,%eax
f0101712:	8b 00                	mov    (%eax),%eax
f0101714:	83 ec 04             	sub    $0x4,%esp
f0101717:	6a 0a                	push   $0xa
f0101719:	6a 00                	push   $0x0
f010171b:	50                   	push   %eax
f010171c:	e8 47 02 03 00       	call   f0131968 <strtol>
f0101721:	83 c4 10             	add    $0x10,%esp
f0101724:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f0101727:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010172a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f010172d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101730:	85 c0                	test   %eax,%eax
f0101732:	75 07                	jne    f010173b <command_readuserblock+0x86>
f0101734:	b8 00 00 00 00       	mov    $0x0,%eax
f0101739:	eb 65                	jmp    f01017a0 <command_readuserblock+0xeb>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f010173b:	0f 20 d8             	mov    %cr3,%eax
f010173e:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f0101741:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f0101744:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f0101747:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010174a:	8b 40 60             	mov    0x60(%eax),%eax
f010174d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101750:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101753:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f0101756:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010175d:	eb 28                	jmp    f0101787 <command_readuserblock+0xd2>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f010175f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101762:	8a 00                	mov    (%eax),%al
f0101764:	0f b6 d0             	movzbl %al,%edx
f0101767:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010176a:	8a 00                	mov    (%eax),%al
f010176c:	0f b6 c0             	movzbl %al,%eax
f010176f:	52                   	push   %edx
f0101770:	50                   	push   %eax
f0101771:	ff 75 f4             	pushl  -0xc(%ebp)
f0101774:	68 37 46 13 f0       	push   $0xf0134637
f0101779:	e8 90 f5 ff ff       	call   f0100d0e <cprintf>
f010177e:	83 c4 10             	add    $0x10,%esp
		ptr++;
f0101781:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f0101784:	ff 45 f0             	incl   -0x10(%ebp)
f0101787:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010178a:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010178d:	7c d0                	jl     f010175f <command_readuserblock+0xaa>
f010178f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101792:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0101795:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101798:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f010179b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01017a0:	c9                   	leave  
f01017a1:	c3                   	ret    

f01017a2 <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f01017a2:	55                   	push   %ebp
f01017a3:	89 e5                	mov    %esp,%ebp
f01017a5:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01017a8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01017ab:	83 c0 04             	add    $0x4,%eax
f01017ae:	8b 00                	mov    (%eax),%eax
f01017b0:	83 ec 04             	sub    $0x4,%esp
f01017b3:	6a 0a                	push   $0xa
f01017b5:	6a 00                	push   $0x0
f01017b7:	50                   	push   %eax
f01017b8:	e8 ab 01 03 00       	call   f0131968 <strtol>
f01017bd:	83 c4 10             	add    $0x10,%esp
f01017c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f01017c3:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f01017ca:	83 ec 04             	sub    $0x4,%esp
f01017cd:	6a 00                	push   $0x0
f01017cf:	8d 45 d8             	lea    -0x28(%ebp),%eax
f01017d2:	50                   	push   %eax
f01017d3:	ff 75 f4             	pushl  -0xc(%ebp)
f01017d6:	e8 75 85 00 00       	call   f0109d50 <envid2env>
f01017db:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f01017de:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01017e1:	85 c0                	test   %eax,%eax
f01017e3:	75 0a                	jne    f01017ef <command_remove_table+0x4d>
f01017e5:	b8 00 00 00 00       	mov    $0x0,%eax
f01017ea:	e9 c7 00 00 00       	jmp    f01018b6 <command_remove_table+0x114>

	uint32 address = strtol(arguments[2], NULL, 16);
f01017ef:	8b 45 0c             	mov    0xc(%ebp),%eax
f01017f2:	83 c0 08             	add    $0x8,%eax
f01017f5:	8b 00                	mov    (%eax),%eax
f01017f7:	83 ec 04             	sub    $0x4,%esp
f01017fa:	6a 10                	push   $0x10
f01017fc:	6a 00                	push   $0x0
f01017fe:	50                   	push   %eax
f01017ff:	e8 64 01 03 00       	call   f0131968 <strtol>
f0101804:	83 c4 10             	add    $0x10,%esp
f0101807:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f010180a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010180d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f0101810:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101813:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101816:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101819:	c1 ea 16             	shr    $0x16,%edx
f010181c:	c1 e2 02             	shl    $0x2,%edx
f010181f:	01 d0                	add    %edx,%eax
f0101821:	8b 00                	mov    (%eax),%eax
f0101823:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0101828:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//remove the table
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(va))
f010182b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010182e:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f0101833:	77 1c                	ja     f0101851 <command_remove_table+0xaf>
	{
		kfree((void*)kheap_virtual_address(table_pa));
f0101835:	83 ec 0c             	sub    $0xc,%esp
f0101838:	ff 75 e8             	pushl  -0x18(%ebp)
f010183b:	e8 6c 64 00 00       	call   f0107cac <kheap_virtual_address>
f0101840:	83 c4 10             	add    $0x10,%esp
f0101843:	83 ec 0c             	sub    $0xc,%esp
f0101846:	50                   	push   %eax
f0101847:	e8 2b 63 00 00       	call   f0107b77 <kfree>
f010184c:	83 c4 10             	add    $0x10,%esp
f010184f:	eb 28                	jmp    f0101879 <command_remove_table+0xd7>
	}
	else
	{
		// get the physical address and FrameInfo of the page table
		struct FrameInfo *table_FrameInfo = to_frame_info(table_pa);
f0101851:	83 ec 0c             	sub    $0xc,%esp
f0101854:	ff 75 e8             	pushl  -0x18(%ebp)
f0101857:	e8 a9 f7 ff ff       	call   f0101005 <to_frame_info>
f010185c:	83 c4 10             	add    $0x10,%esp
f010185f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_FrameInfo->references = 0;
f0101862:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101865:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_FrameInfo);
f010186b:	83 ec 0c             	sub    $0xc,%esp
f010186e:	ff 75 e4             	pushl  -0x1c(%ebp)
f0101871:	e8 6f 51 00 00       	call   f01069e5 <free_frame>
f0101876:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f0101879:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010187c:	c1 e8 16             	shr    $0x16,%eax
f010187f:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f0101882:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101885:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101888:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010188b:	c1 e2 02             	shl    $0x2,%edx
f010188e:	01 c2                	add    %eax,%edx
f0101890:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101893:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101896:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f0101899:	c1 e1 02             	shl    $0x2,%ecx
f010189c:	01 c8                	add    %ecx,%eax
f010189e:	8b 00                	mov    (%eax),%eax
f01018a0:	83 e0 fe             	and    $0xfffffffe,%eax
f01018a3:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f01018a5:	0f 20 d8             	mov    %cr3,%eax
f01018a8:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f01018ab:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01018ae:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f01018b1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01018b6:	c9                   	leave  
f01018b7:	c3                   	ret    

f01018b8 <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f01018b8:	55                   	push   %ebp
f01018b9:	89 e5                	mov    %esp,%ebp
f01018bb:	83 ec 28             	sub    $0x28,%esp
	if (number_of_arguments < 3 || number_of_arguments > 4)
f01018be:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f01018c2:	7e 06                	jle    f01018ca <command_allocuserpage+0x12>
f01018c4:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01018c8:	7e 1a                	jle    f01018e4 <command_allocuserpage+0x2c>
	{
		cprintf("aup command: invalid number of arguments\n") ;
f01018ca:	83 ec 0c             	sub    $0xc,%esp
f01018cd:	68 48 46 13 f0       	push   $0xf0134648
f01018d2:	e8 37 f4 ff ff       	call   f0100d0e <cprintf>
f01018d7:	83 c4 10             	add    $0x10,%esp
		return 0;
f01018da:	b8 00 00 00 00       	mov    $0x0,%eax
f01018df:	e9 46 01 00 00       	jmp    f0101a2a <command_allocuserpage+0x172>
	}
	int32 envId = strtol(arguments[1],NULL, 10);
f01018e4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01018e7:	83 c0 04             	add    $0x4,%eax
f01018ea:	8b 00                	mov    (%eax),%eax
f01018ec:	83 ec 04             	sub    $0x4,%esp
f01018ef:	6a 0a                	push   $0xa
f01018f1:	6a 00                	push   $0x0
f01018f3:	50                   	push   %eax
f01018f4:	e8 6f 00 03 00       	call   f0131968 <strtol>
f01018f9:	83 c4 10             	add    $0x10,%esp
f01018fc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct Env* env = NULL;
f01018ff:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	envid2env(envId, &env, 0 );
f0101906:	83 ec 04             	sub    $0x4,%esp
f0101909:	6a 00                	push   $0x0
f010190b:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f010190e:	50                   	push   %eax
f010190f:	ff 75 f0             	pushl  -0x10(%ebp)
f0101912:	e8 39 84 00 00       	call   f0109d50 <envid2env>
f0101917:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f010191a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010191d:	85 c0                	test   %eax,%eax
f010191f:	75 0a                	jne    f010192b <command_allocuserpage+0x73>
f0101921:	b8 00 00 00 00       	mov    $0x0,%eax
f0101926:	e9 ff 00 00 00       	jmp    f0101a2a <command_allocuserpage+0x172>

	uint32 va = strtol(arguments[2], NULL, 16);
f010192b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010192e:	83 c0 08             	add    $0x8,%eax
f0101931:	8b 00                	mov    (%eax),%eax
f0101933:	83 ec 04             	sub    $0x4,%esp
f0101936:	6a 10                	push   $0x10
f0101938:	6a 00                	push   $0x0
f010193a:	50                   	push   %eax
f010193b:	e8 28 00 03 00       	call   f0131968 <strtol>
f0101940:	83 c4 10             	add    $0x10,%esp
f0101943:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct FrameInfo * ptr_FrameInfo ;
	int ret = allocate_frame(&ptr_FrameInfo);
f0101946:	83 ec 0c             	sub    $0xc,%esp
f0101949:	8d 45 e0             	lea    -0x20(%ebp),%eax
f010194c:	50                   	push   %eax
f010194d:	e8 7e 4f 00 00       	call   f01068d0 <allocate_frame>
f0101952:	83 c4 10             	add    $0x10,%esp
f0101955:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f0101958:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f010195c:	75 1a                	jne    f0101978 <command_allocuserpage+0xc0>
	{
		cprintf("ERROR: no enough memory\n");
f010195e:	83 ec 0c             	sub    $0xc,%esp
f0101961:	68 72 46 13 f0       	push   $0xf0134672
f0101966:	e8 a3 f3 ff ff       	call   f0100d0e <cprintf>
f010196b:	83 c4 10             	add    $0x10,%esp
		return 0;
f010196e:	b8 00 00 00 00       	mov    $0x0,%eax
f0101973:	e9 b2 00 00 00       	jmp    f0101a2a <command_allocuserpage+0x172>
	}

	if (number_of_arguments == 3)
f0101978:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f010197c:	75 1d                	jne    f010199b <command_allocuserpage+0xe3>
	{
		// Map this frame to the given user virtual address with PERM_WRITEABLE
		map_frame(env->env_page_directory, ptr_FrameInfo, va, PERM_WRITEABLE | PERM_USER);
f010197e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101981:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101984:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101987:	6a 06                	push   $0x6
f0101989:	ff 75 ec             	pushl  -0x14(%ebp)
f010198c:	52                   	push   %edx
f010198d:	50                   	push   %eax
f010198e:	e8 8c 53 00 00       	call   f0106d1f <map_frame>
f0101993:	83 c4 10             	add    $0x10,%esp
f0101996:	e9 8a 00 00 00       	jmp    f0101a25 <command_allocuserpage+0x16d>
	}
	else if (number_of_arguments == 4)
f010199b:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f010199f:	0f 85 80 00 00 00    	jne    f0101a25 <command_allocuserpage+0x16d>
	{
		// Map this frame to the given user virtual address with the given permission
		uint32 rw ;
		if (arguments[3][0] == 'r' || arguments[3][0] == 'R')
f01019a5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019a8:	83 c0 0c             	add    $0xc,%eax
f01019ab:	8b 00                	mov    (%eax),%eax
f01019ad:	8a 00                	mov    (%eax),%al
f01019af:	3c 72                	cmp    $0x72,%al
f01019b1:	74 0e                	je     f01019c1 <command_allocuserpage+0x109>
f01019b3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019b6:	83 c0 0c             	add    $0xc,%eax
f01019b9:	8b 00                	mov    (%eax),%eax
f01019bb:	8a 00                	mov    (%eax),%al
f01019bd:	3c 52                	cmp    $0x52,%al
f01019bf:	75 09                	jne    f01019ca <command_allocuserpage+0x112>
			rw = 0 ;
f01019c1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01019c8:	eb 3c                	jmp    f0101a06 <command_allocuserpage+0x14e>
		else if (arguments[3][0] == 'w' || arguments[3][0] == 'W')
f01019ca:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019cd:	83 c0 0c             	add    $0xc,%eax
f01019d0:	8b 00                	mov    (%eax),%eax
f01019d2:	8a 00                	mov    (%eax),%al
f01019d4:	3c 77                	cmp    $0x77,%al
f01019d6:	74 0e                	je     f01019e6 <command_allocuserpage+0x12e>
f01019d8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019db:	83 c0 0c             	add    $0xc,%eax
f01019de:	8b 00                	mov    (%eax),%eax
f01019e0:	8a 00                	mov    (%eax),%al
f01019e2:	3c 57                	cmp    $0x57,%al
f01019e4:	75 09                	jne    f01019ef <command_allocuserpage+0x137>
			rw = PERM_WRITEABLE ;
f01019e6:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f01019ed:	eb 17                	jmp    f0101a06 <command_allocuserpage+0x14e>
		else
		{
			cprintf("aup command: wrong permission (r/w)... will continue as writable\n") ;
f01019ef:	83 ec 0c             	sub    $0xc,%esp
f01019f2:	68 8c 46 13 f0       	push   $0xf013468c
f01019f7:	e8 12 f3 ff ff       	call   f0100d0e <cprintf>
f01019fc:	83 c4 10             	add    $0x10,%esp
			rw = PERM_WRITEABLE ;
f01019ff:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
		}

		map_frame(env->env_page_directory, ptr_FrameInfo, va, rw | PERM_USER);
f0101a06:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101a09:	83 c8 04             	or     $0x4,%eax
f0101a0c:	89 c1                	mov    %eax,%ecx
f0101a0e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101a11:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101a14:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101a17:	51                   	push   %ecx
f0101a18:	ff 75 ec             	pushl  -0x14(%ebp)
f0101a1b:	52                   	push   %edx
f0101a1c:	50                   	push   %eax
f0101a1d:	e8 fd 52 00 00       	call   f0106d1f <map_frame>
f0101a22:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101a25:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101a2a:	c9                   	leave  
f0101a2b:	c3                   	ret    

f0101a2c <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f0101a2c:	55                   	push   %ebp
f0101a2d:	89 e5                	mov    %esp,%ebp
f0101a2f:	56                   	push   %esi
f0101a30:	53                   	push   %ebx
f0101a31:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f0101a34:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0101a37:	83 ec 0c             	sub    $0xc,%esp
f0101a3a:	50                   	push   %eax
f0101a3b:	e8 79 55 00 00       	call   f0106fb9 <calculate_available_frames>
f0101a40:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0101a43:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101a46:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101a49:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f0101a4c:	8b 75 ec             	mov    -0x14(%ebp),%esi
f0101a4f:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0101a52:	01 de                	add    %ebx,%esi
f0101a54:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0101a57:	01 f3                	add    %esi,%ebx
f0101a59:	83 ec 0c             	sub    $0xc,%esp
f0101a5c:	51                   	push   %ecx
f0101a5d:	52                   	push   %edx
f0101a5e:	50                   	push   %eax
f0101a5f:	53                   	push   %ebx
f0101a60:	68 d0 46 13 f0       	push   $0xf01346d0
f0101a65:	e8 a4 f2 ff ff       	call   f0100d0e <cprintf>
f0101a6a:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f0101a6d:	a1 70 27 86 f0       	mov    0xf0862770,%eax
f0101a72:	83 ec 08             	sub    $0x8,%esp
f0101a75:	50                   	push   %eax
f0101a76:	68 28 47 13 f0       	push   $0xf0134728
f0101a7b:	e8 8e f2 ff ff       	call   f0100d0e <cprintf>
f0101a80:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101a83:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101a88:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0101a8b:	5b                   	pop    %ebx
f0101a8c:	5e                   	pop    %esi
f0101a8d:	5d                   	pop    %ebp
f0101a8e:	c3                   	ret    

f0101a8f <CreateEnv>:

//2020
struct Env * CreateEnv(int number_of_arguments, char **arguments)
{
f0101a8f:	55                   	push   %ebp
f0101a90:	89 e5                	mov    %esp,%ebp
f0101a92:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	uint32 pageWSSize = __PWS_MAX_SIZE;		//arg#3 default
f0101a95:	c7 45 f4 88 13 00 00 	movl   $0x1388,-0xc(%ebp)
	uint32 LRUSecondListSize = 0;			//arg#4 default
f0101a9c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 percent_WS_pages_to_remove = 0;	//arg#5 default
f0101aa3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
#if USE_KHEAP
	{
		switch (number_of_arguments)
f0101aaa:	8b 45 08             	mov    0x8(%ebp),%eax
f0101aad:	83 f8 04             	cmp    $0x4,%eax
f0101ab0:	0f 84 94 00 00 00    	je     f0101b4a <CreateEnv+0xbb>
f0101ab6:	83 f8 05             	cmp    $0x5,%eax
f0101ab9:	74 0e                	je     f0101ac9 <CreateEnv+0x3a>
f0101abb:	83 f8 03             	cmp    $0x3,%eax
f0101abe:	0f 84 ec 00 00 00    	je     f0101bb0 <CreateEnv+0x121>
f0101ac4:	e9 2f 01 00 00       	jmp    f0101bf8 <CreateEnv+0x169>
		{
		case 5:
			if(!isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101ac9:	83 ec 0c             	sub    $0xc,%esp
f0101acc:	6a 02                	push   $0x2
f0101ace:	e8 b6 c4 00 00       	call   f010df89 <isPageReplacmentAlgorithmLRU>
f0101ad3:	83 c4 10             	add    $0x10,%esp
f0101ad6:	85 c0                	test   %eax,%eax
f0101ad8:	75 1a                	jne    f0101af4 <CreateEnv+0x65>
			{
				cprintf("ERROR: Current Replacement is NOT LRU LISTS, invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0101ada:	83 ec 0c             	sub    $0xc,%esp
f0101add:	68 64 47 13 f0       	push   $0xf0134764
f0101ae2:	e8 27 f2 ff ff       	call   f0100d0e <cprintf>
f0101ae7:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101aea:	b8 00 00 00 00       	mov    $0x0,%eax
f0101aef:	e9 d5 01 00 00       	jmp    f0101cc9 <CreateEnv+0x23a>
			}
			percent_WS_pages_to_remove = strtol(arguments[4], NULL, 10);
f0101af4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101af7:	83 c0 10             	add    $0x10,%eax
f0101afa:	8b 00                	mov    (%eax),%eax
f0101afc:	83 ec 04             	sub    $0x4,%esp
f0101aff:	6a 0a                	push   $0xa
f0101b01:	6a 00                	push   $0x0
f0101b03:	50                   	push   %eax
f0101b04:	e8 5f fe 02 00       	call   f0131968 <strtol>
f0101b09:	83 c4 10             	add    $0x10,%esp
f0101b0c:	89 45 ec             	mov    %eax,-0x14(%ebp)
			LRUSecondListSize = strtol(arguments[3], NULL, 10);
f0101b0f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b12:	83 c0 0c             	add    $0xc,%eax
f0101b15:	8b 00                	mov    (%eax),%eax
f0101b17:	83 ec 04             	sub    $0x4,%esp
f0101b1a:	6a 0a                	push   $0xa
f0101b1c:	6a 00                	push   $0x0
f0101b1e:	50                   	push   %eax
f0101b1f:	e8 44 fe 02 00       	call   f0131968 <strtol>
f0101b24:	83 c4 10             	add    $0x10,%esp
f0101b27:	89 45 f0             	mov    %eax,-0x10(%ebp)
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101b2a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b2d:	83 c0 08             	add    $0x8,%eax
f0101b30:	8b 00                	mov    (%eax),%eax
f0101b32:	83 ec 04             	sub    $0x4,%esp
f0101b35:	6a 0a                	push   $0xa
f0101b37:	6a 00                	push   $0x0
f0101b39:	50                   	push   %eax
f0101b3a:	e8 29 fe 02 00       	call   f0131968 <strtol>
f0101b3f:	83 c4 10             	add    $0x10,%esp
f0101b42:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101b45:	e9 c8 00 00 00       	jmp    f0101c12 <CreateEnv+0x183>
		case 4:
			if(!isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101b4a:	83 ec 0c             	sub    $0xc,%esp
f0101b4d:	6a 02                	push   $0x2
f0101b4f:	e8 35 c4 00 00       	call   f010df89 <isPageReplacmentAlgorithmLRU>
f0101b54:	83 c4 10             	add    $0x10,%esp
f0101b57:	85 c0                	test   %eax,%eax
f0101b59:	75 1d                	jne    f0101b78 <CreateEnv+0xe9>
			{
				percent_WS_pages_to_remove = strtol(arguments[3], NULL, 10);
f0101b5b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b5e:	83 c0 0c             	add    $0xc,%eax
f0101b61:	8b 00                	mov    (%eax),%eax
f0101b63:	83 ec 04             	sub    $0x4,%esp
f0101b66:	6a 0a                	push   $0xa
f0101b68:	6a 00                	push   $0x0
f0101b6a:	50                   	push   %eax
f0101b6b:	e8 f8 fd 02 00       	call   f0131968 <strtol>
f0101b70:	83 c4 10             	add    $0x10,%esp
f0101b73:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0101b76:	eb 1b                	jmp    f0101b93 <CreateEnv+0x104>
			}
			else
			{
				LRUSecondListSize = strtol(arguments[3], NULL, 10);
f0101b78:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b7b:	83 c0 0c             	add    $0xc,%eax
f0101b7e:	8b 00                	mov    (%eax),%eax
f0101b80:	83 ec 04             	sub    $0x4,%esp
f0101b83:	6a 0a                	push   $0xa
f0101b85:	6a 00                	push   $0x0
f0101b87:	50                   	push   %eax
f0101b88:	e8 db fd 02 00       	call   f0131968 <strtol>
f0101b8d:	83 c4 10             	add    $0x10,%esp
f0101b90:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101b93:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b96:	83 c0 08             	add    $0x8,%eax
f0101b99:	8b 00                	mov    (%eax),%eax
f0101b9b:	83 ec 04             	sub    $0x4,%esp
f0101b9e:	6a 0a                	push   $0xa
f0101ba0:	6a 00                	push   $0x0
f0101ba2:	50                   	push   %eax
f0101ba3:	e8 c0 fd 02 00       	call   f0131968 <strtol>
f0101ba8:	83 c4 10             	add    $0x10,%esp
f0101bab:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101bae:	eb 62                	jmp    f0101c12 <CreateEnv+0x183>
		case 3:
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101bb0:	83 ec 0c             	sub    $0xc,%esp
f0101bb3:	6a 02                	push   $0x2
f0101bb5:	e8 cf c3 00 00       	call   f010df89 <isPageReplacmentAlgorithmLRU>
f0101bba:	83 c4 10             	add    $0x10,%esp
f0101bbd:	85 c0                	test   %eax,%eax
f0101bbf:	74 1a                	je     f0101bdb <CreateEnv+0x14c>
			{
				cprintf("ERROR: Current Replacement is LRU LISTS, Please specify a working set size in the 3rd arg and LRU second list size in the 4th arg, aborting.\n");
f0101bc1:	83 ec 0c             	sub    $0xc,%esp
f0101bc4:	68 24 48 13 f0       	push   $0xf0134824
f0101bc9:	e8 40 f1 ff ff       	call   f0100d0e <cprintf>
f0101bce:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101bd1:	b8 00 00 00 00       	mov    $0x0,%eax
f0101bd6:	e9 ee 00 00 00       	jmp    f0101cc9 <CreateEnv+0x23a>
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101bdb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101bde:	83 c0 08             	add    $0x8,%eax
f0101be1:	8b 00                	mov    (%eax),%eax
f0101be3:	83 ec 04             	sub    $0x4,%esp
f0101be6:	6a 0a                	push   $0xa
f0101be8:	6a 00                	push   $0x0
f0101bea:	50                   	push   %eax
f0101beb:	e8 78 fd 02 00       	call   f0131968 <strtol>
f0101bf0:	83 c4 10             	add    $0x10,%esp
f0101bf3:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101bf6:	eb 1a                	jmp    f0101c12 <CreateEnv+0x183>
		default:
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0101bf8:	83 ec 0c             	sub    $0xc,%esp
f0101bfb:	68 b4 48 13 f0       	push   $0xf01348b4
f0101c00:	e8 09 f1 ff ff       	call   f0100d0e <cprintf>
f0101c05:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0101c08:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c0d:	e9 b7 00 00 00       	jmp    f0101cc9 <CreateEnv+0x23a>

			break;
		}
		if(pageWSSize > __PWS_MAX_SIZE)
f0101c12:	81 7d f4 88 13 00 00 	cmpl   $0x1388,-0xc(%ebp)
f0101c19:	76 1f                	jbe    f0101c3a <CreateEnv+0x1ab>
		{
			cprintf("ERROR: size of WS must be less than or equal to %d... aborting", __PWS_MAX_SIZE);
f0101c1b:	83 ec 08             	sub    $0x8,%esp
f0101c1e:	68 88 13 00 00       	push   $0x1388
f0101c23:	68 4c 49 13 f0       	push   $0xf013494c
f0101c28:	e8 e1 f0 ff ff       	call   f0100d0e <cprintf>
f0101c2d:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0101c30:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c35:	e9 8f 00 00 00       	jmp    f0101cc9 <CreateEnv+0x23a>
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101c3a:	83 ec 0c             	sub    $0xc,%esp
f0101c3d:	6a 02                	push   $0x2
f0101c3f:	e8 45 c3 00 00       	call   f010df89 <isPageReplacmentAlgorithmLRU>
f0101c44:	83 c4 10             	add    $0x10,%esp
f0101c47:	85 c0                	test   %eax,%eax
f0101c49:	74 20                	je     f0101c6b <CreateEnv+0x1dc>
		{
			if (LRUSecondListSize > pageWSSize - 1)
f0101c4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101c4e:	48                   	dec    %eax
f0101c4f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0101c52:	73 17                	jae    f0101c6b <CreateEnv+0x1dc>
			{
				cprintf("ERROR: size of LRU second list can't equal/exceed the size of the page WS... aborting\n");
f0101c54:	83 ec 0c             	sub    $0xc,%esp
f0101c57:	68 8c 49 13 f0       	push   $0xf013498c
f0101c5c:	e8 ad f0 ff ff       	call   f0100d0e <cprintf>
f0101c61:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101c64:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c69:	eb 5e                	jmp    f0101cc9 <CreateEnv+0x23a>
			}
		}
		assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0101c6b:	83 7d ec 64          	cmpl   $0x64,-0x14(%ebp)
f0101c6f:	76 19                	jbe    f0101c8a <CreateEnv+0x1fb>
f0101c71:	68 e4 49 13 f0       	push   $0xf01349e4
f0101c76:	68 29 4a 13 f0       	push   $0xf0134a29
f0101c7b:	68 5a 02 00 00       	push   $0x25a
f0101c80:	68 ad 45 13 f0       	push   $0xf01345ad
f0101c85:	e8 7b e5 ff ff       	call   f0100205 <_panic>
		{
			LRUSecondListSize = __LRU_SNDLST_SIZE;
		}
	}
#endif
	assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0101c8a:	83 7d ec 64          	cmpl   $0x64,-0x14(%ebp)
f0101c8e:	76 19                	jbe    f0101ca9 <CreateEnv+0x21a>
f0101c90:	68 e4 49 13 f0       	push   $0xf01349e4
f0101c95:	68 29 4a 13 f0       	push   $0xf0134a29
f0101c9a:	68 71 02 00 00       	push   $0x271
f0101c9f:	68 ad 45 13 f0       	push   $0xf01345ad
f0101ca4:	e8 5c e5 ff ff       	call   f0100205 <_panic>
	env = env_create(arguments[1], pageWSSize, LRUSecondListSize, percent_WS_pages_to_remove);
f0101ca9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101cac:	83 c0 04             	add    $0x4,%eax
f0101caf:	8b 00                	mov    (%eax),%eax
f0101cb1:	ff 75 ec             	pushl  -0x14(%ebp)
f0101cb4:	ff 75 f0             	pushl  -0x10(%ebp)
f0101cb7:	ff 75 f4             	pushl  -0xc(%ebp)
f0101cba:	50                   	push   %eax
f0101cbb:	e8 e9 73 00 00       	call   f01090a9 <env_create>
f0101cc0:	83 c4 10             	add    $0x10,%esp
f0101cc3:	89 45 e8             	mov    %eax,-0x18(%ebp)

	return env;
f0101cc6:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0101cc9:	c9                   	leave  
f0101cca:	c3                   	ret    

f0101ccb <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f0101ccb:	55                   	push   %ebp
f0101ccc:	89 e5                	mov    %esp,%ebp
f0101cce:	83 ec 18             	sub    $0x18,%esp
	//[1] Create and initialize a new environment for the program to be run
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101cd1:	83 ec 08             	sub    $0x8,%esp
f0101cd4:	ff 75 0c             	pushl  0xc(%ebp)
f0101cd7:	ff 75 08             	pushl  0x8(%ebp)
f0101cda:	e8 b0 fd ff ff       	call   f0101a8f <CreateEnv>
f0101cdf:	83 c4 10             	add    $0x10,%esp
f0101ce2:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(env == NULL) return 0;
f0101ce5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101ce9:	75 07                	jne    f0101cf2 <command_run_program+0x27>
f0101ceb:	b8 00 00 00 00       	mov    $0x0,%eax
f0101cf0:	eb 46                	jmp    f0101d38 <command_run_program+0x6d>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101cf2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101cf5:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101cf8:	83 ec 08             	sub    $0x8,%esp
f0101cfb:	50                   	push   %eax
f0101cfc:	68 3e 4a 13 f0       	push   $0xf0134a3e
f0101d01:	e8 08 f0 ff ff       	call   f0100d0e <cprintf>
f0101d06:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f0101d09:	c7 05 70 27 86 f0 00 	movl   $0x0,0xf0862770
f0101d10:	00 00 00 

	//[2] Run the created environment by adding it to the "ready" queue then invoke the scheduler to execute it
	sched_new_env(env);
f0101d13:	83 ec 0c             	sub    $0xc,%esp
f0101d16:	ff 75 f4             	pushl  -0xc(%ebp)
f0101d19:	e8 c4 34 00 00       	call   f01051e2 <sched_new_env>
f0101d1e:	83 c4 10             	add    $0x10,%esp
	sched_run_env(env->env_id);
f0101d21:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d24:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101d27:	83 ec 0c             	sub    $0xc,%esp
f0101d2a:	50                   	push   %eax
f0101d2b:	e8 cf 34 00 00       	call   f01051ff <sched_run_env>
f0101d30:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101d33:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d38:	c9                   	leave  
f0101d39:	c3                   	ret    

f0101d3a <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f0101d3a:	55                   	push   %ebp
f0101d3b:	89 e5                	mov    %esp,%ebp
f0101d3d:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101d40:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d43:	83 c0 04             	add    $0x4,%eax
f0101d46:	8b 00                	mov    (%eax),%eax
f0101d48:	83 ec 04             	sub    $0x4,%esp
f0101d4b:	6a 0a                	push   $0xa
f0101d4d:	6a 00                	push   $0x0
f0101d4f:	50                   	push   %eax
f0101d50:	e8 13 fc 02 00       	call   f0131968 <strtol>
f0101d55:	83 c4 10             	add    $0x10,%esp
f0101d58:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f0101d5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d5e:	83 ec 0c             	sub    $0xc,%esp
f0101d61:	50                   	push   %eax
f0101d62:	e8 b6 38 00 00       	call   f010561d <sched_kill_env>
f0101d67:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101d6a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d6f:	c9                   	leave  
f0101d70:	c3                   	ret    

f0101d71 <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f0101d71:	55                   	push   %ebp
f0101d72:	89 e5                	mov    %esp,%ebp
f0101d74:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101d77:	83 ec 08             	sub    $0x8,%esp
f0101d7a:	ff 75 0c             	pushl  0xc(%ebp)
f0101d7d:	ff 75 08             	pushl  0x8(%ebp)
f0101d80:	e8 0a fd ff ff       	call   f0101a8f <CreateEnv>
f0101d85:	83 c4 10             	add    $0x10,%esp
f0101d88:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (env == NULL)
f0101d8b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101d8f:	75 07                	jne    f0101d98 <commnad_load_env+0x27>
		return 0 ;
f0101d91:	b8 00 00 00 00       	mov    $0x0,%eax
f0101d96:	eb 2a                	jmp    f0101dc2 <commnad_load_env+0x51>

	sched_new_env(env) ;
f0101d98:	83 ec 0c             	sub    $0xc,%esp
f0101d9b:	ff 75 f4             	pushl  -0xc(%ebp)
f0101d9e:	e8 3f 34 00 00       	call   f01051e2 <sched_new_env>
f0101da3:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101da6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101da9:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101dac:	83 ec 08             	sub    $0x8,%esp
f0101daf:	50                   	push   %eax
f0101db0:	68 3e 4a 13 f0       	push   $0xf0134a3e
f0101db5:	e8 54 ef ff ff       	call   f0100d0e <cprintf>
f0101dba:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101dbd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101dc2:	c9                   	leave  
f0101dc3:	c3                   	ret    

f0101dc4 <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f0101dc4:	55                   	push   %ebp
f0101dc5:	89 e5                	mov    %esp,%ebp
f0101dc7:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f0101dca:	c7 05 70 27 86 f0 00 	movl   $0x0,0xf0862770
f0101dd1:	00 00 00 
	sched_run_all();
f0101dd4:	e8 51 30 00 00       	call   f0104e2a <sched_run_all>

	return 0 ;
f0101dd9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101dde:	c9                   	leave  
f0101ddf:	c3                   	ret    

f0101de0 <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f0101de0:	55                   	push   %ebp
f0101de1:	89 e5                	mov    %esp,%ebp
f0101de3:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f0101de6:	e8 35 2e 00 00       	call   f0104c20 <sched_print_all>

	return 0 ;
f0101deb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101df0:	c9                   	leave  
f0101df1:	c3                   	ret    

f0101df2 <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f0101df2:	55                   	push   %ebp
f0101df3:	89 e5                	mov    %esp,%ebp
f0101df5:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f0101df8:	e8 a0 30 00 00       	call   f0104e9d <sched_kill_all>

	return 0 ;
f0101dfd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e02:	c9                   	leave  
f0101e03:	c3                   	ret    

f0101e04 <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f0101e04:	55                   	push   %ebp
f0101e05:	89 e5                	mov    %esp,%ebp
f0101e07:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments < 2)
f0101e0a:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0101e0e:	7f 1a                	jg     f0101e2a <command_set_page_rep_LRU+0x26>
	{
		cprintf("ERROR: please specify the LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101e10:	83 ec 0c             	sub    $0xc,%esp
f0101e13:	68 54 4a 13 f0       	push   $0xf0134a54
f0101e18:	e8 f1 ee ff ff       	call   f0100d0e <cprintf>
f0101e1d:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101e20:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e25:	e9 83 00 00 00       	jmp    f0101ead <command_set_page_rep_LRU+0xa9>
	}
	int LRU_TYPE = strtol(arguments[1], NULL, 10) ;
f0101e2a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101e2d:	83 c0 04             	add    $0x4,%eax
f0101e30:	8b 00                	mov    (%eax),%eax
f0101e32:	83 ec 04             	sub    $0x4,%esp
f0101e35:	6a 0a                	push   $0xa
f0101e37:	6a 00                	push   $0x0
f0101e39:	50                   	push   %eax
f0101e3a:	e8 29 fb 02 00       	call   f0131968 <strtol>
f0101e3f:	83 c4 10             	add    $0x10,%esp
f0101e42:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (LRU_TYPE == PG_REP_LRU_TIME_APPROX)
f0101e45:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0101e49:	75 20                	jne    f0101e6b <command_set_page_rep_LRU+0x67>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101e4b:	83 ec 0c             	sub    $0xc,%esp
f0101e4e:	ff 75 f4             	pushl  -0xc(%ebp)
f0101e51:	e8 a8 c0 00 00       	call   f010defe <setPageReplacmentAlgorithmLRU>
f0101e56:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with TimeStamp approximation\n");
f0101e59:	83 ec 0c             	sub    $0xc,%esp
f0101e5c:	68 b4 4a 13 f0       	push   $0xf0134ab4
f0101e61:	e8 a8 ee ff ff       	call   f0100d0e <cprintf>
f0101e66:	83 c4 10             	add    $0x10,%esp
f0101e69:	eb 3d                	jmp    f0101ea8 <command_set_page_rep_LRU+0xa4>
	}
	else if (LRU_TYPE == PG_REP_LRU_LISTS_APPROX)
f0101e6b:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0101e6f:	75 20                	jne    f0101e91 <command_set_page_rep_LRU+0x8d>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101e71:	83 ec 0c             	sub    $0xc,%esp
f0101e74:	ff 75 f4             	pushl  -0xc(%ebp)
f0101e77:	e8 82 c0 00 00       	call   f010defe <setPageReplacmentAlgorithmLRU>
f0101e7c:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with LISTS approximation\n");
f0101e7f:	83 ec 0c             	sub    $0xc,%esp
f0101e82:	68 f8 4a 13 f0       	push   $0xf0134af8
f0101e87:	e8 82 ee ff ff       	call   f0100d0e <cprintf>
f0101e8c:	83 c4 10             	add    $0x10,%esp
f0101e8f:	eb 17                	jmp    f0101ea8 <command_set_page_rep_LRU+0xa4>
	}
	else
	{
		cprintf("ERROR: Invalid LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101e91:	83 ec 0c             	sub    $0xc,%esp
f0101e94:	68 38 4b 13 f0       	push   $0xf0134b38
f0101e99:	e8 70 ee ff ff       	call   f0100d0e <cprintf>
f0101e9e:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101ea1:	b8 00 00 00 00       	mov    $0x0,%eax
f0101ea6:	eb 05                	jmp    f0101ead <command_set_page_rep_LRU+0xa9>
	}
	return 0;
f0101ea8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101ead:	c9                   	leave  
f0101eae:	c3                   	ret    

f0101eaf <command_set_page_rep_nthCLOCK>:
//2021
int command_set_page_rep_nthCLOCK(int number_of_arguments, char **arguments)
{
f0101eaf:	55                   	push   %ebp
f0101eb0:	89 e5                	mov    %esp,%ebp
f0101eb2:	83 ec 18             	sub    $0x18,%esp
	uint32 PageWSMaxSweeps = strtol(arguments[1], NULL, 10);
f0101eb5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101eb8:	83 c0 04             	add    $0x4,%eax
f0101ebb:	8b 00                	mov    (%eax),%eax
f0101ebd:	83 ec 04             	sub    $0x4,%esp
f0101ec0:	6a 0a                	push   $0xa
f0101ec2:	6a 00                	push   $0x0
f0101ec4:	50                   	push   %eax
f0101ec5:	e8 9e fa 02 00       	call   f0131968 <strtol>
f0101eca:	83 c4 10             	add    $0x10,%esp
f0101ecd:	89 45 f4             	mov    %eax,-0xc(%ebp)
	setPageReplacmentAlgorithmNchanceCLOCK(PageWSMaxSweeps);
f0101ed0:	83 ec 0c             	sub    $0xc,%esp
f0101ed3:	ff 75 f4             	pushl  -0xc(%ebp)
f0101ed6:	e8 96 c0 00 00       	call   f010df71 <setPageReplacmentAlgorithmNchanceCLOCK>
f0101edb:	83 c4 10             	add    $0x10,%esp
	cprintf("Page replacement algorithm is now N chance CLOCK\n");
f0101ede:	83 ec 0c             	sub    $0xc,%esp
f0101ee1:	68 8c 4b 13 f0       	push   $0xf0134b8c
f0101ee6:	e8 23 ee ff ff       	call   f0100d0e <cprintf>
f0101eeb:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101eee:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101ef3:	c9                   	leave  
f0101ef4:	c3                   	ret    

f0101ef5 <command_set_page_rep_CLOCK>:
int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f0101ef5:	55                   	push   %ebp
f0101ef6:	89 e5                	mov    %esp,%ebp
f0101ef8:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f0101efb:	e8 31 c0 00 00       	call   f010df31 <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f0101f00:	83 ec 0c             	sub    $0xc,%esp
f0101f03:	68 c0 4b 13 f0       	push   $0xf0134bc0
f0101f08:	e8 01 ee ff ff       	call   f0100d0e <cprintf>
f0101f0d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f10:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f15:	c9                   	leave  
f0101f16:	c3                   	ret    

f0101f17 <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f0101f17:	55                   	push   %ebp
f0101f18:	89 e5                	mov    %esp,%ebp
f0101f1a:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f0101f1d:	e8 1f c0 00 00       	call   f010df41 <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f0101f22:	83 ec 0c             	sub    $0xc,%esp
f0101f25:	68 ec 4b 13 f0       	push   $0xf0134bec
f0101f2a:	e8 df ed ff ff       	call   f0100d0e <cprintf>
f0101f2f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f32:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f37:	c9                   	leave  
f0101f38:	c3                   	ret    

f0101f39 <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f0101f39:	55                   	push   %ebp
f0101f3a:	89 e5                	mov    %esp,%ebp
f0101f3c:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f0101f3f:	e8 0d c0 00 00       	call   f010df51 <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f0101f44:	83 ec 0c             	sub    $0xc,%esp
f0101f47:	68 14 4c 13 f0       	push   $0xf0134c14
f0101f4c:	e8 bd ed ff ff       	call   f0100d0e <cprintf>
f0101f51:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f54:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f59:	c9                   	leave  
f0101f5a:	c3                   	ret    

f0101f5b <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f0101f5b:	55                   	push   %ebp
f0101f5c:	89 e5                	mov    %esp,%ebp
f0101f5e:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f0101f61:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101f64:	83 c0 04             	add    $0x4,%eax
f0101f67:	8b 00                	mov    (%eax),%eax
f0101f69:	83 ec 04             	sub    $0x4,%esp
f0101f6c:	6a 0a                	push   $0xa
f0101f6e:	6a 00                	push   $0x0
f0101f70:	50                   	push   %eax
f0101f71:	e8 f2 f9 02 00       	call   f0131968 <strtol>
f0101f76:	83 c4 10             	add    $0x10,%esp
f0101f79:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f0101f7c:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0101f80:	83 ec 0c             	sub    $0xc,%esp
f0101f83:	50                   	push   %eax
f0101f84:	e8 67 28 00 00       	call   f01047f0 <sched_init_RR>
f0101f89:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f0101f8c:	a1 28 27 86 f0       	mov    0xf0862728,%eax
f0101f91:	8a 00                	mov    (%eax),%al
f0101f93:	0f b6 c0             	movzbl %al,%eax
f0101f96:	83 ec 08             	sub    $0x8,%esp
f0101f99:	50                   	push   %eax
f0101f9a:	68 48 4c 13 f0       	push   $0xf0134c48
f0101f9f:	e8 6a ed ff ff       	call   f0100d0e <cprintf>
f0101fa4:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101fa7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101fac:	c9                   	leave  
f0101fad:	c3                   	ret    

f0101fae <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f0101fae:	55                   	push   %ebp
f0101faf:	89 e5                	mov    %esp,%ebp
f0101fb1:	53                   	push   %ebx
f0101fb2:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0101fb5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101fb8:	83 c0 04             	add    $0x4,%eax
f0101fbb:	8b 00                	mov    (%eax),%eax
f0101fbd:	83 ec 04             	sub    $0x4,%esp
f0101fc0:	6a 0a                	push   $0xa
f0101fc2:	6a 00                	push   $0x0
f0101fc4:	50                   	push   %eax
f0101fc5:	e8 9e f9 02 00       	call   f0131968 <strtol>
f0101fca:	83 c4 10             	add    $0x10,%esp
f0101fcd:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0101fd0:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101fd7:	eb 2e                	jmp    f0102007 <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f0101fd9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101fdc:	8d 58 fe             	lea    -0x2(%eax),%ebx
f0101fdf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101fe2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0101fe9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101fec:	01 d0                	add    %edx,%eax
f0101fee:	8b 00                	mov    (%eax),%eax
f0101ff0:	83 ec 04             	sub    $0x4,%esp
f0101ff3:	6a 0a                	push   $0xa
f0101ff5:	6a 00                	push   $0x0
f0101ff7:	50                   	push   %eax
f0101ff8:	e8 6b f9 02 00       	call   f0131968 <strtol>
f0101ffd:	83 c4 10             	add    $0x10,%esp
f0102000:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0102004:	ff 45 f4             	incl   -0xc(%ebp)
f0102007:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010200a:	3b 45 08             	cmp    0x8(%ebp),%eax
f010200d:	7c ca                	jl     f0101fd9 <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f010200f:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f0102013:	83 ec 08             	sub    $0x8,%esp
f0102016:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f0102019:	52                   	push   %edx
f010201a:	50                   	push   %eax
f010201b:	e8 5b 28 00 00       	call   f010487b <sched_init_MLFQ>
f0102020:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f0102023:	83 ec 0c             	sub    $0xc,%esp
f0102026:	68 80 4c 13 f0       	push   $0xf0134c80
f010202b:	e8 de ec ff ff       	call   f0100d0e <cprintf>
f0102030:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0102033:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010203a:	eb 24                	jmp    f0102060 <command_sch_MLFQ+0xb2>
	{
		cprintf("%d   ", quantums[i]) ;
f010203c:	8b 15 28 27 86 f0    	mov    0xf0862728,%edx
f0102042:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102045:	01 d0                	add    %edx,%eax
f0102047:	8a 00                	mov    (%eax),%al
f0102049:	0f b6 c0             	movzbl %al,%eax
f010204c:	83 ec 08             	sub    $0x8,%esp
f010204f:	50                   	push   %eax
f0102050:	68 ad 4c 13 f0       	push   $0xf0134cad
f0102055:	e8 b4 ec ff ff       	call   f0100d0e <cprintf>
f010205a:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f010205d:	ff 45 f0             	incl   -0x10(%ebp)
f0102060:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0102065:	0f b6 c0             	movzbl %al,%eax
f0102068:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010206b:	7f cf                	jg     f010203c <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f010206d:	83 ec 0c             	sub    $0xc,%esp
f0102070:	68 35 46 13 f0       	push   $0xf0134635
f0102075:	e8 94 ec ff ff       	call   f0100d0e <cprintf>
f010207a:	83 c4 10             	add    $0x10,%esp
	return 0;
f010207d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102082:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0102085:	c9                   	leave  
f0102086:	c3                   	ret    

f0102087 <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f0102087:	55                   	push   %ebp
f0102088:	89 e5                	mov    %esp,%ebp
f010208a:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f010208d:	e8 8d 23 00 00       	call   f010441f <isSchedMethodMLFQ>
f0102092:	85 c0                	test   %eax,%eax
f0102094:	74 5c                	je     f01020f2 <command_print_sch_method+0x6b>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f0102096:	83 ec 0c             	sub    $0xc,%esp
f0102099:	68 b4 4c 13 f0       	push   $0xf0134cb4
f010209e:	e8 6b ec ff ff       	call   f0100d0e <cprintf>
f01020a3:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f01020a6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01020ad:	eb 24                	jmp    f01020d3 <command_print_sch_method+0x4c>
		{
			cprintf("%d   ", quantums[i]) ;
f01020af:	8b 15 28 27 86 f0    	mov    0xf0862728,%edx
f01020b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01020b8:	01 d0                	add    %edx,%eax
f01020ba:	8a 00                	mov    (%eax),%al
f01020bc:	0f b6 c0             	movzbl %al,%eax
f01020bf:	83 ec 08             	sub    $0x8,%esp
f01020c2:	50                   	push   %eax
f01020c3:	68 ad 4c 13 f0       	push   $0xf0134cad
f01020c8:	e8 41 ec ff ff       	call   f0100d0e <cprintf>
f01020cd:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f01020d0:	ff 45 f4             	incl   -0xc(%ebp)
f01020d3:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01020d8:	0f b6 c0             	movzbl %al,%eax
f01020db:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01020de:	7f cf                	jg     f01020af <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f01020e0:	83 ec 0c             	sub    $0xc,%esp
f01020e3:	68 35 46 13 f0       	push   $0xf0134635
f01020e8:	e8 21 ec ff ff       	call   f0100d0e <cprintf>
f01020ed:	83 c4 10             	add    $0x10,%esp
f01020f0:	eb 36                	jmp    f0102128 <command_print_sch_method+0xa1>
	}
	else if (isSchedMethodRR())
f01020f2:	e8 0e 23 00 00       	call   f0104405 <isSchedMethodRR>
f01020f7:	85 c0                	test   %eax,%eax
f01020f9:	74 1d                	je     f0102118 <command_print_sch_method+0x91>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f01020fb:	a1 28 27 86 f0       	mov    0xf0862728,%eax
f0102100:	8a 00                	mov    (%eax),%al
f0102102:	0f b6 c0             	movzbl %al,%eax
f0102105:	83 ec 08             	sub    $0x8,%esp
f0102108:	50                   	push   %eax
f0102109:	68 e8 4c 13 f0       	push   $0xf0134ce8
f010210e:	e8 fb eb ff ff       	call   f0100d0e <cprintf>
f0102113:	83 c4 10             	add    $0x10,%esp
f0102116:	eb 10                	jmp    f0102128 <command_print_sch_method+0xa1>
	}

	else
		cprintf("Current scheduler method is UNDEFINED\n");
f0102118:	83 ec 0c             	sub    $0xc,%esp
f010211b:	68 24 4d 13 f0       	push   $0xf0134d24
f0102120:	e8 e9 eb ff ff       	call   f0100d0e <cprintf>
f0102125:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102128:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010212d:	c9                   	leave  
f010212e:	c3                   	ret    

f010212f <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f010212f:	55                   	push   %ebp
f0102130:	89 e5                	mov    %esp,%ebp
f0102132:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f0102135:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102138:	83 c0 04             	add    $0x4,%eax
f010213b:	8b 00                	mov    (%eax),%eax
f010213d:	83 ec 04             	sub    $0x4,%esp
f0102140:	6a 0a                	push   $0xa
f0102142:	6a 00                	push   $0x0
f0102144:	50                   	push   %eax
f0102145:	e8 1e f8 02 00       	call   f0131968 <strtol>
f010214a:	83 c4 10             	add    $0x10,%esp
f010214d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f0102150:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102153:	0f b6 c0             	movzbl %al,%eax
f0102156:	83 ec 0c             	sub    $0xc,%esp
f0102159:	50                   	push   %eax
f010215a:	e8 2f e7 02 00       	call   f013088e <chksch>
f010215f:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f0102162:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102166:	75 12                	jne    f010217a <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f0102168:	83 ec 0c             	sub    $0xc,%esp
f010216b:	68 4c 4d 13 f0       	push   $0xf0134d4c
f0102170:	e8 99 eb ff ff       	call   f0100d0e <cprintf>
f0102175:	83 c4 10             	add    $0x10,%esp
f0102178:	eb 16                	jmp    f0102190 <command_sch_test+0x61>
	else if (status == 1)
f010217a:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010217e:	75 10                	jne    f0102190 <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f0102180:	83 ec 0c             	sub    $0xc,%esp
f0102183:	68 74 4d 13 f0       	push   $0xf0134d74
f0102188:	e8 81 eb ff ff       	call   f0100d0e <cprintf>
f010218d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102190:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102195:	c9                   	leave  
f0102196:	c3                   	ret    

f0102197 <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f0102197:	55                   	push   %ebp
f0102198:	89 e5                	mov    %esp,%ebp
f010219a:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f010219d:	e8 fd bd 00 00       	call   f010df9f <isPageReplacmentAlgorithmCLOCK>
f01021a2:	85 c0                	test   %eax,%eax
f01021a4:	74 15                	je     f01021bb <command_print_page_rep+0x24>
		cprintf("Page replacement algorithm is CLOCK\n");
f01021a6:	83 ec 0c             	sub    $0xc,%esp
f01021a9:	68 98 4d 13 f0       	push   $0xf0134d98
f01021ae:	e8 5b eb ff ff       	call   f0100d0e <cprintf>
f01021b3:	83 c4 10             	add    $0x10,%esp
f01021b6:	e9 8c 00 00 00       	jmp    f0102247 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f01021bb:	83 ec 0c             	sub    $0xc,%esp
f01021be:	6a 01                	push   $0x1
f01021c0:	e8 c4 bd 00 00       	call   f010df89 <isPageReplacmentAlgorithmLRU>
f01021c5:	83 c4 10             	add    $0x10,%esp
f01021c8:	85 c0                	test   %eax,%eax
f01021ca:	74 12                	je     f01021de <command_print_page_rep+0x47>
		cprintf("Page replacement algorithm is LRU with TimeStamp approximation\n");
f01021cc:	83 ec 0c             	sub    $0xc,%esp
f01021cf:	68 c0 4d 13 f0       	push   $0xf0134dc0
f01021d4:	e8 35 eb ff ff       	call   f0100d0e <cprintf>
f01021d9:	83 c4 10             	add    $0x10,%esp
f01021dc:	eb 69                	jmp    f0102247 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01021de:	83 ec 0c             	sub    $0xc,%esp
f01021e1:	6a 02                	push   $0x2
f01021e3:	e8 a1 bd 00 00       	call   f010df89 <isPageReplacmentAlgorithmLRU>
f01021e8:	83 c4 10             	add    $0x10,%esp
f01021eb:	85 c0                	test   %eax,%eax
f01021ed:	74 12                	je     f0102201 <command_print_page_rep+0x6a>
		cprintf("Page replacement algorithm is LRU with LISTS approximation\n");
f01021ef:	83 ec 0c             	sub    $0xc,%esp
f01021f2:	68 00 4e 13 f0       	push   $0xf0134e00
f01021f7:	e8 12 eb ff ff       	call   f0100d0e <cprintf>
f01021fc:	83 c4 10             	add    $0x10,%esp
f01021ff:	eb 46                	jmp    f0102247 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmFIFO())
f0102201:	e8 b4 bd 00 00       	call   f010dfba <isPageReplacmentAlgorithmFIFO>
f0102206:	85 c0                	test   %eax,%eax
f0102208:	74 12                	je     f010221c <command_print_page_rep+0x85>
		cprintf("Page replacement algorithm is FIFO\n");
f010220a:	83 ec 0c             	sub    $0xc,%esp
f010220d:	68 3c 4e 13 f0       	push   $0xf0134e3c
f0102212:	e8 f7 ea ff ff       	call   f0100d0e <cprintf>
f0102217:	83 c4 10             	add    $0x10,%esp
f010221a:	eb 2b                	jmp    f0102247 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f010221c:	e8 b4 bd 00 00       	call   f010dfd5 <isPageReplacmentAlgorithmModifiedCLOCK>
f0102221:	85 c0                	test   %eax,%eax
f0102223:	74 12                	je     f0102237 <command_print_page_rep+0xa0>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f0102225:	83 ec 0c             	sub    $0xc,%esp
f0102228:	68 60 4e 13 f0       	push   $0xf0134e60
f010222d:	e8 dc ea ff ff       	call   f0100d0e <cprintf>
f0102232:	83 c4 10             	add    $0x10,%esp
f0102235:	eb 10                	jmp    f0102247 <command_print_page_rep+0xb0>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f0102237:	83 ec 0c             	sub    $0xc,%esp
f010223a:	68 90 4e 13 f0       	push   $0xf0134e90
f010223f:	e8 ca ea ff ff       	call   f0100d0e <cprintf>
f0102244:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102247:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010224c:	c9                   	leave  
f010224d:	c3                   	ret    

f010224e <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f010224e:	55                   	push   %ebp
f010224f:	89 e5                	mov    %esp,%ebp
f0102251:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f0102254:	e8 18 ed ff ff       	call   f0100f71 <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f0102259:	83 ec 0c             	sub    $0xc,%esp
f010225c:	68 bc 4e 13 f0       	push   $0xf0134ebc
f0102261:	e8 a8 ea ff ff       	call   f0100d0e <cprintf>
f0102266:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102269:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010226e:	c9                   	leave  
f010226f:	c3                   	ret    

f0102270 <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0102270:	55                   	push   %ebp
f0102271:	89 e5                	mov    %esp,%ebp
f0102273:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f0102276:	e8 06 ed ff ff       	call   f0100f81 <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f010227b:	83 ec 0c             	sub    $0xc,%esp
f010227e:	68 ec 4e 13 f0       	push   $0xf0134eec
f0102283:	e8 86 ea ff ff       	call   f0100d0e <cprintf>
f0102288:	83 c4 10             	add    $0x10,%esp
	return 0;
f010228b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102290:	c9                   	leave  
f0102291:	c3                   	ret    

f0102292 <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f0102292:	55                   	push   %ebp
f0102293:	89 e5                	mov    %esp,%ebp
f0102295:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f0102298:	e8 f4 ec ff ff       	call   f0100f91 <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f010229d:	83 ec 0c             	sub    $0xc,%esp
f01022a0:	68 1c 4f 13 f0       	push   $0xf0134f1c
f01022a5:	e8 64 ea ff ff       	call   f0100d0e <cprintf>
f01022aa:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022ad:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022b2:	c9                   	leave  
f01022b3:	c3                   	ret    

f01022b4 <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f01022b4:	55                   	push   %ebp
f01022b5:	89 e5                	mov    %esp,%ebp
f01022b7:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f01022ba:	e8 e2 ec ff ff       	call   f0100fa1 <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f01022bf:	83 ec 0c             	sub    $0xc,%esp
f01022c2:	68 4c 4f 13 f0       	push   $0xf0134f4c
f01022c7:	e8 42 ea ff ff       	call   f0100d0e <cprintf>
f01022cc:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022cf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022d4:	c9                   	leave  
f01022d5:	c3                   	ret    

f01022d6 <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f01022d6:	55                   	push   %ebp
f01022d7:	89 e5                	mov    %esp,%ebp
f01022d9:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f01022dc:	e8 d0 ec ff ff       	call   f0100fb1 <isUHeapPlacementStrategyFIRSTFIT>
f01022e1:	84 c0                	test   %al,%al
f01022e3:	74 12                	je     f01022f7 <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f01022e5:	83 ec 0c             	sub    $0xc,%esp
f01022e8:	68 7c 4f 13 f0       	push   $0xf0134f7c
f01022ed:	e8 1c ea ff ff       	call   f0100d0e <cprintf>
f01022f2:	83 c4 10             	add    $0x10,%esp
f01022f5:	eb 61                	jmp    f0102358 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f01022f7:	e8 ca ec ff ff       	call   f0100fc6 <isUHeapPlacementStrategyBESTFIT>
f01022fc:	84 c0                	test   %al,%al
f01022fe:	74 12                	je     f0102312 <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f0102300:	83 ec 0c             	sub    $0xc,%esp
f0102303:	68 a8 4f 13 f0       	push   $0xf0134fa8
f0102308:	e8 01 ea ff ff       	call   f0100d0e <cprintf>
f010230d:	83 c4 10             	add    $0x10,%esp
f0102310:	eb 46                	jmp    f0102358 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f0102312:	e8 c4 ec ff ff       	call   f0100fdb <isUHeapPlacementStrategyNEXTFIT>
f0102317:	84 c0                	test   %al,%al
f0102319:	74 12                	je     f010232d <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f010231b:	83 ec 0c             	sub    $0xc,%esp
f010231e:	68 d4 4f 13 f0       	push   $0xf0134fd4
f0102323:	e8 e6 e9 ff ff       	call   f0100d0e <cprintf>
f0102328:	83 c4 10             	add    $0x10,%esp
f010232b:	eb 2b                	jmp    f0102358 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f010232d:	e8 be ec ff ff       	call   f0100ff0 <isUHeapPlacementStrategyWORSTFIT>
f0102332:	84 c0                	test   %al,%al
f0102334:	74 12                	je     f0102348 <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f0102336:	83 ec 0c             	sub    $0xc,%esp
f0102339:	68 00 50 13 f0       	push   $0xf0135000
f010233e:	e8 cb e9 ff ff       	call   f0100d0e <cprintf>
f0102343:	83 c4 10             	add    $0x10,%esp
f0102346:	eb 10                	jmp    f0102358 <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f0102348:	83 ec 0c             	sub    $0xc,%esp
f010234b:	68 2c 50 13 f0       	push   $0xf013502c
f0102350:	e8 b9 e9 ff ff       	call   f0100d0e <cprintf>
f0102355:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102358:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010235d:	c9                   	leave  
f010235e:	c3                   	ret    

f010235f <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f010235f:	55                   	push   %ebp
f0102360:	89 e5                	mov    %esp,%ebp
f0102362:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f0102365:	e8 4f eb ff ff       	call   f0100eb9 <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f010236a:	83 ec 0c             	sub    $0xc,%esp
f010236d:	68 58 50 13 f0       	push   $0xf0135058
f0102372:	e8 97 e9 ff ff       	call   f0100d0e <cprintf>
f0102377:	83 c4 10             	add    $0x10,%esp
	return 0;
f010237a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010237f:	c9                   	leave  
f0102380:	c3                   	ret    

f0102381 <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f0102381:	55                   	push   %ebp
f0102382:	89 e5                	mov    %esp,%ebp
f0102384:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f0102387:	e8 3d eb ff ff       	call   f0100ec9 <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f010238c:	83 ec 0c             	sub    $0xc,%esp
f010238f:	68 58 50 13 f0       	push   $0xf0135058
f0102394:	e8 75 e9 ff ff       	call   f0100d0e <cprintf>
f0102399:	83 c4 10             	add    $0x10,%esp
	return 0;
f010239c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023a1:	c9                   	leave  
f01023a2:	c3                   	ret    

f01023a3 <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f01023a3:	55                   	push   %ebp
f01023a4:	89 e5                	mov    %esp,%ebp
f01023a6:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f01023a9:	e8 2b eb ff ff       	call   f0100ed9 <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f01023ae:	83 ec 0c             	sub    $0xc,%esp
f01023b1:	68 8c 50 13 f0       	push   $0xf013508c
f01023b6:	e8 53 e9 ff ff       	call   f0100d0e <cprintf>
f01023bb:	83 c4 10             	add    $0x10,%esp
	return 0;
f01023be:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023c3:	c9                   	leave  
f01023c4:	c3                   	ret    

f01023c5 <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f01023c5:	55                   	push   %ebp
f01023c6:	89 e5                	mov    %esp,%ebp
f01023c8:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f01023cb:	e8 19 eb ff ff       	call   f0100ee9 <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f01023d0:	83 ec 0c             	sub    $0xc,%esp
f01023d3:	68 bc 50 13 f0       	push   $0xf01350bc
f01023d8:	e8 31 e9 ff ff       	call   f0100d0e <cprintf>
f01023dd:	83 c4 10             	add    $0x10,%esp
	return 0;
f01023e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023e5:	c9                   	leave  
f01023e6:	c3                   	ret    

f01023e7 <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f01023e7:	55                   	push   %ebp
f01023e8:	89 e5                	mov    %esp,%ebp
f01023ea:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f01023ed:	e8 07 eb ff ff       	call   f0100ef9 <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f01023f2:	83 ec 0c             	sub    $0xc,%esp
f01023f5:	68 ec 50 13 f0       	push   $0xf01350ec
f01023fa:	e8 0f e9 ff ff       	call   f0100d0e <cprintf>
f01023ff:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102402:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102407:	c9                   	leave  
f0102408:	c3                   	ret    

f0102409 <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f0102409:	55                   	push   %ebp
f010240a:	89 e5                	mov    %esp,%ebp
f010240c:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f010240f:	e8 f5 ea ff ff       	call   f0100f09 <isKHeapPlacementStrategyCONTALLOC>
f0102414:	84 c0                	test   %al,%al
f0102416:	74 12                	je     f010242a <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f0102418:	83 ec 0c             	sub    $0xc,%esp
f010241b:	68 20 51 13 f0       	push   $0xf0135120
f0102420:	e8 e9 e8 ff ff       	call   f0100d0e <cprintf>
f0102425:	83 c4 10             	add    $0x10,%esp
f0102428:	eb 7c                	jmp    f01024a6 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f010242a:	e8 ee ea ff ff       	call   f0100f1d <isKHeapPlacementStrategyFIRSTFIT>
f010242f:	84 c0                	test   %al,%al
f0102431:	74 12                	je     f0102445 <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f0102433:	83 ec 0c             	sub    $0xc,%esp
f0102436:	68 5c 51 13 f0       	push   $0xf013515c
f010243b:	e8 ce e8 ff ff       	call   f0100d0e <cprintf>
f0102440:	83 c4 10             	add    $0x10,%esp
f0102443:	eb 61                	jmp    f01024a6 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f0102445:	e8 e8 ea ff ff       	call   f0100f32 <isKHeapPlacementStrategyBESTFIT>
f010244a:	84 c0                	test   %al,%al
f010244c:	74 12                	je     f0102460 <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f010244e:	83 ec 0c             	sub    $0xc,%esp
f0102451:	68 8c 51 13 f0       	push   $0xf013518c
f0102456:	e8 b3 e8 ff ff       	call   f0100d0e <cprintf>
f010245b:	83 c4 10             	add    $0x10,%esp
f010245e:	eb 46                	jmp    f01024a6 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f0102460:	e8 e2 ea ff ff       	call   f0100f47 <isKHeapPlacementStrategyNEXTFIT>
f0102465:	84 c0                	test   %al,%al
f0102467:	74 12                	je     f010247b <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f0102469:	83 ec 0c             	sub    $0xc,%esp
f010246c:	68 b8 51 13 f0       	push   $0xf01351b8
f0102471:	e8 98 e8 ff ff       	call   f0100d0e <cprintf>
f0102476:	83 c4 10             	add    $0x10,%esp
f0102479:	eb 2b                	jmp    f01024a6 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f010247b:	e8 dc ea ff ff       	call   f0100f5c <isKHeapPlacementStrategyWORSTFIT>
f0102480:	84 c0                	test   %al,%al
f0102482:	74 12                	je     f0102496 <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f0102484:	83 ec 0c             	sub    $0xc,%esp
f0102487:	68 e4 51 13 f0       	push   $0xf01351e4
f010248c:	e8 7d e8 ff ff       	call   f0100d0e <cprintf>
f0102491:	83 c4 10             	add    $0x10,%esp
f0102494:	eb 10                	jmp    f01024a6 <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f0102496:	83 ec 0c             	sub    $0xc,%esp
f0102499:	68 14 52 13 f0       	push   $0xf0135214
f010249e:	e8 6b e8 ff ff       	call   f0100d0e <cprintf>
f01024a3:	83 c4 10             	add    $0x10,%esp

	return 0;
f01024a6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01024ab:	c9                   	leave  
f01024ac:	c3                   	ret    

f01024ad <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f01024ad:	55                   	push   %ebp
f01024ae:	89 e5                	mov    %esp,%ebp
f01024b0:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01024b3:	e8 94 bb 00 00       	call   f010e04c <isBufferingEnabled>
f01024b8:	84 c0                	test   %al,%al
f01024ba:	75 12                	jne    f01024ce <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f01024bc:	83 ec 0c             	sub    $0xc,%esp
f01024bf:	68 44 52 13 f0       	push   $0xf0135244
f01024c4:	e8 45 e8 ff ff       	call   f0100d0e <cprintf>
f01024c9:	83 c4 10             	add    $0x10,%esp
f01024cc:	eb 1d                	jmp    f01024eb <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f01024ce:	83 ec 0c             	sub    $0xc,%esp
f01024d1:	6a 00                	push   $0x0
f01024d3:	e8 4e bb 00 00       	call   f010e026 <enableModifiedBuffer>
f01024d8:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f01024db:	83 ec 0c             	sub    $0xc,%esp
f01024de:	68 80 52 13 f0       	push   $0xf0135280
f01024e3:	e8 26 e8 ff ff       	call   f0100d0e <cprintf>
f01024e8:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01024eb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01024f0:	c9                   	leave  
f01024f1:	c3                   	ret    

f01024f2 <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f01024f2:	55                   	push   %ebp
f01024f3:	89 e5                	mov    %esp,%ebp
f01024f5:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01024f8:	e8 4f bb 00 00       	call   f010e04c <isBufferingEnabled>
f01024fd:	84 c0                	test   %al,%al
f01024ff:	75 12                	jne    f0102513 <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f0102501:	83 ec 0c             	sub    $0xc,%esp
f0102504:	68 44 52 13 f0       	push   $0xf0135244
f0102509:	e8 00 e8 ff ff       	call   f0100d0e <cprintf>
f010250e:	83 c4 10             	add    $0x10,%esp
f0102511:	eb 1d                	jmp    f0102530 <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f0102513:	83 ec 0c             	sub    $0xc,%esp
f0102516:	6a 01                	push   $0x1
f0102518:	e8 09 bb 00 00       	call   f010e026 <enableModifiedBuffer>
f010251d:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f0102520:	83 ec 0c             	sub    $0xc,%esp
f0102523:	68 a4 52 13 f0       	push   $0xf01352a4
f0102528:	e8 e1 e7 ff ff       	call   f0100d0e <cprintf>
f010252d:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102530:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102535:	c9                   	leave  
f0102536:	c3                   	ret    

f0102537 <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f0102537:	55                   	push   %ebp
f0102538:	89 e5                	mov    %esp,%ebp
f010253a:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f010253d:	83 ec 0c             	sub    $0xc,%esp
f0102540:	6a 00                	push   $0x0
f0102542:	e8 f7 ba 00 00       	call   f010e03e <enableBuffering>
f0102547:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f010254a:	83 ec 0c             	sub    $0xc,%esp
f010254d:	6a 00                	push   $0x0
f010254f:	e8 d2 ba 00 00       	call   f010e026 <enableModifiedBuffer>
f0102554:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f0102557:	83 ec 0c             	sub    $0xc,%esp
f010255a:	68 c4 52 13 f0       	push   $0xf01352c4
f010255f:	e8 aa e7 ff ff       	call   f0100d0e <cprintf>
f0102564:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102567:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010256c:	c9                   	leave  
f010256d:	c3                   	ret    

f010256e <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f010256e:	55                   	push   %ebp
f010256f:	89 e5                	mov    %esp,%ebp
f0102571:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f0102574:	83 ec 0c             	sub    $0xc,%esp
f0102577:	6a 01                	push   $0x1
f0102579:	e8 c0 ba 00 00       	call   f010e03e <enableBuffering>
f010257e:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f0102581:	83 ec 0c             	sub    $0xc,%esp
f0102584:	6a 01                	push   $0x1
f0102586:	e8 9b ba 00 00       	call   f010e026 <enableModifiedBuffer>
f010258b:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f010258e:	e8 d1 ba 00 00       	call   f010e064 <getModifiedBufferLength>
f0102593:	85 c0                	test   %eax,%eax
f0102595:	75 59                	jne    f01025f0 <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f0102597:	83 ec 0c             	sub    $0xc,%esp
f010259a:	68 e0 52 13 f0       	push   $0xf01352e0
f010259f:	e8 6a e7 ff ff       	call   f0100d0e <cprintf>
f01025a4:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f01025a7:	83 ec 08             	sub    $0x8,%esp
f01025aa:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01025ad:	50                   	push   %eax
f01025ae:	68 10 53 13 f0       	push   $0xf0135310
f01025b3:	e8 4a ee 02 00       	call   f0131402 <readline>
f01025b8:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f01025bb:	83 ec 04             	sub    $0x4,%esp
f01025be:	6a 0a                	push   $0xa
f01025c0:	6a 00                	push   $0x0
f01025c2:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01025c5:	50                   	push   %eax
f01025c6:	e8 9d f3 02 00       	call   f0131968 <strtol>
f01025cb:	83 c4 10             	add    $0x10,%esp
f01025ce:	83 ec 0c             	sub    $0xc,%esp
f01025d1:	50                   	push   %eax
f01025d2:	e8 7f ba 00 00       	call   f010e056 <setModifiedBufferLength>
f01025d7:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f01025da:	e8 85 ba 00 00       	call   f010e064 <getModifiedBufferLength>
f01025df:	83 ec 08             	sub    $0x8,%esp
f01025e2:	50                   	push   %eax
f01025e3:	68 3c 53 13 f0       	push   $0xf013533c
f01025e8:	e8 21 e7 ff ff       	call   f0100d0e <cprintf>
f01025ed:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f01025f0:	83 ec 0c             	sub    $0xc,%esp
f01025f3:	68 61 53 13 f0       	push   $0xf0135361
f01025f8:	e8 11 e7 ff ff       	call   f0100d0e <cprintf>
f01025fd:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102600:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102605:	c9                   	leave  
f0102606:	c3                   	ret    

f0102607 <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0102607:	55                   	push   %ebp
f0102608:	89 e5                	mov    %esp,%ebp
f010260a:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010260d:	e8 3a ba 00 00       	call   f010e04c <isBufferingEnabled>
f0102612:	84 c0                	test   %al,%al
f0102614:	75 12                	jne    f0102628 <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f0102616:	83 ec 0c             	sub    $0xc,%esp
f0102619:	68 7c 53 13 f0       	push   $0xf013537c
f010261e:	e8 eb e6 ff ff       	call   f0100d0e <cprintf>
f0102623:	83 c4 10             	add    $0x10,%esp
f0102626:	eb 19                	jmp    f0102641 <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f0102628:	e8 07 ba 00 00       	call   f010e034 <isModifiedBufferEnabled>
f010262d:	84 c0                	test   %al,%al
f010262f:	75 10                	jne    f0102641 <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f0102631:	83 ec 0c             	sub    $0xc,%esp
f0102634:	68 cc 53 13 f0       	push   $0xf01353cc
f0102639:	e8 d0 e6 ff ff       	call   f0100d0e <cprintf>
f010263e:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f0102641:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102644:	83 c0 04             	add    $0x4,%eax
f0102647:	8b 00                	mov    (%eax),%eax
f0102649:	83 ec 04             	sub    $0x4,%esp
f010264c:	6a 0a                	push   $0xa
f010264e:	6a 00                	push   $0x0
f0102650:	50                   	push   %eax
f0102651:	e8 12 f3 02 00       	call   f0131968 <strtol>
f0102656:	83 c4 10             	add    $0x10,%esp
f0102659:	83 ec 0c             	sub    $0xc,%esp
f010265c:	50                   	push   %eax
f010265d:	e8 f4 b9 00 00       	call   f010e056 <setModifiedBufferLength>
f0102662:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f0102665:	e8 fa b9 00 00       	call   f010e064 <getModifiedBufferLength>
f010266a:	83 ec 08             	sub    $0x8,%esp
f010266d:	50                   	push   %eax
f010266e:	68 3c 53 13 f0       	push   $0xf013533c
f0102673:	e8 96 e6 ff ff       	call   f0100d0e <cprintf>
f0102678:	83 c4 10             	add    $0x10,%esp
	return 0;
f010267b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102680:	c9                   	leave  
f0102681:	c3                   	ret    

f0102682 <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0102682:	55                   	push   %ebp
f0102683:	89 e5                	mov    %esp,%ebp
f0102685:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102688:	e8 bf b9 00 00       	call   f010e04c <isBufferingEnabled>
f010268d:	84 c0                	test   %al,%al
f010268f:	75 12                	jne    f01026a3 <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f0102691:	83 ec 0c             	sub    $0xc,%esp
f0102694:	68 7c 53 13 f0       	push   $0xf013537c
f0102699:	e8 70 e6 ff ff       	call   f0100d0e <cprintf>
f010269e:	83 c4 10             	add    $0x10,%esp
f01026a1:	eb 19                	jmp    f01026bc <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f01026a3:	e8 8c b9 00 00       	call   f010e034 <isModifiedBufferEnabled>
f01026a8:	84 c0                	test   %al,%al
f01026aa:	75 10                	jne    f01026bc <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f01026ac:	83 ec 0c             	sub    $0xc,%esp
f01026af:	68 cc 53 13 f0       	push   $0xf01353cc
f01026b4:	e8 55 e6 ff ff       	call   f0100d0e <cprintf>
f01026b9:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f01026bc:	e8 a3 b9 00 00       	call   f010e064 <getModifiedBufferLength>
f01026c1:	83 ec 08             	sub    $0x8,%esp
f01026c4:	50                   	push   %eax
f01026c5:	68 12 54 13 f0       	push   $0xf0135412
f01026ca:	e8 3f e6 ff ff       	call   f0100d0e <cprintf>
f01026cf:	83 c4 10             	add    $0x10,%esp
	return 0;
f01026d2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01026d7:	c9                   	leave  
f01026d8:	c3                   	ret    

f01026d9 <command_test_kmalloc>:

/*TESTING Commands*/
int command_test_kmalloc(int number_of_arguments, char **arguments)
{
f01026d9:	55                   	push   %ebp
f01026da:	89 e5                	mov    %esp,%ebp
f01026dc:	83 ec 18             	sub    $0x18,%esp
	int testNum = 0 ;
f01026df:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (number_of_arguments==2)
f01026e6:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f01026ea:	75 1b                	jne    f0102707 <command_test_kmalloc+0x2e>
		testNum = strtol(arguments[1], NULL, 10);
f01026ec:	8b 45 0c             	mov    0xc(%ebp),%eax
f01026ef:	83 c0 04             	add    $0x4,%eax
f01026f2:	8b 00                	mov    (%eax),%eax
f01026f4:	83 ec 04             	sub    $0x4,%esp
f01026f7:	6a 0a                	push   $0xa
f01026f9:	6a 00                	push   $0x0
f01026fb:	50                   	push   %eax
f01026fc:	e8 67 f2 02 00       	call   f0131968 <strtol>
f0102701:	83 c4 10             	add    $0x10,%esp
f0102704:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (isKHeapPlacementStrategyCONTALLOC())
f0102707:	e8 fd e7 ff ff       	call   f0100f09 <isKHeapPlacementStrategyCONTALLOC>
f010270c:	84 c0                	test   %al,%al
f010270e:	74 0a                	je     f010271a <command_test_kmalloc+0x41>
		test_kmalloc();
f0102710:	e8 e2 53 01 00       	call   f0117af7 <test_kmalloc>
f0102715:	e9 e8 00 00 00       	jmp    f0102802 <command_test_kmalloc+0x129>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f010271a:	e8 fe e7 ff ff       	call   f0100f1d <isKHeapPlacementStrategyFIRSTFIT>
f010271f:	84 c0                	test   %al,%al
f0102721:	74 44                	je     f0102767 <command_test_kmalloc+0x8e>
	{
		if (testNum == 0)
f0102723:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102727:	75 1a                	jne    f0102743 <command_test_kmalloc+0x6a>
		{
			cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f0102729:	83 ec 0c             	sub    $0xc,%esp
f010272c:	68 30 54 13 f0       	push   $0xf0135430
f0102731:	e8 d8 e5 ff ff       	call   f0100d0e <cprintf>
f0102736:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102739:	b8 00 00 00 00       	mov    $0x0,%eax
f010273e:	e9 c4 00 00 00       	jmp    f0102807 <command_test_kmalloc+0x12e>
		}
		//Test FIRST FIT allocation
		if (testNum == 1)
f0102743:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102747:	75 0a                	jne    f0102753 <command_test_kmalloc+0x7a>
			test_kmalloc_firstfit1();
f0102749:	e8 32 a2 01 00       	call   f011c980 <test_kmalloc_firstfit1>
f010274e:	e9 af 00 00 00       	jmp    f0102802 <command_test_kmalloc+0x129>
		else if (testNum == 2)
f0102753:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102757:	0f 85 a5 00 00 00    	jne    f0102802 <command_test_kmalloc+0x129>
			test_kmalloc_firstfit2();
f010275d:	e8 c0 b5 01 00       	call   f011dd22 <test_kmalloc_firstfit2>
f0102762:	e9 9b 00 00 00       	jmp    f0102802 <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyBESTFIT())
f0102767:	e8 c6 e7 ff ff       	call   f0100f32 <isKHeapPlacementStrategyBESTFIT>
f010276c:	84 c0                	test   %al,%al
f010276e:	74 44                	je     f01027b4 <command_test_kmalloc+0xdb>
	{
		if (testNum == 0)
f0102770:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102774:	75 17                	jne    f010278d <command_test_kmalloc+0xb4>
		{
			cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f0102776:	83 ec 0c             	sub    $0xc,%esp
f0102779:	68 80 54 13 f0       	push   $0xf0135480
f010277e:	e8 8b e5 ff ff       	call   f0100d0e <cprintf>
f0102783:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102786:	b8 00 00 00 00       	mov    $0x0,%eax
f010278b:	eb 7a                	jmp    f0102807 <command_test_kmalloc+0x12e>
		}
		if (testNum == 1)
f010278d:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102791:	75 07                	jne    f010279a <command_test_kmalloc+0xc1>
			test_kmalloc();
f0102793:	e8 5f 53 01 00       	call   f0117af7 <test_kmalloc>
f0102798:	eb 68                	jmp    f0102802 <command_test_kmalloc+0x129>
		else if (testNum == 2)
f010279a:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010279e:	75 07                	jne    f01027a7 <command_test_kmalloc+0xce>
			test_kmalloc_bestfit1();
f01027a0:	e8 a5 7c 01 00       	call   f011a44a <test_kmalloc_bestfit1>
f01027a5:	eb 5b                	jmp    f0102802 <command_test_kmalloc+0x129>
		else if (testNum == 3)
f01027a7:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f01027ab:	75 55                	jne    f0102802 <command_test_kmalloc+0x129>
			test_kmalloc_bestfit2();
f01027ad:	e8 ee 8e 01 00       	call   f011b6a0 <test_kmalloc_bestfit2>
f01027b2:	eb 4e                	jmp    f0102802 <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyNEXTFIT())
f01027b4:	e8 8e e7 ff ff       	call   f0100f47 <isKHeapPlacementStrategyNEXTFIT>
f01027b9:	84 c0                	test   %al,%al
f01027bb:	74 37                	je     f01027f4 <command_test_kmalloc+0x11b>
	{
		if (testNum == 0)
f01027bd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01027c1:	75 17                	jne    f01027da <command_test_kmalloc+0x101>
		{
			cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f01027c3:	83 ec 0c             	sub    $0xc,%esp
f01027c6:	68 d0 54 13 f0       	push   $0xf01354d0
f01027cb:	e8 3e e5 ff ff       	call   f0100d0e <cprintf>
f01027d0:	83 c4 10             	add    $0x10,%esp
			return 0;
f01027d3:	b8 00 00 00 00       	mov    $0x0,%eax
f01027d8:	eb 2d                	jmp    f0102807 <command_test_kmalloc+0x12e>
		}
		//Test cont. allocation
		if (testNum == 1)
f01027da:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01027de:	75 07                	jne    f01027e7 <command_test_kmalloc+0x10e>
			test_kmalloc();
f01027e0:	e8 12 53 01 00       	call   f0117af7 <test_kmalloc>
f01027e5:	eb 1b                	jmp    f0102802 <command_test_kmalloc+0x129>
		//Test nextfit strategy
		else if (testNum == 2)
f01027e7:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f01027eb:	75 15                	jne    f0102802 <command_test_kmalloc+0x129>
			test_kmalloc_nextfit();
f01027ed:	e8 63 65 01 00       	call   f0118d55 <test_kmalloc_nextfit>
f01027f2:	eb 0e                	jmp    f0102802 <command_test_kmalloc+0x129>

	}
	else if (isKHeapPlacementStrategyWORSTFIT())
f01027f4:	e8 63 e7 ff ff       	call   f0100f5c <isKHeapPlacementStrategyWORSTFIT>
f01027f9:	84 c0                	test   %al,%al
f01027fb:	74 05                	je     f0102802 <command_test_kmalloc+0x129>
		test_kmalloc_worstfit();
f01027fd:	e8 b5 c3 01 00       	call   f011ebb7 <test_kmalloc_worstfit>
	return 0;
f0102802:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102807:	c9                   	leave  
f0102808:	c3                   	ret    

f0102809 <command_test_kfree>:
int command_test_kfree(int number_of_arguments, char **arguments)
{
f0102809:	55                   	push   %ebp
f010280a:	89 e5                	mov    %esp,%ebp
f010280c:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f010280f:	e8 1e e7 ff ff       	call   f0100f32 <isKHeapPlacementStrategyBESTFIT>
f0102814:	84 c0                	test   %al,%al
f0102816:	75 09                	jne    f0102821 <command_test_kfree+0x18>
f0102818:	e8 00 e7 ff ff       	call   f0100f1d <isKHeapPlacementStrategyFIRSTFIT>
f010281d:	84 c0                	test   %al,%al
f010281f:	74 07                	je     f0102828 <command_test_kfree+0x1f>
	{
		test_kfree_bestfirstfit();
f0102821:	e8 33 fb 01 00       	call   f0122359 <test_kfree_bestfirstfit>
f0102826:	eb 05                	jmp    f010282d <command_test_kfree+0x24>
	}
	else //NEXT & CONT
	{
		test_kfree();
f0102828:	e8 da d9 01 00       	call   f0120207 <test_kfree>
	}
	return 0;
f010282d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102832:	c9                   	leave  
f0102833:	c3                   	ret    

f0102834 <command_test_kheap_phys_addr>:
int command_test_kheap_phys_addr(int number_of_arguments, char **arguments)
{
f0102834:	55                   	push   %ebp
f0102835:	89 e5                	mov    %esp,%ebp
f0102837:	83 ec 08             	sub    $0x8,%esp
	test_kheap_phys_addr();
f010283a:	e8 16 15 02 00       	call   f0123d55 <test_kheap_phys_addr>
	return 0;
f010283f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102844:	c9                   	leave  
f0102845:	c3                   	ret    

f0102846 <command_test_kheap_virt_addr>:
int command_test_kheap_virt_addr(int number_of_arguments, char **arguments)
{
f0102846:	55                   	push   %ebp
f0102847:	89 e5                	mov    %esp,%ebp
f0102849:	83 ec 08             	sub    $0x8,%esp
	test_kheap_virt_addr();
f010284c:	e8 d4 29 02 00       	call   f0125225 <test_kheap_virt_addr>
	return 0;
f0102851:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102856:	c9                   	leave  
f0102857:	c3                   	ret    

f0102858 <command_test_three_creation_functions>:
int command_test_three_creation_functions(int number_of_arguments, char **arguments)
{
f0102858:	55                   	push   %ebp
f0102859:	89 e5                	mov    %esp,%ebp
f010285b:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f010285e:	e8 9f 3e 02 00       	call   f0126702 <test_three_creation_functions>
	return 0;
f0102863:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102868:	c9                   	leave  
f0102869:	c3                   	ret    

f010286a <command_test_krealloc>:

int command_test_krealloc(int number_of_arguments, char **arguments) {
f010286a:	55                   	push   %ebp
f010286b:	89 e5                	mov    %esp,%ebp
f010286d:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyNEXTFIT())
f0102870:	e8 d2 e6 ff ff       	call   f0100f47 <isKHeapPlacementStrategyNEXTFIT>
f0102875:	84 c0                	test   %al,%al
f0102877:	74 07                	je     f0102880 <command_test_krealloc+0x16>
		test_krealloc();
f0102879:	e8 9b 98 02 00       	call   f012c119 <test_krealloc>
f010287e:	eb 0e                	jmp    f010288e <command_test_krealloc+0x24>
	else if (isKHeapPlacementStrategyBESTFIT())
f0102880:	e8 ad e6 ff ff       	call   f0100f32 <isKHeapPlacementStrategyBESTFIT>
f0102885:	84 c0                	test   %al,%al
f0102887:	74 05                	je     f010288e <command_test_krealloc+0x24>
		test_krealloc_BF();
f0102889:	e8 3b b8 02 00       	call   f012e0c9 <test_krealloc_BF>
	return 0;
f010288e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102893:	c9                   	leave  
f0102894:	c3                   	ret    

f0102895 <command_test_priority1>:

int command_test_priority1(int number_of_arguments, char **arguments)
{
f0102895:	55                   	push   %ebp
f0102896:	89 e5                	mov    %esp,%ebp
f0102898:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_higher();
f010289b:	e8 6c 3e 01 00       	call   f011670c <test_priority_normal_and_higher>
	return 0;
f01028a0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028a5:	c9                   	leave  
f01028a6:	c3                   	ret    

f01028a7 <command_test_priority2>:

int command_test_priority2(int number_of_arguments, char **arguments)
{
f01028a7:	55                   	push   %ebp
f01028a8:	89 e5                	mov    %esp,%ebp
f01028aa:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_lower();
f01028ad:	e8 40 48 01 00       	call   f01170f2 <test_priority_normal_and_lower>
	return 0;
f01028b2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028b7:	c9                   	leave  
f01028b8:	c3                   	ret    

f01028b9 <command_test_kfreeall>:

int command_test_kfreeall(int number_of_arguments, char **arguments)
{
f01028b9:	55                   	push   %ebp
f01028ba:	89 e5                	mov    %esp,%ebp
f01028bc:	83 ec 08             	sub    $0x8,%esp
	test_kfreeall();
f01028bf:	e8 78 40 02 00       	call   f012693c <test_kfreeall>
	return 0;
f01028c4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028c9:	c9                   	leave  
f01028ca:	c3                   	ret    

f01028cb <command_test_kexpand>:

int command_test_kexpand(int number_of_arguments, char **arguments)
{
f01028cb:	55                   	push   %ebp
f01028cc:	89 e5                	mov    %esp,%ebp
f01028ce:	83 ec 08             	sub    $0x8,%esp
	test_kexpand();
f01028d1:	e8 52 57 02 00       	call   f0128028 <test_kexpand>
	return 0;
f01028d6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028db:	c9                   	leave  
f01028dc:	c3                   	ret    

f01028dd <command_test_kshrink>:

int command_test_kshrink(int number_of_arguments, char **arguments)
{
f01028dd:	55                   	push   %ebp
f01028de:	89 e5                	mov    %esp,%ebp
f01028e0:	83 ec 08             	sub    $0x8,%esp
	test_kshrink();
f01028e3:	e8 c1 64 02 00       	call   f0128da9 <test_kshrink>
	return 0;
f01028e8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028ed:	c9                   	leave  
f01028ee:	c3                   	ret    

f01028ef <command_test_kfreelast>:

int command_test_kfreelast(int number_of_arguments, char **arguments)
{
f01028ef:	55                   	push   %ebp
f01028f0:	89 e5                	mov    %esp,%ebp
f01028f2:	83 ec 08             	sub    $0x8,%esp
	test_kfreelast();
f01028f5:	e8 9c 73 02 00       	call   f0129c96 <test_kfreelast>
	return 0;
f01028fa:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028ff:	c9                   	leave  
f0102900:	c3                   	ret    

f0102901 <command_test_sc_MLFQ>:

int command_test_sc_MLFQ(int number_of_arguments, char **arguments)
{
f0102901:	55                   	push   %ebp
f0102902:	89 e5                	mov    %esp,%ebp
f0102904:	83 ec 18             	sub    $0x18,%esp
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
f0102907:	8b 45 0c             	mov    0xc(%ebp),%eax
f010290a:	83 c0 04             	add    $0x4,%eax
f010290d:	8b 00                	mov    (%eax),%eax
f010290f:	83 ec 04             	sub    $0x4,%esp
f0102912:	6a 0a                	push   $0xa
f0102914:	6a 00                	push   $0x0
f0102916:	50                   	push   %eax
f0102917:	e8 4c f0 02 00       	call   f0131968 <strtol>
f010291c:	83 c4 10             	add    $0x10,%esp
f010291f:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int cnt = 0 ;
f0102922:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int firstTime = 1;
f0102929:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f0102930:	a1 f0 26 86 f0       	mov    0xf08626f0,%eax
f0102935:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0102938:	eb 3d                	jmp    f0102977 <command_test_sc_MLFQ+0x76>
	{
		if (strcmp(e->prog_name, "tmlfq_2") == 0)
f010293a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010293d:	05 5c 05 00 00       	add    $0x55c,%eax
f0102942:	83 ec 08             	sub    $0x8,%esp
f0102945:	68 1e 55 13 f0       	push   $0xf013551e
f010294a:	50                   	push   %eax
f010294b:	e8 c4 ed 02 00       	call   f0131714 <strcmp>
f0102950:	83 c4 10             	add    $0x10,%esp
f0102953:	85 c0                	test   %eax,%eax
f0102955:	75 12                	jne    f0102969 <command_test_sc_MLFQ+0x68>
		{
			if (firstTime)
f0102957:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010295b:	74 07                	je     f0102964 <command_test_sc_MLFQ+0x63>
				firstTime = 0;
f010295d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cnt++ ;
f0102964:	ff 45 f4             	incl   -0xc(%ebp)
f0102967:	eb 06                	jmp    f010296f <command_test_sc_MLFQ+0x6e>
		}
		else if (!firstTime)
f0102969:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010296d:	74 31                	je     f01029a0 <command_test_sc_MLFQ+0x9f>
{
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
	int cnt = 0 ;
	int firstTime = 1;
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f010296f:	a1 f8 26 86 f0       	mov    0xf08626f8,%eax
f0102974:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0102977:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010297b:	74 08                	je     f0102985 <command_test_sc_MLFQ+0x84>
f010297d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102980:	8b 40 44             	mov    0x44(%eax),%eax
f0102983:	eb 05                	jmp    f010298a <command_test_sc_MLFQ+0x89>
f0102985:	b8 00 00 00 00       	mov    $0x0,%eax
f010298a:	a3 f8 26 86 f0       	mov    %eax,0xf08626f8
f010298f:	a1 f8 26 86 f0       	mov    0xf08626f8,%eax
f0102994:	85 c0                	test   %eax,%eax
f0102996:	75 a2                	jne    f010293a <command_test_sc_MLFQ+0x39>
f0102998:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010299c:	75 9c                	jne    f010293a <command_test_sc_MLFQ+0x39>
f010299e:	eb 01                	jmp    f01029a1 <command_test_sc_MLFQ+0xa0>
			if (firstTime)
				firstTime = 0;
			cnt++ ;
		}
		else if (!firstTime)
			break;
f01029a0:	90                   	nop
	}
	if(cnt == numOfSlave2)
f01029a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01029a4:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01029a7:	75 12                	jne    f01029bb <command_test_sc_MLFQ+0xba>
	{
		cprintf("Congratulations... MLFQScenario# completed successfully\n");
f01029a9:	83 ec 0c             	sub    $0xc,%esp
f01029ac:	68 28 55 13 f0       	push   $0xf0135528
f01029b1:	e8 58 e3 ff ff       	call   f0100d0e <cprintf>
f01029b6:	83 c4 10             	add    $0x10,%esp
f01029b9:	eb 17                	jmp    f01029d2 <command_test_sc_MLFQ+0xd1>
	}
	else
	{
		panic("MLFQScenario# failed\n");
f01029bb:	83 ec 04             	sub    $0x4,%esp
f01029be:	68 61 55 13 f0       	push   $0xf0135561
f01029c3:	68 8b 04 00 00       	push   $0x48b
f01029c8:	68 ad 45 13 f0       	push   $0xf01345ad
f01029cd:	e8 33 d8 ff ff       	call   f0100205 <_panic>
	}
	return 0;
f01029d2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01029d7:	c9                   	leave  
f01029d8:	c3                   	ret    

f01029d9 <command_test_autocomplete>:


/*2022*/
int command_test_autocomplete(int number_of_arguments, char **arguments)
{
f01029d9:	55                   	push   %ebp
f01029da:	89 e5                	mov    %esp,%ebp
f01029dc:	83 ec 18             	sub    $0x18,%esp
	int x = TestAutoCompleteCommand();
f01029df:	e8 24 ea 00 00       	call   f0111408 <TestAutoCompleteCommand>
f01029e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return 0;
f01029e7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01029ec:	c9                   	leave  
f01029ed:	c3                   	ret    

f01029ee <command_test_lists>:
int command_test_lists(int number_of_arguments, char **arguments)
{
f01029ee:	55                   	push   %ebp
f01029ef:	89 e5                	mov    %esp,%ebp
f01029f1:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f01029f4:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f01029f8:	74 1a                	je     f0102a14 <command_test_lists+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstlsts <testname>\n") ;
f01029fa:	83 ec 0c             	sub    $0xc,%esp
f01029fd:	68 78 55 13 f0       	push   $0xf0135578
f0102a02:	e8 07 e3 ff ff       	call   f0100d0e <cprintf>
f0102a07:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102a0a:	b8 00 00 00 00       	mov    $0x0,%eax
f0102a0f:	e9 82 01 00 00       	jmp    f0102b96 <command_test_lists+0x1a8>
	}
	// Test 1 Example for initialize_MemBlocksList: tstlsts init 5
	if(strcmp(arguments[1], "init") == 0)
f0102a14:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a17:	83 c0 04             	add    $0x4,%eax
f0102a1a:	8b 00                	mov    (%eax),%eax
f0102a1c:	83 ec 08             	sub    $0x8,%esp
f0102a1f:	68 b0 55 13 f0       	push   $0xf01355b0
f0102a24:	50                   	push   %eax
f0102a25:	e8 ea ec 02 00       	call   f0131714 <strcmp>
f0102a2a:	83 c4 10             	add    $0x10,%esp
f0102a2d:	85 c0                	test   %eax,%eax
f0102a2f:	75 0a                	jne    f0102a3b <command_test_lists+0x4d>
	{
		test_initialize_MemBlocksList();
f0102a31:	e8 7c bf 00 00       	call   f010e9b2 <test_initialize_MemBlocksList>
f0102a36:	e9 56 01 00 00       	jmp    f0102b91 <command_test_lists+0x1a3>
	}
	// Test 2 Example for insert_sorted: tstlsts insrt
	else if(strcmp(arguments[1], "insrt") == 0)
f0102a3b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a3e:	83 c0 04             	add    $0x4,%eax
f0102a41:	8b 00                	mov    (%eax),%eax
f0102a43:	83 ec 08             	sub    $0x8,%esp
f0102a46:	68 b5 55 13 f0       	push   $0xf01355b5
f0102a4b:	50                   	push   %eax
f0102a4c:	e8 c3 ec 02 00       	call   f0131714 <strcmp>
f0102a51:	83 c4 10             	add    $0x10,%esp
f0102a54:	85 c0                	test   %eax,%eax
f0102a56:	75 0a                	jne    f0102a62 <command_test_lists+0x74>
	{
		test_insert_sorted_allocList();
f0102a58:	e8 69 c0 00 00       	call   f010eac6 <test_insert_sorted_allocList>
f0102a5d:	e9 2f 01 00 00       	jmp    f0102b91 <command_test_lists+0x1a3>
	}
	// Test 3 Example for find_block: tstlsts find
	else if(strcmp(arguments[1], "find") == 0)
f0102a62:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a65:	83 c0 04             	add    $0x4,%eax
f0102a68:	8b 00                	mov    (%eax),%eax
f0102a6a:	83 ec 08             	sub    $0x8,%esp
f0102a6d:	68 bb 55 13 f0       	push   $0xf01355bb
f0102a72:	50                   	push   %eax
f0102a73:	e8 9c ec 02 00       	call   f0131714 <strcmp>
f0102a78:	83 c4 10             	add    $0x10,%esp
f0102a7b:	85 c0                	test   %eax,%eax
f0102a7d:	75 0a                	jne    f0102a89 <command_test_lists+0x9b>
	{
		test_find_block();
f0102a7f:	e8 00 c5 00 00       	call   f010ef84 <test_find_block>
f0102a84:	e9 08 01 00 00       	jmp    f0102b91 <command_test_lists+0x1a3>
	}
	// Test 4 Example for alloc_block_FF: tstlsts FF
	else if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102a89:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a8c:	83 c0 04             	add    $0x4,%eax
f0102a8f:	8b 00                	mov    (%eax),%eax
f0102a91:	83 ec 08             	sub    $0x8,%esp
f0102a94:	68 c0 55 13 f0       	push   $0xf01355c0
f0102a99:	50                   	push   %eax
f0102a9a:	e8 75 ec 02 00       	call   f0131714 <strcmp>
f0102a9f:	83 c4 10             	add    $0x10,%esp
f0102aa2:	85 c0                	test   %eax,%eax
f0102aa4:	74 1d                	je     f0102ac3 <command_test_lists+0xd5>
f0102aa6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102aa9:	83 c0 04             	add    $0x4,%eax
f0102aac:	8b 00                	mov    (%eax),%eax
f0102aae:	83 ec 08             	sub    $0x8,%esp
f0102ab1:	68 c3 55 13 f0       	push   $0xf01355c3
f0102ab6:	50                   	push   %eax
f0102ab7:	e8 58 ec 02 00       	call   f0131714 <strcmp>
f0102abc:	83 c4 10             	add    $0x10,%esp
f0102abf:	85 c0                	test   %eax,%eax
f0102ac1:	75 0a                	jne    f0102acd <command_test_lists+0xdf>
	{
		test_alloc_block_FF();
f0102ac3:	e8 17 c8 00 00       	call   f010f2df <test_alloc_block_FF>
f0102ac8:	e9 c4 00 00 00       	jmp    f0102b91 <command_test_lists+0x1a3>
	}
	// Test 5 Example for alloc_block_BF: tstlsts BF
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102acd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ad0:	83 c0 04             	add    $0x4,%eax
f0102ad3:	8b 00                	mov    (%eax),%eax
f0102ad5:	83 ec 08             	sub    $0x8,%esp
f0102ad8:	68 c6 55 13 f0       	push   $0xf01355c6
f0102add:	50                   	push   %eax
f0102ade:	e8 31 ec 02 00       	call   f0131714 <strcmp>
f0102ae3:	83 c4 10             	add    $0x10,%esp
f0102ae6:	85 c0                	test   %eax,%eax
f0102ae8:	74 1d                	je     f0102b07 <command_test_lists+0x119>
f0102aea:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102aed:	83 c0 04             	add    $0x4,%eax
f0102af0:	8b 00                	mov    (%eax),%eax
f0102af2:	83 ec 08             	sub    $0x8,%esp
f0102af5:	68 c9 55 13 f0       	push   $0xf01355c9
f0102afa:	50                   	push   %eax
f0102afb:	e8 14 ec 02 00       	call   f0131714 <strcmp>
f0102b00:	83 c4 10             	add    $0x10,%esp
f0102b03:	85 c0                	test   %eax,%eax
f0102b05:	75 0a                	jne    f0102b11 <command_test_lists+0x123>
	{
		test_alloc_block_BF();
f0102b07:	e8 51 cc 00 00       	call   f010f75d <test_alloc_block_BF>
f0102b0c:	e9 80 00 00 00       	jmp    f0102b91 <command_test_lists+0x1a3>
	}
	// Test 6 Example for alloc_block_NF: tstlsts NF
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f0102b11:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b14:	83 c0 04             	add    $0x4,%eax
f0102b17:	8b 00                	mov    (%eax),%eax
f0102b19:	83 ec 08             	sub    $0x8,%esp
f0102b1c:	68 cc 55 13 f0       	push   $0xf01355cc
f0102b21:	50                   	push   %eax
f0102b22:	e8 ed eb 02 00       	call   f0131714 <strcmp>
f0102b27:	83 c4 10             	add    $0x10,%esp
f0102b2a:	85 c0                	test   %eax,%eax
f0102b2c:	74 1d                	je     f0102b4b <command_test_lists+0x15d>
f0102b2e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b31:	83 c0 04             	add    $0x4,%eax
f0102b34:	8b 00                	mov    (%eax),%eax
f0102b36:	83 ec 08             	sub    $0x8,%esp
f0102b39:	68 cf 55 13 f0       	push   $0xf01355cf
f0102b3e:	50                   	push   %eax
f0102b3f:	e8 d0 eb 02 00       	call   f0131714 <strcmp>
f0102b44:	83 c4 10             	add    $0x10,%esp
f0102b47:	85 c0                	test   %eax,%eax
f0102b49:	75 07                	jne    f0102b52 <command_test_lists+0x164>
	{
		test_alloc_block_NF();
f0102b4b:	e8 94 d2 00 00       	call   f010fde4 <test_alloc_block_NF>
f0102b50:	eb 3f                	jmp    f0102b91 <command_test_lists+0x1a3>
	}
	// Test 7 Example for alloc_block_NF: tstlsts merge
	else if(strcmp(arguments[1], "MERGE") == 0 || strcmp(arguments[1], "merge") == 0)
f0102b52:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b55:	83 c0 04             	add    $0x4,%eax
f0102b58:	8b 00                	mov    (%eax),%eax
f0102b5a:	83 ec 08             	sub    $0x8,%esp
f0102b5d:	68 d2 55 13 f0       	push   $0xf01355d2
f0102b62:	50                   	push   %eax
f0102b63:	e8 ac eb 02 00       	call   f0131714 <strcmp>
f0102b68:	83 c4 10             	add    $0x10,%esp
f0102b6b:	85 c0                	test   %eax,%eax
f0102b6d:	74 1d                	je     f0102b8c <command_test_lists+0x19e>
f0102b6f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b72:	83 c0 04             	add    $0x4,%eax
f0102b75:	8b 00                	mov    (%eax),%eax
f0102b77:	83 ec 08             	sub    $0x8,%esp
f0102b7a:	68 d8 55 13 f0       	push   $0xf01355d8
f0102b7f:	50                   	push   %eax
f0102b80:	e8 8f eb 02 00       	call   f0131714 <strcmp>
f0102b85:	83 c4 10             	add    $0x10,%esp
f0102b88:	85 c0                	test   %eax,%eax
f0102b8a:	75 05                	jne    f0102b91 <command_test_lists+0x1a3>
	{
		test_insert_sorted_with_merge_freeList();
f0102b8c:	e8 e1 da 00 00       	call   f0110672 <test_insert_sorted_with_merge_freeList>
	}
	return 0;
f0102b91:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b96:	c9                   	leave  
f0102b97:	c3                   	ret    

f0102b98 <command_test_chunks>:

int command_test_chunks(int number_of_arguments, char **arguments)
{
f0102b98:	55                   	push   %ebp
f0102b99:	89 e5                	mov    %esp,%ebp
f0102b9b:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102b9e:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102ba2:	74 1a                	je     f0102bbe <command_test_chunks+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstchunk <testname>\n") ;
f0102ba4:	83 ec 0c             	sub    $0xc,%esp
f0102ba7:	68 e0 55 13 f0       	push   $0xf01355e0
f0102bac:	e8 5d e1 ff ff       	call   f0100d0e <cprintf>
f0102bb1:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102bb4:	b8 00 00 00 00       	mov    $0x0,%eax
f0102bb9:	e9 e1 00 00 00       	jmp    f0102c9f <command_test_chunks+0x107>
	}
	// CUT-PASTE Test
	if(strcmp(arguments[1], "cutpaste") == 0)
f0102bbe:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102bc1:	83 c0 04             	add    $0x4,%eax
f0102bc4:	8b 00                	mov    (%eax),%eax
f0102bc6:	83 ec 08             	sub    $0x8,%esp
f0102bc9:	68 19 56 13 f0       	push   $0xf0135619
f0102bce:	50                   	push   %eax
f0102bcf:	e8 40 eb 02 00       	call   f0131714 <strcmp>
f0102bd4:	83 c4 10             	add    $0x10,%esp
f0102bd7:	85 c0                	test   %eax,%eax
f0102bd9:	75 0a                	jne    f0102be5 <command_test_chunks+0x4d>
	{
		test_cut_paste_pages();
f0102bdb:	e8 bc f2 00 00       	call   f0111e9c <test_cut_paste_pages>
f0102be0:	e9 b5 00 00 00       	jmp    f0102c9a <command_test_chunks+0x102>
	}
	// COPY-PASTE Test
	else if(strcmp(arguments[1], "copypaste") == 0)
f0102be5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102be8:	83 c0 04             	add    $0x4,%eax
f0102beb:	8b 00                	mov    (%eax),%eax
f0102bed:	83 ec 08             	sub    $0x8,%esp
f0102bf0:	68 22 56 13 f0       	push   $0xf0135622
f0102bf5:	50                   	push   %eax
f0102bf6:	e8 19 eb 02 00       	call   f0131714 <strcmp>
f0102bfb:	83 c4 10             	add    $0x10,%esp
f0102bfe:	85 c0                	test   %eax,%eax
f0102c00:	75 0a                	jne    f0102c0c <command_test_chunks+0x74>
	{
		test_copy_paste_chunk();
f0102c02:	e8 e0 fc 00 00       	call   f01128e7 <test_copy_paste_chunk>
f0102c07:	e9 8e 00 00 00       	jmp    f0102c9a <command_test_chunks+0x102>
	}
	// SHARE Test
	else if(strcmp(arguments[1], "share") == 0)
f0102c0c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c0f:	83 c0 04             	add    $0x4,%eax
f0102c12:	8b 00                	mov    (%eax),%eax
f0102c14:	83 ec 08             	sub    $0x8,%esp
f0102c17:	68 2c 56 13 f0       	push   $0xf013562c
f0102c1c:	50                   	push   %eax
f0102c1d:	e8 f2 ea 02 00       	call   f0131714 <strcmp>
f0102c22:	83 c4 10             	add    $0x10,%esp
f0102c25:	85 c0                	test   %eax,%eax
f0102c27:	75 07                	jne    f0102c30 <command_test_chunks+0x98>
	{
		test_share_chunk();
f0102c29:	e8 b7 0d 01 00       	call   f01139e5 <test_share_chunk>
f0102c2e:	eb 6a                	jmp    f0102c9a <command_test_chunks+0x102>
	}
	// ALLOCATE Test
	else if(strcmp(arguments[1], "allocate") == 0)
f0102c30:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c33:	83 c0 04             	add    $0x4,%eax
f0102c36:	8b 00                	mov    (%eax),%eax
f0102c38:	83 ec 08             	sub    $0x8,%esp
f0102c3b:	68 32 56 13 f0       	push   $0xf0135632
f0102c40:	50                   	push   %eax
f0102c41:	e8 ce ea 02 00       	call   f0131714 <strcmp>
f0102c46:	83 c4 10             	add    $0x10,%esp
f0102c49:	85 c0                	test   %eax,%eax
f0102c4b:	75 07                	jne    f0102c54 <command_test_chunks+0xbc>
	{
		test_allocate_chunk();
f0102c4d:	e8 bb 17 01 00       	call   f011440d <test_allocate_chunk>
f0102c52:	eb 46                	jmp    f0102c9a <command_test_chunks+0x102>
	}
	// REQUIRED SPACE Test
	else if(strcmp(arguments[1], "required_space") == 0)
f0102c54:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c57:	83 c0 04             	add    $0x4,%eax
f0102c5a:	8b 00                	mov    (%eax),%eax
f0102c5c:	83 ec 08             	sub    $0x8,%esp
f0102c5f:	68 3b 56 13 f0       	push   $0xf013563b
f0102c64:	50                   	push   %eax
f0102c65:	e8 aa ea 02 00       	call   f0131714 <strcmp>
f0102c6a:	83 c4 10             	add    $0x10,%esp
f0102c6d:	85 c0                	test   %eax,%eax
f0102c6f:	75 07                	jne    f0102c78 <command_test_chunks+0xe0>
	{
		test_calculate_required_frames();
f0102c71:	e8 46 20 01 00       	call   f0114cbc <test_calculate_required_frames>
f0102c76:	eb 22                	jmp    f0102c9a <command_test_chunks+0x102>
	}
	// ALLOCATED SPACE Test
	else if(strcmp(arguments[1], "allocated_space") == 0)
f0102c78:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c7b:	83 c0 04             	add    $0x4,%eax
f0102c7e:	8b 00                	mov    (%eax),%eax
f0102c80:	83 ec 08             	sub    $0x8,%esp
f0102c83:	68 4a 56 13 f0       	push   $0xf013564a
f0102c88:	50                   	push   %eax
f0102c89:	e8 86 ea 02 00       	call   f0131714 <strcmp>
f0102c8e:	83 c4 10             	add    $0x10,%esp
f0102c91:	85 c0                	test   %eax,%eax
f0102c93:	75 05                	jne    f0102c9a <command_test_chunks+0x102>
	{
		test_calculate_allocated_space();
f0102c95:	e8 96 28 01 00       	call   f0115530 <test_calculate_allocated_space>
	}
	return 0;
f0102c9a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102c9f:	c9                   	leave  
f0102ca0:	c3                   	ret    

f0102ca1 <command_test_paging_manipulation>:

int command_test_paging_manipulation(int number_of_arguments, char **arguments)
{
f0102ca1:	55                   	push   %ebp
f0102ca2:	89 e5                	mov    %esp,%ebp
f0102ca4:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102ca7:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102cab:	74 1a                	je     f0102cc7 <command_test_paging_manipulation+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstpg <testname>\n") ;
f0102cad:	83 ec 0c             	sub    $0xc,%esp
f0102cb0:	68 5c 56 13 f0       	push   $0xf013565c
f0102cb5:	e8 54 e0 ff ff       	call   f0100d0e <cprintf>
f0102cba:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102cbd:	b8 00 00 00 00       	mov    $0x0,%eax
f0102cc2:	e9 e1 00 00 00       	jmp    f0102da8 <command_test_paging_manipulation+0x107>
	}
	// Test 1.1-Set/Clear permissions: tstpg scperm1
	if(strcmp(arguments[1], "scperm1") == 0)
f0102cc7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102cca:	83 c0 04             	add    $0x4,%eax
f0102ccd:	8b 00                	mov    (%eax),%eax
f0102ccf:	83 ec 08             	sub    $0x8,%esp
f0102cd2:	68 92 56 13 f0       	push   $0xf0135692
f0102cd7:	50                   	push   %eax
f0102cd8:	e8 37 ea 02 00       	call   f0131714 <strcmp>
f0102cdd:	83 c4 10             	add    $0x10,%esp
f0102ce0:	85 c0                	test   %eax,%eax
f0102ce2:	75 0a                	jne    f0102cee <command_test_paging_manipulation+0x4d>
	{
		test_pt_set_page_permissions();
f0102ce4:	e8 a4 e8 00 00       	call   f011158d <test_pt_set_page_permissions>
f0102ce9:	e9 b5 00 00 00       	jmp    f0102da3 <command_test_paging_manipulation+0x102>
	}
	// Test 1.2-Set/Clear permissions: tstpg scperm2
	else if(strcmp(arguments[1], "scperm2") == 0)
f0102cee:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102cf1:	83 c0 04             	add    $0x4,%eax
f0102cf4:	8b 00                	mov    (%eax),%eax
f0102cf6:	83 ec 08             	sub    $0x8,%esp
f0102cf9:	68 9a 56 13 f0       	push   $0xf013569a
f0102cfe:	50                   	push   %eax
f0102cff:	e8 10 ea 02 00       	call   f0131714 <strcmp>
f0102d04:	83 c4 10             	add    $0x10,%esp
f0102d07:	85 c0                	test   %eax,%eax
f0102d09:	75 0a                	jne    f0102d15 <command_test_paging_manipulation+0x74>
	{
		test_pt_set_page_permissions_invalid_va();
f0102d0b:	e8 e0 ea 00 00       	call   f01117f0 <test_pt_set_page_permissions_invalid_va>
f0102d10:	e9 8e 00 00 00       	jmp    f0102da3 <command_test_paging_manipulation+0x102>
	}
	// Test 2-Get permissions: tstpg getperm
	else if(strcmp(arguments[1], "getperm") == 0)
f0102d15:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d18:	83 c0 04             	add    $0x4,%eax
f0102d1b:	8b 00                	mov    (%eax),%eax
f0102d1d:	83 ec 08             	sub    $0x8,%esp
f0102d20:	68 a2 56 13 f0       	push   $0xf01356a2
f0102d25:	50                   	push   %eax
f0102d26:	e8 e9 e9 02 00       	call   f0131714 <strcmp>
f0102d2b:	83 c4 10             	add    $0x10,%esp
f0102d2e:	85 c0                	test   %eax,%eax
f0102d30:	75 07                	jne    f0102d39 <command_test_paging_manipulation+0x98>
	{
		test_pt_get_page_permissions();
f0102d32:	e8 02 eb 00 00       	call   f0111839 <test_pt_get_page_permissions>
f0102d37:	eb 6a                	jmp    f0102da3 <command_test_paging_manipulation+0x102>
	}
	// Test 3.1-Clear entry: tstpg clear1
	else if(strcmp(arguments[1], "clear1") == 0)
f0102d39:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d3c:	83 c0 04             	add    $0x4,%eax
f0102d3f:	8b 00                	mov    (%eax),%eax
f0102d41:	83 ec 08             	sub    $0x8,%esp
f0102d44:	68 aa 56 13 f0       	push   $0xf01356aa
f0102d49:	50                   	push   %eax
f0102d4a:	e8 c5 e9 02 00       	call   f0131714 <strcmp>
f0102d4f:	83 c4 10             	add    $0x10,%esp
f0102d52:	85 c0                	test   %eax,%eax
f0102d54:	75 07                	jne    f0102d5d <command_test_paging_manipulation+0xbc>
	{
		test_pt_clear_page_table_entry();
f0102d56:	e8 22 ec 00 00       	call   f011197d <test_pt_clear_page_table_entry>
f0102d5b:	eb 46                	jmp    f0102da3 <command_test_paging_manipulation+0x102>
	}
	// Test 3.2-Clear entry: tstpg clear2
	else if(strcmp(arguments[1], "clear2") == 0)
f0102d5d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d60:	83 c0 04             	add    $0x4,%eax
f0102d63:	8b 00                	mov    (%eax),%eax
f0102d65:	83 ec 08             	sub    $0x8,%esp
f0102d68:	68 b1 56 13 f0       	push   $0xf01356b1
f0102d6d:	50                   	push   %eax
f0102d6e:	e8 a1 e9 02 00       	call   f0131714 <strcmp>
f0102d73:	83 c4 10             	add    $0x10,%esp
f0102d76:	85 c0                	test   %eax,%eax
f0102d78:	75 07                	jne    f0102d81 <command_test_paging_manipulation+0xe0>
	{
		test_pt_clear_page_table_entry_invalid_va();
f0102d7a:	e8 57 ed 00 00       	call   f0111ad6 <test_pt_clear_page_table_entry_invalid_va>
f0102d7f:	eb 22                	jmp    f0102da3 <command_test_paging_manipulation+0x102>
	}
	// Test 4-Convert virtual to physical: tstpg v2p
	else if(strcmp(arguments[1], "v2p") == 0)
f0102d81:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d84:	83 c0 04             	add    $0x4,%eax
f0102d87:	8b 00                	mov    (%eax),%eax
f0102d89:	83 ec 08             	sub    $0x8,%esp
f0102d8c:	68 b8 56 13 f0       	push   $0xf01356b8
f0102d91:	50                   	push   %eax
f0102d92:	e8 7d e9 02 00       	call   f0131714 <strcmp>
f0102d97:	83 c4 10             	add    $0x10,%esp
f0102d9a:	85 c0                	test   %eax,%eax
f0102d9c:	75 05                	jne    f0102da3 <command_test_paging_manipulation+0x102>
	{
		test_virtual_to_physical();
f0102d9e:	e8 6b ed 00 00       	call   f0111b0e <test_virtual_to_physical>
	}
	return 0;
f0102da3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102da8:	c9                   	leave  
f0102da9:	c3                   	ret    

f0102daa <command_test_kheap>:

int command_test_kheap(int number_of_arguments, char **arguments)
{
f0102daa:	55                   	push   %ebp
f0102dab:	89 e5                	mov    %esp,%ebp
f0102dad:	83 ec 18             	sub    $0x18,%esp
	// Parameters Validation Checking
	if (strcmp(arguments[2], "kmalloc") == 0 && number_of_arguments != 4)
f0102db0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102db3:	83 c0 08             	add    $0x8,%eax
f0102db6:	8b 00                	mov    (%eax),%eax
f0102db8:	83 ec 08             	sub    $0x8,%esp
f0102dbb:	68 bc 56 13 f0       	push   $0xf01356bc
f0102dc0:	50                   	push   %eax
f0102dc1:	e8 4e e9 02 00       	call   f0131714 <strcmp>
f0102dc6:	83 c4 10             	add    $0x10,%esp
f0102dc9:	85 c0                	test   %eax,%eax
f0102dcb:	75 20                	jne    f0102ded <command_test_kheap+0x43>
f0102dcd:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102dd1:	74 1a                	je     f0102ded <command_test_kheap+0x43>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> kmalloc <1 or 2 or 3>\n") ;
f0102dd3:	83 ec 0c             	sub    $0xc,%esp
f0102dd6:	68 c4 56 13 f0       	push   $0xf01356c4
f0102ddb:	e8 2e df ff ff       	call   f0100d0e <cprintf>
f0102de0:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102de3:	b8 00 00 00 00       	mov    $0x0,%eax
f0102de8:	e9 33 03 00 00       	jmp    f0103120 <command_test_kheap+0x376>
	}
	if (strcmp(arguments[2], "kmalloc") != 0 && number_of_arguments != 3)
f0102ded:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102df0:	83 c0 08             	add    $0x8,%eax
f0102df3:	8b 00                	mov    (%eax),%eax
f0102df5:	83 ec 08             	sub    $0x8,%esp
f0102df8:	68 bc 56 13 f0       	push   $0xf01356bc
f0102dfd:	50                   	push   %eax
f0102dfe:	e8 11 e9 02 00       	call   f0131714 <strcmp>
f0102e03:	83 c4 10             	add    $0x10,%esp
f0102e06:	85 c0                	test   %eax,%eax
f0102e08:	74 20                	je     f0102e2a <command_test_kheap+0x80>
f0102e0a:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0102e0e:	74 1a                	je     f0102e2a <command_test_kheap+0x80>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> <testname>\n") ;
f0102e10:	83 ec 0c             	sub    $0xc,%esp
f0102e13:	68 14 57 13 f0       	push   $0xf0135714
f0102e18:	e8 f1 de ff ff       	call   f0100d0e <cprintf>
f0102e1d:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102e20:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e25:	e9 f6 02 00 00       	jmp    f0103120 <command_test_kheap+0x376>
	}

	// Setting Strategy
	if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102e2a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e2d:	83 c0 04             	add    $0x4,%eax
f0102e30:	8b 00                	mov    (%eax),%eax
f0102e32:	83 ec 08             	sub    $0x8,%esp
f0102e35:	68 c0 55 13 f0       	push   $0xf01355c0
f0102e3a:	50                   	push   %eax
f0102e3b:	e8 d4 e8 02 00       	call   f0131714 <strcmp>
f0102e40:	83 c4 10             	add    $0x10,%esp
f0102e43:	85 c0                	test   %eax,%eax
f0102e45:	74 1d                	je     f0102e64 <command_test_kheap+0xba>
f0102e47:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e4a:	83 c0 04             	add    $0x4,%eax
f0102e4d:	8b 00                	mov    (%eax),%eax
f0102e4f:	83 ec 08             	sub    $0x8,%esp
f0102e52:	68 c3 55 13 f0       	push   $0xf01355c3
f0102e57:	50                   	push   %eax
f0102e58:	e8 b7 e8 02 00       	call   f0131714 <strcmp>
f0102e5d:	83 c4 10             	add    $0x10,%esp
f0102e60:	85 c0                	test   %eax,%eax
f0102e62:	75 1a                	jne    f0102e7e <command_test_kheap+0xd4>
	{
		setKHeapPlacementStrategyFIRSTFIT();
f0102e64:	e8 60 e0 ff ff       	call   f0100ec9 <setKHeapPlacementStrategyFIRSTFIT>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f0102e69:	83 ec 0c             	sub    $0xc,%esp
f0102e6c:	68 5c 51 13 f0       	push   $0xf013515c
f0102e71:	e8 98 de ff ff       	call   f0100d0e <cprintf>
f0102e76:	83 c4 10             	add    $0x10,%esp
f0102e79:	e9 a0 00 00 00       	jmp    f0102f1e <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102e7e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e81:	83 c0 04             	add    $0x4,%eax
f0102e84:	8b 00                	mov    (%eax),%eax
f0102e86:	83 ec 08             	sub    $0x8,%esp
f0102e89:	68 c6 55 13 f0       	push   $0xf01355c6
f0102e8e:	50                   	push   %eax
f0102e8f:	e8 80 e8 02 00       	call   f0131714 <strcmp>
f0102e94:	83 c4 10             	add    $0x10,%esp
f0102e97:	85 c0                	test   %eax,%eax
f0102e99:	74 1d                	je     f0102eb8 <command_test_kheap+0x10e>
f0102e9b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e9e:	83 c0 04             	add    $0x4,%eax
f0102ea1:	8b 00                	mov    (%eax),%eax
f0102ea3:	83 ec 08             	sub    $0x8,%esp
f0102ea6:	68 c9 55 13 f0       	push   $0xf01355c9
f0102eab:	50                   	push   %eax
f0102eac:	e8 63 e8 02 00       	call   f0131714 <strcmp>
f0102eb1:	83 c4 10             	add    $0x10,%esp
f0102eb4:	85 c0                	test   %eax,%eax
f0102eb6:	75 17                	jne    f0102ecf <command_test_kheap+0x125>
	{
		setKHeapPlacementStrategyBESTFIT();
f0102eb8:	e8 1c e0 ff ff       	call   f0100ed9 <setKHeapPlacementStrategyBESTFIT>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f0102ebd:	83 ec 0c             	sub    $0xc,%esp
f0102ec0:	68 8c 51 13 f0       	push   $0xf013518c
f0102ec5:	e8 44 de ff ff       	call   f0100d0e <cprintf>
f0102eca:	83 c4 10             	add    $0x10,%esp
f0102ecd:	eb 4f                	jmp    f0102f1e <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f0102ecf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ed2:	83 c0 04             	add    $0x4,%eax
f0102ed5:	8b 00                	mov    (%eax),%eax
f0102ed7:	83 ec 08             	sub    $0x8,%esp
f0102eda:	68 cc 55 13 f0       	push   $0xf01355cc
f0102edf:	50                   	push   %eax
f0102ee0:	e8 2f e8 02 00       	call   f0131714 <strcmp>
f0102ee5:	83 c4 10             	add    $0x10,%esp
f0102ee8:	85 c0                	test   %eax,%eax
f0102eea:	74 1d                	je     f0102f09 <command_test_kheap+0x15f>
f0102eec:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102eef:	83 c0 04             	add    $0x4,%eax
f0102ef2:	8b 00                	mov    (%eax),%eax
f0102ef4:	83 ec 08             	sub    $0x8,%esp
f0102ef7:	68 cf 55 13 f0       	push   $0xf01355cf
f0102efc:	50                   	push   %eax
f0102efd:	e8 12 e8 02 00       	call   f0131714 <strcmp>
f0102f02:	83 c4 10             	add    $0x10,%esp
f0102f05:	85 c0                	test   %eax,%eax
f0102f07:	75 15                	jne    f0102f1e <command_test_kheap+0x174>
	{
		setKHeapPlacementStrategyNEXTFIT();
f0102f09:	e8 db df ff ff       	call   f0100ee9 <setKHeapPlacementStrategyNEXTFIT>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f0102f0e:	83 ec 0c             	sub    $0xc,%esp
f0102f11:	68 b8 51 13 f0       	push   $0xf01351b8
f0102f16:	e8 f3 dd ff ff       	call   f0100d0e <cprintf>
f0102f1b:	83 c4 10             	add    $0x10,%esp
	}

	// Test 1-kmalloc: tstkheap FF kmalloc 1
	if(strcmp(arguments[2], "kmalloc") == 0)
f0102f1e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f21:	83 c0 08             	add    $0x8,%eax
f0102f24:	8b 00                	mov    (%eax),%eax
f0102f26:	83 ec 08             	sub    $0x8,%esp
f0102f29:	68 bc 56 13 f0       	push   $0xf01356bc
f0102f2e:	50                   	push   %eax
f0102f2f:	e8 e0 e7 02 00       	call   f0131714 <strcmp>
f0102f34:	83 c4 10             	add    $0x10,%esp
f0102f37:	85 c0                	test   %eax,%eax
f0102f39:	0f 85 13 01 00 00    	jne    f0103052 <command_test_kheap+0x2a8>
	{
		uint32 testNum = strtol(arguments[3], NULL, 10);
f0102f3f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f42:	83 c0 0c             	add    $0xc,%eax
f0102f45:	8b 00                	mov    (%eax),%eax
f0102f47:	83 ec 04             	sub    $0x4,%esp
f0102f4a:	6a 0a                	push   $0xa
f0102f4c:	6a 00                	push   $0x0
f0102f4e:	50                   	push   %eax
f0102f4f:	e8 14 ea 02 00       	call   f0131968 <strtol>
f0102f54:	83 c4 10             	add    $0x10,%esp
f0102f57:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(isKHeapPlacementStrategyFIRSTFIT())
f0102f5a:	e8 be df ff ff       	call   f0100f1d <isKHeapPlacementStrategyFIRSTFIT>
f0102f5f:	84 c0                	test   %al,%al
f0102f61:	74 54                	je     f0102fb7 <command_test_kheap+0x20d>
		{
			if (testNum == 0)
f0102f63:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102f67:	75 1a                	jne    f0102f83 <command_test_kheap+0x1d9>
			{
				cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f0102f69:	83 ec 0c             	sub    $0xc,%esp
f0102f6c:	68 30 54 13 f0       	push   $0xf0135430
f0102f71:	e8 98 dd ff ff       	call   f0100d0e <cprintf>
f0102f76:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102f79:	b8 00 00 00 00       	mov    $0x0,%eax
f0102f7e:	e9 9d 01 00 00       	jmp    f0103120 <command_test_kheap+0x376>
			}
			//Test FIRST FIT allocation
			if (testNum == 1)
f0102f83:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102f87:	75 0a                	jne    f0102f93 <command_test_kheap+0x1e9>
				test_kmalloc();
f0102f89:	e8 69 4b 01 00       	call   f0117af7 <test_kmalloc>
f0102f8e:	e9 b5 00 00 00       	jmp    f0103048 <command_test_kheap+0x29e>
			else if (testNum == 2)
f0102f93:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102f97:	75 0a                	jne    f0102fa3 <command_test_kheap+0x1f9>
				test_kmalloc_firstfit1();
f0102f99:	e8 e2 99 01 00       	call   f011c980 <test_kmalloc_firstfit1>
f0102f9e:	e9 a5 00 00 00       	jmp    f0103048 <command_test_kheap+0x29e>
			else if (testNum == 3)
f0102fa3:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102fa7:	0f 85 9b 00 00 00    	jne    f0103048 <command_test_kheap+0x29e>
				test_kmalloc_firstfit2();
f0102fad:	e8 70 ad 01 00       	call   f011dd22 <test_kmalloc_firstfit2>
f0102fb2:	e9 91 00 00 00       	jmp    f0103048 <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyBESTFIT())
f0102fb7:	e8 76 df ff ff       	call   f0100f32 <isKHeapPlacementStrategyBESTFIT>
f0102fbc:	84 c0                	test   %al,%al
f0102fbe:	74 47                	je     f0103007 <command_test_kheap+0x25d>
		{
			if (testNum == 0)
f0102fc0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102fc4:	75 1a                	jne    f0102fe0 <command_test_kheap+0x236>
			{
				cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f0102fc6:	83 ec 0c             	sub    $0xc,%esp
f0102fc9:	68 80 54 13 f0       	push   $0xf0135480
f0102fce:	e8 3b dd ff ff       	call   f0100d0e <cprintf>
f0102fd3:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102fd6:	b8 00 00 00 00       	mov    $0x0,%eax
f0102fdb:	e9 40 01 00 00       	jmp    f0103120 <command_test_kheap+0x376>
			}
			if (testNum == 1)
f0102fe0:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102fe4:	75 07                	jne    f0102fed <command_test_kheap+0x243>
				test_kmalloc();
f0102fe6:	e8 0c 4b 01 00       	call   f0117af7 <test_kmalloc>
f0102feb:	eb 5b                	jmp    f0103048 <command_test_kheap+0x29e>
			else if (testNum == 2)
f0102fed:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102ff1:	75 07                	jne    f0102ffa <command_test_kheap+0x250>
				test_kmalloc_bestfit1();
f0102ff3:	e8 52 74 01 00       	call   f011a44a <test_kmalloc_bestfit1>
f0102ff8:	eb 4e                	jmp    f0103048 <command_test_kheap+0x29e>
			else if (testNum == 3)
f0102ffa:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102ffe:	75 48                	jne    f0103048 <command_test_kheap+0x29e>
				test_kmalloc_bestfit2();
f0103000:	e8 9b 86 01 00       	call   f011b6a0 <test_kmalloc_bestfit2>
f0103005:	eb 41                	jmp    f0103048 <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyNEXTFIT())
f0103007:	e8 3b df ff ff       	call   f0100f47 <isKHeapPlacementStrategyNEXTFIT>
f010300c:	84 c0                	test   %al,%al
f010300e:	74 38                	je     f0103048 <command_test_kheap+0x29e>
		{
			if (testNum == 0)
f0103010:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103014:	75 1a                	jne    f0103030 <command_test_kheap+0x286>
			{
				cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f0103016:	83 ec 0c             	sub    $0xc,%esp
f0103019:	68 d0 54 13 f0       	push   $0xf01354d0
f010301e:	e8 eb dc ff ff       	call   f0100d0e <cprintf>
f0103023:	83 c4 10             	add    $0x10,%esp
				return 0;
f0103026:	b8 00 00 00 00       	mov    $0x0,%eax
f010302b:	e9 f0 00 00 00       	jmp    f0103120 <command_test_kheap+0x376>
			}
			//Test cont. allocation
			if (testNum == 1)
f0103030:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0103034:	75 07                	jne    f010303d <command_test_kheap+0x293>
				test_kmalloc();
f0103036:	e8 bc 4a 01 00       	call   f0117af7 <test_kmalloc>
f010303b:	eb 0b                	jmp    f0103048 <command_test_kheap+0x29e>
			//Test nextfit strategy
			else if (testNum == 2)
f010303d:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0103041:	75 05                	jne    f0103048 <command_test_kheap+0x29e>
				test_kmalloc_nextfit();
f0103043:	e8 0d 5d 01 00       	call   f0118d55 <test_kmalloc_nextfit>
		}
		return 0;
f0103048:	b8 00 00 00 00       	mov    $0x0,%eax
f010304d:	e9 ce 00 00 00       	jmp    f0103120 <command_test_kheap+0x376>
	}
	// Test 2-kfree: tstkheap FF kfree
	else if(strcmp(arguments[2], "kfree") == 0)
f0103052:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103055:	83 c0 08             	add    $0x8,%eax
f0103058:	8b 00                	mov    (%eax),%eax
f010305a:	83 ec 08             	sub    $0x8,%esp
f010305d:	68 58 57 13 f0       	push   $0xf0135758
f0103062:	50                   	push   %eax
f0103063:	e8 ac e6 02 00       	call   f0131714 <strcmp>
f0103068:	83 c4 10             	add    $0x10,%esp
f010306b:	85 c0                	test   %eax,%eax
f010306d:	75 28                	jne    f0103097 <command_test_kheap+0x2ed>
	{
		if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f010306f:	e8 be de ff ff       	call   f0100f32 <isKHeapPlacementStrategyBESTFIT>
f0103074:	84 c0                	test   %al,%al
f0103076:	75 09                	jne    f0103081 <command_test_kheap+0x2d7>
f0103078:	e8 a0 de ff ff       	call   f0100f1d <isKHeapPlacementStrategyFIRSTFIT>
f010307d:	84 c0                	test   %al,%al
f010307f:	74 07                	je     f0103088 <command_test_kheap+0x2de>
		{
			test_kfree_bestfirstfit();
f0103081:	e8 d3 f2 01 00       	call   f0122359 <test_kfree_bestfirstfit>
f0103086:	eb 05                	jmp    f010308d <command_test_kheap+0x2e3>
		}
		else //NEXT & CONT
		{
			test_kfree();
f0103088:	e8 7a d1 01 00       	call   f0120207 <test_kfree>
		}
		return 0;
f010308d:	b8 00 00 00 00       	mov    $0x0,%eax
f0103092:	e9 89 00 00 00       	jmp    f0103120 <command_test_kheap+0x376>
	}
	// Test 3-kphysaddr: tstkheap FF kphysaddr
	else if(strcmp(arguments[2], "kphysaddr") == 0)
f0103097:	8b 45 0c             	mov    0xc(%ebp),%eax
f010309a:	83 c0 08             	add    $0x8,%eax
f010309d:	8b 00                	mov    (%eax),%eax
f010309f:	83 ec 08             	sub    $0x8,%esp
f01030a2:	68 5e 57 13 f0       	push   $0xf013575e
f01030a7:	50                   	push   %eax
f01030a8:	e8 67 e6 02 00       	call   f0131714 <strcmp>
f01030ad:	83 c4 10             	add    $0x10,%esp
f01030b0:	85 c0                	test   %eax,%eax
f01030b2:	75 0c                	jne    f01030c0 <command_test_kheap+0x316>
	{
		test_kheap_phys_addr();
f01030b4:	e8 9c 0c 02 00       	call   f0123d55 <test_kheap_phys_addr>
		return 0;
f01030b9:	b8 00 00 00 00       	mov    $0x0,%eax
f01030be:	eb 60                	jmp    f0103120 <command_test_kheap+0x376>
	}
	// Test 4-kvirtaddr: tstkheap FF kvirtaddr
	else if(strcmp(arguments[2], "kvirtaddr") == 0)
f01030c0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01030c3:	83 c0 08             	add    $0x8,%eax
f01030c6:	8b 00                	mov    (%eax),%eax
f01030c8:	83 ec 08             	sub    $0x8,%esp
f01030cb:	68 68 57 13 f0       	push   $0xf0135768
f01030d0:	50                   	push   %eax
f01030d1:	e8 3e e6 02 00       	call   f0131714 <strcmp>
f01030d6:	83 c4 10             	add    $0x10,%esp
f01030d9:	85 c0                	test   %eax,%eax
f01030db:	75 0c                	jne    f01030e9 <command_test_kheap+0x33f>
	{
		test_kheap_virt_addr();
f01030dd:	e8 43 21 02 00       	call   f0125225 <test_kheap_virt_addr>
		return 0;
f01030e2:	b8 00 00 00 00       	mov    $0x0,%eax
f01030e7:	eb 37                	jmp    f0103120 <command_test_kheap+0x376>
	}
	// Test 5-krealloc: tstkheap BF krealloc
	else if(strcmp(arguments[2], "krealloc") == 0)
f01030e9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01030ec:	83 c0 08             	add    $0x8,%eax
f01030ef:	8b 00                	mov    (%eax),%eax
f01030f1:	83 ec 08             	sub    $0x8,%esp
f01030f4:	68 72 57 13 f0       	push   $0xf0135772
f01030f9:	50                   	push   %eax
f01030fa:	e8 15 e6 02 00       	call   f0131714 <strcmp>
f01030ff:	83 c4 10             	add    $0x10,%esp
f0103102:	85 c0                	test   %eax,%eax
f0103104:	75 15                	jne    f010311b <command_test_kheap+0x371>
	{
		if (isKHeapPlacementStrategyBESTFIT())
f0103106:	e8 27 de ff ff       	call   f0100f32 <isKHeapPlacementStrategyBESTFIT>
f010310b:	84 c0                	test   %al,%al
f010310d:	74 05                	je     f0103114 <command_test_kheap+0x36a>
		{
			test_krealloc_BF();
f010310f:	e8 b5 af 02 00       	call   f012e0c9 <test_krealloc_BF>
		}
		return 0;
f0103114:	b8 00 00 00 00       	mov    $0x0,%eax
f0103119:	eb 05                	jmp    f0103120 <command_test_kheap+0x376>
	}
	return 0;
f010311b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103120:	c9                   	leave  
f0103121:	c3                   	ret    

f0103122 <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f0103122:	55                   	push   %ebp
f0103123:	89 e5                	mov    %esp,%ebp
f0103125:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0103128:	8b 45 08             	mov    0x8(%ebp),%eax
f010312b:	05 00 14 00 00       	add    $0x1400,%eax
f0103130:	c1 e0 03             	shl    $0x3,%eax
f0103133:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0103136:	83 ec 04             	sub    $0x4,%esp
f0103139:	6a 08                	push   $0x8
f010313b:	ff 75 0c             	pushl  0xc(%ebp)
f010313e:	ff 75 f4             	pushl  -0xc(%ebp)
f0103141:	e8 15 ec 02 00       	call   f0131d5b <ide_read>
f0103146:	83 c4 10             	add    $0x10,%esp
f0103149:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f010314c:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010314f:	c9                   	leave  
f0103150:	c3                   	ret    

f0103151 <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f0103151:	55                   	push   %ebp
f0103152:	89 e5                	mov    %esp,%ebp
f0103154:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0103157:	8b 45 08             	mov    0x8(%ebp),%eax
f010315a:	05 00 14 00 00       	add    $0x1400,%eax
f010315f:	c1 e0 03             	shl    $0x3,%eax
f0103162:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0103165:	83 ec 04             	sub    $0x4,%esp
f0103168:	6a 08                	push   $0x8
f010316a:	ff 75 0c             	pushl  0xc(%ebp)
f010316d:	ff 75 f4             	pushl  -0xc(%ebp)
f0103170:	e8 26 ed 02 00       	call   f0131e9b <ide_write>
f0103175:	83 c4 10             	add    $0x10,%esp
f0103178:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f010317b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010317f:	74 14                	je     f0103195 <write_disk_page+0x44>
		panic("Error writing on disk\n");
f0103181:	83 ec 04             	sub    $0x4,%esp
f0103184:	68 7c 57 13 f0       	push   $0xf013577c
f0103189:	6a 2e                	push   $0x2e
f010318b:	68 93 57 13 f0       	push   $0xf0135793
f0103190:	e8 70 d0 ff ff       	call   f0100205 <_panic>
	return success;
f0103195:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103198:	c9                   	leave  
f0103199:	c3                   	ret    

f010319a <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f010319a:	55                   	push   %ebp
f010319b:	89 e5                	mov    %esp,%ebp
f010319d:	53                   	push   %ebx
f010319e:	83 ec 14             	sub    $0x14,%esp
	int i;
	LIST_INIT(&disk_free_frame_list);
f01031a1:	c7 05 b4 27 86 f0 00 	movl   $0x0,0xf08627b4
f01031a8:	00 00 00 
f01031ab:	c7 05 b8 27 86 f0 00 	movl   $0x0,0xf08627b8
f01031b2:	00 00 00 
f01031b5:	c7 05 c0 27 86 f0 00 	movl   $0x0,0xf08627c0
f01031bc:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f01031bf:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f01031c6:	e9 e8 00 00 00       	jmp    f01032b3 <initialize_disk_page_file+0x119>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f01031cb:	8b 0d d8 26 86 f0    	mov    0xf08626d8,%ecx
f01031d1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01031d4:	89 d0                	mov    %edx,%eax
f01031d6:	01 c0                	add    %eax,%eax
f01031d8:	01 d0                	add    %edx,%eax
f01031da:	c1 e0 03             	shl    $0x3,%eax
f01031dd:	01 c8                	add    %ecx,%eax
f01031df:	83 ec 0c             	sub    $0xc,%esp
f01031e2:	50                   	push   %eax
f01031e3:	e8 cd 36 00 00       	call   f01068b5 <initialize_frame_info>
f01031e8:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
f01031eb:	8b 0d d8 26 86 f0    	mov    0xf08626d8,%ecx
f01031f1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01031f4:	89 d0                	mov    %edx,%eax
f01031f6:	01 c0                	add    %eax,%eax
f01031f8:	01 d0                	add    %edx,%eax
f01031fa:	c1 e0 03             	shl    $0x3,%eax
f01031fd:	01 c8                	add    %ecx,%eax
f01031ff:	85 c0                	test   %eax,%eax
f0103201:	75 14                	jne    f0103217 <initialize_disk_page_file+0x7d>
f0103203:	83 ec 04             	sub    $0x4,%esp
f0103206:	68 b0 57 13 f0       	push   $0xf01357b0
f010320b:	6a 59                	push   $0x59
f010320d:	68 93 57 13 f0       	push   $0xf0135793
f0103212:	e8 ee cf ff ff       	call   f0100205 <_panic>
f0103217:	8b 0d d8 26 86 f0    	mov    0xf08626d8,%ecx
f010321d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103220:	89 d0                	mov    %edx,%eax
f0103222:	01 c0                	add    %eax,%eax
f0103224:	01 d0                	add    %edx,%eax
f0103226:	c1 e0 03             	shl    $0x3,%eax
f0103229:	01 c8                	add    %ecx,%eax
f010322b:	8b 15 b4 27 86 f0    	mov    0xf08627b4,%edx
f0103231:	89 10                	mov    %edx,(%eax)
f0103233:	8b 00                	mov    (%eax),%eax
f0103235:	85 c0                	test   %eax,%eax
f0103237:	74 1f                	je     f0103258 <initialize_disk_page_file+0xbe>
f0103239:	8b 15 b4 27 86 f0    	mov    0xf08627b4,%edx
f010323f:	8b 1d d8 26 86 f0    	mov    0xf08626d8,%ebx
f0103245:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0103248:	89 c8                	mov    %ecx,%eax
f010324a:	01 c0                	add    %eax,%eax
f010324c:	01 c8                	add    %ecx,%eax
f010324e:	c1 e0 03             	shl    $0x3,%eax
f0103251:	01 d8                	add    %ebx,%eax
f0103253:	89 42 04             	mov    %eax,0x4(%edx)
f0103256:	eb 19                	jmp    f0103271 <initialize_disk_page_file+0xd7>
f0103258:	8b 0d d8 26 86 f0    	mov    0xf08626d8,%ecx
f010325e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103261:	89 d0                	mov    %edx,%eax
f0103263:	01 c0                	add    %eax,%eax
f0103265:	01 d0                	add    %edx,%eax
f0103267:	c1 e0 03             	shl    $0x3,%eax
f010326a:	01 c8                	add    %ecx,%eax
f010326c:	a3 b8 27 86 f0       	mov    %eax,0xf08627b8
f0103271:	8b 0d d8 26 86 f0    	mov    0xf08626d8,%ecx
f0103277:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010327a:	89 d0                	mov    %edx,%eax
f010327c:	01 c0                	add    %eax,%eax
f010327e:	01 d0                	add    %edx,%eax
f0103280:	c1 e0 03             	shl    $0x3,%eax
f0103283:	01 c8                	add    %ecx,%eax
f0103285:	a3 b4 27 86 f0       	mov    %eax,0xf08627b4
f010328a:	8b 0d d8 26 86 f0    	mov    0xf08626d8,%ecx
f0103290:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103293:	89 d0                	mov    %edx,%eax
f0103295:	01 c0                	add    %eax,%eax
f0103297:	01 d0                	add    %edx,%eax
f0103299:	c1 e0 03             	shl    $0x3,%eax
f010329c:	01 c8                	add    %ecx,%eax
f010329e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01032a5:	a1 c0 27 86 f0       	mov    0xf08627c0,%eax
f01032aa:	40                   	inc    %eax
f01032ab:	a3 c0 27 86 f0       	mov    %eax,0xf08627c0
{
	int i;
	LIST_INIT(&disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f01032b0:	ff 45 f4             	incl   -0xc(%ebp)
f01032b3:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f01032ba:	0f 8e 0b ff ff ff    	jle    f01031cb <initialize_disk_page_file+0x31>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
	}
}
f01032c0:	90                   	nop
f01032c1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01032c4:	c9                   	leave  
f01032c5:	c3                   	ret    

f01032c6 <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct FrameInfo *ptr_frame_info)
{
f01032c6:	55                   	push   %ebp
f01032c7:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f01032c9:	8b 45 08             	mov    0x8(%ebp),%eax
f01032cc:	8b 15 d8 26 86 f0    	mov    0xf08626d8,%edx
f01032d2:	29 d0                	sub    %edx,%eax
f01032d4:	c1 f8 03             	sar    $0x3,%eax
f01032d7:	89 c2                	mov    %eax,%edx
f01032d9:	89 d0                	mov    %edx,%eax
f01032db:	c1 e0 02             	shl    $0x2,%eax
f01032de:	01 d0                	add    %edx,%eax
f01032e0:	c1 e0 02             	shl    $0x2,%eax
f01032e3:	01 d0                	add    %edx,%eax
f01032e5:	c1 e0 02             	shl    $0x2,%eax
f01032e8:	01 d0                	add    %edx,%eax
f01032ea:	89 c1                	mov    %eax,%ecx
f01032ec:	c1 e1 08             	shl    $0x8,%ecx
f01032ef:	01 c8                	add    %ecx,%eax
f01032f1:	89 c1                	mov    %eax,%ecx
f01032f3:	c1 e1 10             	shl    $0x10,%ecx
f01032f6:	01 c8                	add    %ecx,%eax
f01032f8:	01 c0                	add    %eax,%eax
f01032fa:	01 d0                	add    %edx,%eax
}
f01032fc:	5d                   	pop    %ebp
f01032fd:	c3                   	ret    

f01032fe <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f01032fe:	55                   	push   %ebp
f01032ff:	89 e5                	mov    %esp,%ebp
f0103301:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	struct FrameInfo *ptr_frame_info = LIST_FIRST(&disk_free_frame_list);
f0103304:	a1 b4 27 86 f0       	mov    0xf08627b4,%eax
f0103309:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_frame_info == NULL)
f010330c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103310:	75 0a                	jne    f010331c <allocate_disk_frame+0x1e>
		return E_NO_PAGE_FILE_SPACE;
f0103312:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103317:	e9 a7 00 00 00       	jmp    f01033c3 <allocate_disk_frame+0xc5>

	LIST_REMOVE(&disk_free_frame_list, ptr_frame_info);
f010331c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103320:	75 14                	jne    f0103336 <allocate_disk_frame+0x38>
f0103322:	83 ec 04             	sub    $0x4,%esp
f0103325:	68 d3 57 13 f0       	push   $0xf01357d3
f010332a:	6a 78                	push   $0x78
f010332c:	68 93 57 13 f0       	push   $0xf0135793
f0103331:	e8 cf ce ff ff       	call   f0100205 <_panic>
f0103336:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103339:	8b 00                	mov    (%eax),%eax
f010333b:	85 c0                	test   %eax,%eax
f010333d:	74 10                	je     f010334f <allocate_disk_frame+0x51>
f010333f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103342:	8b 00                	mov    (%eax),%eax
f0103344:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103347:	8b 52 04             	mov    0x4(%edx),%edx
f010334a:	89 50 04             	mov    %edx,0x4(%eax)
f010334d:	eb 0b                	jmp    f010335a <allocate_disk_frame+0x5c>
f010334f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103352:	8b 40 04             	mov    0x4(%eax),%eax
f0103355:	a3 b8 27 86 f0       	mov    %eax,0xf08627b8
f010335a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010335d:	8b 40 04             	mov    0x4(%eax),%eax
f0103360:	85 c0                	test   %eax,%eax
f0103362:	74 0f                	je     f0103373 <allocate_disk_frame+0x75>
f0103364:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103367:	8b 40 04             	mov    0x4(%eax),%eax
f010336a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010336d:	8b 12                	mov    (%edx),%edx
f010336f:	89 10                	mov    %edx,(%eax)
f0103371:	eb 0a                	jmp    f010337d <allocate_disk_frame+0x7f>
f0103373:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103376:	8b 00                	mov    (%eax),%eax
f0103378:	a3 b4 27 86 f0       	mov    %eax,0xf08627b4
f010337d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103380:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0103386:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103389:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103390:	a1 c0 27 86 f0       	mov    0xf08627c0,%eax
f0103395:	48                   	dec    %eax
f0103396:	a3 c0 27 86 f0       	mov    %eax,0xf08627c0
	initialize_frame_info(ptr_frame_info);
f010339b:	83 ec 0c             	sub    $0xc,%esp
f010339e:	ff 75 f4             	pushl  -0xc(%ebp)
f01033a1:	e8 0f 35 00 00       	call   f01068b5 <initialize_frame_info>
f01033a6:	83 c4 10             	add    $0x10,%esp
	*dfn = to_disk_frame_number(ptr_frame_info);
f01033a9:	83 ec 0c             	sub    $0xc,%esp
f01033ac:	ff 75 f4             	pushl  -0xc(%ebp)
f01033af:	e8 12 ff ff ff       	call   f01032c6 <to_disk_frame_number>
f01033b4:	83 c4 10             	add    $0x10,%esp
f01033b7:	89 c2                	mov    %eax,%edx
f01033b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01033bc:	89 10                	mov    %edx,(%eax)
	return 0;
f01033be:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01033c3:	c9                   	leave  
f01033c4:	c3                   	ret    

f01033c5 <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f01033c5:	55                   	push   %ebp
f01033c6:	89 e5                	mov    %esp,%ebp
f01033c8:	53                   	push   %ebx
f01033c9:	83 ec 04             	sub    $0x4,%esp
	// Fill this function in
	if(dfn == 0) return;
f01033cc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01033d0:	0f 84 ca 00 00 00    	je     f01034a0 <free_disk_frame+0xdb>
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
f01033d6:	8b 0d d8 26 86 f0    	mov    0xf08626d8,%ecx
f01033dc:	8b 55 08             	mov    0x8(%ebp),%edx
f01033df:	89 d0                	mov    %edx,%eax
f01033e1:	01 c0                	add    %eax,%eax
f01033e3:	01 d0                	add    %edx,%eax
f01033e5:	c1 e0 03             	shl    $0x3,%eax
f01033e8:	01 c8                	add    %ecx,%eax
f01033ea:	85 c0                	test   %eax,%eax
f01033ec:	75 17                	jne    f0103405 <free_disk_frame+0x40>
f01033ee:	83 ec 04             	sub    $0x4,%esp
f01033f1:	68 b0 57 13 f0       	push   $0xf01357b0
f01033f6:	68 85 00 00 00       	push   $0x85
f01033fb:	68 93 57 13 f0       	push   $0xf0135793
f0103400:	e8 00 ce ff ff       	call   f0100205 <_panic>
f0103405:	8b 0d d8 26 86 f0    	mov    0xf08626d8,%ecx
f010340b:	8b 55 08             	mov    0x8(%ebp),%edx
f010340e:	89 d0                	mov    %edx,%eax
f0103410:	01 c0                	add    %eax,%eax
f0103412:	01 d0                	add    %edx,%eax
f0103414:	c1 e0 03             	shl    $0x3,%eax
f0103417:	01 c8                	add    %ecx,%eax
f0103419:	8b 15 b4 27 86 f0    	mov    0xf08627b4,%edx
f010341f:	89 10                	mov    %edx,(%eax)
f0103421:	8b 00                	mov    (%eax),%eax
f0103423:	85 c0                	test   %eax,%eax
f0103425:	74 1f                	je     f0103446 <free_disk_frame+0x81>
f0103427:	8b 15 b4 27 86 f0    	mov    0xf08627b4,%edx
f010342d:	8b 1d d8 26 86 f0    	mov    0xf08626d8,%ebx
f0103433:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0103436:	89 c8                	mov    %ecx,%eax
f0103438:	01 c0                	add    %eax,%eax
f010343a:	01 c8                	add    %ecx,%eax
f010343c:	c1 e0 03             	shl    $0x3,%eax
f010343f:	01 d8                	add    %ebx,%eax
f0103441:	89 42 04             	mov    %eax,0x4(%edx)
f0103444:	eb 19                	jmp    f010345f <free_disk_frame+0x9a>
f0103446:	8b 0d d8 26 86 f0    	mov    0xf08626d8,%ecx
f010344c:	8b 55 08             	mov    0x8(%ebp),%edx
f010344f:	89 d0                	mov    %edx,%eax
f0103451:	01 c0                	add    %eax,%eax
f0103453:	01 d0                	add    %edx,%eax
f0103455:	c1 e0 03             	shl    $0x3,%eax
f0103458:	01 c8                	add    %ecx,%eax
f010345a:	a3 b8 27 86 f0       	mov    %eax,0xf08627b8
f010345f:	8b 0d d8 26 86 f0    	mov    0xf08626d8,%ecx
f0103465:	8b 55 08             	mov    0x8(%ebp),%edx
f0103468:	89 d0                	mov    %edx,%eax
f010346a:	01 c0                	add    %eax,%eax
f010346c:	01 d0                	add    %edx,%eax
f010346e:	c1 e0 03             	shl    $0x3,%eax
f0103471:	01 c8                	add    %ecx,%eax
f0103473:	a3 b4 27 86 f0       	mov    %eax,0xf08627b4
f0103478:	8b 0d d8 26 86 f0    	mov    0xf08626d8,%ecx
f010347e:	8b 55 08             	mov    0x8(%ebp),%edx
f0103481:	89 d0                	mov    %edx,%eax
f0103483:	01 c0                	add    %eax,%eax
f0103485:	01 d0                	add    %edx,%eax
f0103487:	c1 e0 03             	shl    $0x3,%eax
f010348a:	01 c8                	add    %ecx,%eax
f010348c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103493:	a1 c0 27 86 f0       	mov    0xf08627c0,%eax
f0103498:	40                   	inc    %eax
f0103499:	a3 c0 27 86 f0       	mov    %eax,0xf08627c0
f010349e:	eb 01                	jmp    f01034a1 <free_disk_frame+0xdc>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f01034a0:	90                   	nop
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
}
f01034a1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01034a4:	c9                   	leave  
f01034a5:	c3                   	ret    

f01034a6 <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const uint32 virtual_address, int create, uint32 **ptr_disk_page_table)
{
f01034a6:	55                   	push   %ebp
f01034a7:	89 e5                	mov    %esp,%ebp
f01034a9:	53                   	push   %ebx
f01034aa:	83 ec 14             	sub    $0x14,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f01034ad:	8b 45 0c             	mov    0xc(%ebp),%eax
f01034b0:	c1 e8 16             	shr    $0x16,%eax
f01034b3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01034ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01034bd:	01 d0                	add    %edx,%eax
f01034bf:	8b 00                	mov    (%eax),%eax
f01034c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f01034c4:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f01034cb:	77 1d                	ja     f01034ea <get_disk_page_table+0x44>
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
f01034cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01034d0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01034d5:	83 ec 0c             	sub    $0xc,%esp
f01034d8:	50                   	push   %eax
f01034d9:	e8 ce 47 00 00       	call   f0107cac <kheap_virtual_address>
f01034de:	83 c4 10             	add    $0x10,%esp
f01034e1:	89 c2                	mov    %eax,%edx
f01034e3:	8b 45 14             	mov    0x14(%ebp),%eax
f01034e6:	89 10                	mov    %edx,(%eax)
f01034e8:	eb 44                	jmp    f010352e <get_disk_page_table+0x88>
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f01034ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01034ed:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01034f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01034f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01034f8:	c1 e8 0c             	shr    $0xc,%eax
f01034fb:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01034fe:	a1 0c 27 86 f0       	mov    0xf086270c,%eax
f0103503:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103506:	72 17                	jb     f010351f <get_disk_page_table+0x79>
f0103508:	ff 75 f0             	pushl  -0x10(%ebp)
f010350b:	68 f4 57 13 f0       	push   $0xf01357f4
f0103510:	68 92 00 00 00       	push   $0x92
f0103515:	68 93 57 13 f0       	push   $0xf0135793
f010351a:	e8 e6 cc ff ff       	call   f0100205 <_panic>
f010351f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103522:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103527:	89 c2                	mov    %eax,%edx
f0103529:	8b 45 14             	mov    0x14(%ebp),%eax
f010352c:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f010352e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103532:	0f 85 80 00 00 00    	jne    f01035b8 <get_disk_page_table+0x112>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f0103538:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f010353c:	74 6a                	je     f01035a8 <get_disk_page_table+0x102>
		{

#if USE_KHEAP
			{
				*ptr_disk_page_table = (uint32*)kmalloc(PAGE_SIZE);
f010353e:	83 ec 0c             	sub    $0xc,%esp
f0103541:	68 00 10 00 00       	push   $0x1000
f0103546:	e8 16 45 00 00       	call   f0107a61 <kmalloc>
f010354b:	83 c4 10             	add    $0x10,%esp
f010354e:	89 c2                	mov    %eax,%edx
f0103550:	8b 45 14             	mov    0x14(%ebp),%eax
f0103553:	89 10                	mov    %edx,(%eax)
				if(*ptr_disk_page_table == NULL)
f0103555:	8b 45 14             	mov    0x14(%ebp),%eax
f0103558:	8b 00                	mov    (%eax),%eax
f010355a:	85 c0                	test   %eax,%eax
f010355c:	75 07                	jne    f0103565 <get_disk_page_table+0xbf>
				{
					return E_NO_VM;
f010355e:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103563:	eb 58                	jmp    f01035bd <get_disk_page_table+0x117>
				}
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f0103565:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103568:	c1 e8 16             	shr    $0x16,%eax
f010356b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103572:	8b 45 08             	mov    0x8(%ebp),%eax
f0103575:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f0103578:	8b 45 14             	mov    0x14(%ebp),%eax
f010357b:	8b 00                	mov    (%eax),%eax
f010357d:	83 ec 0c             	sub    $0xc,%esp
f0103580:	50                   	push   %eax
f0103581:	e8 45 47 00 00       	call   f0107ccb <kheap_physical_address>
f0103586:	83 c4 10             	add    $0x10,%esp
f0103589:	83 c8 01             	or     $0x1,%eax
f010358c:	89 03                	mov    %eax,(%ebx)
				ptr_frame_info->references = 1;
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
			}
#endif
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f010358e:	8b 45 14             	mov    0x14(%ebp),%eax
f0103591:	8b 00                	mov    (%eax),%eax
f0103593:	83 ec 04             	sub    $0x4,%esp
f0103596:	68 00 10 00 00       	push   $0x1000
f010359b:	6a 00                	push   $0x0
f010359d:	50                   	push   %eax
f010359e:	e8 53 e2 02 00       	call   f01317f6 <memset>
f01035a3:	83 c4 10             	add    $0x10,%esp
f01035a6:	eb 10                	jmp    f01035b8 <get_disk_page_table+0x112>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f01035a8:	8b 45 14             	mov    0x14(%ebp),%eax
f01035ab:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f01035b1:	b8 00 00 00 00       	mov    $0x0,%eax
f01035b6:	eb 05                	jmp    f01035bd <get_disk_page_table+0x117>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f01035b8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01035bd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01035c0:	c9                   	leave  
f01035c1:	c3                   	ret    

f01035c2 <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f01035c2:	55                   	push   %ebp
f01035c3:	89 e5                	mov    %esp,%ebp
f01035c5:	83 ec 28             	sub    $0x28,%esp
f01035c8:	8b 45 10             	mov    0x10(%ebp),%eax
f01035cb:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f01035ce:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f01035d2:	74 75                	je     f0103649 <pf_add_empty_env_page+0x87>
	{
		//2020
		if (virtual_address > USTACKBOTTOM && virtual_address < USTACKTOP - ptr_env->initNumStackPages * PAGE_SIZE)
f01035d4:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f01035db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01035de:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f01035e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01035e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01035e9:	ba 00 00 00 00       	mov    $0x0,%edx
f01035ee:	f7 75 f4             	divl   -0xc(%ebp)
f01035f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01035f4:	29 d0                	sub    %edx,%eax
f01035f6:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01035f9:	73 32                	jae    f010362d <pf_add_empty_env_page+0x6b>
f01035fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01035fe:	8b 90 58 05 00 00    	mov    0x558(%eax),%edx
f0103604:	b8 00 00 00 00       	mov    $0x0,%eax
f0103609:	29 d0                	sub    %edx,%eax
f010360b:	c1 e0 0c             	shl    $0xc,%eax
f010360e:	2d 00 20 40 11       	sub    $0x11402000,%eax
f0103613:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103616:	76 15                	jbe    f010362d <pf_add_empty_env_page+0x6b>
			ptr_env->nNewPageAdded++ ;
f0103618:	8b 45 08             	mov    0x8(%ebp),%eax
f010361b:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f0103621:	8d 50 01             	lea    0x1(%eax),%edx
f0103624:	8b 45 08             	mov    0x8(%ebp),%eax
f0103627:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
		//======================
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f010362d:	a1 5c 27 86 f0       	mov    0xf086275c,%eax
f0103632:	83 ec 04             	sub    $0x4,%esp
f0103635:	50                   	push   %eax
f0103636:	ff 75 0c             	pushl  0xc(%ebp)
f0103639:	ff 75 08             	pushl  0x8(%ebp)
f010363c:	e8 b2 00 00 00       	call   f01036f3 <pf_add_env_page>
f0103641:	83 c4 10             	add    $0x10,%esp
f0103644:	e9 a8 00 00 00       	jmp    f01036f1 <pf_add_empty_env_page+0x12f>
	}

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f0103649:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103650:	76 19                	jbe    f010366b <pf_add_empty_env_page+0xa9>
f0103652:	68 24 58 13 f0       	push   $0xf0135824
f0103657:	68 4a 58 13 f0       	push   $0xf013584a
f010365c:	68 d1 00 00 00       	push   $0xd1
f0103661:	68 93 57 13 f0       	push   $0xf0135793
f0103666:	e8 9a cb ff ff       	call   f0100205 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010366b:	8b 45 08             	mov    0x8(%ebp),%eax
f010366e:	83 c0 64             	add    $0x64,%eax
f0103671:	83 ec 08             	sub    $0x8,%esp
f0103674:	50                   	push   %eax
f0103675:	ff 75 08             	pushl  0x8(%ebp)
f0103678:	e8 10 06 00 00       	call   f0103c8d <get_disk_page_directory>
f010367d:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0103680:	8b 45 08             	mov    0x8(%ebp),%eax
f0103683:	8b 40 64             	mov    0x64(%eax),%eax
f0103686:	8d 55 ec             	lea    -0x14(%ebp),%edx
f0103689:	52                   	push   %edx
f010368a:	6a 01                	push   $0x1
f010368c:	ff 75 0c             	pushl  0xc(%ebp)
f010368f:	50                   	push   %eax
f0103690:	e8 11 fe ff ff       	call   f01034a6 <get_disk_page_table>
f0103695:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103698:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010369b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010369e:	c1 ea 0c             	shr    $0xc,%edx
f01036a1:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01036a7:	c1 e2 02             	shl    $0x2,%edx
f01036aa:	01 d0                	add    %edx,%eax
f01036ac:	8b 00                	mov    (%eax),%eax
f01036ae:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if( dfn == 0)
f01036b1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01036b4:	85 c0                	test   %eax,%eax
f01036b6:	75 34                	jne    f01036ec <pf_add_empty_env_page+0x12a>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f01036b8:	83 ec 0c             	sub    $0xc,%esp
f01036bb:	8d 45 e8             	lea    -0x18(%ebp),%eax
f01036be:	50                   	push   %eax
f01036bf:	e8 3a fc ff ff       	call   f01032fe <allocate_disk_frame>
f01036c4:	83 c4 10             	add    $0x10,%esp
f01036c7:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01036ca:	75 07                	jne    f01036d3 <pf_add_empty_env_page+0x111>
f01036cc:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01036d1:	eb 1e                	jmp    f01036f1 <pf_add_empty_env_page+0x12f>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f01036d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01036d6:	8b 55 0c             	mov    0xc(%ebp),%edx
f01036d9:	c1 ea 0c             	shr    $0xc,%edx
f01036dc:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01036e2:	c1 e2 02             	shl    $0x2,%edx
f01036e5:	01 c2                	add    %eax,%edx
f01036e7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01036ea:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f01036ec:	b8 00 00 00 00       	mov    $0x0,%eax

}
f01036f1:	c9                   	leave  
f01036f2:	c3                   	ret    

f01036f3 <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f01036f3:	55                   	push   %ebp
f01036f4:	89 e5                	mov    %esp,%ebp
f01036f6:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f01036f9:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103700:	76 19                	jbe    f010371b <pf_add_env_page+0x28>
f0103702:	68 24 58 13 f0       	push   $0xf0135824
f0103707:	68 4a 58 13 f0       	push   $0xf013584a
f010370c:	68 e6 00 00 00       	push   $0xe6
f0103711:	68 93 57 13 f0       	push   $0xf0135793
f0103716:	e8 ea ca ff ff       	call   f0100205 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010371b:	8b 45 08             	mov    0x8(%ebp),%eax
f010371e:	83 c0 64             	add    $0x64,%eax
f0103721:	83 ec 08             	sub    $0x8,%esp
f0103724:	50                   	push   %eax
f0103725:	ff 75 08             	pushl  0x8(%ebp)
f0103728:	e8 60 05 00 00       	call   f0103c8d <get_disk_page_directory>
f010372d:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0103730:	8b 45 08             	mov    0x8(%ebp),%eax
f0103733:	8b 40 64             	mov    0x64(%eax),%eax
f0103736:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0103739:	52                   	push   %edx
f010373a:	6a 01                	push   $0x1
f010373c:	ff 75 0c             	pushl  0xc(%ebp)
f010373f:	50                   	push   %eax
f0103740:	e8 61 fd ff ff       	call   f01034a6 <get_disk_page_table>
f0103745:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103748:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010374b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010374e:	c1 ea 0c             	shr    $0xc,%edx
f0103751:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103757:	c1 e2 02             	shl    $0x2,%edx
f010375a:	01 d0                	add    %edx,%eax
f010375c:	8b 00                	mov    (%eax),%eax
f010375e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f0103761:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103764:	85 c0                	test   %eax,%eax
f0103766:	75 34                	jne    f010379c <pf_add_env_page+0xa9>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103768:	83 ec 0c             	sub    $0xc,%esp
f010376b:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010376e:	50                   	push   %eax
f010376f:	e8 8a fb ff ff       	call   f01032fe <allocate_disk_frame>
f0103774:	83 c4 10             	add    $0x10,%esp
f0103777:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010377a:	75 07                	jne    f0103783 <pf_add_env_page+0x90>
f010377c:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103781:	eb 31                	jmp    f01037b4 <pf_add_env_page+0xc1>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f0103783:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103786:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103789:	c1 ea 0c             	shr    $0xc,%edx
f010378c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103792:	c1 e2 02             	shl    $0x2,%edx
f0103795:	01 c2                	add    %eax,%edx
f0103797:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010379a:	89 02                	mov    %eax,(%edx)
	//	uint32 oldDir = rcr3();
	//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
	//	int ret = write_disk_page(dfn, (void*)dataSrc);
	//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f010379c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010379f:	83 ec 08             	sub    $0x8,%esp
f01037a2:	ff 75 10             	pushl  0x10(%ebp)
f01037a5:	50                   	push   %eax
f01037a6:	e8 a6 f9 ff ff       	call   f0103151 <write_disk_page>
f01037ab:	83 c4 10             	add    $0x10,%esp
f01037ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f01037b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01037b4:	c9                   	leave  
f01037b5:	c3                   	ret    

f01037b6 <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, uint32 virtual_address, struct FrameInfo* modified_page_frame_info)
{
f01037b6:	55                   	push   %ebp
f01037b7:	89 e5                	mov    %esp,%ebp
f01037b9:	83 ec 38             	sub    $0x38,%esp
	int ret;
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f01037bc:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f01037c3:	76 19                	jbe    f01037de <pf_update_env_page+0x28>
f01037c5:	68 24 58 13 f0       	push   $0xf0135824
f01037ca:	68 4a 58 13 f0       	push   $0xf013584a
f01037cf:	68 08 01 00 00       	push   $0x108
f01037d4:	68 93 57 13 f0       	push   $0xf0135793
f01037d9:	e8 27 ca ff ff       	call   f0100205 <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f01037de:	8b 45 08             	mov    0x8(%ebp),%eax
f01037e1:	83 c0 64             	add    $0x64,%eax
f01037e4:	83 ec 08             	sub    $0x8,%esp
f01037e7:	50                   	push   %eax
f01037e8:	ff 75 08             	pushl  0x8(%ebp)
f01037eb:	e8 9d 04 00 00       	call   f0103c8d <get_disk_page_directory>
f01037f0:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f01037f3:	8b 45 08             	mov    0x8(%ebp),%eax
f01037f6:	8b 40 64             	mov    0x64(%eax),%eax
f01037f9:	8d 55 d8             	lea    -0x28(%ebp),%edx
f01037fc:	52                   	push   %edx
f01037fd:	6a 00                	push   $0x0
f01037ff:	ff 75 0c             	pushl  0xc(%ebp)
f0103802:	50                   	push   %eax
f0103803:	e8 9e fc ff ff       	call   f01034a6 <get_disk_page_table>
f0103808:	83 c4 10             	add    $0x10,%esp

	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
f010380b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010380e:	85 c0                	test   %eax,%eax
f0103810:	74 29                	je     f010383b <pf_update_env_page+0x85>
f0103812:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103815:	85 c0                	test   %eax,%eax
f0103817:	0f 84 43 01 00 00    	je     f0103960 <pf_update_env_page+0x1aa>
f010381d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103820:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103823:	c1 ea 0c             	shr    $0xc,%edx
f0103826:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010382c:	c1 e2 02             	shl    $0x2,%edx
f010382f:	01 d0                	add    %edx,%eax
f0103831:	8b 00                	mov    (%eax),%eax
f0103833:	85 c0                	test   %eax,%eax
f0103835:	0f 85 25 01 00 00    	jne    f0103960 <pf_update_env_page+0x1aa>
	{
		uint32 VA = (uint32)virtual_address ;
f010383b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010383e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
f0103841:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103844:	85 c0                	test   %eax,%eax
f0103846:	79 09                	jns    f0103851 <pf_update_env_page+0x9b>
f0103848:	81 7d f4 ff ff ff 9f 	cmpl   $0x9fffffff,-0xc(%ebp)
f010384f:	76 38                	jbe    f0103889 <pf_update_env_page+0xd3>
f0103851:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0103858:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010385b:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103860:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103863:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103866:	ba 00 00 00 00       	mov    $0x0,%edx
f010386b:	f7 75 f0             	divl   -0x10(%ebp)
f010386e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103871:	29 d0                	sub    %edx,%eax
f0103873:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0103876:	0f 87 cd 00 00 00    	ja     f0103949 <pf_update_env_page+0x193>
f010387c:	81 7d f4 ff df bf ee 	cmpl   $0xeebfdfff,-0xc(%ebp)
f0103883:	0f 87 c0 00 00 00    	ja     f0103949 <pf_update_env_page+0x193>
		{
			uint32 *ptr_table ;
			struct FrameInfo* ptr_fi = get_frame_info(ptr_env->env_page_directory, virtual_address, &ptr_table);
f0103889:	8b 45 08             	mov    0x8(%ebp),%eax
f010388c:	8b 40 5c             	mov    0x5c(%eax),%eax
f010388f:	83 ec 04             	sub    $0x4,%esp
f0103892:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f0103895:	52                   	push   %edx
f0103896:	ff 75 0c             	pushl  0xc(%ebp)
f0103899:	50                   	push   %eax
f010389a:	e8 45 35 00 00       	call   f0106de4 <get_frame_info>
f010389f:	83 c4 10             	add    $0x10,%esp
f01038a2:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//if VA already mapped on the same modified_page_frame_info, then write it directly from the VA
			if (ptr_fi == modified_page_frame_info)
f01038a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01038a8:	3b 45 10             	cmp    0x10(%ebp),%eax
f01038ab:	75 52                	jne    f01038ff <pf_update_env_page+0x149>
			{
				ret = pf_add_env_page(ptr_env, VA, (void*)virtual_address) ;
f01038ad:	8b 45 0c             	mov    0xc(%ebp),%eax
f01038b0:	83 ec 04             	sub    $0x4,%esp
f01038b3:	50                   	push   %eax
f01038b4:	ff 75 f4             	pushl  -0xc(%ebp)
f01038b7:	ff 75 08             	pushl  0x8(%ebp)
f01038ba:	e8 34 fe ff ff       	call   f01036f3 <pf_add_env_page>
f01038bf:	83 c4 10             	add    $0x10,%esp
f01038c2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f01038c5:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f01038c9:	75 17                	jne    f01038e2 <pf_update_env_page+0x12c>
				{
					panic("pf_update_env_page: page file out of space!") ;
f01038cb:	83 ec 04             	sub    $0x4,%esp
f01038ce:	68 60 58 13 f0       	push   $0xf0135860
f01038d3:	68 1d 01 00 00       	push   $0x11d
f01038d8:	68 93 57 13 f0       	push   $0xf0135793
f01038dd:	e8 23 c9 ff ff       	call   f0100205 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f01038e2:	8b 45 08             	mov    0x8(%ebp),%eax
f01038e5:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f01038eb:	8d 50 01             	lea    0x1(%eax),%edx
f01038ee:	8b 45 08             	mov    0x8(%ebp),%eax
f01038f1:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
				return ret ;
f01038f7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01038fa:	e9 17 01 00 00       	jmp    f0103a16 <pf_update_env_page+0x260>
			}
			//Else, just add a new empty page to the page file, then update it with the given modified_page_frame_info in the below code
			else
			{
				ret = pf_add_empty_env_page(ptr_env, VA, 0);
f01038ff:	83 ec 04             	sub    $0x4,%esp
f0103902:	6a 00                	push   $0x0
f0103904:	ff 75 f4             	pushl  -0xc(%ebp)
f0103907:	ff 75 08             	pushl  0x8(%ebp)
f010390a:	e8 b3 fc ff ff       	call   f01035c2 <pf_add_empty_env_page>
f010390f:	83 c4 10             	add    $0x10,%esp
f0103912:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f0103915:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f0103919:	75 17                	jne    f0103932 <pf_update_env_page+0x17c>
				{
					panic("pf_update_env_page: attempt to add a new page, but page file out of space!") ;
f010391b:	83 ec 04             	sub    $0x4,%esp
f010391e:	68 8c 58 13 f0       	push   $0xf013588c
f0103923:	68 28 01 00 00       	push   $0x128
f0103928:	68 93 57 13 f0       	push   $0xf0135793
f010392d:	e8 d3 c8 ff ff       	call   f0100205 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f0103932:	8b 45 08             	mov    0x8(%ebp),%eax
f0103935:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f010393b:	8d 50 01             	lea    0x1(%eax),%edx
f010393e:	8b 45 08             	mov    0x8(%ebp),%eax
f0103941:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
	{
		uint32 VA = (uint32)virtual_address ;
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
		{
f0103947:	eb 17                	jmp    f0103960 <pf_update_env_page+0x1aa>
				ptr_env->nNewPageAdded++ ;
			}
		}
		else
		{
			panic("pf_update_env_page: Invalid Access - Attempt to add a new page to page file that's outside the USER HEAP and USER STACK!");
f0103949:	83 ec 04             	sub    $0x4,%esp
f010394c:	68 d8 58 13 f0       	push   $0xf01358d8
f0103951:	68 2f 01 00 00       	push   $0x12f
f0103956:	68 93 57 13 f0       	push   $0xf0135793
f010395b:	e8 a5 c8 ff ff       	call   f0100205 <_panic>
		}
	}
	//2022 END========================================

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103960:	8b 45 08             	mov    0x8(%ebp),%eax
f0103963:	8b 40 64             	mov    0x64(%eax),%eax
f0103966:	8d 55 d8             	lea    -0x28(%ebp),%edx
f0103969:	52                   	push   %edx
f010396a:	6a 00                	push   $0x0
f010396c:	ff 75 0c             	pushl  0xc(%ebp)
f010396f:	50                   	push   %eax
f0103970:	e8 31 fb ff ff       	call   f01034a6 <get_disk_page_table>
f0103975:	83 c4 10             	add    $0x10,%esp
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103978:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010397b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010397e:	c1 ea 0c             	shr    $0xc,%edx
f0103981:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103987:	c1 e2 02             	shl    $0x2,%edx
f010398a:	01 d0                	add    %edx,%eax
f010398c:	8b 00                	mov    (%eax),%eax
f010398e:	89 45 e0             	mov    %eax,-0x20(%ebp)
#if USE_KHEAP
	{
		//FIX: we should implement a better solution for this, but for now
		//		we are using an unused VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
		//		to do temp initialization of a frame.
		map_frame(ptr_env->env_page_directory, modified_page_frame_info, USER_LIMIT, 0);
f0103991:	8b 45 08             	mov    0x8(%ebp),%eax
f0103994:	8b 40 5c             	mov    0x5c(%eax),%eax
f0103997:	6a 00                	push   $0x0
f0103999:	68 00 00 80 ef       	push   $0xef800000
f010399e:	ff 75 10             	pushl  0x10(%ebp)
f01039a1:	50                   	push   %eax
f01039a2:	e8 78 33 00 00       	call   f0106d1f <map_frame>
f01039a7:	83 c4 10             	add    $0x10,%esp
		ret = write_disk_page(dfn, (void*)ROUNDDOWN(USER_LIMIT, PAGE_SIZE));
f01039aa:	c7 45 dc 00 00 80 ef 	movl   $0xef800000,-0x24(%ebp)
f01039b1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01039b4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01039b9:	83 ec 08             	sub    $0x8,%esp
f01039bc:	50                   	push   %eax
f01039bd:	ff 75 e0             	pushl  -0x20(%ebp)
f01039c0:	e8 8c f7 ff ff       	call   f0103151 <write_disk_page>
f01039c5:	83 c4 10             	add    $0x10,%esp
f01039c8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// TEMPORARILY increase the references to prevent unmap_frame from removing the frame
		modified_page_frame_info->references += 1;
f01039cb:	8b 45 10             	mov    0x10(%ebp),%eax
f01039ce:	8b 40 08             	mov    0x8(%eax),%eax
f01039d1:	40                   	inc    %eax
f01039d2:	8b 55 10             	mov    0x10(%ebp),%edx
f01039d5:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(ptr_env->env_page_directory, USER_LIMIT);
f01039d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01039dc:	8b 40 5c             	mov    0x5c(%eax),%eax
f01039df:	83 ec 08             	sub    $0x8,%esp
f01039e2:	68 00 00 80 ef       	push   $0xef800000
f01039e7:	50                   	push   %eax
f01039e8:	e8 67 34 00 00       	call   f0106e54 <unmap_frame>
f01039ed:	83 c4 10             	add    $0x10,%esp
		// Return it to its original status
		modified_page_frame_info->references -= 1;
f01039f0:	8b 45 10             	mov    0x10(%ebp),%eax
f01039f3:	8b 40 08             	mov    0x8(%eax),%eax
f01039f6:	48                   	dec    %eax
f01039f7:	8b 55 10             	mov    0x10(%ebp),%edx
f01039fa:	66 89 42 08          	mov    %ax,0x8(%edx)
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
#endif
	//2020
	ptr_env->nPageOut++ ;
f01039fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a01:	8b 80 50 05 00 00    	mov    0x550(%eax),%eax
f0103a07:	8d 50 01             	lea    0x1(%eax),%edx
f0103a0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a0d:	89 90 50 05 00 00    	mov    %edx,0x550(%eax)
	//======================

	return ret;
f0103a13:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f0103a16:	c9                   	leave  
f0103a17:	c3                   	ret    

f0103a18 <pf_read_env_page>:

int pf_read_env_page(struct Env* ptr_env, void* virtual_address)
{
f0103a18:	55                   	push   %ebp
f0103a19:	89 e5                	mov    %esp,%ebp
f0103a1b:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f0103a1e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103a21:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103a24:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103a27:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103a2c:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103a2f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a32:	8b 40 64             	mov    0x64(%eax),%eax
f0103a35:	85 c0                	test   %eax,%eax
f0103a37:	75 0a                	jne    f0103a43 <pf_read_env_page+0x2b>
f0103a39:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103a3e:	e9 90 00 00 00       	jmp    f0103ad3 <pf_read_env_page+0xbb>

	get_disk_page_table(ptr_env->disk_env_pgdir, (uint32) virtual_address, 0, &ptr_disk_page_table);
f0103a43:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103a46:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a49:	8b 40 64             	mov    0x64(%eax),%eax
f0103a4c:	8d 4d e8             	lea    -0x18(%ebp),%ecx
f0103a4f:	51                   	push   %ecx
f0103a50:	6a 00                	push   $0x0
f0103a52:	52                   	push   %edx
f0103a53:	50                   	push   %eax
f0103a54:	e8 4d fa ff ff       	call   f01034a6 <get_disk_page_table>
f0103a59:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103a5c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103a5f:	85 c0                	test   %eax,%eax
f0103a61:	75 07                	jne    f0103a6a <pf_read_env_page+0x52>
f0103a63:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103a68:	eb 69                	jmp    f0103ad3 <pf_read_env_page+0xbb>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103a6a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103a6d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103a70:	c1 ea 0c             	shr    $0xc,%edx
f0103a73:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103a79:	c1 e2 02             	shl    $0x2,%edx
f0103a7c:	01 d0                	add    %edx,%eax
f0103a7e:	8b 00                	mov    (%eax),%eax
f0103a80:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103a83:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103a87:	75 07                	jne    f0103a90 <pf_read_env_page+0x78>
f0103a89:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103a8e:	eb 43                	jmp    f0103ad3 <pf_read_env_page+0xbb>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f0103a90:	83 ec 08             	sub    $0x8,%esp
f0103a93:	ff 75 0c             	pushl  0xc(%ebp)
f0103a96:	ff 75 f0             	pushl  -0x10(%ebp)
f0103a99:	e8 84 f6 ff ff       	call   f0103122 <read_disk_page>
f0103a9e:	83 c4 10             	add    $0x10,%esp
f0103aa1:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(ptr_env->env_page_directory, (uint32)virtual_address, 0, PERM_MODIFIED);
f0103aa4:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103aa7:	8b 45 08             	mov    0x8(%ebp),%eax
f0103aaa:	8b 40 5c             	mov    0x5c(%eax),%eax
f0103aad:	6a 40                	push   $0x40
f0103aaf:	6a 00                	push   $0x0
f0103ab1:	52                   	push   %edx
f0103ab2:	50                   	push   %eax
f0103ab3:	e8 a9 42 00 00       	call   f0107d61 <pt_set_page_permissions>
f0103ab8:	83 c4 10             	add    $0x10,%esp

	//2020
	ptr_env->nPageIn++ ;
f0103abb:	8b 45 08             	mov    0x8(%ebp),%eax
f0103abe:	8b 80 4c 05 00 00    	mov    0x54c(%eax),%eax
f0103ac4:	8d 50 01             	lea    0x1(%eax),%edx
f0103ac7:	8b 45 08             	mov    0x8(%ebp),%eax
f0103aca:	89 90 4c 05 00 00    	mov    %edx,0x54c(%eax)
	//======================

	return disk_read_error;
f0103ad0:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f0103ad3:	c9                   	leave  
f0103ad4:	c3                   	ret    

f0103ad5 <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f0103ad5:	55                   	push   %ebp
f0103ad6:	89 e5                	mov    %esp,%ebp
f0103ad8:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103adb:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ade:	8b 40 64             	mov    0x64(%eax),%eax
f0103ae1:	85 c0                	test   %eax,%eax
f0103ae3:	74 62                	je     f0103b47 <pf_remove_env_page+0x72>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103ae5:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ae8:	8b 40 64             	mov    0x64(%eax),%eax
f0103aeb:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0103aee:	52                   	push   %edx
f0103aef:	6a 00                	push   $0x0
f0103af1:	ff 75 0c             	pushl  0xc(%ebp)
f0103af4:	50                   	push   %eax
f0103af5:	e8 ac f9 ff ff       	call   f01034a6 <get_disk_page_table>
f0103afa:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f0103afd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b00:	85 c0                	test   %eax,%eax
f0103b02:	74 46                	je     f0103b4a <pf_remove_env_page+0x75>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103b04:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b07:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103b0a:	c1 ea 0c             	shr    $0xc,%edx
f0103b0d:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103b13:	c1 e2 02             	shl    $0x2,%edx
f0103b16:	01 d0                	add    %edx,%eax
f0103b18:	8b 00                	mov    (%eax),%eax
f0103b1a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f0103b1d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b20:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103b23:	c1 ea 0c             	shr    $0xc,%edx
f0103b26:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103b2c:	c1 e2 02             	shl    $0x2,%edx
f0103b2f:	01 d0                	add    %edx,%eax
f0103b31:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0103b37:	83 ec 0c             	sub    $0xc,%esp
f0103b3a:	ff 75 f4             	pushl  -0xc(%ebp)
f0103b3d:	e8 83 f8 ff ff       	call   f01033c5 <free_disk_frame>
f0103b42:	83 c4 10             	add    $0x10,%esp
f0103b45:	eb 04                	jmp    f0103b4b <pf_remove_env_page+0x76>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103b47:	90                   	nop
f0103b48:	eb 01                	jmp    f0103b4b <pf_remove_env_page+0x76>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f0103b4a:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103b4b:	c9                   	leave  
f0103b4c:	c3                   	ret    

f0103b4d <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f0103b4d:	55                   	push   %ebp
f0103b4e:	89 e5                	mov    %esp,%ebp
f0103b50:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103b53:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103b5a:	e9 b8 00 00 00       	jmp    f0103c17 <pf_free_env+0xca>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f0103b5f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b62:	8b 40 64             	mov    0x64(%eax),%eax
f0103b65:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103b68:	c1 e2 02             	shl    $0x2,%edx
f0103b6b:	01 d0                	add    %edx,%eax
f0103b6d:	8b 00                	mov    (%eax),%eax
f0103b6f:	83 e0 01             	and    $0x1,%eax
f0103b72:	85 c0                	test   %eax,%eax
f0103b74:	0f 84 99 00 00 00    	je     f0103c13 <pf_free_env+0xc6>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f0103b7a:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b7d:	8b 40 64             	mov    0x64(%eax),%eax
f0103b80:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103b83:	c1 e2 02             	shl    $0x2,%edx
f0103b86:	01 d0                	add    %edx,%eax
f0103b88:	8b 00                	mov    (%eax),%eax
f0103b8a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103b8f:	89 45 ec             	mov    %eax,-0x14(%ebp)
		uint32 *pt;
#if USE_KHEAP
		{
			pt = (uint32*) kheap_virtual_address(pa);
f0103b92:	83 ec 0c             	sub    $0xc,%esp
f0103b95:	ff 75 ec             	pushl  -0x14(%ebp)
f0103b98:	e8 0f 41 00 00       	call   f0107cac <kheap_virtual_address>
f0103b9d:	83 c4 10             	add    $0x10,%esp
f0103ba0:	89 45 e8             	mov    %eax,-0x18(%ebp)
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103ba3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0103baa:	eb 3a                	jmp    f0103be6 <pf_free_env+0x99>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f0103bac:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103baf:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103bb6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103bb9:	01 d0                	add    %edx,%eax
f0103bbb:	8b 00                	mov    (%eax),%eax
f0103bbd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			pt[pteno] = 0;
f0103bc0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103bc3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103bca:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103bcd:	01 d0                	add    %edx,%eax
f0103bcf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f0103bd5:	83 ec 0c             	sub    $0xc,%esp
f0103bd8:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103bdb:	e8 e5 f7 ff ff       	call   f01033c5 <free_disk_frame>
f0103be0:	83 c4 10             	add    $0x10,%esp
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103be3:	ff 45 f0             	incl   -0x10(%ebp)
f0103be6:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f0103bed:	76 bd                	jbe    f0103bac <pf_free_env+0x5f>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f0103bef:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bf2:	8b 40 64             	mov    0x64(%eax),%eax
f0103bf5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103bf8:	c1 e2 02             	shl    $0x2,%edx
f0103bfb:	01 d0                	add    %edx,%eax
f0103bfd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
#if USE_KHEAP
		{
			kfree(pt);
f0103c03:	83 ec 0c             	sub    $0xc,%esp
f0103c06:	ff 75 e8             	pushl  -0x18(%ebp)
f0103c09:	e8 69 3f 00 00       	call   f0107b77 <kfree>
f0103c0e:	83 c4 10             	add    $0x10,%esp
f0103c11:	eb 01                	jmp    f0103c14 <pf_free_env+0xc7>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f0103c13:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103c14:	ff 45 f4             	incl   -0xc(%ebp)
f0103c17:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103c1e:	0f 86 3b ff ff ff    	jbe    f0103b5f <pf_free_env+0x12>
	}

	// free the disk page directory of the environment
#if USE_KHEAP
	{
		kfree(ptr_env->disk_env_pgdir);
f0103c24:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c27:	8b 40 64             	mov    0x64(%eax),%eax
f0103c2a:	83 ec 0c             	sub    $0xc,%esp
f0103c2d:	50                   	push   %eax
f0103c2e:	e8 44 3f 00 00       	call   f0107b77 <kfree>
f0103c33:	83 c4 10             	add    $0x10,%esp
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
	}
#endif
	ptr_env->disk_env_pgdir = 0;
f0103c36:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c39:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	ptr_env->disk_env_pgdir_PA = 0;
f0103c40:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c43:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f0103c4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c4d:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103c50:	85 c0                	test   %eax,%eax
f0103c52:	74 36                	je     f0103c8a <pf_free_env+0x13d>
		return;
	__pf_remove_env_all_tables(ptr_env);
f0103c54:	83 ec 0c             	sub    $0xc,%esp
f0103c57:	ff 75 08             	pushl  0x8(%ebp)
f0103c5a:	e8 05 03 00 00       	call   f0103f64 <__pf_remove_env_all_tables>
f0103c5f:	83 c4 10             	add    $0x10,%esp


#if USE_KHEAP
	{
		kfree(ptr_env->disk_env_tabledir);
f0103c62:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c65:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103c68:	83 ec 0c             	sub    $0xc,%esp
f0103c6b:	50                   	push   %eax
f0103c6c:	e8 06 3f 00 00       	call   f0107b77 <kfree>
f0103c71:	83 c4 10             	add    $0x10,%esp
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
	}
#endif
	ptr_env->disk_env_tabledir = 0;
f0103c74:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c77:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	ptr_env->disk_env_tabledir_PA = 0;
f0103c7e:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c81:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)
f0103c88:	eb 01                	jmp    f0103c8b <pf_free_env+0x13e>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f0103c8a:	90                   	nop
	}
#endif
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f0103c8b:	c9                   	leave  
f0103c8c:	c3                   	ret    

f0103c8d <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f0103c8d:	55                   	push   %ebp
f0103c8e:	89 e5                	mov    %esp,%ebp
f0103c90:	83 ec 08             	sub    $0x8,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f0103c93:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c96:	8b 50 64             	mov    0x64(%eax),%edx
f0103c99:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c9c:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f0103c9e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103ca1:	8b 00                	mov    (%eax),%eax
f0103ca3:	85 c0                	test   %eax,%eax
f0103ca5:	75 58                	jne    f0103cff <get_disk_page_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
#if USE_KHEAP
		{
			*ptr_disk_page_directory = kmalloc(PAGE_SIZE);
f0103ca7:	83 ec 0c             	sub    $0xc,%esp
f0103caa:	68 00 10 00 00       	push   $0x1000
f0103caf:	e8 ad 3d 00 00       	call   f0107a61 <kmalloc>
f0103cb4:	83 c4 10             	add    $0x10,%esp
f0103cb7:	89 c2                	mov    %eax,%edx
f0103cb9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cbc:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_page_directory == NULL)
f0103cbe:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cc1:	8b 00                	mov    (%eax),%eax
f0103cc3:	85 c0                	test   %eax,%eax
f0103cc5:	75 07                	jne    f0103cce <get_disk_page_directory+0x41>
			{
				return E_NO_VM;
f0103cc7:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103ccc:	eb 36                	jmp    f0103d04 <get_disk_page_directory+0x77>
			}
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
f0103cce:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cd1:	8b 00                	mov    (%eax),%eax
f0103cd3:	83 ec 0c             	sub    $0xc,%esp
f0103cd6:	50                   	push   %eax
f0103cd7:	e8 ef 3f 00 00       	call   f0107ccb <kheap_physical_address>
f0103cdc:	83 c4 10             	add    $0x10,%esp
f0103cdf:	89 c2                	mov    %eax,%edx
f0103ce1:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ce4:	89 50 68             	mov    %edx,0x68(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
		}
#endif
		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f0103ce7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cea:	8b 00                	mov    (%eax),%eax
f0103cec:	83 ec 04             	sub    $0x4,%esp
f0103cef:	68 00 10 00 00       	push   $0x1000
f0103cf4:	6a 00                	push   $0x0
f0103cf6:	50                   	push   %eax
f0103cf7:	e8 fa da 02 00       	call   f01317f6 <memset>
f0103cfc:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103cff:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103d04:	c9                   	leave  
f0103d05:	c3                   	ret    

f0103d06 <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f0103d06:	55                   	push   %ebp
f0103d07:	89 e5                	mov    %esp,%ebp
f0103d09:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f0103d0c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103d13:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103d1a:	eb 78                	jmp    f0103d94 <pf_calculate_allocated_pages+0x8e>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f0103d1c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d1f:	8b 40 64             	mov    0x64(%eax),%eax
f0103d22:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103d25:	c1 e2 02             	shl    $0x2,%edx
f0103d28:	01 d0                	add    %edx,%eax
f0103d2a:	8b 00                	mov    (%eax),%eax
f0103d2c:	83 e0 01             	and    $0x1,%eax
f0103d2f:	85 c0                	test   %eax,%eax
f0103d31:	74 5d                	je     f0103d90 <pf_calculate_allocated_pages+0x8a>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f0103d33:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d36:	8b 40 64             	mov    0x64(%eax),%eax
f0103d39:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103d3c:	c1 e2 02             	shl    $0x2,%edx
f0103d3f:	01 d0                	add    %edx,%eax
f0103d41:	8b 00                	mov    (%eax),%eax
f0103d43:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103d48:	89 45 e8             	mov    %eax,-0x18(%ebp)
#if USE_KHEAP
		{
			pt = (uint32*) kheap_virtual_address(pa);
f0103d4b:	83 ec 0c             	sub    $0xc,%esp
f0103d4e:	ff 75 e8             	pushl  -0x18(%ebp)
f0103d51:	e8 56 3f 00 00       	call   f0107cac <kheap_virtual_address>
f0103d56:	83 c4 10             	add    $0x10,%esp
f0103d59:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103d5c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0103d63:	eb 20                	jmp    f0103d85 <pf_calculate_allocated_pages+0x7f>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f0103d65:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103d68:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103d6f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103d72:	01 d0                	add    %edx,%eax
f0103d74:	8b 00                	mov    (%eax),%eax
f0103d76:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if(dfn != 0)
f0103d79:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0103d7d:	74 03                	je     f0103d82 <pf_calculate_allocated_pages+0x7c>
				counter ++;
f0103d7f:	ff 45 f0             	incl   -0x10(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103d82:	ff 45 ec             	incl   -0x14(%ebp)
f0103d85:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f0103d8c:	76 d7                	jbe    f0103d65 <pf_calculate_allocated_pages+0x5f>
f0103d8e:	eb 01                	jmp    f0103d91 <pf_calculate_allocated_pages+0x8b>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f0103d90:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103d91:	ff 45 f4             	incl   -0xc(%ebp)
f0103d94:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103d9b:	0f 86 7b ff ff ff    	jbe    f0103d1c <pf_calculate_allocated_pages+0x16>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f0103da1:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103da4:	c9                   	leave  
f0103da5:	c3                   	ret    

f0103da6 <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f0103da6:	55                   	push   %ebp
f0103da7:	89 e5                	mov    %esp,%ebp
f0103da9:	83 ec 10             	sub    $0x10,%esp
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;
f0103dac:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103db3:	a1 b4 27 86 f0       	mov    0xf08627b4,%eax
f0103db8:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103dbb:	eb 0b                	jmp    f0103dc8 <pf_calculate_free_frames+0x22>
	{
		totalFreeDiskFrames++ ;
f0103dbd:	ff 45 f8             	incl   -0x8(%ebp)
int pf_calculate_free_frames()
{
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103dc0:	a1 bc 27 86 f0       	mov    0xf08627bc,%eax
f0103dc5:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103dc8:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103dcc:	74 07                	je     f0103dd5 <pf_calculate_free_frames+0x2f>
f0103dce:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0103dd1:	8b 00                	mov    (%eax),%eax
f0103dd3:	eb 05                	jmp    f0103dda <pf_calculate_free_frames+0x34>
f0103dd5:	b8 00 00 00 00       	mov    $0x0,%eax
f0103dda:	a3 bc 27 86 f0       	mov    %eax,0xf08627bc
f0103ddf:	a1 bc 27 86 f0       	mov    0xf08627bc,%eax
f0103de4:	85 c0                	test   %eax,%eax
f0103de6:	75 d5                	jne    f0103dbd <pf_calculate_free_frames+0x17>
f0103de8:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103dec:	75 cf                	jne    f0103dbd <pf_calculate_free_frames+0x17>
	{
		totalFreeDiskFrames++ ;
	}
	return totalFreeDiskFrames;
f0103dee:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0103df1:	c9                   	leave  
f0103df2:	c3                   	ret    

f0103df3 <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f0103df3:	55                   	push   %ebp
f0103df4:	89 e5                	mov    %esp,%ebp
f0103df6:	83 ec 08             	sub    $0x8,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f0103df9:	8b 45 08             	mov    0x8(%ebp),%eax
f0103dfc:	8b 50 6c             	mov    0x6c(%eax),%edx
f0103dff:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e02:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f0103e04:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e07:	8b 00                	mov    (%eax),%eax
f0103e09:	85 c0                	test   %eax,%eax
f0103e0b:	75 58                	jne    f0103e65 <get_disk_table_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
#if USE_KHEAP
		{
			*ptr_disk_table_directory = kmalloc(PAGE_SIZE);
f0103e0d:	83 ec 0c             	sub    $0xc,%esp
f0103e10:	68 00 10 00 00       	push   $0x1000
f0103e15:	e8 47 3c 00 00       	call   f0107a61 <kmalloc>
f0103e1a:	83 c4 10             	add    $0x10,%esp
f0103e1d:	89 c2                	mov    %eax,%edx
f0103e1f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e22:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_table_directory == NULL)
f0103e24:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e27:	8b 00                	mov    (%eax),%eax
f0103e29:	85 c0                	test   %eax,%eax
f0103e2b:	75 07                	jne    f0103e34 <get_disk_table_directory+0x41>
			{
				return E_NO_VM;
f0103e2d:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103e32:	eb 36                	jmp    f0103e6a <get_disk_table_directory+0x77>
			}
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
f0103e34:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e37:	8b 00                	mov    (%eax),%eax
f0103e39:	83 ec 0c             	sub    $0xc,%esp
f0103e3c:	50                   	push   %eax
f0103e3d:	e8 89 3e 00 00       	call   f0107ccb <kheap_physical_address>
f0103e42:	83 c4 10             	add    $0x10,%esp
f0103e45:	89 c2                	mov    %eax,%edx
f0103e47:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e4a:	89 50 70             	mov    %edx,0x70(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
		}
#endif
		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f0103e4d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e50:	8b 00                	mov    (%eax),%eax
f0103e52:	83 ec 04             	sub    $0x4,%esp
f0103e55:	68 00 10 00 00       	push   $0x1000
f0103e5a:	6a 00                	push   $0x0
f0103e5c:	50                   	push   %eax
f0103e5d:	e8 94 d9 02 00       	call   f01317f6 <memset>
f0103e62:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103e65:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103e6a:	c9                   	leave  
f0103e6b:	c3                   	ret    

f0103e6c <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103e6c:	55                   	push   %ebp
f0103e6d:	89 e5                	mov    %esp,%ebp
f0103e6f:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f0103e72:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103e79:	76 19                	jbe    f0103e94 <__pf_write_env_table+0x28>
f0103e7b:	68 24 58 13 f0       	push   $0xf0135824
f0103e80:	68 4a 58 13 f0       	push   $0xf013584a
f0103e85:	68 5a 02 00 00       	push   $0x25a
f0103e8a:	68 93 57 13 f0       	push   $0xf0135793
f0103e8f:	e8 71 c3 ff ff       	call   f0100205 <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f0103e94:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e97:	83 c0 6c             	add    $0x6c,%eax
f0103e9a:	83 ec 08             	sub    $0x8,%esp
f0103e9d:	50                   	push   %eax
f0103e9e:	ff 75 08             	pushl  0x8(%ebp)
f0103ea1:	e8 4d ff ff ff       	call   f0103df3 <get_disk_table_directory>
f0103ea6:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103ea9:	8b 45 08             	mov    0x8(%ebp),%eax
f0103eac:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103eaf:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103eb2:	c1 ea 16             	shr    $0x16,%edx
f0103eb5:	c1 e2 02             	shl    $0x2,%edx
f0103eb8:	01 d0                	add    %edx,%eax
f0103eba:	8b 00                	mov    (%eax),%eax
f0103ebc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f0103ebf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103ec2:	85 c0                	test   %eax,%eax
f0103ec4:	75 31                	jne    f0103ef7 <__pf_write_env_table+0x8b>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103ec6:	83 ec 0c             	sub    $0xc,%esp
f0103ec9:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0103ecc:	50                   	push   %eax
f0103ecd:	e8 2c f4 ff ff       	call   f01032fe <allocate_disk_frame>
f0103ed2:	83 c4 10             	add    $0x10,%esp
f0103ed5:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103ed8:	75 07                	jne    f0103ee1 <__pf_write_env_table+0x75>
f0103eda:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103edf:	eb 2e                	jmp    f0103f0f <__pf_write_env_table+0xa3>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f0103ee1:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ee4:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103ee7:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103eea:	c1 ea 16             	shr    $0x16,%edx
f0103eed:	c1 e2 02             	shl    $0x2,%edx
f0103ef0:	01 c2                	add    %eax,%edx
f0103ef2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103ef5:	89 02                	mov    %eax,(%edx)
	//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f0103ef7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103efa:	83 ec 08             	sub    $0x8,%esp
f0103efd:	ff 75 10             	pushl  0x10(%ebp)
f0103f00:	50                   	push   %eax
f0103f01:	e8 4b f2 ff ff       	call   f0103151 <write_disk_page>
f0103f06:	83 c4 10             	add    $0x10,%esp
f0103f09:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f0103f0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0103f0f:	c9                   	leave  
f0103f10:	c3                   	ret    

f0103f11 <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103f11:	55                   	push   %ebp
f0103f12:	89 e5                	mov    %esp,%ebp
f0103f14:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103f17:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f1a:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f1d:	85 c0                	test   %eax,%eax
f0103f1f:	75 07                	jne    f0103f28 <__pf_read_env_table+0x17>
f0103f21:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103f26:	eb 3a                	jmp    f0103f62 <__pf_read_env_table+0x51>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103f28:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f2b:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f2e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f31:	c1 ea 16             	shr    $0x16,%edx
f0103f34:	c1 e2 02             	shl    $0x2,%edx
f0103f37:	01 d0                	add    %edx,%eax
f0103f39:	8b 00                	mov    (%eax),%eax
f0103f3b:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103f3e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103f42:	75 07                	jne    f0103f4b <__pf_read_env_table+0x3a>
f0103f44:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103f49:	eb 17                	jmp    f0103f62 <__pf_read_env_table+0x51>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f0103f4b:	83 ec 08             	sub    $0x8,%esp
f0103f4e:	ff 75 10             	pushl  0x10(%ebp)
f0103f51:	ff 75 f4             	pushl  -0xc(%ebp)
f0103f54:	e8 c9 f1 ff ff       	call   f0103122 <read_disk_page>
f0103f59:	83 c4 10             	add    $0x10,%esp
f0103f5c:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f0103f5f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103f62:	c9                   	leave  
f0103f63:	c3                   	ret    

f0103f64 <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f0103f64:	55                   	push   %ebp
f0103f65:	89 e5                	mov    %esp,%ebp
f0103f67:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103f6a:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f6d:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f70:	85 c0                	test   %eax,%eax
f0103f72:	74 4c                	je     f0103fc0 <__pf_remove_env_all_tables+0x5c>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103f74:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103f7b:	eb 38                	jmp    f0103fb5 <__pf_remove_env_all_tables+0x51>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f0103f7d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f80:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f83:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103f86:	c1 e2 02             	shl    $0x2,%edx
f0103f89:	01 d0                	add    %edx,%eax
f0103f8b:	8b 00                	mov    (%eax),%eax
f0103f8d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f0103f90:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f93:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f96:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103f99:	c1 e2 02             	shl    $0x2,%edx
f0103f9c:	01 d0                	add    %edx,%eax
f0103f9e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f0103fa4:	83 ec 0c             	sub    $0xc,%esp
f0103fa7:	ff 75 f0             	pushl  -0x10(%ebp)
f0103faa:	e8 16 f4 ff ff       	call   f01033c5 <free_disk_frame>
f0103faf:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103fb2:	ff 45 f4             	incl   -0xc(%ebp)
f0103fb5:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103fbc:	76 bf                	jbe    f0103f7d <__pf_remove_env_all_tables+0x19>
f0103fbe:	eb 01                	jmp    f0103fc1 <__pf_remove_env_all_tables+0x5d>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103fc0:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103fc1:	c9                   	leave  
f0103fc2:	c3                   	ret    

f0103fc3 <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f0103fc3:	55                   	push   %ebp
f0103fc4:	89 e5                	mov    %esp,%ebp
f0103fc6:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f0103fc9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0103fcd:	75 10                	jne    f0103fdf <__pf_remove_env_table+0x1c>
		cprintf("REMOVING table 0 from page file\n");
f0103fcf:	83 ec 0c             	sub    $0xc,%esp
f0103fd2:	68 54 59 13 f0       	push   $0xf0135954
f0103fd7:	e8 32 cd ff ff       	call   f0100d0e <cprintf>
f0103fdc:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f0103fdf:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fe2:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103fe5:	85 c0                	test   %eax,%eax
f0103fe7:	74 3d                	je     f0104026 <__pf_remove_env_table+0x63>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103fe9:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fec:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103fef:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103ff2:	c1 ea 16             	shr    $0x16,%edx
f0103ff5:	c1 e2 02             	shl    $0x2,%edx
f0103ff8:	01 d0                	add    %edx,%eax
f0103ffa:	8b 00                	mov    (%eax),%eax
f0103ffc:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f0103fff:	8b 45 08             	mov    0x8(%ebp),%eax
f0104002:	8b 40 6c             	mov    0x6c(%eax),%eax
f0104005:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104008:	c1 ea 16             	shr    $0x16,%edx
f010400b:	c1 e2 02             	shl    $0x2,%edx
f010400e:	01 d0                	add    %edx,%eax
f0104010:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0104016:	83 ec 0c             	sub    $0xc,%esp
f0104019:	ff 75 f4             	pushl  -0xc(%ebp)
f010401c:	e8 a4 f3 ff ff       	call   f01033c5 <free_disk_frame>
f0104021:	83 c4 10             	add    $0x10,%esp
f0104024:	eb 01                	jmp    f0104027 <__pf_remove_env_table+0x64>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
		cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f0104026:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f0104027:	c9                   	leave  
f0104028:	c3                   	ret    

f0104029 <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f0104029:	55                   	push   %ebp
f010402a:	89 e5                	mov    %esp,%ebp
f010402c:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f010402f:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f0104036:	eb 1f                	jmp    f0104057 <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f0104038:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010403b:	83 ec 04             	sub    $0x4,%esp
f010403e:	6a 08                	push   $0x8
f0104040:	ff 75 08             	pushl  0x8(%ebp)
f0104043:	50                   	push   %eax
f0104044:	e8 52 de 02 00       	call   f0131e9b <ide_write>
f0104049:	83 c4 10             	add    $0x10,%esp
f010404c:	85 c0                	test   %eax,%eax
f010404e:	75 12                	jne    f0104062 <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f0104050:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f0104057:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f010405e:	7e d8                	jle    f0104038 <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0104060:	eb 01                	jmp    f0104063 <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f0104062:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0104063:	90                   	nop
f0104064:	c9                   	leave  
f0104065:	c3                   	ret    

f0104066 <mc146818_read>:
#include <kern/cpu/picirq.h>


unsigned
mc146818_read(unsigned reg)
{
f0104066:	55                   	push   %ebp
f0104067:	89 e5                	mov    %esp,%ebp
f0104069:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f010406c:	8b 45 08             	mov    0x8(%ebp),%eax
f010406f:	0f b6 c0             	movzbl %al,%eax
f0104072:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0104079:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010407c:	8a 45 f6             	mov    -0xa(%ebp),%al
f010407f:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104082:	ee                   	out    %al,(%dx)
f0104083:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010408a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010408d:	89 c2                	mov    %eax,%edx
f010408f:	ec                   	in     (%dx),%al
f0104090:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0104093:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f0104096:	0f b6 c0             	movzbl %al,%eax
}
f0104099:	c9                   	leave  
f010409a:	c3                   	ret    

f010409b <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f010409b:	55                   	push   %ebp
f010409c:	89 e5                	mov    %esp,%ebp
f010409e:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f01040a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01040a4:	0f b6 c0             	movzbl %al,%eax
f01040a7:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f01040ae:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01040b1:	8a 45 f6             	mov    -0xa(%ebp),%al
f01040b4:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01040b7:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f01040b8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01040bb:	0f b6 c0             	movzbl %al,%eax
f01040be:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f01040c5:	88 45 f7             	mov    %al,-0x9(%ebp)
f01040c8:	8a 45 f7             	mov    -0x9(%ebp),%al
f01040cb:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01040ce:	ee                   	out    %al,(%dx)
}
f01040cf:	90                   	nop
f01040d0:	c9                   	leave  
f01040d1:	c3                   	ret    

f01040d2 <kclock_start>:


void
kclock_start(uint8 quantum_in_ms)
{
f01040d2:	55                   	push   %ebp
f01040d3:	89 e5                	mov    %esp,%ebp
f01040d5:	53                   	push   %ebx
f01040d6:	83 ec 24             	sub    $0x24,%esp
f01040d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01040dc:	88 45 e4             	mov    %al,-0x1c(%ebp)
f01040df:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f01040e6:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f01040ea:	8a 45 ef             	mov    -0x11(%ebp),%al
f01040ed:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01040f0:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	if (IS_VALID_QUANTUM(quantum_in_ms))
f01040f1:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f01040f5:	77 48                	ja     f010413f <kclock_start+0x6d>
f01040f7:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01040fe:	c6 45 ee 34          	movb   $0x34,-0x12(%ebp)
f0104102:	8a 45 ee             	mov    -0x12(%ebp),%al
f0104105:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104108:	ee                   	out    %al,(%dx)
	{
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f0104109:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f010410d:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104112:	99                   	cltd   
f0104113:	f7 fb                	idiv   %ebx
f0104115:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f010411b:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f010411f:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104124:	99                   	cltd   
f0104125:	f7 fb                	idiv   %ebx
f0104127:	89 c3                	mov    %eax,%ebx
f0104129:	89 c8                	mov    %ecx,%eax
f010412b:	99                   	cltd   
f010412c:	f7 fb                	idiv   %ebx
f010412e:	0f b7 c0             	movzwl %ax,%eax
f0104131:	83 ec 0c             	sub    $0xc,%esp
f0104134:	50                   	push   %eax
f0104135:	e8 b8 01 00 00       	call   f01042f2 <kclock_write_cnt0_LSB_first>
f010413a:	83 c4 10             	add    $0x10,%esp
f010413d:	eb 13                	jmp    f0104152 <kclock_start+0x80>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f010413f:	6a 35                	push   $0x35
f0104141:	68 78 59 13 f0       	push   $0xf0135978
f0104146:	6a 33                	push   $0x33
f0104148:	68 d4 59 13 f0       	push   $0xf01359d4
f010414d:	e8 b3 c0 ff ff       	call   f0100205 <_panic>
//	cprintf("c = %d\n", c) ;

//	uint16 cnt0_after = kclock_read_cnt0() ;

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104152:	66 a1 b0 28 19 f0    	mov    0xf01928b0,%ax
f0104158:	0f b7 c0             	movzwl %ax,%eax
f010415b:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104160:	83 ec 0c             	sub    $0xc,%esp
f0104163:	50                   	push   %eax
f0104164:	e8 bc 1b 00 00       	call   f0105d25 <irq_setmask_8259A>
f0104169:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");

	//cprintf("Timer STARTED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );

}
f010416c:	90                   	nop
f010416d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104170:	c9                   	leave  
f0104171:	c3                   	ret    

f0104172 <kclock_stop>:

void
kclock_stop(void)
{
f0104172:	55                   	push   %ebp
f0104173:	89 e5                	mov    %esp,%ebp
f0104175:	83 ec 18             	sub    $0x18,%esp
f0104178:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f010417f:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104183:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104186:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104189:	ee                   	out    %al,(%dx)
//	for (int i = 0 ; i <20; i++)
//	{
//		cnt0 = kclock_read_cnt0();
//		cprintf("STOP AFTER: cnt0 = %d\n",cnt0);
//	}
	irq_setmask_8259A(0xFFFF);
f010418a:	83 ec 0c             	sub    $0xc,%esp
f010418d:	68 ff ff 00 00       	push   $0xffff
f0104192:	e8 8e 1b 00 00       	call   f0105d25 <irq_setmask_8259A>
f0104197:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f010419a:	90                   	nop
f010419b:	c9                   	leave  
f010419c:	c3                   	ret    

f010419d <kclock_resume>:

void
kclock_resume(void)
{
f010419d:	55                   	push   %ebp
f010419e:	89 e5                	mov    %esp,%ebp
f01041a0:	83 ec 18             	sub    $0x18,%esp
	uint16 cnt0 = kclock_read_cnt0() ;
f01041a3:	e8 8c 01 00 00       	call   f0104334 <kclock_read_cnt0>
f01041a8:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 20)
f01041ac:	66 83 7d f6 13       	cmpw   $0x13,-0xa(%ebp)
f01041b1:	77 06                	ja     f01041b9 <kclock_resume+0x1c>
	{
		cnt0 = 20;
f01041b3:	66 c7 45 f6 14 00    	movw   $0x14,-0xa(%ebp)
	}

	if (cnt0 % 2 == 1)
f01041b9:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f01041bd:	83 e0 01             	and    $0x1,%eax
f01041c0:	66 85 c0             	test   %ax,%ax
f01041c3:	74 09                	je     f01041ce <kclock_resume+0x31>
		cnt0++;
f01041c5:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f01041c9:	40                   	inc    %eax
f01041ca:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f01041ce:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f01041d5:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f01041d9:	8a 45 ef             	mov    -0x11(%ebp),%al
f01041dc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01041df:	ee                   	out    %al,(%dx)

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f01041e0:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f01041e4:	83 ec 0c             	sub    $0xc,%esp
f01041e7:	50                   	push   %eax
f01041e8:	e8 05 01 00 00       	call   f01042f2 <kclock_write_cnt0_LSB_first>
f01041ed:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0_after = kclock_read_cnt0() ;
//	cprintf("Timer RESUMED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );


	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f01041f0:	66 a1 b0 28 19 f0    	mov    0xf01928b0,%ax
f01041f6:	0f b7 c0             	movzwl %ax,%eax
f01041f9:	25 fe ff 00 00       	and    $0xfffe,%eax
f01041fe:	83 ec 0c             	sub    $0xc,%esp
f0104201:	50                   	push   %eax
f0104202:	e8 1e 1b 00 00       	call   f0105d25 <irq_setmask_8259A>
f0104207:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f010420a:	90                   	nop
f010420b:	c9                   	leave  
f010420c:	c3                   	ret    

f010420d <kclock_start_counter>:


//==============

void kclock_start_counter(uint8 cnt0)
{
f010420d:	55                   	push   %ebp
f010420e:	89 e5                	mov    %esp,%ebp
f0104210:	83 ec 28             	sub    $0x28,%esp
f0104213:	8b 45 08             	mov    0x8(%ebp),%eax
f0104216:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104219:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104220:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104224:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104227:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010422a:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f010422b:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f010422f:	83 ec 0c             	sub    $0xc,%esp
f0104232:	50                   	push   %eax
f0104233:	e8 ba 00 00 00       	call   f01042f2 <kclock_write_cnt0_LSB_first>
f0104238:	83 c4 10             	add    $0x10,%esp
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f010423b:	66 a1 b0 28 19 f0    	mov    0xf01928b0,%ax
f0104241:	0f b7 c0             	movzwl %ax,%eax
f0104244:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104249:	83 ec 0c             	sub    $0xc,%esp
f010424c:	50                   	push   %eax
f010424d:	e8 d3 1a 00 00       	call   f0105d25 <irq_setmask_8259A>
f0104252:	83 c4 10             	add    $0x10,%esp

}
f0104255:	90                   	nop
f0104256:	c9                   	leave  
f0104257:	c3                   	ret    

f0104258 <kclock_set_quantum>:
//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f0104258:	55                   	push   %ebp
f0104259:	89 e5                	mov    %esp,%ebp
f010425b:	53                   	push   %ebx
f010425c:	83 ec 24             	sub    $0x24,%esp
f010425f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104262:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104265:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104269:	77 6c                	ja     f01042d7 <kclock_set_quantum+0x7f>
	{
		int cnt = TIMER_DIV((1000/quantum_in_ms));
f010426b:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f010426f:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104274:	99                   	cltd   
f0104275:	f7 fb                	idiv   %ebx
f0104277:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f010427d:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104281:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104286:	99                   	cltd   
f0104287:	f7 fb                	idiv   %ebx
f0104289:	89 c3                	mov    %eax,%ebx
f010428b:	89 c8                	mov    %ecx,%eax
f010428d:	99                   	cltd   
f010428e:	f7 fb                	idiv   %ebx
f0104290:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cnt%2 == 1)
f0104293:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104296:	25 01 00 00 80       	and    $0x80000001,%eax
f010429b:	85 c0                	test   %eax,%eax
f010429d:	79 05                	jns    f01042a4 <kclock_set_quantum+0x4c>
f010429f:	48                   	dec    %eax
f01042a0:	83 c8 fe             	or     $0xfffffffe,%eax
f01042a3:	40                   	inc    %eax
f01042a4:	83 f8 01             	cmp    $0x1,%eax
f01042a7:	75 03                	jne    f01042ac <kclock_set_quantum+0x54>
			cnt++;
f01042a9:	ff 45 f4             	incl   -0xc(%ebp)
f01042ac:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f01042b3:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f01042b7:	8a 45 ef             	mov    -0x11(%ebp),%al
f01042ba:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01042bd:	ee                   	out    %al,(%dx)

		//cprintf("QUANTUM is set to %d ms (%d)\n", quantum_in_ms, TIMER_DIV((1000/quantum_in_ms)));
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(cnt) ;
f01042be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01042c1:	0f b7 c0             	movzwl %ax,%eax
f01042c4:	83 ec 0c             	sub    $0xc,%esp
f01042c7:	50                   	push   %eax
f01042c8:	e8 25 00 00 00       	call   f01042f2 <kclock_write_cnt0_LSB_first>
f01042cd:	83 c4 10             	add    $0x10,%esp
		kclock_stop();
f01042d0:	e8 9d fe ff ff       	call   f0104172 <kclock_stop>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f01042d5:	eb 16                	jmp    f01042ed <kclock_set_quantum+0x95>
		kclock_stop();
		//uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f01042d7:	6a 35                	push   $0x35
f01042d9:	68 78 59 13 f0       	push   $0xf0135978
f01042de:	68 c9 00 00 00       	push   $0xc9
f01042e3:	68 d4 59 13 f0       	push   $0xf01359d4
f01042e8:	e8 18 bf ff ff       	call   f0100205 <_panic>
	}
}
f01042ed:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01042f0:	c9                   	leave  
f01042f1:	c3                   	ret    

f01042f2 <kclock_write_cnt0_LSB_first>:


//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f01042f2:	55                   	push   %ebp
f01042f3:	89 e5                	mov    %esp,%ebp
f01042f5:	83 ec 14             	sub    $0x14,%esp
f01042f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01042fb:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f01042ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104302:	0f b6 c0             	movzbl %al,%eax
f0104305:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%ebp)
f010430c:	88 45 f6             	mov    %al,-0xa(%ebp)
f010430f:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104312:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104315:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f0104316:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104319:	66 c1 e8 08          	shr    $0x8,%ax
f010431d:	0f b6 c0             	movzbl %al,%eax
f0104320:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)
f0104327:	88 45 f7             	mov    %al,-0x9(%ebp)
f010432a:	8a 45 f7             	mov    -0x9(%ebp),%al
f010432d:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0104330:	ee                   	out    %al,(%dx)
}
f0104331:	90                   	nop
f0104332:	c9                   	leave  
f0104333:	c3                   	ret    

f0104334 <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f0104334:	55                   	push   %ebp
f0104335:	89 e5                	mov    %esp,%ebp
f0104337:	83 ec 20             	sub    $0x20,%esp
f010433a:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104341:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104344:	89 c2                	mov    %eax,%edx
f0104346:	ec                   	in     (%dx),%al
f0104347:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f010434a:	8a 45 ee             	mov    -0x12(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f010434d:	88 45 ff             	mov    %al,-0x1(%ebp)
f0104350:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104357:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010435a:	89 c2                	mov    %eax,%edx
f010435c:	ec                   	in     (%dx),%al
f010435d:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f0104360:	8a 45 ef             	mov    -0x11(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104363:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104366:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f010436a:	c1 e0 08             	shl    $0x8,%eax
f010436d:	89 c2                	mov    %eax,%edx
f010436f:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104373:	09 d0                	or     %edx,%eax
f0104375:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return cnt0 ;
f0104379:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010437c:	c9                   	leave  
f010437d:	c3                   	ret    

f010437e <kclock_read_cnt0_latch>:


uint16
kclock_read_cnt0_latch(void)
{
f010437e:	55                   	push   %ebp
f010437f:	89 e5                	mov    %esp,%ebp
f0104381:	83 ec 30             	sub    $0x30,%esp
f0104384:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010438b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010438e:	89 c2                	mov    %eax,%edx
f0104390:	ec                   	in     (%dx),%al
f0104391:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f0104394:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f0104397:	88 45 ff             	mov    %al,-0x1(%ebp)
f010439a:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01043a1:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01043a5:	8a 45 dc             	mov    -0x24(%ebp),%al
f01043a8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01043ab:	ee                   	out    %al,(%dx)
f01043ac:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01043b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01043b6:	89 c2                	mov    %eax,%edx
f01043b8:	ec                   	in     (%dx),%al
f01043b9:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f01043bc:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f01043bf:	88 45 f3             	mov    %al,-0xd(%ebp)
f01043c2:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01043c9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01043cc:	89 c2                	mov    %eax,%edx
f01043ce:	ec                   	in     (%dx),%al
f01043cf:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f01043d2:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f01043d5:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f01043d8:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f01043dc:	c1 e0 08             	shl    $0x8,%eax
f01043df:	89 c2                	mov    %eax,%edx
f01043e1:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01043e5:	09 d0                	or     %edx,%eax
f01043e7:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f01043eb:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f01043ef:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f01043f6:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01043f9:	8a 45 df             	mov    -0x21(%ebp),%al
f01043fc:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01043ff:	ee                   	out    %al,(%dx)

	return cnt0 ;
f0104400:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0104403:	c9                   	leave  
f0104404:	c3                   	ret    

f0104405 <isSchedMethodRR>:
//void on_clock_update_WS_time_stamps();
extern void cleanup_buffers(struct Env* e);
//================

void sched_delete_ready_queues() ;
uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f0104405:	55                   	push   %ebp
f0104406:	89 e5                	mov    %esp,%ebp
f0104408:	a1 48 27 86 f0       	mov    0xf0862748,%eax
f010440d:	85 c0                	test   %eax,%eax
f010440f:	75 07                	jne    f0104418 <isSchedMethodRR+0x13>
f0104411:	b8 01 00 00 00       	mov    $0x1,%eax
f0104416:	eb 05                	jmp    f010441d <isSchedMethodRR+0x18>
f0104418:	b8 00 00 00 00       	mov    $0x0,%eax
f010441d:	5d                   	pop    %ebp
f010441e:	c3                   	ret    

f010441f <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f010441f:	55                   	push   %ebp
f0104420:	89 e5                	mov    %esp,%ebp
f0104422:	a1 48 27 86 f0       	mov    0xf0862748,%eax
f0104427:	83 f8 01             	cmp    $0x1,%eax
f010442a:	75 07                	jne    f0104433 <isSchedMethodMLFQ+0x14>
f010442c:	b8 01 00 00 00       	mov    $0x1,%eax
f0104431:	eb 05                	jmp    f0104438 <isSchedMethodMLFQ+0x19>
f0104433:	b8 00 00 00 00       	mov    $0x0,%eax
f0104438:	5d                   	pop    %ebp
f0104439:	c3                   	ret    

f010443a <init_queue>:

//==================================================================================//
//============================== HELPER FUNCTIONS ==================================//
//==================================================================================//
void init_queue(struct Env_Queue* queue)
{
f010443a:	55                   	push   %ebp
f010443b:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f010443d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104441:	74 1d                	je     f0104460 <init_queue+0x26>
	{
		LIST_INIT(queue);
f0104443:	8b 45 08             	mov    0x8(%ebp),%eax
f0104446:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010444c:	8b 45 08             	mov    0x8(%ebp),%eax
f010444f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0104456:	8b 45 08             	mov    0x8(%ebp),%eax
f0104459:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f0104460:	90                   	nop
f0104461:	5d                   	pop    %ebp
f0104462:	c3                   	ret    

f0104463 <queue_size>:

int queue_size(struct Env_Queue* queue)
{
f0104463:	55                   	push   %ebp
f0104464:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0104466:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010446a:	74 08                	je     f0104474 <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f010446c:	8b 45 08             	mov    0x8(%ebp),%eax
f010446f:	8b 40 0c             	mov    0xc(%eax),%eax
f0104472:	eb 05                	jmp    f0104479 <queue_size+0x16>
	}
	else
	{
		return 0;
f0104474:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f0104479:	5d                   	pop    %ebp
f010447a:	c3                   	ret    

f010447b <enqueue>:

void enqueue(struct Env_Queue* queue, struct Env* env)
{
f010447b:	55                   	push   %ebp
f010447c:	89 e5                	mov    %esp,%ebp
f010447e:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f0104481:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104485:	75 16                	jne    f010449d <enqueue+0x22>
f0104487:	68 e8 59 13 f0       	push   $0xf01359e8
f010448c:	68 f6 59 13 f0       	push   $0xf01359f6
f0104491:	6a 2d                	push   $0x2d
f0104493:	68 0b 5a 13 f0       	push   $0xf0135a0b
f0104498:	e8 68 bd ff ff       	call   f0100205 <_panic>
	if(env != NULL)
f010449d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01044a1:	74 66                	je     f0104509 <enqueue+0x8e>
	{
		LIST_INSERT_HEAD(queue, env);
f01044a3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01044a7:	75 14                	jne    f01044bd <enqueue+0x42>
f01044a9:	83 ec 04             	sub    $0x4,%esp
f01044ac:	68 1c 5a 13 f0       	push   $0xf0135a1c
f01044b1:	6a 30                	push   $0x30
f01044b3:	68 0b 5a 13 f0       	push   $0xf0135a0b
f01044b8:	e8 48 bd ff ff       	call   f0100205 <_panic>
f01044bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01044c0:	8b 10                	mov    (%eax),%edx
f01044c2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01044c5:	89 50 44             	mov    %edx,0x44(%eax)
f01044c8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01044cb:	8b 40 44             	mov    0x44(%eax),%eax
f01044ce:	85 c0                	test   %eax,%eax
f01044d0:	74 0d                	je     f01044df <enqueue+0x64>
f01044d2:	8b 45 08             	mov    0x8(%ebp),%eax
f01044d5:	8b 00                	mov    (%eax),%eax
f01044d7:	8b 55 0c             	mov    0xc(%ebp),%edx
f01044da:	89 50 48             	mov    %edx,0x48(%eax)
f01044dd:	eb 09                	jmp    f01044e8 <enqueue+0x6d>
f01044df:	8b 45 08             	mov    0x8(%ebp),%eax
f01044e2:	8b 55 0c             	mov    0xc(%ebp),%edx
f01044e5:	89 50 04             	mov    %edx,0x4(%eax)
f01044e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01044eb:	8b 55 0c             	mov    0xc(%ebp),%edx
f01044ee:	89 10                	mov    %edx,(%eax)
f01044f0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01044f3:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01044fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01044fd:	8b 40 0c             	mov    0xc(%eax),%eax
f0104500:	8d 50 01             	lea    0x1(%eax),%edx
f0104503:	8b 45 08             	mov    0x8(%ebp),%eax
f0104506:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0104509:	90                   	nop
f010450a:	c9                   	leave  
f010450b:	c3                   	ret    

f010450c <dequeue>:

struct Env* dequeue(struct Env_Queue* queue)
{
f010450c:	55                   	push   %ebp
f010450d:	89 e5                	mov    %esp,%ebp
f010450f:	83 ec 18             	sub    $0x18,%esp
	if (queue == NULL) return NULL;
f0104512:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104516:	75 0a                	jne    f0104522 <dequeue+0x16>
f0104518:	b8 00 00 00 00       	mov    $0x0,%eax
f010451d:	e9 a0 00 00 00       	jmp    f01045c2 <dequeue+0xb6>
	struct Env* envItem = LIST_LAST(queue);
f0104522:	8b 45 08             	mov    0x8(%ebp),%eax
f0104525:	8b 40 04             	mov    0x4(%eax),%eax
f0104528:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (envItem != NULL)
f010452b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010452f:	0f 84 8a 00 00 00    	je     f01045bf <dequeue+0xb3>
	{
		LIST_REMOVE(queue, envItem);
f0104535:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104539:	75 14                	jne    f010454f <dequeue+0x43>
f010453b:	83 ec 04             	sub    $0x4,%esp
f010453e:	68 3f 5a 13 f0       	push   $0xf0135a3f
f0104543:	6a 3a                	push   $0x3a
f0104545:	68 0b 5a 13 f0       	push   $0xf0135a0b
f010454a:	e8 b6 bc ff ff       	call   f0100205 <_panic>
f010454f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104552:	8b 40 44             	mov    0x44(%eax),%eax
f0104555:	85 c0                	test   %eax,%eax
f0104557:	74 11                	je     f010456a <dequeue+0x5e>
f0104559:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010455c:	8b 40 44             	mov    0x44(%eax),%eax
f010455f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104562:	8b 52 48             	mov    0x48(%edx),%edx
f0104565:	89 50 48             	mov    %edx,0x48(%eax)
f0104568:	eb 0c                	jmp    f0104576 <dequeue+0x6a>
f010456a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010456d:	8b 50 48             	mov    0x48(%eax),%edx
f0104570:	8b 45 08             	mov    0x8(%ebp),%eax
f0104573:	89 50 04             	mov    %edx,0x4(%eax)
f0104576:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104579:	8b 40 48             	mov    0x48(%eax),%eax
f010457c:	85 c0                	test   %eax,%eax
f010457e:	74 11                	je     f0104591 <dequeue+0x85>
f0104580:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104583:	8b 40 48             	mov    0x48(%eax),%eax
f0104586:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104589:	8b 52 44             	mov    0x44(%edx),%edx
f010458c:	89 50 44             	mov    %edx,0x44(%eax)
f010458f:	eb 0b                	jmp    f010459c <dequeue+0x90>
f0104591:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104594:	8b 50 44             	mov    0x44(%eax),%edx
f0104597:	8b 45 08             	mov    0x8(%ebp),%eax
f010459a:	89 10                	mov    %edx,(%eax)
f010459c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010459f:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01045a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045a9:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01045b0:	8b 45 08             	mov    0x8(%ebp),%eax
f01045b3:	8b 40 0c             	mov    0xc(%eax),%eax
f01045b6:	8d 50 ff             	lea    -0x1(%eax),%edx
f01045b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01045bc:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f01045bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01045c2:	c9                   	leave  
f01045c3:	c3                   	ret    

f01045c4 <remove_from_queue>:

void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f01045c4:	55                   	push   %ebp
f01045c5:	89 e5                	mov    %esp,%ebp
f01045c7:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f01045ca:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01045ce:	75 16                	jne    f01045e6 <remove_from_queue+0x22>
f01045d0:	68 e8 59 13 f0       	push   $0xf01359e8
f01045d5:	68 f6 59 13 f0       	push   $0xf01359f6
f01045da:	6a 41                	push   $0x41
f01045dc:	68 0b 5a 13 f0       	push   $0xf0135a0b
f01045e1:	e8 1f bc ff ff       	call   f0100205 <_panic>

	if (e != NULL)
f01045e6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01045ea:	0f 84 8a 00 00 00    	je     f010467a <remove_from_queue+0xb6>
	{
		LIST_REMOVE(queue, e);
f01045f0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01045f4:	75 14                	jne    f010460a <remove_from_queue+0x46>
f01045f6:	83 ec 04             	sub    $0x4,%esp
f01045f9:	68 3f 5a 13 f0       	push   $0xf0135a3f
f01045fe:	6a 45                	push   $0x45
f0104600:	68 0b 5a 13 f0       	push   $0xf0135a0b
f0104605:	e8 fb bb ff ff       	call   f0100205 <_panic>
f010460a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010460d:	8b 40 44             	mov    0x44(%eax),%eax
f0104610:	85 c0                	test   %eax,%eax
f0104612:	74 11                	je     f0104625 <remove_from_queue+0x61>
f0104614:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104617:	8b 40 44             	mov    0x44(%eax),%eax
f010461a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010461d:	8b 52 48             	mov    0x48(%edx),%edx
f0104620:	89 50 48             	mov    %edx,0x48(%eax)
f0104623:	eb 0c                	jmp    f0104631 <remove_from_queue+0x6d>
f0104625:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104628:	8b 50 48             	mov    0x48(%eax),%edx
f010462b:	8b 45 08             	mov    0x8(%ebp),%eax
f010462e:	89 50 04             	mov    %edx,0x4(%eax)
f0104631:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104634:	8b 40 48             	mov    0x48(%eax),%eax
f0104637:	85 c0                	test   %eax,%eax
f0104639:	74 11                	je     f010464c <remove_from_queue+0x88>
f010463b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010463e:	8b 40 48             	mov    0x48(%eax),%eax
f0104641:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104644:	8b 52 44             	mov    0x44(%edx),%edx
f0104647:	89 50 44             	mov    %edx,0x44(%eax)
f010464a:	eb 0b                	jmp    f0104657 <remove_from_queue+0x93>
f010464c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010464f:	8b 50 44             	mov    0x44(%eax),%edx
f0104652:	8b 45 08             	mov    0x8(%ebp),%eax
f0104655:	89 10                	mov    %edx,(%eax)
f0104657:	8b 45 0c             	mov    0xc(%ebp),%eax
f010465a:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104661:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104664:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010466b:	8b 45 08             	mov    0x8(%ebp),%eax
f010466e:	8b 40 0c             	mov    0xc(%eax),%eax
f0104671:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104674:	8b 45 08             	mov    0x8(%ebp),%eax
f0104677:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f010467a:	90                   	nop
f010467b:	c9                   	leave  
f010467c:	c3                   	ret    

f010467d <find_env_in_queue>:

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f010467d:	55                   	push   %ebp
f010467e:	89 e5                	mov    %esp,%ebp
f0104680:	83 ec 10             	sub    $0x10,%esp
	if (queue == NULL) return NULL;
f0104683:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104687:	75 07                	jne    f0104690 <find_env_in_queue+0x13>
f0104689:	b8 00 00 00 00       	mov    $0x0,%eax
f010468e:	eb 58                	jmp    f01046e8 <find_env_in_queue+0x6b>

	struct Env * ptr_env=NULL;
f0104690:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f0104697:	8b 45 08             	mov    0x8(%ebp),%eax
f010469a:	8b 00                	mov    (%eax),%eax
f010469c:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010469f:	eb 19                	jmp    f01046ba <find_env_in_queue+0x3d>
	{
		if(ptr_env->env_id == envID)
f01046a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01046a4:	8b 40 4c             	mov    0x4c(%eax),%eax
f01046a7:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01046aa:	75 05                	jne    f01046b1 <find_env_in_queue+0x34>
		{
			return ptr_env;
f01046ac:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01046af:	eb 37                	jmp    f01046e8 <find_env_in_queue+0x6b>
struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	if (queue == NULL) return NULL;

	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f01046b1:	8b 45 08             	mov    0x8(%ebp),%eax
f01046b4:	8b 40 08             	mov    0x8(%eax),%eax
f01046b7:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01046ba:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01046be:	74 08                	je     f01046c8 <find_env_in_queue+0x4b>
f01046c0:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01046c3:	8b 40 44             	mov    0x44(%eax),%eax
f01046c6:	eb 05                	jmp    f01046cd <find_env_in_queue+0x50>
f01046c8:	b8 00 00 00 00       	mov    $0x0,%eax
f01046cd:	8b 55 08             	mov    0x8(%ebp),%edx
f01046d0:	89 42 08             	mov    %eax,0x8(%edx)
f01046d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01046d6:	8b 40 08             	mov    0x8(%eax),%eax
f01046d9:	85 c0                	test   %eax,%eax
f01046db:	75 c4                	jne    f01046a1 <find_env_in_queue+0x24>
f01046dd:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01046e1:	75 be                	jne    f01046a1 <find_env_in_queue+0x24>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f01046e3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01046e8:	c9                   	leave  
f01046e9:	c3                   	ret    

f01046ea <fos_scheduler_MLFQ>:
//==================================================================================//

struct Env* fos_scheduler_MLFQ()
{
f01046ea:	55                   	push   %ebp
f01046eb:	89 e5                	mov    %esp,%ebp
f01046ed:	83 ec 08             	sub    $0x8,%esp
	//Apply the MLFQ with the specified levels to pick up the next environment
	//Note: the "curenv" (if exist) should be placed in its correct queue
	// your code is here, remove the panic and write your code
	panic("fos_scheduler_MLFQ() is not implemented yet...!!");
f01046f0:	83 ec 04             	sub    $0x4,%esp
f01046f3:	68 60 5a 13 f0       	push   $0xf0135a60
f01046f8:	6a 5e                	push   $0x5e
f01046fa:	68 0b 5a 13 f0       	push   $0xf0135a0b
f01046ff:	e8 01 bb ff ff       	call   f0100205 <_panic>

f0104704 <fos_scheduler>:

}

void
fos_scheduler(void)
{
f0104704:	55                   	push   %ebp
f0104705:	89 e5                	mov    %esp,%ebp
f0104707:	83 ec 18             	sub    $0x18,%esp
	chk1();
f010470a:	e8 b8 c1 02 00       	call   f01308c7 <chk1>
	scheduler_status = SCH_STARTED;
f010470f:	c7 05 54 27 86 f0 01 	movl   $0x1,0xf0862754
f0104716:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f0104719:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (scheduler_method == SCH_RR)
f0104720:	a1 48 27 86 f0       	mov    0xf0862748,%eax
f0104725:	85 c0                	test   %eax,%eax
f0104727:	75 4d                	jne    f0104776 <fos_scheduler+0x72>
		// and switch to such environment if found.
		// It's OK to choose the previously running env if no other env
		// is runnable.

		//If the curenv is still exist, then insert it again in the ready queue
		if (curenv != NULL)
f0104729:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010472e:	85 c0                	test   %eax,%eax
f0104730:	74 18                	je     f010474a <fos_scheduler+0x46>
		{
			enqueue(&(env_ready_queues[0]), curenv);
f0104732:	8b 15 f4 1d 86 f0    	mov    0xf0861df4,%edx
f0104738:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f010473d:	83 ec 08             	sub    $0x8,%esp
f0104740:	52                   	push   %edx
f0104741:	50                   	push   %eax
f0104742:	e8 34 fd ff ff       	call   f010447b <enqueue>
f0104747:	83 c4 10             	add    $0x10,%esp
		}

		//Pick the next environment from the ready queue
		next_env = dequeue(&(env_ready_queues[0]));
f010474a:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f010474f:	83 ec 0c             	sub    $0xc,%esp
f0104752:	50                   	push   %eax
f0104753:	e8 b4 fd ff ff       	call   f010450c <dequeue>
f0104758:	83 c4 10             	add    $0x10,%esp
f010475b:	89 45 f4             	mov    %eax,-0xc(%ebp)

		//Reset the quantum
		//2017: Reset the value of CNT0 for the next clock interval
		kclock_set_quantum(quantums[0]);
f010475e:	a1 28 27 86 f0       	mov    0xf0862728,%eax
f0104763:	8a 00                	mov    (%eax),%al
f0104765:	0f b6 c0             	movzbl %al,%eax
f0104768:	83 ec 0c             	sub    $0xc,%esp
f010476b:	50                   	push   %eax
f010476c:	e8 e7 fa ff ff       	call   f0104258 <kclock_set_quantum>
f0104771:	83 c4 10             	add    $0x10,%esp
f0104774:	eb 12                	jmp    f0104788 <fos_scheduler+0x84>
		//uint16 cnt0 = kclock_read_cnt0_latch() ;
		//cprintf("CLOCK INTERRUPT AFTER RESET: Counter0 Value = %d\n", cnt0 );

	}
	else if (scheduler_method == SCH_MLFQ)
f0104776:	a1 48 27 86 f0       	mov    0xf0862748,%eax
f010477b:	83 f8 01             	cmp    $0x1,%eax
f010477e:	75 08                	jne    f0104788 <fos_scheduler+0x84>
	{
		next_env = fos_scheduler_MLFQ();
f0104780:	e8 65 ff ff ff       	call   f01046ea <fos_scheduler_MLFQ>
f0104785:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}


	//temporarily set the curenv by the next env JUST for checking the scheduler
	//Then: reset it again
	struct Env* old_curenv = curenv;
f0104788:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010478d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	curenv = next_env ;
f0104790:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104793:	a3 f4 1d 86 f0       	mov    %eax,0xf0861df4
	chk2(next_env) ;
f0104798:	83 ec 0c             	sub    $0xc,%esp
f010479b:	ff 75 f4             	pushl  -0xc(%ebp)
f010479e:	e8 61 c1 02 00       	call   f0130904 <chk2>
f01047a3:	83 c4 10             	add    $0x10,%esp
	curenv = old_curenv;
f01047a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01047a9:	a3 f4 1d 86 f0       	mov    %eax,0xf0861df4

	//sched_print_all();

	if(next_env != NULL)
f01047ae:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01047b2:	74 0b                	je     f01047bf <fos_scheduler+0xbb>
	{
//		cprintf("\nScheduler select program '%s' [%d]... counter = %d\n", next_env->prog_name, next_env->env_id, kclock_read_cnt0());
//		cprintf("Q0 = %d, Q1 = %d, Q2 = %d, Q3 = %d\n", queue_size(&(env_ready_queues[0])), queue_size(&(env_ready_queues[1])), queue_size(&(env_ready_queues[2])), queue_size(&(env_ready_queues[3])));
		env_run(next_env);
f01047b4:	83 ec 0c             	sub    $0xc,%esp
f01047b7:	ff 75 f4             	pushl  -0xc(%ebp)
f01047ba:	e8 f3 54 00 00       	call   f0109cb2 <env_run>
	}
	else
	{
		/*2015*///No more envs... curenv doesn't exist any more! return back to command prompt
		curenv = NULL;
f01047bf:	c7 05 f4 1d 86 f0 00 	movl   $0x0,0xf0861df4
f01047c6:	00 00 00 
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f01047c9:	a1 a8 27 86 f0       	mov    0xf08627a8,%eax
f01047ce:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01047d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01047d4:	0f 22 d8             	mov    %eax,%cr3

		//cprintf("SP = %x\n", read_esp());

		scheduler_status = SCH_STOPPED;
f01047d7:	c7 05 54 27 86 f0 00 	movl   $0x0,0xf0862754
f01047de:	00 00 00 
		//cprintf("[sched] no envs - nothing more to do!\n");
		while (1)
			run_command_prompt(NULL);
f01047e1:	83 ec 0c             	sub    $0xc,%esp
f01047e4:	6a 00                	push   $0x0
f01047e6:	e8 49 c5 ff ff       	call   f0100d34 <run_command_prompt>
f01047eb:	83 c4 10             	add    $0x10,%esp
f01047ee:	eb f1                	jmp    f01047e1 <fos_scheduler+0xdd>

f01047f0 <sched_init_RR>:

	}
}

void sched_init_RR(uint8 quantum)
{
f01047f0:	55                   	push   %ebp
f01047f1:	89 e5                	mov    %esp,%ebp
f01047f3:	83 ec 18             	sub    $0x18,%esp
f01047f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01047f9:	88 45 f4             	mov    %al,-0xc(%ebp)


	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f01047fc:	c6 05 7c 27 86 f0 01 	movb   $0x1,0xf086277c
#if USE_KHEAP
	sched_delete_ready_queues();
f0104803:	e8 e5 00 00 00       	call   f01048ed <sched_delete_ready_queues>
	env_ready_queues = kmalloc(sizeof(struct Env_Queue));
f0104808:	83 ec 0c             	sub    $0xc,%esp
f010480b:	6a 10                	push   $0x10
f010480d:	e8 4f 32 00 00       	call   f0107a61 <kmalloc>
f0104812:	83 c4 10             	add    $0x10,%esp
f0104815:	a3 e4 26 86 f0       	mov    %eax,0xf08626e4
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
f010481a:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f010481f:	0f b6 c0             	movzbl %al,%eax
f0104822:	83 ec 0c             	sub    $0xc,%esp
f0104825:	50                   	push   %eax
f0104826:	e8 36 32 00 00       	call   f0107a61 <kmalloc>
f010482b:	83 c4 10             	add    $0x10,%esp
f010482e:	a3 28 27 86 f0       	mov    %eax,0xf0862728
#endif
	quantums[0] = quantum;
f0104833:	a1 28 27 86 f0       	mov    0xf0862728,%eax
f0104838:	8a 55 f4             	mov    -0xc(%ebp),%dl
f010483b:	88 10                	mov    %dl,(%eax)
	kclock_set_quantum(quantums[0]);
f010483d:	a1 28 27 86 f0       	mov    0xf0862728,%eax
f0104842:	8a 00                	mov    (%eax),%al
f0104844:	0f b6 c0             	movzbl %al,%eax
f0104847:	83 ec 0c             	sub    $0xc,%esp
f010484a:	50                   	push   %eax
f010484b:	e8 08 fa ff ff       	call   f0104258 <kclock_set_quantum>
f0104850:	83 c4 10             	add    $0x10,%esp
	init_queue(&(env_ready_queues[0]));
f0104853:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f0104858:	83 ec 0c             	sub    $0xc,%esp
f010485b:	50                   	push   %eax
f010485c:	e8 d9 fb ff ff       	call   f010443a <init_queue>
f0104861:	83 c4 10             	add    $0x10,%esp

	//=========================================
	//DON'T CHANGE THESE LINES=================
	scheduler_status = SCH_STOPPED;
f0104864:	c7 05 54 27 86 f0 00 	movl   $0x0,0xf0862754
f010486b:	00 00 00 
	scheduler_method = SCH_RR;
f010486e:	c7 05 48 27 86 f0 00 	movl   $0x0,0xf0862748
f0104875:	00 00 00 
	//=========================================
	//=========================================
}
f0104878:	90                   	nop
f0104879:	c9                   	leave  
f010487a:	c3                   	ret    

f010487b <sched_init_MLFQ>:

void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel)
{
f010487b:	55                   	push   %ebp
f010487c:	89 e5                	mov    %esp,%ebp
f010487e:	83 ec 18             	sub    $0x18,%esp
f0104881:	8b 45 08             	mov    0x8(%ebp),%eax
f0104884:	88 45 f4             	mov    %al,-0xc(%ebp)
#if USE_KHEAP
	//=========================================
	//DON'T CHANGE THESE LINES=================
	sched_delete_ready_queues();
f0104887:	e8 61 00 00 00       	call   f01048ed <sched_delete_ready_queues>

	//=========================================
	//=========================================
	// your code is here, remove the panic and write your code
	panic("sched_init_MLFQ() is not implemented yet...!!");
f010488c:	83 ec 04             	sub    $0x4,%esp
f010488f:	68 94 5a 13 f0       	push   $0xf0135a94
f0104894:	68 d1 00 00 00       	push   $0xd1
f0104899:	68 0b 5a 13 f0       	push   $0xf0135a0b
f010489e:	e8 62 b9 ff ff       	call   f0100205 <_panic>

f01048a3 <sched_init>:

}


void sched_init()
{
f01048a3:	55                   	push   %ebp
f01048a4:	89 e5                	mov    %esp,%ebp
f01048a6:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f01048a9:	c7 05 04 27 86 f0 00 	movl   $0x0,0xf0862704
f01048b0:	00 00 00 

	sched_init_RR(CLOCK_INTERVAL_IN_MS);
f01048b3:	83 ec 0c             	sub    $0xc,%esp
f01048b6:	6a 0a                	push   $0xa
f01048b8:	e8 33 ff ff ff       	call   f01047f0 <sched_init_RR>
f01048bd:	83 c4 10             	add    $0x10,%esp

	init_queue(&env_new_queue);
f01048c0:	83 ec 0c             	sub    $0xc,%esp
f01048c3:	68 38 27 86 f0       	push   $0xf0862738
f01048c8:	e8 6d fb ff ff       	call   f010443a <init_queue>
f01048cd:	83 c4 10             	add    $0x10,%esp
	init_queue(&env_exit_queue);
f01048d0:	83 ec 0c             	sub    $0xc,%esp
f01048d3:	68 f0 26 86 f0       	push   $0xf08626f0
f01048d8:	e8 5d fb ff ff       	call   f010443a <init_queue>
f01048dd:	83 c4 10             	add    $0x10,%esp
	scheduler_status = SCH_STOPPED;
f01048e0:	c7 05 54 27 86 f0 00 	movl   $0x0,0xf0862754
f01048e7:	00 00 00 
}
f01048ea:	90                   	nop
f01048eb:	c9                   	leave  
f01048ec:	c3                   	ret    

f01048ed <sched_delete_ready_queues>:

void sched_delete_ready_queues()
{
f01048ed:	55                   	push   %ebp
f01048ee:	89 e5                	mov    %esp,%ebp
f01048f0:	83 ec 08             	sub    $0x8,%esp
#if USE_KHEAP
	if (env_ready_queues != NULL)
f01048f3:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f01048f8:	85 c0                	test   %eax,%eax
f01048fa:	74 11                	je     f010490d <sched_delete_ready_queues+0x20>
		kfree(env_ready_queues);
f01048fc:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f0104901:	83 ec 0c             	sub    $0xc,%esp
f0104904:	50                   	push   %eax
f0104905:	e8 6d 32 00 00       	call   f0107b77 <kfree>
f010490a:	83 c4 10             	add    $0x10,%esp
	if (quantums != NULL)
f010490d:	a1 28 27 86 f0       	mov    0xf0862728,%eax
f0104912:	85 c0                	test   %eax,%eax
f0104914:	74 11                	je     f0104927 <sched_delete_ready_queues+0x3a>
		kfree(quantums);
f0104916:	a1 28 27 86 f0       	mov    0xf0862728,%eax
f010491b:	83 ec 0c             	sub    $0xc,%esp
f010491e:	50                   	push   %eax
f010491f:	e8 53 32 00 00       	call   f0107b77 <kfree>
f0104924:	83 c4 10             	add    $0x10,%esp
#endif
}
f0104927:	90                   	nop
f0104928:	c9                   	leave  
f0104929:	c3                   	ret    

f010492a <sched_insert_ready>:
void sched_insert_ready(struct Env* env)
{
f010492a:	55                   	push   %ebp
f010492b:	89 e5                	mov    %esp,%ebp
f010492d:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104930:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104934:	74 1e                	je     f0104954 <sched_insert_ready+0x2a>
	{
		env->env_status = ENV_READY ;
f0104936:	8b 45 08             	mov    0x8(%ebp),%eax
f0104939:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
		enqueue(&(env_ready_queues[0]), env);
f0104940:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f0104945:	83 ec 08             	sub    $0x8,%esp
f0104948:	ff 75 08             	pushl  0x8(%ebp)
f010494b:	50                   	push   %eax
f010494c:	e8 2a fb ff ff       	call   f010447b <enqueue>
f0104951:	83 c4 10             	add    $0x10,%esp
	}
}
f0104954:	90                   	nop
f0104955:	c9                   	leave  
f0104956:	c3                   	ret    

f0104957 <sched_remove_ready>:


void sched_remove_ready(struct Env* env)
{
f0104957:	55                   	push   %ebp
f0104958:	89 e5                	mov    %esp,%ebp
f010495a:	83 ec 18             	sub    $0x18,%esp
	if(env != NULL)
f010495d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104961:	0f 84 fe 00 00 00    	je     f0104a65 <sched_remove_ready+0x10e>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104967:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010496e:	e9 e1 00 00 00       	jmp    f0104a54 <sched_remove_ready+0xfd>
		{
			struct Env * ptr_env = find_env_in_queue(&(env_ready_queues[i]), env->env_id);
f0104973:	8b 45 08             	mov    0x8(%ebp),%eax
f0104976:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104979:	89 c2                	mov    %eax,%edx
f010497b:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f0104980:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0104983:	c1 e1 04             	shl    $0x4,%ecx
f0104986:	01 c8                	add    %ecx,%eax
f0104988:	52                   	push   %edx
f0104989:	50                   	push   %eax
f010498a:	e8 ee fc ff ff       	call   f010467d <find_env_in_queue>
f010498f:	83 c4 08             	add    $0x8,%esp
f0104992:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (ptr_env != NULL)
f0104995:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0104999:	0f 84 b2 00 00 00    	je     f0104a51 <sched_remove_ready+0xfa>
			{
				LIST_REMOVE(&(env_ready_queues[i]), env);
f010499f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01049a3:	75 17                	jne    f01049bc <sched_remove_ready+0x65>
f01049a5:	83 ec 04             	sub    $0x4,%esp
f01049a8:	68 3f 5a 13 f0       	push   $0xf0135a3f
f01049ad:	68 0b 01 00 00       	push   $0x10b
f01049b2:	68 0b 5a 13 f0       	push   $0xf0135a0b
f01049b7:	e8 49 b8 ff ff       	call   f0100205 <_panic>
f01049bc:	8b 45 08             	mov    0x8(%ebp),%eax
f01049bf:	8b 40 44             	mov    0x44(%eax),%eax
f01049c2:	85 c0                	test   %eax,%eax
f01049c4:	74 11                	je     f01049d7 <sched_remove_ready+0x80>
f01049c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01049c9:	8b 40 44             	mov    0x44(%eax),%eax
f01049cc:	8b 55 08             	mov    0x8(%ebp),%edx
f01049cf:	8b 52 48             	mov    0x48(%edx),%edx
f01049d2:	89 50 48             	mov    %edx,0x48(%eax)
f01049d5:	eb 16                	jmp    f01049ed <sched_remove_ready+0x96>
f01049d7:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f01049dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01049df:	c1 e2 04             	shl    $0x4,%edx
f01049e2:	01 c2                	add    %eax,%edx
f01049e4:	8b 45 08             	mov    0x8(%ebp),%eax
f01049e7:	8b 40 48             	mov    0x48(%eax),%eax
f01049ea:	89 42 04             	mov    %eax,0x4(%edx)
f01049ed:	8b 45 08             	mov    0x8(%ebp),%eax
f01049f0:	8b 40 48             	mov    0x48(%eax),%eax
f01049f3:	85 c0                	test   %eax,%eax
f01049f5:	74 11                	je     f0104a08 <sched_remove_ready+0xb1>
f01049f7:	8b 45 08             	mov    0x8(%ebp),%eax
f01049fa:	8b 40 48             	mov    0x48(%eax),%eax
f01049fd:	8b 55 08             	mov    0x8(%ebp),%edx
f0104a00:	8b 52 44             	mov    0x44(%edx),%edx
f0104a03:	89 50 44             	mov    %edx,0x44(%eax)
f0104a06:	eb 15                	jmp    f0104a1d <sched_remove_ready+0xc6>
f0104a08:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f0104a0d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a10:	c1 e2 04             	shl    $0x4,%edx
f0104a13:	01 c2                	add    %eax,%edx
f0104a15:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a18:	8b 40 44             	mov    0x44(%eax),%eax
f0104a1b:	89 02                	mov    %eax,(%edx)
f0104a1d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a20:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104a27:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a2a:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104a31:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f0104a36:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a39:	c1 e2 04             	shl    $0x4,%edx
f0104a3c:	01 d0                	add    %edx,%eax
f0104a3e:	8b 50 0c             	mov    0xc(%eax),%edx
f0104a41:	4a                   	dec    %edx
f0104a42:	89 50 0c             	mov    %edx,0xc(%eax)
				env->env_status = ENV_UNKNOWN;
f0104a45:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a48:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
				return;
f0104a4f:	eb 14                	jmp    f0104a65 <sched_remove_ready+0x10e>

void sched_remove_ready(struct Env* env)
{
	if(env != NULL)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104a51:	ff 45 f4             	incl   -0xc(%ebp)
f0104a54:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0104a59:	0f b6 c0             	movzbl %al,%eax
f0104a5c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0104a5f:	0f 8f 0e ff ff ff    	jg     f0104973 <sched_remove_ready+0x1c>
				env->env_status = ENV_UNKNOWN;
				return;
			}
		}
	}
}
f0104a65:	c9                   	leave  
f0104a66:	c3                   	ret    

f0104a67 <sched_insert_new>:

void sched_insert_new(struct Env* env)
{
f0104a67:	55                   	push   %ebp
f0104a68:	89 e5                	mov    %esp,%ebp
f0104a6a:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104a6d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104a71:	74 1d                	je     f0104a90 <sched_insert_new+0x29>
	{
		env->env_status = ENV_NEW ;
f0104a73:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a76:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
		enqueue(&env_new_queue, env);
f0104a7d:	83 ec 08             	sub    $0x8,%esp
f0104a80:	ff 75 08             	pushl  0x8(%ebp)
f0104a83:	68 38 27 86 f0       	push   $0xf0862738
f0104a88:	e8 ee f9 ff ff       	call   f010447b <enqueue>
f0104a8d:	83 c4 10             	add    $0x10,%esp
	}
}
f0104a90:	90                   	nop
f0104a91:	c9                   	leave  
f0104a92:	c3                   	ret    

f0104a93 <sched_remove_new>:
void sched_remove_new(struct Env* env)
{
f0104a93:	55                   	push   %ebp
f0104a94:	89 e5                	mov    %esp,%ebp
f0104a96:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104a99:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104a9d:	0f 84 92 00 00 00    	je     f0104b35 <sched_remove_new+0xa2>
	{
		LIST_REMOVE(&env_new_queue, env) ;
f0104aa3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104aa7:	75 17                	jne    f0104ac0 <sched_remove_new+0x2d>
f0104aa9:	83 ec 04             	sub    $0x4,%esp
f0104aac:	68 3f 5a 13 f0       	push   $0xf0135a3f
f0104ab1:	68 1f 01 00 00       	push   $0x11f
f0104ab6:	68 0b 5a 13 f0       	push   $0xf0135a0b
f0104abb:	e8 45 b7 ff ff       	call   f0100205 <_panic>
f0104ac0:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ac3:	8b 40 44             	mov    0x44(%eax),%eax
f0104ac6:	85 c0                	test   %eax,%eax
f0104ac8:	74 11                	je     f0104adb <sched_remove_new+0x48>
f0104aca:	8b 45 08             	mov    0x8(%ebp),%eax
f0104acd:	8b 40 44             	mov    0x44(%eax),%eax
f0104ad0:	8b 55 08             	mov    0x8(%ebp),%edx
f0104ad3:	8b 52 48             	mov    0x48(%edx),%edx
f0104ad6:	89 50 48             	mov    %edx,0x48(%eax)
f0104ad9:	eb 0b                	jmp    f0104ae6 <sched_remove_new+0x53>
f0104adb:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ade:	8b 40 48             	mov    0x48(%eax),%eax
f0104ae1:	a3 3c 27 86 f0       	mov    %eax,0xf086273c
f0104ae6:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ae9:	8b 40 48             	mov    0x48(%eax),%eax
f0104aec:	85 c0                	test   %eax,%eax
f0104aee:	74 11                	je     f0104b01 <sched_remove_new+0x6e>
f0104af0:	8b 45 08             	mov    0x8(%ebp),%eax
f0104af3:	8b 40 48             	mov    0x48(%eax),%eax
f0104af6:	8b 55 08             	mov    0x8(%ebp),%edx
f0104af9:	8b 52 44             	mov    0x44(%edx),%edx
f0104afc:	89 50 44             	mov    %edx,0x44(%eax)
f0104aff:	eb 0b                	jmp    f0104b0c <sched_remove_new+0x79>
f0104b01:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b04:	8b 40 44             	mov    0x44(%eax),%eax
f0104b07:	a3 38 27 86 f0       	mov    %eax,0xf0862738
f0104b0c:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b0f:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104b16:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b19:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104b20:	a1 44 27 86 f0       	mov    0xf0862744,%eax
f0104b25:	48                   	dec    %eax
f0104b26:	a3 44 27 86 f0       	mov    %eax,0xf0862744
		env->env_status = ENV_UNKNOWN;
f0104b2b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b2e:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104b35:	90                   	nop
f0104b36:	c9                   	leave  
f0104b37:	c3                   	ret    

f0104b38 <sched_insert_exit>:

void sched_insert_exit(struct Env* env)
{
f0104b38:	55                   	push   %ebp
f0104b39:	89 e5                	mov    %esp,%ebp
f0104b3b:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104b3e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104b42:	74 34                	je     f0104b78 <sched_insert_exit+0x40>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f0104b44:	e8 03 95 00 00       	call   f010e04c <isBufferingEnabled>
f0104b49:	84 c0                	test   %al,%al
f0104b4b:	74 0e                	je     f0104b5b <sched_insert_exit+0x23>
f0104b4d:	83 ec 0c             	sub    $0xc,%esp
f0104b50:	ff 75 08             	pushl  0x8(%ebp)
f0104b53:	e8 c8 65 00 00       	call   f010b120 <cleanup_buffers>
f0104b58:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f0104b5b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b5e:	c7 40 54 05 00 00 00 	movl   $0x5,0x54(%eax)
		enqueue(&env_exit_queue, env);
f0104b65:	83 ec 08             	sub    $0x8,%esp
f0104b68:	ff 75 08             	pushl  0x8(%ebp)
f0104b6b:	68 f0 26 86 f0       	push   $0xf08626f0
f0104b70:	e8 06 f9 ff ff       	call   f010447b <enqueue>
f0104b75:	83 c4 10             	add    $0x10,%esp
	}
}
f0104b78:	90                   	nop
f0104b79:	c9                   	leave  
f0104b7a:	c3                   	ret    

f0104b7b <sched_remove_exit>:
void sched_remove_exit(struct Env* env)
{
f0104b7b:	55                   	push   %ebp
f0104b7c:	89 e5                	mov    %esp,%ebp
f0104b7e:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104b81:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104b85:	0f 84 92 00 00 00    	je     f0104c1d <sched_remove_exit+0xa2>
	{
		LIST_REMOVE(&env_exit_queue, env) ;
f0104b8b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104b8f:	75 17                	jne    f0104ba8 <sched_remove_exit+0x2d>
f0104b91:	83 ec 04             	sub    $0x4,%esp
f0104b94:	68 3f 5a 13 f0       	push   $0xf0135a3f
f0104b99:	68 31 01 00 00       	push   $0x131
f0104b9e:	68 0b 5a 13 f0       	push   $0xf0135a0b
f0104ba3:	e8 5d b6 ff ff       	call   f0100205 <_panic>
f0104ba8:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bab:	8b 40 44             	mov    0x44(%eax),%eax
f0104bae:	85 c0                	test   %eax,%eax
f0104bb0:	74 11                	je     f0104bc3 <sched_remove_exit+0x48>
f0104bb2:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bb5:	8b 40 44             	mov    0x44(%eax),%eax
f0104bb8:	8b 55 08             	mov    0x8(%ebp),%edx
f0104bbb:	8b 52 48             	mov    0x48(%edx),%edx
f0104bbe:	89 50 48             	mov    %edx,0x48(%eax)
f0104bc1:	eb 0b                	jmp    f0104bce <sched_remove_exit+0x53>
f0104bc3:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bc6:	8b 40 48             	mov    0x48(%eax),%eax
f0104bc9:	a3 f4 26 86 f0       	mov    %eax,0xf08626f4
f0104bce:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bd1:	8b 40 48             	mov    0x48(%eax),%eax
f0104bd4:	85 c0                	test   %eax,%eax
f0104bd6:	74 11                	je     f0104be9 <sched_remove_exit+0x6e>
f0104bd8:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bdb:	8b 40 48             	mov    0x48(%eax),%eax
f0104bde:	8b 55 08             	mov    0x8(%ebp),%edx
f0104be1:	8b 52 44             	mov    0x44(%edx),%edx
f0104be4:	89 50 44             	mov    %edx,0x44(%eax)
f0104be7:	eb 0b                	jmp    f0104bf4 <sched_remove_exit+0x79>
f0104be9:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bec:	8b 40 44             	mov    0x44(%eax),%eax
f0104bef:	a3 f0 26 86 f0       	mov    %eax,0xf08626f0
f0104bf4:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bf7:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104bfe:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c01:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104c08:	a1 fc 26 86 f0       	mov    0xf08626fc,%eax
f0104c0d:	48                   	dec    %eax
f0104c0e:	a3 fc 26 86 f0       	mov    %eax,0xf08626fc
		env->env_status = ENV_UNKNOWN;
f0104c13:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c16:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104c1d:	90                   	nop
f0104c1e:	c9                   	leave  
f0104c1f:	c3                   	ret    

f0104c20 <sched_print_all>:

void sched_print_all()
{
f0104c20:	55                   	push   %ebp
f0104c21:	89 e5                	mov    %esp,%ebp
f0104c23:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104c26:	a1 38 27 86 f0       	mov    0xf0862738,%eax
f0104c2b:	85 c0                	test   %eax,%eax
f0104c2d:	74 6c                	je     f0104c9b <sched_print_all+0x7b>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f0104c2f:	83 ec 0c             	sub    $0xc,%esp
f0104c32:	68 c4 5a 13 f0       	push   $0xf0135ac4
f0104c37:	e8 d2 c0 ff ff       	call   f0100d0e <cprintf>
f0104c3c:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104c3f:	a1 38 27 86 f0       	mov    0xf0862738,%eax
f0104c44:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c47:	eb 29                	jmp    f0104c72 <sched_print_all+0x52>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104c49:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c4c:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104c52:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c55:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104c58:	83 ec 04             	sub    $0x4,%esp
f0104c5b:	52                   	push   %edx
f0104c5c:	50                   	push   %eax
f0104c5d:	68 e6 5a 13 f0       	push   $0xf0135ae6
f0104c62:	e8 a7 c0 ff ff       	call   f0100d0e <cprintf>
f0104c67:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104c6a:	a1 40 27 86 f0       	mov    0xf0862740,%eax
f0104c6f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c72:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104c76:	74 08                	je     f0104c80 <sched_print_all+0x60>
f0104c78:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c7b:	8b 40 44             	mov    0x44(%eax),%eax
f0104c7e:	eb 05                	jmp    f0104c85 <sched_print_all+0x65>
f0104c80:	b8 00 00 00 00       	mov    $0x0,%eax
f0104c85:	a3 40 27 86 f0       	mov    %eax,0xf0862740
f0104c8a:	a1 40 27 86 f0       	mov    0xf0862740,%eax
f0104c8f:	85 c0                	test   %eax,%eax
f0104c91:	75 b6                	jne    f0104c49 <sched_print_all+0x29>
f0104c93:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104c97:	75 b0                	jne    f0104c49 <sched_print_all+0x29>
f0104c99:	eb 10                	jmp    f0104cab <sched_print_all+0x8b>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f0104c9b:	83 ec 0c             	sub    $0xc,%esp
f0104c9e:	68 f0 5a 13 f0       	push   $0xf0135af0
f0104ca3:	e8 66 c0 ff ff       	call   f0100d0e <cprintf>
f0104ca8:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104cab:	83 ec 0c             	sub    $0xc,%esp
f0104cae:	68 0c 5b 13 f0       	push   $0xf0135b0c
f0104cb3:	e8 56 c0 ff ff       	call   f0100d0e <cprintf>
f0104cb8:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104cbb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104cc2:	e9 ca 00 00 00       	jmp    f0104d91 <sched_print_all+0x171>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104cc7:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f0104ccc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104ccf:	c1 e2 04             	shl    $0x4,%edx
f0104cd2:	01 d0                	add    %edx,%eax
f0104cd4:	8b 00                	mov    (%eax),%eax
f0104cd6:	85 c0                	test   %eax,%eax
f0104cd8:	0f 84 8d 00 00 00    	je     f0104d6b <sched_print_all+0x14b>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f0104cde:	83 ec 08             	sub    $0x8,%esp
f0104ce1:	ff 75 f0             	pushl  -0x10(%ebp)
f0104ce4:	68 40 5b 13 f0       	push   $0xf0135b40
f0104ce9:	e8 20 c0 ff ff       	call   f0100d0e <cprintf>
f0104cee:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104cf1:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f0104cf6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104cf9:	c1 e2 04             	shl    $0x4,%edx
f0104cfc:	01 d0                	add    %edx,%eax
f0104cfe:	8b 00                	mov    (%eax),%eax
f0104d00:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d03:	eb 34                	jmp    f0104d39 <sched_print_all+0x119>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104d05:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d08:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104d0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d11:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104d14:	83 ec 04             	sub    $0x4,%esp
f0104d17:	52                   	push   %edx
f0104d18:	50                   	push   %eax
f0104d19:	68 e6 5a 13 f0       	push   $0xf0135ae6
f0104d1e:	e8 eb bf ff ff       	call   f0100d0e <cprintf>
f0104d23:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104d26:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f0104d2b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104d2e:	c1 e2 04             	shl    $0x4,%edx
f0104d31:	01 d0                	add    %edx,%eax
f0104d33:	8b 40 08             	mov    0x8(%eax),%eax
f0104d36:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d39:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f0104d3e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104d41:	c1 e2 04             	shl    $0x4,%edx
f0104d44:	01 d0                	add    %edx,%eax
f0104d46:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104d4a:	74 08                	je     f0104d54 <sched_print_all+0x134>
f0104d4c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104d4f:	8b 52 44             	mov    0x44(%edx),%edx
f0104d52:	eb 05                	jmp    f0104d59 <sched_print_all+0x139>
f0104d54:	ba 00 00 00 00       	mov    $0x0,%edx
f0104d59:	89 50 08             	mov    %edx,0x8(%eax)
f0104d5c:	8b 40 08             	mov    0x8(%eax),%eax
f0104d5f:	85 c0                	test   %eax,%eax
f0104d61:	75 a2                	jne    f0104d05 <sched_print_all+0xe5>
f0104d63:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104d67:	75 9c                	jne    f0104d05 <sched_print_all+0xe5>
f0104d69:	eb 13                	jmp    f0104d7e <sched_print_all+0x15e>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f0104d6b:	83 ec 08             	sub    $0x8,%esp
f0104d6e:	ff 75 f0             	pushl  -0x10(%ebp)
f0104d71:	68 68 5b 13 f0       	push   $0xf0135b68
f0104d76:	e8 93 bf ff ff       	call   f0100d0e <cprintf>
f0104d7b:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0104d7e:	83 ec 0c             	sub    $0xc,%esp
f0104d81:	68 0c 5b 13 f0       	push   $0xf0135b0c
f0104d86:	e8 83 bf ff ff       	call   f0100d0e <cprintf>
f0104d8b:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104d8e:	ff 45 f0             	incl   -0x10(%ebp)
f0104d91:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0104d96:	0f b6 c0             	movzbl %al,%eax
f0104d99:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0104d9c:	0f 8f 25 ff ff ff    	jg     f0104cc7 <sched_print_all+0xa7>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
f0104da2:	a1 f0 26 86 f0       	mov    0xf08626f0,%eax
f0104da7:	85 c0                	test   %eax,%eax
f0104da9:	74 6c                	je     f0104e17 <sched_print_all+0x1f7>
	{
		cprintf("The processes in EXIT queue are:\n");
f0104dab:	83 ec 0c             	sub    $0xc,%esp
f0104dae:	68 8c 5b 13 f0       	push   $0xf0135b8c
f0104db3:	e8 56 bf ff ff       	call   f0100d0e <cprintf>
f0104db8:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104dbb:	a1 f0 26 86 f0       	mov    0xf08626f0,%eax
f0104dc0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104dc3:	eb 29                	jmp    f0104dee <sched_print_all+0x1ce>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104dc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104dc8:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104dce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104dd1:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104dd4:	83 ec 04             	sub    $0x4,%esp
f0104dd7:	52                   	push   %edx
f0104dd8:	50                   	push   %eax
f0104dd9:	68 e6 5a 13 f0       	push   $0xf0135ae6
f0104dde:	e8 2b bf ff ff       	call   f0100d0e <cprintf>
f0104de3:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104de6:	a1 f8 26 86 f0       	mov    0xf08626f8,%eax
f0104deb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104dee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104df2:	74 08                	je     f0104dfc <sched_print_all+0x1dc>
f0104df4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104df7:	8b 40 44             	mov    0x44(%eax),%eax
f0104dfa:	eb 05                	jmp    f0104e01 <sched_print_all+0x1e1>
f0104dfc:	b8 00 00 00 00       	mov    $0x0,%eax
f0104e01:	a3 f8 26 86 f0       	mov    %eax,0xf08626f8
f0104e06:	a1 f8 26 86 f0       	mov    0xf08626f8,%eax
f0104e0b:	85 c0                	test   %eax,%eax
f0104e0d:	75 b6                	jne    f0104dc5 <sched_print_all+0x1a5>
f0104e0f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e13:	75 b0                	jne    f0104dc5 <sched_print_all+0x1a5>
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
	}
}
f0104e15:	eb 10                	jmp    f0104e27 <sched_print_all+0x207>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0104e17:	83 ec 0c             	sub    $0xc,%esp
f0104e1a:	68 ae 5b 13 f0       	push   $0xf0135bae
f0104e1f:	e8 ea be ff ff       	call   f0100d0e <cprintf>
f0104e24:	83 c4 10             	add    $0x10,%esp
	}
}
f0104e27:	90                   	nop
f0104e28:	c9                   	leave  
f0104e29:	c3                   	ret    

f0104e2a <sched_run_all>:

void sched_run_all()
{
f0104e2a:	55                   	push   %ebp
f0104e2b:	89 e5                	mov    %esp,%ebp
f0104e2d:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0104e30:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104e37:	a1 38 27 86 f0       	mov    0xf0862738,%eax
f0104e3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e3f:	eb 24                	jmp    f0104e65 <sched_run_all+0x3b>
	{
		sched_remove_new(ptr_env);
f0104e41:	83 ec 0c             	sub    $0xc,%esp
f0104e44:	ff 75 f4             	pushl  -0xc(%ebp)
f0104e47:	e8 47 fc ff ff       	call   f0104a93 <sched_remove_new>
f0104e4c:	83 c4 10             	add    $0x10,%esp
		sched_insert_ready(ptr_env);
f0104e4f:	83 ec 0c             	sub    $0xc,%esp
f0104e52:	ff 75 f4             	pushl  -0xc(%ebp)
f0104e55:	e8 d0 fa ff ff       	call   f010492a <sched_insert_ready>
f0104e5a:	83 c4 10             	add    $0x10,%esp
}

void sched_run_all()
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104e5d:	a1 40 27 86 f0       	mov    0xf0862740,%eax
f0104e62:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e65:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e69:	74 08                	je     f0104e73 <sched_run_all+0x49>
f0104e6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e6e:	8b 40 44             	mov    0x44(%eax),%eax
f0104e71:	eb 05                	jmp    f0104e78 <sched_run_all+0x4e>
f0104e73:	b8 00 00 00 00       	mov    $0x0,%eax
f0104e78:	a3 40 27 86 f0       	mov    %eax,0xf0862740
f0104e7d:	a1 40 27 86 f0       	mov    0xf0862740,%eax
f0104e82:	85 c0                	test   %eax,%eax
f0104e84:	75 bb                	jne    f0104e41 <sched_run_all+0x17>
f0104e86:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e8a:	75 b5                	jne    f0104e41 <sched_run_all+0x17>
	{
		sched_remove_new(ptr_env);
		sched_insert_ready(ptr_env);
	}
	/*2015*///if scheduler not run yet, then invoke it!
	if (scheduler_status == SCH_STOPPED)
f0104e8c:	a1 54 27 86 f0       	mov    0xf0862754,%eax
f0104e91:	85 c0                	test   %eax,%eax
f0104e93:	75 05                	jne    f0104e9a <sched_run_all+0x70>
		fos_scheduler();
f0104e95:	e8 6a f8 ff ff       	call   f0104704 <fos_scheduler>
}
f0104e9a:	90                   	nop
f0104e9b:	c9                   	leave  
f0104e9c:	c3                   	ret    

f0104e9d <sched_kill_all>:

void sched_kill_all()
{
f0104e9d:	55                   	push   %ebp
f0104e9e:	89 e5                	mov    %esp,%ebp
f0104ea0:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104ea3:	a1 38 27 86 f0       	mov    0xf0862738,%eax
f0104ea8:	85 c0                	test   %eax,%eax
f0104eaa:	0f 84 98 00 00 00    	je     f0104f48 <sched_kill_all+0xab>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f0104eb0:	83 ec 0c             	sub    $0xc,%esp
f0104eb3:	68 cc 5b 13 f0       	push   $0xf0135bcc
f0104eb8:	e8 51 be ff ff       	call   f0100d0e <cprintf>
f0104ebd:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104ec0:	a1 38 27 86 f0       	mov    0xf0862738,%eax
f0104ec5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104ec8:	eb 55                	jmp    f0104f1f <sched_kill_all+0x82>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104eca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ecd:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104ed3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ed6:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104ed9:	83 ec 04             	sub    $0x4,%esp
f0104edc:	52                   	push   %edx
f0104edd:	50                   	push   %eax
f0104ede:	68 f8 5b 13 f0       	push   $0xf0135bf8
f0104ee3:	e8 26 be ff ff       	call   f0100d0e <cprintf>
f0104ee8:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f0104eeb:	83 ec 0c             	sub    $0xc,%esp
f0104eee:	ff 75 f4             	pushl  -0xc(%ebp)
f0104ef1:	e8 9d fb ff ff       	call   f0104a93 <sched_remove_new>
f0104ef6:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0104ef9:	83 ec 0c             	sub    $0xc,%esp
f0104efc:	ff 75 f4             	pushl  -0xc(%ebp)
f0104eff:	e8 02 4e 00 00       	call   f0109d06 <env_free>
f0104f04:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0104f07:	83 ec 0c             	sub    $0xc,%esp
f0104f0a:	68 0b 5c 13 f0       	push   $0xf0135c0b
f0104f0f:	e8 fa bd ff ff       	call   f0100d0e <cprintf>
f0104f14:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104f17:	a1 40 27 86 f0       	mov    0xf0862740,%eax
f0104f1c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104f1f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f23:	74 08                	je     f0104f2d <sched_kill_all+0x90>
f0104f25:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f28:	8b 40 44             	mov    0x44(%eax),%eax
f0104f2b:	eb 05                	jmp    f0104f32 <sched_kill_all+0x95>
f0104f2d:	b8 00 00 00 00       	mov    $0x0,%eax
f0104f32:	a3 40 27 86 f0       	mov    %eax,0xf0862740
f0104f37:	a1 40 27 86 f0       	mov    0xf0862740,%eax
f0104f3c:	85 c0                	test   %eax,%eax
f0104f3e:	75 8a                	jne    f0104eca <sched_kill_all+0x2d>
f0104f40:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f44:	75 84                	jne    f0104eca <sched_kill_all+0x2d>
f0104f46:	eb 10                	jmp    f0104f58 <sched_kill_all+0xbb>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f0104f48:	83 ec 0c             	sub    $0xc,%esp
f0104f4b:	68 11 5c 13 f0       	push   $0xf0135c11
f0104f50:	e8 b9 bd ff ff       	call   f0100d0e <cprintf>
f0104f55:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104f58:	83 ec 0c             	sub    $0xc,%esp
f0104f5b:	68 0c 5b 13 f0       	push   $0xf0135b0c
f0104f60:	e8 a9 bd ff ff       	call   f0100d0e <cprintf>
f0104f65:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104f68:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104f6f:	e9 99 01 00 00       	jmp    f010510d <sched_kill_all+0x270>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104f74:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f0104f79:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104f7c:	c1 e2 04             	shl    $0x4,%edx
f0104f7f:	01 d0                	add    %edx,%eax
f0104f81:	8b 00                	mov    (%eax),%eax
f0104f83:	85 c0                	test   %eax,%eax
f0104f85:	0f 84 5c 01 00 00    	je     f01050e7 <sched_kill_all+0x24a>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f0104f8b:	83 ec 08             	sub    $0x8,%esp
f0104f8e:	ff 75 f0             	pushl  -0x10(%ebp)
f0104f91:	68 2c 5c 13 f0       	push   $0xf0135c2c
f0104f96:	e8 73 bd ff ff       	call   f0100d0e <cprintf>
f0104f9b:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104f9e:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f0104fa3:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104fa6:	c1 e2 04             	shl    $0x4,%edx
f0104fa9:	01 d0                	add    %edx,%eax
f0104fab:	8b 00                	mov    (%eax),%eax
f0104fad:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104fb0:	e9 f8 00 00 00       	jmp    f01050ad <sched_kill_all+0x210>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104fb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fb8:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104fbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fc1:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104fc4:	83 ec 04             	sub    $0x4,%esp
f0104fc7:	52                   	push   %edx
f0104fc8:	50                   	push   %eax
f0104fc9:	68 f8 5b 13 f0       	push   $0xf0135bf8
f0104fce:	e8 3b bd ff ff       	call   f0100d0e <cprintf>
f0104fd3:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0104fd6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104fda:	75 17                	jne    f0104ff3 <sched_kill_all+0x156>
f0104fdc:	83 ec 04             	sub    $0x4,%esp
f0104fdf:	68 3f 5a 13 f0       	push   $0xf0135a3f
f0104fe4:	68 8c 01 00 00       	push   $0x18c
f0104fe9:	68 0b 5a 13 f0       	push   $0xf0135a0b
f0104fee:	e8 12 b2 ff ff       	call   f0100205 <_panic>
f0104ff3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ff6:	8b 40 44             	mov    0x44(%eax),%eax
f0104ff9:	85 c0                	test   %eax,%eax
f0104ffb:	74 11                	je     f010500e <sched_kill_all+0x171>
f0104ffd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105000:	8b 40 44             	mov    0x44(%eax),%eax
f0105003:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105006:	8b 52 48             	mov    0x48(%edx),%edx
f0105009:	89 50 48             	mov    %edx,0x48(%eax)
f010500c:	eb 16                	jmp    f0105024 <sched_kill_all+0x187>
f010500e:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f0105013:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105016:	c1 e2 04             	shl    $0x4,%edx
f0105019:	01 c2                	add    %eax,%edx
f010501b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010501e:	8b 40 48             	mov    0x48(%eax),%eax
f0105021:	89 42 04             	mov    %eax,0x4(%edx)
f0105024:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105027:	8b 40 48             	mov    0x48(%eax),%eax
f010502a:	85 c0                	test   %eax,%eax
f010502c:	74 11                	je     f010503f <sched_kill_all+0x1a2>
f010502e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105031:	8b 40 48             	mov    0x48(%eax),%eax
f0105034:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105037:	8b 52 44             	mov    0x44(%edx),%edx
f010503a:	89 50 44             	mov    %edx,0x44(%eax)
f010503d:	eb 15                	jmp    f0105054 <sched_kill_all+0x1b7>
f010503f:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f0105044:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105047:	c1 e2 04             	shl    $0x4,%edx
f010504a:	01 c2                	add    %eax,%edx
f010504c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010504f:	8b 40 44             	mov    0x44(%eax),%eax
f0105052:	89 02                	mov    %eax,(%edx)
f0105054:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105057:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010505e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105061:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105068:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f010506d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105070:	c1 e2 04             	shl    $0x4,%edx
f0105073:	01 d0                	add    %edx,%eax
f0105075:	8b 50 0c             	mov    0xc(%eax),%edx
f0105078:	4a                   	dec    %edx
f0105079:	89 50 0c             	mov    %edx,0xc(%eax)
				env_free(ptr_env);
f010507c:	83 ec 0c             	sub    $0xc,%esp
f010507f:	ff 75 f4             	pushl  -0xc(%ebp)
f0105082:	e8 7f 4c 00 00       	call   f0109d06 <env_free>
f0105087:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f010508a:	83 ec 0c             	sub    $0xc,%esp
f010508d:	68 0b 5c 13 f0       	push   $0xf0135c0b
f0105092:	e8 77 bc ff ff       	call   f0100d0e <cprintf>
f0105097:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010509a:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f010509f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01050a2:	c1 e2 04             	shl    $0x4,%edx
f01050a5:	01 d0                	add    %edx,%eax
f01050a7:	8b 40 08             	mov    0x8(%eax),%eax
f01050aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01050ad:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f01050b2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01050b5:	c1 e2 04             	shl    $0x4,%edx
f01050b8:	01 d0                	add    %edx,%eax
f01050ba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01050be:	74 08                	je     f01050c8 <sched_kill_all+0x22b>
f01050c0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01050c3:	8b 52 44             	mov    0x44(%edx),%edx
f01050c6:	eb 05                	jmp    f01050cd <sched_kill_all+0x230>
f01050c8:	ba 00 00 00 00       	mov    $0x0,%edx
f01050cd:	89 50 08             	mov    %edx,0x8(%eax)
f01050d0:	8b 40 08             	mov    0x8(%eax),%eax
f01050d3:	85 c0                	test   %eax,%eax
f01050d5:	0f 85 da fe ff ff    	jne    f0104fb5 <sched_kill_all+0x118>
f01050db:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01050df:	0f 85 d0 fe ff ff    	jne    f0104fb5 <sched_kill_all+0x118>
f01050e5:	eb 13                	jmp    f01050fa <sched_kill_all+0x25d>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f01050e7:	83 ec 08             	sub    $0x8,%esp
f01050ea:	ff 75 f0             	pushl  -0x10(%ebp)
f01050ed:	68 68 5b 13 f0       	push   $0xf0135b68
f01050f2:	e8 17 bc ff ff       	call   f0100d0e <cprintf>
f01050f7:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f01050fa:	83 ec 0c             	sub    $0xc,%esp
f01050fd:	68 0c 5b 13 f0       	push   $0xf0135b0c
f0105102:	e8 07 bc ff ff       	call   f0100d0e <cprintf>
f0105107:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f010510a:	ff 45 f0             	incl   -0x10(%ebp)
f010510d:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0105112:	0f b6 c0             	movzbl %al,%eax
f0105115:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105118:	0f 8f 56 fe ff ff    	jg     f0104f74 <sched_kill_all+0xd7>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&env_exit_queue))
f010511e:	a1 f0 26 86 f0       	mov    0xf08626f0,%eax
f0105123:	85 c0                	test   %eax,%eax
f0105125:	0f 84 98 00 00 00    	je     f01051c3 <sched_kill_all+0x326>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f010512b:	83 ec 0c             	sub    $0xc,%esp
f010512e:	68 60 5c 13 f0       	push   $0xf0135c60
f0105133:	e8 d6 bb ff ff       	call   f0100d0e <cprintf>
f0105138:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f010513b:	a1 f0 26 86 f0       	mov    0xf08626f0,%eax
f0105140:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105143:	eb 55                	jmp    f010519a <sched_kill_all+0x2fd>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105145:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105148:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f010514e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105151:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105154:	83 ec 04             	sub    $0x4,%esp
f0105157:	52                   	push   %edx
f0105158:	50                   	push   %eax
f0105159:	68 f8 5b 13 f0       	push   $0xf0135bf8
f010515e:	e8 ab bb ff ff       	call   f0100d0e <cprintf>
f0105163:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f0105166:	83 ec 0c             	sub    $0xc,%esp
f0105169:	ff 75 f4             	pushl  -0xc(%ebp)
f010516c:	e8 0a fa ff ff       	call   f0104b7b <sched_remove_exit>
f0105171:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105174:	83 ec 0c             	sub    $0xc,%esp
f0105177:	ff 75 f4             	pushl  -0xc(%ebp)
f010517a:	e8 87 4b 00 00       	call   f0109d06 <env_free>
f010517f:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0105182:	83 ec 0c             	sub    $0xc,%esp
f0105185:	68 0b 5c 13 f0       	push   $0xf0135c0b
f010518a:	e8 7f bb ff ff       	call   f0100d0e <cprintf>
f010518f:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105192:	a1 f8 26 86 f0       	mov    0xf08626f8,%eax
f0105197:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010519a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010519e:	74 08                	je     f01051a8 <sched_kill_all+0x30b>
f01051a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01051a3:	8b 40 44             	mov    0x44(%eax),%eax
f01051a6:	eb 05                	jmp    f01051ad <sched_kill_all+0x310>
f01051a8:	b8 00 00 00 00       	mov    $0x0,%eax
f01051ad:	a3 f8 26 86 f0       	mov    %eax,0xf08626f8
f01051b2:	a1 f8 26 86 f0       	mov    0xf08626f8,%eax
f01051b7:	85 c0                	test   %eax,%eax
f01051b9:	75 8a                	jne    f0105145 <sched_kill_all+0x2a8>
f01051bb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01051bf:	75 84                	jne    f0105145 <sched_kill_all+0x2a8>
f01051c1:	eb 10                	jmp    f01051d3 <sched_kill_all+0x336>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f01051c3:	83 ec 0c             	sub    $0xc,%esp
f01051c6:	68 ae 5b 13 f0       	push   $0xf0135bae
f01051cb:	e8 3e bb ff ff       	call   f0100d0e <cprintf>
f01051d0:	83 c4 10             	add    $0x10,%esp
	}

	//reinvoke the scheduler since there're no env to return back to it
	curenv = NULL;
f01051d3:	c7 05 f4 1d 86 f0 00 	movl   $0x0,0xf0861df4
f01051da:	00 00 00 
	fos_scheduler();
f01051dd:	e8 22 f5 ff ff       	call   f0104704 <fos_scheduler>

f01051e2 <sched_new_env>:
}


void sched_new_env(struct Env* e)
{
f01051e2:	55                   	push   %ebp
f01051e3:	89 e5                	mov    %esp,%ebp
f01051e5:	83 ec 08             	sub    $0x8,%esp
	//add the given env to the scheduler NEW queue
	if (e!=NULL)
f01051e8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01051ec:	74 0e                	je     f01051fc <sched_new_env+0x1a>
	{
		sched_insert_new(e);
f01051ee:	83 ec 0c             	sub    $0xc,%esp
f01051f1:	ff 75 08             	pushl  0x8(%ebp)
f01051f4:	e8 6e f8 ff ff       	call   f0104a67 <sched_insert_new>
f01051f9:	83 c4 10             	add    $0x10,%esp
	}
}
f01051fc:	90                   	nop
f01051fd:	c9                   	leave  
f01051fe:	c3                   	ret    

f01051ff <sched_run_env>:
	sched_insert_new(e);
}
 */

void sched_run_env(uint32 envId)
{
f01051ff:	55                   	push   %ebp
f0105200:	89 e5                	mov    %esp,%ebp
f0105202:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105205:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f010520c:	a1 38 27 86 f0       	mov    0xf0862738,%eax
f0105211:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105214:	eb 3d                	jmp    f0105253 <sched_run_env+0x54>
	{
		if(ptr_env->env_id == envId)
f0105216:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105219:	8b 40 4c             	mov    0x4c(%eax),%eax
f010521c:	3b 45 08             	cmp    0x8(%ebp),%eax
f010521f:	75 2a                	jne    f010524b <sched_run_env+0x4c>
		{
			sched_remove_new(ptr_env);
f0105221:	83 ec 0c             	sub    $0xc,%esp
f0105224:	ff 75 f4             	pushl  -0xc(%ebp)
f0105227:	e8 67 f8 ff ff       	call   f0104a93 <sched_remove_new>
f010522c:	83 c4 10             	add    $0x10,%esp
			sched_insert_ready(ptr_env);
f010522f:	83 ec 0c             	sub    $0xc,%esp
f0105232:	ff 75 f4             	pushl  -0xc(%ebp)
f0105235:	e8 f0 f6 ff ff       	call   f010492a <sched_insert_ready>
f010523a:	83 c4 10             	add    $0x10,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
f010523d:	a1 54 27 86 f0       	mov    0xf0862754,%eax
f0105242:	85 c0                	test   %eax,%eax
f0105244:	75 36                	jne    f010527c <sched_run_env+0x7d>
			{
				fos_scheduler();
f0105246:	e8 b9 f4 ff ff       	call   f0104704 <fos_scheduler>
 */

void sched_run_env(uint32 envId)
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f010524b:	a1 40 27 86 f0       	mov    0xf0862740,%eax
f0105250:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105253:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105257:	74 08                	je     f0105261 <sched_run_env+0x62>
f0105259:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010525c:	8b 40 44             	mov    0x44(%eax),%eax
f010525f:	eb 05                	jmp    f0105266 <sched_run_env+0x67>
f0105261:	b8 00 00 00 00       	mov    $0x0,%eax
f0105266:	a3 40 27 86 f0       	mov    %eax,0xf0862740
f010526b:	a1 40 27 86 f0       	mov    0xf0862740,%eax
f0105270:	85 c0                	test   %eax,%eax
f0105272:	75 a2                	jne    f0105216 <sched_run_env+0x17>
f0105274:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105278:	75 9c                	jne    f0105216 <sched_run_env+0x17>
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f010527a:	eb 01                	jmp    f010527d <sched_run_env+0x7e>
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
			{
				fos_scheduler();
			}
			break;
f010527c:	90                   	nop
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f010527d:	90                   	nop
f010527e:	c9                   	leave  
f010527f:	c3                   	ret    

f0105280 <sched_exit_env>:

void sched_exit_env(uint32 envId)
{
f0105280:	55                   	push   %ebp
f0105281:	89 e5                	mov    %esp,%ebp
f0105283:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105286:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f010528d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f0105294:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105298:	75 59                	jne    f01052f3 <sched_exit_env+0x73>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010529a:	a1 38 27 86 f0       	mov    0xf0862738,%eax
f010529f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01052a2:	eb 28                	jmp    f01052cc <sched_exit_env+0x4c>
				{
			if(ptr_env->env_id == envId)
f01052a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052a7:	8b 40 4c             	mov    0x4c(%eax),%eax
f01052aa:	3b 45 08             	cmp    0x8(%ebp),%eax
f01052ad:	75 15                	jne    f01052c4 <sched_exit_env+0x44>
			{
				sched_remove_new(ptr_env);
f01052af:	83 ec 0c             	sub    $0xc,%esp
f01052b2:	ff 75 f4             	pushl  -0xc(%ebp)
f01052b5:	e8 d9 f7 ff ff       	call   f0104a93 <sched_remove_new>
f01052ba:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01052bd:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01052c4:	a1 40 27 86 f0       	mov    0xf0862740,%eax
f01052c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01052cc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01052d0:	74 08                	je     f01052da <sched_exit_env+0x5a>
f01052d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052d5:	8b 40 44             	mov    0x44(%eax),%eax
f01052d8:	eb 05                	jmp    f01052df <sched_exit_env+0x5f>
f01052da:	b8 00 00 00 00       	mov    $0x0,%eax
f01052df:	a3 40 27 86 f0       	mov    %eax,0xf0862740
f01052e4:	a1 40 27 86 f0       	mov    0xf0862740,%eax
f01052e9:	85 c0                	test   %eax,%eax
f01052eb:	75 b7                	jne    f01052a4 <sched_exit_env+0x24>
f01052ed:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01052f1:	75 b1                	jne    f01052a4 <sched_exit_env+0x24>
				found = 1;
				//			return;
			}
				}
	}
	if (!found)
f01052f3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01052f7:	0f 85 67 01 00 00    	jne    f0105464 <sched_exit_env+0x1e4>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01052fd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0105304:	e9 47 01 00 00       	jmp    f0105450 <sched_exit_env+0x1d0>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105309:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f010530e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105311:	c1 e2 04             	shl    $0x4,%edx
f0105314:	01 d0                	add    %edx,%eax
f0105316:	8b 00                	mov    (%eax),%eax
f0105318:	85 c0                	test   %eax,%eax
f010531a:	0f 84 27 01 00 00    	je     f0105447 <sched_exit_env+0x1c7>
			{
				ptr_env=NULL;
f0105320:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105327:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f010532c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010532f:	c1 e2 04             	shl    $0x4,%edx
f0105332:	01 d0                	add    %edx,%eax
f0105334:	8b 00                	mov    (%eax),%eax
f0105336:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105339:	e9 d1 00 00 00       	jmp    f010540f <sched_exit_env+0x18f>
				{
					if(ptr_env->env_id == envId)
f010533e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105341:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105344:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105347:	0f 85 af 00 00 00    	jne    f01053fc <sched_exit_env+0x17c>
					{
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f010534d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105351:	75 17                	jne    f010536a <sched_exit_env+0xea>
f0105353:	83 ec 04             	sub    $0x4,%esp
f0105356:	68 3f 5a 13 f0       	push   $0xf0135a3f
f010535b:	68 f7 01 00 00       	push   $0x1f7
f0105360:	68 0b 5a 13 f0       	push   $0xf0135a0b
f0105365:	e8 9b ae ff ff       	call   f0100205 <_panic>
f010536a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010536d:	8b 40 44             	mov    0x44(%eax),%eax
f0105370:	85 c0                	test   %eax,%eax
f0105372:	74 11                	je     f0105385 <sched_exit_env+0x105>
f0105374:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105377:	8b 40 44             	mov    0x44(%eax),%eax
f010537a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010537d:	8b 52 48             	mov    0x48(%edx),%edx
f0105380:	89 50 48             	mov    %edx,0x48(%eax)
f0105383:	eb 16                	jmp    f010539b <sched_exit_env+0x11b>
f0105385:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f010538a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010538d:	c1 e2 04             	shl    $0x4,%edx
f0105390:	01 c2                	add    %eax,%edx
f0105392:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105395:	8b 40 48             	mov    0x48(%eax),%eax
f0105398:	89 42 04             	mov    %eax,0x4(%edx)
f010539b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010539e:	8b 40 48             	mov    0x48(%eax),%eax
f01053a1:	85 c0                	test   %eax,%eax
f01053a3:	74 11                	je     f01053b6 <sched_exit_env+0x136>
f01053a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053a8:	8b 40 48             	mov    0x48(%eax),%eax
f01053ab:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01053ae:	8b 52 44             	mov    0x44(%edx),%edx
f01053b1:	89 50 44             	mov    %edx,0x44(%eax)
f01053b4:	eb 15                	jmp    f01053cb <sched_exit_env+0x14b>
f01053b6:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f01053bb:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01053be:	c1 e2 04             	shl    $0x4,%edx
f01053c1:	01 c2                	add    %eax,%edx
f01053c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053c6:	8b 40 44             	mov    0x44(%eax),%eax
f01053c9:	89 02                	mov    %eax,(%edx)
f01053cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053ce:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01053d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053d8:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01053df:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f01053e4:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01053e7:	c1 e2 04             	shl    $0x4,%edx
f01053ea:	01 d0                	add    %edx,%eax
f01053ec:	8b 50 0c             	mov    0xc(%eax),%edx
f01053ef:	4a                   	dec    %edx
f01053f0:	89 50 0c             	mov    %edx,0xc(%eax)
						found = 1;
f01053f3:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f01053fa:	eb 4b                	jmp    f0105447 <sched_exit_env+0x1c7>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01053fc:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f0105401:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105404:	c1 e2 04             	shl    $0x4,%edx
f0105407:	01 d0                	add    %edx,%eax
f0105409:	8b 40 08             	mov    0x8(%eax),%eax
f010540c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010540f:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f0105414:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105417:	c1 e2 04             	shl    $0x4,%edx
f010541a:	01 d0                	add    %edx,%eax
f010541c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105420:	74 08                	je     f010542a <sched_exit_env+0x1aa>
f0105422:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105425:	8b 52 44             	mov    0x44(%edx),%edx
f0105428:	eb 05                	jmp    f010542f <sched_exit_env+0x1af>
f010542a:	ba 00 00 00 00       	mov    $0x0,%edx
f010542f:	89 50 08             	mov    %edx,0x8(%eax)
f0105432:	8b 40 08             	mov    0x8(%eax),%eax
f0105435:	85 c0                	test   %eax,%eax
f0105437:	0f 85 01 ff ff ff    	jne    f010533e <sched_exit_env+0xbe>
f010543d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105441:	0f 85 f7 fe ff ff    	jne    f010533e <sched_exit_env+0xbe>
						found = 1;
						break;
					}
				}
			}
			if (found)
f0105447:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010544b:	75 16                	jne    f0105463 <sched_exit_env+0x1e3>
			}
				}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010544d:	ff 45 ec             	incl   -0x14(%ebp)
f0105450:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0105455:	0f b6 c0             	movzbl %al,%eax
f0105458:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010545b:	0f 8f a8 fe ff ff    	jg     f0105309 <sched_exit_env+0x89>
f0105461:	eb 01                	jmp    f0105464 <sched_exit_env+0x1e4>
						break;
					}
				}
			}
			if (found)
				break;
f0105463:	90                   	nop
		}
	}
	if (!found)
f0105464:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105468:	75 1c                	jne    f0105486 <sched_exit_env+0x206>
	{
		if (curenv->env_id == envId)
f010546a:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010546f:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105472:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105475:	75 0f                	jne    f0105486 <sched_exit_env+0x206>
		{
			ptr_env = curenv;
f0105477:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010547c:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f010547f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f0105486:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010548a:	74 2a                	je     f01054b6 <sched_exit_env+0x236>
	{
		sched_insert_exit(ptr_env);
f010548c:	83 ec 0c             	sub    $0xc,%esp
f010548f:	ff 75 f4             	pushl  -0xc(%ebp)
f0105492:	e8 a1 f6 ff ff       	call   f0104b38 <sched_insert_exit>
f0105497:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back to an exited env
		if (curenv->env_id == envId)
f010549a:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010549f:	8b 40 4c             	mov    0x4c(%eax),%eax
f01054a2:	3b 45 08             	cmp    0x8(%ebp),%eax
f01054a5:	75 0f                	jne    f01054b6 <sched_exit_env+0x236>
		{
			curenv = NULL;
f01054a7:	c7 05 f4 1d 86 f0 00 	movl   $0x0,0xf0861df4
f01054ae:	00 00 00 
			fos_scheduler();
f01054b1:	e8 4e f2 ff ff       	call   f0104704 <fos_scheduler>
		}
	}
}
f01054b6:	90                   	nop
f01054b7:	c9                   	leave  
f01054b8:	c3                   	ret    

f01054b9 <sched_exit_all_ready_envs>:

/*2018*/
void sched_exit_all_ready_envs()
{
f01054b9:	55                   	push   %ebp
f01054ba:	89 e5                	mov    %esp,%ebp
f01054bc:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01054bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f01054c6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01054cd:	e9 37 01 00 00       	jmp    f0105609 <sched_exit_all_ready_envs+0x150>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f01054d2:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f01054d7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01054da:	c1 e2 04             	shl    $0x4,%edx
f01054dd:	01 d0                	add    %edx,%eax
f01054df:	8b 00                	mov    (%eax),%eax
f01054e1:	85 c0                	test   %eax,%eax
f01054e3:	0f 84 1d 01 00 00    	je     f0105606 <sched_exit_all_ready_envs+0x14d>
		{
			ptr_env=NULL;
f01054e9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01054f0:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f01054f5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01054f8:	c1 e2 04             	shl    $0x4,%edx
f01054fb:	01 d0                	add    %edx,%eax
f01054fd:	8b 00                	mov    (%eax),%eax
f01054ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105502:	e9 c7 00 00 00       	jmp    f01055ce <sched_exit_all_ready_envs+0x115>
			{
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105507:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010550b:	75 17                	jne    f0105524 <sched_exit_all_ready_envs+0x6b>
f010550d:	83 ec 04             	sub    $0x4,%esp
f0105510:	68 3f 5a 13 f0       	push   $0xf0135a3f
f0105515:	68 22 02 00 00       	push   $0x222
f010551a:	68 0b 5a 13 f0       	push   $0xf0135a0b
f010551f:	e8 e1 ac ff ff       	call   f0100205 <_panic>
f0105524:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105527:	8b 40 44             	mov    0x44(%eax),%eax
f010552a:	85 c0                	test   %eax,%eax
f010552c:	74 11                	je     f010553f <sched_exit_all_ready_envs+0x86>
f010552e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105531:	8b 40 44             	mov    0x44(%eax),%eax
f0105534:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105537:	8b 52 48             	mov    0x48(%edx),%edx
f010553a:	89 50 48             	mov    %edx,0x48(%eax)
f010553d:	eb 16                	jmp    f0105555 <sched_exit_all_ready_envs+0x9c>
f010553f:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f0105544:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105547:	c1 e2 04             	shl    $0x4,%edx
f010554a:	01 c2                	add    %eax,%edx
f010554c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010554f:	8b 40 48             	mov    0x48(%eax),%eax
f0105552:	89 42 04             	mov    %eax,0x4(%edx)
f0105555:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105558:	8b 40 48             	mov    0x48(%eax),%eax
f010555b:	85 c0                	test   %eax,%eax
f010555d:	74 11                	je     f0105570 <sched_exit_all_ready_envs+0xb7>
f010555f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105562:	8b 40 48             	mov    0x48(%eax),%eax
f0105565:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105568:	8b 52 44             	mov    0x44(%edx),%edx
f010556b:	89 50 44             	mov    %edx,0x44(%eax)
f010556e:	eb 15                	jmp    f0105585 <sched_exit_all_ready_envs+0xcc>
f0105570:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f0105575:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105578:	c1 e2 04             	shl    $0x4,%edx
f010557b:	01 c2                	add    %eax,%edx
f010557d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105580:	8b 40 44             	mov    0x44(%eax),%eax
f0105583:	89 02                	mov    %eax,(%edx)
f0105585:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105588:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010558f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105592:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105599:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f010559e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01055a1:	c1 e2 04             	shl    $0x4,%edx
f01055a4:	01 d0                	add    %edx,%eax
f01055a6:	8b 50 0c             	mov    0xc(%eax),%edx
f01055a9:	4a                   	dec    %edx
f01055aa:	89 50 0c             	mov    %edx,0xc(%eax)
				sched_insert_exit(ptr_env);
f01055ad:	83 ec 0c             	sub    $0xc,%esp
f01055b0:	ff 75 f4             	pushl  -0xc(%ebp)
f01055b3:	e8 80 f5 ff ff       	call   f0104b38 <sched_insert_exit>
f01055b8:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01055bb:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f01055c0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01055c3:	c1 e2 04             	shl    $0x4,%edx
f01055c6:	01 d0                	add    %edx,%eax
f01055c8:	8b 40 08             	mov    0x8(%eax),%eax
f01055cb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01055ce:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f01055d3:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01055d6:	c1 e2 04             	shl    $0x4,%edx
f01055d9:	01 d0                	add    %edx,%eax
f01055db:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01055df:	74 08                	je     f01055e9 <sched_exit_all_ready_envs+0x130>
f01055e1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01055e4:	8b 52 44             	mov    0x44(%edx),%edx
f01055e7:	eb 05                	jmp    f01055ee <sched_exit_all_ready_envs+0x135>
f01055e9:	ba 00 00 00 00       	mov    $0x0,%edx
f01055ee:	89 50 08             	mov    %edx,0x8(%eax)
f01055f1:	8b 40 08             	mov    0x8(%eax),%eax
f01055f4:	85 c0                	test   %eax,%eax
f01055f6:	0f 85 0b ff ff ff    	jne    f0105507 <sched_exit_all_ready_envs+0x4e>
f01055fc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105600:	0f 85 01 ff ff ff    	jne    f0105507 <sched_exit_all_ready_envs+0x4e>

/*2018*/
void sched_exit_all_ready_envs()
{
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105606:	ff 45 f0             	incl   -0x10(%ebp)
f0105609:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f010560e:	0f b6 c0             	movzbl %al,%eax
f0105611:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105614:	0f 8f b8 fe ff ff    	jg     f01054d2 <sched_exit_all_ready_envs+0x19>
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
}
f010561a:	90                   	nop
f010561b:	c9                   	leave  
f010561c:	c3                   	ret    

f010561d <sched_kill_env>:

/*2015*/
void sched_kill_env(uint32 envId)
{
f010561d:	55                   	push   %ebp
f010561e:	89 e5                	mov    %esp,%ebp
f0105620:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105623:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f010562a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f0105631:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105635:	0f 85 a0 00 00 00    	jne    f01056db <sched_kill_env+0xbe>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010563b:	a1 38 27 86 f0       	mov    0xf0862738,%eax
f0105640:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105643:	eb 67                	jmp    f01056ac <sched_kill_env+0x8f>
					{
			if(ptr_env->env_id == envId)
f0105645:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105648:	8b 40 4c             	mov    0x4c(%eax),%eax
f010564b:	3b 45 08             	cmp    0x8(%ebp),%eax
f010564e:	75 54                	jne    f01056a4 <sched_kill_env+0x87>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f0105650:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105653:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0105659:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010565c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010565f:	83 ec 04             	sub    $0x4,%esp
f0105662:	52                   	push   %edx
f0105663:	50                   	push   %eax
f0105664:	68 8c 5c 13 f0       	push   $0xf0135c8c
f0105669:	e8 a0 b6 ff ff       	call   f0100d0e <cprintf>
f010566e:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f0105671:	83 ec 0c             	sub    $0xc,%esp
f0105674:	ff 75 f4             	pushl  -0xc(%ebp)
f0105677:	e8 17 f4 ff ff       	call   f0104a93 <sched_remove_new>
f010567c:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f010567f:	83 ec 0c             	sub    $0xc,%esp
f0105682:	ff 75 f4             	pushl  -0xc(%ebp)
f0105685:	e8 7c 46 00 00       	call   f0109d06 <env_free>
f010568a:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f010568d:	83 ec 0c             	sub    $0xc,%esp
f0105690:	68 0b 5c 13 f0       	push   $0xf0135c0b
f0105695:	e8 74 b6 ff ff       	call   f0100d0e <cprintf>
f010569a:	83 c4 10             	add    $0x10,%esp
				found = 1;
f010569d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01056a4:	a1 40 27 86 f0       	mov    0xf0862740,%eax
f01056a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01056ac:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056b0:	74 08                	je     f01056ba <sched_kill_env+0x9d>
f01056b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056b5:	8b 40 44             	mov    0x44(%eax),%eax
f01056b8:	eb 05                	jmp    f01056bf <sched_kill_env+0xa2>
f01056ba:	b8 00 00 00 00       	mov    $0x0,%eax
f01056bf:	a3 40 27 86 f0       	mov    %eax,0xf0862740
f01056c4:	a1 40 27 86 f0       	mov    0xf0862740,%eax
f01056c9:	85 c0                	test   %eax,%eax
f01056cb:	0f 85 74 ff ff ff    	jne    f0105645 <sched_kill_env+0x28>
f01056d1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056d5:	0f 85 6a ff ff ff    	jne    f0105645 <sched_kill_env+0x28>
				found = 1;
				//			return;
			}
					}
	}
	if (!found)
f01056db:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01056df:	0f 85 a6 01 00 00    	jne    f010588b <sched_kill_env+0x26e>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01056e5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01056ec:	e9 86 01 00 00       	jmp    f0105877 <sched_kill_env+0x25a>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f01056f1:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f01056f6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01056f9:	c1 e2 04             	shl    $0x4,%edx
f01056fc:	01 d0                	add    %edx,%eax
f01056fe:	8b 00                	mov    (%eax),%eax
f0105700:	85 c0                	test   %eax,%eax
f0105702:	0f 84 66 01 00 00    	je     f010586e <sched_kill_env+0x251>
			{
				ptr_env=NULL;
f0105708:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010570f:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f0105714:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105717:	c1 e2 04             	shl    $0x4,%edx
f010571a:	01 d0                	add    %edx,%eax
f010571c:	8b 00                	mov    (%eax),%eax
f010571e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105721:	e9 10 01 00 00       	jmp    f0105836 <sched_kill_env+0x219>
				{
					if(ptr_env->env_id == envId)
f0105726:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105729:	8b 40 4c             	mov    0x4c(%eax),%eax
f010572c:	3b 45 08             	cmp    0x8(%ebp),%eax
f010572f:	0f 85 ee 00 00 00    	jne    f0105823 <sched_kill_env+0x206>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f0105735:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105738:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f010573e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105741:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105744:	ff 75 ec             	pushl  -0x14(%ebp)
f0105747:	52                   	push   %edx
f0105748:	50                   	push   %eax
f0105749:	68 b4 5c 13 f0       	push   $0xf0135cb4
f010574e:	e8 bb b5 ff ff       	call   f0100d0e <cprintf>
f0105753:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105756:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010575a:	75 17                	jne    f0105773 <sched_kill_env+0x156>
f010575c:	83 ec 04             	sub    $0x4,%esp
f010575f:	68 3f 5a 13 f0       	push   $0xf0135a3f
f0105764:	68 49 02 00 00       	push   $0x249
f0105769:	68 0b 5a 13 f0       	push   $0xf0135a0b
f010576e:	e8 92 aa ff ff       	call   f0100205 <_panic>
f0105773:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105776:	8b 40 44             	mov    0x44(%eax),%eax
f0105779:	85 c0                	test   %eax,%eax
f010577b:	74 11                	je     f010578e <sched_kill_env+0x171>
f010577d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105780:	8b 40 44             	mov    0x44(%eax),%eax
f0105783:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105786:	8b 52 48             	mov    0x48(%edx),%edx
f0105789:	89 50 48             	mov    %edx,0x48(%eax)
f010578c:	eb 16                	jmp    f01057a4 <sched_kill_env+0x187>
f010578e:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f0105793:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105796:	c1 e2 04             	shl    $0x4,%edx
f0105799:	01 c2                	add    %eax,%edx
f010579b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010579e:	8b 40 48             	mov    0x48(%eax),%eax
f01057a1:	89 42 04             	mov    %eax,0x4(%edx)
f01057a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057a7:	8b 40 48             	mov    0x48(%eax),%eax
f01057aa:	85 c0                	test   %eax,%eax
f01057ac:	74 11                	je     f01057bf <sched_kill_env+0x1a2>
f01057ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057b1:	8b 40 48             	mov    0x48(%eax),%eax
f01057b4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01057b7:	8b 52 44             	mov    0x44(%edx),%edx
f01057ba:	89 50 44             	mov    %edx,0x44(%eax)
f01057bd:	eb 15                	jmp    f01057d4 <sched_kill_env+0x1b7>
f01057bf:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f01057c4:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01057c7:	c1 e2 04             	shl    $0x4,%edx
f01057ca:	01 c2                	add    %eax,%edx
f01057cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057cf:	8b 40 44             	mov    0x44(%eax),%eax
f01057d2:	89 02                	mov    %eax,(%edx)
f01057d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057d7:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01057de:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057e1:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01057e8:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f01057ed:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01057f0:	c1 e2 04             	shl    $0x4,%edx
f01057f3:	01 d0                	add    %edx,%eax
f01057f5:	8b 50 0c             	mov    0xc(%eax),%edx
f01057f8:	4a                   	dec    %edx
f01057f9:	89 50 0c             	mov    %edx,0xc(%eax)
						env_free(ptr_env);
f01057fc:	83 ec 0c             	sub    $0xc,%esp
f01057ff:	ff 75 f4             	pushl  -0xc(%ebp)
f0105802:	e8 ff 44 00 00       	call   f0109d06 <env_free>
f0105807:	83 c4 10             	add    $0x10,%esp
						cprintf("DONE\n");
f010580a:	83 ec 0c             	sub    $0xc,%esp
f010580d:	68 0b 5c 13 f0       	push   $0xf0135c0b
f0105812:	e8 f7 b4 ff ff       	call   f0100d0e <cprintf>
f0105817:	83 c4 10             	add    $0x10,%esp
						found = 1;
f010581a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0105821:	eb 4b                	jmp    f010586e <sched_kill_env+0x251>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105823:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f0105828:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010582b:	c1 e2 04             	shl    $0x4,%edx
f010582e:	01 d0                	add    %edx,%eax
f0105830:	8b 40 08             	mov    0x8(%eax),%eax
f0105833:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105836:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f010583b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010583e:	c1 e2 04             	shl    $0x4,%edx
f0105841:	01 d0                	add    %edx,%eax
f0105843:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105847:	74 08                	je     f0105851 <sched_kill_env+0x234>
f0105849:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010584c:	8b 52 44             	mov    0x44(%edx),%edx
f010584f:	eb 05                	jmp    f0105856 <sched_kill_env+0x239>
f0105851:	ba 00 00 00 00       	mov    $0x0,%edx
f0105856:	89 50 08             	mov    %edx,0x8(%eax)
f0105859:	8b 40 08             	mov    0x8(%eax),%eax
f010585c:	85 c0                	test   %eax,%eax
f010585e:	0f 85 c2 fe ff ff    	jne    f0105726 <sched_kill_env+0x109>
f0105864:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105868:	0f 85 b8 fe ff ff    	jne    f0105726 <sched_kill_env+0x109>
						break;
						//return;
					}
				}
			}
			if (found)
f010586e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105872:	75 16                	jne    f010588a <sched_kill_env+0x26d>
			}
					}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105874:	ff 45 ec             	incl   -0x14(%ebp)
f0105877:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f010587c:	0f b6 c0             	movzbl %al,%eax
f010587f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0105882:	0f 8f 69 fe ff ff    	jg     f01056f1 <sched_kill_env+0xd4>
f0105888:	eb 01                	jmp    f010588b <sched_kill_env+0x26e>
						//return;
					}
				}
			}
			if (found)
				break;
f010588a:	90                   	nop
		}
	}
	if (!found)
f010588b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010588f:	0f 85 a7 00 00 00    	jne    f010593c <sched_kill_env+0x31f>
	{
		ptr_env=NULL;
f0105895:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f010589c:	a1 f0 26 86 f0       	mov    0xf08626f0,%eax
f01058a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01058a4:	eb 67                	jmp    f010590d <sched_kill_env+0x2f0>
		{
			if(ptr_env->env_id == envId)
f01058a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058a9:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058ac:	3b 45 08             	cmp    0x8(%ebp),%eax
f01058af:	75 54                	jne    f0105905 <sched_kill_env+0x2e8>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f01058b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058b4:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f01058ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058bd:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058c0:	83 ec 04             	sub    $0x4,%esp
f01058c3:	52                   	push   %edx
f01058c4:	50                   	push   %eax
f01058c5:	68 e0 5c 13 f0       	push   $0xf0135ce0
f01058ca:	e8 3f b4 ff ff       	call   f0100d0e <cprintf>
f01058cf:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f01058d2:	83 ec 0c             	sub    $0xc,%esp
f01058d5:	ff 75 f4             	pushl  -0xc(%ebp)
f01058d8:	e8 9e f2 ff ff       	call   f0104b7b <sched_remove_exit>
f01058dd:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f01058e0:	83 ec 0c             	sub    $0xc,%esp
f01058e3:	ff 75 f4             	pushl  -0xc(%ebp)
f01058e6:	e8 1b 44 00 00       	call   f0109d06 <env_free>
f01058eb:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01058ee:	83 ec 0c             	sub    $0xc,%esp
f01058f1:	68 0b 5c 13 f0       	push   $0xf0135c0b
f01058f6:	e8 13 b4 ff ff       	call   f0100d0e <cprintf>
f01058fb:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01058fe:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105905:	a1 f8 26 86 f0       	mov    0xf08626f8,%eax
f010590a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010590d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105911:	74 08                	je     f010591b <sched_kill_env+0x2fe>
f0105913:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105916:	8b 40 44             	mov    0x44(%eax),%eax
f0105919:	eb 05                	jmp    f0105920 <sched_kill_env+0x303>
f010591b:	b8 00 00 00 00       	mov    $0x0,%eax
f0105920:	a3 f8 26 86 f0       	mov    %eax,0xf08626f8
f0105925:	a1 f8 26 86 f0       	mov    0xf08626f8,%eax
f010592a:	85 c0                	test   %eax,%eax
f010592c:	0f 85 74 ff ff ff    	jne    f01058a6 <sched_kill_env+0x289>
f0105932:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105936:	0f 85 6a ff ff ff    	jne    f01058a6 <sched_kill_env+0x289>
				//return;
			}
		}
	}

	if (!found)
f010593c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105940:	0f 85 a0 00 00 00    	jne    f01059e6 <sched_kill_env+0x3c9>
	{
		if (curenv->env_id == envId)
f0105946:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010594b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010594e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105951:	0f 85 8f 00 00 00    	jne    f01059e6 <sched_kill_env+0x3c9>
		{
			ptr_env = curenv;
f0105957:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010595c:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_id == ENV_RUNNABLE);
f010595f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105962:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105965:	83 f8 02             	cmp    $0x2,%eax
f0105968:	74 19                	je     f0105983 <sched_kill_env+0x366>
f010596a:	68 08 5d 13 f0       	push   $0xf0135d08
f010596f:	68 f6 59 13 f0       	push   $0xf01359f6
f0105974:	68 6c 02 00 00       	push   $0x26c
f0105979:	68 0b 5a 13 f0       	push   $0xf0135a0b
f010597e:	e8 82 a8 ff ff       	call   f0100205 <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105983:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105986:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f010598c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010598f:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105992:	83 ec 04             	sub    $0x4,%esp
f0105995:	52                   	push   %edx
f0105996:	50                   	push   %eax
f0105997:	68 28 5d 13 f0       	push   $0xf0135d28
f010599c:	e8 6d b3 ff ff       	call   f0100d0e <cprintf>
f01059a1:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f01059a4:	83 ec 0c             	sub    $0xc,%esp
f01059a7:	ff 75 f4             	pushl  -0xc(%ebp)
f01059aa:	e8 57 43 00 00       	call   f0109d06 <env_free>
f01059af:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01059b2:	83 ec 0c             	sub    $0xc,%esp
f01059b5:	68 0b 5c 13 f0       	push   $0xf0135c0b
f01059ba:	e8 4f b3 ff ff       	call   f0100d0e <cprintf>
f01059bf:	83 c4 10             	add    $0x10,%esp
			found = 1;
f01059c2:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			//If it's the curenv, then reset it and reinvoke the scheduler
			//as there's no meaning to return back to a killed env
			//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
			lcr3(phys_page_directory);
f01059c9:	a1 a8 27 86 f0       	mov    0xf08627a8,%eax
f01059ce:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01059d1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01059d4:	0f 22 d8             	mov    %eax,%cr3
			curenv = NULL;
f01059d7:	c7 05 f4 1d 86 f0 00 	movl   $0x0,0xf0861df4
f01059de:	00 00 00 
			fos_scheduler();
f01059e1:	e8 1e ed ff ff       	call   f0104704 <fos_scheduler>
		}
	}
}
f01059e6:	90                   	nop
f01059e7:	c9                   	leave  
f01059e8:	c3                   	ret    

f01059e9 <clock_interrupt_handler>:


void clock_interrupt_handler()
{
f01059e9:	55                   	push   %ebp
f01059ea:	89 e5                	mov    %esp,%ebp
f01059ec:	83 ec 08             	sub    $0x8,%esp
	//cputchar('i');

	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f01059ef:	83 ec 0c             	sub    $0xc,%esp
f01059f2:	6a 01                	push   $0x1
f01059f4:	e8 90 85 00 00       	call   f010df89 <isPageReplacmentAlgorithmLRU>
f01059f9:	83 c4 10             	add    $0x10,%esp
f01059fc:	85 c0                	test   %eax,%eax
f01059fe:	74 05                	je     f0105a05 <clock_interrupt_handler+0x1c>
	{
		update_WS_time_stamps();
f0105a00:	e8 05 00 00 00       	call   f0105a0a <update_WS_time_stamps>
	}
	//cprintf("Clock Handler\n") ;
	fos_scheduler();
f0105a05:	e8 fa ec ff ff       	call   f0104704 <fos_scheduler>

f0105a0a <update_WS_time_stamps>:
}

void update_WS_time_stamps()
{
f0105a0a:	55                   	push   %ebp
f0105a0b:	89 e5                	mov    %esp,%ebp
f0105a0d:	53                   	push   %ebx
f0105a0e:	83 ec 24             	sub    $0x24,%esp
	struct Env *curr_env_ptr = curenv;
f0105a11:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f0105a16:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f0105a19:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0105a1d:	0f 84 cc 01 00 00    	je     f0105bef <update_WS_time_stamps+0x1e5>
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0105a23:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0105a2a:	e9 cf 00 00 00       	jmp    f0105afe <update_WS_time_stamps+0xf4>
			{
				if( curr_env_ptr->ptr_pageWorkingSet[i].empty != 1)
f0105a2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a32:	8b 48 78             	mov    0x78(%eax),%ecx
f0105a35:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105a38:	89 d0                	mov    %edx,%eax
f0105a3a:	01 c0                	add    %eax,%eax
f0105a3c:	01 d0                	add    %edx,%eax
f0105a3e:	c1 e0 03             	shl    $0x3,%eax
f0105a41:	01 c8                	add    %ecx,%eax
f0105a43:	8a 40 04             	mov    0x4(%eax),%al
f0105a46:	3c 01                	cmp    $0x1,%al
f0105a48:	0f 84 ad 00 00 00    	je     f0105afb <update_WS_time_stamps+0xf1>
				{
					//update the time if the page was referenced
					uint32 page_va = curr_env_ptr->ptr_pageWorkingSet[i].virtual_address ;
f0105a4e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a51:	8b 48 78             	mov    0x78(%eax),%ecx
f0105a54:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105a57:	89 d0                	mov    %edx,%eax
f0105a59:	01 c0                	add    %eax,%eax
f0105a5b:	01 d0                	add    %edx,%eax
f0105a5d:	c1 e0 03             	shl    $0x3,%eax
f0105a60:	01 c8                	add    %ecx,%eax
f0105a62:	8b 00                	mov    (%eax),%eax
f0105a64:	89 45 e8             	mov    %eax,-0x18(%ebp)
					uint32 perm = pt_get_page_permissions(curr_env_ptr->env_page_directory, page_va) ;
f0105a67:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a6a:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105a6d:	83 ec 08             	sub    $0x8,%esp
f0105a70:	ff 75 e8             	pushl  -0x18(%ebp)
f0105a73:	50                   	push   %eax
f0105a74:	e8 92 23 00 00       	call   f0107e0b <pt_get_page_permissions>
f0105a79:	83 c4 10             	add    $0x10,%esp
f0105a7c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->ptr_pageWorkingSet[i].time_stamp;
f0105a7f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a82:	8b 48 78             	mov    0x78(%eax),%ecx
f0105a85:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105a88:	89 d0                	mov    %edx,%eax
f0105a8a:	01 c0                	add    %eax,%eax
f0105a8c:	01 d0                	add    %edx,%eax
f0105a8e:	c1 e0 03             	shl    $0x3,%eax
f0105a91:	01 c8                	add    %ecx,%eax
f0105a93:	8b 40 08             	mov    0x8(%eax),%eax
f0105a96:	89 45 e0             	mov    %eax,-0x20(%ebp)

					if (perm & PERM_USED)
f0105a99:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105a9c:	83 e0 20             	and    $0x20,%eax
f0105a9f:	85 c0                	test   %eax,%eax
f0105aa1:	74 3b                	je     f0105ade <update_WS_time_stamps+0xd4>
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0105aa3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105aa6:	8b 48 78             	mov    0x78(%eax),%ecx
f0105aa9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105aac:	89 d0                	mov    %edx,%eax
f0105aae:	01 c0                	add    %eax,%eax
f0105ab0:	01 d0                	add    %edx,%eax
f0105ab2:	c1 e0 03             	shl    $0x3,%eax
f0105ab5:	01 c8                	add    %ecx,%eax
f0105ab7:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105aba:	c1 ea 02             	shr    $0x2,%edx
f0105abd:	81 ca 00 00 00 80    	or     $0x80000000,%edx
f0105ac3:	89 50 08             	mov    %edx,0x8(%eax)
						pt_set_page_permissions(curr_env_ptr->env_page_directory, page_va, 0 , PERM_USED) ;
f0105ac6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105ac9:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105acc:	6a 20                	push   $0x20
f0105ace:	6a 00                	push   $0x0
f0105ad0:	ff 75 e8             	pushl  -0x18(%ebp)
f0105ad3:	50                   	push   %eax
f0105ad4:	e8 88 22 00 00       	call   f0107d61 <pt_set_page_permissions>
f0105ad9:	83 c4 10             	add    $0x10,%esp
f0105adc:	eb 1d                	jmp    f0105afb <update_WS_time_stamps+0xf1>
					}
					else
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2);
f0105ade:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105ae1:	8b 48 78             	mov    0x78(%eax),%ecx
f0105ae4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105ae7:	89 d0                	mov    %edx,%eax
f0105ae9:	01 c0                	add    %eax,%eax
f0105aeb:	01 d0                	add    %edx,%eax
f0105aed:	c1 e0 03             	shl    $0x3,%eax
f0105af0:	01 c8                	add    %ecx,%eax
f0105af2:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105af5:	c1 ea 02             	shr    $0x2,%edx
f0105af8:	89 50 08             	mov    %edx,0x8(%eax)

	if(curr_env_ptr != NULL)
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0105afb:	ff 45 f4             	incl   -0xc(%ebp)
f0105afe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b01:	8b 50 74             	mov    0x74(%eax),%edx
f0105b04:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b07:	39 c2                	cmp    %eax,%edx
f0105b09:	0f 87 20 ff ff ff    	ja     f0105a2f <update_WS_time_stamps+0x25>
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0105b0f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105b16:	e9 ca 00 00 00       	jmp    f0105be5 <update_WS_time_stamps+0x1db>
			{
				if( curr_env_ptr->__ptr_tws[t].empty != 1)
f0105b1b:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105b1e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b21:	89 d0                	mov    %edx,%eax
f0105b23:	01 c0                	add    %eax,%eax
f0105b25:	01 d0                	add    %edx,%eax
f0105b27:	c1 e0 03             	shl    $0x3,%eax
f0105b2a:	01 c8                	add    %ecx,%eax
f0105b2c:	83 e8 80             	sub    $0xffffff80,%eax
f0105b2f:	8a 00                	mov    (%eax),%al
f0105b31:	3c 01                	cmp    $0x1,%al
f0105b33:	0f 84 a9 00 00 00    	je     f0105be2 <update_WS_time_stamps+0x1d8>
				{
					//update the time if the page was referenced
					uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f0105b39:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105b3c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b3f:	89 d0                	mov    %edx,%eax
f0105b41:	01 c0                	add    %eax,%eax
f0105b43:	01 d0                	add    %edx,%eax
f0105b45:	c1 e0 03             	shl    $0x3,%eax
f0105b48:	01 c8                	add    %ecx,%eax
f0105b4a:	83 c0 7c             	add    $0x7c,%eax
f0105b4d:	8b 00                	mov    (%eax),%eax
f0105b4f:	89 45 dc             	mov    %eax,-0x24(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f0105b52:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105b55:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b58:	89 d0                	mov    %edx,%eax
f0105b5a:	01 c0                	add    %eax,%eax
f0105b5c:	01 d0                	add    %edx,%eax
f0105b5e:	c1 e0 03             	shl    $0x3,%eax
f0105b61:	01 c8                	add    %ecx,%eax
f0105b63:	05 84 00 00 00       	add    $0x84,%eax
f0105b68:	8b 00                	mov    (%eax),%eax
f0105b6a:	89 45 d8             	mov    %eax,-0x28(%ebp)

					if (pd_is_table_used(curr_env_ptr->env_page_directory, table_va))
f0105b6d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b70:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105b73:	83 ec 08             	sub    $0x8,%esp
f0105b76:	ff 75 dc             	pushl  -0x24(%ebp)
f0105b79:	50                   	push   %eax
f0105b7a:	e8 bf 23 00 00       	call   f0107f3e <pd_is_table_used>
f0105b7f:	83 c4 10             	add    $0x10,%esp
f0105b82:	85 c0                	test   %eax,%eax
f0105b84:	74 3c                	je     f0105bc2 <update_WS_time_stamps+0x1b8>
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0105b86:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105b89:	c1 e8 02             	shr    $0x2,%eax
f0105b8c:	0d 00 00 00 80       	or     $0x80000000,%eax
f0105b91:	89 c1                	mov    %eax,%ecx
f0105b93:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105b96:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b99:	89 d0                	mov    %edx,%eax
f0105b9b:	01 c0                	add    %eax,%eax
f0105b9d:	01 d0                	add    %edx,%eax
f0105b9f:	c1 e0 03             	shl    $0x3,%eax
f0105ba2:	01 d8                	add    %ebx,%eax
f0105ba4:	05 84 00 00 00       	add    $0x84,%eax
f0105ba9:	89 08                	mov    %ecx,(%eax)
						pd_set_table_unused(curr_env_ptr->env_page_directory, table_va);
f0105bab:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105bae:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105bb1:	83 ec 08             	sub    $0x8,%esp
f0105bb4:	ff 75 dc             	pushl  -0x24(%ebp)
f0105bb7:	50                   	push   %eax
f0105bb8:	e8 a5 23 00 00       	call   f0107f62 <pd_set_table_unused>
f0105bbd:	83 c4 10             	add    $0x10,%esp
f0105bc0:	eb 20                	jmp    f0105be2 <update_WS_time_stamps+0x1d8>
					}
					else
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f0105bc2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105bc5:	c1 e8 02             	shr    $0x2,%eax
f0105bc8:	89 c1                	mov    %eax,%ecx
f0105bca:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105bcd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105bd0:	89 d0                	mov    %edx,%eax
f0105bd2:	01 c0                	add    %eax,%eax
f0105bd4:	01 d0                	add    %edx,%eax
f0105bd6:	c1 e0 03             	shl    $0x3,%eax
f0105bd9:	01 d8                	add    %ebx,%eax
f0105bdb:	05 84 00 00 00       	add    $0x84,%eax
f0105be0:	89 08                	mov    %ecx,(%eax)
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0105be2:	ff 45 f0             	incl   -0x10(%ebp)
f0105be5:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f0105be9:	0f 8e 2c ff ff ff    	jle    f0105b1b <update_WS_time_stamps+0x111>
					}
				}
			}
		}
	}
}
f0105bef:	90                   	nop
f0105bf0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0105bf3:	c9                   	leave  
f0105bf4:	c3                   	ret    

f0105bf5 <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f0105bf5:	55                   	push   %ebp
f0105bf6:	89 e5                	mov    %esp,%ebp
f0105bf8:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f0105bfb:	c7 05 ec 1d 86 f0 01 	movl   $0x1,0xf0861dec
f0105c02:	00 00 00 
f0105c05:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f0105c0c:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0105c10:	8a 45 b2             	mov    -0x4e(%ebp),%al
f0105c13:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105c16:	ee                   	out    %al,(%dx)
f0105c17:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f0105c1e:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f0105c22:	8a 45 b3             	mov    -0x4d(%ebp),%al
f0105c25:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105c28:	ee                   	out    %al,(%dx)
f0105c29:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f0105c30:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f0105c34:	8a 45 b4             	mov    -0x4c(%ebp),%al
f0105c37:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105c3a:	ee                   	out    %al,(%dx)
f0105c3b:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f0105c42:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f0105c46:	8a 45 b5             	mov    -0x4b(%ebp),%al
f0105c49:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0105c4c:	ee                   	out    %al,(%dx)
f0105c4d:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f0105c54:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f0105c58:	8a 45 b6             	mov    -0x4a(%ebp),%al
f0105c5b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0105c5e:	ee                   	out    %al,(%dx)
f0105c5f:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f0105c66:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f0105c6a:	8a 45 b7             	mov    -0x49(%ebp),%al
f0105c6d:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105c70:	ee                   	out    %al,(%dx)
f0105c71:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f0105c78:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f0105c7c:	8a 45 b8             	mov    -0x48(%ebp),%al
f0105c7f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0105c82:	ee                   	out    %al,(%dx)
f0105c83:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f0105c8a:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f0105c8e:	8a 45 b9             	mov    -0x47(%ebp),%al
f0105c91:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105c94:	ee                   	out    %al,(%dx)
f0105c95:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f0105c9c:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f0105ca0:	8a 45 ba             	mov    -0x46(%ebp),%al
f0105ca3:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0105ca6:	ee                   	out    %al,(%dx)
f0105ca7:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f0105cae:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f0105cb2:	8a 45 bb             	mov    -0x45(%ebp),%al
f0105cb5:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0105cb8:	ee                   	out    %al,(%dx)
f0105cb9:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f0105cc0:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f0105cc4:	8a 45 bc             	mov    -0x44(%ebp),%al
f0105cc7:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0105cca:	ee                   	out    %al,(%dx)
f0105ccb:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f0105cd2:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f0105cd6:	8a 45 bd             	mov    -0x43(%ebp),%al
f0105cd9:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0105cdc:	ee                   	out    %al,(%dx)
f0105cdd:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f0105ce4:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f0105ce8:	8a 45 be             	mov    -0x42(%ebp),%al
f0105ceb:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0105cee:	ee                   	out    %al,(%dx)
f0105cef:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f0105cf6:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f0105cfa:	8a 45 bf             	mov    -0x41(%ebp),%al
f0105cfd:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0105d00:	ee                   	out    %al,(%dx)
	outb(IO_PIC1, 0x0a);             /* read IRR by default */

	outb(IO_PIC2, 0x68);               /* OCW3 */
	outb(IO_PIC2, 0x0a);               /* OCW3 */

	if (irq_mask_8259A != 0xFFFF)
f0105d01:	66 a1 b0 28 19 f0    	mov    0xf01928b0,%ax
f0105d07:	66 83 f8 ff          	cmp    $0xffff,%ax
f0105d0b:	74 15                	je     f0105d22 <pic_init+0x12d>
		irq_setmask_8259A(irq_mask_8259A);
f0105d0d:	66 a1 b0 28 19 f0    	mov    0xf01928b0,%ax
f0105d13:	0f b7 c0             	movzwl %ax,%eax
f0105d16:	83 ec 0c             	sub    $0xc,%esp
f0105d19:	50                   	push   %eax
f0105d1a:	e8 06 00 00 00       	call   f0105d25 <irq_setmask_8259A>
f0105d1f:	83 c4 10             	add    $0x10,%esp
}
f0105d22:	90                   	nop
f0105d23:	c9                   	leave  
f0105d24:	c3                   	ret    

f0105d25 <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f0105d25:	55                   	push   %ebp
f0105d26:	89 e5                	mov    %esp,%ebp
f0105d28:	83 ec 14             	sub    $0x14,%esp
f0105d2b:	8b 45 08             	mov    0x8(%ebp),%eax
f0105d2e:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	int i;
	irq_mask_8259A = mask;
f0105d32:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105d35:	66 a3 b0 28 19 f0    	mov    %ax,0xf01928b0
	if (!didinit)
f0105d3b:	a1 ec 1d 86 f0       	mov    0xf0861dec,%eax
f0105d40:	85 c0                	test   %eax,%eax
f0105d42:	74 34                	je     f0105d78 <irq_setmask_8259A+0x53>
		return;
	outb(IO_PIC1+1, (char)mask);
f0105d44:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105d47:	0f b6 c0             	movzbl %al,%eax
f0105d4a:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f0105d51:	88 45 f6             	mov    %al,-0xa(%ebp)
f0105d54:	8a 45 f6             	mov    -0xa(%ebp),%al
f0105d57:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0105d5a:	ee                   	out    %al,(%dx)
	outb(IO_PIC2+1, (char)(mask >> 8));
f0105d5b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105d5e:	66 c1 e8 08          	shr    $0x8,%ax
f0105d62:	0f b6 c0             	movzbl %al,%eax
f0105d65:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f0105d6c:	88 45 f7             	mov    %al,-0x9(%ebp)
f0105d6f:	8a 45 f7             	mov    -0x9(%ebp),%al
f0105d72:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0105d75:	ee                   	out    %al,(%dx)
f0105d76:	eb 01                	jmp    f0105d79 <irq_setmask_8259A+0x54>
irq_setmask_8259A(uint16 mask)
{
	int i;
	irq_mask_8259A = mask;
	if (!didinit)
		return;
f0105d78:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (i = 0; i < 16; i++)
		//if (~mask & (1<<i))
			//cprintf(" %d", i);
	//cprintf("\n");
}
f0105d79:	c9                   	leave  
f0105d7a:	c3                   	ret    

f0105d7b <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f0105d7b:	55                   	push   %ebp
f0105d7c:	89 e5                	mov    %esp,%ebp
f0105d7e:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f0105d81:	83 ec 08             	sub    $0x8,%esp
f0105d84:	68 00 10 00 00       	push   $0x1000
f0105d89:	68 00 10 00 00       	push   $0x1000
f0105d8e:	e8 6a 02 00 00       	call   f0105ffd <boot_allocate_space>
f0105d93:	83 c4 10             	add    $0x10,%esp
f0105d96:	a3 78 27 86 f0       	mov    %eax,0xf0862778
	memset(ptr_page_directory, 0, PAGE_SIZE);
f0105d9b:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0105da0:	83 ec 04             	sub    $0x4,%esp
f0105da3:	68 00 10 00 00       	push   $0x1000
f0105da8:	6a 00                	push   $0x0
f0105daa:	50                   	push   %eax
f0105dab:	e8 46 ba 02 00       	call   f01317f6 <memset>
f0105db0:	83 c4 10             	add    $0x10,%esp
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0105db3:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0105db8:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0105dbb:	81 7d e8 ff ff ff ef 	cmpl   $0xefffffff,-0x18(%ebp)
f0105dc2:	77 14                	ja     f0105dd8 <initialize_kernel_VM+0x5d>
f0105dc4:	ff 75 e8             	pushl  -0x18(%ebp)
f0105dc7:	68 54 5d 13 f0       	push   $0xf0135d54
f0105dcc:	6a 45                	push   $0x45
f0105dce:	68 88 5d 13 f0       	push   $0xf0135d88
f0105dd3:	e8 2d a4 ff ff       	call   f0100205 <_panic>
f0105dd8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105ddb:	05 00 00 00 10       	add    $0x10000000,%eax
f0105de0:	a3 a8 27 86 f0       	mov    %eax,0xf08627a8
	// Map the kernel stack with VA range :
	//  [KERNEL_STACK_TOP-KERNEL_STACK_SIZE, KERNEL_STACK_TOP),
	// to physical address : "phys_stack_bottom".
	//     Permissions: kernel RW, user NONE
	// Your code goes here:
	boot_map_range(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE, KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f0105de5:	c7 45 e4 00 a0 18 f0 	movl   $0xf018a000,-0x1c(%ebp)
f0105dec:	81 7d e4 ff ff ff ef 	cmpl   $0xefffffff,-0x1c(%ebp)
f0105df3:	77 14                	ja     f0105e09 <initialize_kernel_VM+0x8e>
f0105df5:	ff 75 e4             	pushl  -0x1c(%ebp)
f0105df8:	68 54 5d 13 f0       	push   $0xf0135d54
f0105dfd:	6a 4d                	push   $0x4d
f0105dff:	68 88 5d 13 f0       	push   $0xf0135d88
f0105e04:	e8 fc a3 ff ff       	call   f0100205 <_panic>
f0105e09:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105e0c:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0105e12:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0105e17:	83 ec 0c             	sub    $0xc,%esp
f0105e1a:	6a 02                	push   $0x2
f0105e1c:	52                   	push   %edx
f0105e1d:	68 00 80 00 00       	push   $0x8000
f0105e22:	68 00 80 bf ef       	push   $0xefbf8000
f0105e27:	50                   	push   %eax
f0105e28:	e8 31 02 00 00       	call   f010605e <boot_map_range>
f0105e2d:	83 c4 20             	add    $0x20,%esp
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f0105e30:	c7 45 f0 00 00 00 f0 	movl   $0xf0000000,-0x10(%ebp)
f0105e37:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	unsigned int nTables=0;
f0105e3e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105e45:	eb 25                	jmp    f0105e6c <initialize_kernel_VM+0xf1>
	{
		++nTables;
f0105e47:	ff 45 ec             	incl   -0x14(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f0105e4a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105e4d:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0105e52:	83 ec 04             	sub    $0x4,%esp
f0105e55:	6a 01                	push   $0x1
f0105e57:	52                   	push   %edx
f0105e58:	50                   	push   %eax
f0105e59:	e8 74 02 00 00       	call   f01060d2 <boot_get_page_table>
f0105e5e:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105e61:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f0105e68:	83 55 f4 00          	adcl   $0x0,-0xc(%ebp)
f0105e6c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105e70:	72 d5                	jb     f0105e47 <initialize_kernel_VM+0xcc>
f0105e72:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105e76:	77 06                	ja     f0105e7e <initialize_kernel_VM+0x103>
f0105e78:	83 7d f0 fe          	cmpl   $0xfffffffe,-0x10(%ebp)
f0105e7c:	76 c9                	jbe    f0105e47 <initialize_kernel_VM+0xcc>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct FrameInfo) ;
f0105e7e:	8b 15 0c 27 86 f0    	mov    0xf086270c,%edx
f0105e84:	89 d0                	mov    %edx,%eax
f0105e86:	01 c0                	add    %eax,%eax
f0105e88:	01 d0                	add    %edx,%eax
f0105e8a:	c1 e0 03             	shl    $0x3,%eax
f0105e8d:	89 45 e0             	mov    %eax,-0x20(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f0105e90:	83 ec 08             	sub    $0x8,%esp
f0105e93:	68 00 10 00 00       	push   $0x1000
f0105e98:	ff 75 e0             	pushl  -0x20(%ebp)
f0105e9b:	e8 5d 01 00 00       	call   f0105ffd <boot_allocate_space>
f0105ea0:	83 c4 10             	add    $0x10,%esp
f0105ea3:	a3 50 27 86 f0       	mov    %eax,0xf0862750
	memset(frames_info, 0, array_size);
f0105ea8:	a1 50 27 86 f0       	mov    0xf0862750,%eax
f0105ead:	83 ec 04             	sub    $0x4,%esp
f0105eb0:	ff 75 e0             	pushl  -0x20(%ebp)
f0105eb3:	6a 00                	push   $0x0
f0105eb5:	50                   	push   %eax
f0105eb6:	e8 3b b9 02 00       	call   f01317f6 <memset>
f0105ebb:	83 c4 10             	add    $0x10,%esp
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct FrameInfo);
f0105ebe:	c7 45 dc 00 c0 30 00 	movl   $0x30c000,-0x24(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f0105ec5:	83 ec 08             	sub    $0x8,%esp
f0105ec8:	68 00 10 00 00       	push   $0x1000
f0105ecd:	ff 75 dc             	pushl  -0x24(%ebp)
f0105ed0:	e8 28 01 00 00       	call   f0105ffd <boot_allocate_space>
f0105ed5:	83 c4 10             	add    $0x10,%esp
f0105ed8:	a3 d8 26 86 f0       	mov    %eax,0xf08626d8
	memset(disk_frames_info , 0, disk_array_size);
f0105edd:	a1 d8 26 86 f0       	mov    0xf08626d8,%eax
f0105ee2:	83 ec 04             	sub    $0x4,%esp
f0105ee5:	ff 75 dc             	pushl  -0x24(%ebp)
f0105ee8:	6a 00                	push   $0x0
f0105eea:	50                   	push   %eax
f0105eeb:	e8 06 b9 02 00       	call   f01317f6 <memset>
f0105ef0:	83 c4 10             	add    $0x10,%esp

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f0105ef3:	e8 d5 04 00 00       	call   f01063cd <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("Max Envs = %d, Nearest Pow of 2 = %d\n",NENV, NEARPOW2NENV);
f0105ef8:	83 ec 0c             	sub    $0xc,%esp
f0105efb:	68 b1 02 00 00       	push   $0x2b1
f0105f00:	e8 75 a4 02 00       	call   f013037a <nearest_pow2_ceil>
f0105f05:	83 c4 10             	add    $0x10,%esp
f0105f08:	83 ec 04             	sub    $0x4,%esp
f0105f0b:	50                   	push   %eax
f0105f0c:	68 b1 02 00 00       	push   $0x2b1
f0105f11:	68 a8 5d 13 f0       	push   $0xf0135da8
f0105f16:	e8 f3 ad ff ff       	call   f0100d0e <cprintf>
f0105f1b:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f0105f1e:	c7 45 d8 f0 fa 0f 00 	movl   $0xffaf0,-0x28(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f0105f25:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105f28:	83 ec 08             	sub    $0x8,%esp
f0105f2b:	68 00 10 00 00       	push   $0x1000
f0105f30:	50                   	push   %eax
f0105f31:	e8 c7 00 00 00       	call   f0105ffd <boot_allocate_space>
f0105f36:	83 c4 10             	add    $0x10,%esp
f0105f39:	a3 f0 1d 86 f0       	mov    %eax,0xf0861df0
	memset(envs , 0, envs_size);
f0105f3e:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105f41:	a1 f0 1d 86 f0       	mov    0xf0861df0,%eax
f0105f46:	83 ec 04             	sub    $0x4,%esp
f0105f49:	52                   	push   %edx
f0105f4a:	6a 00                	push   $0x0
f0105f4c:	50                   	push   %eax
f0105f4d:	e8 a4 b8 02 00       	call   f01317f6 <memset>
f0105f52:	83 c4 10             	add    $0x10,%esp

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f0105f55:	a1 f0 1d 86 f0       	mov    0xf0861df0,%eax
f0105f5a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0105f5d:	81 7d d4 ff ff ff ef 	cmpl   $0xefffffff,-0x2c(%ebp)
f0105f64:	77 17                	ja     f0105f7d <initialize_kernel_VM+0x202>
f0105f66:	ff 75 d4             	pushl  -0x2c(%ebp)
f0105f69:	68 54 5d 13 f0       	push   $0xf0135d54
f0105f6e:	68 96 00 00 00       	push   $0x96
f0105f73:	68 88 5d 13 f0       	push   $0xf0135d88
f0105f78:	e8 88 a2 ff ff       	call   f0100205 <_panic>
f0105f7d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0105f80:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f0105f86:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105f89:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0105f8e:	83 ec 0c             	sub    $0xc,%esp
f0105f91:	6a 04                	push   $0x4
f0105f93:	51                   	push   %ecx
f0105f94:	52                   	push   %edx
f0105f95:	68 00 00 c0 ee       	push   $0xeec00000
f0105f9a:	50                   	push   %eax
f0105f9b:	e8 be 00 00 00       	call   f010605e <boot_map_range>
f0105fa0:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0105fa3:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0105fa8:	05 ec 0e 00 00       	add    $0xeec,%eax
f0105fad:	8b 15 78 27 86 f0    	mov    0xf0862778,%edx
f0105fb3:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f0105fb9:	8b 12                	mov    (%edx),%edx
f0105fbb:	83 ca 05             	or     $0x5,%edx
f0105fbe:	89 10                	mov    %edx,(%eax)
#if USE_KHEAP
	{
		// MAKE SURE THAT THIS MAPPING HAPPENS AFTER ALL BOOT ALLOCATIONS (boot_allocate_space)
		// calls are fininshed, and no remaining data to be allocated for the kernel
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f0105fc0:	a1 74 27 86 f0       	mov    0xf0862774,%eax
f0105fc5:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0105fcb:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0105fd0:	83 ec 0c             	sub    $0xc,%esp
f0105fd3:	6a 02                	push   $0x2
f0105fd5:	6a 00                	push   $0x0
f0105fd7:	52                   	push   %edx
f0105fd8:	68 00 00 00 f0       	push   $0xf0000000
f0105fdd:	50                   	push   %eax
f0105fde:	e8 7b 00 00 00       	call   f010605e <boot_map_range>
f0105fe3:	83 c4 20             	add    $0x20,%esp
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}
#endif
	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f0105fe6:	e8 76 ab 02 00       	call   f0130b61 <check_boot_pgdir>

	memory_scarce_threshold_percentage = DEFAULT_MEM_SCARCE_PERCENTAGE;	// Memory remains plentiful till % of free frames gets below 25% of the memory space
f0105feb:	c7 05 ec 26 86 f0 19 	movl   $0x19,0xf08626ec
f0105ff2:	00 00 00 

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f0105ff5:	e8 d3 02 00 00       	call   f01062cd <turn_on_paging>
}
f0105ffa:	90                   	nop
f0105ffb:	c9                   	leave  
f0105ffc:	c3                   	ret    

f0105ffd <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f0105ffd:	55                   	push   %ebp
f0105ffe:	89 e5                	mov    %esp,%ebp
f0106000:	83 ec 10             	sub    $0x10,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f0106003:	a1 74 27 86 f0       	mov    0xf0862774,%eax
f0106008:	85 c0                	test   %eax,%eax
f010600a:	75 0a                	jne    f0106016 <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f010600c:	c7 05 74 27 86 f0 bc 	movl   $0xf08628bc,0xf0862774
f0106013:	28 86 f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f0106016:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106019:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010601c:	a1 74 27 86 f0       	mov    0xf0862774,%eax
f0106021:	89 c2                	mov    %eax,%edx
f0106023:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106026:	01 d0                	add    %edx,%eax
f0106028:	48                   	dec    %eax
f0106029:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010602c:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010602f:	ba 00 00 00 00       	mov    $0x0,%edx
f0106034:	f7 75 fc             	divl   -0x4(%ebp)
f0106037:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010603a:	29 d0                	sub    %edx,%eax
f010603c:	a3 74 27 86 f0       	mov    %eax,0xf0862774

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f0106041:	a1 74 27 86 f0       	mov    0xf0862774,%eax
f0106046:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f0106049:	8b 15 74 27 86 f0    	mov    0xf0862774,%edx
f010604f:	8b 45 08             	mov    0x8(%ebp),%eax
f0106052:	01 d0                	add    %edx,%eax
f0106054:	a3 74 27 86 f0       	mov    %eax,0xf0862774

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	//memset(ptr_allocated_mem, 0, size);

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f0106059:	8b 45 f4             	mov    -0xc(%ebp),%eax

}
f010605c:	c9                   	leave  
f010605d:	c3                   	ret    

f010605e <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f010605e:	55                   	push   %ebp
f010605f:	89 e5                	mov    %esp,%ebp
f0106061:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f0106064:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f010606b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0106072:	eb 53                	jmp    f01060c7 <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f0106074:	83 ec 04             	sub    $0x4,%esp
f0106077:	6a 01                	push   $0x1
f0106079:	ff 75 0c             	pushl  0xc(%ebp)
f010607c:	ff 75 08             	pushl  0x8(%ebp)
f010607f:	e8 4e 00 00 00       	call   f01060d2 <boot_get_page_table>
f0106084:	83 c4 10             	add    $0x10,%esp
f0106087:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f010608a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010608d:	c1 e8 0c             	shr    $0xc,%eax
f0106090:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106095:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f0106098:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010609b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01060a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01060a5:	01 c2                	add    %eax,%edx
f01060a7:	8b 45 18             	mov    0x18(%ebp),%eax
f01060aa:	0b 45 14             	or     0x14(%ebp),%eax
f01060ad:	83 c8 01             	or     $0x1,%eax
f01060b0:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f01060b2:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f01060b9:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f01060c0:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01060c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01060ca:	3b 45 10             	cmp    0x10(%ebp),%eax
f01060cd:	72 a5                	jb     f0106074 <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f01060cf:	90                   	nop
f01060d0:	c9                   	leave  
f01060d1:	c3                   	ret    

f01060d2 <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f01060d2:	55                   	push   %ebp
f01060d3:	89 e5                	mov    %esp,%ebp
f01060d5:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f01060d8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01060db:	c1 e8 16             	shr    $0x16,%eax
f01060de:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f01060e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01060e4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01060eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01060ee:	01 d0                	add    %edx,%eax
f01060f0:	8b 00                	mov    (%eax),%eax
f01060f2:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f01060f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01060f8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01060fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f0106100:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106103:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106106:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106109:	c1 e8 0c             	shr    $0xc,%eax
f010610c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010610f:	a1 0c 27 86 f0       	mov    0xf086270c,%eax
f0106114:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106117:	72 17                	jb     f0106130 <boot_get_page_table+0x5e>
f0106119:	ff 75 e8             	pushl  -0x18(%ebp)
f010611c:	68 d0 5d 13 f0       	push   $0xf0135dd0
f0106121:	68 15 01 00 00       	push   $0x115
f0106126:	68 88 5d 13 f0       	push   $0xf0135d88
f010612b:	e8 d5 a0 ff ff       	call   f0100205 <_panic>
f0106130:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106133:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106138:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f010613b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010613f:	75 72                	jne    f01061b3 <boot_get_page_table+0xe1>
	{
		if (create)
f0106141:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0106145:	74 65                	je     f01061ac <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f0106147:	83 ec 08             	sub    $0x8,%esp
f010614a:	68 00 10 00 00       	push   $0x1000
f010614f:	68 00 10 00 00       	push   $0x1000
f0106154:	e8 a4 fe ff ff       	call   f0105ffd <boot_allocate_space>
f0106159:	83 c4 10             	add    $0x10,%esp
f010615c:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f010615f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106162:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106165:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f010616c:	77 17                	ja     f0106185 <boot_get_page_table+0xb3>
f010616e:	ff 75 dc             	pushl  -0x24(%ebp)
f0106171:	68 54 5d 13 f0       	push   $0xf0135d54
f0106176:	68 1b 01 00 00       	push   $0x11b
f010617b:	68 88 5d 13 f0       	push   $0xf0135d88
f0106180:	e8 80 a0 ff ff       	call   f0100205 <_panic>
f0106185:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106188:	05 00 00 00 10       	add    $0x10000000,%eax
f010618d:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f0106190:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106193:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010619a:	8b 45 08             	mov    0x8(%ebp),%eax
f010619d:	01 d0                	add    %edx,%eax
f010619f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01061a2:	83 ca 03             	or     $0x3,%edx
f01061a5:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f01061a7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01061aa:	eb 0a                	jmp    f01061b6 <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f01061ac:	b8 00 00 00 00       	mov    $0x0,%eax
f01061b1:	eb 03                	jmp    f01061b6 <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f01061b3:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f01061b6:	c9                   	leave  
f01061b7:	c3                   	ret    

f01061b8 <nvram_read>:


int nvram_read(int r)
{
f01061b8:	55                   	push   %ebp
f01061b9:	89 e5                	mov    %esp,%ebp
f01061bb:	53                   	push   %ebx
f01061bc:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f01061bf:	8b 45 08             	mov    0x8(%ebp),%eax
f01061c2:	83 ec 0c             	sub    $0xc,%esp
f01061c5:	50                   	push   %eax
f01061c6:	e8 9b de ff ff       	call   f0104066 <mc146818_read>
f01061cb:	83 c4 10             	add    $0x10,%esp
f01061ce:	89 c3                	mov    %eax,%ebx
f01061d0:	8b 45 08             	mov    0x8(%ebp),%eax
f01061d3:	40                   	inc    %eax
f01061d4:	83 ec 0c             	sub    $0xc,%esp
f01061d7:	50                   	push   %eax
f01061d8:	e8 89 de ff ff       	call   f0104066 <mc146818_read>
f01061dd:	83 c4 10             	add    $0x10,%esp
f01061e0:	c1 e0 08             	shl    $0x8,%eax
f01061e3:	09 d8                	or     %ebx,%eax
}
f01061e5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01061e8:	c9                   	leave  
f01061e9:	c3                   	ret    

f01061ea <detect_memory>:

void detect_memory()
{
f01061ea:	55                   	push   %ebp
f01061eb:	89 e5                	mov    %esp,%ebp
f01061ed:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f01061f0:	83 ec 0c             	sub    $0xc,%esp
f01061f3:	6a 15                	push   $0x15
f01061f5:	e8 be ff ff ff       	call   f01061b8 <nvram_read>
f01061fa:	83 c4 10             	add    $0x10,%esp
f01061fd:	c1 e0 0a             	shl    $0xa,%eax
f0106200:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106203:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106206:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010620b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f010620e:	83 ec 0c             	sub    $0xc,%esp
f0106211:	6a 17                	push   $0x17
f0106213:	e8 a0 ff ff ff       	call   f01061b8 <nvram_read>
f0106218:	83 c4 10             	add    $0x10,%esp
f010621b:	c1 e0 0a             	shl    $0xa,%eax
f010621e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106221:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106224:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106229:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f010622c:	83 ec 0c             	sub    $0xc,%esp
f010622f:	6a 34                	push   $0x34
f0106231:	e8 82 ff ff ff       	call   f01061b8 <nvram_read>
f0106236:	83 c4 10             	add    $0x10,%esp
f0106239:	c1 e0 10             	shl    $0x10,%eax
f010623c:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010623f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106242:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106247:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f010624a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010624e:	74 18                	je     f0106268 <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f0106250:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106253:	05 00 00 00 01       	add    $0x1000000,%eax
f0106258:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f010625b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010625e:	2d 00 00 10 00       	sub    $0x100000,%eax
f0106263:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106266:	eb 19                	jmp    f0106281 <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f0106268:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010626c:	74 0d                	je     f010627b <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f010626e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106271:	05 00 00 10 00       	add    $0x100000,%eax
f0106276:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106279:	eb 06                	jmp    f0106281 <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f010627b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010627e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f0106281:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	{
		cprintf("Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
		cprintf("Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
		while(1);
	}
	number_of_frames = maxpa / PAGE_SIZE;
f0106288:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010628b:	c1 e8 0c             	shr    $0xc,%eax
f010628e:	a3 0c 27 86 f0       	mov    %eax,0xf086270c

	cprintf("Physical memory: %dK available, ", (int)(maxpa/1024));
f0106293:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106296:	c1 e8 0a             	shr    $0xa,%eax
f0106299:	83 ec 08             	sub    $0x8,%esp
f010629c:	50                   	push   %eax
f010629d:	68 00 5e 13 f0       	push   $0xf0135e00
f01062a2:	e8 67 aa ff ff       	call   f0100d0e <cprintf>
f01062a7:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f01062aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01062ad:	c1 e8 0a             	shr    $0xa,%eax
f01062b0:	89 c2                	mov    %eax,%edx
f01062b2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01062b5:	c1 e8 0a             	shr    $0xa,%eax
f01062b8:	83 ec 04             	sub    $0x4,%esp
f01062bb:	52                   	push   %edx
f01062bc:	50                   	push   %eax
f01062bd:	68 21 5e 13 f0       	push   $0xf0135e21
f01062c2:	e8 47 aa ff ff       	call   f0100d0e <cprintf>
f01062c7:	83 c4 10             	add    $0x10,%esp
}
f01062ca:	90                   	nop
f01062cb:	c9                   	leave  
f01062cc:	c3                   	ret    

f01062cd <turn_on_paging>:
// --------------------------------------------------------------
// Set up initial memory mappings and turn on MMU.
// --------------------------------------------------------------

void turn_on_paging()
{
f01062cd:	55                   	push   %ebp
f01062ce:	89 e5                	mov    %esp,%ebp
f01062d0:	83 ec 30             	sub    $0x30,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f01062d3:	c7 45 fc c0 03 00 00 	movl   $0x3c0,-0x4(%ebp)
		int j = 0;
f01062da:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01062e1:	eb 24                	jmp    f0106307 <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f01062e3:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f01062e8:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01062eb:	c1 e2 02             	shl    $0x2,%edx
f01062ee:	01 c2                	add    %eax,%edx
f01062f0:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f01062f5:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f01062f8:	c1 e1 02             	shl    $0x2,%ecx
f01062fb:	01 c8                	add    %ecx,%eax
f01062fd:	8b 00                	mov    (%eax),%eax
f01062ff:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106301:	ff 45 fc             	incl   -0x4(%ebp)
f0106304:	ff 45 f8             	incl   -0x8(%ebp)
f0106307:	a1 74 27 86 f0       	mov    0xf0862774,%eax
f010630c:	c1 e8 16             	shr    $0x16,%eax
f010630f:	89 c2                	mov    %eax,%edx
f0106311:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106314:	39 c2                	cmp    %eax,%edx
f0106316:	77 cb                	ja     f01062e3 <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f0106318:	a1 a8 27 86 f0       	mov    0xf08627a8,%eax
f010631d:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0106320:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106323:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f0106326:	0f 20 c0             	mov    %cr0,%eax
f0106329:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f010632c:	8b 45 e0             	mov    -0x20(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f010632f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f0106332:	81 4d e4 2f 00 05 80 	orl    $0x8005002f,-0x1c(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f0106339:	83 65 e4 f3          	andl   $0xfffffff3,-0x1c(%ebp)
f010633d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106340:	89 45 dc             	mov    %eax,-0x24(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f0106343:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106346:	0f 22 c0             	mov    %eax,%cr0

	// Current mapping: KERNEL_BASE+x => x => x.
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	asm volatile("lgdt gdt_pd");
f0106349:	0f 01 15 f0 28 19 f0 	lgdtl  0xf01928f0
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f0106350:	b8 23 00 00 00       	mov    $0x23,%eax
f0106355:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f0106357:	b8 23 00 00 00       	mov    $0x23,%eax
f010635c:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f010635e:	b8 10 00 00 00       	mov    $0x10,%eax
f0106363:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f0106365:	b8 10 00 00 00       	mov    $0x10,%eax
f010636a:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f010636c:	b8 10 00 00 00       	mov    $0x10,%eax
f0106371:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f0106373:	ea 7a 63 10 f0 08 00 	ljmp   $0x8,$0xf010637a
	asm volatile("lldt %%ax" :: "a" (0));
f010637a:	b8 00 00 00 00       	mov    $0x0,%eax
f010637f:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f0106382:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f0106389:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106390:	eb 19                	jmp    f01063ab <turn_on_paging+0xde>
		{
			ptr_page_directory[j] = 0;
f0106392:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0106397:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010639a:	c1 e2 02             	shl    $0x2,%edx
f010639d:	01 d0                	add    %edx,%eax
f010639f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01063a5:	ff 45 f4             	incl   -0xc(%ebp)
f01063a8:	ff 45 f0             	incl   -0x10(%ebp)
f01063ab:	a1 74 27 86 f0       	mov    0xf0862774,%eax
f01063b0:	c1 e8 16             	shr    $0x16,%eax
f01063b3:	89 c2                	mov    %eax,%edx
f01063b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01063b8:	39 c2                	cmp    %eax,%edx
f01063ba:	77 d6                	ja     f0106392 <turn_on_paging+0xc5>
		{
			ptr_page_directory[j] = 0;
		}
	}
	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f01063bc:	a1 a8 27 86 f0       	mov    0xf08627a8,%eax
f01063c1:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01063c4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01063c7:	0f 22 d8             	mov    %eax,%cr3
}
f01063ca:	90                   	nop
f01063cb:	c9                   	leave  
f01063cc:	c3                   	ret    

f01063cd <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f01063cd:	55                   	push   %ebp
f01063ce:	89 e5                	mov    %esp,%ebp
f01063d0:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f01063d3:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f01063d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01063db:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f01063e2:	77 17                	ja     f01063fb <setup_listing_to_all_page_tables_entries+0x2e>
f01063e4:	ff 75 f4             	pushl  -0xc(%ebp)
f01063e7:	68 54 5d 13 f0       	push   $0xf0135d54
f01063ec:	68 ab 01 00 00       	push   $0x1ab
f01063f1:	68 88 5d 13 f0       	push   $0xf0135d88
f01063f6:	e8 0a 9e ff ff       	call   f0100205 <_panic>
f01063fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01063fe:	05 00 00 00 10       	add    $0x10000000,%eax
f0106403:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f0106406:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f010640b:	05 fc 0e 00 00       	add    $0xefc,%eax
f0106410:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106413:	83 ca 03             	or     $0x3,%edx
f0106416:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f0106418:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f010641d:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f0106423:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0106428:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010642b:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f0106432:	77 17                	ja     f010644b <setup_listing_to_all_page_tables_entries+0x7e>
f0106434:	ff 75 ec             	pushl  -0x14(%ebp)
f0106437:	68 54 5d 13 f0       	push   $0xf0135d54
f010643c:	68 b0 01 00 00       	push   $0x1b0
f0106441:	68 88 5d 13 f0       	push   $0xf0135d88
f0106446:	e8 ba 9d ff ff       	call   f0100205 <_panic>
f010644b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010644e:	05 00 00 00 10       	add    $0x10000000,%eax
f0106453:	83 c8 05             	or     $0x5,%eax
f0106456:	89 02                	mov    %eax,(%edx)

}
f0106458:	90                   	nop
f0106459:	c9                   	leave  
f010645a:	c3                   	ret    

f010645b <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010645b:	55                   	push   %ebp
f010645c:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010645e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106461:	8b 15 50 27 86 f0    	mov    0xf0862750,%edx
f0106467:	29 d0                	sub    %edx,%eax
f0106469:	c1 f8 03             	sar    $0x3,%eax
f010646c:	89 c2                	mov    %eax,%edx
f010646e:	89 d0                	mov    %edx,%eax
f0106470:	c1 e0 02             	shl    $0x2,%eax
f0106473:	01 d0                	add    %edx,%eax
f0106475:	c1 e0 02             	shl    $0x2,%eax
f0106478:	01 d0                	add    %edx,%eax
f010647a:	c1 e0 02             	shl    $0x2,%eax
f010647d:	01 d0                	add    %edx,%eax
f010647f:	89 c1                	mov    %eax,%ecx
f0106481:	c1 e1 08             	shl    $0x8,%ecx
f0106484:	01 c8                	add    %ecx,%eax
f0106486:	89 c1                	mov    %eax,%ecx
f0106488:	c1 e1 10             	shl    $0x10,%ecx
f010648b:	01 c8                	add    %ecx,%eax
f010648d:	01 c0                	add    %eax,%eax
f010648f:	01 d0                	add    %edx,%eax
}
f0106491:	5d                   	pop    %ebp
f0106492:	c3                   	ret    

f0106493 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0106493:	55                   	push   %ebp
f0106494:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0106496:	ff 75 08             	pushl  0x8(%ebp)
f0106499:	e8 bd ff ff ff       	call   f010645b <to_frame_number>
f010649e:	83 c4 04             	add    $0x4,%esp
f01064a1:	c1 e0 0c             	shl    $0xc,%eax
}
f01064a4:	c9                   	leave  
f01064a5:	c3                   	ret    

f01064a6 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f01064a6:	55                   	push   %ebp
f01064a7:	89 e5                	mov    %esp,%ebp
f01064a9:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f01064ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01064af:	c1 e8 0c             	shr    $0xc,%eax
f01064b2:	89 c2                	mov    %eax,%edx
f01064b4:	a1 0c 27 86 f0       	mov    0xf086270c,%eax
f01064b9:	39 c2                	cmp    %eax,%edx
f01064bb:	72 14                	jb     f01064d1 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f01064bd:	83 ec 04             	sub    $0x4,%esp
f01064c0:	68 40 5e 13 f0       	push   $0xf0135e40
f01064c5:	6a 55                	push   $0x55
f01064c7:	68 65 5e 13 f0       	push   $0xf0135e65
f01064cc:	e8 34 9d ff ff       	call   f0100205 <_panic>
	return &frames_info[PPN(physical_address)];
f01064d1:	8b 15 50 27 86 f0    	mov    0xf0862750,%edx
f01064d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01064da:	c1 e8 0c             	shr    $0xc,%eax
f01064dd:	89 c1                	mov    %eax,%ecx
f01064df:	89 c8                	mov    %ecx,%eax
f01064e1:	01 c0                	add    %eax,%eax
f01064e3:	01 c8                	add    %ecx,%eax
f01064e5:	c1 e0 03             	shl    $0x3,%eax
f01064e8:	01 d0                	add    %edx,%eax
}
f01064ea:	c9                   	leave  
f01064eb:	c3                   	ret    

f01064ec <tlb_invalidate>:




void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f01064ec:	55                   	push   %ebp
f01064ed:	89 e5                	mov    %esp,%ebp
f01064ef:	83 ec 10             	sub    $0x10,%esp
f01064f2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01064f5:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void 
invlpg(void *addr)
{ 
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f01064f8:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01064fb:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f01064fe:	90                   	nop
f01064ff:	c9                   	leave  
f0106500:	c3                   	ret    

f0106501 <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f0106501:	55                   	push   %ebp
f0106502:	89 e5                	mov    %esp,%ebp
f0106504:	53                   	push   %ebx
f0106505:	83 ec 24             	sub    $0x24,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&free_frame_list);
f0106508:	c7 05 14 27 86 f0 00 	movl   $0x0,0xf0862714
f010650f:	00 00 00 
f0106512:	c7 05 18 27 86 f0 00 	movl   $0x0,0xf0862718
f0106519:	00 00 00 
f010651c:	c7 05 20 27 86 f0 00 	movl   $0x0,0xf0862720
f0106523:	00 00 00 
	LIST_INIT(&modified_frame_list);
f0106526:	c7 05 b4 26 86 f0 00 	movl   $0x0,0xf08626b4
f010652d:	00 00 00 
f0106530:	c7 05 b8 26 86 f0 00 	movl   $0x0,0xf08626b8
f0106537:	00 00 00 
f010653a:	c7 05 c0 26 86 f0 00 	movl   $0x0,0xf08626c0
f0106541:	00 00 00 

	frames_info[0].references = 1;
f0106544:	a1 50 27 86 f0       	mov    0xf0862750,%eax
f0106549:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f010654f:	a1 50 27 86 f0       	mov    0xf0862750,%eax
f0106554:	83 c0 18             	add    $0x18,%eax
f0106557:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f010655d:	a1 50 27 86 f0       	mov    0xf0862750,%eax
f0106562:	83 c0 30             	add    $0x30,%eax
f0106565:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f010656b:	c7 05 5c 27 86 f0 00 	movl   $0xf0001000,0xf086275c
f0106572:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f0106575:	c7 05 80 27 86 f0 00 	movl   $0xf0002000,0xf0862780
f010657c:	20 00 f0 
	i =0;
f010657f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f0106586:	eb 1f                	jmp    f01065a7 <initialize_paging+0xa6>
	{
		ptr_zero_page[i]=0;
f0106588:	8b 15 5c 27 86 f0    	mov    0xf086275c,%edx
f010658e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106591:	01 d0                	add    %edx,%eax
f0106593:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f0106596:	8b 15 80 27 86 f0    	mov    0xf0862780,%edx
f010659c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010659f:	01 d0                	add    %edx,%eax
f01065a1:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f01065a4:	ff 45 f4             	incl   -0xc(%ebp)
f01065a7:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f01065ae:	7e d8                	jle    f0106588 <initialize_paging+0x87>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f01065b0:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f01065b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01065ba:	05 ff ff 09 00       	add    $0x9ffff,%eax
f01065bf:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01065c2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01065c5:	ba 00 00 00 00       	mov    $0x0,%edx
f01065ca:	f7 75 f0             	divl   -0x10(%ebp)
f01065cd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01065d0:	29 d0                	sub    %edx,%eax
f01065d2:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01065d5:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f01065dc:	e9 e8 00 00 00       	jmp    f01066c9 <initialize_paging+0x1c8>
	{

		initialize_frame_info(&(frames_info[i]));
f01065e1:	8b 0d 50 27 86 f0    	mov    0xf0862750,%ecx
f01065e7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01065ea:	89 d0                	mov    %edx,%eax
f01065ec:	01 c0                	add    %eax,%eax
f01065ee:	01 d0                	add    %edx,%eax
f01065f0:	c1 e0 03             	shl    $0x3,%eax
f01065f3:	01 c8                	add    %ecx,%eax
f01065f5:	83 ec 0c             	sub    $0xc,%esp
f01065f8:	50                   	push   %eax
f01065f9:	e8 b7 02 00 00       	call   f01068b5 <initialize_frame_info>
f01065fe:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f0106601:	8b 0d 50 27 86 f0    	mov    0xf0862750,%ecx
f0106607:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010660a:	89 d0                	mov    %edx,%eax
f010660c:	01 c0                	add    %eax,%eax
f010660e:	01 d0                	add    %edx,%eax
f0106610:	c1 e0 03             	shl    $0x3,%eax
f0106613:	01 c8                	add    %ecx,%eax
f0106615:	85 c0                	test   %eax,%eax
f0106617:	75 14                	jne    f010662d <initialize_paging+0x12c>
f0106619:	83 ec 04             	sub    $0x4,%esp
f010661c:	68 80 5e 13 f0       	push   $0xf0135e80
f0106621:	6a 5c                	push   $0x5c
f0106623:	68 a3 5e 13 f0       	push   $0xf0135ea3
f0106628:	e8 d8 9b ff ff       	call   f0100205 <_panic>
f010662d:	8b 0d 50 27 86 f0    	mov    0xf0862750,%ecx
f0106633:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106636:	89 d0                	mov    %edx,%eax
f0106638:	01 c0                	add    %eax,%eax
f010663a:	01 d0                	add    %edx,%eax
f010663c:	c1 e0 03             	shl    $0x3,%eax
f010663f:	01 c8                	add    %ecx,%eax
f0106641:	8b 15 14 27 86 f0    	mov    0xf0862714,%edx
f0106647:	89 10                	mov    %edx,(%eax)
f0106649:	8b 00                	mov    (%eax),%eax
f010664b:	85 c0                	test   %eax,%eax
f010664d:	74 1f                	je     f010666e <initialize_paging+0x16d>
f010664f:	8b 15 14 27 86 f0    	mov    0xf0862714,%edx
f0106655:	8b 1d 50 27 86 f0    	mov    0xf0862750,%ebx
f010665b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010665e:	89 c8                	mov    %ecx,%eax
f0106660:	01 c0                	add    %eax,%eax
f0106662:	01 c8                	add    %ecx,%eax
f0106664:	c1 e0 03             	shl    $0x3,%eax
f0106667:	01 d8                	add    %ebx,%eax
f0106669:	89 42 04             	mov    %eax,0x4(%edx)
f010666c:	eb 19                	jmp    f0106687 <initialize_paging+0x186>
f010666e:	8b 0d 50 27 86 f0    	mov    0xf0862750,%ecx
f0106674:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106677:	89 d0                	mov    %edx,%eax
f0106679:	01 c0                	add    %eax,%eax
f010667b:	01 d0                	add    %edx,%eax
f010667d:	c1 e0 03             	shl    $0x3,%eax
f0106680:	01 c8                	add    %ecx,%eax
f0106682:	a3 18 27 86 f0       	mov    %eax,0xf0862718
f0106687:	8b 0d 50 27 86 f0    	mov    0xf0862750,%ecx
f010668d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106690:	89 d0                	mov    %edx,%eax
f0106692:	01 c0                	add    %eax,%eax
f0106694:	01 d0                	add    %edx,%eax
f0106696:	c1 e0 03             	shl    $0x3,%eax
f0106699:	01 c8                	add    %ecx,%eax
f010669b:	a3 14 27 86 f0       	mov    %eax,0xf0862714
f01066a0:	8b 0d 50 27 86 f0    	mov    0xf0862750,%ecx
f01066a6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066a9:	89 d0                	mov    %edx,%eax
f01066ab:	01 c0                	add    %eax,%eax
f01066ad:	01 d0                	add    %edx,%eax
f01066af:	c1 e0 03             	shl    $0x3,%eax
f01066b2:	01 c8                	add    %ecx,%eax
f01066b4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01066bb:	a1 20 27 86 f0       	mov    0xf0862720,%eax
f01066c0:	40                   	inc    %eax
f01066c1:	a3 20 27 86 f0       	mov    %eax,0xf0862720
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01066c6:	ff 45 f4             	incl   -0xc(%ebp)
f01066c9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01066cc:	85 c0                	test   %eax,%eax
f01066ce:	79 05                	jns    f01066d5 <initialize_paging+0x1d4>
f01066d0:	05 ff 0f 00 00       	add    $0xfff,%eax
f01066d5:	c1 f8 0c             	sar    $0xc,%eax
f01066d8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01066db:	0f 8f 00 ff ff ff    	jg     f01065e1 <initialize_paging+0xe0>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f01066e1:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f01066e8:	eb 1d                	jmp    f0106707 <initialize_paging+0x206>
	{
		frames_info[i].references = 1;
f01066ea:	8b 0d 50 27 86 f0    	mov    0xf0862750,%ecx
f01066f0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066f3:	89 d0                	mov    %edx,%eax
f01066f5:	01 c0                	add    %eax,%eax
f01066f7:	01 d0                	add    %edx,%eax
f01066f9:	c1 e0 03             	shl    $0x3,%eax
f01066fc:	01 c8                	add    %ecx,%eax
f01066fe:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0106704:	ff 45 f4             	incl   -0xc(%ebp)
f0106707:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f010670e:	7e da                	jle    f01066ea <initialize_paging+0x1e9>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f0106710:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0106717:	a1 74 27 86 f0       	mov    0xf0862774,%eax
f010671c:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010671f:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0106726:	77 14                	ja     f010673c <initialize_paging+0x23b>
f0106728:	ff 75 e0             	pushl  -0x20(%ebp)
f010672b:	68 c0 5e 13 f0       	push   $0xf0135ec0
f0106730:	6a 64                	push   $0x64
f0106732:	68 a3 5e 13 f0       	push   $0xf0135ea3
f0106737:	e8 c9 9a ff ff       	call   f0100205 <_panic>
f010673c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010673f:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0106745:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106748:	01 d0                	add    %edx,%eax
f010674a:	48                   	dec    %eax
f010674b:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010674e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106751:	ba 00 00 00 00       	mov    $0x0,%edx
f0106756:	f7 75 e4             	divl   -0x1c(%ebp)
f0106759:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010675c:	29 d0                	sub    %edx,%eax
f010675e:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0106761:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f0106768:	eb 1d                	jmp    f0106787 <initialize_paging+0x286>
	{
		frames_info[i].references = 1;
f010676a:	8b 0d 50 27 86 f0    	mov    0xf0862750,%ecx
f0106770:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106773:	89 d0                	mov    %edx,%eax
f0106775:	01 c0                	add    %eax,%eax
f0106777:	01 d0                	add    %edx,%eax
f0106779:	c1 e0 03             	shl    $0x3,%eax
f010677c:	01 c8                	add    %ecx,%eax
f010677e:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0106784:	ff 45 f4             	incl   -0xc(%ebp)
f0106787:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010678a:	85 c0                	test   %eax,%eax
f010678c:	79 05                	jns    f0106793 <initialize_paging+0x292>
f010678e:	05 ff 0f 00 00       	add    $0xfff,%eax
f0106793:	c1 f8 0c             	sar    $0xc,%eax
f0106796:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106799:	7f cf                	jg     f010676a <initialize_paging+0x269>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f010679b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010679e:	85 c0                	test   %eax,%eax
f01067a0:	79 05                	jns    f01067a7 <initialize_paging+0x2a6>
f01067a2:	05 ff 0f 00 00       	add    $0xfff,%eax
f01067a7:	c1 f8 0c             	sar    $0xc,%eax
f01067aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01067ad:	e9 e8 00 00 00       	jmp    f010689a <initialize_paging+0x399>
	{
		initialize_frame_info(&(frames_info[i]));
f01067b2:	8b 0d 50 27 86 f0    	mov    0xf0862750,%ecx
f01067b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067bb:	89 d0                	mov    %edx,%eax
f01067bd:	01 c0                	add    %eax,%eax
f01067bf:	01 d0                	add    %edx,%eax
f01067c1:	c1 e0 03             	shl    $0x3,%eax
f01067c4:	01 c8                	add    %ecx,%eax
f01067c6:	83 ec 0c             	sub    $0xc,%esp
f01067c9:	50                   	push   %eax
f01067ca:	e8 e6 00 00 00       	call   f01068b5 <initialize_frame_info>
f01067cf:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f01067d2:	8b 0d 50 27 86 f0    	mov    0xf0862750,%ecx
f01067d8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067db:	89 d0                	mov    %edx,%eax
f01067dd:	01 c0                	add    %eax,%eax
f01067df:	01 d0                	add    %edx,%eax
f01067e1:	c1 e0 03             	shl    $0x3,%eax
f01067e4:	01 c8                	add    %ecx,%eax
f01067e6:	85 c0                	test   %eax,%eax
f01067e8:	75 14                	jne    f01067fe <initialize_paging+0x2fd>
f01067ea:	83 ec 04             	sub    $0x4,%esp
f01067ed:	68 80 5e 13 f0       	push   $0xf0135e80
f01067f2:	6a 70                	push   $0x70
f01067f4:	68 a3 5e 13 f0       	push   $0xf0135ea3
f01067f9:	e8 07 9a ff ff       	call   f0100205 <_panic>
f01067fe:	8b 0d 50 27 86 f0    	mov    0xf0862750,%ecx
f0106804:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106807:	89 d0                	mov    %edx,%eax
f0106809:	01 c0                	add    %eax,%eax
f010680b:	01 d0                	add    %edx,%eax
f010680d:	c1 e0 03             	shl    $0x3,%eax
f0106810:	01 c8                	add    %ecx,%eax
f0106812:	8b 15 14 27 86 f0    	mov    0xf0862714,%edx
f0106818:	89 10                	mov    %edx,(%eax)
f010681a:	8b 00                	mov    (%eax),%eax
f010681c:	85 c0                	test   %eax,%eax
f010681e:	74 1f                	je     f010683f <initialize_paging+0x33e>
f0106820:	8b 15 14 27 86 f0    	mov    0xf0862714,%edx
f0106826:	8b 1d 50 27 86 f0    	mov    0xf0862750,%ebx
f010682c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010682f:	89 c8                	mov    %ecx,%eax
f0106831:	01 c0                	add    %eax,%eax
f0106833:	01 c8                	add    %ecx,%eax
f0106835:	c1 e0 03             	shl    $0x3,%eax
f0106838:	01 d8                	add    %ebx,%eax
f010683a:	89 42 04             	mov    %eax,0x4(%edx)
f010683d:	eb 19                	jmp    f0106858 <initialize_paging+0x357>
f010683f:	8b 0d 50 27 86 f0    	mov    0xf0862750,%ecx
f0106845:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106848:	89 d0                	mov    %edx,%eax
f010684a:	01 c0                	add    %eax,%eax
f010684c:	01 d0                	add    %edx,%eax
f010684e:	c1 e0 03             	shl    $0x3,%eax
f0106851:	01 c8                	add    %ecx,%eax
f0106853:	a3 18 27 86 f0       	mov    %eax,0xf0862718
f0106858:	8b 0d 50 27 86 f0    	mov    0xf0862750,%ecx
f010685e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106861:	89 d0                	mov    %edx,%eax
f0106863:	01 c0                	add    %eax,%eax
f0106865:	01 d0                	add    %edx,%eax
f0106867:	c1 e0 03             	shl    $0x3,%eax
f010686a:	01 c8                	add    %ecx,%eax
f010686c:	a3 14 27 86 f0       	mov    %eax,0xf0862714
f0106871:	8b 0d 50 27 86 f0    	mov    0xf0862750,%ecx
f0106877:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010687a:	89 d0                	mov    %edx,%eax
f010687c:	01 c0                	add    %eax,%eax
f010687e:	01 d0                	add    %edx,%eax
f0106880:	c1 e0 03             	shl    $0x3,%eax
f0106883:	01 c8                	add    %ecx,%eax
f0106885:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010688c:	a1 20 27 86 f0       	mov    0xf0862720,%eax
f0106891:	40                   	inc    %eax
f0106892:	a3 20 27 86 f0       	mov    %eax,0xf0862720
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f0106897:	ff 45 f4             	incl   -0xc(%ebp)
f010689a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010689d:	a1 0c 27 86 f0       	mov    0xf086270c,%eax
f01068a2:	39 c2                	cmp    %eax,%edx
f01068a4:	0f 82 08 ff ff ff    	jb     f01067b2 <initialize_paging+0x2b1>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f01068aa:	e8 eb c8 ff ff       	call   f010319a <initialize_disk_page_file>
}
f01068af:	90                   	nop
f01068b0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01068b3:	c9                   	leave  
f01068b4:	c3                   	ret    

f01068b5 <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct FrameInfo *ptr_frame_info)
{
f01068b5:	55                   	push   %ebp
f01068b6:	89 e5                	mov    %esp,%ebp
f01068b8:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f01068bb:	83 ec 04             	sub    $0x4,%esp
f01068be:	6a 18                	push   $0x18
f01068c0:	6a 00                	push   $0x0
f01068c2:	ff 75 08             	pushl  0x8(%ebp)
f01068c5:	e8 2c af 02 00       	call   f01317f6 <memset>
f01068ca:	83 c4 10             	add    $0x10,%esp
}
f01068cd:	90                   	nop
f01068ce:	c9                   	leave  
f01068cf:	c3                   	ret    

f01068d0 <allocate_frame>:
// Hint: references should not be incremented

//extern void env_free(struct Env *e);

int allocate_frame(struct FrameInfo **ptr_frame_info)
{
f01068d0:	55                   	push   %ebp
f01068d1:	89 e5                	mov    %esp,%ebp
f01068d3:	83 ec 18             	sub    $0x18,%esp
	*ptr_frame_info = LIST_FIRST(&free_frame_list);
f01068d6:	8b 15 14 27 86 f0    	mov    0xf0862714,%edx
f01068dc:	8b 45 08             	mov    0x8(%ebp),%eax
f01068df:	89 10                	mov    %edx,(%eax)
	int c = 0;
f01068e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (*ptr_frame_info == NULL)
f01068e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01068eb:	8b 00                	mov    (%eax),%eax
f01068ed:	85 c0                	test   %eax,%eax
f01068ef:	75 17                	jne    f0106908 <allocate_frame+0x38>
	{
		//[KERNEL MEM] Free RAM when it's FULL
		// Write your code here, remove the panic and write your code
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f01068f1:	83 ec 04             	sub    $0x4,%esp
f01068f4:	68 f4 5e 13 f0       	push   $0xf0135ef4
f01068f9:	68 99 00 00 00       	push   $0x99
f01068fe:	68 a3 5e 13 f0       	push   $0xf0135ea3
f0106903:	e8 fd 98 ff ff       	call   f0100205 <_panic>
	}

	LIST_REMOVE(&free_frame_list,*ptr_frame_info);
f0106908:	8b 45 08             	mov    0x8(%ebp),%eax
f010690b:	8b 00                	mov    (%eax),%eax
f010690d:	85 c0                	test   %eax,%eax
f010690f:	75 17                	jne    f0106928 <allocate_frame+0x58>
f0106911:	83 ec 04             	sub    $0x4,%esp
f0106914:	68 41 5f 13 f0       	push   $0xf0135f41
f0106919:	68 9c 00 00 00       	push   $0x9c
f010691e:	68 a3 5e 13 f0       	push   $0xf0135ea3
f0106923:	e8 dd 98 ff ff       	call   f0100205 <_panic>
f0106928:	8b 45 08             	mov    0x8(%ebp),%eax
f010692b:	8b 00                	mov    (%eax),%eax
f010692d:	8b 00                	mov    (%eax),%eax
f010692f:	85 c0                	test   %eax,%eax
f0106931:	74 14                	je     f0106947 <allocate_frame+0x77>
f0106933:	8b 45 08             	mov    0x8(%ebp),%eax
f0106936:	8b 00                	mov    (%eax),%eax
f0106938:	8b 00                	mov    (%eax),%eax
f010693a:	8b 55 08             	mov    0x8(%ebp),%edx
f010693d:	8b 12                	mov    (%edx),%edx
f010693f:	8b 52 04             	mov    0x4(%edx),%edx
f0106942:	89 50 04             	mov    %edx,0x4(%eax)
f0106945:	eb 0d                	jmp    f0106954 <allocate_frame+0x84>
f0106947:	8b 45 08             	mov    0x8(%ebp),%eax
f010694a:	8b 00                	mov    (%eax),%eax
f010694c:	8b 40 04             	mov    0x4(%eax),%eax
f010694f:	a3 18 27 86 f0       	mov    %eax,0xf0862718
f0106954:	8b 45 08             	mov    0x8(%ebp),%eax
f0106957:	8b 00                	mov    (%eax),%eax
f0106959:	8b 40 04             	mov    0x4(%eax),%eax
f010695c:	85 c0                	test   %eax,%eax
f010695e:	74 13                	je     f0106973 <allocate_frame+0xa3>
f0106960:	8b 45 08             	mov    0x8(%ebp),%eax
f0106963:	8b 00                	mov    (%eax),%eax
f0106965:	8b 40 04             	mov    0x4(%eax),%eax
f0106968:	8b 55 08             	mov    0x8(%ebp),%edx
f010696b:	8b 12                	mov    (%edx),%edx
f010696d:	8b 12                	mov    (%edx),%edx
f010696f:	89 10                	mov    %edx,(%eax)
f0106971:	eb 0c                	jmp    f010697f <allocate_frame+0xaf>
f0106973:	8b 45 08             	mov    0x8(%ebp),%eax
f0106976:	8b 00                	mov    (%eax),%eax
f0106978:	8b 00                	mov    (%eax),%eax
f010697a:	a3 14 27 86 f0       	mov    %eax,0xf0862714
f010697f:	8b 45 08             	mov    0x8(%ebp),%eax
f0106982:	8b 00                	mov    (%eax),%eax
f0106984:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010698a:	8b 45 08             	mov    0x8(%ebp),%eax
f010698d:	8b 00                	mov    (%eax),%eax
f010698f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106996:	a1 20 27 86 f0       	mov    0xf0862720,%eax
f010699b:	48                   	dec    %eax
f010699c:	a3 20 27 86 f0       	mov    %eax,0xf0862720

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/

	if((*ptr_frame_info)->isBuffered)
f01069a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01069a4:	8b 00                	mov    (%eax),%eax
f01069a6:	8a 40 14             	mov    0x14(%eax),%al
f01069a9:	84 c0                	test   %al,%al
f01069ab:	74 20                	je     f01069cd <allocate_frame+0xfd>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->environment->env_page_directory,(*ptr_frame_info)->va);
f01069ad:	8b 45 08             	mov    0x8(%ebp),%eax
f01069b0:	8b 00                	mov    (%eax),%eax
f01069b2:	8b 50 0c             	mov    0xc(%eax),%edx
f01069b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01069b8:	8b 00                	mov    (%eax),%eax
f01069ba:	8b 40 10             	mov    0x10(%eax),%eax
f01069bd:	8b 40 5c             	mov    0x5c(%eax),%eax
f01069c0:	83 ec 08             	sub    $0x8,%esp
f01069c3:	52                   	push   %edx
f01069c4:	50                   	push   %eax
f01069c5:	e8 9b 14 00 00       	call   f0107e65 <pt_clear_page_table_entry>
f01069ca:	83 c4 10             	add    $0x10,%esp
	}

	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f01069cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01069d0:	8b 00                	mov    (%eax),%eax
f01069d2:	83 ec 0c             	sub    $0xc,%esp
f01069d5:	50                   	push   %eax
f01069d6:	e8 da fe ff ff       	call   f01068b5 <initialize_frame_info>
f01069db:	83 c4 10             	add    $0x10,%esp
	return 0;
f01069de:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01069e3:	c9                   	leave  
f01069e4:	c3                   	ret    

f01069e5 <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct FrameInfo *ptr_frame_info)
{
f01069e5:	55                   	push   %ebp
f01069e6:	89 e5                	mov    %esp,%ebp
f01069e8:	83 ec 08             	sub    $0x8,%esp
	/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
	initialize_frame_info(ptr_frame_info);
f01069eb:	83 ec 0c             	sub    $0xc,%esp
f01069ee:	ff 75 08             	pushl  0x8(%ebp)
f01069f1:	e8 bf fe ff ff       	call   f01068b5 <initialize_frame_info>
f01069f6:	83 c4 10             	add    $0x10,%esp
	/*=============================================================================*/

	// Fill this function in
	LIST_INSERT_HEAD(&free_frame_list, ptr_frame_info);
f01069f9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01069fd:	75 17                	jne    f0106a16 <free_frame+0x31>
f01069ff:	83 ec 04             	sub    $0x4,%esp
f0106a02:	68 80 5e 13 f0       	push   $0xf0135e80
f0106a07:	68 b9 00 00 00       	push   $0xb9
f0106a0c:	68 a3 5e 13 f0       	push   $0xf0135ea3
f0106a11:	e8 ef 97 ff ff       	call   f0100205 <_panic>
f0106a16:	8b 15 14 27 86 f0    	mov    0xf0862714,%edx
f0106a1c:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a1f:	89 10                	mov    %edx,(%eax)
f0106a21:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a24:	8b 00                	mov    (%eax),%eax
f0106a26:	85 c0                	test   %eax,%eax
f0106a28:	74 0d                	je     f0106a37 <free_frame+0x52>
f0106a2a:	a1 14 27 86 f0       	mov    0xf0862714,%eax
f0106a2f:	8b 55 08             	mov    0x8(%ebp),%edx
f0106a32:	89 50 04             	mov    %edx,0x4(%eax)
f0106a35:	eb 08                	jmp    f0106a3f <free_frame+0x5a>
f0106a37:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a3a:	a3 18 27 86 f0       	mov    %eax,0xf0862718
f0106a3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a42:	a3 14 27 86 f0       	mov    %eax,0xf0862714
f0106a47:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a4a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106a51:	a1 20 27 86 f0       	mov    0xf0862720,%eax
f0106a56:	40                   	inc    %eax
f0106a57:	a3 20 27 86 f0       	mov    %eax,0xf0862720
	//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));


}
f0106a5c:	90                   	nop
f0106a5d:	c9                   	leave  
f0106a5e:	c3                   	ret    

f0106a5f <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct FrameInfo* ptr_frame_info)
{
f0106a5f:	55                   	push   %ebp
f0106a60:	89 e5                	mov    %esp,%ebp
f0106a62:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f0106a65:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a68:	8b 40 08             	mov    0x8(%eax),%eax
f0106a6b:	48                   	dec    %eax
f0106a6c:	8b 55 08             	mov    0x8(%ebp),%edx
f0106a6f:	66 89 42 08          	mov    %ax,0x8(%edx)
f0106a73:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a76:	8b 40 08             	mov    0x8(%eax),%eax
f0106a79:	66 85 c0             	test   %ax,%ax
f0106a7c:	75 0e                	jne    f0106a8c <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f0106a7e:	83 ec 0c             	sub    $0xc,%esp
f0106a81:	ff 75 08             	pushl  0x8(%ebp)
f0106a84:	e8 5c ff ff ff       	call   f01069e5 <free_frame>
f0106a89:	83 c4 10             	add    $0x10,%esp
}
f0106a8c:	90                   	nop
f0106a8d:	c9                   	leave  
f0106a8e:	c3                   	ret    

f0106a8f <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106a8f:	55                   	push   %ebp
f0106a90:	89 e5                	mov    %esp,%ebp
f0106a92:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106a95:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106a98:	c1 e8 16             	shr    $0x16,%eax
f0106a9b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106aa2:	8b 45 08             	mov    0x8(%ebp),%eax
f0106aa5:	01 d0                	add    %edx,%eax
f0106aa7:	8b 00                	mov    (%eax),%eax
f0106aa9:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//2022: check PERM_PRESENT of the table first before calculating its PA
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0106aac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106aaf:	83 e0 01             	and    $0x1,%eax
f0106ab2:	85 c0                	test   %eax,%eax
f0106ab4:	74 74                	je     f0106b2a <get_page_table+0x9b>
	{
		//	cprintf("gpt .07, page_directory_entry= %x \n",page_directory_entry);
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106ab6:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106abd:	77 1d                	ja     f0106adc <get_page_table+0x4d>
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106abf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ac2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106ac7:	83 ec 0c             	sub    $0xc,%esp
f0106aca:	50                   	push   %eax
f0106acb:	e8 dc 11 00 00       	call   f0107cac <kheap_virtual_address>
f0106ad0:	83 c4 10             	add    $0x10,%esp
f0106ad3:	89 c2                	mov    %eax,%edx
f0106ad5:	8b 45 10             	mov    0x10(%ebp),%eax
f0106ad8:	89 10                	mov    %edx,(%eax)
f0106ada:	eb 44                	jmp    f0106b20 <get_page_table+0x91>
			//cprintf("===>get_page_table: page_dir_entry = %x ptr_page_table = %x\n", page_directory_entry,*ptr_page_table);
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106adc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106adf:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106ae4:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106ae7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106aea:	c1 e8 0c             	shr    $0xc,%eax
f0106aed:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106af0:	a1 0c 27 86 f0       	mov    0xf086270c,%eax
f0106af5:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0106af8:	72 17                	jb     f0106b11 <get_page_table+0x82>
f0106afa:	ff 75 f0             	pushl  -0x10(%ebp)
f0106afd:	68 60 5f 13 f0       	push   $0xf0135f60
f0106b02:	68 e2 00 00 00       	push   $0xe2
f0106b07:	68 a3 5e 13 f0       	push   $0xf0135ea3
f0106b0c:	e8 f4 96 ff ff       	call   f0100205 <_panic>
f0106b11:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106b14:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106b19:	89 c2                	mov    %eax,%edx
f0106b1b:	8b 45 10             	mov    0x10(%ebp),%eax
f0106b1e:	89 10                	mov    %edx,(%eax)
		}
		return TABLE_IN_MEMORY;
f0106b20:	b8 00 00 00 00       	mov    $0x0,%eax
f0106b25:	e9 b9 00 00 00       	jmp    f0106be3 <get_page_table+0x154>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f0106b2a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106b2e:	0f 84 a1 00 00 00    	je     f0106bd5 <get_page_table+0x146>
f0106b34:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106b37:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f0106b3a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106b3d:	0f 22 d0             	mov    %eax,%cr2
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f0106b40:	83 ec 0c             	sub    $0xc,%esp
f0106b43:	6a 00                	push   $0x0
f0106b45:	e8 ab 5d 00 00       	call   f010c8f5 <fault_handler>
f0106b4a:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106b4d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106b50:	c1 e8 16             	shr    $0x16,%eax
f0106b53:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106b5a:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b5d:	01 d0                	add    %edx,%eax
f0106b5f:	8b 00                	mov    (%eax),%eax
f0106b61:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106b64:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106b6b:	77 1d                	ja     f0106b8a <get_page_table+0xfb>
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106b6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b70:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106b75:	83 ec 0c             	sub    $0xc,%esp
f0106b78:	50                   	push   %eax
f0106b79:	e8 2e 11 00 00       	call   f0107cac <kheap_virtual_address>
f0106b7e:	83 c4 10             	add    $0x10,%esp
f0106b81:	89 c2                	mov    %eax,%edx
f0106b83:	8b 45 10             	mov    0x10(%ebp),%eax
f0106b86:	89 10                	mov    %edx,(%eax)
f0106b88:	eb 44                	jmp    f0106bce <get_page_table+0x13f>
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106b8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b8d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106b92:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106b95:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106b98:	c1 e8 0c             	shr    $0xc,%eax
f0106b9b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106b9e:	a1 0c 27 86 f0       	mov    0xf086270c,%eax
f0106ba3:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106ba6:	72 17                	jb     f0106bbf <get_page_table+0x130>
f0106ba8:	ff 75 e8             	pushl  -0x18(%ebp)
f0106bab:	68 60 5f 13 f0       	push   $0xf0135f60
f0106bb0:	68 fa 00 00 00       	push   $0xfa
f0106bb5:	68 a3 5e 13 f0       	push   $0xf0135ea3
f0106bba:	e8 46 96 ff ff       	call   f0100205 <_panic>
f0106bbf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106bc2:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106bc7:	89 c2                	mov    %eax,%edx
f0106bc9:	8b 45 10             	mov    0x10(%ebp),%eax
f0106bcc:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f0106bce:	b8 00 00 00 00       	mov    $0x0,%eax
f0106bd3:	eb 0e                	jmp    f0106be3 <get_page_table+0x154>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f0106bd5:	8b 45 10             	mov    0x10(%ebp),%eax
f0106bd8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f0106bde:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f0106be3:	c9                   	leave  
f0106be4:	c3                   	ret    

f0106be5 <create_page_table>:

void * create_page_table(uint32 *ptr_directory, const uint32 virtual_address)
{
f0106be5:	55                   	push   %ebp
f0106be6:	89 e5                	mov    %esp,%ebp
f0106be8:	53                   	push   %ebx
f0106be9:	83 ec 14             	sub    $0x14,%esp
	//	b.	clear the TLB cache (using "tlbflush()")

	//change this "return" according to your answer

#if USE_KHEAP
	uint32 * ptr_page_table = kmalloc(PAGE_SIZE);
f0106bec:	83 ec 0c             	sub    $0xc,%esp
f0106bef:	68 00 10 00 00       	push   $0x1000
f0106bf4:	e8 68 0e 00 00       	call   f0107a61 <kmalloc>
f0106bf9:	83 c4 10             	add    $0x10,%esp
f0106bfc:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_page_table == NULL)
f0106bff:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106c03:	75 17                	jne    f0106c1c <create_page_table+0x37>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0106c05:	83 ec 04             	sub    $0x4,%esp
f0106c08:	68 8f 5f 13 f0       	push   $0xf0135f8f
f0106c0d:	68 18 01 00 00       	push   $0x118
f0106c12:	68 a3 5e 13 f0       	push   $0xf0135ea3
f0106c17:	e8 e9 95 ff ff       	call   f0100205 <_panic>
	}
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f0106c1c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106c1f:	c1 e8 16             	shr    $0x16,%eax
f0106c22:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106c29:	8b 45 08             	mov    0x8(%ebp),%eax
f0106c2c:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f0106c2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c32:	83 ec 0c             	sub    $0xc,%esp
f0106c35:	50                   	push   %eax
f0106c36:	e8 90 10 00 00       	call   f0107ccb <kheap_physical_address>
f0106c3b:	83 c4 10             	add    $0x10,%esp
f0106c3e:	83 c8 07             	or     $0x7,%eax
f0106c41:	89 03                	mov    %eax,(%ebx)
			kheap_physical_address((unsigned int)ptr_page_table)
			, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);

	//================
	memset(ptr_page_table , 0, PAGE_SIZE);
f0106c43:	83 ec 04             	sub    $0x4,%esp
f0106c46:	68 00 10 00 00       	push   $0x1000
f0106c4b:	6a 00                	push   $0x0
f0106c4d:	ff 75 f4             	pushl  -0xc(%ebp)
f0106c50:	e8 a1 ab 02 00       	call   f01317f6 <memset>
f0106c55:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106c58:	0f 20 d8             	mov    %cr3,%eax
f0106c5b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106c5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106c61:	0f 22 d8             	mov    %eax,%cr3
#else
	uint32 * ptr_page_table ;
	__static_cpt(ptr_directory, virtual_address, &ptr_page_table) ;
#endif

	return ptr_page_table;
f0106c64:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0106c67:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106c6a:	c9                   	leave  
f0106c6b:	c3                   	ret    

f0106c6c <__static_cpt>:

void __static_cpt(uint32 *ptr_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106c6c:	55                   	push   %ebp
f0106c6d:	89 e5                	mov    %esp,%ebp
f0106c6f:	83 ec 28             	sub    $0x28,%esp
	struct FrameInfo* ptr_new_frame_info;
	int err = allocate_frame(&ptr_new_frame_info) ;
f0106c72:	83 ec 0c             	sub    $0xc,%esp
f0106c75:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0106c78:	50                   	push   %eax
f0106c79:	e8 52 fc ff ff       	call   f01068d0 <allocate_frame>
f0106c7e:	83 c4 10             	add    $0x10,%esp
f0106c81:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 phys_page_table = to_physical_address(ptr_new_frame_info);
f0106c84:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106c87:	83 ec 0c             	sub    $0xc,%esp
f0106c8a:	50                   	push   %eax
f0106c8b:	e8 03 f8 ff ff       	call   f0106493 <to_physical_address>
f0106c90:	83 c4 10             	add    $0x10,%esp
f0106c93:	89 45 f0             	mov    %eax,-0x10(%ebp)
	*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0106c96:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106c99:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106c9c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106c9f:	c1 e8 0c             	shr    $0xc,%eax
f0106ca2:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106ca5:	a1 0c 27 86 f0       	mov    0xf086270c,%eax
f0106caa:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0106cad:	72 17                	jb     f0106cc6 <__static_cpt+0x5a>
f0106caf:	ff 75 ec             	pushl  -0x14(%ebp)
f0106cb2:	68 60 5f 13 f0       	push   $0xf0135f60
f0106cb7:	68 30 01 00 00       	push   $0x130
f0106cbc:	68 a3 5e 13 f0       	push   $0xf0135ea3
f0106cc1:	e8 3f 95 ff ff       	call   f0100205 <_panic>
f0106cc6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106cc9:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106cce:	89 c2                	mov    %eax,%edx
f0106cd0:	8b 45 10             	mov    0x10(%ebp),%eax
f0106cd3:	89 10                	mov    %edx,(%eax)
	ptr_new_frame_info->references = 1;
f0106cd5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106cd8:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f0106cde:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106ce1:	c1 e8 16             	shr    $0x16,%eax
f0106ce4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106ceb:	8b 45 08             	mov    0x8(%ebp),%eax
f0106cee:	01 d0                	add    %edx,%eax
f0106cf0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106cf3:	83 ca 07             	or     $0x7,%edx
f0106cf6:	89 10                	mov    %edx,(%eax)
	//initialize new page table by 0's
	memset(*ptr_page_table , 0, PAGE_SIZE);
f0106cf8:	8b 45 10             	mov    0x10(%ebp),%eax
f0106cfb:	8b 00                	mov    (%eax),%eax
f0106cfd:	83 ec 04             	sub    $0x4,%esp
f0106d00:	68 00 10 00 00       	push   $0x1000
f0106d05:	6a 00                	push   $0x0
f0106d07:	50                   	push   %eax
f0106d08:	e8 e9 aa 02 00       	call   f01317f6 <memset>
f0106d0d:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106d10:	0f 20 d8             	mov    %cr3,%eax
f0106d13:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106d16:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106d19:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0106d1c:	90                   	nop
f0106d1d:	c9                   	leave  
f0106d1e:	c3                   	ret    

f0106d1f <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106d1f:	55                   	push   %ebp
f0106d20:	89 e5                	mov    %esp,%ebp
f0106d22:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106d25:	ff 75 0c             	pushl  0xc(%ebp)
f0106d28:	e8 66 f7 ff ff       	call   f0106493 <to_physical_address>
f0106d2d:	83 c4 04             	add    $0x4,%esp
f0106d30:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f0106d33:	83 ec 04             	sub    $0x4,%esp
f0106d36:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0106d39:	50                   	push   %eax
f0106d3a:	ff 75 10             	pushl  0x10(%ebp)
f0106d3d:	ff 75 08             	pushl  0x8(%ebp)
f0106d40:	e8 4a fd ff ff       	call   f0106a8f <get_page_table>
f0106d45:	83 c4 10             	add    $0x10,%esp
f0106d48:	83 f8 01             	cmp    $0x1,%eax
f0106d4b:	75 1b                	jne    f0106d68 <map_frame+0x49>
		//page_directory_entry = ptr_page_directory[PDX(virtual_address)];
		//ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
		=============================================================================================*/
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(ptr_page_directory, (uint32)virtual_address);
f0106d4d:	83 ec 08             	sub    $0x8,%esp
f0106d50:	ff 75 10             	pushl  0x10(%ebp)
f0106d53:	ff 75 08             	pushl  0x8(%ebp)
f0106d56:	e8 8a fe ff ff       	call   f0106be5 <create_page_table>
f0106d5b:	83 c4 10             	add    $0x10,%esp
f0106d5e:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//cprintf("======>page table created using kheap for VA %x at dir = %x PT = %x\n", virtual_address, ptr_page_directory[PDX(virtual_address)], ptr_page_table);
			uint32* ptr_page_table2 =NULL;
f0106d61:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
#endif

	}

	//cprintf("NOW .. map add = %x ptr_page_table = %x PTX(virtual_address) = %d\n", virtual_address, ptr_page_table,PTX(virtual_address));
	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f0106d68:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106d6b:	8b 55 10             	mov    0x10(%ebp),%edx
f0106d6e:	c1 ea 0c             	shr    $0xc,%edx
f0106d71:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106d77:	c1 e2 02             	shl    $0x2,%edx
f0106d7a:	01 d0                	add    %edx,%eax
f0106d7c:	8b 00                	mov    (%eax),%eax
f0106d7e:	89 45 ec             	mov    %eax,-0x14(%ebp)

	}*/

	/*NEW'15 CORRECT SOLUTION*/
	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f0106d81:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d84:	83 e0 01             	and    $0x1,%eax
f0106d87:	85 c0                	test   %eax,%eax
f0106d89:	74 25                	je     f0106db0 <map_frame+0x91>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f0106d8b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d8e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106d93:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106d96:	75 07                	jne    f0106d9f <map_frame+0x80>
			return 0;
f0106d98:	b8 00 00 00 00       	mov    $0x0,%eax
f0106d9d:	eb 43                	jmp    f0106de2 <map_frame+0xc3>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f0106d9f:	83 ec 08             	sub    $0x8,%esp
f0106da2:	ff 75 10             	pushl  0x10(%ebp)
f0106da5:	ff 75 08             	pushl  0x8(%ebp)
f0106da8:	e8 a7 00 00 00       	call   f0106e54 <unmap_frame>
f0106dad:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f0106db0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106db3:	8b 40 08             	mov    0x8(%eax),%eax
f0106db6:	40                   	inc    %eax
f0106db7:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106dba:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106dbe:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106dc1:	8b 55 10             	mov    0x10(%ebp),%edx
f0106dc4:	c1 ea 0c             	shr    $0xc,%edx
f0106dc7:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106dcd:	c1 e2 02             	shl    $0x2,%edx
f0106dd0:	01 c2                	add    %eax,%edx
f0106dd2:	8b 45 14             	mov    0x14(%ebp),%eax
f0106dd5:	0b 45 f4             	or     -0xc(%ebp),%eax
f0106dd8:	83 c8 01             	or     $0x1,%eax
f0106ddb:	89 02                	mov    %eax,(%edx)

	return 0;
f0106ddd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106de2:	c9                   	leave  
f0106de3:	c3                   	ret    

f0106de4 <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct FrameInfo * get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table)
{
f0106de4:	55                   	push   %ebp
f0106de5:	89 e5                	mov    %esp,%ebp
f0106de7:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	//cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f0106dea:	83 ec 04             	sub    $0x4,%esp
f0106ded:	ff 75 10             	pushl  0x10(%ebp)
f0106df0:	ff 75 0c             	pushl  0xc(%ebp)
f0106df3:	ff 75 08             	pushl  0x8(%ebp)
f0106df6:	e8 94 fc ff ff       	call   f0106a8f <get_page_table>
f0106dfb:	83 c4 10             	add    $0x10,%esp
f0106dfe:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf(".gfi .15\n");
	if((*ptr_page_table) != 0)
f0106e01:	8b 45 10             	mov    0x10(%ebp),%eax
f0106e04:	8b 00                	mov    (%eax),%eax
f0106e06:	85 c0                	test   %eax,%eax
f0106e08:	74 43                	je     f0106e4d <get_frame_info+0x69>
	{
		uint32 index_page_table = PTX(virtual_address);
f0106e0a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106e0d:	c1 e8 0c             	shr    $0xc,%eax
f0106e10:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106e15:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf(".gfi .2\n");
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f0106e18:	8b 45 10             	mov    0x10(%ebp),%eax
f0106e1b:	8b 00                	mov    (%eax),%eax
f0106e1d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106e20:	c1 e2 02             	shl    $0x2,%edx
f0106e23:	01 d0                	add    %edx,%eax
f0106e25:	8b 00                	mov    (%eax),%eax
f0106e27:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if( page_table_entry != 0)
f0106e2a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106e2e:	74 16                	je     f0106e46 <get_frame_info+0x62>
		{
			//cprintf(".gfi .3\n");
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f0106e30:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106e33:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106e38:	83 ec 0c             	sub    $0xc,%esp
f0106e3b:	50                   	push   %eax
f0106e3c:	e8 65 f6 ff ff       	call   f01064a6 <to_frame_info>
f0106e41:	83 c4 10             	add    $0x10,%esp
f0106e44:	eb 0c                	jmp    f0106e52 <get_frame_info+0x6e>
		}
		return 0;
f0106e46:	b8 00 00 00 00       	mov    $0x0,%eax
f0106e4b:	eb 05                	jmp    f0106e52 <get_frame_info+0x6e>
	}
	return 0;
f0106e4d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106e52:	c9                   	leave  
f0106e53:	c3                   	ret    

f0106e54 <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, uint32 virtual_address)
{
f0106e54:	55                   	push   %ebp
f0106e55:	89 e5                	mov    %esp,%ebp
f0106e57:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct FrameInfo* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f0106e5a:	83 ec 04             	sub    $0x4,%esp
f0106e5d:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0106e60:	50                   	push   %eax
f0106e61:	ff 75 0c             	pushl  0xc(%ebp)
f0106e64:	ff 75 08             	pushl  0x8(%ebp)
f0106e67:	e8 78 ff ff ff       	call   f0106de4 <get_frame_info>
f0106e6c:	83 c4 10             	add    $0x10,%esp
f0106e6f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f0106e72:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106e76:	74 60                	je     f0106ed8 <unmap_frame+0x84>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f0106e78:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106e7b:	8a 40 14             	mov    0x14(%eax),%al
f0106e7e:	84 c0                	test   %al,%al
f0106e80:	74 1c                	je     f0106e9e <unmap_frame+0x4a>
f0106e82:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106e89:	77 13                	ja     f0106e9e <unmap_frame+0x4a>
			cprintf("Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f0106e8b:	83 ec 08             	sub    $0x8,%esp
f0106e8e:	ff 75 0c             	pushl  0xc(%ebp)
f0106e91:	68 ac 5f 13 f0       	push   $0xf0135fac
f0106e96:	e8 73 9e ff ff       	call   f0100d0e <cprintf>
f0106e9b:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f0106e9e:	83 ec 0c             	sub    $0xc,%esp
f0106ea1:	ff 75 f4             	pushl  -0xc(%ebp)
f0106ea4:	e8 b6 fb ff ff       	call   f0106a5f <decrement_references>
f0106ea9:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f0106eac:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106eaf:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106eb2:	c1 ea 0c             	shr    $0xc,%edx
f0106eb5:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106ebb:	c1 e2 02             	shl    $0x2,%edx
f0106ebe:	01 d0                	add    %edx,%eax
f0106ec0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate(ptr_page_directory, (void *)virtual_address);
f0106ec6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106ec9:	83 ec 08             	sub    $0x8,%esp
f0106ecc:	50                   	push   %eax
f0106ecd:	ff 75 08             	pushl  0x8(%ebp)
f0106ed0:	e8 17 f6 ff ff       	call   f01064ec <tlb_invalidate>
f0106ed5:	83 c4 10             	add    $0x10,%esp
	}
}
f0106ed8:	90                   	nop
f0106ed9:	c9                   	leave  
f0106eda:	c3                   	ret    

f0106edb <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106edb:	55                   	push   %ebp
f0106edc:	89 e5                	mov    %esp,%ebp
f0106ede:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106ee1:	ff 75 0c             	pushl  0xc(%ebp)
f0106ee4:	e8 aa f5 ff ff       	call   f0106493 <to_physical_address>
f0106ee9:	83 c4 04             	add    $0x4,%esp
f0106eec:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106eef:	8b 45 10             	mov    0x10(%ebp),%eax
f0106ef2:	c1 e8 16             	shr    $0x16,%eax
f0106ef5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106efc:	8b 45 08             	mov    0x8(%ebp),%eax
f0106eff:	01 d0                	add    %edx,%eax
f0106f01:	8b 00                	mov    (%eax),%eax
f0106f03:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106f06:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0106f0d:	77 19                	ja     f0106f28 <loadtime_map_frame+0x4d>
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106f0f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f12:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106f17:	83 ec 0c             	sub    $0xc,%esp
f0106f1a:	50                   	push   %eax
f0106f1b:	e8 8c 0d 00 00       	call   f0107cac <kheap_virtual_address>
f0106f20:	83 c4 10             	add    $0x10,%esp
f0106f23:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106f26:	eb 40                	jmp    f0106f68 <loadtime_map_frame+0x8d>
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106f28:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f2b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106f30:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106f33:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106f36:	c1 e8 0c             	shr    $0xc,%eax
f0106f39:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106f3c:	a1 0c 27 86 f0       	mov    0xf086270c,%eax
f0106f41:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106f44:	72 17                	jb     f0106f5d <loadtime_map_frame+0x82>
f0106f46:	ff 75 e8             	pushl  -0x18(%ebp)
f0106f49:	68 60 5f 13 f0       	push   $0xf0135f60
f0106f4e:	68 e6 01 00 00       	push   $0x1e6
f0106f53:	68 a3 5e 13 f0       	push   $0xf0135ea3
f0106f58:	e8 a8 92 ff ff       	call   f0100205 <_panic>
f0106f5d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106f60:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106f65:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f0106f68:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106f6c:	75 14                	jne    f0106f82 <loadtime_map_frame+0xa7>
	{
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(ptr_page_directory, virtual_address);
f0106f6e:	83 ec 08             	sub    $0x8,%esp
f0106f71:	ff 75 10             	pushl  0x10(%ebp)
f0106f74:	ff 75 08             	pushl  0x8(%ebp)
f0106f77:	e8 69 fc ff ff       	call   f0106be5 <create_page_table>
f0106f7c:	83 c4 10             	add    $0x10,%esp
f0106f7f:	89 45 f4             	mov    %eax,-0xc(%ebp)
			__static_cpt(ptr_page_directory, virtual_address, &ptr_page_table);
		}
#endif
	}

	ptr_frame_info->references++;
f0106f82:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106f85:	8b 40 08             	mov    0x8(%eax),%eax
f0106f88:	40                   	inc    %eax
f0106f89:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106f8c:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106f90:	8b 45 10             	mov    0x10(%ebp),%eax
f0106f93:	c1 e8 0c             	shr    $0xc,%eax
f0106f96:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106f9b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106fa2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106fa5:	01 c2                	add    %eax,%edx
f0106fa7:	8b 45 14             	mov    0x14(%ebp),%eax
f0106faa:	0b 45 f0             	or     -0x10(%ebp),%eax
f0106fad:	83 c8 01             	or     $0x1,%eax
f0106fb0:	89 02                	mov    %eax,(%edx)

	return 0;
f0106fb2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106fb7:	c9                   	leave  
f0106fb8:	c3                   	ret    

f0106fb9 <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f0106fb9:	55                   	push   %ebp
f0106fba:	89 e5                	mov    %esp,%ebp
f0106fbc:	57                   	push   %edi
f0106fbd:	56                   	push   %esi
f0106fbe:	53                   	push   %ebx
f0106fbf:	83 ec 20             	sub    $0x20,%esp

	//calculate the free frames from the free frame list
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f0106fc2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 totalFreeBuffered = 0 ;
f0106fc9:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 totalModified = 0 ;
f0106fd0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	LIST_FOREACH(ptr, &free_frame_list)
f0106fd7:	a1 14 27 86 f0       	mov    0xf0862714,%eax
f0106fdc:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106fdf:	eb 1a                	jmp    f0106ffb <calculate_available_frames+0x42>
	{
		if (ptr->isBuffered)
f0106fe1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106fe4:	8a 40 14             	mov    0x14(%eax),%al
f0106fe7:	84 c0                	test   %al,%al
f0106fe9:	74 05                	je     f0106ff0 <calculate_available_frames+0x37>
			totalFreeBuffered++ ;
f0106feb:	ff 45 e8             	incl   -0x18(%ebp)
f0106fee:	eb 03                	jmp    f0106ff3 <calculate_available_frames+0x3a>
		else
			totalFreeUnBuffered++ ;
f0106ff0:	ff 45 ec             	incl   -0x14(%ebp)
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
	uint32 totalFreeBuffered = 0 ;
	uint32 totalModified = 0 ;

	LIST_FOREACH(ptr, &free_frame_list)
f0106ff3:	a1 1c 27 86 f0       	mov    0xf086271c,%eax
f0106ff8:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106ffb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106fff:	74 07                	je     f0107008 <calculate_available_frames+0x4f>
f0107001:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107004:	8b 00                	mov    (%eax),%eax
f0107006:	eb 05                	jmp    f010700d <calculate_available_frames+0x54>
f0107008:	b8 00 00 00 00       	mov    $0x0,%eax
f010700d:	a3 1c 27 86 f0       	mov    %eax,0xf086271c
f0107012:	a1 1c 27 86 f0       	mov    0xf086271c,%eax
f0107017:	85 c0                	test   %eax,%eax
f0107019:	75 c6                	jne    f0106fe1 <calculate_available_frames+0x28>
f010701b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010701f:	75 c0                	jne    f0106fe1 <calculate_available_frames+0x28>
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0107021:	a1 b4 26 86 f0       	mov    0xf08626b4,%eax
f0107026:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107029:	eb 0b                	jmp    f0107036 <calculate_available_frames+0x7d>
	{
		totalModified++ ;
f010702b:	ff 45 e4             	incl   -0x1c(%ebp)
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f010702e:	a1 bc 26 86 f0       	mov    0xf08626bc,%eax
f0107033:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107036:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010703a:	74 07                	je     f0107043 <calculate_available_frames+0x8a>
f010703c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010703f:	8b 00                	mov    (%eax),%eax
f0107041:	eb 05                	jmp    f0107048 <calculate_available_frames+0x8f>
f0107043:	b8 00 00 00 00       	mov    $0x0,%eax
f0107048:	a3 bc 26 86 f0       	mov    %eax,0xf08626bc
f010704d:	a1 bc 26 86 f0       	mov    0xf08626bc,%eax
f0107052:	85 c0                	test   %eax,%eax
f0107054:	75 d5                	jne    f010702b <calculate_available_frames+0x72>
f0107056:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010705a:	75 cf                	jne    f010702b <calculate_available_frames+0x72>
	{
		totalModified++ ;
	}

	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f010705c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010705f:	89 45 d8             	mov    %eax,-0x28(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f0107062:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107065:	89 45 dc             	mov    %eax,-0x24(%ebp)
	counters.modified = totalModified;
f0107068:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010706b:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return counters;
f010706e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107071:	89 c3                	mov    %eax,%ebx
f0107073:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0107076:	ba 03 00 00 00       	mov    $0x3,%edx
f010707b:	89 df                	mov    %ebx,%edi
f010707d:	89 c6                	mov    %eax,%esi
f010707f:	89 d1                	mov    %edx,%ecx
f0107081:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f0107083:	8b 45 08             	mov    0x8(%ebp),%eax
f0107086:	83 c4 20             	add    $0x20,%esp
f0107089:	5b                   	pop    %ebx
f010708a:	5e                   	pop    %esi
f010708b:	5f                   	pop    %edi
f010708c:	5d                   	pop    %ebp
f010708d:	c2 04 00             	ret    $0x4

f0107090 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0107090:	55                   	push   %ebp
f0107091:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0107093:	8b 45 08             	mov    0x8(%ebp),%eax
f0107096:	8b 15 50 27 86 f0    	mov    0xf0862750,%edx
f010709c:	29 d0                	sub    %edx,%eax
f010709e:	c1 f8 03             	sar    $0x3,%eax
f01070a1:	89 c2                	mov    %eax,%edx
f01070a3:	89 d0                	mov    %edx,%eax
f01070a5:	c1 e0 02             	shl    $0x2,%eax
f01070a8:	01 d0                	add    %edx,%eax
f01070aa:	c1 e0 02             	shl    $0x2,%eax
f01070ad:	01 d0                	add    %edx,%eax
f01070af:	c1 e0 02             	shl    $0x2,%eax
f01070b2:	01 d0                	add    %edx,%eax
f01070b4:	89 c1                	mov    %eax,%ecx
f01070b6:	c1 e1 08             	shl    $0x8,%ecx
f01070b9:	01 c8                	add    %ecx,%eax
f01070bb:	89 c1                	mov    %eax,%ecx
f01070bd:	c1 e1 10             	shl    $0x10,%ecx
f01070c0:	01 c8                	add    %ecx,%eax
f01070c2:	01 c0                	add    %eax,%eax
f01070c4:	01 d0                	add    %edx,%eax
}
f01070c6:	5d                   	pop    %ebp
f01070c7:	c3                   	ret    

f01070c8 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f01070c8:	55                   	push   %ebp
f01070c9:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01070cb:	ff 75 08             	pushl  0x8(%ebp)
f01070ce:	e8 bd ff ff ff       	call   f0107090 <to_frame_number>
f01070d3:	83 c4 04             	add    $0x4,%esp
f01070d6:	c1 e0 0c             	shl    $0xc,%eax
}
f01070d9:	c9                   	leave  
f01070da:	c3                   	ret    

f01070db <create_shares_array>:
// [1] Create "shares" array:
//===========================
//Dynamically allocate the array of shared objects
//initialize the array of shared objects by 0's and empty = 1
void create_shares_array(uint32 numOfElements)
{
f01070db:	55                   	push   %ebp
f01070dc:	89 e5                	mov    %esp,%ebp
f01070de:	83 ec 18             	sub    $0x18,%esp
#if USE_KHEAP
	MAX_SHARES  = numOfElements ;
f01070e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01070e4:	a3 24 27 86 f0       	mov    %eax,0xf0862724
	shares = kmalloc(numOfElements*sizeof(struct Share));
f01070e9:	8b 55 08             	mov    0x8(%ebp),%edx
f01070ec:	89 d0                	mov    %edx,%eax
f01070ee:	c1 e0 02             	shl    $0x2,%eax
f01070f1:	01 d0                	add    %edx,%eax
f01070f3:	c1 e0 02             	shl    $0x2,%eax
f01070f6:	01 d0                	add    %edx,%eax
f01070f8:	c1 e0 02             	shl    $0x2,%eax
f01070fb:	83 ec 0c             	sub    $0xc,%esp
f01070fe:	50                   	push   %eax
f01070ff:	e8 5d 09 00 00       	call   f0107a61 <kmalloc>
f0107104:	83 c4 10             	add    $0x10,%esp
f0107107:	a3 e8 26 86 f0       	mov    %eax,0xf08626e8
	if (shares == NULL)
f010710c:	a1 e8 26 86 f0       	mov    0xf08626e8,%eax
f0107111:	85 c0                	test   %eax,%eax
f0107113:	75 14                	jne    f0107129 <create_shares_array+0x4e>
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
f0107115:	83 ec 04             	sub    $0x4,%esp
f0107118:	68 d0 5f 13 f0       	push   $0xf0135fd0
f010711d:	6a 21                	push   $0x21
f010711f:	68 14 60 13 f0       	push   $0xf0136014
f0107124:	e8 dc 90 ff ff       	call   f0100205 <_panic>
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f0107129:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0107130:	eb 4b                	jmp    f010717d <create_shares_array+0xa2>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
f0107132:	8b 0d e8 26 86 f0    	mov    0xf08626e8,%ecx
f0107138:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010713b:	89 d0                	mov    %edx,%eax
f010713d:	c1 e0 02             	shl    $0x2,%eax
f0107140:	01 d0                	add    %edx,%eax
f0107142:	c1 e0 02             	shl    $0x2,%eax
f0107145:	01 d0                	add    %edx,%eax
f0107147:	c1 e0 02             	shl    $0x2,%eax
f010714a:	01 c8                	add    %ecx,%eax
f010714c:	83 ec 04             	sub    $0x4,%esp
f010714f:	6a 54                	push   $0x54
f0107151:	6a 00                	push   $0x0
f0107153:	50                   	push   %eax
f0107154:	e8 9d a6 02 00       	call   f01317f6 <memset>
f0107159:	83 c4 10             	add    $0x10,%esp
		shares[i].empty = 1;
f010715c:	8b 0d e8 26 86 f0    	mov    0xf08626e8,%ecx
f0107162:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107165:	89 d0                	mov    %edx,%eax
f0107167:	c1 e0 02             	shl    $0x2,%eax
f010716a:	01 d0                	add    %edx,%eax
f010716c:	c1 e0 02             	shl    $0x2,%eax
f010716f:	01 d0                	add    %edx,%eax
f0107171:	c1 e0 02             	shl    $0x2,%eax
f0107174:	01 c8                	add    %ecx,%eax
f0107176:	c6 40 4d 01          	movb   $0x1,0x4d(%eax)
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f010717a:	ff 45 f4             	incl   -0xc(%ebp)
f010717d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107180:	a1 24 27 86 f0       	mov    0xf0862724,%eax
f0107185:	39 c2                	cmp    %eax,%edx
f0107187:	72 a9                	jb     f0107132 <create_shares_array+0x57>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
		shares[i].empty = 1;
	}
}
f0107189:	90                   	nop
f010718a:	c9                   	leave  
f010718b:	c3                   	ret    

f010718c <allocate_share_object>:
//	a) if succeed:
//		1. allocatedObject (pointer to struct Share) passed by reference
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
f010718c:	55                   	push   %ebp
f010718d:	89 e5                	mov    %esp,%ebp
f010718f:	53                   	push   %ebx
f0107190:	83 ec 14             	sub    $0x14,%esp
	int32 sharedObjectID = -1 ;
f0107193:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SHARES; ++i)
f010719a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01071a1:	eb 2c                	jmp    f01071cf <allocate_share_object+0x43>
	{
		if (shares[i].empty)
f01071a3:	8b 0d e8 26 86 f0    	mov    0xf08626e8,%ecx
f01071a9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01071ac:	89 d0                	mov    %edx,%eax
f01071ae:	c1 e0 02             	shl    $0x2,%eax
f01071b1:	01 d0                	add    %edx,%eax
f01071b3:	c1 e0 02             	shl    $0x2,%eax
f01071b6:	01 d0                	add    %edx,%eax
f01071b8:	c1 e0 02             	shl    $0x2,%eax
f01071bb:	01 c8                	add    %ecx,%eax
f01071bd:	8a 40 4d             	mov    0x4d(%eax),%al
f01071c0:	84 c0                	test   %al,%al
f01071c2:	74 08                	je     f01071cc <allocate_share_object+0x40>
		{
			sharedObjectID = i;
f01071c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01071c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f01071ca:	eb 0f                	jmp    f01071db <allocate_share_object+0x4f>
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
	int32 sharedObjectID = -1 ;
	for (int i = 0; i < MAX_SHARES; ++i)
f01071cc:	ff 45 f0             	incl   -0x10(%ebp)
f01071cf:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01071d2:	a1 24 27 86 f0       	mov    0xf0862724,%eax
f01071d7:	39 c2                	cmp    %eax,%edx
f01071d9:	72 c8                	jb     f01071a3 <allocate_share_object+0x17>
			sharedObjectID = i;
			break;
		}
	}

	if (sharedObjectID == -1)
f01071db:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f01071df:	75 0a                	jne    f01071eb <allocate_share_object+0x5f>
	{
		return E_NO_SHARE ;
f01071e1:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
f01071e6:	e9 94 00 00 00       	jmp    f010727f <allocate_share_object+0xf3>
		}
#endif
*/
	}

	*allocatedObject = &(shares[sharedObjectID]);
f01071eb:	8b 0d e8 26 86 f0    	mov    0xf08626e8,%ecx
f01071f1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071f4:	89 d0                	mov    %edx,%eax
f01071f6:	c1 e0 02             	shl    $0x2,%eax
f01071f9:	01 d0                	add    %edx,%eax
f01071fb:	c1 e0 02             	shl    $0x2,%eax
f01071fe:	01 d0                	add    %edx,%eax
f0107200:	c1 e0 02             	shl    $0x2,%eax
f0107203:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0107206:	8b 45 08             	mov    0x8(%ebp),%eax
f0107209:	89 10                	mov    %edx,(%eax)
	shares[sharedObjectID].empty = 0;
f010720b:	8b 0d e8 26 86 f0    	mov    0xf08626e8,%ecx
f0107211:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107214:	89 d0                	mov    %edx,%eax
f0107216:	c1 e0 02             	shl    $0x2,%eax
f0107219:	01 d0                	add    %edx,%eax
f010721b:	c1 e0 02             	shl    $0x2,%eax
f010721e:	01 d0                	add    %edx,%eax
f0107220:	c1 e0 02             	shl    $0x2,%eax
f0107223:	01 c8                	add    %ecx,%eax
f0107225:	c6 40 4d 00          	movb   $0x0,0x4d(%eax)

#if USE_KHEAP
	{
		shares[sharedObjectID].framesStorage = create_frames_storage();
f0107229:	8b 0d e8 26 86 f0    	mov    0xf08626e8,%ecx
f010722f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107232:	89 d0                	mov    %edx,%eax
f0107234:	c1 e0 02             	shl    $0x2,%eax
f0107237:	01 d0                	add    %edx,%eax
f0107239:	c1 e0 02             	shl    $0x2,%eax
f010723c:	01 d0                	add    %edx,%eax
f010723e:	c1 e0 02             	shl    $0x2,%eax
f0107241:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
f0107244:	e8 97 01 00 00       	call   f01073e0 <create_frames_storage>
f0107249:	89 43 50             	mov    %eax,0x50(%ebx)
	}
#endif
	memset(shares[sharedObjectID].framesStorage, 0, PAGE_SIZE);
f010724c:	8b 0d e8 26 86 f0    	mov    0xf08626e8,%ecx
f0107252:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107255:	89 d0                	mov    %edx,%eax
f0107257:	c1 e0 02             	shl    $0x2,%eax
f010725a:	01 d0                	add    %edx,%eax
f010725c:	c1 e0 02             	shl    $0x2,%eax
f010725f:	01 d0                	add    %edx,%eax
f0107261:	c1 e0 02             	shl    $0x2,%eax
f0107264:	01 c8                	add    %ecx,%eax
f0107266:	8b 40 50             	mov    0x50(%eax),%eax
f0107269:	83 ec 04             	sub    $0x4,%esp
f010726c:	68 00 10 00 00       	push   $0x1000
f0107271:	6a 00                	push   $0x0
f0107273:	50                   	push   %eax
f0107274:	e8 7d a5 02 00       	call   f01317f6 <memset>
f0107279:	83 c4 10             	add    $0x10,%esp

	return sharedObjectID;
f010727c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010727f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107282:	c9                   	leave  
f0107283:	c3                   	ret    

f0107284 <get_share_object_ID>:
//Search for the given shared object in the "shares" array
//Return:
//	a) if found: SharedObjectID (index of the shared object in the array)
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
f0107284:	55                   	push   %ebp
f0107285:	89 e5                	mov    %esp,%ebp
f0107287:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010728a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(; i< MAX_SHARES; ++i)
f0107291:	eb 7b                	jmp    f010730e <get_share_object_ID+0x8a>
	{
		if (shares[i].empty)
f0107293:	8b 0d e8 26 86 f0    	mov    0xf08626e8,%ecx
f0107299:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010729c:	89 d0                	mov    %edx,%eax
f010729e:	c1 e0 02             	shl    $0x2,%eax
f01072a1:	01 d0                	add    %edx,%eax
f01072a3:	c1 e0 02             	shl    $0x2,%eax
f01072a6:	01 d0                	add    %edx,%eax
f01072a8:	c1 e0 02             	shl    $0x2,%eax
f01072ab:	01 c8                	add    %ecx,%eax
f01072ad:	8a 40 4d             	mov    0x4d(%eax),%al
f01072b0:	84 c0                	test   %al,%al
f01072b2:	75 56                	jne    f010730a <get_share_object_ID+0x86>
			continue;

		//cprintf("shared var name = %s compared with %s\n", name, shares[i].name);
		if(shares[i].ownerID == ownerID && strcmp(name, shares[i].name)==0)
f01072b4:	8b 0d e8 26 86 f0    	mov    0xf08626e8,%ecx
f01072ba:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072bd:	89 d0                	mov    %edx,%eax
f01072bf:	c1 e0 02             	shl    $0x2,%eax
f01072c2:	01 d0                	add    %edx,%eax
f01072c4:	c1 e0 02             	shl    $0x2,%eax
f01072c7:	01 d0                	add    %edx,%eax
f01072c9:	c1 e0 02             	shl    $0x2,%eax
f01072cc:	01 c8                	add    %ecx,%eax
f01072ce:	8b 00                	mov    (%eax),%eax
f01072d0:	3b 45 08             	cmp    0x8(%ebp),%eax
f01072d3:	75 36                	jne    f010730b <get_share_object_ID+0x87>
f01072d5:	8b 0d e8 26 86 f0    	mov    0xf08626e8,%ecx
f01072db:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072de:	89 d0                	mov    %edx,%eax
f01072e0:	c1 e0 02             	shl    $0x2,%eax
f01072e3:	01 d0                	add    %edx,%eax
f01072e5:	c1 e0 02             	shl    $0x2,%eax
f01072e8:	01 d0                	add    %edx,%eax
f01072ea:	c1 e0 02             	shl    $0x2,%eax
f01072ed:	01 c8                	add    %ecx,%eax
f01072ef:	83 c0 04             	add    $0x4,%eax
f01072f2:	83 ec 08             	sub    $0x8,%esp
f01072f5:	50                   	push   %eax
f01072f6:	ff 75 0c             	pushl  0xc(%ebp)
f01072f9:	e8 16 a4 02 00       	call   f0131714 <strcmp>
f01072fe:	83 c4 10             	add    $0x10,%esp
f0107301:	85 c0                	test   %eax,%eax
f0107303:	75 06                	jne    f010730b <get_share_object_ID+0x87>
		{
			//cprintf("%s found\n", name);
			return i;
f0107305:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107308:	eb 19                	jmp    f0107323 <get_share_object_ID+0x9f>
	int i=0;

	for(; i< MAX_SHARES; ++i)
	{
		if (shares[i].empty)
			continue;
f010730a:	90                   	nop
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
	int i=0;

	for(; i< MAX_SHARES; ++i)
f010730b:	ff 45 f4             	incl   -0xc(%ebp)
f010730e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107311:	a1 24 27 86 f0       	mov    0xf0862724,%eax
f0107316:	39 c2                	cmp    %eax,%edx
f0107318:	0f 82 75 ff ff ff    	jb     f0107293 <get_share_object_ID+0xf>
		{
			//cprintf("%s found\n", name);
			return i;
		}
	}
	return E_SHARED_MEM_NOT_EXISTS;
f010731e:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
f0107323:	c9                   	leave  
f0107324:	c3                   	ret    

f0107325 <free_share_object>:
//delete the given sharedObjectID from the "shares" array
//Return:
//	a) 0 if succeed
//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists
int free_share_object(uint32 sharedObjectID)
{
f0107325:	55                   	push   %ebp
f0107326:	89 e5                	mov    %esp,%ebp
f0107328:	83 ec 08             	sub    $0x8,%esp
	if (sharedObjectID >= MAX_SHARES)
f010732b:	a1 24 27 86 f0       	mov    0xf0862724,%eax
f0107330:	39 45 08             	cmp    %eax,0x8(%ebp)
f0107333:	72 0a                	jb     f010733f <free_share_object+0x1a>
		return E_SHARED_MEM_NOT_EXISTS;
f0107335:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f010733a:	e9 9f 00 00 00       	jmp    f01073de <free_share_object+0xb9>

	//panic("deleteSharedObject: not implemented yet");
	clear_frames_storage(shares[sharedObjectID].framesStorage);
f010733f:	8b 0d e8 26 86 f0    	mov    0xf08626e8,%ecx
f0107345:	8b 55 08             	mov    0x8(%ebp),%edx
f0107348:	89 d0                	mov    %edx,%eax
f010734a:	c1 e0 02             	shl    $0x2,%eax
f010734d:	01 d0                	add    %edx,%eax
f010734f:	c1 e0 02             	shl    $0x2,%eax
f0107352:	01 d0                	add    %edx,%eax
f0107354:	c1 e0 02             	shl    $0x2,%eax
f0107357:	01 c8                	add    %ecx,%eax
f0107359:	8b 40 50             	mov    0x50(%eax),%eax
f010735c:	83 ec 0c             	sub    $0xc,%esp
f010735f:	50                   	push   %eax
f0107360:	e8 52 01 00 00       	call   f01074b7 <clear_frames_storage>
f0107365:	83 c4 10             	add    $0x10,%esp
#if USE_KHEAP
	kfree(shares[sharedObjectID].framesStorage);
f0107368:	8b 0d e8 26 86 f0    	mov    0xf08626e8,%ecx
f010736e:	8b 55 08             	mov    0x8(%ebp),%edx
f0107371:	89 d0                	mov    %edx,%eax
f0107373:	c1 e0 02             	shl    $0x2,%eax
f0107376:	01 d0                	add    %edx,%eax
f0107378:	c1 e0 02             	shl    $0x2,%eax
f010737b:	01 d0                	add    %edx,%eax
f010737d:	c1 e0 02             	shl    $0x2,%eax
f0107380:	01 c8                	add    %ecx,%eax
f0107382:	8b 40 50             	mov    0x50(%eax),%eax
f0107385:	83 ec 0c             	sub    $0xc,%esp
f0107388:	50                   	push   %eax
f0107389:	e8 e9 07 00 00       	call   f0107b77 <kfree>
f010738e:	83 c4 10             	add    $0x10,%esp
#endif
	memset(&(shares[sharedObjectID]), 0, sizeof(struct Share));
f0107391:	8b 0d e8 26 86 f0    	mov    0xf08626e8,%ecx
f0107397:	8b 55 08             	mov    0x8(%ebp),%edx
f010739a:	89 d0                	mov    %edx,%eax
f010739c:	c1 e0 02             	shl    $0x2,%eax
f010739f:	01 d0                	add    %edx,%eax
f01073a1:	c1 e0 02             	shl    $0x2,%eax
f01073a4:	01 d0                	add    %edx,%eax
f01073a6:	c1 e0 02             	shl    $0x2,%eax
f01073a9:	01 c8                	add    %ecx,%eax
f01073ab:	83 ec 04             	sub    $0x4,%esp
f01073ae:	6a 54                	push   $0x54
f01073b0:	6a 00                	push   $0x0
f01073b2:	50                   	push   %eax
f01073b3:	e8 3e a4 02 00       	call   f01317f6 <memset>
f01073b8:	83 c4 10             	add    $0x10,%esp
	shares[sharedObjectID].empty = 1;
f01073bb:	8b 0d e8 26 86 f0    	mov    0xf08626e8,%ecx
f01073c1:	8b 55 08             	mov    0x8(%ebp),%edx
f01073c4:	89 d0                	mov    %edx,%eax
f01073c6:	c1 e0 02             	shl    $0x2,%eax
f01073c9:	01 d0                	add    %edx,%eax
f01073cb:	c1 e0 02             	shl    $0x2,%eax
f01073ce:	01 d0                	add    %edx,%eax
f01073d0:	c1 e0 02             	shl    $0x2,%eax
f01073d3:	01 c8                	add    %ecx,%eax
f01073d5:	c6 40 4d 01          	movb   $0x1,0x4d(%eax)

	return 0;
f01073d9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01073de:	c9                   	leave  
f01073df:	c3                   	ret    

f01073e0 <create_frames_storage>:
//===========================
// [5] Create frames_storage:
//===========================
// if KHEAP = 1: Create the frames_storage by allocating a PAGE for its directory
inline uint32* create_frames_storage()
{
f01073e0:	55                   	push   %ebp
f01073e1:	89 e5                	mov    %esp,%ebp
f01073e3:	83 ec 18             	sub    $0x18,%esp
	uint32* frames_storage = kmalloc(PAGE_SIZE);
f01073e6:	83 ec 0c             	sub    $0xc,%esp
f01073e9:	68 00 10 00 00       	push   $0x1000
f01073ee:	e8 6e 06 00 00       	call   f0107a61 <kmalloc>
f01073f3:	83 c4 10             	add    $0x10,%esp
f01073f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(frames_storage == NULL)
f01073f9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01073fd:	75 17                	jne    f0107416 <create_frames_storage+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f01073ff:	83 ec 04             	sub    $0x4,%esp
f0107402:	68 35 60 13 f0       	push   $0xf0136035
f0107407:	68 a5 00 00 00       	push   $0xa5
f010740c:	68 14 60 13 f0       	push   $0xf0136014
f0107411:	e8 ef 8d ff ff       	call   f0100205 <_panic>
	}
	return frames_storage;
f0107416:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0107419:	c9                   	leave  
f010741a:	c3                   	ret    

f010741b <add_frame_to_storage>:
//===========================
// [6] Add frame to storage:
//===========================
// Add a frame info to the storage of frames at the given index
inline void add_frame_to_storage(uint32* frames_storage, struct FrameInfo* ptr_frame_info, uint32 index)
{
f010741b:	55                   	push   %ebp
f010741c:	89 e5                	mov    %esp,%ebp
f010741e:	53                   	push   %ebx
f010741f:	83 ec 14             	sub    $0x14,%esp
	uint32 va = index * PAGE_SIZE ;
f0107422:	8b 45 10             	mov    0x10(%ebp),%eax
f0107425:	c1 e0 0c             	shl    $0xc,%eax
f0107428:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	int r = get_page_table(frames_storage,  va, &ptr_page_table);
f010742b:	83 ec 04             	sub    $0x4,%esp
f010742e:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107431:	50                   	push   %eax
f0107432:	ff 75 f4             	pushl  -0xc(%ebp)
f0107435:	ff 75 08             	pushl  0x8(%ebp)
f0107438:	e8 52 f6 ff ff       	call   f0106a8f <get_page_table>
f010743d:	83 c4 10             	add    $0x10,%esp
f0107440:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(r == TABLE_NOT_EXIST)
f0107443:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0107447:	75 14                	jne    f010745d <add_frame_to_storage+0x42>
	{
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(frames_storage, (uint32)va);
f0107449:	83 ec 08             	sub    $0x8,%esp
f010744c:	ff 75 f4             	pushl  -0xc(%ebp)
f010744f:	ff 75 08             	pushl  0x8(%ebp)
f0107452:	e8 8e f7 ff ff       	call   f0106be5 <create_page_table>
f0107457:	83 c4 10             	add    $0x10,%esp
f010745a:	89 45 ec             	mov    %eax,-0x14(%ebp)
			__static_cpt(frames_storage, (uint32)va, &ptr_page_table);

		}
#endif
	}
	ptr_page_table[PTX(va)] = CONSTRUCT_ENTRY(to_physical_address(ptr_frame_info), 0 | PERM_PRESENT);
f010745d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107460:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107463:	c1 ea 0c             	shr    $0xc,%edx
f0107466:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010746c:	c1 e2 02             	shl    $0x2,%edx
f010746f:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
f0107472:	83 ec 0c             	sub    $0xc,%esp
f0107475:	ff 75 0c             	pushl  0xc(%ebp)
f0107478:	e8 4b fc ff ff       	call   f01070c8 <to_physical_address>
f010747d:	83 c4 10             	add    $0x10,%esp
f0107480:	83 c8 01             	or     $0x1,%eax
f0107483:	89 03                	mov    %eax,(%ebx)
}
f0107485:	90                   	nop
f0107486:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107489:	c9                   	leave  
f010748a:	c3                   	ret    

f010748b <get_frame_from_storage>:
//===========================
// [7] Get frame from storage:
//===========================
// Get a frame info from the storage of frames at the given index
inline struct FrameInfo* get_frame_from_storage(uint32* frames_storage, uint32 index)
{
f010748b:	55                   	push   %ebp
f010748c:	89 e5                	mov    %esp,%ebp
f010748e:	83 ec 18             	sub    $0x18,%esp
	struct FrameInfo* ptr_frame_info;
	uint32 *ptr_page_table ;
	uint32 va = index * PAGE_SIZE ;
f0107491:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107494:	c1 e0 0c             	shl    $0xc,%eax
f0107497:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_frame_info = get_frame_info(frames_storage,  va, &ptr_page_table);
f010749a:	83 ec 04             	sub    $0x4,%esp
f010749d:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01074a0:	50                   	push   %eax
f01074a1:	ff 75 f4             	pushl  -0xc(%ebp)
f01074a4:	ff 75 08             	pushl  0x8(%ebp)
f01074a7:	e8 38 f9 ff ff       	call   f0106de4 <get_frame_info>
f01074ac:	83 c4 10             	add    $0x10,%esp
f01074af:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return ptr_frame_info;
f01074b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01074b5:	c9                   	leave  
f01074b6:	c3                   	ret    

f01074b7 <clear_frames_storage>:

//===========================
// [8] Clear the frames_storage:
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
f01074b7:	55                   	push   %ebp
f01074b8:	89 e5                	mov    %esp,%ebp
f01074ba:	83 ec 18             	sub    $0x18,%esp
	int fourMega = 1024 * PAGE_SIZE ;
f01074bd:	c7 45 f0 00 00 40 00 	movl   $0x400000,-0x10(%ebp)
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f01074c4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01074cb:	eb 5b                	jmp    f0107528 <clear_frames_storage+0x71>
	{
		if (frames_storage[i] != 0)
f01074cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074d0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01074d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01074da:	01 d0                	add    %edx,%eax
f01074dc:	8b 00                	mov    (%eax),%eax
f01074de:	85 c0                	test   %eax,%eax
f01074e0:	74 43                	je     f0107525 <clear_frames_storage+0x6e>
		{
#if USE_KHEAP
			{
				kfree((void*)kheap_virtual_address(EXTRACT_ADDRESS(frames_storage[i])));
f01074e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074e5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01074ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01074ef:	01 d0                	add    %edx,%eax
f01074f1:	8b 00                	mov    (%eax),%eax
f01074f3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01074f8:	83 ec 0c             	sub    $0xc,%esp
f01074fb:	50                   	push   %eax
f01074fc:	e8 ab 07 00 00       	call   f0107cac <kheap_virtual_address>
f0107501:	83 c4 10             	add    $0x10,%esp
f0107504:	83 ec 0c             	sub    $0xc,%esp
f0107507:	50                   	push   %eax
f0107508:	e8 6a 06 00 00       	call   f0107b77 <kfree>
f010750d:	83 c4 10             	add    $0x10,%esp
#else
			{
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
			}
#endif
			frames_storage[i] = 0;
f0107510:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107513:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010751a:	8b 45 08             	mov    0x8(%ebp),%eax
f010751d:	01 d0                	add    %edx,%eax
f010751f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
	int fourMega = 1024 * PAGE_SIZE ;
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107525:	ff 45 f4             	incl   -0xc(%ebp)
f0107528:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010752f:	7e 9c                	jle    f01074cd <clear_frames_storage+0x16>
			}
#endif
			frames_storage[i] = 0;
		}
	}
}
f0107531:	90                   	nop
f0107532:	c9                   	leave  
f0107533:	c3                   	ret    

f0107534 <getSizeOfSharedObject>:

//==============================
// [9] Get Size of Share Object:
//==============================
int getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f0107534:	55                   	push   %ebp
f0107535:	89 e5                	mov    %esp,%ebp
f0107537:	83 ec 18             	sub    $0x18,%esp
	// RETURN:
	//	a) If found, return size of shared object
	//	b) Else, return E_SHARED_MEM_NOT_EXISTS
	//

	int shareObjectID = get_share_object_ID(ownerID, shareName);
f010753a:	83 ec 08             	sub    $0x8,%esp
f010753d:	ff 75 0c             	pushl  0xc(%ebp)
f0107540:	ff 75 08             	pushl  0x8(%ebp)
f0107543:	e8 3c fd ff ff       	call   f0107284 <get_share_object_ID>
f0107548:	83 c4 10             	add    $0x10,%esp
f010754b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (shareObjectID == E_SHARED_MEM_NOT_EXISTS)
f010754e:	83 7d f4 f0          	cmpl   $0xfffffff0,-0xc(%ebp)
f0107552:	75 07                	jne    f010755b <getSizeOfSharedObject+0x27>
		return E_SHARED_MEM_NOT_EXISTS;
f0107554:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f0107559:	eb 1d                	jmp    f0107578 <getSizeOfSharedObject+0x44>
	else
		return shares[shareObjectID].size;
f010755b:	8b 0d e8 26 86 f0    	mov    0xf08626e8,%ecx
f0107561:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107564:	89 d0                	mov    %edx,%eax
f0107566:	c1 e0 02             	shl    $0x2,%eax
f0107569:	01 d0                	add    %edx,%eax
f010756b:	c1 e0 02             	shl    $0x2,%eax
f010756e:	01 d0                	add    %edx,%eax
f0107570:	c1 e0 02             	shl    $0x2,%eax
f0107573:	01 c8                	add    %ecx,%eax
f0107575:	8b 40 44             	mov    0x44(%eax),%eax

	return 0;
}
f0107578:	c9                   	leave  
f0107579:	c3                   	ret    

f010757a <createSharedObject>:

//=========================
// [1] Create Share Object:
//=========================
int createSharedObject(int32 ownerID, char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010757a:	55                   	push   %ebp
f010757b:	89 e5                	mov    %esp,%ebp
f010757d:	83 ec 58             	sub    $0x58,%esp
f0107580:	8b 45 14             	mov    0x14(%ebp),%eax
f0107583:	88 45 b4             	mov    %al,-0x4c(%ebp)
	//TODO: [PROJECT MS3] [SHARING - KERNEL SIDE] createSharedObject()
	// your code is here, remove the panic and write your code
	struct Env* myenv = curenv;
f0107586:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010758b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	size=ROUNDUP(size,PAGE_SIZE);
f010758e:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f0107595:	8b 55 10             	mov    0x10(%ebp),%edx
f0107598:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010759b:	01 d0                	add    %edx,%eax
f010759d:	48                   	dec    %eax
f010759e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01075a1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01075a4:	ba 00 00 00 00       	mov    $0x0,%edx
f01075a9:	f7 75 e8             	divl   -0x18(%ebp)
f01075ac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01075af:	29 d0                	sub    %edx,%eax
f01075b1:	89 45 10             	mov    %eax,0x10(%ebp)
	virtual_address=ROUNDDOWN(virtual_address,PAGE_SIZE);
f01075b4:	8b 45 18             	mov    0x18(%ebp),%eax
f01075b7:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01075ba:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01075bd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01075c2:	89 45 18             	mov    %eax,0x18(%ebp)
	uint32 z=(uint32) virtual_address;
f01075c5:	8b 45 18             	mov    0x18(%ebp),%eax
f01075c8:	89 45 dc             	mov    %eax,-0x24(%ebp)
	struct Share*x;
	int l=	allocate_share_object(&x);
f01075cb:	83 ec 0c             	sub    $0xc,%esp
f01075ce:	8d 45 c8             	lea    -0x38(%ebp),%eax
f01075d1:	50                   	push   %eax
f01075d2:	e8 b5 fb ff ff       	call   f010718c <allocate_share_object>
f01075d7:	83 c4 10             	add    $0x10,%esp
f01075da:	89 45 d8             	mov    %eax,-0x28(%ebp)
	int k=get_share_object_ID(ownerID,shareName);
f01075dd:	83 ec 08             	sub    $0x8,%esp
f01075e0:	ff 75 0c             	pushl  0xc(%ebp)
f01075e3:	ff 75 08             	pushl  0x8(%ebp)
f01075e6:	e8 99 fc ff ff       	call   f0107284 <get_share_object_ID>
f01075eb:	83 c4 10             	add    $0x10,%esp
f01075ee:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if (k>=0){return E_SHARED_MEM_EXISTS;}
f01075f1:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01075f5:	78 0a                	js     f0107601 <createSharedObject+0x87>
f01075f7:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
f01075fc:	e9 d9 00 00 00       	jmp    f01076da <createSharedObject+0x160>

if(l==E_NO_SHARE){return E_NO_SHARE;}
f0107601:	83 7d d8 f2          	cmpl   $0xfffffff2,-0x28(%ebp)
f0107605:	75 0a                	jne    f0107611 <createSharedObject+0x97>
f0107607:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
f010760c:	e9 c9 00 00 00       	jmp    f01076da <createSharedObject+0x160>
	int ttt=allocate_chunk(myenv->env_page_directory,z,size,PERM_USER|PERM_WRITEABLE);
f0107611:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107614:	8b 40 5c             	mov    0x5c(%eax),%eax
f0107617:	6a 06                	push   $0x6
f0107619:	ff 75 10             	pushl  0x10(%ebp)
f010761c:	ff 75 dc             	pushl  -0x24(%ebp)
f010761f:	50                   	push   %eax
f0107620:	e8 44 16 00 00       	call   f0108c69 <allocate_chunk>
f0107625:	83 c4 10             	add    $0x10,%esp
f0107628:	89 45 d0             	mov    %eax,-0x30(%ebp)

	if(ttt==-1){return E_NO_SHARE;}
f010762b:	83 7d d0 ff          	cmpl   $0xffffffff,-0x30(%ebp)
f010762f:	75 0a                	jne    f010763b <createSharedObject+0xc1>
f0107631:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
f0107636:	e9 9f 00 00 00       	jmp    f01076da <createSharedObject+0x160>
	x->ownerID=ownerID;
f010763b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010763e:	8b 55 08             	mov    0x8(%ebp),%edx
f0107641:	89 10                	mov    %edx,(%eax)
	x->references=1;
f0107643:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0107646:	c7 40 48 01 00 00 00 	movl   $0x1,0x48(%eax)
strcpy(	x->name,shareName);
f010764d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0107650:	83 c0 04             	add    $0x4,%eax
f0107653:	83 ec 08             	sub    $0x8,%esp
f0107656:	ff 75 0c             	pushl  0xc(%ebp)
f0107659:	50                   	push   %eax
f010765a:	e8 f8 9f 02 00       	call   f0131657 <strcpy>
f010765f:	83 c4 10             	add    $0x10,%esp
	x->isWritable=isWritable;
f0107662:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0107665:	8a 55 b4             	mov    -0x4c(%ebp),%dl
f0107668:	88 50 4c             	mov    %dl,0x4c(%eax)
	x->size=size;
f010766b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010766e:	8b 55 10             	mov    0x10(%ebp),%edx
f0107671:	89 50 44             	mov    %edx,0x44(%eax)
	uint32 i;
	uint32 index=0;
f0107674:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo* ptrframeinfo;
	for( i=z;i<z+size;i+=PAGE_SIZE){
f010767b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010767e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107681:	eb 45                	jmp    f01076c8 <createSharedObject+0x14e>
				uint32*ptr1 =NULL;
f0107683:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		ptrframeinfo =get_frame_info(myenv->env_page_directory,i,&ptr1);
f010768a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010768d:	8b 40 5c             	mov    0x5c(%eax),%eax
f0107690:	83 ec 04             	sub    $0x4,%esp
f0107693:	8d 55 c4             	lea    -0x3c(%ebp),%edx
f0107696:	52                   	push   %edx
f0107697:	ff 75 f4             	pushl  -0xc(%ebp)
f010769a:	50                   	push   %eax
f010769b:	e8 44 f7 ff ff       	call   f0106de4 <get_frame_info>
f01076a0:	83 c4 10             	add    $0x10,%esp
f01076a3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		add_frame_to_storage(x->framesStorage,ptrframeinfo ,index);
f01076a6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01076a9:	8b 40 50             	mov    0x50(%eax),%eax
f01076ac:	83 ec 04             	sub    $0x4,%esp
f01076af:	ff 75 f0             	pushl  -0x10(%ebp)
f01076b2:	ff 75 cc             	pushl  -0x34(%ebp)
f01076b5:	50                   	push   %eax
f01076b6:	e8 60 fd ff ff       	call   f010741b <add_frame_to_storage>
f01076bb:	83 c4 10             	add    $0x10,%esp

	index++;
f01076be:	ff 45 f0             	incl   -0x10(%ebp)
	x->isWritable=isWritable;
	x->size=size;
	uint32 i;
	uint32 index=0;
	struct FrameInfo* ptrframeinfo;
	for( i=z;i<z+size;i+=PAGE_SIZE){
f01076c1:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01076c8:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01076cb:	8b 45 10             	mov    0x10(%ebp),%eax
f01076ce:	01 d0                	add    %edx,%eax
f01076d0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01076d3:	77 ae                	ja     f0107683 <createSharedObject+0x109>
		ptrframeinfo =get_frame_info(myenv->env_page_directory,i,&ptr1);
		add_frame_to_storage(x->framesStorage,ptrframeinfo ,index);

	index++;
	}
	return x->ownerID;
f01076d5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01076d8:	8b 00                	mov    (%eax),%eax
	// and return the ShareObjectID
	// RETURN:
	//	a) ShareObjectID (its index in "shares" array) if success
	//	b) E_SHARED_MEM_EXISTS if the shared object already exists
	//	c) E_NO_SHARE if the number of shared objects reaches max "MAX_SHARES"
}
f01076da:	c9                   	leave  
f01076db:	c3                   	ret    

f01076dc <getSharedObject>:
//======================
// [2] Get Share Object:
//======================
int getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f01076dc:	55                   	push   %ebp
f01076dd:	89 e5                	mov    %esp,%ebp
f01076df:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS3] [SHARING - KERNEL SIDE] getSharedObject()
	// your code is here, remove the panic and write your code
	//panic("getSharedObject() is not implemented yet...!!");
	struct Env* myenv = curenv; //The calling environment
f01076e2:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f01076e7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int x=get_share_object_ID(ownerID,shareName);
f01076ea:	83 ec 08             	sub    $0x8,%esp
f01076ed:	ff 75 0c             	pushl  0xc(%ebp)
f01076f0:	ff 75 08             	pushl  0x8(%ebp)
f01076f3:	e8 8c fb ff ff       	call   f0107284 <get_share_object_ID>
f01076f8:	83 c4 10             	add    $0x10,%esp
f01076fb:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(x>=0){
f01076fe:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0107702:	0f 88 17 01 00 00    	js     f010781f <getSharedObject+0x143>
	uint32 sizeee=ROUNDUP(shares[x].size,PAGE_SIZE)/PAGE_SIZE;
f0107708:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f010770f:	8b 0d e8 26 86 f0    	mov    0xf08626e8,%ecx
f0107715:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107718:	89 d0                	mov    %edx,%eax
f010771a:	c1 e0 02             	shl    $0x2,%eax
f010771d:	01 d0                	add    %edx,%eax
f010771f:	c1 e0 02             	shl    $0x2,%eax
f0107722:	01 d0                	add    %edx,%eax
f0107724:	c1 e0 02             	shl    $0x2,%eax
f0107727:	01 c8                	add    %ecx,%eax
f0107729:	8b 40 44             	mov    0x44(%eax),%eax
f010772c:	89 c2                	mov    %eax,%edx
f010772e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107731:	01 d0                	add    %edx,%eax
f0107733:	48                   	dec    %eax
f0107734:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0107737:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010773a:	ba 00 00 00 00       	mov    $0x0,%edx
f010773f:	f7 75 e4             	divl   -0x1c(%ebp)
f0107742:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107745:	29 d0                	sub    %edx,%eax
f0107747:	85 c0                	test   %eax,%eax
f0107749:	79 05                	jns    f0107750 <getSharedObject+0x74>
f010774b:	05 ff 0f 00 00       	add    $0xfff,%eax
f0107750:	c1 f8 0c             	sar    $0xc,%eax
f0107753:	89 45 dc             	mov    %eax,-0x24(%ebp)
    for(uint32 i=0;i<sizeee;i++){
f0107756:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010775d:	e9 8b 00 00 00       	jmp    f01077ed <getSharedObject+0x111>
	struct FrameInfo * f= get_frame_from_storage(shares[x].framesStorage,i);
f0107762:	8b 0d e8 26 86 f0    	mov    0xf08626e8,%ecx
f0107768:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010776b:	89 d0                	mov    %edx,%eax
f010776d:	c1 e0 02             	shl    $0x2,%eax
f0107770:	01 d0                	add    %edx,%eax
f0107772:	c1 e0 02             	shl    $0x2,%eax
f0107775:	01 d0                	add    %edx,%eax
f0107777:	c1 e0 02             	shl    $0x2,%eax
f010777a:	01 c8                	add    %ecx,%eax
f010777c:	8b 40 50             	mov    0x50(%eax),%eax
f010777f:	83 ec 08             	sub    $0x8,%esp
f0107782:	ff 75 f4             	pushl  -0xc(%ebp)
f0107785:	50                   	push   %eax
f0107786:	e8 00 fd ff ff       	call   f010748b <get_frame_from_storage>
f010778b:	83 c4 10             	add    $0x10,%esp
f010778e:	89 45 d8             	mov    %eax,-0x28(%ebp)
	int perm=PERM_USER|PERM_PRESENT;
f0107791:	c7 45 f0 05 00 00 00 	movl   $0x5,-0x10(%ebp)
	uint8 check=shares[x].isWritable;
f0107798:	8b 0d e8 26 86 f0    	mov    0xf08626e8,%ecx
f010779e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01077a1:	89 d0                	mov    %edx,%eax
f01077a3:	c1 e0 02             	shl    $0x2,%eax
f01077a6:	01 d0                	add    %edx,%eax
f01077a8:	c1 e0 02             	shl    $0x2,%eax
f01077ab:	01 d0                	add    %edx,%eax
f01077ad:	c1 e0 02             	shl    $0x2,%eax
f01077b0:	01 c8                	add    %ecx,%eax
f01077b2:	8a 40 4c             	mov    0x4c(%eax),%al
f01077b5:	88 45 d7             	mov    %al,-0x29(%ebp)
	if(check==1)//shares->isWritable==1
f01077b8:	80 7d d7 01          	cmpb   $0x1,-0x29(%ebp)
f01077bc:	75 04                	jne    f01077c2 <getSharedObject+0xe6>
	{
		//map_frame( myenv->env_page_directory , f ,(uint32)virtual_address+(i*PAGE_SIZE) ,PERM_WRITEABLE|);
		perm|=PERM_WRITEABLE;
f01077be:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
	}
	uint32 current_vi=((uint32)virtual_address+(i*PAGE_SIZE));
f01077c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01077c5:	c1 e0 0c             	shl    $0xc,%eax
f01077c8:	89 c2                	mov    %eax,%edx
f01077ca:	8b 45 10             	mov    0x10(%ebp),%eax
f01077cd:	01 d0                	add    %edx,%eax
f01077cf:	89 45 d0             	mov    %eax,-0x30(%ebp)
		map_frame( myenv->env_page_directory , f ,current_vi ,perm);
f01077d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01077d5:	8b 40 5c             	mov    0x5c(%eax),%eax
f01077d8:	ff 75 f0             	pushl  -0x10(%ebp)
f01077db:	ff 75 d0             	pushl  -0x30(%ebp)
f01077de:	ff 75 d8             	pushl  -0x28(%ebp)
f01077e1:	50                   	push   %eax
f01077e2:	e8 38 f5 ff ff       	call   f0106d1f <map_frame>
f01077e7:	83 c4 10             	add    $0x10,%esp
	//panic("getSharedObject() is not implemented yet...!!");
	struct Env* myenv = curenv; //The calling environment
	int x=get_share_object_ID(ownerID,shareName);
	if(x>=0){
	uint32 sizeee=ROUNDUP(shares[x].size,PAGE_SIZE)/PAGE_SIZE;
    for(uint32 i=0;i<sizeee;i++){
f01077ea:	ff 45 f4             	incl   -0xc(%ebp)
f01077ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01077f0:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01077f3:	0f 82 69 ff ff ff    	jb     f0107762 <getSharedObject+0x86>
	uint32 current_vi=((uint32)virtual_address+(i*PAGE_SIZE));
		map_frame( myenv->env_page_directory , f ,current_vi ,perm);
		//perm=PERM_USER|PERM_PRESENT;

	}
    shares[x].references++;
f01077f9:	8b 0d e8 26 86 f0    	mov    0xf08626e8,%ecx
f01077ff:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107802:	89 d0                	mov    %edx,%eax
f0107804:	c1 e0 02             	shl    $0x2,%eax
f0107807:	01 d0                	add    %edx,%eax
f0107809:	c1 e0 02             	shl    $0x2,%eax
f010780c:	01 d0                	add    %edx,%eax
f010780e:	c1 e0 02             	shl    $0x2,%eax
f0107811:	01 c8                	add    %ecx,%eax
f0107813:	8b 50 48             	mov    0x48(%eax),%edx
f0107816:	42                   	inc    %edx
f0107817:	89 50 48             	mov    %edx,0x48(%eax)
        return x;
f010781a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010781d:	eb 05                	jmp    f0107824 <getSharedObject+0x148>
    }
	else{
		return E_SHARED_MEM_NOT_EXISTS;
f010781f:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
		}

return 0;
}
f0107824:	c9                   	leave  
f0107825:	c3                   	ret    

f0107826 <freeSharedObject>:

//===================
// Free Share Object:
//===================
int freeSharedObject(int32 sharedObjectID, void *startVA)
{
f0107826:	55                   	push   %ebp
f0107827:	89 e5                	mov    %esp,%ebp
f0107829:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [SHARING - KERNEL SIDE] freeSharedObject()
	// your code is here, remove the panic and write your code
	panic("freeSharedObject() is not implemented yet...!!");
f010782c:	83 ec 04             	sub    $0x4,%esp
f010782f:	68 54 60 13 f0       	push   $0xf0136054
f0107834:	68 69 01 00 00       	push   $0x169
f0107839:	68 14 60 13 f0       	push   $0xf0136014
f010783e:	e8 c2 89 ff ff       	call   f0100205 <_panic>

f0107843 <isKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0107843:	55                   	push   %ebp
f0107844:	89 e5                	mov    %esp,%ebp
f0107846:	a1 58 27 86 f0       	mov    0xf0862758,%eax
f010784b:	83 f8 01             	cmp    $0x1,%eax
f010784e:	75 04                	jne    f0107854 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0107850:	b0 01                	mov    $0x1,%al
f0107852:	eb 02                	jmp    f0107856 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0107854:	b0 00                	mov    $0x0,%al
f0107856:	5d                   	pop    %ebp
f0107857:	c3                   	ret    

f0107858 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0107858:	55                   	push   %ebp
f0107859:	89 e5                	mov    %esp,%ebp
f010785b:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f010785e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107861:	c1 e8 0c             	shr    $0xc,%eax
f0107864:	89 c2                	mov    %eax,%edx
f0107866:	a1 0c 27 86 f0       	mov    0xf086270c,%eax
f010786b:	39 c2                	cmp    %eax,%edx
f010786d:	72 14                	jb     f0107883 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f010786f:	83 ec 04             	sub    $0x4,%esp
f0107872:	68 84 60 13 f0       	push   $0xf0136084
f0107877:	6a 55                	push   $0x55
f0107879:	68 a9 60 13 f0       	push   $0xf01360a9
f010787e:	e8 82 89 ff ff       	call   f0100205 <_panic>
	return &frames_info[PPN(physical_address)];
f0107883:	8b 15 50 27 86 f0    	mov    0xf0862750,%edx
f0107889:	8b 45 08             	mov    0x8(%ebp),%eax
f010788c:	c1 e8 0c             	shr    $0xc,%eax
f010788f:	89 c1                	mov    %eax,%ecx
f0107891:	89 c8                	mov    %ecx,%eax
f0107893:	01 c0                	add    %eax,%eax
f0107895:	01 c8                	add    %ecx,%eax
f0107897:	c1 e0 03             	shl    $0x3,%eax
f010789a:	01 d0                	add    %edx,%eax
}
f010789c:	c9                   	leave  
f010789d:	c3                   	ret    

f010789e <initialize_dyn_block_system>:
//NOTE: All kernel heap allocations are multiples of PAGE_SIZE (4KB)//
//==================================================================//
//==================================================================//

void initialize_dyn_block_system()
{
f010789e:	55                   	push   %ebp
f010789f:	89 e5                	mov    %esp,%ebp
f01078a1:	83 ec 28             	sub    $0x28,%esp

		       //TODO: [PROJECT MS2] [KERNEL HEAP] initialize_dyn_block_system
				// your code is here, remove the panic and write your code
				//[1] Initialize two lists (AllocMemBlocksList & FreeMemBlocksList) [Hint: use LIST_INIT()]
			        LIST_INIT(&AllocMemBlocksList);
f01078a4:	c7 05 c4 26 86 f0 00 	movl   $0x0,0xf08626c4
f01078ab:	00 00 00 
f01078ae:	c7 05 c8 26 86 f0 00 	movl   $0x0,0xf08626c8
f01078b5:	00 00 00 
f01078b8:	c7 05 d0 26 86 f0 00 	movl   $0x0,0xf08626d0
f01078bf:	00 00 00 
			        LIST_INIT(&FreeMemBlocksList);
f01078c2:	c7 05 60 27 86 f0 00 	movl   $0x0,0xf0862760
f01078c9:	00 00 00 
f01078cc:	c7 05 64 27 86 f0 00 	movl   $0x0,0xf0862764
f01078d3:	00 00 00 
f01078d6:	c7 05 6c 27 86 f0 00 	movl   $0x0,0xf086276c
f01078dd:	00 00 00 
			#if STATIC_MEMBLOCK_ALLOC
				//DO NOTHING
			#else
						MAX_MEM_BLOCK_CNT=NUM_OF_KHEAP_PAGES;
f01078e0:	c7 05 00 27 86 f0 ff 	movl   $0x9fff,0xf0862700
f01078e7:	9f 00 00 
						MemBlockNodes=(struct MemBlock*)KERNEL_HEAP_START;//
f01078ea:	c7 05 d4 26 86 f0 00 	movl   $0xf6000000,0xf08626d4
f01078f1:	00 00 f6 
						uint32 size=sizeof(struct MemBlock);//
f01078f4:	c7 45 f4 10 00 00 00 	movl   $0x10,-0xc(%ebp)
						uint32 newsize=size*MAX_MEM_BLOCK_CNT;
f01078fb:	a1 00 27 86 f0       	mov    0xf0862700,%eax
f0107900:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107903:	0f af c2             	imul   %edx,%eax
f0107906:	89 45 f0             	mov    %eax,-0x10(%ebp)
						newsize = ROUNDUP(newsize ,PAGE_SIZE );
f0107909:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f0107910:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107913:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107916:	01 d0                	add    %edx,%eax
f0107918:	48                   	dec    %eax
f0107919:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010791c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010791f:	ba 00 00 00 00       	mov    $0x0,%edx
f0107924:	f7 75 ec             	divl   -0x14(%ebp)
f0107927:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010792a:	29 d0                	sub    %edx,%eax
f010792c:	89 45 f0             	mov    %eax,-0x10(%ebp)
						allocate_chunk(ptr_page_directory,KERNEL_HEAP_START,newsize,PERM_WRITEABLE);
f010792f:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0107934:	6a 02                	push   $0x2
f0107936:	ff 75 f0             	pushl  -0x10(%ebp)
f0107939:	68 00 00 00 f6       	push   $0xf6000000
f010793e:	50                   	push   %eax
f010793f:	e8 25 13 00 00       	call   f0108c69 <allocate_chunk>
f0107944:	83 c4 10             	add    $0x10,%esp
				 * 		2. allocation should be aligned on PAGE boundary
				 * 	HINT: can use alloc_chunk(...) function
				 */
			#endif

				initialize_MemBlocksList(MAX_MEM_BLOCK_CNT);
f0107947:	a1 00 27 86 f0       	mov    0xf0862700,%eax
f010794c:	83 ec 0c             	sub    $0xc,%esp
f010794f:	50                   	push   %eax
f0107950:	e8 1d a8 02 00       	call   f0132172 <initialize_MemBlocksList>
f0107955:	83 c4 10             	add    $0x10,%esp
					struct MemBlock *temp =LIST_LAST(&AvailableMemBlocksList);
f0107958:	a1 98 27 86 f0       	mov    0xf0862798,%eax
f010795d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
					LIST_REMOVE(&AvailableMemBlocksList , temp);
f0107960:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0107964:	75 14                	jne    f010797a <initialize_dyn_block_system+0xdc>
f0107966:	83 ec 04             	sub    $0x4,%esp
f0107969:	68 c3 60 13 f0       	push   $0xf01360c3
f010796e:	6a 28                	push   $0x28
f0107970:	68 e1 60 13 f0       	push   $0xf01360e1
f0107975:	e8 8b 88 ff ff       	call   f0100205 <_panic>
f010797a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010797d:	8b 00                	mov    (%eax),%eax
f010797f:	85 c0                	test   %eax,%eax
f0107981:	74 10                	je     f0107993 <initialize_dyn_block_system+0xf5>
f0107983:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107986:	8b 00                	mov    (%eax),%eax
f0107988:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010798b:	8b 52 04             	mov    0x4(%edx),%edx
f010798e:	89 50 04             	mov    %edx,0x4(%eax)
f0107991:	eb 0b                	jmp    f010799e <initialize_dyn_block_system+0x100>
f0107993:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107996:	8b 40 04             	mov    0x4(%eax),%eax
f0107999:	a3 98 27 86 f0       	mov    %eax,0xf0862798
f010799e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01079a1:	8b 40 04             	mov    0x4(%eax),%eax
f01079a4:	85 c0                	test   %eax,%eax
f01079a6:	74 0f                	je     f01079b7 <initialize_dyn_block_system+0x119>
f01079a8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01079ab:	8b 40 04             	mov    0x4(%eax),%eax
f01079ae:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01079b1:	8b 12                	mov    (%edx),%edx
f01079b3:	89 10                	mov    %edx,(%eax)
f01079b5:	eb 0a                	jmp    f01079c1 <initialize_dyn_block_system+0x123>
f01079b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01079ba:	8b 00                	mov    (%eax),%eax
f01079bc:	a3 94 27 86 f0       	mov    %eax,0xf0862794
f01079c1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01079c4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01079ca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01079cd:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01079d4:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f01079d9:	48                   	dec    %eax
f01079da:	a3 a0 27 86 f0       	mov    %eax,0xf08627a0
					temp->size=(KERNEL_HEAP_MAX-KERNEL_HEAP_START)-newsize;
f01079df:	b8 00 f0 ff 09       	mov    $0x9fff000,%eax
f01079e4:	2b 45 f0             	sub    -0x10(%ebp),%eax
f01079e7:	89 c2                	mov    %eax,%edx
f01079e9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01079ec:	89 50 0c             	mov    %edx,0xc(%eax)
					temp->sva = KERNEL_HEAP_START+newsize;
f01079ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079f2:	8d 90 00 00 00 f6    	lea    -0xa000000(%eax),%edx
f01079f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01079fb:	89 50 08             	mov    %edx,0x8(%eax)
					LIST_INSERT_HEAD( &FreeMemBlocksList ,temp );
f01079fe:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0107a02:	75 14                	jne    f0107a18 <initialize_dyn_block_system+0x17a>
f0107a04:	83 ec 04             	sub    $0x4,%esp
f0107a07:	68 f4 60 13 f0       	push   $0xf01360f4
f0107a0c:	6a 2b                	push   $0x2b
f0107a0e:	68 e1 60 13 f0       	push   $0xf01360e1
f0107a13:	e8 ed 87 ff ff       	call   f0100205 <_panic>
f0107a18:	8b 15 60 27 86 f0    	mov    0xf0862760,%edx
f0107a1e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107a21:	89 10                	mov    %edx,(%eax)
f0107a23:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107a26:	8b 00                	mov    (%eax),%eax
f0107a28:	85 c0                	test   %eax,%eax
f0107a2a:	74 0d                	je     f0107a39 <initialize_dyn_block_system+0x19b>
f0107a2c:	a1 60 27 86 f0       	mov    0xf0862760,%eax
f0107a31:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0107a34:	89 50 04             	mov    %edx,0x4(%eax)
f0107a37:	eb 08                	jmp    f0107a41 <initialize_dyn_block_system+0x1a3>
f0107a39:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107a3c:	a3 64 27 86 f0       	mov    %eax,0xf0862764
f0107a41:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107a44:	a3 60 27 86 f0       	mov    %eax,0xf0862760
f0107a49:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107a4c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107a53:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f0107a58:	40                   	inc    %eax
f0107a59:	a3 6c 27 86 f0       	mov    %eax,0xf086276c





	}
f0107a5e:	90                   	nop
f0107a5f:	c9                   	leave  
f0107a60:	c3                   	ret    

f0107a61 <kmalloc>:

void* kmalloc(unsigned int size)
{
f0107a61:	55                   	push   %ebp
f0107a62:	89 e5                	mov    %esp,%ebp
f0107a64:	83 ec 18             	sub    $0x18,%esp
//kpanic_into_prompt("kmalloc() is not implemented yet...!!");
	size = ROUNDUP(size , PAGE_SIZE);
f0107a67:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0107a6e:	8b 55 08             	mov    0x8(%ebp),%edx
f0107a71:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107a74:	01 d0                	add    %edx,%eax
f0107a76:	48                   	dec    %eax
f0107a77:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107a7a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107a7d:	ba 00 00 00 00       	mov    $0x0,%edx
f0107a82:	f7 75 f0             	divl   -0x10(%ebp)
f0107a85:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107a88:	29 d0                	sub    %edx,%eax
f0107a8a:	89 45 08             	mov    %eax,0x8(%ebp)
		struct MemBlock *mem_block = NULL;
f0107a8d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		if ((KERNEL_HEAP_MAX-KERNEL_HEAP_START) < size){
f0107a94:	81 7d 08 00 f0 ff 09 	cmpl   $0x9fff000,0x8(%ebp)
f0107a9b:	76 0a                	jbe    f0107aa7 <kmalloc+0x46>
			return NULL ;
f0107a9d:	b8 00 00 00 00       	mov    $0x0,%eax
f0107aa2:	e9 ce 00 00 00       	jmp    f0107b75 <kmalloc+0x114>
		}
		if (isKHeapPlacementStrategyFIRSTFIT()){
f0107aa7:	e8 97 fd ff ff       	call   f0107843 <isKHeapPlacementStrategyFIRSTFIT>
f0107aac:	84 c0                	test   %al,%al
f0107aae:	74 13                	je     f0107ac3 <kmalloc+0x62>
			mem_block = alloc_block_FF(size);
f0107ab0:	83 ec 0c             	sub    $0xc,%esp
f0107ab3:	ff 75 08             	pushl  0x8(%ebp)
f0107ab6:	e8 5f a9 02 00       	call   f013241a <alloc_block_FF>
f0107abb:	83 c4 10             	add    $0x10,%esp
f0107abe:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107ac1:	eb 11                	jmp    f0107ad4 <kmalloc+0x73>
		}else{
			mem_block = alloc_block_BF(size);
f0107ac3:	83 ec 0c             	sub    $0xc,%esp
f0107ac6:	ff 75 08             	pushl  0x8(%ebp)
f0107ac9:	e8 ec aa 02 00       	call   f01325ba <alloc_block_BF>
f0107ace:	83 c4 10             	add    $0x10,%esp
f0107ad1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		}
		if (mem_block != NULL){
f0107ad4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107ad8:	0f 84 92 00 00 00    	je     f0107b70 <kmalloc+0x10f>
			int s = allocate_chunk(ptr_page_directory , mem_block->sva , size , PERM_WRITEABLE);
f0107ade:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107ae1:	8b 50 08             	mov    0x8(%eax),%edx
f0107ae4:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0107ae9:	6a 02                	push   $0x2
f0107aeb:	ff 75 08             	pushl  0x8(%ebp)
f0107aee:	52                   	push   %edx
f0107aef:	50                   	push   %eax
f0107af0:	e8 74 11 00 00       	call   f0108c69 <allocate_chunk>
f0107af5:	83 c4 10             	add    $0x10,%esp
f0107af8:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if (s == 0 ){
f0107afb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0107aff:	75 68                	jne    f0107b69 <kmalloc+0x108>
				LIST_INSERT_HEAD(&AllocMemBlocksList , mem_block);
f0107b01:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107b05:	75 14                	jne    f0107b1b <kmalloc+0xba>
f0107b07:	83 ec 04             	sub    $0x4,%esp
f0107b0a:	68 f4 60 13 f0       	push   $0xf01360f4
f0107b0f:	6a 4b                	push   $0x4b
f0107b11:	68 e1 60 13 f0       	push   $0xf01360e1
f0107b16:	e8 ea 86 ff ff       	call   f0100205 <_panic>
f0107b1b:	8b 15 c4 26 86 f0    	mov    0xf08626c4,%edx
f0107b21:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b24:	89 10                	mov    %edx,(%eax)
f0107b26:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b29:	8b 00                	mov    (%eax),%eax
f0107b2b:	85 c0                	test   %eax,%eax
f0107b2d:	74 0d                	je     f0107b3c <kmalloc+0xdb>
f0107b2f:	a1 c4 26 86 f0       	mov    0xf08626c4,%eax
f0107b34:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107b37:	89 50 04             	mov    %edx,0x4(%eax)
f0107b3a:	eb 08                	jmp    f0107b44 <kmalloc+0xe3>
f0107b3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b3f:	a3 c8 26 86 f0       	mov    %eax,0xf08626c8
f0107b44:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b47:	a3 c4 26 86 f0       	mov    %eax,0xf08626c4
f0107b4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b4f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107b56:	a1 d0 26 86 f0       	mov    0xf08626d0,%eax
f0107b5b:	40                   	inc    %eax
f0107b5c:	a3 d0 26 86 f0       	mov    %eax,0xf08626d0
				return (void *)mem_block->sva ;
f0107b61:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b64:	8b 40 08             	mov    0x8(%eax),%eax
f0107b67:	eb 0c                	jmp    f0107b75 <kmalloc+0x114>
			}else{
				return NULL;
f0107b69:	b8 00 00 00 00       	mov    $0x0,%eax
f0107b6e:	eb 05                	jmp    f0107b75 <kmalloc+0x114>
			}
		}else{
			return NULL;
f0107b70:	b8 00 00 00 00       	mov    $0x0,%eax
		}

	}
f0107b75:	c9                   	leave  
f0107b76:	c3                   	ret    

f0107b77 <kfree>:

	//change this "return" according to your answer


void kfree(void* virtual_address)
{
f0107b77:	55                   	push   %ebp
f0107b78:	89 e5                	mov    %esp,%ebp
f0107b7a:	83 ec 28             	sub    $0x28,%esp
	//kpanic_into_prompt("kmalloc() is not implemented yet...!!");

	if(virtual_address < (void*)KERNEL_HEAP_MAX && virtual_address >= (void*)KERNEL_HEAP_START){
f0107b7d:	81 7d 08 ff ef ff ff 	cmpl   $0xffffefff,0x8(%ebp)
f0107b84:	0f 87 1f 01 00 00    	ja     f0107ca9 <kfree+0x132>
f0107b8a:	81 7d 08 ff ff ff f5 	cmpl   $0xf5ffffff,0x8(%ebp)
f0107b91:	0f 86 12 01 00 00    	jbe    f0107ca9 <kfree+0x132>
	struct MemBlock *ptr=find_block(&AllocMemBlocksList,(uint32)virtual_address);
f0107b97:	8b 45 08             	mov    0x8(%ebp),%eax
f0107b9a:	83 ec 08             	sub    $0x8,%esp
f0107b9d:	50                   	push   %eax
f0107b9e:	68 c4 26 86 f0       	push   $0xf08626c4
f0107ba3:	e8 a7 a6 02 00       	call   f013224f <find_block>
f0107ba8:	83 c4 10             	add    $0x10,%esp
f0107bab:	89 45 f0             	mov    %eax,-0x10(%ebp)


	if(ptr!=NULL){
f0107bae:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107bb2:	0f 84 f1 00 00 00    	je     f0107ca9 <kfree+0x132>
	LIST_REMOVE(&AllocMemBlocksList,ptr);
f0107bb8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107bbc:	75 14                	jne    f0107bd2 <kfree+0x5b>
f0107bbe:	83 ec 04             	sub    $0x4,%esp
f0107bc1:	68 c3 60 13 f0       	push   $0xf01360c3
f0107bc6:	6a 6c                	push   $0x6c
f0107bc8:	68 e1 60 13 f0       	push   $0xf01360e1
f0107bcd:	e8 33 86 ff ff       	call   f0100205 <_panic>
f0107bd2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107bd5:	8b 00                	mov    (%eax),%eax
f0107bd7:	85 c0                	test   %eax,%eax
f0107bd9:	74 10                	je     f0107beb <kfree+0x74>
f0107bdb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107bde:	8b 00                	mov    (%eax),%eax
f0107be0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107be3:	8b 52 04             	mov    0x4(%edx),%edx
f0107be6:	89 50 04             	mov    %edx,0x4(%eax)
f0107be9:	eb 0b                	jmp    f0107bf6 <kfree+0x7f>
f0107beb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107bee:	8b 40 04             	mov    0x4(%eax),%eax
f0107bf1:	a3 c8 26 86 f0       	mov    %eax,0xf08626c8
f0107bf6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107bf9:	8b 40 04             	mov    0x4(%eax),%eax
f0107bfc:	85 c0                	test   %eax,%eax
f0107bfe:	74 0f                	je     f0107c0f <kfree+0x98>
f0107c00:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107c03:	8b 40 04             	mov    0x4(%eax),%eax
f0107c06:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107c09:	8b 12                	mov    (%edx),%edx
f0107c0b:	89 10                	mov    %edx,(%eax)
f0107c0d:	eb 0a                	jmp    f0107c19 <kfree+0xa2>
f0107c0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107c12:	8b 00                	mov    (%eax),%eax
f0107c14:	a3 c4 26 86 f0       	mov    %eax,0xf08626c4
f0107c19:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107c1c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0107c22:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107c25:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107c2c:	a1 d0 26 86 f0       	mov    0xf08626d0,%eax
f0107c31:	48                   	dec    %eax
f0107c32:	a3 d0 26 86 f0       	mov    %eax,0xf08626d0

	for(uint32 i=ROUNDDOWN(ptr->sva,PAGE_SIZE) ; i<ROUNDUP(ptr->sva+ptr->size,PAGE_SIZE) ; i+=PAGE_SIZE){
f0107c37:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107c3a:	8b 40 08             	mov    0x8(%eax),%eax
f0107c3d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107c40:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107c43:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107c48:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107c4b:	eb 1b                	jmp    f0107c68 <kfree+0xf1>
		unmap_frame(ptr_page_directory,i);
f0107c4d:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0107c52:	83 ec 08             	sub    $0x8,%esp
f0107c55:	ff 75 f4             	pushl  -0xc(%ebp)
f0107c58:	50                   	push   %eax
f0107c59:	e8 f6 f1 ff ff       	call   f0106e54 <unmap_frame>
f0107c5e:	83 c4 10             	add    $0x10,%esp


	if(ptr!=NULL){
	LIST_REMOVE(&AllocMemBlocksList,ptr);

	for(uint32 i=ROUNDDOWN(ptr->sva,PAGE_SIZE) ; i<ROUNDUP(ptr->sva+ptr->size,PAGE_SIZE) ; i+=PAGE_SIZE){
f0107c61:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0107c68:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f0107c6f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107c72:	8b 50 08             	mov    0x8(%eax),%edx
f0107c75:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107c78:	8b 40 0c             	mov    0xc(%eax),%eax
f0107c7b:	01 c2                	add    %eax,%edx
f0107c7d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107c80:	01 d0                	add    %edx,%eax
f0107c82:	48                   	dec    %eax
f0107c83:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0107c86:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107c89:	ba 00 00 00 00       	mov    $0x0,%edx
f0107c8e:	f7 75 e8             	divl   -0x18(%ebp)
f0107c91:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107c94:	29 d0                	sub    %edx,%eax
f0107c96:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0107c99:	77 b2                	ja     f0107c4d <kfree+0xd6>
		unmap_frame(ptr_page_directory,i);
	}
	insert_sorted_with_merge_freeList(ptr);
f0107c9b:	83 ec 0c             	sub    $0xc,%esp
f0107c9e:	ff 75 f0             	pushl  -0x10(%ebp)
f0107ca1:	e8 b2 ac 02 00       	call   f0132958 <insert_sorted_with_merge_freeList>
f0107ca6:	83 c4 10             	add    $0x10,%esp
}
}

}
f0107ca9:	90                   	nop
f0107caa:	c9                   	leave  
f0107cab:	c3                   	ret    

f0107cac <kheap_virtual_address>:

unsigned int kheap_virtual_address(unsigned int physical_address)
{
f0107cac:	55                   	push   %ebp
f0107cad:	89 e5                	mov    %esp,%ebp
f0107caf:	83 ec 18             	sub    $0x18,%esp
	//panic("kheap_virtual_address() is not implemented yet...!!");
	struct FrameInfo *va=to_frame_info(physical_address);
f0107cb2:	83 ec 0c             	sub    $0xc,%esp
f0107cb5:	ff 75 08             	pushl  0x8(%ebp)
f0107cb8:	e8 9b fb ff ff       	call   f0107858 <to_frame_info>
f0107cbd:	83 c4 10             	add    $0x10,%esp
f0107cc0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return va->va;
f0107cc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107cc6:	8b 40 0c             	mov    0xc(%eax),%eax
	//Write your code here, remove the panic and write your code

	//return the virtual address corresponding to given physical_address
	//refer to the project presentation and documentation for details
	//EFFICIENT IMPLEMENTATION ~O(1) IS REQUIRED ==================
}
f0107cc9:	c9                   	leave  
f0107cca:	c3                   	ret    

f0107ccb <kheap_physical_address>:

unsigned int kheap_physical_address(unsigned int virtual_address)
{
f0107ccb:	55                   	push   %ebp
f0107ccc:	89 e5                	mov    %esp,%ebp
f0107cce:	83 ec 18             	sub    $0x18,%esp
	//panic("kheap_physical_address() is not implemented yet...!!");
	int ret_address =virtual_to_physical(ptr_page_directory,virtual_address);
f0107cd1:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0107cd6:	83 ec 08             	sub    $0x8,%esp
f0107cd9:	ff 75 08             	pushl  0x8(%ebp)
f0107cdc:	50                   	push   %eax
f0107cdd:	e8 f7 01 00 00       	call   f0107ed9 <virtual_to_physical>
f0107ce2:	83 c4 10             	add    $0x10,%esp
f0107ce5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret_address;
f0107ce8:	8b 45 f4             	mov    -0xc(%ebp),%eax
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_physical_address
	// Write your code here, remove the panic and write your code

	//return the physical address corresponding to given virtual_address
	//refer to the project presentation and documentation for details
}
f0107ceb:	c9                   	leave  
f0107cec:	c3                   	ret    

f0107ced <kfreeall>:


void kfreeall()
{
f0107ced:	55                   	push   %ebp
f0107cee:	89 e5                	mov    %esp,%ebp
f0107cf0:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107cf3:	83 ec 04             	sub    $0x4,%esp
f0107cf6:	68 17 61 13 f0       	push   $0xf0136117
f0107cfb:	68 95 00 00 00       	push   $0x95
f0107d00:	68 e1 60 13 f0       	push   $0xf01360e1
f0107d05:	e8 fb 84 ff ff       	call   f0100205 <_panic>

f0107d0a <kshrink>:

}

void kshrink(uint32 newSize)
{
f0107d0a:	55                   	push   %ebp
f0107d0b:	89 e5                	mov    %esp,%ebp
f0107d0d:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107d10:	83 ec 04             	sub    $0x4,%esp
f0107d13:	68 17 61 13 f0       	push   $0xf0136117
f0107d18:	68 9b 00 00 00       	push   $0x9b
f0107d1d:	68 e1 60 13 f0       	push   $0xf01360e1
f0107d22:	e8 de 84 ff ff       	call   f0100205 <_panic>

f0107d27 <kexpand>:
}

void kexpand(uint32 newSize)
{
f0107d27:	55                   	push   %ebp
f0107d28:	89 e5                	mov    %esp,%ebp
f0107d2a:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107d2d:	83 ec 04             	sub    $0x4,%esp
f0107d30:	68 17 61 13 f0       	push   $0xf0136117
f0107d35:	68 a0 00 00 00       	push   $0xa0
f0107d3a:	68 e1 60 13 f0       	push   $0xf01360e1
f0107d3f:	e8 c1 84 ff ff       	call   f0100205 <_panic>

f0107d44 <krealloc>:

//	A call with virtual_address = null is equivalent to kmalloc().
//	A call with new_size = zero is equivalent to kfree().

void *krealloc(void *virtual_address, uint32 new_size)
{
f0107d44:	55                   	push   %ebp
f0107d45:	89 e5                	mov    %esp,%ebp
f0107d47:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [KERNEL HEAP] krealloc
	// Write your code here, remove the panic and write your code
	panic("krealloc() is not implemented yet...!!");
f0107d4a:	83 ec 04             	sub    $0x4,%esp
f0107d4d:	68 28 61 13 f0       	push   $0xf0136128
f0107d52:	68 b7 00 00 00       	push   $0xb7
f0107d57:	68 e1 60 13 f0       	push   $0xf01360e1
f0107d5c:	e8 a4 84 ff ff       	call   f0100205 <_panic>

f0107d61 <pt_set_page_permissions>:
 */
#include "memory_manager.h"

/*[2.1] PAGE TABLE ENTRIES MANIPULATION */
inline void pt_set_page_permissions(uint32* page_directory, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
{
f0107d61:	55                   	push   %ebp
f0107d62:	89 e5                	mov    %esp,%ebp
f0107d64:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_page_table=NULL;
f0107d67:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	get_page_table(page_directory,virtual_address,&ptr_page_table);
f0107d6e:	83 ec 04             	sub    $0x4,%esp
f0107d71:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0107d74:	50                   	push   %eax
f0107d75:	ff 75 0c             	pushl  0xc(%ebp)
f0107d78:	ff 75 08             	pushl  0x8(%ebp)
f0107d7b:	e8 0f ed ff ff       	call   f0106a8f <get_page_table>
f0107d80:	83 c4 10             	add    $0x10,%esp
	if(ptr_page_table!=NULL){
f0107d83:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107d86:	85 c0                	test   %eax,%eax
f0107d88:	74 6b                	je     f0107df5 <pt_set_page_permissions+0x94>
		uint32 x=PTX(virtual_address);
f0107d8a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107d8d:	c1 e8 0c             	shr    $0xc,%eax
f0107d90:	25 ff 03 00 00       	and    $0x3ff,%eax
f0107d95:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(permissions_to_set){
f0107d98:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0107d9c:	74 1d                	je     f0107dbb <pt_set_page_permissions+0x5a>
			ptr_page_table[x]=ptr_page_table[x]|permissions_to_set;
f0107d9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107da1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107da4:	c1 e2 02             	shl    $0x2,%edx
f0107da7:	01 c2                	add    %eax,%edx
f0107da9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107dac:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0107daf:	c1 e1 02             	shl    $0x2,%ecx
f0107db2:	01 c8                	add    %ecx,%eax
f0107db4:	8b 00                	mov    (%eax),%eax
f0107db6:	0b 45 10             	or     0x10(%ebp),%eax
f0107db9:	89 02                	mov    %eax,(%edx)
		}
		if(permissions_to_clear){
f0107dbb:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f0107dbf:	74 21                	je     f0107de2 <pt_set_page_permissions+0x81>
			ptr_page_table[x]=ptr_page_table[x]&~permissions_to_clear;
f0107dc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107dc4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107dc7:	c1 e2 02             	shl    $0x2,%edx
f0107dca:	01 d0                	add    %edx,%eax
f0107dcc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107dcf:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0107dd2:	c1 e1 02             	shl    $0x2,%ecx
f0107dd5:	01 ca                	add    %ecx,%edx
f0107dd7:	8b 12                	mov    (%edx),%edx
f0107dd9:	8b 4d 14             	mov    0x14(%ebp),%ecx
f0107ddc:	f7 d1                	not    %ecx
f0107dde:	21 ca                	and    %ecx,%edx
f0107de0:	89 10                	mov    %edx,(%eax)
		}
		tlb_invalidate((void*)NULL,(void*)virtual_address);
f0107de2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107de5:	83 ec 08             	sub    $0x8,%esp
f0107de8:	50                   	push   %eax
f0107de9:	6a 00                	push   $0x0
f0107deb:	e8 fc e6 ff ff       	call   f01064ec <tlb_invalidate>
f0107df0:	83 c4 10             	add    $0x10,%esp
	else{
		panic("invalid set \n");
		}


	}
f0107df3:	eb 14                	jmp    f0107e09 <pt_set_page_permissions+0xa8>
		}
		tlb_invalidate((void*)NULL,(void*)virtual_address);
		}

	else{
		panic("invalid set \n");
f0107df5:	83 ec 04             	sub    $0x4,%esp
f0107df8:	68 4f 61 13 f0       	push   $0xf013614f
f0107dfd:	6a 1a                	push   $0x1a
f0107dff:	68 5d 61 13 f0       	push   $0xf013615d
f0107e04:	e8 fc 83 ff ff       	call   f0100205 <_panic>
		}


	}
f0107e09:	c9                   	leave  
f0107e0a:	c3                   	ret    

f0107e0b <pt_get_page_permissions>:

inline int pt_get_page_permissions(uint32* page_directory, uint32 virtual_address )
{
f0107e0b:	55                   	push   %ebp
f0107e0c:	89 e5                	mov    %esp,%ebp
f0107e0e:	83 ec 18             	sub    $0x18,%esp

	uint32 *ptr_page_table=NULL;
f0107e11:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	get_page_table(page_directory,virtual_address,&ptr_page_table);
f0107e18:	83 ec 04             	sub    $0x4,%esp
f0107e1b:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107e1e:	50                   	push   %eax
f0107e1f:	ff 75 0c             	pushl  0xc(%ebp)
f0107e22:	ff 75 08             	pushl  0x8(%ebp)
f0107e25:	e8 65 ec ff ff       	call   f0106a8f <get_page_table>
f0107e2a:	83 c4 10             	add    $0x10,%esp
	if(ptr_page_table!=NULL){
f0107e2d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107e30:	85 c0                	test   %eax,%eax
f0107e32:	74 2a                	je     f0107e5e <pt_get_page_permissions+0x53>
		uint32 table_entry =PTX(virtual_address);
f0107e34:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107e37:	c1 e8 0c             	shr    $0xc,%eax
f0107e3a:	25 ff 03 00 00       	and    $0x3ff,%eax
f0107e3f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32 address =ptr_page_table[table_entry]<<20;
f0107e42:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107e45:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107e48:	c1 e2 02             	shl    $0x2,%edx
f0107e4b:	01 d0                	add    %edx,%eax
f0107e4d:	8b 00                	mov    (%eax),%eax
f0107e4f:	c1 e0 14             	shl    $0x14,%eax
f0107e52:	89 45 f0             	mov    %eax,-0x10(%ebp)
		address=address>>20;
f0107e55:	c1 6d f0 14          	shrl   $0x14,-0x10(%ebp)
		return address;
f0107e59:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107e5c:	eb 05                	jmp    f0107e63 <pt_get_page_permissions+0x58>
	}

		return -1;
f0107e5e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

}
f0107e63:	c9                   	leave  
f0107e64:	c3                   	ret    

f0107e65 <pt_clear_page_table_entry>:

inline void pt_clear_page_table_entry(uint32* page_directory, uint32 virtual_address)
{
f0107e65:	55                   	push   %ebp
f0107e66:	89 e5                	mov    %esp,%ebp
f0107e68:	83 ec 18             	sub    $0x18,%esp
	uint32 x=PTX(virtual_address);
f0107e6b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107e6e:	c1 e8 0c             	shr    $0xc,%eax
f0107e71:	25 ff 03 00 00       	and    $0x3ff,%eax
f0107e76:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table=NULL;
f0107e79:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	uint32 y=get_page_table(page_directory,virtual_address,&ptr_page_table);
f0107e80:	83 ec 04             	sub    $0x4,%esp
f0107e83:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107e86:	50                   	push   %eax
f0107e87:	ff 75 0c             	pushl  0xc(%ebp)
f0107e8a:	ff 75 08             	pushl  0x8(%ebp)
f0107e8d:	e8 fd eb ff ff       	call   f0106a8f <get_page_table>
f0107e92:	83 c4 10             	add    $0x10,%esp
f0107e95:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(ptr_page_table!=NULL){
f0107e98:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107e9b:	85 c0                	test   %eax,%eax
f0107e9d:	74 24                	je     f0107ec3 <pt_clear_page_table_entry+0x5e>
//ptr_page_table[x]=0;
		ptr_page_table[x]=ptr_page_table[x]&0;
f0107e9f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107ea2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107ea5:	c1 e2 02             	shl    $0x2,%edx
f0107ea8:	01 d0                	add    %edx,%eax
f0107eaa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate((void*)NULL,(void*)virtual_address);
f0107eb0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107eb3:	83 ec 08             	sub    $0x8,%esp
f0107eb6:	50                   	push   %eax
f0107eb7:	6a 00                	push   $0x0
f0107eb9:	e8 2e e6 ff ff       	call   f01064ec <tlb_invalidate>
f0107ebe:	83 c4 10             	add    $0x10,%esp
		}

	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_clear_page_table_entry
	// Write your code here, remove the panic and write your code
	//panic("pt_clear_page_table_entry() is not implemented yet...!!");
}
f0107ec1:	eb 14                	jmp    f0107ed7 <pt_clear_page_table_entry+0x72>
	if(ptr_page_table!=NULL){
//ptr_page_table[x]=0;
		ptr_page_table[x]=ptr_page_table[x]&0;
		tlb_invalidate((void*)NULL,(void*)virtual_address);
	}else{
		panic("invalid clear \n");
f0107ec3:	83 ec 04             	sub    $0x4,%esp
f0107ec6:	68 77 61 13 f0       	push   $0xf0136177
f0107ecb:	6a 3b                	push   $0x3b
f0107ecd:	68 5d 61 13 f0       	push   $0xf013615d
f0107ed2:	e8 2e 83 ff ff       	call   f0100205 <_panic>
		}

	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_clear_page_table_entry
	// Write your code here, remove the panic and write your code
	//panic("pt_clear_page_table_entry() is not implemented yet...!!");
}
f0107ed7:	c9                   	leave  
f0107ed8:	c3                   	ret    

f0107ed9 <virtual_to_physical>:

/***********************************************************************************************/

/*[2.2] ADDRESS CONVERTION*/
inline int virtual_to_physical(uint32* page_directory, uint32 virtual_address)
{
f0107ed9:	55                   	push   %ebp
f0107eda:	89 e5                	mov    %esp,%ebp
f0107edc:	83 ec 28             	sub    $0x28,%esp
	uint32 *ptr_page_table=NULL;
f0107edf:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	get_page_table(page_directory,virtual_address,&ptr_page_table);
f0107ee6:	83 ec 04             	sub    $0x4,%esp
f0107ee9:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0107eec:	50                   	push   %eax
f0107eed:	ff 75 0c             	pushl  0xc(%ebp)
f0107ef0:	ff 75 08             	pushl  0x8(%ebp)
f0107ef3:	e8 97 eb ff ff       	call   f0106a8f <get_page_table>
f0107ef8:	83 c4 10             	add    $0x10,%esp
	if(ptr_page_table!=NULL){
f0107efb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107efe:	85 c0                	test   %eax,%eax
f0107f00:	74 35                	je     f0107f37 <virtual_to_physical+0x5e>
	uint32 table_entry = PTX(virtual_address);
f0107f02:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107f05:	c1 e8 0c             	shr    $0xc,%eax
f0107f08:	25 ff 03 00 00       	and    $0x3ff,%eax
f0107f0d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32 entry =	ptr_page_table[table_entry];
f0107f10:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107f13:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107f16:	c1 e2 02             	shl    $0x2,%edx
f0107f19:	01 d0                	add    %edx,%eax
f0107f1b:	8b 00                	mov    (%eax),%eax
f0107f1d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 framenum = entry>>12;
f0107f20:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107f23:	c1 e8 0c             	shr    $0xc,%eax
f0107f26:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 address=(framenum*PAGE_SIZE);
f0107f29:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107f2c:	c1 e0 0c             	shl    $0xc,%eax
f0107f2f:	89 45 e8             	mov    %eax,-0x18(%ebp)
		return address;
f0107f32:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107f35:	eb 05                	jmp    f0107f3c <virtual_to_physical+0x63>
	}
	return -1;
f0107f37:	b8 ff ff ff ff       	mov    $0xffffffff,%eax


	//TODO: [PROJECT MS2] [PAGING HELPERS] virtual_to_physical
	// Write your code here, remove the panic and write your code
//	panic("virtual_to_physical() is not implemented yet...!!");
}
f0107f3c:	c9                   	leave  
f0107f3d:	c3                   	ret    

f0107f3e <pd_is_table_used>:

///============================================================================================
/// Dealing with page directory entry flags

inline uint32 pd_is_table_used(uint32* page_directory, uint32 virtual_address)
{
f0107f3e:	55                   	push   %ebp
f0107f3f:	89 e5                	mov    %esp,%ebp
	return ( (page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f0107f41:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107f44:	c1 e8 16             	shr    $0x16,%eax
f0107f47:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107f4e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f51:	01 d0                	add    %edx,%eax
f0107f53:	8b 00                	mov    (%eax),%eax
f0107f55:	83 e0 20             	and    $0x20,%eax
f0107f58:	85 c0                	test   %eax,%eax
f0107f5a:	0f 95 c0             	setne  %al
f0107f5d:	0f b6 c0             	movzbl %al,%eax
}
f0107f60:	5d                   	pop    %ebp
f0107f61:	c3                   	ret    

f0107f62 <pd_set_table_unused>:

inline void pd_set_table_unused(uint32* page_directory, uint32 virtual_address)
{
f0107f62:	55                   	push   %ebp
f0107f63:	89 e5                	mov    %esp,%ebp
f0107f65:	83 ec 08             	sub    $0x8,%esp
	page_directory[PDX(virtual_address)] &= (~PERM_USED);
f0107f68:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107f6b:	c1 e8 16             	shr    $0x16,%eax
f0107f6e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107f75:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f78:	01 d0                	add    %edx,%eax
f0107f7a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f7d:	c1 ea 16             	shr    $0x16,%edx
f0107f80:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0107f87:	8b 55 08             	mov    0x8(%ebp),%edx
f0107f8a:	01 ca                	add    %ecx,%edx
f0107f8c:	8b 12                	mov    (%edx),%edx
f0107f8e:	83 e2 df             	and    $0xffffffdf,%edx
f0107f91:	89 10                	mov    %edx,(%eax)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107f93:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107f96:	83 ec 08             	sub    $0x8,%esp
f0107f99:	50                   	push   %eax
f0107f9a:	6a 00                	push   $0x0
f0107f9c:	e8 4b e5 ff ff       	call   f01064ec <tlb_invalidate>
f0107fa1:	83 c4 10             	add    $0x10,%esp
}
f0107fa4:	90                   	nop
f0107fa5:	c9                   	leave  
f0107fa6:	c3                   	ret    

f0107fa7 <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(uint32* page_directory, uint32 virtual_address)
{
f0107fa7:	55                   	push   %ebp
f0107fa8:	89 e5                	mov    %esp,%ebp
f0107faa:	83 ec 10             	sub    $0x10,%esp
	page_directory[PDX(virtual_address)] = 0 ;
f0107fad:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107fb0:	c1 e8 16             	shr    $0x16,%eax
f0107fb3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107fba:	8b 45 08             	mov    0x8(%ebp),%eax
f0107fbd:	01 d0                	add    %edx,%eax
f0107fbf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0107fc5:	0f 20 d8             	mov    %cr3,%eax
f0107fc8:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0107fcb:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0107fce:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0107fd1:	90                   	nop
f0107fd2:	c9                   	leave  
f0107fd3:	c3                   	ret    

f0107fd4 <env_page_ws_get_size>:

///============================================================================================
/// Dealing with environment working set

inline uint32 env_page_ws_get_size(struct Env *e)
{
f0107fd4:	55                   	push   %ebp
f0107fd5:	89 e5                	mov    %esp,%ebp
f0107fd7:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0107fda:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0107fe1:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<e->page_WS_max_size; i++) if(e->ptr_pageWorkingSet[i].empty == 0) counter++;
f0107fe8:	eb 21                	jmp    f010800b <env_page_ws_get_size+0x37>
f0107fea:	8b 45 08             	mov    0x8(%ebp),%eax
f0107fed:	8b 48 78             	mov    0x78(%eax),%ecx
f0107ff0:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0107ff3:	89 d0                	mov    %edx,%eax
f0107ff5:	01 c0                	add    %eax,%eax
f0107ff7:	01 d0                	add    %edx,%eax
f0107ff9:	c1 e0 03             	shl    $0x3,%eax
f0107ffc:	01 c8                	add    %ecx,%eax
f0107ffe:	8a 40 04             	mov    0x4(%eax),%al
f0108001:	84 c0                	test   %al,%al
f0108003:	75 03                	jne    f0108008 <env_page_ws_get_size+0x34>
f0108005:	ff 45 f8             	incl   -0x8(%ebp)
f0108008:	ff 45 fc             	incl   -0x4(%ebp)
f010800b:	8b 45 08             	mov    0x8(%ebp),%eax
f010800e:	8b 50 74             	mov    0x74(%eax),%edx
f0108011:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108014:	39 c2                	cmp    %eax,%edx
f0108016:	77 d2                	ja     f0107fea <env_page_ws_get_size+0x16>
	return counter;
f0108018:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f010801b:	c9                   	leave  
f010801c:	c3                   	ret    

f010801d <env_page_ws_invalidate>:

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f010801d:	55                   	push   %ebp
f010801e:	89 e5                	mov    %esp,%ebp
f0108020:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0108023:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<e->page_WS_max_size; i++)
f010802a:	eb 4c                	jmp    f0108078 <env_page_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f010802c:	8b 45 08             	mov    0x8(%ebp),%eax
f010802f:	8b 48 78             	mov    0x78(%eax),%ecx
f0108032:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108035:	89 d0                	mov    %edx,%eax
f0108037:	01 c0                	add    %eax,%eax
f0108039:	01 d0                	add    %edx,%eax
f010803b:	c1 e0 03             	shl    $0x3,%eax
f010803e:	01 c8                	add    %ecx,%eax
f0108040:	8b 00                	mov    (%eax),%eax
f0108042:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108045:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108048:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010804d:	89 c2                	mov    %eax,%edx
f010804f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108052:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108055:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108058:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010805d:	39 c2                	cmp    %eax,%edx
f010805f:	75 14                	jne    f0108075 <env_page_ws_invalidate+0x58>
		{
			env_page_ws_clear_entry(e, i);
f0108061:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108064:	83 ec 08             	sub    $0x8,%esp
f0108067:	50                   	push   %eax
f0108068:	ff 75 08             	pushl  0x8(%ebp)
f010806b:	e8 b9 00 00 00       	call   f0108129 <env_page_ws_clear_entry>
f0108070:	83 c4 10             	add    $0x10,%esp
			break;
f0108073:	eb 10                	jmp    f0108085 <env_page_ws_invalidate+0x68>
}

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<e->page_WS_max_size; i++)
f0108075:	ff 45 f4             	incl   -0xc(%ebp)
f0108078:	8b 45 08             	mov    0x8(%ebp),%eax
f010807b:	8b 50 74             	mov    0x74(%eax),%edx
f010807e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108081:	39 c2                	cmp    %eax,%edx
f0108083:	77 a7                	ja     f010802c <env_page_ws_invalidate+0xf>
		{
			env_page_ws_clear_entry(e, i);
			break;
		}
	}
}
f0108085:	90                   	nop
f0108086:	c9                   	leave  
f0108087:	c3                   	ret    

f0108088 <env_page_ws_set_entry>:

inline void env_page_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0108088:	55                   	push   %ebp
f0108089:	89 e5                	mov    %esp,%ebp
f010808b:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < e->page_WS_max_size);
f010808e:	8b 45 08             	mov    0x8(%ebp),%eax
f0108091:	8b 40 74             	mov    0x74(%eax),%eax
f0108094:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108097:	77 16                	ja     f01080af <env_page_ws_set_entry+0x27>
f0108099:	68 88 61 13 f0       	push   $0xf0136188
f010809e:	68 be 61 13 f0       	push   $0xf01361be
f01080a3:	6a 26                	push   $0x26
f01080a5:	68 d4 61 13 f0       	push   $0xf01361d4
f01080aa:	e8 56 81 ff ff       	call   f0100205 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f01080af:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f01080b6:	76 16                	jbe    f01080ce <env_page_ws_set_entry+0x46>
f01080b8:	68 f4 61 13 f0       	push   $0xf01361f4
f01080bd:	68 be 61 13 f0       	push   $0xf01361be
f01080c2:	6a 27                	push   $0x27
f01080c4:	68 d4 61 13 f0       	push   $0xf01361d4
f01080c9:	e8 37 81 ff ff       	call   f0100205 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
f01080ce:	8b 45 08             	mov    0x8(%ebp),%eax
f01080d1:	8b 48 78             	mov    0x78(%eax),%ecx
f01080d4:	8b 55 0c             	mov    0xc(%ebp),%edx
f01080d7:	89 d0                	mov    %edx,%eax
f01080d9:	01 c0                	add    %eax,%eax
f01080db:	01 d0                	add    %edx,%eax
f01080dd:	c1 e0 03             	shl    $0x3,%eax
f01080e0:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01080e3:	8b 45 10             	mov    0x10(%ebp),%eax
f01080e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01080e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01080ec:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01080f1:	89 02                	mov    %eax,(%edx)
	e->ptr_pageWorkingSet[entry_index].empty = 0;
f01080f3:	8b 45 08             	mov    0x8(%ebp),%eax
f01080f6:	8b 48 78             	mov    0x78(%eax),%ecx
f01080f9:	8b 55 0c             	mov    0xc(%ebp),%edx
f01080fc:	89 d0                	mov    %edx,%eax
f01080fe:	01 c0                	add    %eax,%eax
f0108100:	01 d0                	add    %edx,%eax
f0108102:	c1 e0 03             	shl    $0x3,%eax
f0108105:	01 c8                	add    %ecx,%eax
f0108107:	c6 40 04 00          	movb   $0x0,0x4(%eax)

	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f010810b:	8b 45 08             	mov    0x8(%ebp),%eax
f010810e:	8b 48 78             	mov    0x78(%eax),%ecx
f0108111:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108114:	89 d0                	mov    %edx,%eax
f0108116:	01 c0                	add    %eax,%eax
f0108118:	01 d0                	add    %edx,%eax
f010811a:	c1 e0 03             	shl    $0x3,%eax
f010811d:	01 c8                	add    %ecx,%eax
f010811f:	c7 40 08 00 00 00 80 	movl   $0x80000000,0x8(%eax)
	//e->ptr_pageWorkingSet[entry_index].time_stamp = time;
	return;
f0108126:	90                   	nop
}
f0108127:	c9                   	leave  
f0108128:	c3                   	ret    

f0108129 <env_page_ws_clear_entry>:

inline void env_page_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0108129:	55                   	push   %ebp
f010812a:	89 e5                	mov    %esp,%ebp
f010812c:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f010812f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108132:	8b 40 74             	mov    0x74(%eax),%eax
f0108135:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108138:	77 16                	ja     f0108150 <env_page_ws_clear_entry+0x27>
f010813a:	68 28 62 13 f0       	push   $0xf0136228
f010813f:	68 be 61 13 f0       	push   $0xf01361be
f0108144:	6a 32                	push   $0x32
f0108146:	68 d4 61 13 f0       	push   $0xf01361d4
f010814b:	e8 b5 80 ff ff       	call   f0100205 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = 0;
f0108150:	8b 45 08             	mov    0x8(%ebp),%eax
f0108153:	8b 48 78             	mov    0x78(%eax),%ecx
f0108156:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108159:	89 d0                	mov    %edx,%eax
f010815b:	01 c0                	add    %eax,%eax
f010815d:	01 d0                	add    %edx,%eax
f010815f:	c1 e0 03             	shl    $0x3,%eax
f0108162:	01 c8                	add    %ecx,%eax
f0108164:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 1;
f010816a:	8b 45 08             	mov    0x8(%ebp),%eax
f010816d:	8b 48 78             	mov    0x78(%eax),%ecx
f0108170:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108173:	89 d0                	mov    %edx,%eax
f0108175:	01 c0                	add    %eax,%eax
f0108177:	01 d0                	add    %edx,%eax
f0108179:	c1 e0 03             	shl    $0x3,%eax
f010817c:	01 c8                	add    %ecx,%eax
f010817e:	c6 40 04 01          	movb   $0x1,0x4(%eax)
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0;
f0108182:	8b 45 08             	mov    0x8(%ebp),%eax
f0108185:	8b 48 78             	mov    0x78(%eax),%ecx
f0108188:	8b 55 0c             	mov    0xc(%ebp),%edx
f010818b:	89 d0                	mov    %edx,%eax
f010818d:	01 c0                	add    %eax,%eax
f010818f:	01 d0                	add    %edx,%eax
f0108191:	c1 e0 03             	shl    $0x3,%eax
f0108194:	01 c8                	add    %ecx,%eax
f0108196:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
f010819d:	90                   	nop
f010819e:	c9                   	leave  
f010819f:	c3                   	ret    

f01081a0 <env_page_ws_get_virtual_address>:

inline uint32 env_page_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f01081a0:	55                   	push   %ebp
f01081a1:	89 e5                	mov    %esp,%ebp
f01081a3:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f01081a6:	8b 45 08             	mov    0x8(%ebp),%eax
f01081a9:	8b 40 74             	mov    0x74(%eax),%eax
f01081ac:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01081af:	77 16                	ja     f01081c7 <env_page_ws_get_virtual_address+0x27>
f01081b1:	68 28 62 13 f0       	push   $0xf0136228
f01081b6:	68 be 61 13 f0       	push   $0xf01361be
f01081bb:	6a 3a                	push   $0x3a
f01081bd:	68 d4 61 13 f0       	push   $0xf01361d4
f01081c2:	e8 3e 80 ff ff       	call   f0100205 <_panic>
	return ROUNDDOWN(e->ptr_pageWorkingSet[entry_index].virtual_address,PAGE_SIZE);
f01081c7:	8b 45 08             	mov    0x8(%ebp),%eax
f01081ca:	8b 48 78             	mov    0x78(%eax),%ecx
f01081cd:	8b 55 0c             	mov    0xc(%ebp),%edx
f01081d0:	89 d0                	mov    %edx,%eax
f01081d2:	01 c0                	add    %eax,%eax
f01081d4:	01 d0                	add    %edx,%eax
f01081d6:	c1 e0 03             	shl    $0x3,%eax
f01081d9:	01 c8                	add    %ecx,%eax
f01081db:	8b 00                	mov    (%eax),%eax
f01081dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01081e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01081e3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f01081e8:	c9                   	leave  
f01081e9:	c3                   	ret    

f01081ea <env_page_ws_get_time_stamp>:

inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f01081ea:	55                   	push   %ebp
f01081eb:	89 e5                	mov    %esp,%ebp
f01081ed:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f01081f0:	8b 45 08             	mov    0x8(%ebp),%eax
f01081f3:	8b 40 74             	mov    0x74(%eax),%eax
f01081f6:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01081f9:	77 16                	ja     f0108211 <env_page_ws_get_time_stamp+0x27>
f01081fb:	68 28 62 13 f0       	push   $0xf0136228
f0108200:	68 be 61 13 f0       	push   $0xf01361be
f0108205:	6a 40                	push   $0x40
f0108207:	68 d4 61 13 f0       	push   $0xf01361d4
f010820c:	e8 f4 7f ff ff       	call   f0100205 <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f0108211:	8b 45 08             	mov    0x8(%ebp),%eax
f0108214:	8b 48 78             	mov    0x78(%eax),%ecx
f0108217:	8b 55 0c             	mov    0xc(%ebp),%edx
f010821a:	89 d0                	mov    %edx,%eax
f010821c:	01 c0                	add    %eax,%eax
f010821e:	01 d0                	add    %edx,%eax
f0108220:	c1 e0 03             	shl    $0x3,%eax
f0108223:	01 c8                	add    %ecx,%eax
f0108225:	8b 40 08             	mov    0x8(%eax),%eax
}
f0108228:	c9                   	leave  
f0108229:	c3                   	ret    

f010822a <env_page_ws_is_entry_empty>:

inline uint32 env_page_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f010822a:	55                   	push   %ebp
f010822b:	89 e5                	mov    %esp,%ebp
	return e->ptr_pageWorkingSet[entry_index].empty;
f010822d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108230:	8b 48 78             	mov    0x78(%eax),%ecx
f0108233:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108236:	89 d0                	mov    %edx,%eax
f0108238:	01 c0                	add    %eax,%eax
f010823a:	01 d0                	add    %edx,%eax
f010823c:	c1 e0 03             	shl    $0x3,%eax
f010823f:	01 c8                	add    %ecx,%eax
f0108241:	8a 40 04             	mov    0x4(%eax),%al
f0108244:	0f b6 c0             	movzbl %al,%eax
}
f0108247:	5d                   	pop    %ebp
f0108248:	c3                   	ret    

f0108249 <env_page_ws_print>:

void env_page_ws_print(struct Env *e)
{
f0108249:	55                   	push   %ebp
f010824a:	89 e5                	mov    %esp,%ebp
f010824c:	53                   	push   %ebx
f010824d:	83 ec 24             	sub    $0x24,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108250:	83 ec 0c             	sub    $0xc,%esp
f0108253:	6a 02                	push   $0x2
f0108255:	e8 2f 5d 00 00       	call   f010df89 <isPageReplacmentAlgorithmLRU>
f010825a:	83 c4 10             	add    $0x10,%esp
f010825d:	85 c0                	test   %eax,%eax
f010825f:	0f 84 fe 00 00 00    	je     f0108363 <env_page_ws_print+0x11a>
	{
		int i = 0;
f0108265:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		cprintf("ActiveList:\n============\n") ;
f010826c:	83 ec 0c             	sub    $0xc,%esp
f010826f:	68 60 62 13 f0       	push   $0xf0136260
f0108274:	e8 95 8a ff ff       	call   f0100d0e <cprintf>
f0108279:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f010827c:	8b 45 08             	mov    0x8(%ebp),%eax
f010827f:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f0108285:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108288:	eb 2c                	jmp    f01082b6 <env_page_ws_print+0x6d>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f010828a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010828d:	8b 10                	mov    (%eax),%edx
f010828f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108292:	8d 48 01             	lea    0x1(%eax),%ecx
f0108295:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0108298:	83 ec 04             	sub    $0x4,%esp
f010829b:	52                   	push   %edx
f010829c:	50                   	push   %eax
f010829d:	68 7a 62 13 f0       	push   $0xf013627a
f01082a2:	e8 67 8a ff ff       	call   f0100d0e <cprintf>
f01082a7:	83 c4 10             	add    $0x10,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		int i = 0;
		cprintf("ActiveList:\n============\n") ;
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f01082aa:	8b 45 08             	mov    0x8(%ebp),%eax
f01082ad:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f01082b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01082b6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01082ba:	74 08                	je     f01082c4 <env_page_ws_print+0x7b>
f01082bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01082bf:	8b 40 10             	mov    0x10(%eax),%eax
f01082c2:	eb 05                	jmp    f01082c9 <env_page_ws_print+0x80>
f01082c4:	b8 00 00 00 00       	mov    $0x0,%eax
f01082c9:	8b 55 08             	mov    0x8(%ebp),%edx
f01082cc:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f01082d2:	8b 45 08             	mov    0x8(%ebp),%eax
f01082d5:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f01082db:	85 c0                	test   %eax,%eax
f01082dd:	75 ab                	jne    f010828a <env_page_ws_print+0x41>
f01082df:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01082e3:	75 a5                	jne    f010828a <env_page_ws_print+0x41>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
f01082e5:	83 ec 0c             	sub    $0xc,%esp
f01082e8:	68 82 62 13 f0       	push   $0xf0136282
f01082ed:	e8 1c 8a ff ff       	call   f0100d0e <cprintf>
f01082f2:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f01082f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01082f8:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f01082fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108301:	eb 2c                	jmp    f010832f <env_page_ws_print+0xe6>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f0108303:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108306:	8b 10                	mov    (%eax),%edx
f0108308:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010830b:	8d 48 01             	lea    0x1(%eax),%ecx
f010830e:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0108311:	83 ec 04             	sub    $0x4,%esp
f0108314:	52                   	push   %edx
f0108315:	50                   	push   %eax
f0108316:	68 7a 62 13 f0       	push   $0xf013627a
f010831b:	e8 ee 89 ff ff       	call   f0100d0e <cprintf>
f0108320:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f0108323:	8b 45 08             	mov    0x8(%ebp),%eax
f0108326:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010832c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010832f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108333:	74 08                	je     f010833d <env_page_ws_print+0xf4>
f0108335:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108338:	8b 40 10             	mov    0x10(%eax),%eax
f010833b:	eb 05                	jmp    f0108342 <env_page_ws_print+0xf9>
f010833d:	b8 00 00 00 00       	mov    $0x0,%eax
f0108342:	8b 55 08             	mov    0x8(%ebp),%edx
f0108345:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010834b:	8b 45 08             	mov    0x8(%ebp),%eax
f010834e:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0108354:	85 c0                	test   %eax,%eax
f0108356:	75 ab                	jne    f0108303 <env_page_ws_print+0xba>
f0108358:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010835c:	75 a5                	jne    f0108303 <env_page_ws_print+0xba>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f010835e:	e9 95 01 00 00       	jmp    f01084f8 <env_page_ws_print+0x2af>
		}
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
f0108363:	83 ec 0c             	sub    $0xc,%esp
f0108366:	68 9d 62 13 f0       	push   $0xf013629d
f010836b:	e8 9e 89 ff ff       	call   f0100d0e <cprintf>
f0108370:	83 c4 10             	add    $0x10,%esp
		for(i=0; i< (e->page_WS_max_size); i++ )
f0108373:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010837a:	e9 6a 01 00 00       	jmp    f01084e9 <env_page_ws_print+0x2a0>
		{
			if (e->ptr_pageWorkingSet[i].empty)
f010837f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108382:	8b 48 78             	mov    0x78(%eax),%ecx
f0108385:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108388:	89 d0                	mov    %edx,%eax
f010838a:	01 c0                	add    %eax,%eax
f010838c:	01 d0                	add    %edx,%eax
f010838e:	c1 e0 03             	shl    $0x3,%eax
f0108391:	01 c8                	add    %ecx,%eax
f0108393:	8a 40 04             	mov    0x4(%eax),%al
f0108396:	84 c0                	test   %al,%al
f0108398:	74 43                	je     f01083dd <env_page_ws_print+0x194>
			{
				cprintf("EMPTY LOCATION");
f010839a:	83 ec 0c             	sub    $0xc,%esp
f010839d:	68 a7 62 13 f0       	push   $0xf01362a7
f01083a2:	e8 67 89 ff ff       	call   f0100d0e <cprintf>
f01083a7:	83 c4 10             	add    $0x10,%esp
				if(i==e->page_last_WS_index )
f01083aa:	8b 45 08             	mov    0x8(%ebp),%eax
f01083ad:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f01083b3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01083b6:	75 10                	jne    f01083c8 <env_page_ws_print+0x17f>
				{
					cprintf("		<--");
f01083b8:	83 ec 0c             	sub    $0xc,%esp
f01083bb:	68 b6 62 13 f0       	push   $0xf01362b6
f01083c0:	e8 49 89 ff ff       	call   f0100d0e <cprintf>
f01083c5:	83 c4 10             	add    $0x10,%esp
				}
				cprintf("\n");
f01083c8:	83 ec 0c             	sub    $0xc,%esp
f01083cb:	68 bc 62 13 f0       	push   $0xf01362bc
f01083d0:	e8 39 89 ff ff       	call   f0100d0e <cprintf>
f01083d5:	83 c4 10             	add    $0x10,%esp
				continue;
f01083d8:	e9 09 01 00 00       	jmp    f01084e6 <env_page_ws_print+0x29d>
			}
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f01083dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01083e0:	8b 48 78             	mov    0x78(%eax),%ecx
f01083e3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01083e6:	89 d0                	mov    %edx,%eax
f01083e8:	01 c0                	add    %eax,%eax
f01083ea:	01 d0                	add    %edx,%eax
f01083ec:	c1 e0 03             	shl    $0x3,%eax
f01083ef:	01 c8                	add    %ecx,%eax
f01083f1:	8b 00                	mov    (%eax),%eax
f01083f3:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 time_stamp = e->ptr_pageWorkingSet[i].time_stamp;
f01083f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01083f9:	8b 48 78             	mov    0x78(%eax),%ecx
f01083fc:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01083ff:	89 d0                	mov    %edx,%eax
f0108401:	01 c0                	add    %eax,%eax
f0108403:	01 d0                	add    %edx,%eax
f0108405:	c1 e0 03             	shl    $0x3,%eax
f0108408:	01 c8                	add    %ecx,%eax
f010840a:	8b 40 08             	mov    0x8(%eax),%eax
f010840d:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			uint32 perm = pt_get_page_permissions(e->env_page_directory, virtual_address) ;
f0108410:	8b 45 08             	mov    0x8(%ebp),%eax
f0108413:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108416:	83 ec 08             	sub    $0x8,%esp
f0108419:	ff 75 e8             	pushl  -0x18(%ebp)
f010841c:	50                   	push   %eax
f010841d:	e8 e9 f9 ff ff       	call   f0107e0b <pt_get_page_permissions>
f0108422:	83 c4 10             	add    $0x10,%esp
f0108425:	89 45 e0             	mov    %eax,-0x20(%ebp)
			char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f0108428:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010842b:	83 e0 40             	and    $0x40,%eax
f010842e:	85 c0                	test   %eax,%eax
f0108430:	0f 95 c0             	setne  %al
f0108433:	88 45 df             	mov    %al,-0x21(%ebp)
			char isUsed= ((perm&PERM_USED) ? 1 : 0);
f0108436:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108439:	83 e0 20             	and    $0x20,%eax
f010843c:	85 c0                	test   %eax,%eax
f010843e:	0f 95 c0             	setne  %al
f0108441:	88 45 de             	mov    %al,-0x22(%ebp)
			char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f0108444:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108447:	25 00 02 00 00       	and    $0x200,%eax
f010844c:	85 c0                	test   %eax,%eax
f010844e:	0f 95 c0             	setne  %al
f0108451:	88 45 dd             	mov    %al,-0x23(%ebp)


			cprintf("address @ %d = %x",i, e->ptr_pageWorkingSet[i].virtual_address);
f0108454:	8b 45 08             	mov    0x8(%ebp),%eax
f0108457:	8b 48 78             	mov    0x78(%eax),%ecx
f010845a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010845d:	89 d0                	mov    %edx,%eax
f010845f:	01 c0                	add    %eax,%eax
f0108461:	01 d0                	add    %edx,%eax
f0108463:	c1 e0 03             	shl    $0x3,%eax
f0108466:	01 c8                	add    %ecx,%eax
f0108468:	8b 00                	mov    (%eax),%eax
f010846a:	83 ec 04             	sub    $0x4,%esp
f010846d:	50                   	push   %eax
f010846e:	ff 75 ec             	pushl  -0x14(%ebp)
f0108471:	68 be 62 13 f0       	push   $0xf01362be
f0108476:	e8 93 88 ff ff       	call   f0100d0e <cprintf>
f010847b:	83 c4 10             	add    $0x10,%esp

			//2021
			cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x, sweeps_cnt= %d", isUsed, isModified, isBuffered, time_stamp, e->ptr_pageWorkingSet[i].sweeps_counter) ;
f010847e:	8b 45 08             	mov    0x8(%ebp),%eax
f0108481:	8b 48 78             	mov    0x78(%eax),%ecx
f0108484:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108487:	89 d0                	mov    %edx,%eax
f0108489:	01 c0                	add    %eax,%eax
f010848b:	01 d0                	add    %edx,%eax
f010848d:	c1 e0 03             	shl    $0x3,%eax
f0108490:	01 c8                	add    %ecx,%eax
f0108492:	8b 58 0c             	mov    0xc(%eax),%ebx
f0108495:	0f be 4d dd          	movsbl -0x23(%ebp),%ecx
f0108499:	0f be 55 df          	movsbl -0x21(%ebp),%edx
f010849d:	0f be 45 de          	movsbl -0x22(%ebp),%eax
f01084a1:	83 ec 08             	sub    $0x8,%esp
f01084a4:	53                   	push   %ebx
f01084a5:	ff 75 e4             	pushl  -0x1c(%ebp)
f01084a8:	51                   	push   %ecx
f01084a9:	52                   	push   %edx
f01084aa:	50                   	push   %eax
f01084ab:	68 d0 62 13 f0       	push   $0xf01362d0
f01084b0:	e8 59 88 ff ff       	call   f0100d0e <cprintf>
f01084b5:	83 c4 20             	add    $0x20,%esp

			if(i==e->page_last_WS_index )
f01084b8:	8b 45 08             	mov    0x8(%ebp),%eax
f01084bb:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f01084c1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01084c4:	75 10                	jne    f01084d6 <env_page_ws_print+0x28d>
			{
				cprintf(" <--");
f01084c6:	83 ec 0c             	sub    $0xc,%esp
f01084c9:	68 17 63 13 f0       	push   $0xf0136317
f01084ce:	e8 3b 88 ff ff       	call   f0100d0e <cprintf>
f01084d3:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f01084d6:	83 ec 0c             	sub    $0xc,%esp
f01084d9:	68 bc 62 13 f0       	push   $0xf01362bc
f01084de:	e8 2b 88 ff ff       	call   f0100d0e <cprintf>
f01084e3:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
		for(i=0; i< (e->page_WS_max_size); i++ )
f01084e6:	ff 45 ec             	incl   -0x14(%ebp)
f01084e9:	8b 45 08             	mov    0x8(%ebp),%eax
f01084ec:	8b 40 74             	mov    0x74(%eax),%eax
f01084ef:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01084f2:	0f 87 87 fe ff ff    	ja     f010837f <env_page_ws_print+0x136>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f01084f8:	90                   	nop
f01084f9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01084fc:	c9                   	leave  
f01084fd:	c3                   	ret    

f01084fe <env_table_ws_print>:

// Table Working Set =========================================================

void env_table_ws_print(struct Env *e)
{
f01084fe:	55                   	push   %ebp
f01084ff:	89 e5                	mov    %esp,%ebp
f0108501:	53                   	push   %ebx
f0108502:	83 ec 14             	sub    $0x14,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f0108505:	83 ec 0c             	sub    $0xc,%esp
f0108508:	68 1c 63 13 f0       	push   $0xf013631c
f010850d:	e8 fc 87 ff ff       	call   f0100d0e <cprintf>
f0108512:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f0108515:	83 ec 0c             	sub    $0xc,%esp
f0108518:	68 51 63 13 f0       	push   $0xf0136351
f010851d:	e8 ec 87 ff ff       	call   f0100d0e <cprintf>
f0108522:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0108525:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010852c:	e9 10 01 00 00       	jmp    f0108641 <env_table_ws_print+0x143>
	{
		if (e->__ptr_tws[i].empty)
f0108531:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108534:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108537:	89 d0                	mov    %edx,%eax
f0108539:	01 c0                	add    %eax,%eax
f010853b:	01 d0                	add    %edx,%eax
f010853d:	c1 e0 03             	shl    $0x3,%eax
f0108540:	01 c8                	add    %ecx,%eax
f0108542:	83 e8 80             	sub    $0xffffff80,%eax
f0108545:	8a 00                	mov    (%eax),%al
f0108547:	84 c0                	test   %al,%al
f0108549:	74 43                	je     f010858e <env_table_ws_print+0x90>
		{
			cprintf("EMPTY LOCATION");
f010854b:	83 ec 0c             	sub    $0xc,%esp
f010854e:	68 a7 62 13 f0       	push   $0xf01362a7
f0108553:	e8 b6 87 ff ff       	call   f0100d0e <cprintf>
f0108558:	83 c4 10             	add    $0x10,%esp
			if(i==e->table_last_WS_index )
f010855b:	8b 45 08             	mov    0x8(%ebp),%eax
f010855e:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f0108564:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108567:	75 10                	jne    f0108579 <env_table_ws_print+0x7b>
			{
				cprintf("		<--");
f0108569:	83 ec 0c             	sub    $0xc,%esp
f010856c:	68 b6 62 13 f0       	push   $0xf01362b6
f0108571:	e8 98 87 ff ff       	call   f0100d0e <cprintf>
f0108576:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0108579:	83 ec 0c             	sub    $0xc,%esp
f010857c:	68 bc 62 13 f0       	push   $0xf01362bc
f0108581:	e8 88 87 ff ff       	call   f0100d0e <cprintf>
f0108586:	83 c4 10             	add    $0x10,%esp
			continue;
f0108589:	e9 b0 00 00 00       	jmp    f010863e <env_table_ws_print+0x140>
		}
		uint32 virtual_address = e->__ptr_tws[i].virtual_address;
f010858e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108591:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108594:	89 d0                	mov    %edx,%eax
f0108596:	01 c0                	add    %eax,%eax
f0108598:	01 d0                	add    %edx,%eax
f010859a:	c1 e0 03             	shl    $0x3,%eax
f010859d:	01 c8                	add    %ecx,%eax
f010859f:	83 c0 7c             	add    $0x7c,%eax
f01085a2:	8b 00                	mov    (%eax),%eax
f01085a4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, e->__ptr_tws[i].virtual_address);
f01085a7:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01085aa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01085ad:	89 d0                	mov    %edx,%eax
f01085af:	01 c0                	add    %eax,%eax
f01085b1:	01 d0                	add    %edx,%eax
f01085b3:	c1 e0 03             	shl    $0x3,%eax
f01085b6:	01 c8                	add    %ecx,%eax
f01085b8:	83 c0 7c             	add    $0x7c,%eax
f01085bb:	8b 00                	mov    (%eax),%eax
f01085bd:	83 ec 04             	sub    $0x4,%esp
f01085c0:	50                   	push   %eax
f01085c1:	ff 75 f4             	pushl  -0xc(%ebp)
f01085c4:	68 5c 63 13 f0       	push   $0xf013635c
f01085c9:	e8 40 87 ff ff       	call   f0100d0e <cprintf>
f01085ce:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(e->env_page_directory, virtual_address), e->__ptr_tws[i].time_stamp);
f01085d1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01085d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01085d7:	89 d0                	mov    %edx,%eax
f01085d9:	01 c0                	add    %eax,%eax
f01085db:	01 d0                	add    %edx,%eax
f01085dd:	c1 e0 03             	shl    $0x3,%eax
f01085e0:	01 c8                	add    %ecx,%eax
f01085e2:	05 84 00 00 00       	add    $0x84,%eax
f01085e7:	8b 18                	mov    (%eax),%ebx
f01085e9:	8b 45 08             	mov    0x8(%ebp),%eax
f01085ec:	8b 40 5c             	mov    0x5c(%eax),%eax
f01085ef:	83 ec 08             	sub    $0x8,%esp
f01085f2:	ff 75 f0             	pushl  -0x10(%ebp)
f01085f5:	50                   	push   %eax
f01085f6:	e8 43 f9 ff ff       	call   f0107f3e <pd_is_table_used>
f01085fb:	83 c4 10             	add    $0x10,%esp
f01085fe:	83 ec 04             	sub    $0x4,%esp
f0108601:	53                   	push   %ebx
f0108602:	50                   	push   %eax
f0108603:	68 74 63 13 f0       	push   $0xf0136374
f0108608:	e8 01 87 ff ff       	call   f0100d0e <cprintf>
f010860d:	83 c4 10             	add    $0x10,%esp
		if(i==e->table_last_WS_index )
f0108610:	8b 45 08             	mov    0x8(%ebp),%eax
f0108613:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f0108619:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010861c:	75 10                	jne    f010862e <env_table_ws_print+0x130>
		{
			cprintf(" <--");
f010861e:	83 ec 0c             	sub    $0xc,%esp
f0108621:	68 17 63 13 f0       	push   $0xf0136317
f0108626:	e8 e3 86 ff ff       	call   f0100d0e <cprintf>
f010862b:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f010862e:	83 ec 0c             	sub    $0xc,%esp
f0108631:	68 bc 62 13 f0       	push   $0xf01362bc
f0108636:	e8 d3 86 ff ff       	call   f0100d0e <cprintf>
f010863b:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *e)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f010863e:	ff 45 f4             	incl   -0xc(%ebp)
f0108641:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0108645:	0f 86 e6 fe ff ff    	jbe    f0108531 <env_table_ws_print+0x33>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f010864b:	90                   	nop
f010864c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010864f:	c9                   	leave  
f0108650:	c3                   	ret    

f0108651 <env_table_ws_get_size>:

inline uint32 env_table_ws_get_size(struct Env *e)
{
f0108651:	55                   	push   %ebp
f0108652:	89 e5                	mov    %esp,%ebp
f0108654:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0108657:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f010865e:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<__TWS_MAX_SIZE; i++) if(e->__ptr_tws[i].empty == 0) counter++;
f0108665:	eb 20                	jmp    f0108687 <env_table_ws_get_size+0x36>
f0108667:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010866a:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010866d:	89 d0                	mov    %edx,%eax
f010866f:	01 c0                	add    %eax,%eax
f0108671:	01 d0                	add    %edx,%eax
f0108673:	c1 e0 03             	shl    $0x3,%eax
f0108676:	01 c8                	add    %ecx,%eax
f0108678:	83 e8 80             	sub    $0xffffff80,%eax
f010867b:	8a 00                	mov    (%eax),%al
f010867d:	84 c0                	test   %al,%al
f010867f:	75 03                	jne    f0108684 <env_table_ws_get_size+0x33>
f0108681:	ff 45 f8             	incl   -0x8(%ebp)
f0108684:	ff 45 fc             	incl   -0x4(%ebp)
f0108687:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f010868b:	7e da                	jle    f0108667 <env_table_ws_get_size+0x16>
	return counter;
f010868d:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0108690:	c9                   	leave  
f0108691:	c3                   	ret    

f0108692 <env_table_ws_invalidate>:

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0108692:	55                   	push   %ebp
f0108693:	89 e5                	mov    %esp,%ebp
f0108695:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0108698:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<__TWS_MAX_SIZE; i++)
f010869f:	eb 4c                	jmp    f01086ed <env_table_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->__ptr_tws[i].virtual_address,PAGE_SIZE*1024) == ROUNDDOWN(virtual_address,PAGE_SIZE*1024))
f01086a1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01086a4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01086a7:	89 d0                	mov    %edx,%eax
f01086a9:	01 c0                	add    %eax,%eax
f01086ab:	01 d0                	add    %edx,%eax
f01086ad:	c1 e0 03             	shl    $0x3,%eax
f01086b0:	01 c8                	add    %ecx,%eax
f01086b2:	83 c0 7c             	add    $0x7c,%eax
f01086b5:	8b 00                	mov    (%eax),%eax
f01086b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01086ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01086bd:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f01086c2:	89 c2                	mov    %eax,%edx
f01086c4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01086c7:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01086ca:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01086cd:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f01086d2:	39 c2                	cmp    %eax,%edx
f01086d4:	75 14                	jne    f01086ea <env_table_ws_invalidate+0x58>
		{
			env_table_ws_clear_entry(e, i);
f01086d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01086d9:	83 ec 08             	sub    $0x8,%esp
f01086dc:	50                   	push   %eax
f01086dd:	ff 75 08             	pushl  0x8(%ebp)
f01086e0:	e8 b8 00 00 00       	call   f010879d <env_table_ws_clear_entry>
f01086e5:	83 c4 10             	add    $0x10,%esp
			break;
f01086e8:	eb 09                	jmp    f01086f3 <env_table_ws_invalidate+0x61>
}

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<__TWS_MAX_SIZE; i++)
f01086ea:	ff 45 f4             	incl   -0xc(%ebp)
f01086ed:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f01086f1:	7e ae                	jle    f01086a1 <env_table_ws_invalidate+0xf>
		{
			env_table_ws_clear_entry(e, i);
			break;
		}
	}
}
f01086f3:	90                   	nop
f01086f4:	c9                   	leave  
f01086f5:	c3                   	ret    

f01086f6 <env_table_ws_set_entry>:

inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f01086f6:	55                   	push   %ebp
f01086f7:	89 e5                	mov    %esp,%ebp
f01086f9:	53                   	push   %ebx
f01086fa:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01086fd:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108701:	76 19                	jbe    f010871c <env_table_ws_set_entry+0x26>
f0108703:	68 98 63 13 f0       	push   $0xf0136398
f0108708:	68 be 61 13 f0       	push   $0xf01361be
f010870d:	68 b6 00 00 00       	push   $0xb6
f0108712:	68 d4 61 13 f0       	push   $0xf01361d4
f0108717:	e8 e9 7a ff ff       	call   f0100205 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f010871c:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0108723:	76 19                	jbe    f010873e <env_table_ws_set_entry+0x48>
f0108725:	68 f4 61 13 f0       	push   $0xf01361f4
f010872a:	68 be 61 13 f0       	push   $0xf01361be
f010872f:	68 b7 00 00 00       	push   $0xb7
f0108734:	68 d4 61 13 f0       	push   $0xf01361d4
f0108739:	e8 c7 7a ff ff       	call   f0100205 <_panic>
	e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE*1024);
f010873e:	8b 45 10             	mov    0x10(%ebp),%eax
f0108741:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108744:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108747:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010874c:	89 c1                	mov    %eax,%ecx
f010874e:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0108751:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108754:	89 d0                	mov    %edx,%eax
f0108756:	01 c0                	add    %eax,%eax
f0108758:	01 d0                	add    %edx,%eax
f010875a:	c1 e0 03             	shl    $0x3,%eax
f010875d:	01 d8                	add    %ebx,%eax
f010875f:	83 c0 7c             	add    $0x7c,%eax
f0108762:	89 08                	mov    %ecx,(%eax)
	e->__ptr_tws[entry_index].empty = 0;
f0108764:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108767:	8b 55 0c             	mov    0xc(%ebp),%edx
f010876a:	89 d0                	mov    %edx,%eax
f010876c:	01 c0                	add    %eax,%eax
f010876e:	01 d0                	add    %edx,%eax
f0108770:	c1 e0 03             	shl    $0x3,%eax
f0108773:	01 c8                	add    %ecx,%eax
f0108775:	83 e8 80             	sub    $0xffffff80,%eax
f0108778:	c6 00 00             	movb   $0x0,(%eax)

	//e->__ptr_tws[entry_index].time_stamp = time;
	e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f010877b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010877e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108781:	89 d0                	mov    %edx,%eax
f0108783:	01 c0                	add    %eax,%eax
f0108785:	01 d0                	add    %edx,%eax
f0108787:	c1 e0 03             	shl    $0x3,%eax
f010878a:	01 c8                	add    %ecx,%eax
f010878c:	05 84 00 00 00       	add    $0x84,%eax
f0108791:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	return;
f0108797:	90                   	nop
}
f0108798:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010879b:	c9                   	leave  
f010879c:	c3                   	ret    

f010879d <env_table_ws_clear_entry>:

inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f010879d:	55                   	push   %ebp
f010879e:	89 e5                	mov    %esp,%ebp
f01087a0:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01087a3:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01087a7:	76 19                	jbe    f01087c2 <env_table_ws_clear_entry+0x25>
f01087a9:	68 98 63 13 f0       	push   $0xf0136398
f01087ae:	68 be 61 13 f0       	push   $0xf01361be
f01087b3:	68 c2 00 00 00       	push   $0xc2
f01087b8:	68 d4 61 13 f0       	push   $0xf01361d4
f01087bd:	e8 43 7a ff ff       	call   f0100205 <_panic>
	e->__ptr_tws[entry_index].virtual_address = 0;
f01087c2:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01087c5:	8b 55 0c             	mov    0xc(%ebp),%edx
f01087c8:	89 d0                	mov    %edx,%eax
f01087ca:	01 c0                	add    %eax,%eax
f01087cc:	01 d0                	add    %edx,%eax
f01087ce:	c1 e0 03             	shl    $0x3,%eax
f01087d1:	01 c8                	add    %ecx,%eax
f01087d3:	83 c0 7c             	add    $0x7c,%eax
f01087d6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->__ptr_tws[entry_index].empty = 1;
f01087dc:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01087df:	8b 55 0c             	mov    0xc(%ebp),%edx
f01087e2:	89 d0                	mov    %edx,%eax
f01087e4:	01 c0                	add    %eax,%eax
f01087e6:	01 d0                	add    %edx,%eax
f01087e8:	c1 e0 03             	shl    $0x3,%eax
f01087eb:	01 c8                	add    %ecx,%eax
f01087ed:	83 e8 80             	sub    $0xffffff80,%eax
f01087f0:	c6 00 01             	movb   $0x1,(%eax)
	e->__ptr_tws[entry_index].time_stamp = 0;
f01087f3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01087f6:	8b 55 0c             	mov    0xc(%ebp),%edx
f01087f9:	89 d0                	mov    %edx,%eax
f01087fb:	01 c0                	add    %eax,%eax
f01087fd:	01 d0                	add    %edx,%eax
f01087ff:	c1 e0 03             	shl    $0x3,%eax
f0108802:	01 c8                	add    %ecx,%eax
f0108804:	05 84 00 00 00       	add    $0x84,%eax
f0108809:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f010880f:	90                   	nop
f0108810:	c9                   	leave  
f0108811:	c3                   	ret    

f0108812 <env_table_ws_get_virtual_address>:

inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0108812:	55                   	push   %ebp
f0108813:	89 e5                	mov    %esp,%ebp
f0108815:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108818:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f010881c:	76 19                	jbe    f0108837 <env_table_ws_get_virtual_address+0x25>
f010881e:	68 98 63 13 f0       	push   $0xf0136398
f0108823:	68 be 61 13 f0       	push   $0xf01361be
f0108828:	68 ca 00 00 00       	push   $0xca
f010882d:	68 d4 61 13 f0       	push   $0xf01361d4
f0108832:	e8 ce 79 ff ff       	call   f0100205 <_panic>
	return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address,PAGE_SIZE*1024);
f0108837:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010883a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010883d:	89 d0                	mov    %edx,%eax
f010883f:	01 c0                	add    %eax,%eax
f0108841:	01 d0                	add    %edx,%eax
f0108843:	c1 e0 03             	shl    $0x3,%eax
f0108846:	01 c8                	add    %ecx,%eax
f0108848:	83 c0 7c             	add    $0x7c,%eax
f010884b:	8b 00                	mov    (%eax),%eax
f010884d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108850:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108853:	25 00 00 c0 ff       	and    $0xffc00000,%eax
}
f0108858:	c9                   	leave  
f0108859:	c3                   	ret    

f010885a <env_table_ws_get_time_stamp>:


inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f010885a:	55                   	push   %ebp
f010885b:	89 e5                	mov    %esp,%ebp
f010885d:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108860:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108864:	76 19                	jbe    f010887f <env_table_ws_get_time_stamp+0x25>
f0108866:	68 98 63 13 f0       	push   $0xf0136398
f010886b:	68 be 61 13 f0       	push   $0xf01361be
f0108870:	68 d1 00 00 00       	push   $0xd1
f0108875:	68 d4 61 13 f0       	push   $0xf01361d4
f010887a:	e8 86 79 ff ff       	call   f0100205 <_panic>
	return e->__ptr_tws[entry_index].time_stamp;
f010887f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108882:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108885:	89 d0                	mov    %edx,%eax
f0108887:	01 c0                	add    %eax,%eax
f0108889:	01 d0                	add    %edx,%eax
f010888b:	c1 e0 03             	shl    $0x3,%eax
f010888e:	01 c8                	add    %ecx,%eax
f0108890:	05 84 00 00 00       	add    $0x84,%eax
f0108895:	8b 00                	mov    (%eax),%eax
}
f0108897:	c9                   	leave  
f0108898:	c3                   	ret    

f0108899 <env_table_ws_is_entry_empty>:

inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0108899:	55                   	push   %ebp
f010889a:	89 e5                	mov    %esp,%ebp
	return e->__ptr_tws[entry_index].empty;
f010889c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010889f:	8b 55 0c             	mov    0xc(%ebp),%edx
f01088a2:	89 d0                	mov    %edx,%eax
f01088a4:	01 c0                	add    %eax,%eax
f01088a6:	01 d0                	add    %edx,%eax
f01088a8:	c1 e0 03             	shl    $0x3,%eax
f01088ab:	01 c8                	add    %ecx,%eax
f01088ad:	83 e8 80             	sub    $0xffffff80,%eax
f01088b0:	8a 00                	mov    (%eax),%al
f01088b2:	0f b6 c0             	movzbl %al,%eax
}
f01088b5:	5d                   	pop    %ebp
f01088b6:	c3                   	ret    

f01088b7 <cut_paste_WS>:
///=================================================================================================

// Change WS Sizes For PRIORITY  =========================================================

void cut_paste_WS(struct WorkingSetElement* newWS, int newSize, struct Env* e)
{
f01088b7:	55                   	push   %ebp
f01088b8:	89 e5                	mov    %esp,%ebp
f01088ba:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] cut_paste_WS
	//your code is here, remove the panic and write your code
	panic("cut_paste_WS() is not implemented yet...!!");
f01088bd:	83 ec 04             	sub    $0x4,%esp
f01088c0:	68 cc 63 13 f0       	push   $0xf01363cc
f01088c5:	68 e5 00 00 00       	push   $0xe5
f01088ca:	68 d4 61 13 f0       	push   $0xf01361d4
f01088cf:	e8 31 79 ff ff       	call   f0100205 <_panic>

f01088d4 <double_WS_Size>:
}

void double_WS_Size(struct Env* e, int isOneTimeOnly)
{
f01088d4:	55                   	push   %ebp
f01088d5:	89 e5                	mov    %esp,%ebp
f01088d7:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] double_WS_Size
	//your code is here, remove the panic and write your code
	panic("double_WS_Size() is not implemented yet...!!");
f01088da:	83 ec 04             	sub    $0x4,%esp
f01088dd:	68 f8 63 13 f0       	push   $0xf01363f8
f01088e2:	68 ec 00 00 00       	push   $0xec
f01088e7:	68 d4 61 13 f0       	push   $0xf01361d4
f01088ec:	e8 14 79 ff ff       	call   f0100205 <_panic>

f01088f1 <half_WS_Size>:
}

void half_WS_Size(struct Env* e, int isImmidiate)
{
f01088f1:	55                   	push   %ebp
f01088f2:	89 e5                	mov    %esp,%ebp
f01088f4:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] half_WS_Size
	//your code is here, remove the panic and write your code
	panic("half_WS_Size() is not implemented yet...!!");
f01088f7:	83 ec 04             	sub    $0x4,%esp
f01088fa:	68 28 64 13 f0       	push   $0xf0136428
f01088ff:	68 f3 00 00 00       	push   $0xf3
f0108904:	68 d4 61 13 f0       	push   $0xf01361d4
f0108909:	e8 f7 78 ff ff       	call   f0100205 <_panic>

f010890e <cut_paste_pages>:
//===============================
//This function should cut-paste the given number of pages from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int cut_paste_pages(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 num_of_pages)
{
f010890e:	55                   	push   %ebp
f010890f:	89 e5                	mov    %esp,%ebp
f0108911:	83 ec 68             	sub    $0x68,%esp

		  uint32 endsrc_va = source_va +(num_of_pages*PAGE_SIZE);
f0108914:	8b 45 14             	mov    0x14(%ebp),%eax
f0108917:	c1 e0 0c             	shl    $0xc,%eax
f010891a:	89 c2                	mov    %eax,%edx
f010891c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010891f:	01 d0                	add    %edx,%eax
f0108921:	89 45 ec             	mov    %eax,-0x14(%ebp)
		  uint32 end_distva= dest_va + (num_of_pages*PAGE_SIZE);
f0108924:	8b 45 14             	mov    0x14(%ebp),%eax
f0108927:	c1 e0 0c             	shl    $0xc,%eax
f010892a:	89 c2                	mov    %eax,%edx
f010892c:	8b 45 10             	mov    0x10(%ebp),%eax
f010892f:	01 d0                	add    %edx,%eax
f0108931:	89 45 e8             	mov    %eax,-0x18(%ebp)
		  source_va=ROUNDDOWN(source_va,PAGE_SIZE);
f0108934:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108937:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010893a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010893d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108942:	89 45 0c             	mov    %eax,0xc(%ebp)
		  endsrc_va=ROUNDUP(endsrc_va,PAGE_SIZE);
f0108945:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f010894c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010894f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108952:	01 d0                	add    %edx,%eax
f0108954:	48                   	dec    %eax
f0108955:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0108958:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010895b:	ba 00 00 00 00       	mov    $0x0,%edx
f0108960:	f7 75 e0             	divl   -0x20(%ebp)
f0108963:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108966:	29 d0                	sub    %edx,%eax
f0108968:	89 45 ec             	mov    %eax,-0x14(%ebp)
		  dest_va=ROUNDDOWN(dest_va,PAGE_SIZE);
f010896b:	8b 45 10             	mov    0x10(%ebp),%eax
f010896e:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0108971:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108974:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108979:	89 45 10             	mov    %eax,0x10(%ebp)
		  end_distva=ROUNDUP(end_distva,PAGE_SIZE);
f010897c:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0108983:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0108986:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108989:	01 d0                	add    %edx,%eax
f010898b:	48                   	dec    %eax
f010898c:	89 45 d0             	mov    %eax,-0x30(%ebp)
f010898f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108992:	ba 00 00 00 00       	mov    $0x0,%edx
f0108997:	f7 75 d4             	divl   -0x2c(%ebp)
f010899a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010899d:	29 d0                	sub    %edx,%eax
f010899f:	89 45 e8             	mov    %eax,-0x18(%ebp)

			uint32 *ptr_page_table1=NULL;
f01089a2:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
			uint32*ptr1 =NULL;
f01089a9:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
				struct FrameInfo* ptrframeinfo;
				uint32 stoploop=dest_va;
f01089b0:	8b 45 10             	mov    0x10(%ebp),%eax
f01089b3:	89 45 c8             	mov    %eax,-0x38(%ebp)
				for( uint32 i=dest_va;i<end_distva;i += PAGE_SIZE){
f01089b6:	8b 45 10             	mov    0x10(%ebp),%eax
f01089b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01089bc:	eb 2f                	jmp    f01089ed <cut_paste_pages+0xdf>
				ptrframeinfo =get_frame_info(page_directory,i,&ptr1);
f01089be:	83 ec 04             	sub    $0x4,%esp
f01089c1:	8d 45 a8             	lea    -0x58(%ebp),%eax
f01089c4:	50                   	push   %eax
f01089c5:	ff 75 f4             	pushl  -0xc(%ebp)
f01089c8:	ff 75 08             	pushl  0x8(%ebp)
f01089cb:	e8 14 e4 ff ff       	call   f0106de4 <get_frame_info>
f01089d0:	83 c4 10             	add    $0x10,%esp
f01089d3:	89 45 c4             	mov    %eax,-0x3c(%ebp)
					if(ptrframeinfo!=NULL){
f01089d6:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f01089da:	74 0a                	je     f01089e6 <cut_paste_pages+0xd8>
					return -1;
f01089dc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01089e1:	e9 ef 00 00 00       	jmp    f0108ad5 <cut_paste_pages+0x1c7>

			uint32 *ptr_page_table1=NULL;
			uint32*ptr1 =NULL;
				struct FrameInfo* ptrframeinfo;
				uint32 stoploop=dest_va;
				for( uint32 i=dest_va;i<end_distva;i += PAGE_SIZE){
f01089e6:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01089ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01089f0:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01089f3:	72 c9                	jb     f01089be <cut_paste_pages+0xb0>
					return -1;
					}

							}

			uint32 *temp2=NULL;
f01089f5:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
			 for(uint32 i=0;i<num_of_pages;i++){
f01089fc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0108a03:	e9 bc 00 00 00       	jmp    f0108ac4 <cut_paste_pages+0x1b6>
				uint32 dest_address = dest_va + i*PAGE_SIZE;
f0108a08:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108a0b:	c1 e0 0c             	shl    $0xc,%eax
f0108a0e:	89 c2                	mov    %eax,%edx
f0108a10:	8b 45 10             	mov    0x10(%ebp),%eax
f0108a13:	01 d0                	add    %edx,%eax
f0108a15:	89 45 c0             	mov    %eax,-0x40(%ebp)
				uint32 source_address = source_va + i*PAGE_SIZE;
f0108a18:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108a1b:	c1 e0 0c             	shl    $0xc,%eax
f0108a1e:	89 c2                	mov    %eax,%edx
f0108a20:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108a23:	01 d0                	add    %edx,%eax
f0108a25:	89 45 bc             	mov    %eax,-0x44(%ebp)
				uint32 en =	get_page_table(page_directory,dest_address,&temp2);
f0108a28:	83 ec 04             	sub    $0x4,%esp
f0108a2b:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f0108a2e:	50                   	push   %eax
f0108a2f:	ff 75 c0             	pushl  -0x40(%ebp)
f0108a32:	ff 75 08             	pushl  0x8(%ebp)
f0108a35:	e8 55 e0 ff ff       	call   f0106a8f <get_page_table>
f0108a3a:	83 c4 10             	add    $0x10,%esp
f0108a3d:	89 45 b8             	mov    %eax,-0x48(%ebp)
			 uint32 *ptr_page_table2=NULL;
f0108a40:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
		 if(en==TABLE_NOT_EXIST){
f0108a47:	83 7d b8 01          	cmpl   $0x1,-0x48(%ebp)
f0108a4b:	75 11                	jne    f0108a5e <cut_paste_pages+0x150>
			 create_page_table(page_directory,dest_address);
f0108a4d:	83 ec 08             	sub    $0x8,%esp
f0108a50:	ff 75 c0             	pushl  -0x40(%ebp)
f0108a53:	ff 75 08             	pushl  0x8(%ebp)
f0108a56:	e8 8a e1 ff ff       	call   f0106be5 <create_page_table>
f0108a5b:	83 c4 10             	add    $0x10,%esp
		 }
		 struct FrameInfo *temp=get_frame_info(page_directory,source_address,&ptr_page_table2);
f0108a5e:	83 ec 04             	sub    $0x4,%esp
f0108a61:	8d 45 a0             	lea    -0x60(%ebp),%eax
f0108a64:	50                   	push   %eax
f0108a65:	ff 75 bc             	pushl  -0x44(%ebp)
f0108a68:	ff 75 08             	pushl  0x8(%ebp)
f0108a6b:	e8 74 e3 ff ff       	call   f0106de4 <get_frame_info>
f0108a70:	83 c4 10             	add    $0x10,%esp
f0108a73:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		uint32 table_entry =PTX(source_address);
f0108a76:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0108a79:	c1 e8 0c             	shr    $0xc,%eax
f0108a7c:	25 ff 03 00 00       	and    $0x3ff,%eax
f0108a81:	89 45 b0             	mov    %eax,-0x50(%ebp)
		 uint32 PERMS =ptr_page_table2[table_entry]<<20;
f0108a84:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0108a87:	8b 55 b0             	mov    -0x50(%ebp),%edx
f0108a8a:	c1 e2 02             	shl    $0x2,%edx
f0108a8d:	01 d0                	add    %edx,%eax
f0108a8f:	8b 00                	mov    (%eax),%eax
f0108a91:	c1 e0 14             	shl    $0x14,%eax
f0108a94:	89 45 ac             	mov    %eax,-0x54(%ebp)
			PERMS=PERMS>>20;
f0108a97:	c1 6d ac 14          	shrl   $0x14,-0x54(%ebp)
			map_frame(page_directory,temp,dest_address,PERMS);
f0108a9b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0108a9e:	50                   	push   %eax
f0108a9f:	ff 75 c0             	pushl  -0x40(%ebp)
f0108aa2:	ff 75 b4             	pushl  -0x4c(%ebp)
f0108aa5:	ff 75 08             	pushl  0x8(%ebp)
f0108aa8:	e8 72 e2 ff ff       	call   f0106d1f <map_frame>
f0108aad:	83 c4 10             	add    $0x10,%esp
			 unmap_frame(page_directory,source_address);
f0108ab0:	83 ec 08             	sub    $0x8,%esp
f0108ab3:	ff 75 bc             	pushl  -0x44(%ebp)
f0108ab6:	ff 75 08             	pushl  0x8(%ebp)
f0108ab9:	e8 96 e3 ff ff       	call   f0106e54 <unmap_frame>
f0108abe:	83 c4 10             	add    $0x10,%esp
					}

							}

			uint32 *temp2=NULL;
			 for(uint32 i=0;i<num_of_pages;i++){
f0108ac1:	ff 45 f0             	incl   -0x10(%ebp)
f0108ac4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108ac7:	3b 45 14             	cmp    0x14(%ebp),%eax
f0108aca:	0f 82 38 ff ff ff    	jb     f0108a08 <cut_paste_pages+0xfa>



			 		 }

		 return 0;
f0108ad0:	b8 00 00 00 00       	mov    $0x0,%eax
		 }
f0108ad5:	c9                   	leave  
f0108ad6:	c3                   	ret    

f0108ad7 <copy_paste_chunk>:
//===============================
//This function should copy-paste the given size from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int copy_paste_chunk(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 size)
{
f0108ad7:	55                   	push   %ebp
f0108ad8:	89 e5                	mov    %esp,%ebp
f0108ada:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] copy_paste_chunk
	// Write your code here, remove the panic and write your code
	panic("copy_paste_chunk() is not implemented yet...!!");
f0108add:	83 ec 04             	sub    $0x4,%esp
f0108ae0:	68 54 64 13 f0       	push   $0xf0136454
f0108ae5:	6a 54                	push   $0x54
f0108ae7:	68 83 64 13 f0       	push   $0xf0136483
f0108aec:	e8 14 77 ff ff       	call   f0100205 <_panic>

f0108af1 <share_chunk>:
// 3) SHARE RANGE IN RAM:
//===============================
//This function should share the given size from dest_va with the source_va
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int share_chunk(uint32* page_directory, uint32 source_va,uint32 dest_va, uint32 size, uint32 perms)
{
f0108af1:	55                   	push   %ebp
f0108af2:	89 e5                	mov    %esp,%ebp
f0108af4:	83 ec 58             	sub    $0x58,%esp


    uint32 end_source = source_va +size;
f0108af7:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108afa:	8b 45 14             	mov    0x14(%ebp),%eax
f0108afd:	01 d0                	add    %edx,%eax
f0108aff:	89 45 e8             	mov    %eax,-0x18(%ebp)
	uint32 end_dest= dest_va +size;
f0108b02:	8b 55 10             	mov    0x10(%ebp),%edx
f0108b05:	8b 45 14             	mov    0x14(%ebp),%eax
f0108b08:	01 d0                	add    %edx,%eax
f0108b0a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	source_va =ROUNDDOWN(source_va,PAGE_SIZE);
f0108b0d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108b10:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0108b13:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108b16:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108b1b:	89 45 0c             	mov    %eax,0xc(%ebp)
	end_source=ROUNDUP(end_source,PAGE_SIZE);
f0108b1e:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0108b25:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0108b28:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108b2b:	01 d0                	add    %edx,%eax
f0108b2d:	48                   	dec    %eax
f0108b2e:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0108b31:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108b34:	ba 00 00 00 00       	mov    $0x0,%edx
f0108b39:	f7 75 dc             	divl   -0x24(%ebp)
f0108b3c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108b3f:	29 d0                	sub    %edx,%eax
f0108b41:	89 45 e8             	mov    %eax,-0x18(%ebp)
	dest_va =ROUNDDOWN(dest_va,PAGE_SIZE);
f0108b44:	8b 45 10             	mov    0x10(%ebp),%eax
f0108b47:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0108b4a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108b4d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108b52:	89 45 10             	mov    %eax,0x10(%ebp)
	end_dest=ROUNDUP(end_dest,PAGE_SIZE);
f0108b55:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f0108b5c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0108b5f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108b62:	01 d0                	add    %edx,%eax
f0108b64:	48                   	dec    %eax
f0108b65:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0108b68:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108b6b:	ba 00 00 00 00       	mov    $0x0,%edx
f0108b70:	f7 75 d0             	divl   -0x30(%ebp)
f0108b73:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108b76:	29 d0                	sub    %edx,%eax
f0108b78:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		struct FrameInfo * ptr_frame_info;
		uint32 *ptr_page_table1=NULL;
f0108b7b:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
		uint32*ptr1 =NULL;
f0108b82:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
	for(uint32 i=dest_va;i<end_dest;i += PAGE_SIZE){
f0108b89:	8b 45 10             	mov    0x10(%ebp),%eax
f0108b8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108b8f:	eb 2f                	jmp    f0108bc0 <share_chunk+0xcf>

		ptr_frame_info=get_frame_info(page_directory,i,&ptr1);
f0108b91:	83 ec 04             	sub    $0x4,%esp
f0108b94:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0108b97:	50                   	push   %eax
f0108b98:	ff 75 f4             	pushl  -0xc(%ebp)
f0108b9b:	ff 75 08             	pushl  0x8(%ebp)
f0108b9e:	e8 41 e2 ff ff       	call   f0106de4 <get_frame_info>
f0108ba3:	83 c4 10             	add    $0x10,%esp
f0108ba6:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if(ptr_frame_info!=NULL){
f0108ba9:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0108bad:	74 0a                	je     f0108bb9 <share_chunk+0xc8>

		return -1;
f0108baf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108bb4:	e9 ae 00 00 00       	jmp    f0108c67 <share_chunk+0x176>
	dest_va =ROUNDDOWN(dest_va,PAGE_SIZE);
	end_dest=ROUNDUP(end_dest,PAGE_SIZE);
		struct FrameInfo * ptr_frame_info;
		uint32 *ptr_page_table1=NULL;
		uint32*ptr1 =NULL;
	for(uint32 i=dest_va;i<end_dest;i += PAGE_SIZE){
f0108bb9:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0108bc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108bc3:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0108bc6:	72 c9                	jb     f0108b91 <share_chunk+0xa0>

		return -1;
	}

	}
	uint32 *temp2=NULL;
f0108bc8:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	for(uint32 i=source_va, j=dest_va;i<end_source&&j<end_dest ;i+=PAGE_SIZE,j+=PAGE_SIZE){
f0108bcf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108bd2:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108bd5:	8b 45 10             	mov    0x10(%ebp),%eax
f0108bd8:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108bdb:	eb 71                	jmp    f0108c4e <share_chunk+0x15d>


	uint32 entries =get_page_table(page_directory,j,&temp2);
f0108bdd:	83 ec 04             	sub    $0x4,%esp
f0108be0:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0108be3:	50                   	push   %eax
f0108be4:	ff 75 ec             	pushl  -0x14(%ebp)
f0108be7:	ff 75 08             	pushl  0x8(%ebp)
f0108bea:	e8 a0 de ff ff       	call   f0106a8f <get_page_table>
f0108bef:	83 c4 10             	add    $0x10,%esp
f0108bf2:	89 45 c0             	mov    %eax,-0x40(%ebp)
	 if(entries==TABLE_NOT_EXIST){
f0108bf5:	83 7d c0 01          	cmpl   $0x1,-0x40(%ebp)
f0108bf9:	75 11                	jne    f0108c0c <share_chunk+0x11b>
		 create_page_table(page_directory,j);
f0108bfb:	83 ec 08             	sub    $0x8,%esp
f0108bfe:	ff 75 ec             	pushl  -0x14(%ebp)
f0108c01:	ff 75 08             	pushl  0x8(%ebp)
f0108c04:	e8 dc df ff ff       	call   f0106be5 <create_page_table>
f0108c09:	83 c4 10             	add    $0x10,%esp
	 }
	 uint32 *ptr_page_table2=NULL;
f0108c0c:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
struct FrameInfo *temp=get_frame_info(page_directory,i,&ptr_page_table2);
f0108c13:	83 ec 04             	sub    $0x4,%esp
f0108c16:	8d 45 b0             	lea    -0x50(%ebp),%eax
f0108c19:	50                   	push   %eax
f0108c1a:	ff 75 f0             	pushl  -0x10(%ebp)
f0108c1d:	ff 75 08             	pushl  0x8(%ebp)
f0108c20:	e8 bf e1 ff ff       	call   f0106de4 <get_frame_info>
f0108c25:	83 c4 10             	add    $0x10,%esp
f0108c28:	89 45 bc             	mov    %eax,-0x44(%ebp)
map_frame(page_directory,temp,j,perms);
f0108c2b:	8b 45 18             	mov    0x18(%ebp),%eax
f0108c2e:	50                   	push   %eax
f0108c2f:	ff 75 ec             	pushl  -0x14(%ebp)
f0108c32:	ff 75 bc             	pushl  -0x44(%ebp)
f0108c35:	ff 75 08             	pushl  0x8(%ebp)
f0108c38:	e8 e2 e0 ff ff       	call   f0106d1f <map_frame>
f0108c3d:	83 c4 10             	add    $0x10,%esp
		return -1;
	}

	}
	uint32 *temp2=NULL;
	for(uint32 i=source_va, j=dest_va;i<end_source&&j<end_dest ;i+=PAGE_SIZE,j+=PAGE_SIZE){
f0108c40:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0108c47:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
f0108c4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108c51:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0108c54:	73 0c                	jae    f0108c62 <share_chunk+0x171>
f0108c56:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108c59:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0108c5c:	0f 82 7b ff ff ff    	jb     f0108bdd <share_chunk+0xec>
	 uint32 *ptr_page_table2=NULL;
struct FrameInfo *temp=get_frame_info(page_directory,i,&ptr_page_table2);
map_frame(page_directory,temp,j,perms);
}

return 0;
f0108c62:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108c67:	c9                   	leave  
f0108c68:	c3                   	ret    

f0108c69 <allocate_chunk>:
// 4) ALLOCATE CHUNK IN RAM:
//===============================
//This function should allocate in RAM the given range [va, va+size)
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int allocate_chunk(uint32* page_directory, uint32 va, uint32 size, uint32 perms)
{
f0108c69:	55                   	push   %ebp
f0108c6a:	89 e5                	mov    %esp,%ebp
f0108c6c:	83 ec 38             	sub    $0x38,%esp
	uint32 endva = va+size;
f0108c6f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108c72:	8b 45 10             	mov    0x10(%ebp),%eax
f0108c75:	01 d0                	add    %edx,%eax
f0108c77:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 i;
	struct FrameInfo* ptrframeinfo;
	struct FrameInfo*ptr_frame_info;
	va=ROUNDDOWN(va,PAGE_SIZE);
f0108c7a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108c7d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108c80:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108c83:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108c88:	89 45 0c             	mov    %eax,0xc(%ebp)
	endva=ROUNDUP(endva,PAGE_SIZE );
f0108c8b:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f0108c92:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0108c95:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108c98:	01 d0                	add    %edx,%eax
f0108c9a:	48                   	dec    %eax
f0108c9b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108c9e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108ca1:	ba 00 00 00 00       	mov    $0x0,%edx
f0108ca6:	f7 75 e8             	divl   -0x18(%ebp)
f0108ca9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108cac:	29 d0                	sub    %edx,%eax
f0108cae:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for( i=va;i<endva;i=i+PAGE_SIZE){
f0108cb1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108cb4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108cb7:	e9 93 00 00 00       	jmp    f0108d4f <allocate_chunk+0xe6>
			uint32*ptr1 =NULL;
f0108cbc:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
	ptrframeinfo =get_frame_info(page_directory,i,&ptr1);
f0108cc3:	83 ec 04             	sub    $0x4,%esp
f0108cc6:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f0108cc9:	50                   	push   %eax
f0108cca:	ff 75 f4             	pushl  -0xc(%ebp)
f0108ccd:	ff 75 08             	pushl  0x8(%ebp)
f0108cd0:	e8 0f e1 ff ff       	call   f0106de4 <get_frame_info>
f0108cd5:	83 c4 10             	add    $0x10,%esp
f0108cd8:	89 45 e0             	mov    %eax,-0x20(%ebp)
			 if(ptrframeinfo!=NULL){
f0108cdb:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0108cdf:	74 07                	je     f0108ce8 <allocate_chunk+0x7f>
							return -1;
f0108ce1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108ce6:	eb 78                	jmp    f0108d60 <allocate_chunk+0xf7>
						}
				else if(ptrframeinfo==NULL){
f0108ce8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0108cec:	75 51                	jne    f0108d3f <allocate_chunk+0xd6>
					uint32*p=NULL;
f0108cee:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
				get_page_table(page_directory,i,&p);
f0108cf5:	83 ec 04             	sub    $0x4,%esp
f0108cf8:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108cfb:	50                   	push   %eax
f0108cfc:	ff 75 f4             	pushl  -0xc(%ebp)
f0108cff:	ff 75 08             	pushl  0x8(%ebp)
f0108d02:	e8 88 dd ff ff       	call   f0106a8f <get_page_table>
f0108d07:	83 c4 10             	add    $0x10,%esp
				uint32*ptr2;
			int ret=allocate_frame(&ptr_frame_info);
f0108d0a:	83 ec 0c             	sub    $0xc,%esp
f0108d0d:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0108d10:	50                   	push   %eax
f0108d11:	e8 ba db ff ff       	call   f01068d0 <allocate_frame>
f0108d16:	83 c4 10             	add    $0x10,%esp
f0108d19:	89 45 dc             	mov    %eax,-0x24(%ebp)
			if(ret==E_NO_MEM){
f0108d1c:	83 7d dc fc          	cmpl   $0xfffffffc,-0x24(%ebp)
f0108d20:	75 07                	jne    f0108d29 <allocate_chunk+0xc0>
				return -1;
f0108d22:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	endva=ROUNDUP(endva,PAGE_SIZE );
		for( i=va;i<endva;i=i+PAGE_SIZE){
			uint32*ptr1 =NULL;
	ptrframeinfo =get_frame_info(page_directory,i,&ptr1);
			 if(ptrframeinfo!=NULL){
							return -1;
f0108d27:	eb 37                	jmp    f0108d60 <allocate_chunk+0xf7>
			int ret=allocate_frame(&ptr_frame_info);
			if(ret==E_NO_MEM){
				return -1;

			}else{
				map_frame(page_directory,ptr_frame_info,i,perms);
f0108d29:	8b 55 14             	mov    0x14(%ebp),%edx
f0108d2c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108d2f:	52                   	push   %edx
f0108d30:	ff 75 f4             	pushl  -0xc(%ebp)
f0108d33:	50                   	push   %eax
f0108d34:	ff 75 08             	pushl  0x8(%ebp)
f0108d37:	e8 e3 df ff ff       	call   f0106d1f <map_frame>
f0108d3c:	83 c4 10             	add    $0x10,%esp
			}

			}
			 ptr_frame_info->va=i;
f0108d3f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108d42:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108d45:	89 50 0c             	mov    %edx,0xc(%eax)
	uint32 i;
	struct FrameInfo* ptrframeinfo;
	struct FrameInfo*ptr_frame_info;
	va=ROUNDDOWN(va,PAGE_SIZE);
	endva=ROUNDUP(endva,PAGE_SIZE );
		for( i=va;i<endva;i=i+PAGE_SIZE){
f0108d48:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0108d4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108d52:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0108d55:	0f 82 61 ff ff ff    	jb     f0108cbc <allocate_chunk+0x53>
			}
			 ptr_frame_info->va=i;

	}

		return 0;
f0108d5b:	b8 00 00 00 00       	mov    $0x0,%eax


	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] allocate_chunk
	 //Write your code here, remove the panic and write your code
	//panic("allocate_chunk() is not implemented yet...!!");
}
f0108d60:	c9                   	leave  
f0108d61:	c3                   	ret    

f0108d62 <calculate_allocated_space>:
/*BONUS*/
//=====================================
// 5) CALCULATE ALLOCATED SPACE IN RAM:
//=====================================
void calculate_allocated_space(uint32* page_directory, uint32 sva, uint32 eva, uint32 *num_tables, uint32 *num_pages)
{
f0108d62:	55                   	push   %ebp
f0108d63:	89 e5                	mov    %esp,%ebp
f0108d65:	83 ec 48             	sub    $0x48,%esp
	uint32 start_address = ROUNDDOWN(sva , PAGE_SIZE);
f0108d68:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108d6b:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0108d6e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108d71:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108d76:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 end_address = ROUNDUP(eva , PAGE_SIZE);
f0108d79:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f0108d80:	8b 55 10             	mov    0x10(%ebp),%edx
f0108d83:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108d86:	01 d0                	add    %edx,%eax
f0108d88:	48                   	dec    %eax
f0108d89:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0108d8c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108d8f:	ba 00 00 00 00       	mov    $0x0,%edx
f0108d94:	f7 75 e0             	divl   -0x20(%ebp)
f0108d97:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108d9a:	29 d0                	sub    %edx,%eax
f0108d9c:	89 45 d8             	mov    %eax,-0x28(%ebp)
	int sum_page = 0 ;
f0108d9f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int sum_table = 0;
f0108da6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 i ;
	for(i = start_address ; i < end_address ; i += PAGE_SIZE){
f0108dad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108db0:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108db3:	eb 2f                	jmp    f0108de4 <calculate_allocated_space+0x82>
		struct FrameInfo *f ;
		uint32 *ptr1 = NULL ;
f0108db5:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		f = get_frame_info(page_directory , i , &ptr1);
f0108dbc:	83 ec 04             	sub    $0x4,%esp
f0108dbf:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f0108dc2:	50                   	push   %eax
f0108dc3:	ff 75 ec             	pushl  -0x14(%ebp)
f0108dc6:	ff 75 08             	pushl  0x8(%ebp)
f0108dc9:	e8 16 e0 ff ff       	call   f0106de4 <get_frame_info>
f0108dce:	83 c4 10             	add    $0x10,%esp
f0108dd1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if (f != NULL ){
f0108dd4:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0108dd8:	74 03                	je     f0108ddd <calculate_allocated_space+0x7b>
			sum_page++;
f0108dda:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 start_address = ROUNDDOWN(sva , PAGE_SIZE);
	uint32 end_address = ROUNDUP(eva , PAGE_SIZE);
	int sum_page = 0 ;
	int sum_table = 0;
	uint32 i ;
	for(i = start_address ; i < end_address ; i += PAGE_SIZE){
f0108ddd:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
f0108de4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108de7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0108dea:	72 c9                	jb     f0108db5 <calculate_allocated_space+0x53>
		f = get_frame_info(page_directory , i , &ptr1);
		if (f != NULL ){
			sum_page++;
		}
	}
	uint32 x = start_address =ROUNDDOWN(sva , PAGE_SIZE*1024);
f0108dec:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108def:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0108df2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108df5:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108dfa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108dfd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108e00:	89 45 cc             	mov    %eax,-0x34(%ebp)
	for(i = x ; i < end_address ; i += PAGE_SIZE*1024){
f0108e03:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108e06:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108e09:	eb 2f                	jmp    f0108e3a <calculate_allocated_space+0xd8>
		uint32 *ptr2 = NULL ;
f0108e0b:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
		int t_inmem = get_page_table(page_directory , i ,&ptr2);
f0108e12:	83 ec 04             	sub    $0x4,%esp
f0108e15:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0108e18:	50                   	push   %eax
f0108e19:	ff 75 ec             	pushl  -0x14(%ebp)
f0108e1c:	ff 75 08             	pushl  0x8(%ebp)
f0108e1f:	e8 6b dc ff ff       	call   f0106a8f <get_page_table>
f0108e24:	83 c4 10             	add    $0x10,%esp
f0108e27:	89 45 c8             	mov    %eax,-0x38(%ebp)
					if(t_inmem == TABLE_IN_MEMORY){
f0108e2a:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0108e2e:	75 03                	jne    f0108e33 <calculate_allocated_space+0xd1>
						sum_table++ ;
f0108e30:	ff 45 f0             	incl   -0x10(%ebp)
		if (f != NULL ){
			sum_page++;
		}
	}
	uint32 x = start_address =ROUNDDOWN(sva , PAGE_SIZE*1024);
	for(i = x ; i < end_address ; i += PAGE_SIZE*1024){
f0108e33:	81 45 ec 00 00 40 00 	addl   $0x400000,-0x14(%ebp)
f0108e3a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108e3d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0108e40:	72 c9                	jb     f0108e0b <calculate_allocated_space+0xa9>
		int t_inmem = get_page_table(page_directory , i ,&ptr2);
					if(t_inmem == TABLE_IN_MEMORY){
						sum_table++ ;
		     	}
	}
*num_pages = sum_page ;
f0108e42:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108e45:	8b 45 18             	mov    0x18(%ebp),%eax
f0108e48:	89 10                	mov    %edx,(%eax)
*num_tables = sum_table ;
f0108e4a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0108e4d:	8b 45 14             	mov    0x14(%ebp),%eax
f0108e50:	89 10                	mov    %edx,(%eax)


	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_allocated_space
	// Write your code here, remove the panic and write your code
	//panic("calculate_allocated_space() is not implemented yet...!!");
}
f0108e52:	90                   	nop
f0108e53:	c9                   	leave  
f0108e54:	c3                   	ret    

f0108e55 <calculate_required_frames>:
// calculate_required_frames:
// calculates the new allocation size required for given address+size,
// we are not interested in knowing if pages or tables actually exist in memory or the page file,
// we are interested in knowing whether they are allocated or not.
uint32 calculate_required_frames(uint32* page_directory, uint32 sva, uint32 size)
{
f0108e55:	55                   	push   %ebp
f0108e56:	89 e5                	mov    %esp,%ebp
f0108e58:	83 ec 48             	sub    $0x48,%esp
	uint32 start_address_required = ROUNDDOWN(sva , PAGE_SIZE);
f0108e5b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108e5e:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0108e61:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108e64:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108e69:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		uint32 end_address_required = ROUNDUP(sva+size , PAGE_SIZE);
f0108e6c:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f0108e73:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108e76:	8b 45 10             	mov    0x10(%ebp),%eax
f0108e79:	01 c2                	add    %eax,%edx
f0108e7b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108e7e:	01 d0                	add    %edx,%eax
f0108e80:	48                   	dec    %eax
f0108e81:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0108e84:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108e87:	ba 00 00 00 00       	mov    $0x0,%edx
f0108e8c:	f7 75 e0             	divl   -0x20(%ebp)
f0108e8f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108e92:	29 d0                	sub    %edx,%eax
f0108e94:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int sum_page_required = 0 ;
f0108e97:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		int sum_table_required = 0;
f0108e9e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		uint32 i ;
		for(i = start_address_required ; i < end_address_required ; i += PAGE_SIZE){
f0108ea5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108ea8:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108eab:	eb 2f                	jmp    f0108edc <calculate_required_frames+0x87>
		struct FrameInfo *f ;
		uint32 *ptr1 = NULL ;
f0108ead:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		f = get_frame_info(page_directory , i , &ptr1);
f0108eb4:	83 ec 04             	sub    $0x4,%esp
f0108eb7:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f0108eba:	50                   	push   %eax
f0108ebb:	ff 75 ec             	pushl  -0x14(%ebp)
f0108ebe:	ff 75 08             	pushl  0x8(%ebp)
f0108ec1:	e8 1e df ff ff       	call   f0106de4 <get_frame_info>
f0108ec6:	83 c4 10             	add    $0x10,%esp
f0108ec9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if (f == NULL ){
f0108ecc:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0108ed0:	75 03                	jne    f0108ed5 <calculate_required_frames+0x80>
				sum_page_required++;
f0108ed2:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 start_address_required = ROUNDDOWN(sva , PAGE_SIZE);
		uint32 end_address_required = ROUNDUP(sva+size , PAGE_SIZE);
		int sum_page_required = 0 ;
		int sum_table_required = 0;
		uint32 i ;
		for(i = start_address_required ; i < end_address_required ; i += PAGE_SIZE){
f0108ed5:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
f0108edc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108edf:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0108ee2:	72 c9                	jb     f0108ead <calculate_required_frames+0x58>
		f = get_frame_info(page_directory , i , &ptr1);
		if (f == NULL ){
				sum_page_required++;
			}
		}
		uint32 x = start_address_required =ROUNDDOWN(sva , PAGE_SIZE*1024);
f0108ee4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108ee7:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0108eea:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108eed:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108ef2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108ef5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108ef8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		for(i = x ; i < end_address_required ; i += PAGE_SIZE*1024){
f0108efb:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108efe:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108f01:	eb 2f                	jmp    f0108f32 <calculate_required_frames+0xdd>
		uint32 *ptr2 = NULL ;
f0108f03:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
		int t_inmem = get_page_table(page_directory , i ,&ptr2);
f0108f0a:	83 ec 04             	sub    $0x4,%esp
f0108f0d:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0108f10:	50                   	push   %eax
f0108f11:	ff 75 ec             	pushl  -0x14(%ebp)
f0108f14:	ff 75 08             	pushl  0x8(%ebp)
f0108f17:	e8 73 db ff ff       	call   f0106a8f <get_page_table>
f0108f1c:	83 c4 10             	add    $0x10,%esp
f0108f1f:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if(t_inmem != TABLE_IN_MEMORY){
f0108f22:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0108f26:	74 03                	je     f0108f2b <calculate_required_frames+0xd6>
					sum_table_required++ ;
f0108f28:	ff 45 f0             	incl   -0x10(%ebp)
		if (f == NULL ){
				sum_page_required++;
			}
		}
		uint32 x = start_address_required =ROUNDDOWN(sva , PAGE_SIZE*1024);
		for(i = x ; i < end_address_required ; i += PAGE_SIZE*1024){
f0108f2b:	81 45 ec 00 00 40 00 	addl   $0x400000,-0x14(%ebp)
f0108f32:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108f35:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0108f38:	72 c9                	jb     f0108f03 <calculate_required_frames+0xae>
		int t_inmem = get_page_table(page_directory , i ,&ptr2);
		if(t_inmem != TABLE_IN_MEMORY){
					sum_table_required++ ;
			  }
		}
	return sum_page_required + sum_table_required ;
f0108f3a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108f3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108f40:	01 d0                	add    %edx,%eax


	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_required_frames
	// Write your code here, remove the panic and write your code
//	panic("calculate_required_frames() is not implemented yet...!!");
}
f0108f42:	c9                   	leave  
f0108f43:	c3                   	ret    

f0108f44 <allocate_user_mem>:

//=====================================
// 1) ALLOCATE USER MEMORY:
//=====================================
void allocate_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108f44:	55                   	push   %ebp
f0108f45:	89 e5                	mov    %esp,%ebp
f0108f47:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("allocate_user_mem() is not implemented yet...!!");
f0108f4a:	83 ec 04             	sub    $0x4,%esp
f0108f4d:	68 a0 64 13 f0       	push   $0xf01364a0
f0108f52:	68 16 01 00 00       	push   $0x116
f0108f57:	68 83 64 13 f0       	push   $0xf0136483
f0108f5c:	e8 a4 72 ff ff       	call   f0100205 <_panic>

f0108f61 <free_user_mem>:

//=====================================
// 2) FREE USER MEMORY:
//=====================================
void free_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108f61:	55                   	push   %ebp
f0108f62:	89 e5                	mov    %esp,%ebp
f0108f64:	83 ec 28             	sub    $0x28,%esp
		//1. Free ALL pages of the given range from the Page File
		//2. Free ONLY pages that are resident in the working set from the memory

		//uint32 start=ROUNDDOWN(virtual_address,PAGE_SIZE);
		//uint32 end=ROUNDUP(virtual_address+size,PAGE_SIZE);
		for(int i=virtual_address;i<virtual_address+size;i+=PAGE_SIZE){
f0108f67:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108f6a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108f6d:	eb 41                	jmp    f0108fb0 <free_user_mem+0x4f>
			unmap_frame(e->env_page_directory,i);
f0108f6f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108f72:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f75:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108f78:	83 ec 08             	sub    $0x8,%esp
f0108f7b:	52                   	push   %edx
f0108f7c:	50                   	push   %eax
f0108f7d:	e8 d2 de ff ff       	call   f0106e54 <unmap_frame>
f0108f82:	83 c4 10             	add    $0x10,%esp
			env_page_ws_invalidate(e, i);
f0108f85:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108f88:	83 ec 08             	sub    $0x8,%esp
f0108f8b:	50                   	push   %eax
f0108f8c:	ff 75 08             	pushl  0x8(%ebp)
f0108f8f:	e8 89 f0 ff ff       	call   f010801d <env_page_ws_invalidate>
f0108f94:	83 c4 10             	add    $0x10,%esp
			pf_remove_env_page(e, i);
f0108f97:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108f9a:	83 ec 08             	sub    $0x8,%esp
f0108f9d:	50                   	push   %eax
f0108f9e:	ff 75 08             	pushl  0x8(%ebp)
f0108fa1:	e8 2f ab ff ff       	call   f0103ad5 <pf_remove_env_page>
f0108fa6:	83 c4 10             	add    $0x10,%esp
		//1. Free ALL pages of the given range from the Page File
		//2. Free ONLY pages that are resident in the working set from the memory

		//uint32 start=ROUNDDOWN(virtual_address,PAGE_SIZE);
		//uint32 end=ROUNDUP(virtual_address+size,PAGE_SIZE);
		for(int i=virtual_address;i<virtual_address+size;i+=PAGE_SIZE){
f0108fa9:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0108fb0:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108fb3:	8b 45 10             	mov    0x10(%ebp),%eax
f0108fb6:	01 c2                	add    %eax,%edx
f0108fb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108fbb:	39 c2                	cmp    %eax,%edx
f0108fbd:	77 b0                	ja     f0108f6f <free_user_mem+0xe>
			pf_remove_env_page(e, i);
		}

		//3. Removes ONLY the empty page tables (i.e. not used) (no pages are mapped in the table)

		for(int i=virtual_address;i<virtual_address+size;i+=PAGE_SIZE)
f0108fbf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108fc2:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108fc5:	e9 8f 00 00 00       	jmp    f0109059 <free_user_mem+0xf8>
		{
			uint32 *ptr_page_table = NULL;
f0108fca:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			int ret = get_page_table(e->env_page_directory, i, &ptr_page_table);
f0108fd1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0108fd4:	8b 45 08             	mov    0x8(%ebp),%eax
f0108fd7:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108fda:	83 ec 04             	sub    $0x4,%esp
f0108fdd:	8d 4d e0             	lea    -0x20(%ebp),%ecx
f0108fe0:	51                   	push   %ecx
f0108fe1:	52                   	push   %edx
f0108fe2:	50                   	push   %eax
f0108fe3:	e8 a7 da ff ff       	call   f0106a8f <get_page_table>
f0108fe8:	83 c4 10             	add    $0x10,%esp
f0108feb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			int c=0;
f0108fee:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
			if(ret!=TABLE_NOT_EXIST)
f0108ff5:	83 7d e4 01          	cmpl   $0x1,-0x1c(%ebp)
f0108ff9:	74 57                	je     f0109052 <free_user_mem+0xf1>
			{
				for(int j=0;j<1024;j++)
f0108ffb:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f0109002:	eb 17                	jmp    f010901b <free_user_mem+0xba>
				{
					if(ptr_page_table[j]==0)
f0109004:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0109007:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010900a:	c1 e2 02             	shl    $0x2,%edx
f010900d:	01 d0                	add    %edx,%eax
f010900f:	8b 00                	mov    (%eax),%eax
f0109011:	85 c0                	test   %eax,%eax
f0109013:	75 03                	jne    f0109018 <free_user_mem+0xb7>
					{
						c++;
f0109015:	ff 45 ec             	incl   -0x14(%ebp)
			uint32 *ptr_page_table = NULL;
			int ret = get_page_table(e->env_page_directory, i, &ptr_page_table);
			int c=0;
			if(ret!=TABLE_NOT_EXIST)
			{
				for(int j=0;j<1024;j++)
f0109018:	ff 45 e8             	incl   -0x18(%ebp)
f010901b:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
f0109022:	7e e0                	jle    f0109004 <free_user_mem+0xa3>
					{
						c++;
					}
				}
				//cprintf("c value = %d \n", c);
				if(c==1024)
f0109024:	81 7d ec 00 04 00 00 	cmpl   $0x400,-0x14(%ebp)
f010902b:	75 25                	jne    f0109052 <free_user_mem+0xf1>
				{
					//cprintf("free table \n");
					kfree(ptr_page_table);
f010902d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0109030:	83 ec 0c             	sub    $0xc,%esp
f0109033:	50                   	push   %eax
f0109034:	e8 3e eb ff ff       	call   f0107b77 <kfree>
f0109039:	83 c4 10             	add    $0x10,%esp
					pd_clear_page_dir_entry(e->env_page_directory,i);
f010903c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010903f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109042:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109045:	83 ec 08             	sub    $0x8,%esp
f0109048:	52                   	push   %edx
f0109049:	50                   	push   %eax
f010904a:	e8 58 ef ff ff       	call   f0107fa7 <pd_clear_page_dir_entry>
f010904f:	83 c4 10             	add    $0x10,%esp
			pf_remove_env_page(e, i);
		}

		//3. Removes ONLY the empty page tables (i.e. not used) (no pages are mapped in the table)

		for(int i=virtual_address;i<virtual_address+size;i+=PAGE_SIZE)
f0109052:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0109059:	8b 55 0c             	mov    0xc(%ebp),%edx
f010905c:	8b 45 10             	mov    0x10(%ebp),%eax
f010905f:	01 c2                	add    %eax,%edx
f0109061:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109064:	39 c2                	cmp    %eax,%edx
f0109066:	0f 87 5e ff ff ff    	ja     f0108fca <free_user_mem+0x69>

	//This function should:
	//1. Free ALL pages of the given range from the Page File
	//2. Free ONLY pages that are resident in the working set from the memory
	//3. Removes ONLY the empty page tables (i.e. not used) (no pages are mapped in the table)
}
f010906c:	90                   	nop
f010906d:	c9                   	leave  
f010906e:	c3                   	ret    

f010906f <__free_user_mem_with_buffering>:

//=====================================
// 2) FREE USER MEMORY (BUFFERING):
//=====================================
void __free_user_mem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f010906f:	55                   	push   %ebp
f0109070:	89 e5                	mov    %esp,%ebp
f0109072:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("__free_user_mem_with_buffering() is not implemented yet...!!");
f0109075:	83 ec 04             	sub    $0x4,%esp
f0109078:	68 d0 64 13 f0       	push   $0xf01364d0
f010907d:	68 52 01 00 00       	push   $0x152
f0109082:	68 83 64 13 f0       	push   $0xf0136483
f0109087:	e8 79 71 ff ff       	call   f0100205 <_panic>

f010908c <move_user_mem>:

//=====================================
// 3) MOVE USER MEMORY:
//=====================================
void move_user_mem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010908c:	55                   	push   %ebp
f010908d:	89 e5                	mov    %esp,%ebp
f010908f:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [USER HEAP - KERNEL SIDE] move_user_mem
	//your code is here, remove the panic and write your code
	panic("move_user_mem() is not implemented yet...!!");
f0109092:	83 ec 04             	sub    $0x4,%esp
f0109095:	68 10 65 13 f0       	push   $0xf0136510
f010909a:	68 62 01 00 00       	push   $0x162
f010909f:	68 83 64 13 f0       	push   $0xf0136483
f01090a4:	e8 5c 71 ff ff       	call   f0100205 <_panic>

f01090a9 <env_create>:
//===============================
// 1) CREATE NEW ENV & LOAD IT:
//===============================
// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f01090a9:	55                   	push   %ebp
f01090aa:	89 e5                	mov    %esp,%ebp
f01090ac:	57                   	push   %edi
f01090ad:	56                   	push   %esi
f01090ae:	53                   	push   %ebx
f01090af:	81 ec ec 00 00 00    	sub    $0xec,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f01090b5:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f01090bc:	83 ec 0c             	sub    $0xc,%esp
f01090bf:	ff 75 08             	pushl  0x8(%ebp)
f01090c2:	e8 0b 22 00 00       	call   f010b2d2 <get_user_program_info>
f01090c7:	83 c4 10             	add    $0x10,%esp
f01090ca:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(ptr_user_program_info == 0) return NULL;
f01090cd:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f01090d1:	75 0a                	jne    f01090dd <env_create+0x34>
f01090d3:	b8 00 00 00 00       	mov    $0x0,%eax
f01090d8:	e9 cd 0b 00 00       	jmp    f0109caa <env_create+0xc01>
	ptr_program_start = ptr_user_program_info->ptr_start ;
f01090dd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01090e0:	8b 40 08             	mov    0x8(%eax),%eax
f01090e3:	89 45 b8             	mov    %eax,-0x48(%ebp)


	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f01090e6:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%ebp)
f01090ed:	00 00 00 
	if(allocate_environment(&e) < 0)
f01090f0:	83 ec 0c             	sub    $0xc,%esp
f01090f3:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f01090f9:	50                   	push   %eax
f01090fa:	e8 d3 0e 00 00       	call   f0109fd2 <allocate_environment>
f01090ff:	83 c4 10             	add    $0x10,%esp
f0109102:	85 c0                	test   %eax,%eax
f0109104:	79 0a                	jns    f0109110 <env_create+0x67>
	{
		return 0;
f0109106:	b8 00 00 00 00       	mov    $0x0,%eax
f010910b:	e9 9a 0b 00 00       	jmp    f0109caa <env_create+0xc01>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f0109110:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109113:	8b 00                	mov    (%eax),%eax
f0109115:	83 ec 0c             	sub    $0xc,%esp
f0109118:	50                   	push   %eax
f0109119:	e8 ea 84 02 00       	call   f0131608 <strlen>
f010911e:	83 c4 10             	add    $0x10,%esp
f0109121:	83 f8 3f             	cmp    $0x3f,%eax
f0109124:	7f 20                	jg     f0109146 <env_create+0x9d>
		strcpy(e->prog_name, ptr_user_program_info->name);
f0109126:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109129:	8b 00                	mov    (%eax),%eax
f010912b:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109131:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f0109137:	83 ec 08             	sub    $0x8,%esp
f010913a:	50                   	push   %eax
f010913b:	52                   	push   %edx
f010913c:	e8 16 85 02 00       	call   f0131657 <strcpy>
f0109141:	83 c4 10             	add    $0x10,%esp
f0109144:	eb 20                	jmp    f0109166 <env_create+0xbd>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f0109146:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109149:	8b 00                	mov    (%eax),%eax
f010914b:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109151:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f0109157:	83 ec 04             	sub    $0x4,%esp
f010915a:	6a 3f                	push   $0x3f
f010915c:	50                   	push   %eax
f010915d:	52                   	push   %edx
f010915e:	e8 22 85 02 00       	call   f0131685 <strncpy>
f0109163:	83 c4 10             	add    $0x10,%esp
	//REMEMBER: "allocate_frame" should always return a free frame
	uint32* ptr_user_page_directory;
	unsigned int phys_user_page_directory;
#if USE_KHEAP
	{
		ptr_user_page_directory = create_user_directory();
f0109166:	e8 6d 0f 00 00       	call   f010a0d8 <create_user_directory>
f010916b:	89 45 b0             	mov    %eax,-0x50(%ebp)
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
f010916e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0109171:	83 ec 0c             	sub    $0xc,%esp
f0109174:	50                   	push   %eax
f0109175:	e8 51 eb ff ff       	call   f0107ccb <kheap_physical_address>
f010917a:	83 c4 10             	add    $0x10,%esp
f010917d:	89 45 ac             	mov    %eax,-0x54(%ebp)
#endif
	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f0109180:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109186:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109189:	89 50 74             	mov    %edx,0x74(%eax)

	//2020
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010918c:	83 ec 0c             	sub    $0xc,%esp
f010918f:	6a 02                	push   $0x2
f0109191:	e8 f3 4d 00 00       	call   f010df89 <isPageReplacmentAlgorithmLRU>
f0109196:	83 c4 10             	add    $0x10,%esp
f0109199:	85 c0                	test   %eax,%eax
f010919b:	74 21                	je     f01091be <env_create+0x115>
	{
		e->SecondListSize = LRU_second_list_size;
f010919d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01091a3:	8b 55 10             	mov    0x10(%ebp),%edx
f01091a6:	89 90 ec 05 00 00    	mov    %edx,0x5ec(%eax)
		e->ActiveListSize = page_WS_size - LRU_second_list_size;
f01091ac:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01091b2:	8b 55 0c             	mov    0xc(%ebp),%edx
f01091b5:	2b 55 10             	sub    0x10(%ebp),%edx
f01091b8:	89 90 e8 05 00 00    	mov    %edx,0x5e8(%eax)
	}

	//2018
	if (percent_WS_pages_to_remove == 0)	// If not entered as input, 0 as default value
f01091be:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f01091c2:	75 12                	jne    f01091d6 <env_create+0x12d>
		e->percentage_of_WS_pages_to_be_removed = DEFAULT_PERCENT_OF_PAGE_WS_TO_REMOVE;
f01091c4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01091ca:	c7 80 a0 05 00 00 0a 	movl   $0xa,0x5a0(%eax)
f01091d1:	00 00 00 
f01091d4:	eb 0f                	jmp    f01091e5 <env_create+0x13c>
	else
		e->percentage_of_WS_pages_to_be_removed = percent_WS_pages_to_remove;
f01091d6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01091dc:	8b 55 14             	mov    0x14(%ebp),%edx
f01091df:	89 90 a0 05 00 00    	mov    %edx,0x5a0(%eax)

	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f01091e5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01091eb:	83 ec 04             	sub    $0x4,%esp
f01091ee:	ff 75 ac             	pushl  -0x54(%ebp)
f01091f1:	ff 75 b0             	pushl  -0x50(%ebp)
f01091f4:	50                   	push   %eax
f01091f5:	e8 fa 15 00 00       	call   f010a7f4 <initialize_environment>
f01091fa:	83 c4 10             	add    $0x10,%esp

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f01091fd:	0f 20 d8             	mov    %cr3,%eax
f0109200:	89 45 a0             	mov    %eax,-0x60(%ebp)
	return val;
f0109203:	8b 45 a0             	mov    -0x60(%ebp),%eax
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[6] switch to user page directory
	// Hint: use rcr3() and lcr3()
	uint32 kern_phys_pgdir = rcr3() ;
f0109206:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	lcr3(e->env_cr3) ;
f0109209:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010920f:	8b 40 60             	mov    0x60(%eax),%eax
f0109212:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0109218:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f010921e:	0f 22 d8             	mov    %eax,%cr3

	//[7] load each program segment into user virtual space
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f0109221:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int segment_counter=0;
f0109228:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f010922f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109235:	8b 40 74             	mov    0x74(%eax),%eax
f0109238:	48                   	dec    %eax
f0109239:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 lastTableNumber=0xffffffff;
f010923c:	c7 85 48 ff ff ff ff 	movl   $0xffffffff,-0xb8(%ebp)
f0109243:	ff ff ff 

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0109246:	8d 85 08 ff ff ff    	lea    -0xf8(%ebp),%eax
f010924c:	83 ec 08             	sub    $0x8,%esp
f010924f:	ff 75 b8             	pushl  -0x48(%ebp)
f0109252:	50                   	push   %eax
f0109253:	e8 af 1d 00 00       	call   f010b007 <PROGRAM_SEGMENT_FIRST>
f0109258:	83 c4 0c             	add    $0xc,%esp
f010925b:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0109261:	8d 95 08 ff ff ff    	lea    -0xf8(%ebp),%edx
f0109267:	b9 05 00 00 00       	mov    $0x5,%ecx
f010926c:	89 c7                	mov    %eax,%edi
f010926e:	89 d6                	mov    %edx,%esi
f0109270:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0109272:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0109278:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010927b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010927e:	8b 40 10             	mov    0x10(%eax),%eax
f0109281:	83 f8 ff             	cmp    $0xffffffff,%eax
f0109284:	75 07                	jne    f010928d <env_create+0x1e4>
f0109286:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f010928d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109290:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0109293:	e9 15 03 00 00       	jmp    f01095ad <env_create+0x504>
	{
		segment_counter++;
f0109298:	ff 45 e0             	incl   -0x20(%ebp)
		LOG_STRING("===============================================================================");
		LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
				seg->size_in_memory, seg->virtual_address));
		LOG_STRING("===============================================================================");

		uint32 allocated_pages=0;
f010929b:	c7 85 30 ff ff ff 00 	movl   $0x0,-0xd0(%ebp)
f01092a2:	00 00 00 
		program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f01092a5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01092ab:	83 ec 0c             	sub    $0xc,%esp
f01092ae:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f01092b4:	52                   	push   %edx
f01092b5:	ff 75 dc             	pushl  -0x24(%ebp)
f01092b8:	8d 95 30 ff ff ff    	lea    -0xd0(%ebp),%edx
f01092be:	52                   	push   %edx
f01092bf:	ff 75 e4             	pushl  -0x1c(%ebp)
f01092c2:	50                   	push   %eax
f01092c3:	e8 4b 0e 00 00       	call   f010a113 <program_segment_alloc_map_copy_workingset>
f01092c8:	83 c4 20             	add    $0x20,%esp

		remaining_ws_pages -= allocated_pages;
f01092cb:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01092d1:	29 45 dc             	sub    %eax,-0x24(%ebp)
		LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
		LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


		///[1] temporary initialize 1st page in memory then writing it on page file
		uint32 dataSrc_va = (uint32) seg->ptr_start;
f01092d4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01092d7:	8b 00                	mov    (%eax),%eax
f01092d9:	89 45 9c             	mov    %eax,-0x64(%ebp)
		uint32 seg_va = (uint32) seg->virtual_address ;
f01092dc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01092df:	8b 40 0c             	mov    0xc(%eax),%eax
f01092e2:	89 45 98             	mov    %eax,-0x68(%ebp)

		uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f01092e5:	8b 45 98             	mov    -0x68(%ebp),%eax
f01092e8:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01092eb:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01092ee:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01092f3:	89 45 90             	mov    %eax,-0x70(%ebp)
		uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f01092f6:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f01092fd:	8b 55 98             	mov    -0x68(%ebp),%edx
f0109300:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0109303:	01 d0                	add    %edx,%eax
f0109305:	48                   	dec    %eax
f0109306:	89 45 88             	mov    %eax,-0x78(%ebp)
f0109309:	8b 45 88             	mov    -0x78(%ebp),%eax
f010930c:	ba 00 00 00 00       	mov    $0x0,%edx
f0109311:	f7 75 8c             	divl   -0x74(%ebp)
f0109314:	8b 45 88             	mov    -0x78(%ebp),%eax
f0109317:	29 d0                	sub    %edx,%eax
f0109319:	89 45 84             	mov    %eax,-0x7c(%ebp)
		uint32 offset_first_page = seg_va  - start_first_page ;
f010931c:	8b 45 98             	mov    -0x68(%ebp),%eax
f010931f:	2b 45 90             	sub    -0x70(%ebp),%eax
f0109322:	89 45 80             	mov    %eax,-0x80(%ebp)

		memset(ptr_temp_page , 0, PAGE_SIZE);
f0109325:	a1 80 27 86 f0       	mov    0xf0862780,%eax
f010932a:	83 ec 04             	sub    $0x4,%esp
f010932d:	68 00 10 00 00       	push   $0x1000
f0109332:	6a 00                	push   $0x0
f0109334:	50                   	push   %eax
f0109335:	e8 bc 84 02 00       	call   f01317f6 <memset>
f010933a:	83 c4 10             	add    $0x10,%esp
		uint8 *src_ptr =  (uint8*) dataSrc_va;
f010933d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0109340:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f0109343:	8b 15 80 27 86 f0    	mov    0xf0862780,%edx
f0109349:	8b 45 80             	mov    -0x80(%ebp),%eax
f010934c:	01 d0                	add    %edx,%eax
f010934e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0109351:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109354:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109357:	eb 13                	jmp    f010936c <env_create+0x2c3>
		{
			*dst_ptr = *src_ptr ;
f0109359:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010935c:	8a 10                	mov    (%eax),%dl
f010935e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109361:	88 10                	mov    %dl,(%eax)

		memset(ptr_temp_page , 0, PAGE_SIZE);
		uint8 *src_ptr =  (uint8*) dataSrc_va;
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0109363:	ff 45 cc             	incl   -0x34(%ebp)
f0109366:	ff 45 d4             	incl   -0x2c(%ebp)
f0109369:	ff 45 d0             	incl   -0x30(%ebp)
f010936c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010936f:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0109372:	72 e5                	jb     f0109359 <env_create+0x2b0>
		{
			*dst_ptr = *src_ptr ;
		}

		if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0109374:	8b 15 80 27 86 f0    	mov    0xf0862780,%edx
f010937a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109380:	83 ec 04             	sub    $0x4,%esp
f0109383:	52                   	push   %edx
f0109384:	ff 75 90             	pushl  -0x70(%ebp)
f0109387:	50                   	push   %eax
f0109388:	e8 66 a3 ff ff       	call   f01036f3 <pf_add_env_page>
f010938d:	83 c4 10             	add    $0x10,%esp
f0109390:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109393:	75 17                	jne    f01093ac <env_create+0x303>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109395:	83 ec 04             	sub    $0x4,%esp
f0109398:	68 3c 65 13 f0       	push   $0xf013653c
f010939d:	68 e1 00 00 00       	push   $0xe1
f01093a2:	68 81 65 13 f0       	push   $0xf0136581
f01093a7:	e8 59 6e ff ff       	call   f0100205 <_panic>
		//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f01093ac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01093af:	8b 50 04             	mov    0x4(%eax),%edx
f01093b2:	8b 45 98             	mov    -0x68(%ebp),%eax
f01093b5:	01 d0                	add    %edx,%eax
f01093b7:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01093bd:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01093c3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01093c8:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
		uint32 end_last_page = seg_va  + seg->size_in_file;
f01093ce:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01093d1:	8b 50 04             	mov    0x4(%eax),%edx
f01093d4:	8b 45 98             	mov    -0x68(%ebp),%eax
f01093d7:	01 d0                	add    %edx,%eax
f01093d9:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f01093df:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01093e2:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01093e5:	eb 43                	jmp    f010942a <env_create+0x381>
		{
			if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f01093e7:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01093ea:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01093f0:	83 ec 04             	sub    $0x4,%esp
f01093f3:	ff 75 d4             	pushl  -0x2c(%ebp)
f01093f6:	52                   	push   %edx
f01093f7:	50                   	push   %eax
f01093f8:	e8 f6 a2 ff ff       	call   f01036f3 <pf_add_env_page>
f01093fd:	83 c4 10             	add    $0x10,%esp
f0109400:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109403:	75 17                	jne    f010941c <env_create+0x373>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109405:	83 ec 04             	sub    $0x4,%esp
f0109408:	68 3c 65 13 f0       	push   $0xf013653c
f010940d:	68 ee 00 00 00       	push   $0xee
f0109412:	68 81 65 13 f0       	push   $0xf0136581
f0109417:	e8 e9 6d ff ff       	call   f0100205 <_panic>
		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
		uint32 end_last_page = seg_va  + seg->size_in_file;

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f010941c:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0109423:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f010942a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010942d:	3b 85 78 ff ff ff    	cmp    -0x88(%ebp),%eax
f0109433:	72 b2                	jb     f01093e7 <env_create+0x33e>
		}
		//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
f0109435:	a1 80 27 86 f0       	mov    0xf0862780,%eax
f010943a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		memset(dst_ptr, 0, PAGE_SIZE);
f010943d:	83 ec 04             	sub    $0x4,%esp
f0109440:	68 00 10 00 00       	push   $0x1000
f0109445:	6a 00                	push   $0x0
f0109447:	ff 75 d0             	pushl  -0x30(%ebp)
f010944a:	e8 a7 83 02 00       	call   f01317f6 <memset>
f010944f:	83 c4 10             	add    $0x10,%esp

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0109452:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0109458:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010945b:	eb 13                	jmp    f0109470 <env_create+0x3c7>
		{
			*dst_ptr = *src_ptr;
f010945d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0109460:	8a 10                	mov    (%eax),%dl
f0109462:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109465:	88 10                	mov    %dl,(%eax)
		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
		memset(dst_ptr, 0, PAGE_SIZE);

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0109467:	ff 45 cc             	incl   -0x34(%ebp)
f010946a:	ff 45 d4             	incl   -0x2c(%ebp)
f010946d:	ff 45 d0             	incl   -0x30(%ebp)
f0109470:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109473:	3b 85 74 ff ff ff    	cmp    -0x8c(%ebp),%eax
f0109479:	72 e2                	jb     f010945d <env_create+0x3b4>
		{
			*dst_ptr = *src_ptr;
		}
		if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f010947b:	8b 15 80 27 86 f0    	mov    0xf0862780,%edx
f0109481:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109487:	83 ec 04             	sub    $0x4,%esp
f010948a:	52                   	push   %edx
f010948b:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0109491:	50                   	push   %eax
f0109492:	e8 5c a2 ff ff       	call   f01036f3 <pf_add_env_page>
f0109497:	83 c4 10             	add    $0x10,%esp
f010949a:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010949d:	75 17                	jne    f01094b6 <env_create+0x40d>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f010949f:	83 ec 04             	sub    $0x4,%esp
f01094a2:	68 3c 65 13 f0       	push   $0xf013653c
f01094a7:	68 fd 00 00 00       	push   $0xfd
f01094ac:	68 81 65 13 f0       	push   $0xf0136581
f01094b1:	e8 4f 6d ff ff       	call   f0100205 <_panic>

		//LOG_STRING(" -------------------- PAGE FILE: last page is written");

		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f01094b6:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01094bd:	10 00 00 
f01094c0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01094c3:	8b 50 04             	mov    0x4(%eax),%edx
f01094c6:	8b 45 98             	mov    -0x68(%ebp),%eax
f01094c9:	01 c2                	add    %eax,%edx
f01094cb:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01094d1:	01 d0                	add    %edx,%eax
f01094d3:	48                   	dec    %eax
f01094d4:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01094da:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01094e0:	ba 00 00 00 00       	mov    $0x0,%edx
f01094e5:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01094eb:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01094f1:	29 d0                	sub    %edx,%eax
f01094f3:	89 45 c8             	mov    %eax,-0x38(%ebp)
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f01094f6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01094f9:	8b 50 08             	mov    0x8(%eax),%edx
f01094fc:	8b 45 98             	mov    -0x68(%ebp),%eax
f01094ff:	01 d0                	add    %edx,%eax
f0109501:	2b 45 c8             	sub    -0x38(%ebp),%eax
f0109504:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f010950a:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0109511:	eb 41                	jmp    f0109554 <env_create+0x4ab>
		{
			if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f0109513:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109519:	83 ec 04             	sub    $0x4,%esp
f010951c:	6a 01                	push   $0x1
f010951e:	ff 75 c8             	pushl  -0x38(%ebp)
f0109521:	50                   	push   %eax
f0109522:	e8 9b a0 ff ff       	call   f01035c2 <pf_add_empty_env_page>
f0109527:	83 c4 10             	add    $0x10,%esp
f010952a:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010952d:	75 17                	jne    f0109546 <env_create+0x49d>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f010952f:	83 ec 04             	sub    $0x4,%esp
f0109532:	68 3c 65 13 f0       	push   $0xf013653c
f0109537:	68 0a 01 00 00       	push   $0x10a
f010953c:	68 81 65 13 f0       	push   $0xf0136581
f0109541:	e8 bf 6c ff ff       	call   f0100205 <_panic>
		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0109546:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f010954d:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f0109554:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f010955b:	10 00 00 
f010955e:	8b 95 68 ff ff ff    	mov    -0x98(%ebp),%edx
f0109564:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f010956a:	01 d0                	add    %edx,%eax
f010956c:	48                   	dec    %eax
f010956d:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0109573:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0109579:	ba 00 00 00 00       	mov    $0x0,%edx
f010957e:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0109584:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f010958a:	29 d0                	sub    %edx,%eax
f010958c:	89 c2                	mov    %eax,%edx
f010958e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109591:	39 c2                	cmp    %eax,%edx
f0109593:	0f 87 7a ff ff ff    	ja     f0109513 <env_create+0x46a>
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
	int segment_counter=0;
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
	uint32 lastTableNumber=0xffffffff;

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0109599:	83 ec 08             	sub    $0x8,%esp
f010959c:	ff 75 b8             	pushl  -0x48(%ebp)
f010959f:	ff 75 e4             	pushl  -0x1c(%ebp)
f01095a2:	e8 55 19 00 00       	call   f010aefc <PROGRAM_SEGMENT_NEXT>
f01095a7:	83 c4 10             	add    $0x10,%esp
f01095aa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01095ad:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01095b1:	0f 85 e1 fc ff ff    	jne    f0109298 <env_create+0x1ef>
		}
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
f01095b7:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
	for(;i<(e->page_WS_max_size); i++)
f01095be:	e9 9d 00 00 00       	jmp    f0109660 <env_create+0x5b7>
	{
		if(e->ptr_pageWorkingSet[i].empty == 0)
f01095c3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095c9:	8b 48 78             	mov    0x78(%eax),%ecx
f01095cc:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01095cf:	89 d0                	mov    %edx,%eax
f01095d1:	01 c0                	add    %eax,%eax
f01095d3:	01 d0                	add    %edx,%eax
f01095d5:	c1 e0 03             	shl    $0x3,%eax
f01095d8:	01 c8                	add    %ecx,%eax
f01095da:	8a 40 04             	mov    0x4(%eax),%al
f01095dd:	84 c0                	test   %al,%al
f01095df:	75 7c                	jne    f010965d <env_create+0x5b4>
		{
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f01095e1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095e7:	8b 48 78             	mov    0x78(%eax),%ecx
f01095ea:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01095ed:	89 d0                	mov    %edx,%eax
f01095ef:	01 c0                	add    %eax,%eax
f01095f1:	01 d0                	add    %edx,%eax
f01095f3:	c1 e0 03             	shl    $0x3,%eax
f01095f6:	01 c8                	add    %ecx,%eax
f01095f8:	8b 00                	mov    (%eax),%eax
f01095fa:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
			uint32* ptr_page_table;

			//Here, page tables of all working set pages should be exist in memory
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
f0109600:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109606:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109609:	83 ec 04             	sub    $0x4,%esp
f010960c:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f0109612:	52                   	push   %edx
f0109613:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
f0109619:	50                   	push   %eax
f010961a:	e8 70 d4 ff ff       	call   f0106a8f <get_page_table>
f010961f:	83 c4 10             	add    $0x10,%esp
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f0109622:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0109628:	8b 95 5c ff ff ff    	mov    -0xa4(%ebp),%edx
f010962e:	c1 ea 0c             	shr    $0xc,%edx
f0109631:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0109637:	c1 e2 02             	shl    $0x2,%edx
f010963a:	01 d0                	add    %edx,%eax
f010963c:	8b 95 2c ff ff ff    	mov    -0xd4(%ebp),%edx
f0109642:	8b 8d 5c ff ff ff    	mov    -0xa4(%ebp),%ecx
f0109648:	c1 e9 0c             	shr    $0xc,%ecx
f010964b:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0109651:	c1 e1 02             	shl    $0x2,%ecx
f0109654:	01 ca                	add    %ecx,%edx
f0109656:	8b 12                	mov    (%edx),%edx
f0109658:	83 e2 bf             	and    $0xffffffbf,%edx
f010965b:	89 10                	mov    %edx,(%eax)
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
	for(;i<(e->page_WS_max_size); i++)
f010965d:	ff 45 c4             	incl   -0x3c(%ebp)
f0109660:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109666:	8b 50 74             	mov    0x74(%eax),%edx
f0109669:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010966c:	39 c2                	cmp    %eax,%edx
f010966e:	0f 87 4f ff ff ff    	ja     f01095c3 <env_create+0x51a>
	//unsigned int * ptr = (unsigned int * )0x801084;
	//LOG_STATMENT(cprintf("contents at address %x=%x",0x801084, *ptr));

	//[8] now set the entry point of the environment
	//Hint: use set_environment_entry_point()
	set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f0109674:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109677:	8b 50 08             	mov    0x8(%eax),%edx
f010967a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109680:	83 ec 08             	sub    $0x8,%esp
f0109683:	52                   	push   %edx
f0109684:	50                   	push   %eax
f0109685:	e8 bc 16 00 00       	call   f010ad46 <set_environment_entry_point>
f010968a:	83 c4 10             	add    $0x10,%esp

	//[9] Allocate and map one page for the program's initial stack
	// at virtual address USTACKTOP - PAGE_SIZE.
	// we assume that the stack is counted in the environment working set

	e->initNumStackPages = 1;
f010968d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109693:	c7 80 58 05 00 00 01 	movl   $0x1,0x558(%eax)
f010969a:	00 00 00 

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f010969d:	c7 85 58 ff ff ff 00 	movl   $0xeebfd000,-0xa8(%ebp)
f01096a4:	d0 bf ee 

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
f01096a7:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f01096ae:	e9 53 05 00 00       	jmp    f0109c06 <env_create+0xb5d>
	{
		struct FrameInfo *pp = NULL;
f01096b3:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f01096ba:	00 00 00 
		allocate_frame(&pp);
f01096bd:	83 ec 0c             	sub    $0xc,%esp
f01096c0:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f01096c6:	50                   	push   %eax
f01096c7:	e8 04 d2 ff ff       	call   f01068d0 <allocate_frame>
f01096cc:	83 c4 10             	add    $0x10,%esp

		loadtime_map_frame(e->env_page_directory, pp, stackVa, PERM_USER | PERM_WRITEABLE);
f01096cf:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f01096d5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096db:	8b 40 5c             	mov    0x5c(%eax),%eax
f01096de:	6a 06                	push   $0x6
f01096e0:	ff 75 c0             	pushl  -0x40(%ebp)
f01096e3:	52                   	push   %edx
f01096e4:	50                   	push   %eax
f01096e5:	e8 f1 d7 ff ff       	call   f0106edb <loadtime_map_frame>
f01096ea:	83 c4 10             	add    $0x10,%esp

		//initialize new page by 0's
		memset((void*)stackVa, 0, PAGE_SIZE);
f01096ed:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01096f0:	83 ec 04             	sub    $0x4,%esp
f01096f3:	68 00 10 00 00       	push   $0x1000
f01096f8:	6a 00                	push   $0x0
f01096fa:	50                   	push   %eax
f01096fb:	e8 f6 80 02 00       	call   f01317f6 <memset>
f0109700:	83 c4 10             	add    $0x10,%esp

		//now add it to the working set and the page table
		{
			env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
f0109703:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109709:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010970f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109715:	83 ec 04             	sub    $0x4,%esp
f0109718:	ff 75 c0             	pushl  -0x40(%ebp)
f010971b:	52                   	push   %edx
f010971c:	50                   	push   %eax
f010971d:	e8 66 e9 ff ff       	call   f0108088 <env_page_ws_set_entry>
f0109722:	83 c4 10             	add    $0x10,%esp

			//2020
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109725:	83 ec 0c             	sub    $0xc,%esp
f0109728:	6a 02                	push   $0x2
f010972a:	e8 5a 48 00 00       	call   f010df89 <isPageReplacmentAlgorithmLRU>
f010972f:	83 c4 10             	add    $0x10,%esp
f0109732:	85 c0                	test   %eax,%eax
f0109734:	0f 84 6b 04 00 00    	je     f0109ba5 <env_create+0xafc>
			{
				LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010973a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109740:	8b 48 78             	mov    0x78(%eax),%ecx
f0109743:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109749:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010974f:	89 d0                	mov    %edx,%eax
f0109751:	01 c0                	add    %eax,%eax
f0109753:	01 d0                	add    %edx,%eax
f0109755:	c1 e0 03             	shl    $0x3,%eax
f0109758:	01 c8                	add    %ecx,%eax
f010975a:	85 c0                	test   %eax,%eax
f010975c:	75 17                	jne    f0109775 <env_create+0x6cc>
f010975e:	83 ec 04             	sub    $0x4,%esp
f0109761:	68 9e 65 13 f0       	push   $0xf013659e
f0109766:	68 41 01 00 00       	push   $0x141
f010976b:	68 81 65 13 f0       	push   $0xf0136581
f0109770:	e8 90 6a ff ff       	call   f0100205 <_panic>
f0109775:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010977b:	8b 48 78             	mov    0x78(%eax),%ecx
f010977e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109784:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010978a:	89 d0                	mov    %edx,%eax
f010978c:	01 c0                	add    %eax,%eax
f010978e:	01 d0                	add    %edx,%eax
f0109790:	c1 e0 03             	shl    $0x3,%eax
f0109793:	01 c8                	add    %ecx,%eax
f0109795:	8b 40 10             	mov    0x10(%eax),%eax
f0109798:	85 c0                	test   %eax,%eax
f010979a:	74 4b                	je     f01097e7 <env_create+0x73e>
f010979c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097a2:	8b 48 78             	mov    0x78(%eax),%ecx
f01097a5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097ab:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01097b1:	89 d0                	mov    %edx,%eax
f01097b3:	01 c0                	add    %eax,%eax
f01097b5:	01 d0                	add    %edx,%eax
f01097b7:	c1 e0 03             	shl    $0x3,%eax
f01097ba:	01 c8                	add    %ecx,%eax
f01097bc:	8b 50 10             	mov    0x10(%eax),%edx
f01097bf:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097c5:	8b 58 78             	mov    0x78(%eax),%ebx
f01097c8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097ce:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01097d4:	89 c8                	mov    %ecx,%eax
f01097d6:	01 c0                	add    %eax,%eax
f01097d8:	01 c8                	add    %ecx,%eax
f01097da:	c1 e0 03             	shl    $0x3,%eax
f01097dd:	01 d8                	add    %ebx,%eax
f01097df:	8b 40 14             	mov    0x14(%eax),%eax
f01097e2:	89 42 14             	mov    %eax,0x14(%edx)
f01097e5:	eb 2f                	jmp    f0109816 <env_create+0x76d>
f01097e7:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01097ed:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097f3:	8b 58 78             	mov    0x78(%eax),%ebx
f01097f6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097fc:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109802:	89 c8                	mov    %ecx,%eax
f0109804:	01 c0                	add    %eax,%eax
f0109806:	01 c8                	add    %ecx,%eax
f0109808:	c1 e0 03             	shl    $0x3,%eax
f010980b:	01 d8                	add    %ebx,%eax
f010980d:	8b 40 14             	mov    0x14(%eax),%eax
f0109810:	89 82 bc 05 00 00    	mov    %eax,0x5bc(%edx)
f0109816:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010981c:	8b 48 78             	mov    0x78(%eax),%ecx
f010981f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109825:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010982b:	89 d0                	mov    %edx,%eax
f010982d:	01 c0                	add    %eax,%eax
f010982f:	01 d0                	add    %edx,%eax
f0109831:	c1 e0 03             	shl    $0x3,%eax
f0109834:	01 c8                	add    %ecx,%eax
f0109836:	8b 40 14             	mov    0x14(%eax),%eax
f0109839:	85 c0                	test   %eax,%eax
f010983b:	74 4b                	je     f0109888 <env_create+0x7df>
f010983d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109843:	8b 48 78             	mov    0x78(%eax),%ecx
f0109846:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010984c:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109852:	89 d0                	mov    %edx,%eax
f0109854:	01 c0                	add    %eax,%eax
f0109856:	01 d0                	add    %edx,%eax
f0109858:	c1 e0 03             	shl    $0x3,%eax
f010985b:	01 c8                	add    %ecx,%eax
f010985d:	8b 50 14             	mov    0x14(%eax),%edx
f0109860:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109866:	8b 58 78             	mov    0x78(%eax),%ebx
f0109869:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010986f:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109875:	89 c8                	mov    %ecx,%eax
f0109877:	01 c0                	add    %eax,%eax
f0109879:	01 c8                	add    %ecx,%eax
f010987b:	c1 e0 03             	shl    $0x3,%eax
f010987e:	01 d8                	add    %ebx,%eax
f0109880:	8b 40 10             	mov    0x10(%eax),%eax
f0109883:	89 42 10             	mov    %eax,0x10(%edx)
f0109886:	eb 2f                	jmp    f01098b7 <env_create+0x80e>
f0109888:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010988e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109894:	8b 58 78             	mov    0x78(%eax),%ebx
f0109897:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010989d:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01098a3:	89 c8                	mov    %ecx,%eax
f01098a5:	01 c0                	add    %eax,%eax
f01098a7:	01 c8                	add    %ecx,%eax
f01098a9:	c1 e0 03             	shl    $0x3,%eax
f01098ac:	01 d8                	add    %ebx,%eax
f01098ae:	8b 40 10             	mov    0x10(%eax),%eax
f01098b1:	89 82 b8 05 00 00    	mov    %eax,0x5b8(%edx)
f01098b7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098bd:	8b 48 78             	mov    0x78(%eax),%ecx
f01098c0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098c6:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01098cc:	89 d0                	mov    %edx,%eax
f01098ce:	01 c0                	add    %eax,%eax
f01098d0:	01 d0                	add    %edx,%eax
f01098d2:	c1 e0 03             	shl    $0x3,%eax
f01098d5:	01 c8                	add    %ecx,%eax
f01098d7:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f01098de:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098e4:	8b 48 78             	mov    0x78(%eax),%ecx
f01098e7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098ed:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01098f3:	89 d0                	mov    %edx,%eax
f01098f5:	01 c0                	add    %eax,%eax
f01098f7:	01 d0                	add    %edx,%eax
f01098f9:	c1 e0 03             	shl    $0x3,%eax
f01098fc:	01 c8                	add    %ecx,%eax
f01098fe:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0109905:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010990b:	8b 90 c4 05 00 00    	mov    0x5c4(%eax),%edx
f0109911:	4a                   	dec    %edx
f0109912:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)
				//Now: we are sure that at least the top page in the stack will be added to Active list
				//Since we left 1 empty location in the Active list when we loaded the program segments
				if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize)
f0109918:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010991e:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f0109924:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010992a:	8b 80 e8 05 00 00    	mov    0x5e8(%eax),%eax
f0109930:	39 c2                	cmp    %eax,%edx
f0109932:	0f 83 39 01 00 00    	jae    f0109a71 <env_create+0x9c8>
				{
					LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109938:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010993e:	8b 48 78             	mov    0x78(%eax),%ecx
f0109941:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109947:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010994d:	89 d0                	mov    %edx,%eax
f010994f:	01 c0                	add    %eax,%eax
f0109951:	01 d0                	add    %edx,%eax
f0109953:	c1 e0 03             	shl    $0x3,%eax
f0109956:	01 c8                	add    %ecx,%eax
f0109958:	85 c0                	test   %eax,%eax
f010995a:	75 17                	jne    f0109973 <env_create+0x8ca>
f010995c:	83 ec 04             	sub    $0x4,%esp
f010995f:	68 bc 65 13 f0       	push   $0xf01365bc
f0109964:	68 46 01 00 00       	push   $0x146
f0109969:	68 81 65 13 f0       	push   $0xf0136581
f010996e:	e8 92 68 ff ff       	call   f0100205 <_panic>
f0109973:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109979:	8b 48 78             	mov    0x78(%eax),%ecx
f010997c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109982:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109988:	89 d0                	mov    %edx,%eax
f010998a:	01 c0                	add    %eax,%eax
f010998c:	01 d0                	add    %edx,%eax
f010998e:	c1 e0 03             	shl    $0x3,%eax
f0109991:	01 c8                	add    %ecx,%eax
f0109993:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109999:	8b 92 c8 05 00 00    	mov    0x5c8(%edx),%edx
f010999f:	89 50 10             	mov    %edx,0x10(%eax)
f01099a2:	8b 40 10             	mov    0x10(%eax),%eax
f01099a5:	85 c0                	test   %eax,%eax
f01099a7:	74 31                	je     f01099da <env_create+0x931>
f01099a9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099af:	8b 90 c8 05 00 00    	mov    0x5c8(%eax),%edx
f01099b5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099bb:	8b 58 78             	mov    0x78(%eax),%ebx
f01099be:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099c4:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01099ca:	89 c8                	mov    %ecx,%eax
f01099cc:	01 c0                	add    %eax,%eax
f01099ce:	01 c8                	add    %ecx,%eax
f01099d0:	c1 e0 03             	shl    $0x3,%eax
f01099d3:	01 d8                	add    %ebx,%eax
f01099d5:	89 42 14             	mov    %eax,0x14(%edx)
f01099d8:	eb 2c                	jmp    f0109a06 <env_create+0x95d>
f01099da:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01099e0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099e6:	8b 58 78             	mov    0x78(%eax),%ebx
f01099e9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099ef:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01099f5:	89 c8                	mov    %ecx,%eax
f01099f7:	01 c0                	add    %eax,%eax
f01099f9:	01 c8                	add    %ecx,%eax
f01099fb:	c1 e0 03             	shl    $0x3,%eax
f01099fe:	01 d8                	add    %ebx,%eax
f0109a00:	89 82 cc 05 00 00    	mov    %eax,0x5cc(%edx)
f0109a06:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109a0c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a12:	8b 58 78             	mov    0x78(%eax),%ebx
f0109a15:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a1b:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109a21:	89 c8                	mov    %ecx,%eax
f0109a23:	01 c0                	add    %eax,%eax
f0109a25:	01 c8                	add    %ecx,%eax
f0109a27:	c1 e0 03             	shl    $0x3,%eax
f0109a2a:	01 d8                	add    %ebx,%eax
f0109a2c:	89 82 c8 05 00 00    	mov    %eax,0x5c8(%edx)
f0109a32:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a38:	8b 48 78             	mov    0x78(%eax),%ecx
f0109a3b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a41:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109a47:	89 d0                	mov    %edx,%eax
f0109a49:	01 c0                	add    %eax,%eax
f0109a4b:	01 d0                	add    %edx,%eax
f0109a4d:	c1 e0 03             	shl    $0x3,%eax
f0109a50:	01 c8                	add    %ecx,%eax
f0109a52:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0109a59:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a5f:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f0109a65:	42                   	inc    %edx
f0109a66:	89 90 d4 05 00 00    	mov    %edx,0x5d4(%eax)
f0109a6c:	e9 34 01 00 00       	jmp    f0109ba5 <env_create+0xafc>
				}
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109a71:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a77:	8b 48 78             	mov    0x78(%eax),%ecx
f0109a7a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a80:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109a86:	89 d0                	mov    %edx,%eax
f0109a88:	01 c0                	add    %eax,%eax
f0109a8a:	01 d0                	add    %edx,%eax
f0109a8c:	c1 e0 03             	shl    $0x3,%eax
f0109a8f:	01 c8                	add    %ecx,%eax
f0109a91:	85 c0                	test   %eax,%eax
f0109a93:	75 17                	jne    f0109aac <env_create+0xa03>
f0109a95:	83 ec 04             	sub    $0x4,%esp
f0109a98:	68 bc 65 13 f0       	push   $0xf01365bc
f0109a9d:	68 4a 01 00 00       	push   $0x14a
f0109aa2:	68 81 65 13 f0       	push   $0xf0136581
f0109aa7:	e8 59 67 ff ff       	call   f0100205 <_panic>
f0109aac:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ab2:	8b 48 78             	mov    0x78(%eax),%ecx
f0109ab5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109abb:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109ac1:	89 d0                	mov    %edx,%eax
f0109ac3:	01 c0                	add    %eax,%eax
f0109ac5:	01 d0                	add    %edx,%eax
f0109ac7:	c1 e0 03             	shl    $0x3,%eax
f0109aca:	01 c8                	add    %ecx,%eax
f0109acc:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109ad2:	8b 92 d8 05 00 00    	mov    0x5d8(%edx),%edx
f0109ad8:	89 50 10             	mov    %edx,0x10(%eax)
f0109adb:	8b 40 10             	mov    0x10(%eax),%eax
f0109ade:	85 c0                	test   %eax,%eax
f0109ae0:	74 31                	je     f0109b13 <env_create+0xa6a>
f0109ae2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ae8:	8b 90 d8 05 00 00    	mov    0x5d8(%eax),%edx
f0109aee:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109af4:	8b 58 78             	mov    0x78(%eax),%ebx
f0109af7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109afd:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109b03:	89 c8                	mov    %ecx,%eax
f0109b05:	01 c0                	add    %eax,%eax
f0109b07:	01 c8                	add    %ecx,%eax
f0109b09:	c1 e0 03             	shl    $0x3,%eax
f0109b0c:	01 d8                	add    %ebx,%eax
f0109b0e:	89 42 14             	mov    %eax,0x14(%edx)
f0109b11:	eb 2c                	jmp    f0109b3f <env_create+0xa96>
f0109b13:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109b19:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b1f:	8b 58 78             	mov    0x78(%eax),%ebx
f0109b22:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b28:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109b2e:	89 c8                	mov    %ecx,%eax
f0109b30:	01 c0                	add    %eax,%eax
f0109b32:	01 c8                	add    %ecx,%eax
f0109b34:	c1 e0 03             	shl    $0x3,%eax
f0109b37:	01 d8                	add    %ebx,%eax
f0109b39:	89 82 dc 05 00 00    	mov    %eax,0x5dc(%edx)
f0109b3f:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109b45:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b4b:	8b 58 78             	mov    0x78(%eax),%ebx
f0109b4e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b54:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109b5a:	89 c8                	mov    %ecx,%eax
f0109b5c:	01 c0                	add    %eax,%eax
f0109b5e:	01 c8                	add    %ecx,%eax
f0109b60:	c1 e0 03             	shl    $0x3,%eax
f0109b63:	01 d8                	add    %ebx,%eax
f0109b65:	89 82 d8 05 00 00    	mov    %eax,0x5d8(%edx)
f0109b6b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b71:	8b 48 78             	mov    0x78(%eax),%ecx
f0109b74:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b7a:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109b80:	89 d0                	mov    %edx,%eax
f0109b82:	01 c0                	add    %eax,%eax
f0109b84:	01 d0                	add    %edx,%eax
f0109b86:	c1 e0 03             	shl    $0x3,%eax
f0109b89:	01 c8                	add    %ecx,%eax
f0109b8b:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0109b92:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b98:	8b 90 e4 05 00 00    	mov    0x5e4(%eax),%edx
f0109b9e:	42                   	inc    %edx
f0109b9f:	89 90 e4 05 00 00    	mov    %edx,0x5e4(%eax)
				}
			}
			e->page_last_WS_index ++;
f0109ba5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109bab:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109bb1:	42                   	inc    %edx
f0109bb2:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
			e->page_last_WS_index %= (e->page_WS_max_size);
f0109bb8:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109bbe:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109bc4:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f0109bca:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109bd0:	8b 5a 74             	mov    0x74(%edx),%ebx
f0109bd3:	ba 00 00 00 00       	mov    $0x0,%edx
f0109bd8:	f7 f3                	div    %ebx
f0109bda:	89 d0                	mov    %edx,%eax
f0109bdc:	89 81 2c 05 00 00    	mov    %eax,0x52c(%ecx)

			//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));

			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f0109be2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109be8:	83 ec 04             	sub    $0x4,%esp
f0109beb:	6a 01                	push   $0x1
f0109bed:	ff 75 c0             	pushl  -0x40(%ebp)
f0109bf0:	50                   	push   %eax
f0109bf1:	e8 cc 99 ff ff       	call   f01035c2 <pf_add_empty_env_page>
f0109bf6:	83 c4 10             	add    $0x10,%esp
f0109bf9:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0109bff:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f0109c06:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0109c09:	3b 85 58 ff ff ff    	cmp    -0xa8(%ebp),%eax
f0109c0f:	0f 83 9e fa ff ff    	jae    f01096b3 <env_create+0x60a>

	}

	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109c15:	83 ec 0c             	sub    $0xc,%esp
f0109c18:	6a 02                	push   $0x2
f0109c1a:	e8 6a 43 00 00       	call   f010df89 <isPageReplacmentAlgorithmLRU>
f0109c1f:	83 c4 10             	add    $0x10,%esp
f0109c22:	85 c0                	test   %eax,%eax
f0109c24:	74 72                	je     f0109c98 <env_create+0xbef>
	{
		struct WorkingSetElement * elm = NULL;
f0109c26:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
		LIST_FOREACH(elm, &(e->SecondList))
f0109c2d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c33:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f0109c39:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0109c3c:	eb 2b                	jmp    f0109c69 <env_create+0xbc0>
		{
			//set it's PRESENT bit to 0
			pt_set_page_permissions(e->env_page_directory, elm->virtual_address, 0, PERM_PRESENT);
f0109c3e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0109c41:	8b 10                	mov    (%eax),%edx
f0109c43:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c49:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109c4c:	6a 01                	push   $0x1
f0109c4e:	6a 00                	push   $0x0
f0109c50:	52                   	push   %edx
f0109c51:	50                   	push   %eax
f0109c52:	e8 0a e1 ff ff       	call   f0107d61 <pt_set_page_permissions>
f0109c57:	83 c4 10             	add    $0x10,%esp
	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		struct WorkingSetElement * elm = NULL;
		LIST_FOREACH(elm, &(e->SecondList))
f0109c5a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c60:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0109c66:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0109c69:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c6f:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0109c73:	74 08                	je     f0109c7d <env_create+0xbd4>
f0109c75:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0109c78:	8b 52 10             	mov    0x10(%edx),%edx
f0109c7b:	eb 05                	jmp    f0109c82 <env_create+0xbd9>
f0109c7d:	ba 00 00 00 00       	mov    $0x0,%edx
f0109c82:	89 90 e0 05 00 00    	mov    %edx,0x5e0(%eax)
f0109c88:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0109c8e:	85 c0                	test   %eax,%eax
f0109c90:	75 ac                	jne    f0109c3e <env_create+0xb95>
f0109c92:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0109c96:	75 a6                	jne    f0109c3e <env_create+0xb95>
f0109c98:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0109c9b:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0109c9e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0109ca1:	0f 22 d8             	mov    %eax,%cr3
	lcr3(kern_phys_pgdir) ;

	//[11] 2012, add the new env we have just created to the scheduler NEW queue
	//	   2015: moved to the scheduler! since env_create() is responsible for creating the env only

	return e;
f0109ca4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
}
f0109caa:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0109cad:	5b                   	pop    %ebx
f0109cae:	5e                   	pop    %esi
f0109caf:	5f                   	pop    %edi
f0109cb0:	5d                   	pop    %ebp
f0109cb1:	c3                   	ret    

f0109cb2 <env_run>:
// Used to run the given environment "e", simply by
// context switch from curenv to env e.
//  (This function does not return.)
//
void env_run(struct Env *e)
{
f0109cb2:	55                   	push   %ebp
f0109cb3:	89 e5                	mov    %esp,%ebp
f0109cb5:	83 ec 18             	sub    $0x18,%esp
	if(curenv != e)
f0109cb8:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f0109cbd:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109cc0:	74 25                	je     f0109ce7 <env_run+0x35>
	{
		curenv = e ;
f0109cc2:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cc5:	a3 f4 1d 86 f0       	mov    %eax,0xf0861df4
		curenv->env_runs++ ;
f0109cca:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f0109ccf:	8b 50 58             	mov    0x58(%eax),%edx
f0109cd2:	42                   	inc    %edx
f0109cd3:	89 50 58             	mov    %edx,0x58(%eax)
		lcr3(curenv->env_cr3) ;
f0109cd6:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f0109cdb:	8b 40 60             	mov    0x60(%eax),%eax
f0109cde:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109ce1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109ce4:	0f 22 d8             	mov    %eax,%cr3
	}
	curenv->env_status = ENV_RUNNABLE;
f0109ce7:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f0109cec:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
	//uint16 cnt0 = kclock_read_cnt0();
	//cprintf("env_run %s [%d]: Cnt BEFORE RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	//kclock_start();

	kclock_resume();
f0109cf3:	e8 a5 a4 ff ff       	call   f010419d <kclock_resume>

	//cprintf("env_run %s [%d]: Cnt AFTER RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	env_pop_tf(&(curenv->env_tf));
f0109cf8:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f0109cfd:	83 ec 0c             	sub    $0xc,%esp
f0109d00:	50                   	push   %eax
f0109d01:	e8 0f 01 00 00       	call   f0109e15 <env_pop_tf>

f0109d06 <env_free>:
// 3) FREE ENV FROM THE SYSTEM:
//===============================
// Frees environment "e" and all memory it uses.
//
void env_free(struct Env *e)
{
f0109d06:	55                   	push   %ebp
f0109d07:	89 e5                	mov    %esp,%ebp
f0109d09:	83 ec 08             	sub    $0x8,%esp
	/********DON'T CHANGE THIS LINE***********/
#if USE_KHEAP
	unshare_pws_at_user_space(e);
f0109d0c:	83 ec 0c             	sub    $0xc,%esp
f0109d0f:	ff 75 08             	pushl  0x8(%ebp)
f0109d12:	e8 3e 11 00 00       	call   f010ae55 <unshare_pws_at_user_space>
f0109d17:	83 c4 10             	add    $0x10,%esp
#endif
	/*****************************************/
	//TODO: [PROJECT MS3 - BONUS] [EXIT ENV] env_free
	// your code is here, remove the panic and write your code
	panic("env_free() is not implemented yet...!!");
f0109d1a:	83 ec 04             	sub    $0x4,%esp
f0109d1d:	68 e0 65 13 f0       	push   $0xf01365e0
f0109d22:	68 9d 01 00 00       	push   $0x19d
f0109d27:	68 81 65 13 f0       	push   $0xf0136581
f0109d2c:	e8 d4 64 ff ff       	call   f0100205 <_panic>

f0109d31 <env_exit>:
//============================
// 4) PLACE ENV IN EXIT QUEUE:
//============================
/*2015*///Just add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit()
{
f0109d31:	55                   	push   %ebp
f0109d32:	89 e5                	mov    %esp,%ebp
f0109d34:	83 ec 08             	sub    $0x8,%esp
	sched_exit_env(curenv->env_id);
f0109d37:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f0109d3c:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109d3f:	83 ec 0c             	sub    $0xc,%esp
f0109d42:	50                   	push   %eax
f0109d43:	e8 38 b5 ff ff       	call   f0105280 <sched_exit_env>
f0109d48:	83 c4 10             	add    $0x10,%esp
	fos_scheduler();
f0109d4b:	e8 b4 a9 ff ff       	call   f0104704 <fos_scheduler>

f0109d50 <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f0109d50:	55                   	push   %ebp
f0109d51:	89 e5                	mov    %esp,%ebp
f0109d53:	53                   	push   %ebx
f0109d54:	83 ec 14             	sub    $0x14,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f0109d57:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109d5b:	75 15                	jne    f0109d72 <envid2env+0x22>
		*env_store = curenv;
f0109d5d:	8b 15 f4 1d 86 f0    	mov    0xf0861df4,%edx
f0109d63:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109d66:	89 10                	mov    %edx,(%eax)
		return 0;
f0109d68:	b8 00 00 00 00       	mov    $0x0,%eax
f0109d6d:	e9 9e 00 00 00       	jmp    f0109e10 <envid2env+0xc0>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f0109d72:	8b 1d f0 1d 86 f0    	mov    0xf0861df0,%ebx
f0109d78:	83 ec 0c             	sub    $0xc,%esp
f0109d7b:	68 b1 02 00 00       	push   $0x2b1
f0109d80:	e8 f5 65 02 00       	call   f013037a <nearest_pow2_ceil>
f0109d85:	83 c4 10             	add    $0x10,%esp
f0109d88:	8d 50 ff             	lea    -0x1(%eax),%edx
f0109d8b:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d8e:	21 c2                	and    %eax,%edx
f0109d90:	89 d0                	mov    %edx,%eax
f0109d92:	c1 e0 03             	shl    $0x3,%eax
f0109d95:	01 d0                	add    %edx,%eax
f0109d97:	01 c0                	add    %eax,%eax
f0109d99:	01 d0                	add    %edx,%eax
f0109d9b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109da2:	01 d0                	add    %edx,%eax
f0109da4:	c1 e0 04             	shl    $0x4,%eax
f0109da7:	01 d8                	add    %ebx,%eax
f0109da9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f0109dac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109daf:	8b 40 54             	mov    0x54(%eax),%eax
f0109db2:	85 c0                	test   %eax,%eax
f0109db4:	74 0b                	je     f0109dc1 <envid2env+0x71>
f0109db6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109db9:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109dbc:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109dbf:	74 10                	je     f0109dd1 <envid2env+0x81>
		*env_store = 0;
f0109dc1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109dc4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0109dca:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0109dcf:	eb 3f                	jmp    f0109e10 <envid2env+0xc0>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
f0109dd1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0109dd5:	74 2c                	je     f0109e03 <envid2env+0xb3>
f0109dd7:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f0109ddc:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0109ddf:	74 22                	je     f0109e03 <envid2env+0xb3>
f0109de1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109de4:	8b 50 50             	mov    0x50(%eax),%edx
f0109de7:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f0109dec:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109def:	39 c2                	cmp    %eax,%edx
f0109df1:	74 10                	je     f0109e03 <envid2env+0xb3>
		*env_store = 0;
f0109df3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109df6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0109dfc:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0109e01:	eb 0d                	jmp    f0109e10 <envid2env+0xc0>
	}

	*env_store = e;
f0109e03:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109e06:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109e09:	89 10                	mov    %edx,(%eax)
	return 0;
f0109e0b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109e10:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109e13:	c9                   	leave  
f0109e14:	c3                   	ret    

f0109e15 <env_pop_tf>:
// This exits the kernel and starts executing some environment's code.
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
f0109e15:	55                   	push   %ebp
f0109e16:	89 e5                	mov    %esp,%ebp
f0109e18:	83 ec 08             	sub    $0x8,%esp
	__asm __volatile("movl %0,%%esp\n"
f0109e1b:	8b 65 08             	mov    0x8(%ebp),%esp
f0109e1e:	61                   	popa   
f0109e1f:	07                   	pop    %es
f0109e20:	1f                   	pop    %ds
f0109e21:	83 c4 08             	add    $0x8,%esp
f0109e24:	cf                   	iret   
			"\tpopl %%es\n"
			"\tpopl %%ds\n"
			"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
			"\tiret"
			: : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
f0109e25:	83 ec 04             	sub    $0x4,%esp
f0109e28:	68 07 66 13 f0       	push   $0xf0136607
f0109e2d:	68 fd 01 00 00       	push   $0x1fd
f0109e32:	68 81 65 13 f0       	push   $0xf0136581
f0109e37:	e8 c9 63 ff ff       	call   f0100205 <_panic>

f0109e3c <env_init>:
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//

void env_init(void)
{
f0109e3c:	55                   	push   %ebp
f0109e3d:	89 e5                	mov    %esp,%ebp
f0109e3f:	53                   	push   %ebx
f0109e40:	83 ec 14             	sub    $0x14,%esp
	int iEnv = NENV-1;
f0109e43:	c7 45 f4 b0 02 00 00 	movl   $0x2b0,-0xc(%ebp)
	for(; iEnv >= 0; iEnv--)
f0109e4a:	e9 73 01 00 00       	jmp    f0109fc2 <env_init+0x186>
	{
		envs[iEnv].env_status = ENV_FREE;
f0109e4f:	8b 0d f0 1d 86 f0    	mov    0xf0861df0,%ecx
f0109e55:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109e58:	89 d0                	mov    %edx,%eax
f0109e5a:	c1 e0 03             	shl    $0x3,%eax
f0109e5d:	01 d0                	add    %edx,%eax
f0109e5f:	01 c0                	add    %eax,%eax
f0109e61:	01 d0                	add    %edx,%eax
f0109e63:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109e6a:	01 d0                	add    %edx,%eax
f0109e6c:	c1 e0 04             	shl    $0x4,%eax
f0109e6f:	01 c8                	add    %ecx,%eax
f0109e71:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
		envs[iEnv].env_id = 0;
f0109e78:	8b 0d f0 1d 86 f0    	mov    0xf0861df0,%ecx
f0109e7e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109e81:	89 d0                	mov    %edx,%eax
f0109e83:	c1 e0 03             	shl    $0x3,%eax
f0109e86:	01 d0                	add    %edx,%eax
f0109e88:	01 c0                	add    %eax,%eax
f0109e8a:	01 d0                	add    %edx,%eax
f0109e8c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109e93:	01 d0                	add    %edx,%eax
f0109e95:	c1 e0 04             	shl    $0x4,%eax
f0109e98:	01 c8                	add    %ecx,%eax
f0109e9a:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f0109ea1:	8b 0d f0 1d 86 f0    	mov    0xf0861df0,%ecx
f0109ea7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109eaa:	89 d0                	mov    %edx,%eax
f0109eac:	c1 e0 03             	shl    $0x3,%eax
f0109eaf:	01 d0                	add    %edx,%eax
f0109eb1:	01 c0                	add    %eax,%eax
f0109eb3:	01 d0                	add    %edx,%eax
f0109eb5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109ebc:	01 d0                	add    %edx,%eax
f0109ebe:	c1 e0 04             	shl    $0x4,%eax
f0109ec1:	01 c8                	add    %ecx,%eax
f0109ec3:	85 c0                	test   %eax,%eax
f0109ec5:	75 17                	jne    f0109ede <env_init+0xa2>
f0109ec7:	83 ec 04             	sub    $0x4,%esp
f0109eca:	68 bc 65 13 f0       	push   $0xf01365bc
f0109ecf:	68 19 02 00 00       	push   $0x219
f0109ed4:	68 81 65 13 f0       	push   $0xf0136581
f0109ed9:	e8 27 63 ff ff       	call   f0100205 <_panic>
f0109ede:	8b 0d f0 1d 86 f0    	mov    0xf0861df0,%ecx
f0109ee4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109ee7:	89 d0                	mov    %edx,%eax
f0109ee9:	c1 e0 03             	shl    $0x3,%eax
f0109eec:	01 d0                	add    %edx,%eax
f0109eee:	01 c0                	add    %eax,%eax
f0109ef0:	01 d0                	add    %edx,%eax
f0109ef2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109ef9:	01 d0                	add    %edx,%eax
f0109efb:	c1 e0 04             	shl    $0x4,%eax
f0109efe:	01 c8                	add    %ecx,%eax
f0109f00:	8b 15 f8 1d 86 f0    	mov    0xf0861df8,%edx
f0109f06:	89 50 44             	mov    %edx,0x44(%eax)
f0109f09:	8b 40 44             	mov    0x44(%eax),%eax
f0109f0c:	85 c0                	test   %eax,%eax
f0109f0e:	74 2d                	je     f0109f3d <env_init+0x101>
f0109f10:	8b 0d f8 1d 86 f0    	mov    0xf0861df8,%ecx
f0109f16:	8b 1d f0 1d 86 f0    	mov    0xf0861df0,%ebx
f0109f1c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109f1f:	89 d0                	mov    %edx,%eax
f0109f21:	c1 e0 03             	shl    $0x3,%eax
f0109f24:	01 d0                	add    %edx,%eax
f0109f26:	01 c0                	add    %eax,%eax
f0109f28:	01 d0                	add    %edx,%eax
f0109f2a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109f31:	01 d0                	add    %edx,%eax
f0109f33:	c1 e0 04             	shl    $0x4,%eax
f0109f36:	01 d8                	add    %ebx,%eax
f0109f38:	89 41 48             	mov    %eax,0x48(%ecx)
f0109f3b:	eb 27                	jmp    f0109f64 <env_init+0x128>
f0109f3d:	8b 0d f0 1d 86 f0    	mov    0xf0861df0,%ecx
f0109f43:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109f46:	89 d0                	mov    %edx,%eax
f0109f48:	c1 e0 03             	shl    $0x3,%eax
f0109f4b:	01 d0                	add    %edx,%eax
f0109f4d:	01 c0                	add    %eax,%eax
f0109f4f:	01 d0                	add    %edx,%eax
f0109f51:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109f58:	01 d0                	add    %edx,%eax
f0109f5a:	c1 e0 04             	shl    $0x4,%eax
f0109f5d:	01 c8                	add    %ecx,%eax
f0109f5f:	a3 fc 1d 86 f0       	mov    %eax,0xf0861dfc
f0109f64:	8b 0d f0 1d 86 f0    	mov    0xf0861df0,%ecx
f0109f6a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109f6d:	89 d0                	mov    %edx,%eax
f0109f6f:	c1 e0 03             	shl    $0x3,%eax
f0109f72:	01 d0                	add    %edx,%eax
f0109f74:	01 c0                	add    %eax,%eax
f0109f76:	01 d0                	add    %edx,%eax
f0109f78:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109f7f:	01 d0                	add    %edx,%eax
f0109f81:	c1 e0 04             	shl    $0x4,%eax
f0109f84:	01 c8                	add    %ecx,%eax
f0109f86:	a3 f8 1d 86 f0       	mov    %eax,0xf0861df8
f0109f8b:	8b 0d f0 1d 86 f0    	mov    0xf0861df0,%ecx
f0109f91:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109f94:	89 d0                	mov    %edx,%eax
f0109f96:	c1 e0 03             	shl    $0x3,%eax
f0109f99:	01 d0                	add    %edx,%eax
f0109f9b:	01 c0                	add    %eax,%eax
f0109f9d:	01 d0                	add    %edx,%eax
f0109f9f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109fa6:	01 d0                	add    %edx,%eax
f0109fa8:	c1 e0 04             	shl    $0x4,%eax
f0109fab:	01 c8                	add    %ecx,%eax
f0109fad:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109fb4:	a1 04 1e 86 f0       	mov    0xf0861e04,%eax
f0109fb9:	40                   	inc    %eax
f0109fba:	a3 04 1e 86 f0       	mov    %eax,0xf0861e04
//

void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f0109fbf:	ff 4d f4             	decl   -0xc(%ebp)
f0109fc2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109fc6:	0f 89 83 fe ff ff    	jns    f0109e4f <env_init+0x13>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f0109fcc:	90                   	nop
f0109fcd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109fd0:	c9                   	leave  
f0109fd1:	c3                   	ret    

f0109fd2 <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f0109fd2:	55                   	push   %ebp
f0109fd3:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f0109fd5:	8b 15 f8 1d 86 f0    	mov    0xf0861df8,%edx
f0109fdb:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fde:	89 10                	mov    %edx,(%eax)
f0109fe0:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fe3:	8b 00                	mov    (%eax),%eax
f0109fe5:	85 c0                	test   %eax,%eax
f0109fe7:	75 07                	jne    f0109ff0 <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f0109fe9:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f0109fee:	eb 11                	jmp    f010a001 <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f0109ff0:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ff3:	8b 00                	mov    (%eax),%eax
f0109ff5:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	return 0;
f0109ffc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a001:	5d                   	pop    %ebp
f010a002:	c3                   	ret    

f010a003 <free_environment>:
//===============================
// 3) FREE ENV STRUCT:
//===============================
// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f010a003:	55                   	push   %ebp
f010a004:	89 e5                	mov    %esp,%ebp
f010a006:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f010a009:	83 ec 04             	sub    $0x4,%esp
f010a00c:	68 f0 05 00 00       	push   $0x5f0
f010a011:	6a 00                	push   $0x0
f010a013:	ff 75 08             	pushl  0x8(%ebp)
f010a016:	e8 db 77 02 00       	call   f01317f6 <memset>
f010a01b:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f010a01e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a021:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f010a028:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010a02c:	75 17                	jne    f010a045 <free_environment+0x42>
f010a02e:	83 ec 04             	sub    $0x4,%esp
f010a031:	68 bc 65 13 f0       	push   $0xf01365bc
f010a036:	68 36 02 00 00       	push   $0x236
f010a03b:	68 81 65 13 f0       	push   $0xf0136581
f010a040:	e8 c0 61 ff ff       	call   f0100205 <_panic>
f010a045:	8b 15 f8 1d 86 f0    	mov    0xf0861df8,%edx
f010a04b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a04e:	89 50 44             	mov    %edx,0x44(%eax)
f010a051:	8b 45 08             	mov    0x8(%ebp),%eax
f010a054:	8b 40 44             	mov    0x44(%eax),%eax
f010a057:	85 c0                	test   %eax,%eax
f010a059:	74 0d                	je     f010a068 <free_environment+0x65>
f010a05b:	a1 f8 1d 86 f0       	mov    0xf0861df8,%eax
f010a060:	8b 55 08             	mov    0x8(%ebp),%edx
f010a063:	89 50 48             	mov    %edx,0x48(%eax)
f010a066:	eb 08                	jmp    f010a070 <free_environment+0x6d>
f010a068:	8b 45 08             	mov    0x8(%ebp),%eax
f010a06b:	a3 fc 1d 86 f0       	mov    %eax,0xf0861dfc
f010a070:	8b 45 08             	mov    0x8(%ebp),%eax
f010a073:	a3 f8 1d 86 f0       	mov    %eax,0xf0861df8
f010a078:	8b 45 08             	mov    0x8(%ebp),%eax
f010a07b:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010a082:	a1 04 1e 86 f0       	mov    0xf0861e04,%eax
f010a087:	40                   	inc    %eax
f010a088:	a3 04 1e 86 f0       	mov    %eax,0xf0861e04
}
f010a08d:	90                   	nop
f010a08e:	c9                   	leave  
f010a08f:	c3                   	ret    

f010a090 <create_user_page_WS>:

//===============================================
// 4) DYNAMICALLY ALLOCATE SPACE FOR WORKING SET:
//===============================================
void * create_user_page_WS(struct Env * e, unsigned int numOfElements)
{
f010a090:	55                   	push   %ebp
f010a091:	89 e5                	mov    %esp,%ebp
f010a093:	83 ec 18             	sub    $0x18,%esp
	uint32 nBytes = sizeof(struct WorkingSetElement) * numOfElements;
f010a096:	8b 55 0c             	mov    0xc(%ebp),%edx
f010a099:	89 d0                	mov    %edx,%eax
f010a09b:	01 c0                	add    %eax,%eax
f010a09d:	01 d0                	add    %edx,%eax
f010a09f:	c1 e0 03             	shl    $0x3,%eax
f010a0a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct WorkingSetElement* ptr_page_WS = kmalloc(nBytes);
f010a0a5:	83 ec 0c             	sub    $0xc,%esp
f010a0a8:	ff 75 f4             	pushl  -0xc(%ebp)
f010a0ab:	e8 b1 d9 ff ff       	call   f0107a61 <kmalloc>
f010a0b0:	83 c4 10             	add    $0x10,%esp
f010a0b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(ptr_page_WS == NULL)
f010a0b6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010a0ba:	75 17                	jne    f010a0d3 <create_user_page_WS+0x43>
	panic("NOT ENOUGH KERNEL HEAP SPACE");
f010a0bc:	83 ec 04             	sub    $0x4,%esp
f010a0bf:	68 13 66 13 f0       	push   $0xf0136613
f010a0c4:	68 41 02 00 00       	push   $0x241
f010a0c9:	68 81 65 13 f0       	push   $0xf0136581
f010a0ce:	e8 32 61 ff ff       	call   f0100205 <_panic>
	return ptr_page_WS;
f010a0d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
	//TODO: [PROJECT MS3] [PROGRAM LOAD] create_user_page_WS()
	// Write your code here, remove the panic and write your code
	//panic("create_user_page_WS() is not implemented yet...!!");

	//Use kmalloc() to allocate a new space for a working set with numOfElements elements
}
f010a0d6:	c9                   	leave  
f010a0d7:	c3                   	ret    

f010a0d8 <create_user_directory>:

//==================================================
// 5) DYNAMICALLY ALLOCATE SPACE FOR USER DIRECTORY:
//==================================================
void * create_user_directory()
{
f010a0d8:	55                   	push   %ebp
f010a0d9:	89 e5                	mov    %esp,%ebp
f010a0db:	83 ec 18             	sub    $0x18,%esp
	uint32* ptr_user_page_directory = kmalloc(PAGE_SIZE);
f010a0de:	83 ec 0c             	sub    $0xc,%esp
f010a0e1:	68 00 10 00 00       	push   $0x1000
f010a0e6:	e8 76 d9 ff ff       	call   f0107a61 <kmalloc>
f010a0eb:	83 c4 10             	add    $0x10,%esp
f010a0ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_user_page_directory == NULL)
f010a0f1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a0f5:	75 17                	jne    f010a10e <create_user_directory+0x36>
	panic("NOT ENOUGH KERNEL HEAP SPACE");
f010a0f7:	83 ec 04             	sub    $0x4,%esp
f010a0fa:	68 13 66 13 f0       	push   $0xf0136613
f010a0ff:	68 56 02 00 00       	push   $0x256
f010a104:	68 81 65 13 f0       	push   $0xf0136581
f010a109:	e8 f7 60 ff ff       	call   f0100205 <_panic>
	return ptr_user_page_directory;
f010a10e:	8b 45 f4             	mov    -0xc(%ebp),%eax
	//TODO: [PROJECT MS3] [PROGRAM LOAD] create_user_directory()
	// Write your code here, remove the panic and write your code
	//panic("create_user_directory() is not implemented yet...!!");

	//Use kmalloc() to allocate a new directory
}
f010a111:	c9                   	leave  
f010a112:	c3                   	ret    

f010a113 <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f010a113:	55                   	push   %ebp
f010a114:	89 e5                	mov    %esp,%ebp
f010a116:	53                   	push   %ebx
f010a117:	83 ec 44             	sub    $0x44,%esp
	void *vaddr = seg->virtual_address;
f010a11a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a11d:	8b 40 0c             	mov    0xc(%eax),%eax
f010a120:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f010a123:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a126:	8b 40 08             	mov    0x8(%eax),%eax
f010a129:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f010a12c:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f010a133:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010a136:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a139:	01 c2                	add    %eax,%edx
f010a13b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a13e:	01 d0                	add    %edx,%eax
f010a140:	48                   	dec    %eax
f010a141:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010a144:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a147:	ba 00 00 00 00       	mov    $0x0,%edx
f010a14c:	f7 75 dc             	divl   -0x24(%ebp)
f010a14f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a152:	29 d0                	sub    %edx,%eax
f010a154:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f010a157:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a15a:	89 45 d0             	mov    %eax,-0x30(%ebp)
f010a15d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010a160:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a165:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f010a168:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo *p = NULL;
f010a16f:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f010a176:	8b 45 10             	mov    0x10(%ebp),%eax
f010a179:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f010a17f:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f010a186:	0f 85 c8 05 00 00    	jne    f010a754 <program_segment_alloc_map_copy_workingset+0x641>
f010a18c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a18f:	05 5c 05 00 00       	add    $0x55c,%eax
f010a194:	83 ec 08             	sub    $0x8,%esp
f010a197:	68 30 66 13 f0       	push   $0xf0136630
f010a19c:	50                   	push   %eax
f010a19d:	e8 72 75 02 00       	call   f0131714 <strcmp>
f010a1a2:	83 c4 10             	add    $0x10,%esp
f010a1a5:	85 c0                	test   %eax,%eax
f010a1a7:	0f 84 a7 05 00 00    	je     f010a754 <program_segment_alloc_map_copy_workingset+0x641>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f010a1ad:	8b 45 14             	mov    0x14(%ebp),%eax
f010a1b0:	83 f8 06             	cmp    $0x6,%eax
f010a1b3:	76 05                	jbe    f010a1ba <program_segment_alloc_map_copy_workingset+0xa7>
f010a1b5:	b8 06 00 00 00       	mov    $0x6,%eax
f010a1ba:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010a1bd:	e9 92 05 00 00       	jmp    f010a754 <program_segment_alloc_map_copy_workingset+0x641>
	{
		// Allocate a page
		allocate_frame(&p) ;
f010a1c2:	83 ec 0c             	sub    $0xc,%esp
f010a1c5:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010a1c8:	50                   	push   %eax
f010a1c9:	e8 02 c7 ff ff       	call   f01068d0 <allocate_frame>
f010a1ce:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, iVA, PERM_USER | PERM_WRITEABLE);
f010a1d1:	8b 55 c0             	mov    -0x40(%ebp),%edx
f010a1d4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1d7:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a1da:	6a 06                	push   $0x6
f010a1dc:	ff 75 f4             	pushl  -0xc(%ebp)
f010a1df:	52                   	push   %edx
f010a1e0:	50                   	push   %eax
f010a1e1:	e8 f5 cc ff ff       	call   f0106edb <loadtime_map_frame>
f010a1e6:	83 c4 10             	add    $0x10,%esp
		LOG_STRING("segment page mapped");

		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));

		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f010a1e9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1ec:	8b 48 78             	mov    0x78(%eax),%ecx
f010a1ef:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1f2:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a1f8:	89 d0                	mov    %edx,%eax
f010a1fa:	01 c0                	add    %eax,%eax
f010a1fc:	01 d0                	add    %edx,%eax
f010a1fe:	c1 e0 03             	shl    $0x3,%eax
f010a201:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a204:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a207:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f010a209:	8b 45 08             	mov    0x8(%ebp),%eax
f010a20c:	8b 48 78             	mov    0x78(%eax),%ecx
f010a20f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a212:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a218:	89 d0                	mov    %edx,%eax
f010a21a:	01 c0                	add    %eax,%eax
f010a21c:	01 d0                	add    %edx,%eax
f010a21e:	c1 e0 03             	shl    $0x3,%eax
f010a221:	01 c8                	add    %ecx,%eax
f010a223:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f010a227:	8b 45 08             	mov    0x8(%ebp),%eax
f010a22a:	8b 48 78             	mov    0x78(%eax),%ecx
f010a22d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a230:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a236:	89 d0                	mov    %edx,%eax
f010a238:	01 c0                	add    %eax,%eax
f010a23a:	01 d0                	add    %edx,%eax
f010a23c:	c1 e0 03             	shl    $0x3,%eax
f010a23f:	01 c8                	add    %ecx,%eax
f010a241:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

		//2020
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a248:	83 ec 0c             	sub    $0xc,%esp
f010a24b:	6a 02                	push   $0x2
f010a24d:	e8 37 3d 00 00       	call   f010df89 <isPageReplacmentAlgorithmLRU>
f010a252:	83 c4 10             	add    $0x10,%esp
f010a255:	85 c0                	test   %eax,%eax
f010a257:	0f 84 c8 03 00 00    	je     f010a625 <program_segment_alloc_map_copy_workingset+0x512>
		{
			LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a25d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a260:	8b 48 78             	mov    0x78(%eax),%ecx
f010a263:	8b 45 08             	mov    0x8(%ebp),%eax
f010a266:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a26c:	89 d0                	mov    %edx,%eax
f010a26e:	01 c0                	add    %eax,%eax
f010a270:	01 d0                	add    %edx,%eax
f010a272:	c1 e0 03             	shl    $0x3,%eax
f010a275:	01 c8                	add    %ecx,%eax
f010a277:	85 c0                	test   %eax,%eax
f010a279:	75 17                	jne    f010a292 <program_segment_alloc_map_copy_workingset+0x17f>
f010a27b:	83 ec 04             	sub    $0x4,%esp
f010a27e:	68 9e 65 13 f0       	push   $0xf013659e
f010a283:	68 90 02 00 00       	push   $0x290
f010a288:	68 81 65 13 f0       	push   $0xf0136581
f010a28d:	e8 73 5f ff ff       	call   f0100205 <_panic>
f010a292:	8b 45 08             	mov    0x8(%ebp),%eax
f010a295:	8b 48 78             	mov    0x78(%eax),%ecx
f010a298:	8b 45 08             	mov    0x8(%ebp),%eax
f010a29b:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a2a1:	89 d0                	mov    %edx,%eax
f010a2a3:	01 c0                	add    %eax,%eax
f010a2a5:	01 d0                	add    %edx,%eax
f010a2a7:	c1 e0 03             	shl    $0x3,%eax
f010a2aa:	01 c8                	add    %ecx,%eax
f010a2ac:	8b 40 10             	mov    0x10(%eax),%eax
f010a2af:	85 c0                	test   %eax,%eax
f010a2b1:	74 3f                	je     f010a2f2 <program_segment_alloc_map_copy_workingset+0x1df>
f010a2b3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2b6:	8b 48 78             	mov    0x78(%eax),%ecx
f010a2b9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2bc:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a2c2:	89 d0                	mov    %edx,%eax
f010a2c4:	01 c0                	add    %eax,%eax
f010a2c6:	01 d0                	add    %edx,%eax
f010a2c8:	c1 e0 03             	shl    $0x3,%eax
f010a2cb:	01 c8                	add    %ecx,%eax
f010a2cd:	8b 50 10             	mov    0x10(%eax),%edx
f010a2d0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2d3:	8b 58 78             	mov    0x78(%eax),%ebx
f010a2d6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2d9:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a2df:	89 c8                	mov    %ecx,%eax
f010a2e1:	01 c0                	add    %eax,%eax
f010a2e3:	01 c8                	add    %ecx,%eax
f010a2e5:	c1 e0 03             	shl    $0x3,%eax
f010a2e8:	01 d8                	add    %ebx,%eax
f010a2ea:	8b 40 14             	mov    0x14(%eax),%eax
f010a2ed:	89 42 14             	mov    %eax,0x14(%edx)
f010a2f0:	eb 26                	jmp    f010a318 <program_segment_alloc_map_copy_workingset+0x205>
f010a2f2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2f5:	8b 48 78             	mov    0x78(%eax),%ecx
f010a2f8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2fb:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a301:	89 d0                	mov    %edx,%eax
f010a303:	01 c0                	add    %eax,%eax
f010a305:	01 d0                	add    %edx,%eax
f010a307:	c1 e0 03             	shl    $0x3,%eax
f010a30a:	01 c8                	add    %ecx,%eax
f010a30c:	8b 50 14             	mov    0x14(%eax),%edx
f010a30f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a312:	89 90 bc 05 00 00    	mov    %edx,0x5bc(%eax)
f010a318:	8b 45 08             	mov    0x8(%ebp),%eax
f010a31b:	8b 48 78             	mov    0x78(%eax),%ecx
f010a31e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a321:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a327:	89 d0                	mov    %edx,%eax
f010a329:	01 c0                	add    %eax,%eax
f010a32b:	01 d0                	add    %edx,%eax
f010a32d:	c1 e0 03             	shl    $0x3,%eax
f010a330:	01 c8                	add    %ecx,%eax
f010a332:	8b 40 14             	mov    0x14(%eax),%eax
f010a335:	85 c0                	test   %eax,%eax
f010a337:	74 3f                	je     f010a378 <program_segment_alloc_map_copy_workingset+0x265>
f010a339:	8b 45 08             	mov    0x8(%ebp),%eax
f010a33c:	8b 48 78             	mov    0x78(%eax),%ecx
f010a33f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a342:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a348:	89 d0                	mov    %edx,%eax
f010a34a:	01 c0                	add    %eax,%eax
f010a34c:	01 d0                	add    %edx,%eax
f010a34e:	c1 e0 03             	shl    $0x3,%eax
f010a351:	01 c8                	add    %ecx,%eax
f010a353:	8b 50 14             	mov    0x14(%eax),%edx
f010a356:	8b 45 08             	mov    0x8(%ebp),%eax
f010a359:	8b 58 78             	mov    0x78(%eax),%ebx
f010a35c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a35f:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a365:	89 c8                	mov    %ecx,%eax
f010a367:	01 c0                	add    %eax,%eax
f010a369:	01 c8                	add    %ecx,%eax
f010a36b:	c1 e0 03             	shl    $0x3,%eax
f010a36e:	01 d8                	add    %ebx,%eax
f010a370:	8b 40 10             	mov    0x10(%eax),%eax
f010a373:	89 42 10             	mov    %eax,0x10(%edx)
f010a376:	eb 26                	jmp    f010a39e <program_segment_alloc_map_copy_workingset+0x28b>
f010a378:	8b 45 08             	mov    0x8(%ebp),%eax
f010a37b:	8b 48 78             	mov    0x78(%eax),%ecx
f010a37e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a381:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a387:	89 d0                	mov    %edx,%eax
f010a389:	01 c0                	add    %eax,%eax
f010a38b:	01 d0                	add    %edx,%eax
f010a38d:	c1 e0 03             	shl    $0x3,%eax
f010a390:	01 c8                	add    %ecx,%eax
f010a392:	8b 50 10             	mov    0x10(%eax),%edx
f010a395:	8b 45 08             	mov    0x8(%ebp),%eax
f010a398:	89 90 b8 05 00 00    	mov    %edx,0x5b8(%eax)
f010a39e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3a1:	8b 48 78             	mov    0x78(%eax),%ecx
f010a3a4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3a7:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a3ad:	89 d0                	mov    %edx,%eax
f010a3af:	01 c0                	add    %eax,%eax
f010a3b1:	01 d0                	add    %edx,%eax
f010a3b3:	c1 e0 03             	shl    $0x3,%eax
f010a3b6:	01 c8                	add    %ecx,%eax
f010a3b8:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f010a3bf:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3c2:	8b 48 78             	mov    0x78(%eax),%ecx
f010a3c5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3c8:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a3ce:	89 d0                	mov    %edx,%eax
f010a3d0:	01 c0                	add    %eax,%eax
f010a3d2:	01 d0                	add    %edx,%eax
f010a3d4:	c1 e0 03             	shl    $0x3,%eax
f010a3d7:	01 c8                	add    %ecx,%eax
f010a3d9:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a3e0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3e3:	8b 80 c4 05 00 00    	mov    0x5c4(%eax),%eax
f010a3e9:	8d 50 ff             	lea    -0x1(%eax),%edx
f010a3ec:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3ef:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)
			//Always leave 1 page in Active list for the stack
			if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize - 1)
f010a3f5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3f8:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f010a3fe:	8b 45 08             	mov    0x8(%ebp),%eax
f010a401:	8b 80 e8 05 00 00    	mov    0x5e8(%eax),%eax
f010a407:	48                   	dec    %eax
f010a408:	39 c2                	cmp    %eax,%edx
f010a40a:	0f 83 0d 01 00 00    	jae    f010a51d <program_segment_alloc_map_copy_workingset+0x40a>
			{
				LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a410:	8b 45 08             	mov    0x8(%ebp),%eax
f010a413:	8b 48 78             	mov    0x78(%eax),%ecx
f010a416:	8b 45 08             	mov    0x8(%ebp),%eax
f010a419:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a41f:	89 d0                	mov    %edx,%eax
f010a421:	01 c0                	add    %eax,%eax
f010a423:	01 d0                	add    %edx,%eax
f010a425:	c1 e0 03             	shl    $0x3,%eax
f010a428:	01 c8                	add    %ecx,%eax
f010a42a:	85 c0                	test   %eax,%eax
f010a42c:	75 17                	jne    f010a445 <program_segment_alloc_map_copy_workingset+0x332>
f010a42e:	83 ec 04             	sub    $0x4,%esp
f010a431:	68 bc 65 13 f0       	push   $0xf01365bc
f010a436:	68 94 02 00 00       	push   $0x294
f010a43b:	68 81 65 13 f0       	push   $0xf0136581
f010a440:	e8 c0 5d ff ff       	call   f0100205 <_panic>
f010a445:	8b 45 08             	mov    0x8(%ebp),%eax
f010a448:	8b 48 78             	mov    0x78(%eax),%ecx
f010a44b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a44e:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a454:	89 d0                	mov    %edx,%eax
f010a456:	01 c0                	add    %eax,%eax
f010a458:	01 d0                	add    %edx,%eax
f010a45a:	c1 e0 03             	shl    $0x3,%eax
f010a45d:	01 c8                	add    %ecx,%eax
f010a45f:	8b 55 08             	mov    0x8(%ebp),%edx
f010a462:	8b 92 c8 05 00 00    	mov    0x5c8(%edx),%edx
f010a468:	89 50 10             	mov    %edx,0x10(%eax)
f010a46b:	8b 40 10             	mov    0x10(%eax),%eax
f010a46e:	85 c0                	test   %eax,%eax
f010a470:	74 28                	je     f010a49a <program_segment_alloc_map_copy_workingset+0x387>
f010a472:	8b 45 08             	mov    0x8(%ebp),%eax
f010a475:	8b 90 c8 05 00 00    	mov    0x5c8(%eax),%edx
f010a47b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a47e:	8b 58 78             	mov    0x78(%eax),%ebx
f010a481:	8b 45 08             	mov    0x8(%ebp),%eax
f010a484:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a48a:	89 c8                	mov    %ecx,%eax
f010a48c:	01 c0                	add    %eax,%eax
f010a48e:	01 c8                	add    %ecx,%eax
f010a490:	c1 e0 03             	shl    $0x3,%eax
f010a493:	01 d8                	add    %ebx,%eax
f010a495:	89 42 14             	mov    %eax,0x14(%edx)
f010a498:	eb 24                	jmp    f010a4be <program_segment_alloc_map_copy_workingset+0x3ab>
f010a49a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a49d:	8b 48 78             	mov    0x78(%eax),%ecx
f010a4a0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4a3:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a4a9:	89 d0                	mov    %edx,%eax
f010a4ab:	01 c0                	add    %eax,%eax
f010a4ad:	01 d0                	add    %edx,%eax
f010a4af:	c1 e0 03             	shl    $0x3,%eax
f010a4b2:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a4b5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4b8:	89 90 cc 05 00 00    	mov    %edx,0x5cc(%eax)
f010a4be:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4c1:	8b 48 78             	mov    0x78(%eax),%ecx
f010a4c4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4c7:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a4cd:	89 d0                	mov    %edx,%eax
f010a4cf:	01 c0                	add    %eax,%eax
f010a4d1:	01 d0                	add    %edx,%eax
f010a4d3:	c1 e0 03             	shl    $0x3,%eax
f010a4d6:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a4d9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4dc:	89 90 c8 05 00 00    	mov    %edx,0x5c8(%eax)
f010a4e2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4e5:	8b 48 78             	mov    0x78(%eax),%ecx
f010a4e8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4eb:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a4f1:	89 d0                	mov    %edx,%eax
f010a4f3:	01 c0                	add    %eax,%eax
f010a4f5:	01 d0                	add    %edx,%eax
f010a4f7:	c1 e0 03             	shl    $0x3,%eax
f010a4fa:	01 c8                	add    %ecx,%eax
f010a4fc:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a503:	8b 45 08             	mov    0x8(%ebp),%eax
f010a506:	8b 80 d4 05 00 00    	mov    0x5d4(%eax),%eax
f010a50c:	8d 50 01             	lea    0x1(%eax),%edx
f010a50f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a512:	89 90 d4 05 00 00    	mov    %edx,0x5d4(%eax)
f010a518:	e9 08 01 00 00       	jmp    f010a625 <program_segment_alloc_map_copy_workingset+0x512>
			}
			else
			{
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a51d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a520:	8b 48 78             	mov    0x78(%eax),%ecx
f010a523:	8b 45 08             	mov    0x8(%ebp),%eax
f010a526:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a52c:	89 d0                	mov    %edx,%eax
f010a52e:	01 c0                	add    %eax,%eax
f010a530:	01 d0                	add    %edx,%eax
f010a532:	c1 e0 03             	shl    $0x3,%eax
f010a535:	01 c8                	add    %ecx,%eax
f010a537:	85 c0                	test   %eax,%eax
f010a539:	75 17                	jne    f010a552 <program_segment_alloc_map_copy_workingset+0x43f>
f010a53b:	83 ec 04             	sub    $0x4,%esp
f010a53e:	68 bc 65 13 f0       	push   $0xf01365bc
f010a543:	68 99 02 00 00       	push   $0x299
f010a548:	68 81 65 13 f0       	push   $0xf0136581
f010a54d:	e8 b3 5c ff ff       	call   f0100205 <_panic>
f010a552:	8b 45 08             	mov    0x8(%ebp),%eax
f010a555:	8b 48 78             	mov    0x78(%eax),%ecx
f010a558:	8b 45 08             	mov    0x8(%ebp),%eax
f010a55b:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a561:	89 d0                	mov    %edx,%eax
f010a563:	01 c0                	add    %eax,%eax
f010a565:	01 d0                	add    %edx,%eax
f010a567:	c1 e0 03             	shl    $0x3,%eax
f010a56a:	01 c8                	add    %ecx,%eax
f010a56c:	8b 55 08             	mov    0x8(%ebp),%edx
f010a56f:	8b 92 d8 05 00 00    	mov    0x5d8(%edx),%edx
f010a575:	89 50 10             	mov    %edx,0x10(%eax)
f010a578:	8b 40 10             	mov    0x10(%eax),%eax
f010a57b:	85 c0                	test   %eax,%eax
f010a57d:	74 28                	je     f010a5a7 <program_segment_alloc_map_copy_workingset+0x494>
f010a57f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a582:	8b 90 d8 05 00 00    	mov    0x5d8(%eax),%edx
f010a588:	8b 45 08             	mov    0x8(%ebp),%eax
f010a58b:	8b 58 78             	mov    0x78(%eax),%ebx
f010a58e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a591:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a597:	89 c8                	mov    %ecx,%eax
f010a599:	01 c0                	add    %eax,%eax
f010a59b:	01 c8                	add    %ecx,%eax
f010a59d:	c1 e0 03             	shl    $0x3,%eax
f010a5a0:	01 d8                	add    %ebx,%eax
f010a5a2:	89 42 14             	mov    %eax,0x14(%edx)
f010a5a5:	eb 24                	jmp    f010a5cb <program_segment_alloc_map_copy_workingset+0x4b8>
f010a5a7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5aa:	8b 48 78             	mov    0x78(%eax),%ecx
f010a5ad:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5b0:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a5b6:	89 d0                	mov    %edx,%eax
f010a5b8:	01 c0                	add    %eax,%eax
f010a5ba:	01 d0                	add    %edx,%eax
f010a5bc:	c1 e0 03             	shl    $0x3,%eax
f010a5bf:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a5c2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5c5:	89 90 dc 05 00 00    	mov    %edx,0x5dc(%eax)
f010a5cb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5ce:	8b 48 78             	mov    0x78(%eax),%ecx
f010a5d1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5d4:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a5da:	89 d0                	mov    %edx,%eax
f010a5dc:	01 c0                	add    %eax,%eax
f010a5de:	01 d0                	add    %edx,%eax
f010a5e0:	c1 e0 03             	shl    $0x3,%eax
f010a5e3:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a5e6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5e9:	89 90 d8 05 00 00    	mov    %edx,0x5d8(%eax)
f010a5ef:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5f2:	8b 48 78             	mov    0x78(%eax),%ecx
f010a5f5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5f8:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a5fe:	89 d0                	mov    %edx,%eax
f010a600:	01 c0                	add    %eax,%eax
f010a602:	01 d0                	add    %edx,%eax
f010a604:	c1 e0 03             	shl    $0x3,%eax
f010a607:	01 c8                	add    %ecx,%eax
f010a609:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a610:	8b 45 08             	mov    0x8(%ebp),%eax
f010a613:	8b 80 e4 05 00 00    	mov    0x5e4(%eax),%eax
f010a619:	8d 50 01             	lea    0x1(%eax),%edx
f010a61c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a61f:	89 90 e4 05 00 00    	mov    %edx,0x5e4(%eax)
			}
		}
		//=======================
		e->page_last_WS_index ++;
f010a625:	8b 45 08             	mov    0x8(%ebp),%eax
f010a628:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010a62e:	8d 50 01             	lea    0x1(%eax),%edx
f010a631:	8b 45 08             	mov    0x8(%ebp),%eax
f010a634:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f010a63a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a63d:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010a643:	8b 55 08             	mov    0x8(%ebp),%edx
f010a646:	8b 4a 74             	mov    0x74(%edx),%ecx
f010a649:	ba 00 00 00 00       	mov    $0x0,%edx
f010a64e:	f7 f1                	div    %ecx
f010a650:	8b 45 08             	mov    0x8(%ebp),%eax
f010a653:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)

		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f010a659:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a65c:	c1 e8 16             	shr    $0x16,%eax
f010a65f:	89 c2                	mov    %eax,%edx
f010a661:	8b 45 18             	mov    0x18(%ebp),%eax
f010a664:	8b 00                	mov    (%eax),%eax
f010a666:	39 c2                	cmp    %eax,%edx
f010a668:	0f 84 cf 00 00 00    	je     f010a73d <program_segment_alloc_map_copy_workingset+0x62a>
		{
			e->__ptr_tws[e->table_last_WS_index].virtual_address = ROUNDDOWN(iVA, PAGE_SIZE*1024);;
f010a66e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a671:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a677:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a67a:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010a67d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010a680:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010a685:	89 c1                	mov    %eax,%ecx
f010a687:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a68a:	89 d0                	mov    %edx,%eax
f010a68c:	01 c0                	add    %eax,%eax
f010a68e:	01 d0                	add    %edx,%eax
f010a690:	c1 e0 03             	shl    $0x3,%eax
f010a693:	01 d8                	add    %ebx,%eax
f010a695:	83 c0 7c             	add    $0x7c,%eax
f010a698:	89 08                	mov    %ecx,(%eax)
			e->__ptr_tws[e->table_last_WS_index].empty = 0;
f010a69a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a69d:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a6a3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a6a6:	89 d0                	mov    %edx,%eax
f010a6a8:	01 c0                	add    %eax,%eax
f010a6aa:	01 d0                	add    %edx,%eax
f010a6ac:	c1 e0 03             	shl    $0x3,%eax
f010a6af:	01 c8                	add    %ecx,%eax
f010a6b1:	83 e8 80             	sub    $0xffffff80,%eax
f010a6b4:	c6 00 00             	movb   $0x0,(%eax)
			e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f010a6b7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6ba:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a6c0:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a6c3:	89 d0                	mov    %edx,%eax
f010a6c5:	01 c0                	add    %eax,%eax
f010a6c7:	01 d0                	add    %edx,%eax
f010a6c9:	c1 e0 03             	shl    $0x3,%eax
f010a6cc:	01 c8                	add    %ecx,%eax
f010a6ce:	05 84 00 00 00       	add    $0x84,%eax
f010a6d3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			e->table_last_WS_index ++;
f010a6d9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6dc:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a6e2:	8d 50 01             	lea    0x1(%eax),%edx
f010a6e5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6e8:	89 90 30 05 00 00    	mov    %edx,0x530(%eax)
			e->table_last_WS_index %= __TWS_MAX_SIZE;
f010a6ee:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6f1:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a6f7:	b9 32 00 00 00       	mov    $0x32,%ecx
f010a6fc:	ba 00 00 00 00       	mov    $0x0,%edx
f010a701:	f7 f1                	div    %ecx
f010a703:	8b 45 08             	mov    0x8(%ebp),%eax
f010a706:	89 90 30 05 00 00    	mov    %edx,0x530(%eax)
			if (e->table_last_WS_index == 0)
f010a70c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a70f:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a715:	85 c0                	test   %eax,%eax
f010a717:	75 17                	jne    f010a730 <program_segment_alloc_map_copy_workingset+0x61d>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f010a719:	83 ec 04             	sub    $0x4,%esp
f010a71c:	68 34 66 13 f0       	push   $0xf0136634
f010a721:	68 a9 02 00 00       	push   $0x2a9
f010a726:	68 81 65 13 f0       	push   $0xf0136581
f010a72b:	e8 d5 5a ff ff       	call   f0100205 <_panic>
			(*lastTableNumber) = PDX(iVA);
f010a730:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a733:	c1 e8 16             	shr    $0x16,%eax
f010a736:	89 c2                	mov    %eax,%edx
f010a738:	8b 45 18             	mov    0x18(%ebp),%eax
f010a73b:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f010a73d:	8b 45 10             	mov    0x10(%ebp),%eax
f010a740:	8b 00                	mov    (%eax),%eax
f010a742:	8d 50 01             	lea    0x1(%eax),%edx
f010a745:	8b 45 10             	mov    0x10(%ebp),%eax
f010a748:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010a74a:	ff 45 f0             	incl   -0x10(%ebp)
f010a74d:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010a754:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a757:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010a75a:	73 0c                	jae    f010a768 <program_segment_alloc_map_copy_workingset+0x655>
f010a75c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a75f:	3b 45 14             	cmp    0x14(%ebp),%eax
f010a762:	0f 82 5a fa ff ff    	jb     f010a1c2 <program_segment_alloc_map_copy_workingset+0xaf>
		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}

	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f010a768:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a76b:	8b 00                	mov    (%eax),%eax
f010a76d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f010a770:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a773:	8b 40 0c             	mov    0xc(%eax),%eax
f010a776:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a779:	eb 10                	jmp    f010a78b <program_segment_alloc_map_copy_workingset+0x678>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f010a77b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a77e:	8a 10                	mov    (%eax),%dl
f010a780:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a783:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f010a785:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f010a788:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a78b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a78e:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010a791:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010a794:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a799:	89 c2                	mov    %eax,%edx
f010a79b:	8b 45 10             	mov    0x10(%ebp),%eax
f010a79e:	8b 00                	mov    (%eax),%eax
f010a7a0:	c1 e0 0c             	shl    $0xc,%eax
f010a7a3:	01 c2                	add    %eax,%edx
f010a7a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a7a8:	39 c2                	cmp    %eax,%edx
f010a7aa:	76 1d                	jbe    f010a7c9 <program_segment_alloc_map_copy_workingset+0x6b6>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f010a7ac:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a7af:	8b 50 04             	mov    0x4(%eax),%edx
f010a7b2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a7b5:	01 c2                	add    %eax,%edx
f010a7b7:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a7ba:	39 c2                	cmp    %eax,%edx
f010a7bc:	77 bd                	ja     f010a77b <program_segment_alloc_map_copy_workingset+0x668>
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a7be:	eb 09                	jmp    f010a7c9 <program_segment_alloc_map_copy_workingset+0x6b6>
	{
		*dst_ptr = 0;
f010a7c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a7c3:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f010a7c6:	ff 45 e8             	incl   -0x18(%ebp)
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a7c9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a7cc:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010a7cf:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010a7d2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a7d7:	89 c2                	mov    %eax,%edx
f010a7d9:	8b 45 10             	mov    0x10(%ebp),%eax
f010a7dc:	8b 00                	mov    (%eax),%eax
f010a7de:	c1 e0 0c             	shl    $0xc,%eax
f010a7e1:	01 c2                	add    %eax,%edx
f010a7e3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a7e6:	39 c2                	cmp    %eax,%edx
f010a7e8:	77 d6                	ja     f010a7c0 <program_segment_alloc_map_copy_workingset+0x6ad>
	//	{
	//		uint32 *ptr_page_table;
	//		get_page_table(e->env_pgdir, iVA, 1, &ptr_page_table);
	//	}
	//	LOG_STRING("page tables created successfully");
	return 0;
f010a7ea:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a7ef:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a7f2:	c9                   	leave  
f010a7f3:	c3                   	ret    

f010a7f4 <initialize_environment>:
// and initialize the kernel portion of the new environment's address space.
// Do NOT (yet) map anything into the user portion
// of the environment's virtual address space.
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory, unsigned int phys_user_page_directory)
{
f010a7f4:	55                   	push   %ebp
f010a7f5:	89 e5                	mov    %esp,%ebp
f010a7f7:	53                   	push   %ebx
f010a7f8:	83 ec 14             	sub    $0x14,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f010a7fb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7fe:	8b 55 0c             	mov    0xc(%ebp),%edx
f010a801:	89 50 5c             	mov    %edx,0x5c(%eax)
	e->env_cr3 = phys_user_page_directory;
f010a804:	8b 45 08             	mov    0x8(%ebp),%eax
f010a807:	8b 55 10             	mov    0x10(%ebp),%edx
f010a80a:	89 50 60             	mov    %edx,0x60(%eax)

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a80d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a814:	eb 17                	jmp    f010a82d <initialize_environment+0x39>
	{
		e->env_page_directory[i] = 0 ;
f010a816:	8b 45 08             	mov    0x8(%ebp),%eax
f010a819:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a81c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a81f:	c1 e2 02             	shl    $0x2,%edx
f010a822:	01 d0                	add    %edx,%eax
f010a824:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a82a:	ff 45 f4             	incl   -0xc(%ebp)
f010a82d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a830:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f010a835:	76 df                	jbe    f010a816 <initialize_environment+0x22>
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a837:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f010a83e:	eb 22                	jmp    f010a862 <initialize_environment+0x6e>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f010a840:	8b 45 08             	mov    0x8(%ebp),%eax
f010a843:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a846:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a849:	c1 e2 02             	shl    $0x2,%edx
f010a84c:	01 c2                	add    %eax,%edx
f010a84e:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f010a853:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010a856:	c1 e1 02             	shl    $0x2,%ecx
f010a859:	01 c8                	add    %ecx,%eax
f010a85b:	8b 00                	mov    (%eax),%eax
f010a85d:	89 02                	mov    %eax,(%edx)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a85f:	ff 45 f4             	incl   -0xc(%ebp)
f010a862:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010a869:	7e d5                	jle    f010a840 <initialize_environment+0x4c>
	}

	// Allocate the page working set for both kernel and user
#if USE_KHEAP == 1
	{
		e->ptr_pageWorkingSet = create_user_page_WS(e, e->page_WS_max_size);
f010a86b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a86e:	8b 40 74             	mov    0x74(%eax),%eax
f010a871:	83 ec 08             	sub    $0x8,%esp
f010a874:	50                   	push   %eax
f010a875:	ff 75 08             	pushl  0x8(%ebp)
f010a878:	e8 13 f8 ff ff       	call   f010a090 <create_user_page_WS>
f010a87d:	83 c4 10             	add    $0x10,%esp
f010a880:	89 c2                	mov    %eax,%edx
f010a882:	8b 45 08             	mov    0x8(%ebp),%eax
f010a885:	89 50 78             	mov    %edx,0x78(%eax)
		share_pws_at_user_space(e);
f010a888:	83 ec 0c             	sub    $0xc,%esp
f010a88b:	ff 75 08             	pushl  0x8(%ebp)
f010a88e:	e8 f3 04 00 00       	call   f010ad86 <share_pws_at_user_space>
f010a893:	83 c4 10             	add    $0x10,%esp
#endif


	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a896:	83 ec 0c             	sub    $0xc,%esp
f010a899:	6a 02                	push   $0x2
f010a89b:	e8 e9 36 00 00       	call   f010df89 <isPageReplacmentAlgorithmLRU>
f010a8a0:	83 c4 10             	add    $0x10,%esp
f010a8a3:	85 c0                	test   %eax,%eax
f010a8a5:	0f 84 04 01 00 00    	je     f010a9af <initialize_environment+0x1bb>
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010a8ab:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010a8b2:	e9 e7 00 00 00       	jmp    f010a99e <initialize_environment+0x1aa>
		{
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
f010a8b7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8ba:	8b 48 78             	mov    0x78(%eax),%ecx
f010a8bd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a8c0:	89 d0                	mov    %edx,%eax
f010a8c2:	01 c0                	add    %eax,%eax
f010a8c4:	01 d0                	add    %edx,%eax
f010a8c6:	c1 e0 03             	shl    $0x3,%eax
f010a8c9:	01 c8                	add    %ecx,%eax
f010a8cb:	85 c0                	test   %eax,%eax
f010a8cd:	75 17                	jne    f010a8e6 <initialize_environment+0xf2>
f010a8cf:	83 ec 04             	sub    $0x4,%esp
f010a8d2:	68 bc 65 13 f0       	push   $0xf01365bc
f010a8d7:	68 07 03 00 00       	push   $0x307
f010a8dc:	68 81 65 13 f0       	push   $0xf0136581
f010a8e1:	e8 1f 59 ff ff       	call   f0100205 <_panic>
f010a8e6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8e9:	8b 48 78             	mov    0x78(%eax),%ecx
f010a8ec:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a8ef:	89 d0                	mov    %edx,%eax
f010a8f1:	01 c0                	add    %eax,%eax
f010a8f3:	01 d0                	add    %edx,%eax
f010a8f5:	c1 e0 03             	shl    $0x3,%eax
f010a8f8:	01 c8                	add    %ecx,%eax
f010a8fa:	8b 55 08             	mov    0x8(%ebp),%edx
f010a8fd:	8b 92 b8 05 00 00    	mov    0x5b8(%edx),%edx
f010a903:	89 50 10             	mov    %edx,0x10(%eax)
f010a906:	8b 40 10             	mov    0x10(%eax),%eax
f010a909:	85 c0                	test   %eax,%eax
f010a90b:	74 22                	je     f010a92f <initialize_environment+0x13b>
f010a90d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a910:	8b 90 b8 05 00 00    	mov    0x5b8(%eax),%edx
f010a916:	8b 45 08             	mov    0x8(%ebp),%eax
f010a919:	8b 58 78             	mov    0x78(%eax),%ebx
f010a91c:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010a91f:	89 c8                	mov    %ecx,%eax
f010a921:	01 c0                	add    %eax,%eax
f010a923:	01 c8                	add    %ecx,%eax
f010a925:	c1 e0 03             	shl    $0x3,%eax
f010a928:	01 d8                	add    %ebx,%eax
f010a92a:	89 42 14             	mov    %eax,0x14(%edx)
f010a92d:	eb 1e                	jmp    f010a94d <initialize_environment+0x159>
f010a92f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a932:	8b 48 78             	mov    0x78(%eax),%ecx
f010a935:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a938:	89 d0                	mov    %edx,%eax
f010a93a:	01 c0                	add    %eax,%eax
f010a93c:	01 d0                	add    %edx,%eax
f010a93e:	c1 e0 03             	shl    $0x3,%eax
f010a941:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a944:	8b 45 08             	mov    0x8(%ebp),%eax
f010a947:	89 90 bc 05 00 00    	mov    %edx,0x5bc(%eax)
f010a94d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a950:	8b 48 78             	mov    0x78(%eax),%ecx
f010a953:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a956:	89 d0                	mov    %edx,%eax
f010a958:	01 c0                	add    %eax,%eax
f010a95a:	01 d0                	add    %edx,%eax
f010a95c:	c1 e0 03             	shl    $0x3,%eax
f010a95f:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a962:	8b 45 08             	mov    0x8(%ebp),%eax
f010a965:	89 90 b8 05 00 00    	mov    %edx,0x5b8(%eax)
f010a96b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a96e:	8b 48 78             	mov    0x78(%eax),%ecx
f010a971:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a974:	89 d0                	mov    %edx,%eax
f010a976:	01 c0                	add    %eax,%eax
f010a978:	01 d0                	add    %edx,%eax
f010a97a:	c1 e0 03             	shl    $0x3,%eax
f010a97d:	01 c8                	add    %ecx,%eax
f010a97f:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a986:	8b 45 08             	mov    0x8(%ebp),%eax
f010a989:	8b 80 c4 05 00 00    	mov    0x5c4(%eax),%eax
f010a98f:	8d 50 01             	lea    0x1(%eax),%edx
f010a992:	8b 45 08             	mov    0x8(%ebp),%eax
f010a995:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)

	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010a99b:	ff 45 f0             	incl   -0x10(%ebp)
f010a99e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9a1:	8b 50 74             	mov    0x74(%eax),%edx
f010a9a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a9a7:	39 c2                	cmp    %eax,%edx
f010a9a9:	0f 87 08 ff ff ff    	ja     f010a8b7 <initialize_environment+0xc3>
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010a9af:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a9b6:	eb 50                	jmp    f010aa08 <initialize_environment+0x214>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f010a9b8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9bb:	8b 48 78             	mov    0x78(%eax),%ecx
f010a9be:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a9c1:	89 d0                	mov    %edx,%eax
f010a9c3:	01 c0                	add    %eax,%eax
f010a9c5:	01 d0                	add    %edx,%eax
f010a9c7:	c1 e0 03             	shl    $0x3,%eax
f010a9ca:	01 c8                	add    %ecx,%eax
f010a9cc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f010a9d2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9d5:	8b 48 78             	mov    0x78(%eax),%ecx
f010a9d8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a9db:	89 d0                	mov    %edx,%eax
f010a9dd:	01 c0                	add    %eax,%eax
f010a9df:	01 d0                	add    %edx,%eax
f010a9e1:	c1 e0 03             	shl    $0x3,%eax
f010a9e4:	01 c8                	add    %ecx,%eax
f010a9e6:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f010a9ea:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9ed:	8b 48 78             	mov    0x78(%eax),%ecx
f010a9f0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a9f3:	89 d0                	mov    %edx,%eax
f010a9f5:	01 c0                	add    %eax,%eax
f010a9f7:	01 d0                	add    %edx,%eax
f010a9f9:	c1 e0 03             	shl    $0x3,%eax
f010a9fc:	01 c8                	add    %ecx,%eax
f010a9fe:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010aa05:	ff 45 f4             	incl   -0xc(%ebp)
f010aa08:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa0b:	8b 50 74             	mov    0x74(%eax),%edx
f010aa0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aa11:	39 c2                	cmp    %eax,%edx
f010aa13:	77 a3                	ja     f010a9b8 <initialize_environment+0x1c4>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f010aa15:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa18:	c7 80 2c 05 00 00 00 	movl   $0x0,0x52c(%eax)
f010aa1f:	00 00 00 

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010aa22:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010aa29:	eb 50                	jmp    f010aa7b <initialize_environment+0x287>
	{
		e->__ptr_tws[i].virtual_address = 0;
f010aa2b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010aa2e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aa31:	89 d0                	mov    %edx,%eax
f010aa33:	01 c0                	add    %eax,%eax
f010aa35:	01 d0                	add    %edx,%eax
f010aa37:	c1 e0 03             	shl    $0x3,%eax
f010aa3a:	01 c8                	add    %ecx,%eax
f010aa3c:	83 c0 7c             	add    $0x7c,%eax
f010aa3f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f010aa45:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010aa48:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aa4b:	89 d0                	mov    %edx,%eax
f010aa4d:	01 c0                	add    %eax,%eax
f010aa4f:	01 d0                	add    %edx,%eax
f010aa51:	c1 e0 03             	shl    $0x3,%eax
f010aa54:	01 c8                	add    %ecx,%eax
f010aa56:	83 e8 80             	sub    $0xffffff80,%eax
f010aa59:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f010aa5c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010aa5f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aa62:	89 d0                	mov    %edx,%eax
f010aa64:	01 c0                	add    %eax,%eax
f010aa66:	01 d0                	add    %edx,%eax
f010aa68:	c1 e0 03             	shl    $0x3,%eax
f010aa6b:	01 c8                	add    %ecx,%eax
f010aa6d:	05 84 00 00 00       	add    $0x84,%eax
f010aa72:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010aa78:	ff 45 f4             	incl   -0xc(%ebp)
f010aa7b:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010aa7f:	7e aa                	jle    f010aa2b <initialize_environment+0x237>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f010aa81:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa84:	c7 80 30 05 00 00 00 	movl   $0x0,0x530(%eax)
f010aa8b:	00 00 00 

	e->pageFaultsCounter=0;
f010aa8e:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa91:	c7 80 34 05 00 00 00 	movl   $0x0,0x534(%eax)
f010aa98:	00 00 00 
	e->tableFaultsCounter=0;
f010aa9b:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa9e:	c7 80 38 05 00 00 00 	movl   $0x0,0x538(%eax)
f010aaa5:	00 00 00 

	e->freeingFullWSCounter = 0;
f010aaa8:	8b 45 08             	mov    0x8(%ebp),%eax
f010aaab:	c7 80 3c 05 00 00 00 	movl   $0x0,0x53c(%eax)
f010aab2:	00 00 00 
	e->freeingScarceMemCounter = 0;
f010aab5:	8b 45 08             	mov    0x8(%ebp),%eax
f010aab8:	c7 80 40 05 00 00 00 	movl   $0x0,0x540(%eax)
f010aabf:	00 00 00 

	e->nModifiedPages=0;
f010aac2:	8b 45 08             	mov    0x8(%ebp),%eax
f010aac5:	c7 80 44 05 00 00 00 	movl   $0x0,0x544(%eax)
f010aacc:	00 00 00 
	e->nNotModifiedPages=0;
f010aacf:	8b 45 08             	mov    0x8(%ebp),%eax
f010aad2:	c7 80 48 05 00 00 00 	movl   $0x0,0x548(%eax)
f010aad9:	00 00 00 
	e->nClocks = 0;
f010aadc:	8b 45 08             	mov    0x8(%ebp),%eax
f010aadf:	c7 80 a4 05 00 00 00 	movl   $0x0,0x5a4(%eax)
f010aae6:	00 00 00 

	//2020
	e->nPageIn = 0;
f010aae9:	8b 45 08             	mov    0x8(%ebp),%eax
f010aaec:	c7 80 4c 05 00 00 00 	movl   $0x0,0x54c(%eax)
f010aaf3:	00 00 00 
	e->nPageOut = 0;
f010aaf6:	8b 45 08             	mov    0x8(%ebp),%eax
f010aaf9:	c7 80 50 05 00 00 00 	movl   $0x0,0x550(%eax)
f010ab00:	00 00 00 
	e->nNewPageAdded = 0;
f010ab03:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab06:	c7 80 54 05 00 00 00 	movl   $0x0,0x554(%eax)
f010ab0d:	00 00 00 

	//e->shared_free_address = USER_SHARED_MEM_START;

	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f010ab10:	83 ec 0c             	sub    $0xc,%esp
f010ab13:	ff 75 08             	pushl  0x8(%ebp)
f010ab16:	e8 09 00 00 00       	call   f010ab24 <complete_environment_initialization>
f010ab1b:	83 c4 10             	add    $0x10,%esp
}
f010ab1e:	90                   	nop
f010ab1f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010ab22:	c9                   	leave  
f010ab23:	c3                   	ret    

f010ab24 <complete_environment_initialization>:

//========================================================
// 8) COMPLETE INITIALIZATION [OTHERS: ID, REGS, STATUS...):
//========================================================
void complete_environment_initialization(struct Env* e)
{
f010ab24:	55                   	push   %ebp
f010ab25:	89 e5                	mov    %esp,%ebp
f010ab27:	53                   	push   %ebx
f010ab28:	83 ec 14             	sub    $0x14,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f010ab2b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab2e:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ab31:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f010ab37:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab3a:	8b 40 60             	mov    0x60(%eax),%eax
f010ab3d:	83 c8 03             	or     $0x3,%eax
f010ab40:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f010ab42:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab45:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ab48:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010ab4e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab51:	8b 40 60             	mov    0x60(%eax),%eax
f010ab54:	83 c8 05             	or     $0x5,%eax
f010ab57:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f010ab59:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab5c:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	e->disk_env_pgdir_PA= 0;
f010ab63:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab66:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)
	e->disk_env_tabledir = 0;
f010ab6d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab70:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	e->disk_env_tabledir_PA = 0;
f010ab77:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab7a:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)

	int32 generation;
	// Generate an env_id for this environment.
	/*2022: UPDATED*/generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NEARPOW2NENV - 1);
f010ab81:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab84:	8b 58 4c             	mov    0x4c(%eax),%ebx
f010ab87:	83 ec 0c             	sub    $0xc,%esp
f010ab8a:	68 b1 02 00 00       	push   $0x2b1
f010ab8f:	e8 1b 58 02 00       	call   f01303af <log2_ceil>
f010ab94:	83 c4 10             	add    $0x10,%esp
f010ab97:	ba 01 00 00 00       	mov    $0x1,%edx
f010ab9c:	88 c1                	mov    %al,%cl
f010ab9e:	d3 e2                	shl    %cl,%edx
f010aba0:	89 d0                	mov    %edx,%eax
f010aba2:	01 d8                	add    %ebx,%eax
f010aba4:	89 c3                	mov    %eax,%ebx
f010aba6:	83 ec 0c             	sub    $0xc,%esp
f010aba9:	68 b1 02 00 00       	push   $0x2b1
f010abae:	e8 c7 57 02 00       	call   f013037a <nearest_pow2_ceil>
f010abb3:	83 c4 10             	add    $0x10,%esp
f010abb6:	f7 d8                	neg    %eax
f010abb8:	21 d8                	and    %ebx,%eax
f010abba:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f010abbd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010abc1:	7f 1e                	jg     f010abe1 <complete_environment_initialization+0xbd>
		generation = 1 << ENVGENSHIFT;
f010abc3:	83 ec 0c             	sub    $0xc,%esp
f010abc6:	68 b1 02 00 00       	push   $0x2b1
f010abcb:	e8 df 57 02 00       	call   f01303af <log2_ceil>
f010abd0:	83 c4 10             	add    $0x10,%esp
f010abd3:	ba 01 00 00 00       	mov    $0x1,%edx
f010abd8:	88 c1                	mov    %al,%cl
f010abda:	d3 e2                	shl    %cl,%edx
f010abdc:	89 d0                	mov    %edx,%eax
f010abde:	89 45 f4             	mov    %eax,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f010abe1:	8b 45 08             	mov    0x8(%ebp),%eax
f010abe4:	8b 15 f0 1d 86 f0    	mov    0xf0861df0,%edx
f010abea:	29 d0                	sub    %edx,%eax
f010abec:	c1 f8 04             	sar    $0x4,%eax
f010abef:	89 c2                	mov    %eax,%edx
f010abf1:	89 d0                	mov    %edx,%eax
f010abf3:	c1 e0 03             	shl    $0x3,%eax
f010abf6:	01 d0                	add    %edx,%eax
f010abf8:	01 c0                	add    %eax,%eax
f010abfa:	01 d0                	add    %edx,%eax
f010abfc:	c1 e0 03             	shl    $0x3,%eax
f010abff:	01 d0                	add    %edx,%eax
f010ac01:	89 c1                	mov    %eax,%ecx
f010ac03:	c1 e1 08             	shl    $0x8,%ecx
f010ac06:	01 c8                	add    %ecx,%eax
f010ac08:	01 c0                	add    %eax,%eax
f010ac0a:	01 d0                	add    %edx,%eax
f010ac0c:	01 c0                	add    %eax,%eax
f010ac0e:	01 d0                	add    %edx,%eax
f010ac10:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010ac17:	01 d0                	add    %edx,%eax
f010ac19:	89 c2                	mov    %eax,%edx
f010ac1b:	c1 e2 09             	shl    $0x9,%edx
f010ac1e:	29 c2                	sub    %eax,%edx
f010ac20:	89 d0                	mov    %edx,%eax
f010ac22:	f7 d8                	neg    %eax
f010ac24:	0b 45 f4             	or     -0xc(%ebp),%eax
f010ac27:	89 c2                	mov    %eax,%edx
f010ac29:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac2c:	89 50 4c             	mov    %edx,0x4c(%eax)

	//cprintf("ENV_CREATE: envID = %d, orig index in envs = %d, calc index using ENVX = %d\n", e->env_id, (e - envs), ENVX(e->env_id));

	// Set the basic status variables.
	//2017====================================================
	if (curenv == NULL)
f010ac2f:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010ac34:	85 c0                	test   %eax,%eax
f010ac36:	75 0c                	jne    f010ac44 <complete_environment_initialization+0x120>
		e->env_parent_id = 0;//no parent;
f010ac38:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac3b:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
f010ac42:	eb 0e                	jmp    f010ac52 <complete_environment_initialization+0x12e>
	else
		e->env_parent_id = curenv->env_id;//curenv is the parent;
f010ac44:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010ac49:	8b 50 4c             	mov    0x4c(%eax),%edx
f010ac4c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac4f:	89 50 50             	mov    %edx,0x50(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f010ac52:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac55:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
	e->env_runs = 0;
f010ac5c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac5f:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
f010ac66:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac69:	83 ec 04             	sub    $0x4,%esp
f010ac6c:	6a 44                	push   $0x44
f010ac6e:	6a 00                	push   $0x0
f010ac70:	50                   	push   %eax
f010ac71:	e8 80 6b 02 00       	call   f01317f6 <memset>
f010ac76:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf.tf_ds = GD_UD | 3;
f010ac79:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac7c:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf.tf_es = GD_UD | 3;
f010ac82:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac85:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf.tf_ss = GD_UD | 3;
f010ac8b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac8e:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf.tf_esp = (uint32*)USTACKTOP;
f010ac94:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac97:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf.tf_cs = GD_UT | 3;
f010ac9e:	8b 45 08             	mov    0x8(%ebp),%eax
f010aca1:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf.tf_eflags |= FL_IF;
f010aca7:	8b 45 08             	mov    0x8(%ebp),%eax
f010acaa:	8b 40 38             	mov    0x38(%eax),%eax
f010acad:	80 cc 02             	or     $0x2,%ah
f010acb0:	89 c2                	mov    %eax,%edx
f010acb2:	8b 45 08             	mov    0x8(%ebp),%eax
f010acb5:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f010acb8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010acbc:	75 17                	jne    f010acd5 <complete_environment_initialization+0x1b1>
f010acbe:	83 ec 04             	sub    $0x4,%esp
f010acc1:	68 9e 65 13 f0       	push   $0xf013659e
f010acc6:	68 6b 03 00 00       	push   $0x36b
f010accb:	68 81 65 13 f0       	push   $0xf0136581
f010acd0:	e8 30 55 ff ff       	call   f0100205 <_panic>
f010acd5:	8b 45 08             	mov    0x8(%ebp),%eax
f010acd8:	8b 40 44             	mov    0x44(%eax),%eax
f010acdb:	85 c0                	test   %eax,%eax
f010acdd:	74 11                	je     f010acf0 <complete_environment_initialization+0x1cc>
f010acdf:	8b 45 08             	mov    0x8(%ebp),%eax
f010ace2:	8b 40 44             	mov    0x44(%eax),%eax
f010ace5:	8b 55 08             	mov    0x8(%ebp),%edx
f010ace8:	8b 52 48             	mov    0x48(%edx),%edx
f010aceb:	89 50 48             	mov    %edx,0x48(%eax)
f010acee:	eb 0b                	jmp    f010acfb <complete_environment_initialization+0x1d7>
f010acf0:	8b 45 08             	mov    0x8(%ebp),%eax
f010acf3:	8b 40 48             	mov    0x48(%eax),%eax
f010acf6:	a3 fc 1d 86 f0       	mov    %eax,0xf0861dfc
f010acfb:	8b 45 08             	mov    0x8(%ebp),%eax
f010acfe:	8b 40 48             	mov    0x48(%eax),%eax
f010ad01:	85 c0                	test   %eax,%eax
f010ad03:	74 11                	je     f010ad16 <complete_environment_initialization+0x1f2>
f010ad05:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad08:	8b 40 48             	mov    0x48(%eax),%eax
f010ad0b:	8b 55 08             	mov    0x8(%ebp),%edx
f010ad0e:	8b 52 44             	mov    0x44(%edx),%edx
f010ad11:	89 50 44             	mov    %edx,0x44(%eax)
f010ad14:	eb 0b                	jmp    f010ad21 <complete_environment_initialization+0x1fd>
f010ad16:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad19:	8b 40 44             	mov    0x44(%eax),%eax
f010ad1c:	a3 f8 1d 86 f0       	mov    %eax,0xf0861df8
f010ad21:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad24:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010ad2b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad2e:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010ad35:	a1 04 1e 86 f0       	mov    0xf0861e04,%eax
f010ad3a:	48                   	dec    %eax
f010ad3b:	a3 04 1e 86 f0       	mov    %eax,0xf0861e04
	return ;
f010ad40:	90                   	nop
}
f010ad41:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010ad44:	c9                   	leave  
f010ad45:	c3                   	ret    

f010ad46 <set_environment_entry_point>:

//===============================================
// 9) SET EIP REG VALUE BY ENV ENTRY POINT:
//===============================================
void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f010ad46:	55                   	push   %ebp
f010ad47:	89 e5                	mov    %esp,%ebp
f010ad49:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010ad4c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ad4f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010ad52:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad55:	8b 00                	mov    (%eax),%eax
f010ad57:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010ad5c:	74 17                	je     f010ad75 <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f010ad5e:	83 ec 04             	sub    $0x4,%esp
f010ad61:	68 d7 66 13 f0       	push   $0xf01366d7
f010ad66:	68 77 03 00 00       	push   $0x377
f010ad6b:	68 81 65 13 f0       	push   $0xf0136581
f010ad70:	e8 90 54 ff ff       	call   f0100205 <_panic>
	e->env_tf.tf_eip = (uint32*)pELFHDR->e_entry ;
f010ad75:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad78:	8b 40 18             	mov    0x18(%eax),%eax
f010ad7b:	89 c2                	mov    %eax,%edx
f010ad7d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad80:	89 50 30             	mov    %edx,0x30(%eax)
}
f010ad83:	90                   	nop
f010ad84:	c9                   	leave  
f010ad85:	c3                   	ret    

f010ad86 <share_pws_at_user_space>:

//===============================================
// 10) SHARE WS AT USER SPACE (READ ONLY):
//===============================================
void share_pws_at_user_space(struct Env* e)
{
f010ad86:	55                   	push   %ebp
f010ad87:	89 e5                	mov    %esp,%ebp
f010ad89:	83 ec 28             	sub    $0x28,%esp
#if USE_KHEAP
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
f010ad8c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad8f:	c7 80 9c 05 00 00 00 	movl   $0xa0000000,0x59c(%eax)
f010ad96:	00 00 a0 
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
f010ad99:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad9c:	8b 40 78             	mov    0x78(%eax),%eax
f010ad9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f010ada2:	8b 45 08             	mov    0x8(%ebp),%eax
f010ada5:	8b 50 74             	mov    0x74(%eax),%edx
f010ada8:	89 d0                	mov    %edx,%eax
f010adaa:	01 c0                	add    %eax,%eax
f010adac:	01 d0                	add    %edx,%eax
f010adae:	c1 e0 03             	shl    $0x3,%eax
f010adb1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	unsigned int dva = (unsigned int) (e->__uptr_pws);
f010adb4:	8b 45 08             	mov    0x8(%ebp),%eax
f010adb7:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010adbd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f010adc0:	8b 45 08             	mov    0x8(%ebp),%eax
f010adc3:	8b 40 78             	mov    0x78(%eax),%eax
f010adc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010adc9:	eb 71                	jmp    f010ae3c <share_pws_at_user_space+0xb6>
	{
		//2017: Copy the table entries instead of mapping (to avoid increasing the number of references of corresponding frames)
		//unsigned int pa = kheap_physical_address(sva);
		//map_frame(e->env_page_directory, to_frame_info(pa), dva, PERM_USER);
		uint32 pa = kheap_physical_address(sva);
f010adcb:	83 ec 0c             	sub    $0xc,%esp
f010adce:	ff 75 f4             	pushl  -0xc(%ebp)
f010add1:	e8 f5 ce ff ff       	call   f0107ccb <kheap_physical_address>
f010add6:	83 c4 10             	add    $0x10,%esp
f010add9:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32* ptr_page_table;
		if (get_page_table(e->env_page_directory,  dva, &ptr_page_table) == TABLE_NOT_EXIST)
f010addc:	8b 45 08             	mov    0x8(%ebp),%eax
f010addf:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ade2:	83 ec 04             	sub    $0x4,%esp
f010ade5:	8d 55 e4             	lea    -0x1c(%ebp),%edx
f010ade8:	52                   	push   %edx
f010ade9:	ff 75 f0             	pushl  -0x10(%ebp)
f010adec:	50                   	push   %eax
f010aded:	e8 9d bc ff ff       	call   f0106a8f <get_page_table>
f010adf2:	83 c4 10             	add    $0x10,%esp
f010adf5:	83 f8 01             	cmp    $0x1,%eax
f010adf8:	75 18                	jne    f010ae12 <share_pws_at_user_space+0x8c>
		{
			ptr_page_table = create_page_table(e->env_page_directory, (uint32) dva);
f010adfa:	8b 45 08             	mov    0x8(%ebp),%eax
f010adfd:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ae00:	83 ec 08             	sub    $0x8,%esp
f010ae03:	ff 75 f0             	pushl  -0x10(%ebp)
f010ae06:	50                   	push   %eax
f010ae07:	e8 d9 bd ff ff       	call   f0106be5 <create_page_table>
f010ae0c:	83 c4 10             	add    $0x10,%esp
f010ae0f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
f010ae12:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ae15:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ae18:	c1 ea 0c             	shr    $0xc,%edx
f010ae1b:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010ae21:	c1 e2 02             	shl    $0x2,%edx
f010ae24:	01 d0                	add    %edx,%eax
f010ae26:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010ae29:	83 ca 05             	or     $0x5,%edx
f010ae2c:	89 10                	mov    %edx,(%eax)
#if USE_KHEAP
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
	unsigned int dva = (unsigned int) (e->__uptr_pws);
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f010ae2e:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010ae35:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f010ae3c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae3f:	8b 40 78             	mov    0x78(%eax),%eax
f010ae42:	89 c2                	mov    %eax,%edx
f010ae44:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ae47:	01 d0                	add    %edx,%eax
f010ae49:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ae4c:	0f 87 79 ff ff ff    	ja     f010adcb <share_pws_at_user_space+0x45>
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
	}
#else
	panic("share_pws_at_user_space(): should not be called when kernel heap is disabled.");
#endif
}
f010ae52:	90                   	nop
f010ae53:	c9                   	leave  
f010ae54:	c3                   	ret    

f010ae55 <unshare_pws_at_user_space>:

//===============================================
// 11) REMOVE THE SHARED WS FROM USER SPACE:
//===============================================
void unshare_pws_at_user_space(struct Env *e)
{
f010ae55:	55                   	push   %ebp
f010ae56:	89 e5                	mov    %esp,%ebp
f010ae58:	83 ec 28             	sub    $0x28,%esp
#if USE_KHEAP
	{
		uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f010ae5b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae5e:	8b 50 74             	mov    0x74(%eax),%edx
f010ae61:	89 d0                	mov    %edx,%eax
f010ae63:	01 c0                	add    %eax,%eax
f010ae65:	01 d0                	add    %edx,%eax
f010ae67:	c1 e0 03             	shl    $0x3,%eax
f010ae6a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		unsigned int sva = (unsigned int) e->__uptr_pws;
f010ae6d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae70:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010ae76:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			//unsigned int pa = kheap_physical_address(sva);
			unmap_frame(e->env_page_directory, sva);
		}
		*/
		unsigned int tsva = ROUNDDOWN((unsigned int) e->__uptr_pws, PTSIZE);
f010ae79:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae7c:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010ae82:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010ae85:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ae88:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010ae8d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		for(; tsva < ((unsigned int) (e->__uptr_pws) + nBytes) ; tsva+=PTSIZE)
f010ae90:	eb 46                	jmp    f010aed8 <unshare_pws_at_user_space+0x83>
		{
			unsigned int * uws_table;
			get_page_table(e->env_page_directory, tsva, &uws_table );
f010ae92:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae95:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ae98:	83 ec 04             	sub    $0x4,%esp
f010ae9b:	8d 55 e0             	lea    -0x20(%ebp),%edx
f010ae9e:	52                   	push   %edx
f010ae9f:	ff 75 f4             	pushl  -0xc(%ebp)
f010aea2:	50                   	push   %eax
f010aea3:	e8 e7 bb ff ff       	call   f0106a8f <get_page_table>
f010aea8:	83 c4 10             	add    $0x10,%esp
			kfree(uws_table);
f010aeab:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010aeae:	83 ec 0c             	sub    $0xc,%esp
f010aeb1:	50                   	push   %eax
f010aeb2:	e8 c0 cc ff ff       	call   f0107b77 <kfree>
f010aeb7:	83 c4 10             	add    $0x10,%esp
			e->env_page_directory[PDX(tsva)] = 0;
f010aeba:	8b 45 08             	mov    0x8(%ebp),%eax
f010aebd:	8b 40 5c             	mov    0x5c(%eax),%eax
f010aec0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aec3:	c1 ea 16             	shr    $0x16,%edx
f010aec6:	c1 e2 02             	shl    $0x2,%edx
f010aec9:	01 d0                	add    %edx,%eax
f010aecb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			//unsigned int pa = kheap_physical_address(sva);
			unmap_frame(e->env_page_directory, sva);
		}
		*/
		unsigned int tsva = ROUNDDOWN((unsigned int) e->__uptr_pws, PTSIZE);
		for(; tsva < ((unsigned int) (e->__uptr_pws) + nBytes) ; tsva+=PTSIZE)
f010aed1:	81 45 f4 00 00 40 00 	addl   $0x400000,-0xc(%ebp)
f010aed8:	8b 45 08             	mov    0x8(%ebp),%eax
f010aedb:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010aee1:	89 c2                	mov    %eax,%edx
f010aee3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010aee6:	01 d0                	add    %edx,%eax
f010aee8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010aeeb:	77 a5                	ja     f010ae92 <unshare_pws_at_user_space+0x3d>

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010aeed:	0f 20 d8             	mov    %cr3,%eax
f010aef0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010aef3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010aef6:	0f 22 d8             	mov    %eax,%cr3
		tlbflush();
	}
#else
	panic("__remove_pws_user_pages(): should not be called when kernel heap is disabled.");
#endif
}
f010aef9:	90                   	nop
f010aefa:	c9                   	leave  
f010aefb:	c3                   	ret    

f010aefc <PROGRAM_SEGMENT_NEXT>:

//===============================================
// 12) SEG NEXT [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f010aefc:	55                   	push   %ebp
f010aefd:	89 e5                	mov    %esp,%ebp
f010aeff:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f010af02:	8b 45 08             	mov    0x8(%ebp),%eax
f010af05:	8b 40 10             	mov    0x10(%eax),%eax
f010af08:	8d 48 01             	lea    0x1(%eax),%ecx
f010af0b:	8b 55 08             	mov    0x8(%ebp),%edx
f010af0e:	89 4a 10             	mov    %ecx,0x10(%edx)
f010af11:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010af14:	8b 45 0c             	mov    0xc(%ebp),%eax
f010af17:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010af1a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010af1d:	8b 00                	mov    (%eax),%eax
f010af1f:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010af24:	74 17                	je     f010af3d <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f010af26:	83 ec 04             	sub    $0x4,%esp
f010af29:	68 d7 66 13 f0       	push   $0xf01366d7
f010af2e:	68 c1 03 00 00       	push   $0x3c1
f010af33:	68 81 65 13 f0       	push   $0xf0136581
f010af38:	e8 c8 52 ff ff       	call   f0100205 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010af3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010af40:	8b 50 1c             	mov    0x1c(%eax),%edx
f010af43:	8b 45 0c             	mov    0xc(%ebp),%eax
f010af46:	01 d0                	add    %edx,%eax
f010af48:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f010af4b:	eb 0f                	jmp    f010af5c <PROGRAM_SEGMENT_NEXT+0x60>
f010af4d:	8b 45 08             	mov    0x8(%ebp),%eax
f010af50:	8b 40 10             	mov    0x10(%eax),%eax
f010af53:	8d 50 01             	lea    0x1(%eax),%edx
f010af56:	8b 45 08             	mov    0x8(%ebp),%eax
f010af59:	89 50 10             	mov    %edx,0x10(%eax)
f010af5c:	8b 45 08             	mov    0x8(%ebp),%eax
f010af5f:	8b 40 10             	mov    0x10(%eax),%eax
f010af62:	c1 e0 05             	shl    $0x5,%eax
f010af65:	89 c2                	mov    %eax,%edx
f010af67:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010af6a:	01 d0                	add    %edx,%eax
f010af6c:	8b 00                	mov    (%eax),%eax
f010af6e:	83 f8 01             	cmp    $0x1,%eax
f010af71:	74 13                	je     f010af86 <PROGRAM_SEGMENT_NEXT+0x8a>
f010af73:	8b 45 08             	mov    0x8(%ebp),%eax
f010af76:	8b 50 10             	mov    0x10(%eax),%edx
f010af79:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010af7c:	8b 40 2c             	mov    0x2c(%eax),%eax
f010af7f:	0f b7 c0             	movzwl %ax,%eax
f010af82:	39 c2                	cmp    %eax,%edx
f010af84:	72 c7                	jb     f010af4d <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f010af86:	8b 45 08             	mov    0x8(%ebp),%eax
f010af89:	8b 40 10             	mov    0x10(%eax),%eax
f010af8c:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f010af8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010af92:	8b 40 2c             	mov    0x2c(%eax),%eax
f010af95:	0f b7 c0             	movzwl %ax,%eax
f010af98:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010af9b:	7e 63                	jle    f010b000 <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010af9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010afa0:	c1 e0 05             	shl    $0x5,%eax
f010afa3:	89 c2                	mov    %eax,%edx
f010afa5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010afa8:	01 d0                	add    %edx,%eax
f010afaa:	8b 50 04             	mov    0x4(%eax),%edx
f010afad:	8b 45 0c             	mov    0xc(%ebp),%eax
f010afb0:	01 c2                	add    %eax,%edx
f010afb2:	8b 45 08             	mov    0x8(%ebp),%eax
f010afb5:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f010afb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010afba:	c1 e0 05             	shl    $0x5,%eax
f010afbd:	89 c2                	mov    %eax,%edx
f010afbf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010afc2:	01 d0                	add    %edx,%eax
f010afc4:	8b 50 14             	mov    0x14(%eax),%edx
f010afc7:	8b 45 08             	mov    0x8(%ebp),%eax
f010afca:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f010afcd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010afd0:	c1 e0 05             	shl    $0x5,%eax
f010afd3:	89 c2                	mov    %eax,%edx
f010afd5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010afd8:	01 d0                	add    %edx,%eax
f010afda:	8b 50 10             	mov    0x10(%eax),%edx
f010afdd:	8b 45 08             	mov    0x8(%ebp),%eax
f010afe0:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f010afe3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010afe6:	c1 e0 05             	shl    $0x5,%eax
f010afe9:	89 c2                	mov    %eax,%edx
f010afeb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010afee:	01 d0                	add    %edx,%eax
f010aff0:	8b 40 08             	mov    0x8(%eax),%eax
f010aff3:	89 c2                	mov    %eax,%edx
f010aff5:	8b 45 08             	mov    0x8(%ebp),%eax
f010aff8:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f010affb:	8b 45 08             	mov    0x8(%ebp),%eax
f010affe:	eb 05                	jmp    f010b005 <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f010b000:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010b005:	c9                   	leave  
f010b006:	c3                   	ret    

f010b007 <PROGRAM_SEGMENT_FIRST>:

//===============================================
// 13) SEG FIRST [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f010b007:	55                   	push   %ebp
f010b008:	89 e5                	mov    %esp,%ebp
f010b00a:	57                   	push   %edi
f010b00b:	56                   	push   %esi
f010b00c:	53                   	push   %ebx
f010b00d:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f010b010:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010b017:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b01a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010b01d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b020:	8b 00                	mov    (%eax),%eax
f010b022:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010b027:	74 17                	je     f010b040 <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f010b029:	83 ec 04             	sub    $0x4,%esp
f010b02c:	68 d7 66 13 f0       	push   $0xf01366d7
f010b031:	68 dd 03 00 00       	push   $0x3dd
f010b036:	68 81 65 13 f0       	push   $0xf0136581
f010b03b:	e8 c5 51 ff ff       	call   f0100205 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010b040:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b043:	8b 50 1c             	mov    0x1c(%eax),%edx
f010b046:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b049:	01 d0                	add    %edx,%eax
f010b04b:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f010b04e:	eb 07                	jmp    f010b057 <PROGRAM_SEGMENT_FIRST+0x50>
f010b050:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b053:	40                   	inc    %eax
f010b054:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010b057:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b05a:	c1 e0 05             	shl    $0x5,%eax
f010b05d:	89 c2                	mov    %eax,%edx
f010b05f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b062:	01 d0                	add    %edx,%eax
f010b064:	8b 00                	mov    (%eax),%eax
f010b066:	83 f8 01             	cmp    $0x1,%eax
f010b069:	74 10                	je     f010b07b <PROGRAM_SEGMENT_FIRST+0x74>
f010b06b:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010b06e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b071:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b074:	0f b7 c0             	movzwl %ax,%eax
f010b077:	39 c2                	cmp    %eax,%edx
f010b079:	72 d5                	jb     f010b050 <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f010b07b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b07e:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f010b081:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b084:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b087:	0f b7 c0             	movzwl %ax,%eax
f010b08a:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010b08d:	7e 68                	jle    f010b0f7 <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010b08f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b092:	c1 e0 05             	shl    $0x5,%eax
f010b095:	89 c2                	mov    %eax,%edx
f010b097:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b09a:	01 d0                	add    %edx,%eax
f010b09c:	8b 50 04             	mov    0x4(%eax),%edx
f010b09f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b0a2:	01 d0                	add    %edx,%eax
f010b0a4:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f010b0a7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b0aa:	c1 e0 05             	shl    $0x5,%eax
f010b0ad:	89 c2                	mov    %eax,%edx
f010b0af:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b0b2:	01 d0                	add    %edx,%eax
f010b0b4:	8b 40 14             	mov    0x14(%eax),%eax
f010b0b7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f010b0ba:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b0bd:	c1 e0 05             	shl    $0x5,%eax
f010b0c0:	89 c2                	mov    %eax,%edx
f010b0c2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b0c5:	01 d0                	add    %edx,%eax
f010b0c7:	8b 40 10             	mov    0x10(%eax),%eax
f010b0ca:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f010b0cd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b0d0:	c1 e0 05             	shl    $0x5,%eax
f010b0d3:	89 c2                	mov    %eax,%edx
f010b0d5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b0d8:	01 d0                	add    %edx,%eax
f010b0da:	8b 40 08             	mov    0x8(%eax),%eax
f010b0dd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f010b0e0:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0e3:	89 c3                	mov    %eax,%ebx
f010b0e5:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010b0e8:	ba 05 00 00 00       	mov    $0x5,%edx
f010b0ed:	89 df                	mov    %ebx,%edi
f010b0ef:	89 c6                	mov    %eax,%esi
f010b0f1:	89 d1                	mov    %edx,%ecx
f010b0f3:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010b0f5:	eb 1c                	jmp    f010b113 <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f010b0f7:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f010b0fe:	8b 45 08             	mov    0x8(%ebp),%eax
f010b101:	89 c3                	mov    %eax,%ebx
f010b103:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010b106:	ba 05 00 00 00       	mov    $0x5,%edx
f010b10b:	89 df                	mov    %ebx,%edi
f010b10d:	89 c6                	mov    %eax,%esi
f010b10f:	89 d1                	mov    %edx,%ecx
f010b111:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010b113:	8b 45 08             	mov    0x8(%ebp),%eax
f010b116:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010b119:	5b                   	pop    %ebx
f010b11a:	5e                   	pop    %esi
f010b11b:	5f                   	pop    %edi
f010b11c:	5d                   	pop    %ebp
f010b11d:	c2 04 00             	ret    $0x4

f010b120 <cleanup_buffers>:

//===============================================
// 14) CLEANUP MODIFIED BUFFER [TO BE USED AS LAST STEP WHEN ADD ENV TO EXIT Q]:
//===============================================
void cleanup_buffers(struct Env* e)
{
f010b120:	55                   	push   %ebp
f010b121:	89 e5                	mov    %esp,%ebp
f010b123:	83 ec 18             	sub    $0x18,%esp
	//NEW !! 2016, remove remaining pages in the modified list
	struct FrameInfo *ptr_fi=NULL ;
f010b126:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010b12d:	a1 b4 26 86 f0       	mov    0xf08626b4,%eax
f010b132:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b135:	e9 c3 00 00 00       	jmp    f010b1fd <cleanup_buffers+0xdd>
	{
		if(ptr_fi->environment == e)
f010b13a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b13d:	8b 40 10             	mov    0x10(%eax),%eax
f010b140:	3b 45 08             	cmp    0x8(%ebp),%eax
f010b143:	0f 85 ac 00 00 00    	jne    f010b1f5 <cleanup_buffers+0xd5>
		{
			pt_clear_page_table_entry(ptr_fi->environment->env_page_directory,ptr_fi->va);
f010b149:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b14c:	8b 50 0c             	mov    0xc(%eax),%edx
f010b14f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b152:	8b 40 10             	mov    0x10(%eax),%eax
f010b155:	8b 40 5c             	mov    0x5c(%eax),%eax
f010b158:	83 ec 08             	sub    $0x8,%esp
f010b15b:	52                   	push   %edx
f010b15c:	50                   	push   %eax
f010b15d:	e8 03 cd ff ff       	call   f0107e65 <pt_clear_page_table_entry>
f010b162:	83 c4 10             	add    $0x10,%esp

			//cprintf("==================\n");
			//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
			LIST_REMOVE(&modified_frame_list, ptr_fi);
f010b165:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b169:	75 17                	jne    f010b182 <cleanup_buffers+0x62>
f010b16b:	83 ec 04             	sub    $0x4,%esp
f010b16e:	68 9e 65 13 f0       	push   $0xf013659e
f010b173:	68 04 04 00 00       	push   $0x404
f010b178:	68 81 65 13 f0       	push   $0xf0136581
f010b17d:	e8 83 50 ff ff       	call   f0100205 <_panic>
f010b182:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b185:	8b 00                	mov    (%eax),%eax
f010b187:	85 c0                	test   %eax,%eax
f010b189:	74 10                	je     f010b19b <cleanup_buffers+0x7b>
f010b18b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b18e:	8b 00                	mov    (%eax),%eax
f010b190:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b193:	8b 52 04             	mov    0x4(%edx),%edx
f010b196:	89 50 04             	mov    %edx,0x4(%eax)
f010b199:	eb 0b                	jmp    f010b1a6 <cleanup_buffers+0x86>
f010b19b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b19e:	8b 40 04             	mov    0x4(%eax),%eax
f010b1a1:	a3 b8 26 86 f0       	mov    %eax,0xf08626b8
f010b1a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b1a9:	8b 40 04             	mov    0x4(%eax),%eax
f010b1ac:	85 c0                	test   %eax,%eax
f010b1ae:	74 0f                	je     f010b1bf <cleanup_buffers+0x9f>
f010b1b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b1b3:	8b 40 04             	mov    0x4(%eax),%eax
f010b1b6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b1b9:	8b 12                	mov    (%edx),%edx
f010b1bb:	89 10                	mov    %edx,(%eax)
f010b1bd:	eb 0a                	jmp    f010b1c9 <cleanup_buffers+0xa9>
f010b1bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b1c2:	8b 00                	mov    (%eax),%eax
f010b1c4:	a3 b4 26 86 f0       	mov    %eax,0xf08626b4
f010b1c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b1cc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010b1d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b1d5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010b1dc:	a1 c0 26 86 f0       	mov    0xf08626c0,%eax
f010b1e1:	48                   	dec    %eax
f010b1e2:	a3 c0 26 86 f0       	mov    %eax,0xf08626c0

			free_frame(ptr_fi);
f010b1e7:	83 ec 0c             	sub    $0xc,%esp
f010b1ea:	ff 75 f4             	pushl  -0xc(%ebp)
f010b1ed:	e8 f3 b7 ff ff       	call   f01069e5 <free_frame>
f010b1f2:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010b1f5:	a1 bc 26 86 f0       	mov    0xf08626bc,%eax
f010b1fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b1fd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b201:	74 07                	je     f010b20a <cleanup_buffers+0xea>
f010b203:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b206:	8b 00                	mov    (%eax),%eax
f010b208:	eb 05                	jmp    f010b20f <cleanup_buffers+0xef>
f010b20a:	b8 00 00 00 00       	mov    $0x0,%eax
f010b20f:	a3 bc 26 86 f0       	mov    %eax,0xf08626bc
f010b214:	a1 bc 26 86 f0       	mov    0xf08626bc,%eax
f010b219:	85 c0                	test   %eax,%eax
f010b21b:	0f 85 19 ff ff ff    	jne    f010b13a <cleanup_buffers+0x1a>
f010b221:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b225:	0f 85 0f ff ff ff    	jne    f010b13a <cleanup_buffers+0x1a>
	}

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f010b22b:	90                   	nop
f010b22c:	c9                   	leave  
f010b22d:	c3                   	ret    

f010b22e <set_program_priority>:
#include "../disk/pagefile_manager.h"
#include "../mem/kheap.h"
#include "../mem/memory_manager.h"

void set_program_priority(struct Env* env, int priority)
{
f010b22e:	55                   	push   %ebp
f010b22f:	89 e5                	mov    %esp,%ebp
f010b231:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] set_program_priority
	//[ALREADY IMPLEMENTED]

	if(priority < 1 || priority > 5)
f010b234:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010b238:	7e 06                	jle    f010b240 <set_program_priority+0x12>
f010b23a:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010b23e:	7e 14                	jle    f010b254 <set_program_priority+0x26>
	{
		panic("Please enter valid priority (1->5)\n");
f010b240:	83 ec 04             	sub    $0x4,%esp
f010b243:	68 f0 66 13 f0       	push   $0xf01366f0
f010b248:	6a 10                	push   $0x10
f010b24a:	68 14 67 13 f0       	push   $0xf0136714
f010b24f:	e8 b1 4f ff ff       	call   f0100205 <_panic>
		return;
	}
	if(env == NULL)
f010b254:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010b258:	74 75                	je     f010b2cf <set_program_priority+0xa1>
		return;
	switch(priority)
f010b25a:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010b25e:	77 56                	ja     f010b2b6 <set_program_priority+0x88>
f010b260:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b263:	c1 e0 02             	shl    $0x2,%eax
f010b266:	05 50 67 13 f0       	add    $0xf0136750,%eax
f010b26b:	8b 00                	mov    (%eax),%eax
f010b26d:	ff e0                	jmp    *%eax
	{
		case PRIORITY_LOW:
			half_WS_Size(env, 1);
f010b26f:	83 ec 08             	sub    $0x8,%esp
f010b272:	6a 01                	push   $0x1
f010b274:	ff 75 08             	pushl  0x8(%ebp)
f010b277:	e8 75 d6 ff ff       	call   f01088f1 <half_WS_Size>
f010b27c:	83 c4 10             	add    $0x10,%esp
			break;
f010b27f:	eb 35                	jmp    f010b2b6 <set_program_priority+0x88>
		case PRIORITY_BELOWNORMAL:
			half_WS_Size(env, 0);
f010b281:	83 ec 08             	sub    $0x8,%esp
f010b284:	6a 00                	push   $0x0
f010b286:	ff 75 08             	pushl  0x8(%ebp)
f010b289:	e8 63 d6 ff ff       	call   f01088f1 <half_WS_Size>
f010b28e:	83 c4 10             	add    $0x10,%esp
			break;
f010b291:	eb 23                	jmp    f010b2b6 <set_program_priority+0x88>
		case PRIORITY_NORMAL:
			// Do Nothing
			break;
		case PRIORITY_ABOVENORMAL:
			double_WS_Size(env, 1);
f010b293:	83 ec 08             	sub    $0x8,%esp
f010b296:	6a 01                	push   $0x1
f010b298:	ff 75 08             	pushl  0x8(%ebp)
f010b29b:	e8 34 d6 ff ff       	call   f01088d4 <double_WS_Size>
f010b2a0:	83 c4 10             	add    $0x10,%esp
			break;
f010b2a3:	eb 11                	jmp    f010b2b6 <set_program_priority+0x88>
		case PRIORITY_HIGH:
			double_WS_Size(env, 0);
f010b2a5:	83 ec 08             	sub    $0x8,%esp
f010b2a8:	6a 00                	push   $0x0
f010b2aa:	ff 75 08             	pushl  0x8(%ebp)
f010b2ad:	e8 22 d6 ff ff       	call   f01088d4 <double_WS_Size>
f010b2b2:	83 c4 10             	add    $0x10,%esp
			break;
f010b2b5:	90                   	nop
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
f010b2b6:	8b 45 08             	mov    0x8(%ebp),%eax
f010b2b9:	8b 40 74             	mov    0x74(%eax),%eax
f010b2bc:	83 ec 08             	sub    $0x8,%esp
f010b2bf:	50                   	push   %eax
f010b2c0:	68 31 67 13 f0       	push   $0xf0136731
f010b2c5:	e8 44 5a ff ff       	call   f0100d0e <cprintf>
f010b2ca:	83 c4 10             	add    $0x10,%esp
f010b2cd:	eb 01                	jmp    f010b2d0 <set_program_priority+0xa2>
	{
		panic("Please enter valid priority (1->5)\n");
		return;
	}
	if(env == NULL)
		return;
f010b2cf:	90                   	nop
			double_WS_Size(env, 0);
			break;
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
}
f010b2d0:	c9                   	leave  
f010b2d1:	c3                   	ret    

f010b2d2 <get_user_program_info>:

// Number of user programs in the program table
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f010b2d2:	55                   	push   %ebp
f010b2d3:	89 e5                	mov    %esp,%ebp
f010b2d5:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b2d8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b2df:	eb 29                	jmp    f010b30a <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f010b2e1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b2e4:	89 d0                	mov    %edx,%eax
f010b2e6:	01 c0                	add    %eax,%eax
f010b2e8:	01 d0                	add    %edx,%eax
f010b2ea:	c1 e0 02             	shl    $0x2,%eax
f010b2ed:	05 00 29 19 f0       	add    $0xf0192900,%eax
f010b2f2:	8b 00                	mov    (%eax),%eax
f010b2f4:	83 ec 08             	sub    $0x8,%esp
f010b2f7:	50                   	push   %eax
f010b2f8:	ff 75 08             	pushl  0x8(%ebp)
f010b2fb:	e8 14 64 02 00       	call   f0131714 <strcmp>
f010b300:	83 c4 10             	add    $0x10,%esp
f010b303:	85 c0                	test   %eax,%eax
f010b305:	74 0f                	je     f010b316 <get_user_program_info+0x44>
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b307:	ff 45 f4             	incl   -0xc(%ebp)
f010b30a:	a1 18 2d 19 f0       	mov    0xf0192d18,%eax
f010b30f:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b312:	7c cd                	jl     f010b2e1 <get_user_program_info+0xf>
f010b314:	eb 01                	jmp    f010b317 <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f010b316:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010b317:	a1 18 2d 19 f0       	mov    0xf0192d18,%eax
f010b31c:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b31f:	75 1a                	jne    f010b33b <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f010b321:	83 ec 08             	sub    $0x8,%esp
f010b324:	ff 75 08             	pushl  0x8(%ebp)
f010b327:	68 e5 72 13 f0       	push   $0xf01372e5
f010b32c:	e8 dd 59 ff ff       	call   f0100d0e <cprintf>
f010b331:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b334:	b8 00 00 00 00       	mov    $0x0,%eax
f010b339:	eb 11                	jmp    f010b34c <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f010b33b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b33e:	89 d0                	mov    %edx,%eax
f010b340:	01 c0                	add    %eax,%eax
f010b342:	01 d0                	add    %edx,%eax
f010b344:	c1 e0 02             	shl    $0x2,%eax
f010b347:	05 00 29 19 f0       	add    $0xf0192900,%eax
}
f010b34c:	c9                   	leave  
f010b34d:	c3                   	ret    

f010b34e <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f010b34e:	55                   	push   %ebp
f010b34f:	89 e5                	mov    %esp,%ebp
f010b351:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b354:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b35b:	eb 30                	jmp    f010b38d <get_user_program_info_by_env+0x3f>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f010b35d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b360:	89 d0                	mov    %edx,%eax
f010b362:	01 c0                	add    %eax,%eax
f010b364:	01 d0                	add    %edx,%eax
f010b366:	c1 e0 02             	shl    $0x2,%eax
f010b369:	05 00 29 19 f0       	add    $0xf0192900,%eax
f010b36e:	8b 00                	mov    (%eax),%eax
f010b370:	8b 55 08             	mov    0x8(%ebp),%edx
f010b373:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f010b379:	83 ec 08             	sub    $0x8,%esp
f010b37c:	50                   	push   %eax
f010b37d:	52                   	push   %edx
f010b37e:	e8 91 63 02 00       	call   f0131714 <strcmp>
f010b383:	83 c4 10             	add    $0x10,%esp
f010b386:	85 c0                	test   %eax,%eax
f010b388:	74 0f                	je     f010b399 <get_user_program_info_by_env+0x4b>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b38a:	ff 45 f4             	incl   -0xc(%ebp)
f010b38d:	a1 18 2d 19 f0       	mov    0xf0192d18,%eax
f010b392:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b395:	7c c6                	jl     f010b35d <get_user_program_info_by_env+0xf>
f010b397:	eb 01                	jmp    f010b39a <get_user_program_info_by_env+0x4c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f010b399:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010b39a:	a1 18 2d 19 f0       	mov    0xf0192d18,%eax
f010b39f:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b3a2:	75 17                	jne    f010b3bb <get_user_program_info_by_env+0x6d>
	{
		cprintf("Unknown user program \n");
f010b3a4:	83 ec 0c             	sub    $0xc,%esp
f010b3a7:	68 00 73 13 f0       	push   $0xf0137300
f010b3ac:	e8 5d 59 ff ff       	call   f0100d0e <cprintf>
f010b3b1:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b3b4:	b8 00 00 00 00       	mov    $0x0,%eax
f010b3b9:	eb 11                	jmp    f010b3cc <get_user_program_info_by_env+0x7e>
	}

	return &userPrograms[i];
f010b3bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b3be:	89 d0                	mov    %edx,%eax
f010b3c0:	01 c0                	add    %eax,%eax
f010b3c2:	01 d0                	add    %edx,%eax
f010b3c4:	c1 e0 02             	shl    $0x2,%eax
f010b3c7:	05 00 29 19 f0       	add    $0xf0192900,%eax
}
f010b3cc:	c9                   	leave  
f010b3cd:	c3                   	ret    

f010b3ce <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f010b3ce:	55                   	push   %ebp
f010b3cf:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f010b3d1:	8b 45 08             	mov    0x8(%ebp),%eax
f010b3d4:	83 f8 13             	cmp    $0x13,%eax
f010b3d7:	77 0c                	ja     f010b3e5 <trapname+0x17>
		return excnames[trapno];
f010b3d9:	8b 45 08             	mov    0x8(%ebp),%eax
f010b3dc:	8b 04 85 40 77 13 f0 	mov    -0xfec88c0(,%eax,4),%eax
f010b3e3:	eb 12                	jmp    f010b3f7 <trapname+0x29>
	if (trapno == T_SYSCALL)
f010b3e5:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010b3e9:	75 07                	jne    f010b3f2 <trapname+0x24>
		return "System call";
f010b3eb:	b8 20 73 13 f0       	mov    $0xf0137320,%eax
f010b3f0:	eb 05                	jmp    f010b3f7 <trapname+0x29>
	return "(unknown trap)";
f010b3f2:	b8 2c 73 13 f0       	mov    $0xf013732c,%eax
}
f010b3f7:	5d                   	pop    %ebp
f010b3f8:	c3                   	ret    

f010b3f9 <idt_init>:


void
idt_init(void)
{
f010b3f9:	55                   	push   %ebp
f010b3fa:	89 e5                	mov    %esp,%ebp
f010b3fc:	83 ec 10             	sub    $0x10,%esp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	//initialize idt
	SETGATE(idt[T_PGFLT], 0, GD_KT , &PAGE_FAULT, 0) ;
f010b3ff:	b8 8e ca 10 f0       	mov    $0xf010ca8e,%eax
f010b404:	66 a3 90 1e 86 f0    	mov    %ax,0xf0861e90
f010b40a:	66 c7 05 92 1e 86 f0 	movw   $0x8,0xf0861e92
f010b411:	08 00 
f010b413:	a0 94 1e 86 f0       	mov    0xf0861e94,%al
f010b418:	83 e0 e0             	and    $0xffffffe0,%eax
f010b41b:	a2 94 1e 86 f0       	mov    %al,0xf0861e94
f010b420:	a0 94 1e 86 f0       	mov    0xf0861e94,%al
f010b425:	83 e0 1f             	and    $0x1f,%eax
f010b428:	a2 94 1e 86 f0       	mov    %al,0xf0861e94
f010b42d:	a0 95 1e 86 f0       	mov    0xf0861e95,%al
f010b432:	83 e0 f0             	and    $0xfffffff0,%eax
f010b435:	83 c8 0e             	or     $0xe,%eax
f010b438:	a2 95 1e 86 f0       	mov    %al,0xf0861e95
f010b43d:	a0 95 1e 86 f0       	mov    0xf0861e95,%al
f010b442:	83 e0 ef             	and    $0xffffffef,%eax
f010b445:	a2 95 1e 86 f0       	mov    %al,0xf0861e95
f010b44a:	a0 95 1e 86 f0       	mov    0xf0861e95,%al
f010b44f:	83 e0 9f             	and    $0xffffff9f,%eax
f010b452:	a2 95 1e 86 f0       	mov    %al,0xf0861e95
f010b457:	a0 95 1e 86 f0       	mov    0xf0861e95,%al
f010b45c:	83 c8 80             	or     $0xffffff80,%eax
f010b45f:	a2 95 1e 86 f0       	mov    %al,0xf0861e95
f010b464:	b8 8e ca 10 f0       	mov    $0xf010ca8e,%eax
f010b469:	c1 e8 10             	shr    $0x10,%eax
f010b46c:	66 a3 96 1e 86 f0    	mov    %ax,0xf0861e96
	SETGATE(idt[T_SYSCALL], 0, GD_KT , &SYSCALL_HANDLER, 3) ;
f010b472:	b8 96 ca 10 f0       	mov    $0xf010ca96,%eax
f010b477:	66 a3 a0 1f 86 f0    	mov    %ax,0xf0861fa0
f010b47d:	66 c7 05 a2 1f 86 f0 	movw   $0x8,0xf0861fa2
f010b484:	08 00 
f010b486:	a0 a4 1f 86 f0       	mov    0xf0861fa4,%al
f010b48b:	83 e0 e0             	and    $0xffffffe0,%eax
f010b48e:	a2 a4 1f 86 f0       	mov    %al,0xf0861fa4
f010b493:	a0 a4 1f 86 f0       	mov    0xf0861fa4,%al
f010b498:	83 e0 1f             	and    $0x1f,%eax
f010b49b:	a2 a4 1f 86 f0       	mov    %al,0xf0861fa4
f010b4a0:	a0 a5 1f 86 f0       	mov    0xf0861fa5,%al
f010b4a5:	83 e0 f0             	and    $0xfffffff0,%eax
f010b4a8:	83 c8 0e             	or     $0xe,%eax
f010b4ab:	a2 a5 1f 86 f0       	mov    %al,0xf0861fa5
f010b4b0:	a0 a5 1f 86 f0       	mov    0xf0861fa5,%al
f010b4b5:	83 e0 ef             	and    $0xffffffef,%eax
f010b4b8:	a2 a5 1f 86 f0       	mov    %al,0xf0861fa5
f010b4bd:	a0 a5 1f 86 f0       	mov    0xf0861fa5,%al
f010b4c2:	83 c8 60             	or     $0x60,%eax
f010b4c5:	a2 a5 1f 86 f0       	mov    %al,0xf0861fa5
f010b4ca:	a0 a5 1f 86 f0       	mov    0xf0861fa5,%al
f010b4cf:	83 c8 80             	or     $0xffffff80,%eax
f010b4d2:	a2 a5 1f 86 f0       	mov    %al,0xf0861fa5
f010b4d7:	b8 96 ca 10 f0       	mov    $0xf010ca96,%eax
f010b4dc:	c1 e8 10             	shr    $0x10,%eax
f010b4df:	66 a3 a6 1f 86 f0    	mov    %ax,0xf0861fa6
	SETGATE(idt[T_DBLFLT], 0, GD_KT , &DBL_FAULT, 0) ;
f010b4e5:	b8 a0 ca 10 f0       	mov    $0xf010caa0,%eax
f010b4ea:	66 a3 60 1e 86 f0    	mov    %ax,0xf0861e60
f010b4f0:	66 c7 05 62 1e 86 f0 	movw   $0x8,0xf0861e62
f010b4f7:	08 00 
f010b4f9:	a0 64 1e 86 f0       	mov    0xf0861e64,%al
f010b4fe:	83 e0 e0             	and    $0xffffffe0,%eax
f010b501:	a2 64 1e 86 f0       	mov    %al,0xf0861e64
f010b506:	a0 64 1e 86 f0       	mov    0xf0861e64,%al
f010b50b:	83 e0 1f             	and    $0x1f,%eax
f010b50e:	a2 64 1e 86 f0       	mov    %al,0xf0861e64
f010b513:	a0 65 1e 86 f0       	mov    0xf0861e65,%al
f010b518:	83 e0 f0             	and    $0xfffffff0,%eax
f010b51b:	83 c8 0e             	or     $0xe,%eax
f010b51e:	a2 65 1e 86 f0       	mov    %al,0xf0861e65
f010b523:	a0 65 1e 86 f0       	mov    0xf0861e65,%al
f010b528:	83 e0 ef             	and    $0xffffffef,%eax
f010b52b:	a2 65 1e 86 f0       	mov    %al,0xf0861e65
f010b530:	a0 65 1e 86 f0       	mov    0xf0861e65,%al
f010b535:	83 e0 9f             	and    $0xffffff9f,%eax
f010b538:	a2 65 1e 86 f0       	mov    %al,0xf0861e65
f010b53d:	a0 65 1e 86 f0       	mov    0xf0861e65,%al
f010b542:	83 c8 80             	or     $0xffffff80,%eax
f010b545:	a2 65 1e 86 f0       	mov    %al,0xf0861e65
f010b54a:	b8 a0 ca 10 f0       	mov    $0xf010caa0,%eax
f010b54f:	c1 e8 10             	shr    $0x10,%eax
f010b552:	66 a3 66 1e 86 f0    	mov    %ax,0xf0861e66


	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f010b558:	b8 a8 ca 10 f0       	mov    $0xf010caa8,%eax
f010b55d:	66 a3 20 1e 86 f0    	mov    %ax,0xf0861e20
f010b563:	66 c7 05 22 1e 86 f0 	movw   $0x8,0xf0861e22
f010b56a:	08 00 
f010b56c:	a0 24 1e 86 f0       	mov    0xf0861e24,%al
f010b571:	83 e0 e0             	and    $0xffffffe0,%eax
f010b574:	a2 24 1e 86 f0       	mov    %al,0xf0861e24
f010b579:	a0 24 1e 86 f0       	mov    0xf0861e24,%al
f010b57e:	83 e0 1f             	and    $0x1f,%eax
f010b581:	a2 24 1e 86 f0       	mov    %al,0xf0861e24
f010b586:	a0 25 1e 86 f0       	mov    0xf0861e25,%al
f010b58b:	83 e0 f0             	and    $0xfffffff0,%eax
f010b58e:	83 c8 0e             	or     $0xe,%eax
f010b591:	a2 25 1e 86 f0       	mov    %al,0xf0861e25
f010b596:	a0 25 1e 86 f0       	mov    0xf0861e25,%al
f010b59b:	83 e0 ef             	and    $0xffffffef,%eax
f010b59e:	a2 25 1e 86 f0       	mov    %al,0xf0861e25
f010b5a3:	a0 25 1e 86 f0       	mov    0xf0861e25,%al
f010b5a8:	83 c8 60             	or     $0x60,%eax
f010b5ab:	a2 25 1e 86 f0       	mov    %al,0xf0861e25
f010b5b0:	a0 25 1e 86 f0       	mov    0xf0861e25,%al
f010b5b5:	83 c8 80             	or     $0xffffff80,%eax
f010b5b8:	a2 25 1e 86 f0       	mov    %al,0xf0861e25
f010b5bd:	b8 a8 ca 10 f0       	mov    $0xf010caa8,%eax
f010b5c2:	c1 e8 10             	shr    $0x10,%eax
f010b5c5:	66 a3 26 1e 86 f0    	mov    %ax,0xf0861e26
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f010b5cb:	b8 b2 ca 10 f0       	mov    $0xf010cab2,%eax
f010b5d0:	66 a3 28 1e 86 f0    	mov    %ax,0xf0861e28
f010b5d6:	66 c7 05 2a 1e 86 f0 	movw   $0x8,0xf0861e2a
f010b5dd:	08 00 
f010b5df:	a0 2c 1e 86 f0       	mov    0xf0861e2c,%al
f010b5e4:	83 e0 e0             	and    $0xffffffe0,%eax
f010b5e7:	a2 2c 1e 86 f0       	mov    %al,0xf0861e2c
f010b5ec:	a0 2c 1e 86 f0       	mov    0xf0861e2c,%al
f010b5f1:	83 e0 1f             	and    $0x1f,%eax
f010b5f4:	a2 2c 1e 86 f0       	mov    %al,0xf0861e2c
f010b5f9:	a0 2d 1e 86 f0       	mov    0xf0861e2d,%al
f010b5fe:	83 c8 0f             	or     $0xf,%eax
f010b601:	a2 2d 1e 86 f0       	mov    %al,0xf0861e2d
f010b606:	a0 2d 1e 86 f0       	mov    0xf0861e2d,%al
f010b60b:	83 e0 ef             	and    $0xffffffef,%eax
f010b60e:	a2 2d 1e 86 f0       	mov    %al,0xf0861e2d
f010b613:	a0 2d 1e 86 f0       	mov    0xf0861e2d,%al
f010b618:	83 c8 60             	or     $0x60,%eax
f010b61b:	a2 2d 1e 86 f0       	mov    %al,0xf0861e2d
f010b620:	a0 2d 1e 86 f0       	mov    0xf0861e2d,%al
f010b625:	83 c8 80             	or     $0xffffff80,%eax
f010b628:	a2 2d 1e 86 f0       	mov    %al,0xf0861e2d
f010b62d:	b8 b2 ca 10 f0       	mov    $0xf010cab2,%eax
f010b632:	c1 e8 10             	shr    $0x10,%eax
f010b635:	66 a3 2e 1e 86 f0    	mov    %ax,0xf0861e2e
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f010b63b:	b8 bc ca 10 f0       	mov    $0xf010cabc,%eax
f010b640:	66 a3 30 1e 86 f0    	mov    %ax,0xf0861e30
f010b646:	66 c7 05 32 1e 86 f0 	movw   $0x8,0xf0861e32
f010b64d:	08 00 
f010b64f:	a0 34 1e 86 f0       	mov    0xf0861e34,%al
f010b654:	83 e0 e0             	and    $0xffffffe0,%eax
f010b657:	a2 34 1e 86 f0       	mov    %al,0xf0861e34
f010b65c:	a0 34 1e 86 f0       	mov    0xf0861e34,%al
f010b661:	83 e0 1f             	and    $0x1f,%eax
f010b664:	a2 34 1e 86 f0       	mov    %al,0xf0861e34
f010b669:	a0 35 1e 86 f0       	mov    0xf0861e35,%al
f010b66e:	83 e0 f0             	and    $0xfffffff0,%eax
f010b671:	83 c8 0e             	or     $0xe,%eax
f010b674:	a2 35 1e 86 f0       	mov    %al,0xf0861e35
f010b679:	a0 35 1e 86 f0       	mov    0xf0861e35,%al
f010b67e:	83 e0 ef             	and    $0xffffffef,%eax
f010b681:	a2 35 1e 86 f0       	mov    %al,0xf0861e35
f010b686:	a0 35 1e 86 f0       	mov    0xf0861e35,%al
f010b68b:	83 c8 60             	or     $0x60,%eax
f010b68e:	a2 35 1e 86 f0       	mov    %al,0xf0861e35
f010b693:	a0 35 1e 86 f0       	mov    0xf0861e35,%al
f010b698:	83 c8 80             	or     $0xffffff80,%eax
f010b69b:	a2 35 1e 86 f0       	mov    %al,0xf0861e35
f010b6a0:	b8 bc ca 10 f0       	mov    $0xf010cabc,%eax
f010b6a5:	c1 e8 10             	shr    $0x10,%eax
f010b6a8:	66 a3 36 1e 86 f0    	mov    %ax,0xf0861e36
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f010b6ae:	b8 c6 ca 10 f0       	mov    $0xf010cac6,%eax
f010b6b3:	66 a3 38 1e 86 f0    	mov    %ax,0xf0861e38
f010b6b9:	66 c7 05 3a 1e 86 f0 	movw   $0x8,0xf0861e3a
f010b6c0:	08 00 
f010b6c2:	a0 3c 1e 86 f0       	mov    0xf0861e3c,%al
f010b6c7:	83 e0 e0             	and    $0xffffffe0,%eax
f010b6ca:	a2 3c 1e 86 f0       	mov    %al,0xf0861e3c
f010b6cf:	a0 3c 1e 86 f0       	mov    0xf0861e3c,%al
f010b6d4:	83 e0 1f             	and    $0x1f,%eax
f010b6d7:	a2 3c 1e 86 f0       	mov    %al,0xf0861e3c
f010b6dc:	a0 3d 1e 86 f0       	mov    0xf0861e3d,%al
f010b6e1:	83 c8 0f             	or     $0xf,%eax
f010b6e4:	a2 3d 1e 86 f0       	mov    %al,0xf0861e3d
f010b6e9:	a0 3d 1e 86 f0       	mov    0xf0861e3d,%al
f010b6ee:	83 e0 ef             	and    $0xffffffef,%eax
f010b6f1:	a2 3d 1e 86 f0       	mov    %al,0xf0861e3d
f010b6f6:	a0 3d 1e 86 f0       	mov    0xf0861e3d,%al
f010b6fb:	83 c8 60             	or     $0x60,%eax
f010b6fe:	a2 3d 1e 86 f0       	mov    %al,0xf0861e3d
f010b703:	a0 3d 1e 86 f0       	mov    0xf0861e3d,%al
f010b708:	83 c8 80             	or     $0xffffff80,%eax
f010b70b:	a2 3d 1e 86 f0       	mov    %al,0xf0861e3d
f010b710:	b8 c6 ca 10 f0       	mov    $0xf010cac6,%eax
f010b715:	c1 e8 10             	shr    $0x10,%eax
f010b718:	66 a3 3e 1e 86 f0    	mov    %ax,0xf0861e3e
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f010b71e:	b8 d0 ca 10 f0       	mov    $0xf010cad0,%eax
f010b723:	66 a3 40 1e 86 f0    	mov    %ax,0xf0861e40
f010b729:	66 c7 05 42 1e 86 f0 	movw   $0x8,0xf0861e42
f010b730:	08 00 
f010b732:	a0 44 1e 86 f0       	mov    0xf0861e44,%al
f010b737:	83 e0 e0             	and    $0xffffffe0,%eax
f010b73a:	a2 44 1e 86 f0       	mov    %al,0xf0861e44
f010b73f:	a0 44 1e 86 f0       	mov    0xf0861e44,%al
f010b744:	83 e0 1f             	and    $0x1f,%eax
f010b747:	a2 44 1e 86 f0       	mov    %al,0xf0861e44
f010b74c:	a0 45 1e 86 f0       	mov    0xf0861e45,%al
f010b751:	83 c8 0f             	or     $0xf,%eax
f010b754:	a2 45 1e 86 f0       	mov    %al,0xf0861e45
f010b759:	a0 45 1e 86 f0       	mov    0xf0861e45,%al
f010b75e:	83 e0 ef             	and    $0xffffffef,%eax
f010b761:	a2 45 1e 86 f0       	mov    %al,0xf0861e45
f010b766:	a0 45 1e 86 f0       	mov    0xf0861e45,%al
f010b76b:	83 c8 60             	or     $0x60,%eax
f010b76e:	a2 45 1e 86 f0       	mov    %al,0xf0861e45
f010b773:	a0 45 1e 86 f0       	mov    0xf0861e45,%al
f010b778:	83 c8 80             	or     $0xffffff80,%eax
f010b77b:	a2 45 1e 86 f0       	mov    %al,0xf0861e45
f010b780:	b8 d0 ca 10 f0       	mov    $0xf010cad0,%eax
f010b785:	c1 e8 10             	shr    $0x10,%eax
f010b788:	66 a3 46 1e 86 f0    	mov    %ax,0xf0861e46
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f010b78e:	b8 da ca 10 f0       	mov    $0xf010cada,%eax
f010b793:	66 a3 48 1e 86 f0    	mov    %ax,0xf0861e48
f010b799:	66 c7 05 4a 1e 86 f0 	movw   $0x8,0xf0861e4a
f010b7a0:	08 00 
f010b7a2:	a0 4c 1e 86 f0       	mov    0xf0861e4c,%al
f010b7a7:	83 e0 e0             	and    $0xffffffe0,%eax
f010b7aa:	a2 4c 1e 86 f0       	mov    %al,0xf0861e4c
f010b7af:	a0 4c 1e 86 f0       	mov    0xf0861e4c,%al
f010b7b4:	83 e0 1f             	and    $0x1f,%eax
f010b7b7:	a2 4c 1e 86 f0       	mov    %al,0xf0861e4c
f010b7bc:	a0 4d 1e 86 f0       	mov    0xf0861e4d,%al
f010b7c1:	83 e0 f0             	and    $0xfffffff0,%eax
f010b7c4:	83 c8 0e             	or     $0xe,%eax
f010b7c7:	a2 4d 1e 86 f0       	mov    %al,0xf0861e4d
f010b7cc:	a0 4d 1e 86 f0       	mov    0xf0861e4d,%al
f010b7d1:	83 e0 ef             	and    $0xffffffef,%eax
f010b7d4:	a2 4d 1e 86 f0       	mov    %al,0xf0861e4d
f010b7d9:	a0 4d 1e 86 f0       	mov    0xf0861e4d,%al
f010b7de:	83 c8 60             	or     $0x60,%eax
f010b7e1:	a2 4d 1e 86 f0       	mov    %al,0xf0861e4d
f010b7e6:	a0 4d 1e 86 f0       	mov    0xf0861e4d,%al
f010b7eb:	83 c8 80             	or     $0xffffff80,%eax
f010b7ee:	a2 4d 1e 86 f0       	mov    %al,0xf0861e4d
f010b7f3:	b8 da ca 10 f0       	mov    $0xf010cada,%eax
f010b7f8:	c1 e8 10             	shr    $0x10,%eax
f010b7fb:	66 a3 4e 1e 86 f0    	mov    %ax,0xf0861e4e
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f010b801:	b8 e4 ca 10 f0       	mov    $0xf010cae4,%eax
f010b806:	66 a3 50 1e 86 f0    	mov    %ax,0xf0861e50
f010b80c:	66 c7 05 52 1e 86 f0 	movw   $0x8,0xf0861e52
f010b813:	08 00 
f010b815:	a0 54 1e 86 f0       	mov    0xf0861e54,%al
f010b81a:	83 e0 e0             	and    $0xffffffe0,%eax
f010b81d:	a2 54 1e 86 f0       	mov    %al,0xf0861e54
f010b822:	a0 54 1e 86 f0       	mov    0xf0861e54,%al
f010b827:	83 e0 1f             	and    $0x1f,%eax
f010b82a:	a2 54 1e 86 f0       	mov    %al,0xf0861e54
f010b82f:	a0 55 1e 86 f0       	mov    0xf0861e55,%al
f010b834:	83 e0 f0             	and    $0xfffffff0,%eax
f010b837:	83 c8 0e             	or     $0xe,%eax
f010b83a:	a2 55 1e 86 f0       	mov    %al,0xf0861e55
f010b83f:	a0 55 1e 86 f0       	mov    0xf0861e55,%al
f010b844:	83 e0 ef             	and    $0xffffffef,%eax
f010b847:	a2 55 1e 86 f0       	mov    %al,0xf0861e55
f010b84c:	a0 55 1e 86 f0       	mov    0xf0861e55,%al
f010b851:	83 c8 60             	or     $0x60,%eax
f010b854:	a2 55 1e 86 f0       	mov    %al,0xf0861e55
f010b859:	a0 55 1e 86 f0       	mov    0xf0861e55,%al
f010b85e:	83 c8 80             	or     $0xffffff80,%eax
f010b861:	a2 55 1e 86 f0       	mov    %al,0xf0861e55
f010b866:	b8 e4 ca 10 f0       	mov    $0xf010cae4,%eax
f010b86b:	c1 e8 10             	shr    $0x10,%eax
f010b86e:	66 a3 56 1e 86 f0    	mov    %ax,0xf0861e56
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f010b874:	b8 ee ca 10 f0       	mov    $0xf010caee,%eax
f010b879:	66 a3 58 1e 86 f0    	mov    %ax,0xf0861e58
f010b87f:	66 c7 05 5a 1e 86 f0 	movw   $0x8,0xf0861e5a
f010b886:	08 00 
f010b888:	a0 5c 1e 86 f0       	mov    0xf0861e5c,%al
f010b88d:	83 e0 e0             	and    $0xffffffe0,%eax
f010b890:	a2 5c 1e 86 f0       	mov    %al,0xf0861e5c
f010b895:	a0 5c 1e 86 f0       	mov    0xf0861e5c,%al
f010b89a:	83 e0 1f             	and    $0x1f,%eax
f010b89d:	a2 5c 1e 86 f0       	mov    %al,0xf0861e5c
f010b8a2:	a0 5d 1e 86 f0       	mov    0xf0861e5d,%al
f010b8a7:	83 e0 f0             	and    $0xfffffff0,%eax
f010b8aa:	83 c8 0e             	or     $0xe,%eax
f010b8ad:	a2 5d 1e 86 f0       	mov    %al,0xf0861e5d
f010b8b2:	a0 5d 1e 86 f0       	mov    0xf0861e5d,%al
f010b8b7:	83 e0 ef             	and    $0xffffffef,%eax
f010b8ba:	a2 5d 1e 86 f0       	mov    %al,0xf0861e5d
f010b8bf:	a0 5d 1e 86 f0       	mov    0xf0861e5d,%al
f010b8c4:	83 c8 60             	or     $0x60,%eax
f010b8c7:	a2 5d 1e 86 f0       	mov    %al,0xf0861e5d
f010b8cc:	a0 5d 1e 86 f0       	mov    0xf0861e5d,%al
f010b8d1:	83 c8 80             	or     $0xffffff80,%eax
f010b8d4:	a2 5d 1e 86 f0       	mov    %al,0xf0861e5d
f010b8d9:	b8 ee ca 10 f0       	mov    $0xf010caee,%eax
f010b8de:	c1 e8 10             	shr    $0x10,%eax
f010b8e1:	66 a3 5e 1e 86 f0    	mov    %ax,0xf0861e5e
	//SETGATE(idt[T_DBLFLT   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f010b8e7:	b8 f8 ca 10 f0       	mov    $0xf010caf8,%eax
f010b8ec:	66 a3 70 1e 86 f0    	mov    %ax,0xf0861e70
f010b8f2:	66 c7 05 72 1e 86 f0 	movw   $0x8,0xf0861e72
f010b8f9:	08 00 
f010b8fb:	a0 74 1e 86 f0       	mov    0xf0861e74,%al
f010b900:	83 e0 e0             	and    $0xffffffe0,%eax
f010b903:	a2 74 1e 86 f0       	mov    %al,0xf0861e74
f010b908:	a0 74 1e 86 f0       	mov    0xf0861e74,%al
f010b90d:	83 e0 1f             	and    $0x1f,%eax
f010b910:	a2 74 1e 86 f0       	mov    %al,0xf0861e74
f010b915:	a0 75 1e 86 f0       	mov    0xf0861e75,%al
f010b91a:	83 e0 f0             	and    $0xfffffff0,%eax
f010b91d:	83 c8 0e             	or     $0xe,%eax
f010b920:	a2 75 1e 86 f0       	mov    %al,0xf0861e75
f010b925:	a0 75 1e 86 f0       	mov    0xf0861e75,%al
f010b92a:	83 e0 ef             	and    $0xffffffef,%eax
f010b92d:	a2 75 1e 86 f0       	mov    %al,0xf0861e75
f010b932:	a0 75 1e 86 f0       	mov    0xf0861e75,%al
f010b937:	83 c8 60             	or     $0x60,%eax
f010b93a:	a2 75 1e 86 f0       	mov    %al,0xf0861e75
f010b93f:	a0 75 1e 86 f0       	mov    0xf0861e75,%al
f010b944:	83 c8 80             	or     $0xffffff80,%eax
f010b947:	a2 75 1e 86 f0       	mov    %al,0xf0861e75
f010b94c:	b8 f8 ca 10 f0       	mov    $0xf010caf8,%eax
f010b951:	c1 e8 10             	shr    $0x10,%eax
f010b954:	66 a3 76 1e 86 f0    	mov    %ax,0xf0861e76
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f010b95a:	b8 00 cb 10 f0       	mov    $0xf010cb00,%eax
f010b95f:	66 a3 78 1e 86 f0    	mov    %ax,0xf0861e78
f010b965:	66 c7 05 7a 1e 86 f0 	movw   $0x8,0xf0861e7a
f010b96c:	08 00 
f010b96e:	a0 7c 1e 86 f0       	mov    0xf0861e7c,%al
f010b973:	83 e0 e0             	and    $0xffffffe0,%eax
f010b976:	a2 7c 1e 86 f0       	mov    %al,0xf0861e7c
f010b97b:	a0 7c 1e 86 f0       	mov    0xf0861e7c,%al
f010b980:	83 e0 1f             	and    $0x1f,%eax
f010b983:	a2 7c 1e 86 f0       	mov    %al,0xf0861e7c
f010b988:	a0 7d 1e 86 f0       	mov    0xf0861e7d,%al
f010b98d:	83 e0 f0             	and    $0xfffffff0,%eax
f010b990:	83 c8 0e             	or     $0xe,%eax
f010b993:	a2 7d 1e 86 f0       	mov    %al,0xf0861e7d
f010b998:	a0 7d 1e 86 f0       	mov    0xf0861e7d,%al
f010b99d:	83 e0 ef             	and    $0xffffffef,%eax
f010b9a0:	a2 7d 1e 86 f0       	mov    %al,0xf0861e7d
f010b9a5:	a0 7d 1e 86 f0       	mov    0xf0861e7d,%al
f010b9aa:	83 c8 60             	or     $0x60,%eax
f010b9ad:	a2 7d 1e 86 f0       	mov    %al,0xf0861e7d
f010b9b2:	a0 7d 1e 86 f0       	mov    0xf0861e7d,%al
f010b9b7:	83 c8 80             	or     $0xffffff80,%eax
f010b9ba:	a2 7d 1e 86 f0       	mov    %al,0xf0861e7d
f010b9bf:	b8 00 cb 10 f0       	mov    $0xf010cb00,%eax
f010b9c4:	c1 e8 10             	shr    $0x10,%eax
f010b9c7:	66 a3 7e 1e 86 f0    	mov    %ax,0xf0861e7e
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f010b9cd:	b8 04 cb 10 f0       	mov    $0xf010cb04,%eax
f010b9d2:	66 a3 80 1e 86 f0    	mov    %ax,0xf0861e80
f010b9d8:	66 c7 05 82 1e 86 f0 	movw   $0x8,0xf0861e82
f010b9df:	08 00 
f010b9e1:	a0 84 1e 86 f0       	mov    0xf0861e84,%al
f010b9e6:	83 e0 e0             	and    $0xffffffe0,%eax
f010b9e9:	a2 84 1e 86 f0       	mov    %al,0xf0861e84
f010b9ee:	a0 84 1e 86 f0       	mov    0xf0861e84,%al
f010b9f3:	83 e0 1f             	and    $0x1f,%eax
f010b9f6:	a2 84 1e 86 f0       	mov    %al,0xf0861e84
f010b9fb:	a0 85 1e 86 f0       	mov    0xf0861e85,%al
f010ba00:	83 e0 f0             	and    $0xfffffff0,%eax
f010ba03:	83 c8 0e             	or     $0xe,%eax
f010ba06:	a2 85 1e 86 f0       	mov    %al,0xf0861e85
f010ba0b:	a0 85 1e 86 f0       	mov    0xf0861e85,%al
f010ba10:	83 e0 ef             	and    $0xffffffef,%eax
f010ba13:	a2 85 1e 86 f0       	mov    %al,0xf0861e85
f010ba18:	a0 85 1e 86 f0       	mov    0xf0861e85,%al
f010ba1d:	83 c8 60             	or     $0x60,%eax
f010ba20:	a2 85 1e 86 f0       	mov    %al,0xf0861e85
f010ba25:	a0 85 1e 86 f0       	mov    0xf0861e85,%al
f010ba2a:	83 c8 80             	or     $0xffffff80,%eax
f010ba2d:	a2 85 1e 86 f0       	mov    %al,0xf0861e85
f010ba32:	b8 04 cb 10 f0       	mov    $0xf010cb04,%eax
f010ba37:	c1 e8 10             	shr    $0x10,%eax
f010ba3a:	66 a3 86 1e 86 f0    	mov    %ax,0xf0861e86
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f010ba40:	b8 08 cb 10 f0       	mov    $0xf010cb08,%eax
f010ba45:	66 a3 88 1e 86 f0    	mov    %ax,0xf0861e88
f010ba4b:	66 c7 05 8a 1e 86 f0 	movw   $0x8,0xf0861e8a
f010ba52:	08 00 
f010ba54:	a0 8c 1e 86 f0       	mov    0xf0861e8c,%al
f010ba59:	83 e0 e0             	and    $0xffffffe0,%eax
f010ba5c:	a2 8c 1e 86 f0       	mov    %al,0xf0861e8c
f010ba61:	a0 8c 1e 86 f0       	mov    0xf0861e8c,%al
f010ba66:	83 e0 1f             	and    $0x1f,%eax
f010ba69:	a2 8c 1e 86 f0       	mov    %al,0xf0861e8c
f010ba6e:	a0 8d 1e 86 f0       	mov    0xf0861e8d,%al
f010ba73:	83 e0 f0             	and    $0xfffffff0,%eax
f010ba76:	83 c8 0e             	or     $0xe,%eax
f010ba79:	a2 8d 1e 86 f0       	mov    %al,0xf0861e8d
f010ba7e:	a0 8d 1e 86 f0       	mov    0xf0861e8d,%al
f010ba83:	83 e0 ef             	and    $0xffffffef,%eax
f010ba86:	a2 8d 1e 86 f0       	mov    %al,0xf0861e8d
f010ba8b:	a0 8d 1e 86 f0       	mov    0xf0861e8d,%al
f010ba90:	83 c8 60             	or     $0x60,%eax
f010ba93:	a2 8d 1e 86 f0       	mov    %al,0xf0861e8d
f010ba98:	a0 8d 1e 86 f0       	mov    0xf0861e8d,%al
f010ba9d:	83 c8 80             	or     $0xffffff80,%eax
f010baa0:	a2 8d 1e 86 f0       	mov    %al,0xf0861e8d
f010baa5:	b8 08 cb 10 f0       	mov    $0xf010cb08,%eax
f010baaa:	c1 e8 10             	shr    $0x10,%eax
f010baad:	66 a3 8e 1e 86 f0    	mov    %ax,0xf0861e8e
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f010bab3:	b8 0c cb 10 f0       	mov    $0xf010cb0c,%eax
f010bab8:	66 a3 a0 1e 86 f0    	mov    %ax,0xf0861ea0
f010babe:	66 c7 05 a2 1e 86 f0 	movw   $0x8,0xf0861ea2
f010bac5:	08 00 
f010bac7:	a0 a4 1e 86 f0       	mov    0xf0861ea4,%al
f010bacc:	83 e0 e0             	and    $0xffffffe0,%eax
f010bacf:	a2 a4 1e 86 f0       	mov    %al,0xf0861ea4
f010bad4:	a0 a4 1e 86 f0       	mov    0xf0861ea4,%al
f010bad9:	83 e0 1f             	and    $0x1f,%eax
f010badc:	a2 a4 1e 86 f0       	mov    %al,0xf0861ea4
f010bae1:	a0 a5 1e 86 f0       	mov    0xf0861ea5,%al
f010bae6:	83 e0 f0             	and    $0xfffffff0,%eax
f010bae9:	83 c8 0e             	or     $0xe,%eax
f010baec:	a2 a5 1e 86 f0       	mov    %al,0xf0861ea5
f010baf1:	a0 a5 1e 86 f0       	mov    0xf0861ea5,%al
f010baf6:	83 e0 ef             	and    $0xffffffef,%eax
f010baf9:	a2 a5 1e 86 f0       	mov    %al,0xf0861ea5
f010bafe:	a0 a5 1e 86 f0       	mov    0xf0861ea5,%al
f010bb03:	83 c8 60             	or     $0x60,%eax
f010bb06:	a2 a5 1e 86 f0       	mov    %al,0xf0861ea5
f010bb0b:	a0 a5 1e 86 f0       	mov    0xf0861ea5,%al
f010bb10:	83 c8 80             	or     $0xffffff80,%eax
f010bb13:	a2 a5 1e 86 f0       	mov    %al,0xf0861ea5
f010bb18:	b8 0c cb 10 f0       	mov    $0xf010cb0c,%eax
f010bb1d:	c1 e8 10             	shr    $0x10,%eax
f010bb20:	66 a3 a6 1e 86 f0    	mov    %ax,0xf0861ea6
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f010bb26:	b8 12 cb 10 f0       	mov    $0xf010cb12,%eax
f010bb2b:	66 a3 a8 1e 86 f0    	mov    %ax,0xf0861ea8
f010bb31:	66 c7 05 aa 1e 86 f0 	movw   $0x8,0xf0861eaa
f010bb38:	08 00 
f010bb3a:	a0 ac 1e 86 f0       	mov    0xf0861eac,%al
f010bb3f:	83 e0 e0             	and    $0xffffffe0,%eax
f010bb42:	a2 ac 1e 86 f0       	mov    %al,0xf0861eac
f010bb47:	a0 ac 1e 86 f0       	mov    0xf0861eac,%al
f010bb4c:	83 e0 1f             	and    $0x1f,%eax
f010bb4f:	a2 ac 1e 86 f0       	mov    %al,0xf0861eac
f010bb54:	a0 ad 1e 86 f0       	mov    0xf0861ead,%al
f010bb59:	83 e0 f0             	and    $0xfffffff0,%eax
f010bb5c:	83 c8 0e             	or     $0xe,%eax
f010bb5f:	a2 ad 1e 86 f0       	mov    %al,0xf0861ead
f010bb64:	a0 ad 1e 86 f0       	mov    0xf0861ead,%al
f010bb69:	83 e0 ef             	and    $0xffffffef,%eax
f010bb6c:	a2 ad 1e 86 f0       	mov    %al,0xf0861ead
f010bb71:	a0 ad 1e 86 f0       	mov    0xf0861ead,%al
f010bb76:	83 c8 60             	or     $0x60,%eax
f010bb79:	a2 ad 1e 86 f0       	mov    %al,0xf0861ead
f010bb7e:	a0 ad 1e 86 f0       	mov    0xf0861ead,%al
f010bb83:	83 c8 80             	or     $0xffffff80,%eax
f010bb86:	a2 ad 1e 86 f0       	mov    %al,0xf0861ead
f010bb8b:	b8 12 cb 10 f0       	mov    $0xf010cb12,%eax
f010bb90:	c1 e8 10             	shr    $0x10,%eax
f010bb93:	66 a3 ae 1e 86 f0    	mov    %ax,0xf0861eae
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f010bb99:	b8 16 cb 10 f0       	mov    $0xf010cb16,%eax
f010bb9e:	66 a3 b0 1e 86 f0    	mov    %ax,0xf0861eb0
f010bba4:	66 c7 05 b2 1e 86 f0 	movw   $0x8,0xf0861eb2
f010bbab:	08 00 
f010bbad:	a0 b4 1e 86 f0       	mov    0xf0861eb4,%al
f010bbb2:	83 e0 e0             	and    $0xffffffe0,%eax
f010bbb5:	a2 b4 1e 86 f0       	mov    %al,0xf0861eb4
f010bbba:	a0 b4 1e 86 f0       	mov    0xf0861eb4,%al
f010bbbf:	83 e0 1f             	and    $0x1f,%eax
f010bbc2:	a2 b4 1e 86 f0       	mov    %al,0xf0861eb4
f010bbc7:	a0 b5 1e 86 f0       	mov    0xf0861eb5,%al
f010bbcc:	83 e0 f0             	and    $0xfffffff0,%eax
f010bbcf:	83 c8 0e             	or     $0xe,%eax
f010bbd2:	a2 b5 1e 86 f0       	mov    %al,0xf0861eb5
f010bbd7:	a0 b5 1e 86 f0       	mov    0xf0861eb5,%al
f010bbdc:	83 e0 ef             	and    $0xffffffef,%eax
f010bbdf:	a2 b5 1e 86 f0       	mov    %al,0xf0861eb5
f010bbe4:	a0 b5 1e 86 f0       	mov    0xf0861eb5,%al
f010bbe9:	83 c8 60             	or     $0x60,%eax
f010bbec:	a2 b5 1e 86 f0       	mov    %al,0xf0861eb5
f010bbf1:	a0 b5 1e 86 f0       	mov    0xf0861eb5,%al
f010bbf6:	83 c8 80             	or     $0xffffff80,%eax
f010bbf9:	a2 b5 1e 86 f0       	mov    %al,0xf0861eb5
f010bbfe:	b8 16 cb 10 f0       	mov    $0xf010cb16,%eax
f010bc03:	c1 e8 10             	shr    $0x10,%eax
f010bc06:	66 a3 b6 1e 86 f0    	mov    %ax,0xf0861eb6
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f010bc0c:	b8 1c cb 10 f0       	mov    $0xf010cb1c,%eax
f010bc11:	66 a3 b8 1e 86 f0    	mov    %ax,0xf0861eb8
f010bc17:	66 c7 05 ba 1e 86 f0 	movw   $0x8,0xf0861eba
f010bc1e:	08 00 
f010bc20:	a0 bc 1e 86 f0       	mov    0xf0861ebc,%al
f010bc25:	83 e0 e0             	and    $0xffffffe0,%eax
f010bc28:	a2 bc 1e 86 f0       	mov    %al,0xf0861ebc
f010bc2d:	a0 bc 1e 86 f0       	mov    0xf0861ebc,%al
f010bc32:	83 e0 1f             	and    $0x1f,%eax
f010bc35:	a2 bc 1e 86 f0       	mov    %al,0xf0861ebc
f010bc3a:	a0 bd 1e 86 f0       	mov    0xf0861ebd,%al
f010bc3f:	83 e0 f0             	and    $0xfffffff0,%eax
f010bc42:	83 c8 0e             	or     $0xe,%eax
f010bc45:	a2 bd 1e 86 f0       	mov    %al,0xf0861ebd
f010bc4a:	a0 bd 1e 86 f0       	mov    0xf0861ebd,%al
f010bc4f:	83 e0 ef             	and    $0xffffffef,%eax
f010bc52:	a2 bd 1e 86 f0       	mov    %al,0xf0861ebd
f010bc57:	a0 bd 1e 86 f0       	mov    0xf0861ebd,%al
f010bc5c:	83 c8 60             	or     $0x60,%eax
f010bc5f:	a2 bd 1e 86 f0       	mov    %al,0xf0861ebd
f010bc64:	a0 bd 1e 86 f0       	mov    0xf0861ebd,%al
f010bc69:	83 c8 80             	or     $0xffffff80,%eax
f010bc6c:	a2 bd 1e 86 f0       	mov    %al,0xf0861ebd
f010bc71:	b8 1c cb 10 f0       	mov    $0xf010cb1c,%eax
f010bc76:	c1 e8 10             	shr    $0x10,%eax
f010bc79:	66 a3 be 1e 86 f0    	mov    %ax,0xf0861ebe


	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &ALL_FAULTS32, 3) ;
f010bc7f:	b8 22 cb 10 f0       	mov    $0xf010cb22,%eax
f010bc84:	66 a3 20 1f 86 f0    	mov    %ax,0xf0861f20
f010bc8a:	66 c7 05 22 1f 86 f0 	movw   $0x8,0xf0861f22
f010bc91:	08 00 
f010bc93:	a0 24 1f 86 f0       	mov    0xf0861f24,%al
f010bc98:	83 e0 e0             	and    $0xffffffe0,%eax
f010bc9b:	a2 24 1f 86 f0       	mov    %al,0xf0861f24
f010bca0:	a0 24 1f 86 f0       	mov    0xf0861f24,%al
f010bca5:	83 e0 1f             	and    $0x1f,%eax
f010bca8:	a2 24 1f 86 f0       	mov    %al,0xf0861f24
f010bcad:	a0 25 1f 86 f0       	mov    0xf0861f25,%al
f010bcb2:	83 e0 f0             	and    $0xfffffff0,%eax
f010bcb5:	83 c8 0e             	or     $0xe,%eax
f010bcb8:	a2 25 1f 86 f0       	mov    %al,0xf0861f25
f010bcbd:	a0 25 1f 86 f0       	mov    0xf0861f25,%al
f010bcc2:	83 e0 ef             	and    $0xffffffef,%eax
f010bcc5:	a2 25 1f 86 f0       	mov    %al,0xf0861f25
f010bcca:	a0 25 1f 86 f0       	mov    0xf0861f25,%al
f010bccf:	83 c8 60             	or     $0x60,%eax
f010bcd2:	a2 25 1f 86 f0       	mov    %al,0xf0861f25
f010bcd7:	a0 25 1f 86 f0       	mov    0xf0861f25,%al
f010bcdc:	83 c8 80             	or     $0xffffff80,%eax
f010bcdf:	a2 25 1f 86 f0       	mov    %al,0xf0861f25
f010bce4:	b8 22 cb 10 f0       	mov    $0xf010cb22,%eax
f010bce9:	c1 e8 10             	shr    $0x10,%eax
f010bcec:	66 a3 26 1f 86 f0    	mov    %ax,0xf0861f26
	SETGATE(idt[33], 0, GD_KT , &ALL_FAULTS33, 3) ;
f010bcf2:	b8 28 cb 10 f0       	mov    $0xf010cb28,%eax
f010bcf7:	66 a3 28 1f 86 f0    	mov    %ax,0xf0861f28
f010bcfd:	66 c7 05 2a 1f 86 f0 	movw   $0x8,0xf0861f2a
f010bd04:	08 00 
f010bd06:	a0 2c 1f 86 f0       	mov    0xf0861f2c,%al
f010bd0b:	83 e0 e0             	and    $0xffffffe0,%eax
f010bd0e:	a2 2c 1f 86 f0       	mov    %al,0xf0861f2c
f010bd13:	a0 2c 1f 86 f0       	mov    0xf0861f2c,%al
f010bd18:	83 e0 1f             	and    $0x1f,%eax
f010bd1b:	a2 2c 1f 86 f0       	mov    %al,0xf0861f2c
f010bd20:	a0 2d 1f 86 f0       	mov    0xf0861f2d,%al
f010bd25:	83 e0 f0             	and    $0xfffffff0,%eax
f010bd28:	83 c8 0e             	or     $0xe,%eax
f010bd2b:	a2 2d 1f 86 f0       	mov    %al,0xf0861f2d
f010bd30:	a0 2d 1f 86 f0       	mov    0xf0861f2d,%al
f010bd35:	83 e0 ef             	and    $0xffffffef,%eax
f010bd38:	a2 2d 1f 86 f0       	mov    %al,0xf0861f2d
f010bd3d:	a0 2d 1f 86 f0       	mov    0xf0861f2d,%al
f010bd42:	83 c8 60             	or     $0x60,%eax
f010bd45:	a2 2d 1f 86 f0       	mov    %al,0xf0861f2d
f010bd4a:	a0 2d 1f 86 f0       	mov    0xf0861f2d,%al
f010bd4f:	83 c8 80             	or     $0xffffff80,%eax
f010bd52:	a2 2d 1f 86 f0       	mov    %al,0xf0861f2d
f010bd57:	b8 28 cb 10 f0       	mov    $0xf010cb28,%eax
f010bd5c:	c1 e8 10             	shr    $0x10,%eax
f010bd5f:	66 a3 2e 1f 86 f0    	mov    %ax,0xf0861f2e
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f010bd65:	b8 2e cb 10 f0       	mov    $0xf010cb2e,%eax
f010bd6a:	66 a3 30 1f 86 f0    	mov    %ax,0xf0861f30
f010bd70:	66 c7 05 32 1f 86 f0 	movw   $0x8,0xf0861f32
f010bd77:	08 00 
f010bd79:	a0 34 1f 86 f0       	mov    0xf0861f34,%al
f010bd7e:	83 e0 e0             	and    $0xffffffe0,%eax
f010bd81:	a2 34 1f 86 f0       	mov    %al,0xf0861f34
f010bd86:	a0 34 1f 86 f0       	mov    0xf0861f34,%al
f010bd8b:	83 e0 1f             	and    $0x1f,%eax
f010bd8e:	a2 34 1f 86 f0       	mov    %al,0xf0861f34
f010bd93:	a0 35 1f 86 f0       	mov    0xf0861f35,%al
f010bd98:	83 e0 f0             	and    $0xfffffff0,%eax
f010bd9b:	83 c8 0e             	or     $0xe,%eax
f010bd9e:	a2 35 1f 86 f0       	mov    %al,0xf0861f35
f010bda3:	a0 35 1f 86 f0       	mov    0xf0861f35,%al
f010bda8:	83 e0 ef             	and    $0xffffffef,%eax
f010bdab:	a2 35 1f 86 f0       	mov    %al,0xf0861f35
f010bdb0:	a0 35 1f 86 f0       	mov    0xf0861f35,%al
f010bdb5:	83 c8 60             	or     $0x60,%eax
f010bdb8:	a2 35 1f 86 f0       	mov    %al,0xf0861f35
f010bdbd:	a0 35 1f 86 f0       	mov    0xf0861f35,%al
f010bdc2:	83 c8 80             	or     $0xffffff80,%eax
f010bdc5:	a2 35 1f 86 f0       	mov    %al,0xf0861f35
f010bdca:	b8 2e cb 10 f0       	mov    $0xf010cb2e,%eax
f010bdcf:	c1 e8 10             	shr    $0x10,%eax
f010bdd2:	66 a3 36 1f 86 f0    	mov    %ax,0xf0861f36
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f010bdd8:	b8 34 cb 10 f0       	mov    $0xf010cb34,%eax
f010bddd:	66 a3 38 1f 86 f0    	mov    %ax,0xf0861f38
f010bde3:	66 c7 05 3a 1f 86 f0 	movw   $0x8,0xf0861f3a
f010bdea:	08 00 
f010bdec:	a0 3c 1f 86 f0       	mov    0xf0861f3c,%al
f010bdf1:	83 e0 e0             	and    $0xffffffe0,%eax
f010bdf4:	a2 3c 1f 86 f0       	mov    %al,0xf0861f3c
f010bdf9:	a0 3c 1f 86 f0       	mov    0xf0861f3c,%al
f010bdfe:	83 e0 1f             	and    $0x1f,%eax
f010be01:	a2 3c 1f 86 f0       	mov    %al,0xf0861f3c
f010be06:	a0 3d 1f 86 f0       	mov    0xf0861f3d,%al
f010be0b:	83 e0 f0             	and    $0xfffffff0,%eax
f010be0e:	83 c8 0e             	or     $0xe,%eax
f010be11:	a2 3d 1f 86 f0       	mov    %al,0xf0861f3d
f010be16:	a0 3d 1f 86 f0       	mov    0xf0861f3d,%al
f010be1b:	83 e0 ef             	and    $0xffffffef,%eax
f010be1e:	a2 3d 1f 86 f0       	mov    %al,0xf0861f3d
f010be23:	a0 3d 1f 86 f0       	mov    0xf0861f3d,%al
f010be28:	83 c8 60             	or     $0x60,%eax
f010be2b:	a2 3d 1f 86 f0       	mov    %al,0xf0861f3d
f010be30:	a0 3d 1f 86 f0       	mov    0xf0861f3d,%al
f010be35:	83 c8 80             	or     $0xffffff80,%eax
f010be38:	a2 3d 1f 86 f0       	mov    %al,0xf0861f3d
f010be3d:	b8 34 cb 10 f0       	mov    $0xf010cb34,%eax
f010be42:	c1 e8 10             	shr    $0x10,%eax
f010be45:	66 a3 3e 1f 86 f0    	mov    %ax,0xf0861f3e
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f010be4b:	b8 3a cb 10 f0       	mov    $0xf010cb3a,%eax
f010be50:	66 a3 40 1f 86 f0    	mov    %ax,0xf0861f40
f010be56:	66 c7 05 42 1f 86 f0 	movw   $0x8,0xf0861f42
f010be5d:	08 00 
f010be5f:	a0 44 1f 86 f0       	mov    0xf0861f44,%al
f010be64:	83 e0 e0             	and    $0xffffffe0,%eax
f010be67:	a2 44 1f 86 f0       	mov    %al,0xf0861f44
f010be6c:	a0 44 1f 86 f0       	mov    0xf0861f44,%al
f010be71:	83 e0 1f             	and    $0x1f,%eax
f010be74:	a2 44 1f 86 f0       	mov    %al,0xf0861f44
f010be79:	a0 45 1f 86 f0       	mov    0xf0861f45,%al
f010be7e:	83 e0 f0             	and    $0xfffffff0,%eax
f010be81:	83 c8 0e             	or     $0xe,%eax
f010be84:	a2 45 1f 86 f0       	mov    %al,0xf0861f45
f010be89:	a0 45 1f 86 f0       	mov    0xf0861f45,%al
f010be8e:	83 e0 ef             	and    $0xffffffef,%eax
f010be91:	a2 45 1f 86 f0       	mov    %al,0xf0861f45
f010be96:	a0 45 1f 86 f0       	mov    0xf0861f45,%al
f010be9b:	83 c8 60             	or     $0x60,%eax
f010be9e:	a2 45 1f 86 f0       	mov    %al,0xf0861f45
f010bea3:	a0 45 1f 86 f0       	mov    0xf0861f45,%al
f010bea8:	83 c8 80             	or     $0xffffff80,%eax
f010beab:	a2 45 1f 86 f0       	mov    %al,0xf0861f45
f010beb0:	b8 3a cb 10 f0       	mov    $0xf010cb3a,%eax
f010beb5:	c1 e8 10             	shr    $0x10,%eax
f010beb8:	66 a3 46 1f 86 f0    	mov    %ax,0xf0861f46
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f010bebe:	b8 40 cb 10 f0       	mov    $0xf010cb40,%eax
f010bec3:	66 a3 48 1f 86 f0    	mov    %ax,0xf0861f48
f010bec9:	66 c7 05 4a 1f 86 f0 	movw   $0x8,0xf0861f4a
f010bed0:	08 00 
f010bed2:	a0 4c 1f 86 f0       	mov    0xf0861f4c,%al
f010bed7:	83 e0 e0             	and    $0xffffffe0,%eax
f010beda:	a2 4c 1f 86 f0       	mov    %al,0xf0861f4c
f010bedf:	a0 4c 1f 86 f0       	mov    0xf0861f4c,%al
f010bee4:	83 e0 1f             	and    $0x1f,%eax
f010bee7:	a2 4c 1f 86 f0       	mov    %al,0xf0861f4c
f010beec:	a0 4d 1f 86 f0       	mov    0xf0861f4d,%al
f010bef1:	83 e0 f0             	and    $0xfffffff0,%eax
f010bef4:	83 c8 0e             	or     $0xe,%eax
f010bef7:	a2 4d 1f 86 f0       	mov    %al,0xf0861f4d
f010befc:	a0 4d 1f 86 f0       	mov    0xf0861f4d,%al
f010bf01:	83 e0 ef             	and    $0xffffffef,%eax
f010bf04:	a2 4d 1f 86 f0       	mov    %al,0xf0861f4d
f010bf09:	a0 4d 1f 86 f0       	mov    0xf0861f4d,%al
f010bf0e:	83 c8 60             	or     $0x60,%eax
f010bf11:	a2 4d 1f 86 f0       	mov    %al,0xf0861f4d
f010bf16:	a0 4d 1f 86 f0       	mov    0xf0861f4d,%al
f010bf1b:	83 c8 80             	or     $0xffffff80,%eax
f010bf1e:	a2 4d 1f 86 f0       	mov    %al,0xf0861f4d
f010bf23:	b8 40 cb 10 f0       	mov    $0xf010cb40,%eax
f010bf28:	c1 e8 10             	shr    $0x10,%eax
f010bf2b:	66 a3 4e 1f 86 f0    	mov    %ax,0xf0861f4e
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f010bf31:	b8 46 cb 10 f0       	mov    $0xf010cb46,%eax
f010bf36:	66 a3 50 1f 86 f0    	mov    %ax,0xf0861f50
f010bf3c:	66 c7 05 52 1f 86 f0 	movw   $0x8,0xf0861f52
f010bf43:	08 00 
f010bf45:	a0 54 1f 86 f0       	mov    0xf0861f54,%al
f010bf4a:	83 e0 e0             	and    $0xffffffe0,%eax
f010bf4d:	a2 54 1f 86 f0       	mov    %al,0xf0861f54
f010bf52:	a0 54 1f 86 f0       	mov    0xf0861f54,%al
f010bf57:	83 e0 1f             	and    $0x1f,%eax
f010bf5a:	a2 54 1f 86 f0       	mov    %al,0xf0861f54
f010bf5f:	a0 55 1f 86 f0       	mov    0xf0861f55,%al
f010bf64:	83 e0 f0             	and    $0xfffffff0,%eax
f010bf67:	83 c8 0e             	or     $0xe,%eax
f010bf6a:	a2 55 1f 86 f0       	mov    %al,0xf0861f55
f010bf6f:	a0 55 1f 86 f0       	mov    0xf0861f55,%al
f010bf74:	83 e0 ef             	and    $0xffffffef,%eax
f010bf77:	a2 55 1f 86 f0       	mov    %al,0xf0861f55
f010bf7c:	a0 55 1f 86 f0       	mov    0xf0861f55,%al
f010bf81:	83 c8 60             	or     $0x60,%eax
f010bf84:	a2 55 1f 86 f0       	mov    %al,0xf0861f55
f010bf89:	a0 55 1f 86 f0       	mov    0xf0861f55,%al
f010bf8e:	83 c8 80             	or     $0xffffff80,%eax
f010bf91:	a2 55 1f 86 f0       	mov    %al,0xf0861f55
f010bf96:	b8 46 cb 10 f0       	mov    $0xf010cb46,%eax
f010bf9b:	c1 e8 10             	shr    $0x10,%eax
f010bf9e:	66 a3 56 1f 86 f0    	mov    %ax,0xf0861f56
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f010bfa4:	b8 4c cb 10 f0       	mov    $0xf010cb4c,%eax
f010bfa9:	66 a3 58 1f 86 f0    	mov    %ax,0xf0861f58
f010bfaf:	66 c7 05 5a 1f 86 f0 	movw   $0x8,0xf0861f5a
f010bfb6:	08 00 
f010bfb8:	a0 5c 1f 86 f0       	mov    0xf0861f5c,%al
f010bfbd:	83 e0 e0             	and    $0xffffffe0,%eax
f010bfc0:	a2 5c 1f 86 f0       	mov    %al,0xf0861f5c
f010bfc5:	a0 5c 1f 86 f0       	mov    0xf0861f5c,%al
f010bfca:	83 e0 1f             	and    $0x1f,%eax
f010bfcd:	a2 5c 1f 86 f0       	mov    %al,0xf0861f5c
f010bfd2:	a0 5d 1f 86 f0       	mov    0xf0861f5d,%al
f010bfd7:	83 e0 f0             	and    $0xfffffff0,%eax
f010bfda:	83 c8 0e             	or     $0xe,%eax
f010bfdd:	a2 5d 1f 86 f0       	mov    %al,0xf0861f5d
f010bfe2:	a0 5d 1f 86 f0       	mov    0xf0861f5d,%al
f010bfe7:	83 e0 ef             	and    $0xffffffef,%eax
f010bfea:	a2 5d 1f 86 f0       	mov    %al,0xf0861f5d
f010bfef:	a0 5d 1f 86 f0       	mov    0xf0861f5d,%al
f010bff4:	83 c8 60             	or     $0x60,%eax
f010bff7:	a2 5d 1f 86 f0       	mov    %al,0xf0861f5d
f010bffc:	a0 5d 1f 86 f0       	mov    0xf0861f5d,%al
f010c001:	83 c8 80             	or     $0xffffff80,%eax
f010c004:	a2 5d 1f 86 f0       	mov    %al,0xf0861f5d
f010c009:	b8 4c cb 10 f0       	mov    $0xf010cb4c,%eax
f010c00e:	c1 e8 10             	shr    $0x10,%eax
f010c011:	66 a3 5e 1f 86 f0    	mov    %ax,0xf0861f5e
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f010c017:	b8 52 cb 10 f0       	mov    $0xf010cb52,%eax
f010c01c:	66 a3 60 1f 86 f0    	mov    %ax,0xf0861f60
f010c022:	66 c7 05 62 1f 86 f0 	movw   $0x8,0xf0861f62
f010c029:	08 00 
f010c02b:	a0 64 1f 86 f0       	mov    0xf0861f64,%al
f010c030:	83 e0 e0             	and    $0xffffffe0,%eax
f010c033:	a2 64 1f 86 f0       	mov    %al,0xf0861f64
f010c038:	a0 64 1f 86 f0       	mov    0xf0861f64,%al
f010c03d:	83 e0 1f             	and    $0x1f,%eax
f010c040:	a2 64 1f 86 f0       	mov    %al,0xf0861f64
f010c045:	a0 65 1f 86 f0       	mov    0xf0861f65,%al
f010c04a:	83 e0 f0             	and    $0xfffffff0,%eax
f010c04d:	83 c8 0e             	or     $0xe,%eax
f010c050:	a2 65 1f 86 f0       	mov    %al,0xf0861f65
f010c055:	a0 65 1f 86 f0       	mov    0xf0861f65,%al
f010c05a:	83 e0 ef             	and    $0xffffffef,%eax
f010c05d:	a2 65 1f 86 f0       	mov    %al,0xf0861f65
f010c062:	a0 65 1f 86 f0       	mov    0xf0861f65,%al
f010c067:	83 c8 60             	or     $0x60,%eax
f010c06a:	a2 65 1f 86 f0       	mov    %al,0xf0861f65
f010c06f:	a0 65 1f 86 f0       	mov    0xf0861f65,%al
f010c074:	83 c8 80             	or     $0xffffff80,%eax
f010c077:	a2 65 1f 86 f0       	mov    %al,0xf0861f65
f010c07c:	b8 52 cb 10 f0       	mov    $0xf010cb52,%eax
f010c081:	c1 e8 10             	shr    $0x10,%eax
f010c084:	66 a3 66 1f 86 f0    	mov    %ax,0xf0861f66
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f010c08a:	b8 58 cb 10 f0       	mov    $0xf010cb58,%eax
f010c08f:	66 a3 68 1f 86 f0    	mov    %ax,0xf0861f68
f010c095:	66 c7 05 6a 1f 86 f0 	movw   $0x8,0xf0861f6a
f010c09c:	08 00 
f010c09e:	a0 6c 1f 86 f0       	mov    0xf0861f6c,%al
f010c0a3:	83 e0 e0             	and    $0xffffffe0,%eax
f010c0a6:	a2 6c 1f 86 f0       	mov    %al,0xf0861f6c
f010c0ab:	a0 6c 1f 86 f0       	mov    0xf0861f6c,%al
f010c0b0:	83 e0 1f             	and    $0x1f,%eax
f010c0b3:	a2 6c 1f 86 f0       	mov    %al,0xf0861f6c
f010c0b8:	a0 6d 1f 86 f0       	mov    0xf0861f6d,%al
f010c0bd:	83 e0 f0             	and    $0xfffffff0,%eax
f010c0c0:	83 c8 0e             	or     $0xe,%eax
f010c0c3:	a2 6d 1f 86 f0       	mov    %al,0xf0861f6d
f010c0c8:	a0 6d 1f 86 f0       	mov    0xf0861f6d,%al
f010c0cd:	83 e0 ef             	and    $0xffffffef,%eax
f010c0d0:	a2 6d 1f 86 f0       	mov    %al,0xf0861f6d
f010c0d5:	a0 6d 1f 86 f0       	mov    0xf0861f6d,%al
f010c0da:	83 c8 60             	or     $0x60,%eax
f010c0dd:	a2 6d 1f 86 f0       	mov    %al,0xf0861f6d
f010c0e2:	a0 6d 1f 86 f0       	mov    0xf0861f6d,%al
f010c0e7:	83 c8 80             	or     $0xffffff80,%eax
f010c0ea:	a2 6d 1f 86 f0       	mov    %al,0xf0861f6d
f010c0ef:	b8 58 cb 10 f0       	mov    $0xf010cb58,%eax
f010c0f4:	c1 e8 10             	shr    $0x10,%eax
f010c0f7:	66 a3 6e 1f 86 f0    	mov    %ax,0xf0861f6e
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f010c0fd:	b8 5e cb 10 f0       	mov    $0xf010cb5e,%eax
f010c102:	66 a3 70 1f 86 f0    	mov    %ax,0xf0861f70
f010c108:	66 c7 05 72 1f 86 f0 	movw   $0x8,0xf0861f72
f010c10f:	08 00 
f010c111:	a0 74 1f 86 f0       	mov    0xf0861f74,%al
f010c116:	83 e0 e0             	and    $0xffffffe0,%eax
f010c119:	a2 74 1f 86 f0       	mov    %al,0xf0861f74
f010c11e:	a0 74 1f 86 f0       	mov    0xf0861f74,%al
f010c123:	83 e0 1f             	and    $0x1f,%eax
f010c126:	a2 74 1f 86 f0       	mov    %al,0xf0861f74
f010c12b:	a0 75 1f 86 f0       	mov    0xf0861f75,%al
f010c130:	83 e0 f0             	and    $0xfffffff0,%eax
f010c133:	83 c8 0e             	or     $0xe,%eax
f010c136:	a2 75 1f 86 f0       	mov    %al,0xf0861f75
f010c13b:	a0 75 1f 86 f0       	mov    0xf0861f75,%al
f010c140:	83 e0 ef             	and    $0xffffffef,%eax
f010c143:	a2 75 1f 86 f0       	mov    %al,0xf0861f75
f010c148:	a0 75 1f 86 f0       	mov    0xf0861f75,%al
f010c14d:	83 c8 60             	or     $0x60,%eax
f010c150:	a2 75 1f 86 f0       	mov    %al,0xf0861f75
f010c155:	a0 75 1f 86 f0       	mov    0xf0861f75,%al
f010c15a:	83 c8 80             	or     $0xffffff80,%eax
f010c15d:	a2 75 1f 86 f0       	mov    %al,0xf0861f75
f010c162:	b8 5e cb 10 f0       	mov    $0xf010cb5e,%eax
f010c167:	c1 e8 10             	shr    $0x10,%eax
f010c16a:	66 a3 76 1f 86 f0    	mov    %ax,0xf0861f76
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f010c170:	b8 64 cb 10 f0       	mov    $0xf010cb64,%eax
f010c175:	66 a3 78 1f 86 f0    	mov    %ax,0xf0861f78
f010c17b:	66 c7 05 7a 1f 86 f0 	movw   $0x8,0xf0861f7a
f010c182:	08 00 
f010c184:	a0 7c 1f 86 f0       	mov    0xf0861f7c,%al
f010c189:	83 e0 e0             	and    $0xffffffe0,%eax
f010c18c:	a2 7c 1f 86 f0       	mov    %al,0xf0861f7c
f010c191:	a0 7c 1f 86 f0       	mov    0xf0861f7c,%al
f010c196:	83 e0 1f             	and    $0x1f,%eax
f010c199:	a2 7c 1f 86 f0       	mov    %al,0xf0861f7c
f010c19e:	a0 7d 1f 86 f0       	mov    0xf0861f7d,%al
f010c1a3:	83 e0 f0             	and    $0xfffffff0,%eax
f010c1a6:	83 c8 0e             	or     $0xe,%eax
f010c1a9:	a2 7d 1f 86 f0       	mov    %al,0xf0861f7d
f010c1ae:	a0 7d 1f 86 f0       	mov    0xf0861f7d,%al
f010c1b3:	83 e0 ef             	and    $0xffffffef,%eax
f010c1b6:	a2 7d 1f 86 f0       	mov    %al,0xf0861f7d
f010c1bb:	a0 7d 1f 86 f0       	mov    0xf0861f7d,%al
f010c1c0:	83 c8 60             	or     $0x60,%eax
f010c1c3:	a2 7d 1f 86 f0       	mov    %al,0xf0861f7d
f010c1c8:	a0 7d 1f 86 f0       	mov    0xf0861f7d,%al
f010c1cd:	83 c8 80             	or     $0xffffff80,%eax
f010c1d0:	a2 7d 1f 86 f0       	mov    %al,0xf0861f7d
f010c1d5:	b8 64 cb 10 f0       	mov    $0xf010cb64,%eax
f010c1da:	c1 e8 10             	shr    $0x10,%eax
f010c1dd:	66 a3 7e 1f 86 f0    	mov    %ax,0xf0861f7e
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f010c1e3:	b8 6a cb 10 f0       	mov    $0xf010cb6a,%eax
f010c1e8:	66 a3 80 1f 86 f0    	mov    %ax,0xf0861f80
f010c1ee:	66 c7 05 82 1f 86 f0 	movw   $0x8,0xf0861f82
f010c1f5:	08 00 
f010c1f7:	a0 84 1f 86 f0       	mov    0xf0861f84,%al
f010c1fc:	83 e0 e0             	and    $0xffffffe0,%eax
f010c1ff:	a2 84 1f 86 f0       	mov    %al,0xf0861f84
f010c204:	a0 84 1f 86 f0       	mov    0xf0861f84,%al
f010c209:	83 e0 1f             	and    $0x1f,%eax
f010c20c:	a2 84 1f 86 f0       	mov    %al,0xf0861f84
f010c211:	a0 85 1f 86 f0       	mov    0xf0861f85,%al
f010c216:	83 e0 f0             	and    $0xfffffff0,%eax
f010c219:	83 c8 0e             	or     $0xe,%eax
f010c21c:	a2 85 1f 86 f0       	mov    %al,0xf0861f85
f010c221:	a0 85 1f 86 f0       	mov    0xf0861f85,%al
f010c226:	83 e0 ef             	and    $0xffffffef,%eax
f010c229:	a2 85 1f 86 f0       	mov    %al,0xf0861f85
f010c22e:	a0 85 1f 86 f0       	mov    0xf0861f85,%al
f010c233:	83 c8 60             	or     $0x60,%eax
f010c236:	a2 85 1f 86 f0       	mov    %al,0xf0861f85
f010c23b:	a0 85 1f 86 f0       	mov    0xf0861f85,%al
f010c240:	83 c8 80             	or     $0xffffff80,%eax
f010c243:	a2 85 1f 86 f0       	mov    %al,0xf0861f85
f010c248:	b8 6a cb 10 f0       	mov    $0xf010cb6a,%eax
f010c24d:	c1 e8 10             	shr    $0x10,%eax
f010c250:	66 a3 86 1f 86 f0    	mov    %ax,0xf0861f86
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f010c256:	b8 70 cb 10 f0       	mov    $0xf010cb70,%eax
f010c25b:	66 a3 88 1f 86 f0    	mov    %ax,0xf0861f88
f010c261:	66 c7 05 8a 1f 86 f0 	movw   $0x8,0xf0861f8a
f010c268:	08 00 
f010c26a:	a0 8c 1f 86 f0       	mov    0xf0861f8c,%al
f010c26f:	83 e0 e0             	and    $0xffffffe0,%eax
f010c272:	a2 8c 1f 86 f0       	mov    %al,0xf0861f8c
f010c277:	a0 8c 1f 86 f0       	mov    0xf0861f8c,%al
f010c27c:	83 e0 1f             	and    $0x1f,%eax
f010c27f:	a2 8c 1f 86 f0       	mov    %al,0xf0861f8c
f010c284:	a0 8d 1f 86 f0       	mov    0xf0861f8d,%al
f010c289:	83 e0 f0             	and    $0xfffffff0,%eax
f010c28c:	83 c8 0e             	or     $0xe,%eax
f010c28f:	a2 8d 1f 86 f0       	mov    %al,0xf0861f8d
f010c294:	a0 8d 1f 86 f0       	mov    0xf0861f8d,%al
f010c299:	83 e0 ef             	and    $0xffffffef,%eax
f010c29c:	a2 8d 1f 86 f0       	mov    %al,0xf0861f8d
f010c2a1:	a0 8d 1f 86 f0       	mov    0xf0861f8d,%al
f010c2a6:	83 c8 60             	or     $0x60,%eax
f010c2a9:	a2 8d 1f 86 f0       	mov    %al,0xf0861f8d
f010c2ae:	a0 8d 1f 86 f0       	mov    0xf0861f8d,%al
f010c2b3:	83 c8 80             	or     $0xffffff80,%eax
f010c2b6:	a2 8d 1f 86 f0       	mov    %al,0xf0861f8d
f010c2bb:	b8 70 cb 10 f0       	mov    $0xf010cb70,%eax
f010c2c0:	c1 e8 10             	shr    $0x10,%eax
f010c2c3:	66 a3 8e 1f 86 f0    	mov    %ax,0xf0861f8e
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f010c2c9:	b8 76 cb 10 f0       	mov    $0xf010cb76,%eax
f010c2ce:	66 a3 90 1f 86 f0    	mov    %ax,0xf0861f90
f010c2d4:	66 c7 05 92 1f 86 f0 	movw   $0x8,0xf0861f92
f010c2db:	08 00 
f010c2dd:	a0 94 1f 86 f0       	mov    0xf0861f94,%al
f010c2e2:	83 e0 e0             	and    $0xffffffe0,%eax
f010c2e5:	a2 94 1f 86 f0       	mov    %al,0xf0861f94
f010c2ea:	a0 94 1f 86 f0       	mov    0xf0861f94,%al
f010c2ef:	83 e0 1f             	and    $0x1f,%eax
f010c2f2:	a2 94 1f 86 f0       	mov    %al,0xf0861f94
f010c2f7:	a0 95 1f 86 f0       	mov    0xf0861f95,%al
f010c2fc:	83 e0 f0             	and    $0xfffffff0,%eax
f010c2ff:	83 c8 0e             	or     $0xe,%eax
f010c302:	a2 95 1f 86 f0       	mov    %al,0xf0861f95
f010c307:	a0 95 1f 86 f0       	mov    0xf0861f95,%al
f010c30c:	83 e0 ef             	and    $0xffffffef,%eax
f010c30f:	a2 95 1f 86 f0       	mov    %al,0xf0861f95
f010c314:	a0 95 1f 86 f0       	mov    0xf0861f95,%al
f010c319:	83 c8 60             	or     $0x60,%eax
f010c31c:	a2 95 1f 86 f0       	mov    %al,0xf0861f95
f010c321:	a0 95 1f 86 f0       	mov    0xf0861f95,%al
f010c326:	83 c8 80             	or     $0xffffff80,%eax
f010c329:	a2 95 1f 86 f0       	mov    %al,0xf0861f95
f010c32e:	b8 76 cb 10 f0       	mov    $0xf010cb76,%eax
f010c333:	c1 e8 10             	shr    $0x10,%eax
f010c336:	66 a3 96 1f 86 f0    	mov    %ax,0xf0861f96
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f010c33c:	b8 7c cb 10 f0       	mov    $0xf010cb7c,%eax
f010c341:	66 a3 98 1f 86 f0    	mov    %ax,0xf0861f98
f010c347:	66 c7 05 9a 1f 86 f0 	movw   $0x8,0xf0861f9a
f010c34e:	08 00 
f010c350:	a0 9c 1f 86 f0       	mov    0xf0861f9c,%al
f010c355:	83 e0 e0             	and    $0xffffffe0,%eax
f010c358:	a2 9c 1f 86 f0       	mov    %al,0xf0861f9c
f010c35d:	a0 9c 1f 86 f0       	mov    0xf0861f9c,%al
f010c362:	83 e0 1f             	and    $0x1f,%eax
f010c365:	a2 9c 1f 86 f0       	mov    %al,0xf0861f9c
f010c36a:	a0 9d 1f 86 f0       	mov    0xf0861f9d,%al
f010c36f:	83 e0 f0             	and    $0xfffffff0,%eax
f010c372:	83 c8 0e             	or     $0xe,%eax
f010c375:	a2 9d 1f 86 f0       	mov    %al,0xf0861f9d
f010c37a:	a0 9d 1f 86 f0       	mov    0xf0861f9d,%al
f010c37f:	83 e0 ef             	and    $0xffffffef,%eax
f010c382:	a2 9d 1f 86 f0       	mov    %al,0xf0861f9d
f010c387:	a0 9d 1f 86 f0       	mov    0xf0861f9d,%al
f010c38c:	83 c8 60             	or     $0x60,%eax
f010c38f:	a2 9d 1f 86 f0       	mov    %al,0xf0861f9d
f010c394:	a0 9d 1f 86 f0       	mov    0xf0861f9d,%al
f010c399:	83 c8 80             	or     $0xffffff80,%eax
f010c39c:	a2 9d 1f 86 f0       	mov    %al,0xf0861f9d
f010c3a1:	b8 7c cb 10 f0       	mov    $0xf010cb7c,%eax
f010c3a6:	c1 e8 10             	shr    $0x10,%eax
f010c3a9:	66 a3 9e 1f 86 f0    	mov    %ax,0xf0861f9e



	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KERNEL_STACK_TOP;
f010c3af:	c7 05 44 26 86 f0 00 	movl   $0xefc00000,0xf0862644
f010c3b6:	00 c0 ef 
	ts.ts_ss0 = GD_KD;
f010c3b9:	66 c7 05 48 26 86 f0 	movw   $0x10,0xf0862648
f010c3c0:	10 00 

	// Initialize the TSS field of the gdt.
	gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&ts),
f010c3c2:	66 c7 05 e8 28 19 f0 	movw   $0x68,0xf01928e8
f010c3c9:	68 00 
f010c3cb:	b8 40 26 86 f0       	mov    $0xf0862640,%eax
f010c3d0:	66 a3 ea 28 19 f0    	mov    %ax,0xf01928ea
f010c3d6:	b8 40 26 86 f0       	mov    $0xf0862640,%eax
f010c3db:	c1 e8 10             	shr    $0x10,%eax
f010c3de:	a2 ec 28 19 f0       	mov    %al,0xf01928ec
f010c3e3:	a0 ed 28 19 f0       	mov    0xf01928ed,%al
f010c3e8:	83 e0 f0             	and    $0xfffffff0,%eax
f010c3eb:	83 c8 09             	or     $0x9,%eax
f010c3ee:	a2 ed 28 19 f0       	mov    %al,0xf01928ed
f010c3f3:	a0 ed 28 19 f0       	mov    0xf01928ed,%al
f010c3f8:	83 c8 10             	or     $0x10,%eax
f010c3fb:	a2 ed 28 19 f0       	mov    %al,0xf01928ed
f010c400:	a0 ed 28 19 f0       	mov    0xf01928ed,%al
f010c405:	83 e0 9f             	and    $0xffffff9f,%eax
f010c408:	a2 ed 28 19 f0       	mov    %al,0xf01928ed
f010c40d:	a0 ed 28 19 f0       	mov    0xf01928ed,%al
f010c412:	83 c8 80             	or     $0xffffff80,%eax
f010c415:	a2 ed 28 19 f0       	mov    %al,0xf01928ed
f010c41a:	a0 ee 28 19 f0       	mov    0xf01928ee,%al
f010c41f:	83 e0 f0             	and    $0xfffffff0,%eax
f010c422:	a2 ee 28 19 f0       	mov    %al,0xf01928ee
f010c427:	a0 ee 28 19 f0       	mov    0xf01928ee,%al
f010c42c:	83 e0 ef             	and    $0xffffffef,%eax
f010c42f:	a2 ee 28 19 f0       	mov    %al,0xf01928ee
f010c434:	a0 ee 28 19 f0       	mov    0xf01928ee,%al
f010c439:	83 e0 df             	and    $0xffffffdf,%eax
f010c43c:	a2 ee 28 19 f0       	mov    %al,0xf01928ee
f010c441:	a0 ee 28 19 f0       	mov    0xf01928ee,%al
f010c446:	83 c8 40             	or     $0x40,%eax
f010c449:	a2 ee 28 19 f0       	mov    %al,0xf01928ee
f010c44e:	a0 ee 28 19 f0       	mov    0xf01928ee,%al
f010c453:	83 e0 7f             	and    $0x7f,%eax
f010c456:	a2 ee 28 19 f0       	mov    %al,0xf01928ee
f010c45b:	b8 40 26 86 f0       	mov    $0xf0862640,%eax
f010c460:	c1 e8 18             	shr    $0x18,%eax
f010c463:	a2 ef 28 19 f0       	mov    %al,0xf01928ef
			sizeof(struct Taskstate), 0);
	gdt[GD_TSS >> 3].sd_s = 0;
f010c468:	a0 ed 28 19 f0       	mov    0xf01928ed,%al
f010c46d:	83 e0 ef             	and    $0xffffffef,%eax
f010c470:	a2 ed 28 19 f0       	mov    %al,0xf01928ed
f010c475:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010c47b:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
f010c47f:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	// Load the IDT
	asm volatile("lidt idt_pd");
f010c482:	0f 01 1d 1c 2d 19 f0 	lidtl  0xf0192d1c
}
f010c489:	90                   	nop
f010c48a:	c9                   	leave  
f010c48b:	c3                   	ret    

f010c48c <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f010c48c:	55                   	push   %ebp
f010c48d:	89 e5                	mov    %esp,%ebp
f010c48f:	53                   	push   %ebx
f010c490:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f010c493:	83 ec 08             	sub    $0x8,%esp
f010c496:	ff 75 08             	pushl  0x8(%ebp)
f010c499:	68 3b 73 13 f0       	push   $0xf013733b
f010c49e:	e8 6b 48 ff ff       	call   f0100d0e <cprintf>
f010c4a3:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f010c4a6:	8b 45 08             	mov    0x8(%ebp),%eax
f010c4a9:	83 ec 0c             	sub    $0xc,%esp
f010c4ac:	50                   	push   %eax
f010c4ad:	e8 fd 00 00 00       	call   f010c5af <print_regs>
f010c4b2:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f010c4b5:	8b 45 08             	mov    0x8(%ebp),%eax
f010c4b8:	8b 40 20             	mov    0x20(%eax),%eax
f010c4bb:	0f b7 c0             	movzwl %ax,%eax
f010c4be:	83 ec 08             	sub    $0x8,%esp
f010c4c1:	50                   	push   %eax
f010c4c2:	68 4d 73 13 f0       	push   $0xf013734d
f010c4c7:	e8 42 48 ff ff       	call   f0100d0e <cprintf>
f010c4cc:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f010c4cf:	8b 45 08             	mov    0x8(%ebp),%eax
f010c4d2:	8b 40 24             	mov    0x24(%eax),%eax
f010c4d5:	0f b7 c0             	movzwl %ax,%eax
f010c4d8:	83 ec 08             	sub    $0x8,%esp
f010c4db:	50                   	push   %eax
f010c4dc:	68 60 73 13 f0       	push   $0xf0137360
f010c4e1:	e8 28 48 ff ff       	call   f0100d0e <cprintf>
f010c4e6:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f010c4e9:	8b 45 08             	mov    0x8(%ebp),%eax
f010c4ec:	8b 58 28             	mov    0x28(%eax),%ebx
f010c4ef:	8b 45 08             	mov    0x8(%ebp),%eax
f010c4f2:	8b 40 28             	mov    0x28(%eax),%eax
f010c4f5:	83 ec 0c             	sub    $0xc,%esp
f010c4f8:	50                   	push   %eax
f010c4f9:	e8 d0 ee ff ff       	call   f010b3ce <trapname>
f010c4fe:	83 c4 10             	add    $0x10,%esp
f010c501:	89 c2                	mov    %eax,%edx
f010c503:	8b 45 08             	mov    0x8(%ebp),%eax
f010c506:	8b 40 28             	mov    0x28(%eax),%eax
f010c509:	53                   	push   %ebx
f010c50a:	52                   	push   %edx
f010c50b:	50                   	push   %eax
f010c50c:	68 73 73 13 f0       	push   $0xf0137373
f010c511:	e8 f8 47 ff ff       	call   f0100d0e <cprintf>
f010c516:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f010c519:	8b 45 08             	mov    0x8(%ebp),%eax
f010c51c:	8b 40 2c             	mov    0x2c(%eax),%eax
f010c51f:	83 ec 08             	sub    $0x8,%esp
f010c522:	50                   	push   %eax
f010c523:	68 8a 73 13 f0       	push   $0xf013738a
f010c528:	e8 e1 47 ff ff       	call   f0100d0e <cprintf>
f010c52d:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f010c530:	8b 45 08             	mov    0x8(%ebp),%eax
f010c533:	8b 40 30             	mov    0x30(%eax),%eax
f010c536:	83 ec 08             	sub    $0x8,%esp
f010c539:	50                   	push   %eax
f010c53a:	68 99 73 13 f0       	push   $0xf0137399
f010c53f:	e8 ca 47 ff ff       	call   f0100d0e <cprintf>
f010c544:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f010c547:	8b 45 08             	mov    0x8(%ebp),%eax
f010c54a:	8b 40 34             	mov    0x34(%eax),%eax
f010c54d:	0f b7 c0             	movzwl %ax,%eax
f010c550:	83 ec 08             	sub    $0x8,%esp
f010c553:	50                   	push   %eax
f010c554:	68 a8 73 13 f0       	push   $0xf01373a8
f010c559:	e8 b0 47 ff ff       	call   f0100d0e <cprintf>
f010c55e:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f010c561:	8b 45 08             	mov    0x8(%ebp),%eax
f010c564:	8b 40 38             	mov    0x38(%eax),%eax
f010c567:	83 ec 08             	sub    $0x8,%esp
f010c56a:	50                   	push   %eax
f010c56b:	68 bb 73 13 f0       	push   $0xf01373bb
f010c570:	e8 99 47 ff ff       	call   f0100d0e <cprintf>
f010c575:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f010c578:	8b 45 08             	mov    0x8(%ebp),%eax
f010c57b:	8b 40 3c             	mov    0x3c(%eax),%eax
f010c57e:	83 ec 08             	sub    $0x8,%esp
f010c581:	50                   	push   %eax
f010c582:	68 ca 73 13 f0       	push   $0xf01373ca
f010c587:	e8 82 47 ff ff       	call   f0100d0e <cprintf>
f010c58c:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f010c58f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c592:	8b 40 40             	mov    0x40(%eax),%eax
f010c595:	0f b7 c0             	movzwl %ax,%eax
f010c598:	83 ec 08             	sub    $0x8,%esp
f010c59b:	50                   	push   %eax
f010c59c:	68 d9 73 13 f0       	push   $0xf01373d9
f010c5a1:	e8 68 47 ff ff       	call   f0100d0e <cprintf>
f010c5a6:	83 c4 10             	add    $0x10,%esp
}
f010c5a9:	90                   	nop
f010c5aa:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010c5ad:	c9                   	leave  
f010c5ae:	c3                   	ret    

f010c5af <print_regs>:

void print_regs(struct PushRegs *regs)
{
f010c5af:	55                   	push   %ebp
f010c5b0:	89 e5                	mov    %esp,%ebp
f010c5b2:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f010c5b5:	8b 45 08             	mov    0x8(%ebp),%eax
f010c5b8:	8b 00                	mov    (%eax),%eax
f010c5ba:	83 ec 08             	sub    $0x8,%esp
f010c5bd:	50                   	push   %eax
f010c5be:	68 ec 73 13 f0       	push   $0xf01373ec
f010c5c3:	e8 46 47 ff ff       	call   f0100d0e <cprintf>
f010c5c8:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f010c5cb:	8b 45 08             	mov    0x8(%ebp),%eax
f010c5ce:	8b 40 04             	mov    0x4(%eax),%eax
f010c5d1:	83 ec 08             	sub    $0x8,%esp
f010c5d4:	50                   	push   %eax
f010c5d5:	68 fb 73 13 f0       	push   $0xf01373fb
f010c5da:	e8 2f 47 ff ff       	call   f0100d0e <cprintf>
f010c5df:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f010c5e2:	8b 45 08             	mov    0x8(%ebp),%eax
f010c5e5:	8b 40 08             	mov    0x8(%eax),%eax
f010c5e8:	83 ec 08             	sub    $0x8,%esp
f010c5eb:	50                   	push   %eax
f010c5ec:	68 0a 74 13 f0       	push   $0xf013740a
f010c5f1:	e8 18 47 ff ff       	call   f0100d0e <cprintf>
f010c5f6:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f010c5f9:	8b 45 08             	mov    0x8(%ebp),%eax
f010c5fc:	8b 40 0c             	mov    0xc(%eax),%eax
f010c5ff:	83 ec 08             	sub    $0x8,%esp
f010c602:	50                   	push   %eax
f010c603:	68 19 74 13 f0       	push   $0xf0137419
f010c608:	e8 01 47 ff ff       	call   f0100d0e <cprintf>
f010c60d:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f010c610:	8b 45 08             	mov    0x8(%ebp),%eax
f010c613:	8b 40 10             	mov    0x10(%eax),%eax
f010c616:	83 ec 08             	sub    $0x8,%esp
f010c619:	50                   	push   %eax
f010c61a:	68 28 74 13 f0       	push   $0xf0137428
f010c61f:	e8 ea 46 ff ff       	call   f0100d0e <cprintf>
f010c624:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f010c627:	8b 45 08             	mov    0x8(%ebp),%eax
f010c62a:	8b 40 14             	mov    0x14(%eax),%eax
f010c62d:	83 ec 08             	sub    $0x8,%esp
f010c630:	50                   	push   %eax
f010c631:	68 37 74 13 f0       	push   $0xf0137437
f010c636:	e8 d3 46 ff ff       	call   f0100d0e <cprintf>
f010c63b:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f010c63e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c641:	8b 40 18             	mov    0x18(%eax),%eax
f010c644:	83 ec 08             	sub    $0x8,%esp
f010c647:	50                   	push   %eax
f010c648:	68 46 74 13 f0       	push   $0xf0137446
f010c64d:	e8 bc 46 ff ff       	call   f0100d0e <cprintf>
f010c652:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f010c655:	8b 45 08             	mov    0x8(%ebp),%eax
f010c658:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c65b:	83 ec 08             	sub    $0x8,%esp
f010c65e:	50                   	push   %eax
f010c65f:	68 55 74 13 f0       	push   $0xf0137455
f010c664:	e8 a5 46 ff ff       	call   f0100d0e <cprintf>
f010c669:	83 c4 10             	add    $0x10,%esp
}
f010c66c:	90                   	nop
f010c66d:	c9                   	leave  
f010c66e:	c3                   	ret    

f010c66f <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f010c66f:	55                   	push   %ebp
f010c670:	89 e5                	mov    %esp,%ebp
f010c672:	57                   	push   %edi
f010c673:	56                   	push   %esi
f010c674:	53                   	push   %ebx
f010c675:	83 ec 1c             	sub    $0x1c,%esp
	// Handle processor exceptions.
	// LAB 3: Your code here.

	if(tf->tf_trapno == T_PGFLT)
f010c678:	8b 45 08             	mov    0x8(%ebp),%eax
f010c67b:	8b 40 28             	mov    0x28(%eax),%eax
f010c67e:	83 f8 0e             	cmp    $0xe,%eax
f010c681:	75 29                	jne    f010c6ac <trap_dispatch+0x3d>
	{
		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010c683:	83 ec 0c             	sub    $0xc,%esp
f010c686:	6a 01                	push   $0x1
f010c688:	e8 fc 18 00 00       	call   f010df89 <isPageReplacmentAlgorithmLRU>
f010c68d:	83 c4 10             	add    $0x10,%esp
f010c690:	85 c0                	test   %eax,%eax
f010c692:	74 05                	je     f010c699 <trap_dispatch+0x2a>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f010c694:	e8 71 93 ff ff       	call   f0105a0a <update_WS_time_stamps>
		}
		fault_handler(tf);
f010c699:	83 ec 0c             	sub    $0xc,%esp
f010c69c:	ff 75 08             	pushl  0x8(%ebp)
f010c69f:	e8 51 02 00 00       	call   f010c8f5 <fault_handler>
f010c6a4:	83 c4 10             	add    $0x10,%esp
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c6a7:	e9 bb 00 00 00       	jmp    f010c767 <trap_dispatch+0xf8>
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
		}
		fault_handler(tf);
	}
	else if (tf->tf_trapno == T_SYSCALL)
f010c6ac:	8b 45 08             	mov    0x8(%ebp),%eax
f010c6af:	8b 40 28             	mov    0x28(%eax),%eax
f010c6b2:	83 f8 30             	cmp    $0x30,%eax
f010c6b5:	75 42                	jne    f010c6f9 <trap_dispatch+0x8a>
	{
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010c6b7:	8b 45 08             	mov    0x8(%ebp),%eax
f010c6ba:	8b 78 04             	mov    0x4(%eax),%edi
f010c6bd:	8b 45 08             	mov    0x8(%ebp),%eax
f010c6c0:	8b 30                	mov    (%eax),%esi
f010c6c2:	8b 45 08             	mov    0x8(%ebp),%eax
f010c6c5:	8b 58 10             	mov    0x10(%eax),%ebx
f010c6c8:	8b 45 08             	mov    0x8(%ebp),%eax
f010c6cb:	8b 48 18             	mov    0x18(%eax),%ecx
f010c6ce:	8b 45 08             	mov    0x8(%ebp),%eax
f010c6d1:	8b 50 14             	mov    0x14(%eax),%edx
f010c6d4:	8b 45 08             	mov    0x8(%ebp),%eax
f010c6d7:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c6da:	83 ec 08             	sub    $0x8,%esp
f010c6dd:	57                   	push   %edi
f010c6de:	56                   	push   %esi
f010c6df:	53                   	push   %ebx
f010c6e0:	51                   	push   %ecx
f010c6e1:	52                   	push   %edx
f010c6e2:	50                   	push   %eax
f010c6e3:	e8 ec 0f 00 00       	call   f010d6d4 <syscall>
f010c6e8:	83 c4 20             	add    $0x20,%esp
f010c6eb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				,tf->tf_regs.reg_edx
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
f010c6ee:	8b 45 08             	mov    0x8(%ebp),%eax
f010c6f1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010c6f4:	89 50 1c             	mov    %edx,0x1c(%eax)
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c6f7:	eb 6e                	jmp    f010c767 <trap_dispatch+0xf8>
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
	}
	else if(tf->tf_trapno == T_DBLFLT)
f010c6f9:	8b 45 08             	mov    0x8(%ebp),%eax
f010c6fc:	8b 40 28             	mov    0x28(%eax),%eax
f010c6ff:	83 f8 08             	cmp    $0x8,%eax
f010c702:	75 17                	jne    f010c71b <trap_dispatch+0xac>
	{
		panic("double fault!!");
f010c704:	83 ec 04             	sub    $0x4,%esp
f010c707:	68 64 74 13 f0       	push   $0xf0137464
f010c70c:	68 e7 00 00 00       	push   $0xe7
f010c711:	68 73 74 13 f0       	push   $0xf0137473
f010c716:	e8 ea 3a ff ff       	call   f0100205 <_panic>
	}
	else if (tf->tf_trapno == IRQ0_Clock)
f010c71b:	8b 45 08             	mov    0x8(%ebp),%eax
f010c71e:	8b 40 28             	mov    0x28(%eax),%eax
f010c721:	83 f8 20             	cmp    $0x20,%eax
f010c724:	75 07                	jne    f010c72d <trap_dispatch+0xbe>
	{
		clock_interrupt_handler() ;
f010c726:	e8 be 92 ff ff       	call   f01059e9 <clock_interrupt_handler>
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c72b:	eb 3a                	jmp    f010c767 <trap_dispatch+0xf8>

	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		//print_trapframe(tf);
		if (tf->tf_cs == GD_KT)
f010c72d:	8b 45 08             	mov    0x8(%ebp),%eax
f010c730:	8b 40 34             	mov    0x34(%eax),%eax
f010c733:	66 83 f8 08          	cmp    $0x8,%ax
f010c737:	75 17                	jne    f010c750 <trap_dispatch+0xe1>
		{
			panic("unhandled trap in kernel");
f010c739:	83 ec 04             	sub    $0x4,%esp
f010c73c:	68 84 74 13 f0       	push   $0xf0137484
f010c741:	68 f4 00 00 00       	push   $0xf4
f010c746:	68 73 74 13 f0       	push   $0xf0137473
f010c74b:	e8 b5 3a ff ff       	call   f0100205 <_panic>
		}
		else {
			//env_destroy(curenv);
			panic("unhandled trap in user program");
f010c750:	83 ec 04             	sub    $0x4,%esp
f010c753:	68 a0 74 13 f0       	push   $0xf01374a0
f010c758:	68 f8 00 00 00       	push   $0xf8
f010c75d:	68 73 74 13 f0       	push   $0xf0137473
f010c762:	e8 9e 3a ff ff       	call   f0100205 <_panic>

			return;
		}
	}
	return;
}
f010c767:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010c76a:	5b                   	pop    %ebx
f010c76b:	5e                   	pop    %esi
f010c76c:	5f                   	pop    %edi
f010c76d:	5d                   	pop    %ebp
f010c76e:	c3                   	ret    

f010c76f <trap>:

void trap(struct Trapframe *tf)
{
f010c76f:	55                   	push   %ebp
f010c770:	89 e5                	mov    %esp,%ebp
f010c772:	57                   	push   %edi
f010c773:	56                   	push   %esi
f010c774:	53                   	push   %ebx
f010c775:	83 ec 1c             	sub    $0x1c,%esp
	kclock_stop();
f010c778:	e8 f5 79 ff ff       	call   f0104172 <kclock_stop>

	int userTrap = 0;
f010c77d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c784:	8b 45 08             	mov    0x8(%ebp),%eax
f010c787:	8b 40 34             	mov    0x34(%eax),%eax
f010c78a:	0f b7 c0             	movzwl %ax,%eax
f010c78d:	83 e0 03             	and    $0x3,%eax
f010c790:	83 f8 03             	cmp    $0x3,%eax
f010c793:	75 49                	jne    f010c7de <trap+0x6f>
		assert(curenv);
f010c795:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010c79a:	85 c0                	test   %eax,%eax
f010c79c:	75 19                	jne    f010c7b7 <trap+0x48>
f010c79e:	68 bf 74 13 f0       	push   $0xf01374bf
f010c7a3:	68 c6 74 13 f0       	push   $0xf01374c6
f010c7a8:	68 06 01 00 00       	push   $0x106
f010c7ad:	68 73 74 13 f0       	push   $0xf0137473
f010c7b2:	e8 4e 3a ff ff       	call   f0100205 <_panic>
		curenv->env_tf = *tf;
f010c7b7:	8b 15 f4 1d 86 f0    	mov    0xf0861df4,%edx
f010c7bd:	8b 45 08             	mov    0x8(%ebp),%eax
f010c7c0:	89 c3                	mov    %eax,%ebx
f010c7c2:	b8 11 00 00 00       	mov    $0x11,%eax
f010c7c7:	89 d7                	mov    %edx,%edi
f010c7c9:	89 de                	mov    %ebx,%esi
f010c7cb:	89 c1                	mov    %eax,%ecx
f010c7cd:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		tf = &(curenv->env_tf);
f010c7cf:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010c7d4:	89 45 08             	mov    %eax,0x8(%ebp)
		userTrap = 1;
f010c7d7:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	}
	if(tf->tf_trapno == IRQ0_Clock)
f010c7de:	8b 45 08             	mov    0x8(%ebp),%eax
f010c7e1:	8b 40 28             	mov    0x28(%eax),%eax
f010c7e4:	83 f8 20             	cmp    $0x20,%eax
f010c7e7:	75 40                	jne    f010c829 <trap+0xba>
	{
		//		uint16 cnt0 = kclock_read_cnt0() ;
		//		cprintf("CLOCK INTERRUPT: Counter0 Value = %d\n", cnt0 );

		if (userTrap)
f010c7e9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c7ed:	0f 84 a6 00 00 00    	je     f010c899 <trap+0x12a>
		{
			assert(curenv);
f010c7f3:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010c7f8:	85 c0                	test   %eax,%eax
f010c7fa:	75 19                	jne    f010c815 <trap+0xa6>
f010c7fc:	68 bf 74 13 f0       	push   $0xf01374bf
f010c801:	68 c6 74 13 f0       	push   $0xf01374c6
f010c806:	68 12 01 00 00       	push   $0x112
f010c80b:	68 73 74 13 f0       	push   $0xf0137473
f010c810:	e8 f0 39 ff ff       	call   f0100205 <_panic>
			curenv->nClocks++ ;
f010c815:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010c81a:	8b 90 a4 05 00 00    	mov    0x5a4(%eax),%edx
f010c820:	42                   	inc    %edx
f010c821:	89 90 a4 05 00 00    	mov    %edx,0x5a4(%eax)
f010c827:	eb 70                	jmp    f010c899 <trap+0x12a>
		}
	}
	else if (tf->tf_trapno == T_PGFLT){
f010c829:	8b 45 08             	mov    0x8(%ebp),%eax
f010c82c:	8b 40 28             	mov    0x28(%eax),%eax
f010c82f:	83 f8 0e             	cmp    $0xe,%eax
f010c832:	75 65                	jne    f010c899 <trap+0x12a>
		//2016: Bypass the faulted instruction
		if (bypassInstrLength != 0){
f010c834:	a0 a8 26 86 f0       	mov    0xf08626a8,%al
f010c839:	84 c0                	test   %al,%al
f010c83b:	74 5c                	je     f010c899 <trap+0x12a>
			if (userTrap){
f010c83d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c841:	74 2c                	je     f010c86f <trap+0x100>
				curenv->env_tf.tf_eip = (uint32*)((uint32)(curenv->env_tf.tf_eip) + bypassInstrLength);
f010c843:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010c848:	8b 15 f4 1d 86 f0    	mov    0xf0861df4,%edx
f010c84e:	8b 52 30             	mov    0x30(%edx),%edx
f010c851:	89 d1                	mov    %edx,%ecx
f010c853:	8a 15 a8 26 86 f0    	mov    0xf08626a8,%dl
f010c859:	0f b6 d2             	movzbl %dl,%edx
f010c85c:	01 ca                	add    %ecx,%edx
f010c85e:	89 50 30             	mov    %edx,0x30(%eax)
				env_run(curenv);
f010c861:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010c866:	83 ec 0c             	sub    $0xc,%esp
f010c869:	50                   	push   %eax
f010c86a:	e8 43 d4 ff ff       	call   f0109cb2 <env_run>
			}
			else{
				tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f010c86f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c872:	8b 40 30             	mov    0x30(%eax),%eax
f010c875:	89 c2                	mov    %eax,%edx
f010c877:	a0 a8 26 86 f0       	mov    0xf08626a8,%al
f010c87c:	0f b6 c0             	movzbl %al,%eax
f010c87f:	01 d0                	add    %edx,%eax
f010c881:	89 c2                	mov    %eax,%edx
f010c883:	8b 45 08             	mov    0x8(%ebp),%eax
f010c886:	89 50 30             	mov    %edx,0x30(%eax)
				kclock_resume();
f010c889:	e8 0f 79 ff ff       	call   f010419d <kclock_resume>
				env_pop_tf(tf);
f010c88e:	83 ec 0c             	sub    $0xc,%esp
f010c891:	ff 75 08             	pushl  0x8(%ebp)
f010c894:	e8 7c d5 ff ff       	call   f0109e15 <env_pop_tf>
			}
		}
	}
	trap_dispatch(tf);
f010c899:	83 ec 0c             	sub    $0xc,%esp
f010c89c:	ff 75 08             	pushl  0x8(%ebp)
f010c89f:	e8 cb fd ff ff       	call   f010c66f <trap_dispatch>
f010c8a4:	83 c4 10             	add    $0x10,%esp
	if (userTrap)
f010c8a7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c8ab:	74 3d                	je     f010c8ea <trap+0x17b>
	{
		assert(curenv && curenv->env_status == ENV_RUNNABLE);
f010c8ad:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010c8b2:	85 c0                	test   %eax,%eax
f010c8b4:	74 0d                	je     f010c8c3 <trap+0x154>
f010c8b6:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010c8bb:	8b 40 54             	mov    0x54(%eax),%eax
f010c8be:	83 f8 02             	cmp    $0x2,%eax
f010c8c1:	74 19                	je     f010c8dc <trap+0x16d>
f010c8c3:	68 dc 74 13 f0       	push   $0xf01374dc
f010c8c8:	68 c6 74 13 f0       	push   $0xf01374c6
f010c8cd:	68 27 01 00 00       	push   $0x127
f010c8d2:	68 73 74 13 f0       	push   $0xf0137473
f010c8d7:	e8 29 39 ff ff       	call   f0100205 <_panic>
		env_run(curenv);
f010c8dc:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010c8e1:	83 ec 0c             	sub    $0xc,%esp
f010c8e4:	50                   	push   %eax
f010c8e5:	e8 c8 d3 ff ff       	call   f0109cb2 <env_run>
	/* 2019
	 * If trap from kernel, then return to the called kernel function using the passed param "tf" not the user one that's stored in curenv
	 */
	else
	{
		env_pop_tf((tf));
f010c8ea:	83 ec 0c             	sub    $0xc,%esp
f010c8ed:	ff 75 08             	pushl  0x8(%ebp)
f010c8f0:	e8 20 d5 ff ff       	call   f0109e15 <env_pop_tf>

f010c8f5 <fault_handler>:

/*2022*/
uint32 last_fault_va = 0;
int8 num_repeated_fault  = 0;
void fault_handler(struct Trapframe *tf)
{
f010c8f5:	55                   	push   %ebp
f010c8f6:	89 e5                	mov    %esp,%ebp
f010c8f8:	83 ec 28             	sub    $0x28,%esp
	int userTrap = 0;
f010c8fb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c902:	8b 45 08             	mov    0x8(%ebp),%eax
f010c905:	8b 40 34             	mov    0x34(%eax),%eax
f010c908:	0f b7 c0             	movzwl %ax,%eax
f010c90b:	83 e0 03             	and    $0x3,%eax
f010c90e:	83 f8 03             	cmp    $0x3,%eax
f010c911:	75 07                	jne    f010c91a <fault_handler+0x25>
		userTrap = 1;
f010c913:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010c91a:	0f 20 d0             	mov    %cr2,%eax
f010c91d:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f010c920:	8b 45 e0             	mov    -0x20(%ebp),%eax
	}
	//print_trapframe(tf);
	uint32 fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();
f010c923:	89 45 ec             	mov    %eax,-0x14(%ebp)
	/******************************************************/
	/*2022*///If same fault va for 3 times, then panic
	if (last_fault_va == fault_va)
f010c926:	a1 20 26 86 f0       	mov    0xf0862620,%eax
f010c92b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010c92e:	75 2b                	jne    f010c95b <fault_handler+0x66>
	{
		num_repeated_fault++ ;
f010c930:	a0 24 26 86 f0       	mov    0xf0862624,%al
f010c935:	40                   	inc    %eax
f010c936:	a2 24 26 86 f0       	mov    %al,0xf0862624
		if (num_repeated_fault == 3)
f010c93b:	a0 24 26 86 f0       	mov    0xf0862624,%al
f010c940:	3c 03                	cmp    $0x3,%al
f010c942:	75 1e                	jne    f010c962 <fault_handler+0x6d>
			panic("Failed to handle fault at va=%x: same va is faulted for 3 successive times\n", fault_va);
f010c944:	ff 75 ec             	pushl  -0x14(%ebp)
f010c947:	68 0c 75 13 f0       	push   $0xf013750c
f010c94c:	68 47 01 00 00       	push   $0x147
f010c951:	68 73 74 13 f0       	push   $0xf0137473
f010c956:	e8 aa 38 ff ff       	call   f0100205 <_panic>
	}
	else
	{
		num_repeated_fault = 0;
f010c95b:	c6 05 24 26 86 f0 00 	movb   $0x0,0xf0862624
	}
	last_fault_va = fault_va ;
f010c962:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c965:	a3 20 26 86 f0       	mov    %eax,0xf0862620
	/******************************************************/
	//2017: Check stack overflow for Kernel
	if (!userTrap)
f010c96a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c96e:	75 29                	jne    f010c999 <fault_handler+0xa4>
	{
		if (fault_va < KERNEL_STACK_TOP - KERNEL_STACK_SIZE && fault_va >= USER_LIMIT)
f010c970:	81 7d ec ff 7f bf ef 	cmpl   $0xefbf7fff,-0x14(%ebp)
f010c977:	77 40                	ja     f010c9b9 <fault_handler+0xc4>
f010c979:	81 7d ec ff ff 7f ef 	cmpl   $0xef7fffff,-0x14(%ebp)
f010c980:	76 37                	jbe    f010c9b9 <fault_handler+0xc4>
			panic("Kernel: stack overflow exception!");
f010c982:	83 ec 04             	sub    $0x4,%esp
f010c985:	68 58 75 13 f0       	push   $0xf0137558
f010c98a:	68 53 01 00 00       	push   $0x153
f010c98f:	68 73 74 13 f0       	push   $0xf0137473
f010c994:	e8 6c 38 ff ff       	call   f0100205 <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		if (fault_va >= USTACKTOP)
f010c999:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f010c9a0:	76 17                	jbe    f010c9b9 <fault_handler+0xc4>
			panic("User: stack underflow exception!");
f010c9a2:	83 ec 04             	sub    $0x4,%esp
f010c9a5:	68 7c 75 13 f0       	push   $0xf013757c
f010c9aa:	68 59 01 00 00       	push   $0x159
f010c9af:	68 73 74 13 f0       	push   $0xf0137473
f010c9b4:	e8 4c 38 ff ff       	call   f0100205 <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	struct Env* faulted_env = curenv;
f010c9b9:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010c9be:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (faulted_env->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f010c9c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c9c4:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c9c7:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c9ca:	c1 ea 16             	shr    $0x16,%edx
f010c9cd:	c1 e2 02             	shl    $0x2,%edx
f010c9d0:	01 d0                	add    %edx,%eax
f010c9d2:	8b 00                	mov    (%eax),%eax
f010c9d4:	83 e0 01             	and    $0x1,%eax
f010c9d7:	85 c0                	test   %eax,%eax
f010c9d9:	75 28                	jne    f010ca03 <fault_handler+0x10e>
	{
		// we have a table fault =============================================================
		//cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		faulted_env->tableFaultsCounter ++ ;
f010c9db:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c9de:	8b 80 38 05 00 00    	mov    0x538(%eax),%eax
f010c9e4:	8d 50 01             	lea    0x1(%eax),%edx
f010c9e7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c9ea:	89 90 38 05 00 00    	mov    %edx,0x538(%eax)

		table_fault_handler(faulted_env, fault_va);
f010c9f0:	83 ec 08             	sub    $0x8,%esp
f010c9f3:	ff 75 ec             	pushl  -0x14(%ebp)
f010c9f6:	ff 75 e8             	pushl  -0x18(%ebp)
f010c9f9:	e8 70 16 00 00       	call   f010e06e <table_fault_handler>
f010c9fe:	83 c4 10             	add    $0x10,%esp
f010ca01:	eb 7b                	jmp    f010ca7e <fault_handler+0x189>
	}
	else
	{
		/*2022: Check if fault due to Access Rights */
		int perms = pt_get_page_permissions(faulted_env->env_page_directory, fault_va);
f010ca03:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ca06:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ca09:	83 ec 08             	sub    $0x8,%esp
f010ca0c:	ff 75 ec             	pushl  -0x14(%ebp)
f010ca0f:	50                   	push   %eax
f010ca10:	e8 f6 b3 ff ff       	call   f0107e0b <pt_get_page_permissions>
f010ca15:	83 c4 10             	add    $0x10,%esp
f010ca18:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (perms & PERM_PRESENT)
f010ca1b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ca1e:	83 e0 01             	and    $0x1,%eax
f010ca21:	85 c0                	test   %eax,%eax
f010ca23:	74 17                	je     f010ca3c <fault_handler+0x147>
			panic("Page @va=%x is exist! page fault due to violation of ACCESS RIGHTS\n", fault_va) ;
f010ca25:	ff 75 ec             	pushl  -0x14(%ebp)
f010ca28:	68 a0 75 13 f0       	push   $0xf01375a0
f010ca2d:	68 6e 01 00 00       	push   $0x16e
f010ca32:	68 73 74 13 f0       	push   $0xf0137473
f010ca37:	e8 c9 37 ff ff       	call   f0100205 <_panic>
		/*============================================================================================*/


		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f010ca3c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ca3f:	8b 80 34 05 00 00    	mov    0x534(%eax),%eax
f010ca45:	8d 50 01             	lea    0x1(%eax),%edx
f010ca48:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ca4b:	89 90 34 05 00 00    	mov    %edx,0x534(%eax)

		//cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
		//cprintf("\nPage working set BEFORE fault handler...\n");
		//env_page_ws_print(curenv);

		if(isBufferingEnabled())
f010ca51:	e8 f6 15 00 00       	call   f010e04c <isBufferingEnabled>
f010ca56:	84 c0                	test   %al,%al
f010ca58:	74 13                	je     f010ca6d <fault_handler+0x178>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f010ca5a:	83 ec 08             	sub    $0x8,%esp
f010ca5d:	ff 75 ec             	pushl  -0x14(%ebp)
f010ca60:	ff 75 e8             	pushl  -0x18(%ebp)
f010ca63:	e8 60 19 00 00       	call   f010e3c8 <__page_fault_handler_with_buffering>
f010ca68:	83 c4 10             	add    $0x10,%esp
f010ca6b:	eb 11                	jmp    f010ca7e <fault_handler+0x189>
		}
		else
		{
			//page_fault_handler(faulted_env, fault_va);
			page_fault_handler(faulted_env, fault_va);
f010ca6d:	83 ec 08             	sub    $0x8,%esp
f010ca70:	ff 75 ec             	pushl  -0x14(%ebp)
f010ca73:	ff 75 e8             	pushl  -0x18(%ebp)
f010ca76:	e8 14 16 00 00       	call   f010e08f <page_fault_handler>
f010ca7b:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010ca7e:	0f 20 d8             	mov    %cr3,%eax
f010ca81:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010ca84:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ca87:	0f 22 d8             	mov    %eax,%cr3
	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/

}
f010ca8a:	90                   	nop
f010ca8b:	c9                   	leave  
f010ca8c:	c3                   	ret    
f010ca8d:	90                   	nop

f010ca8e <PAGE_FAULT>:

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER(PAGE_FAULT, T_PGFLT)
f010ca8e:	6a 0e                	push   $0xe
f010ca90:	e9 ed 00 00 00       	jmp    f010cb82 <_alltraps>
f010ca95:	90                   	nop

f010ca96 <SYSCALL_HANDLER>:

TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)
f010ca96:	6a 00                	push   $0x0
f010ca98:	6a 30                	push   $0x30
f010ca9a:	e9 e3 00 00 00       	jmp    f010cb82 <_alltraps>
f010ca9f:	90                   	nop

f010caa0 <DBL_FAULT>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)
TRAPHANDLER(DBL_FAULT, T_DBLFLT)
f010caa0:	6a 08                	push   $0x8
f010caa2:	e9 db 00 00 00       	jmp    f010cb82 <_alltraps>
f010caa7:	90                   	nop

f010caa8 <ALL_FAULTS0>:

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)//     0		// divide error
f010caa8:	6a 00                	push   $0x0
f010caaa:	6a 00                	push   $0x0
f010caac:	e9 d1 00 00 00       	jmp    f010cb82 <_alltraps>
f010cab1:	90                   	nop

f010cab2 <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )//   1		// debug exception
f010cab2:	6a 00                	push   $0x0
f010cab4:	6a 01                	push   $0x1
f010cab6:	e9 c7 00 00 00       	jmp    f010cb82 <_alltraps>
f010cabb:	90                   	nop

f010cabc <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )// 2		// non-maskable interrupt
f010cabc:	6a 00                	push   $0x0
f010cabe:	6a 02                	push   $0x2
f010cac0:	e9 bd 00 00 00       	jmp    f010cb82 <_alltraps>
f010cac5:	90                   	nop

f010cac6 <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT      )//3		// breakpoint
f010cac6:	6a 00                	push   $0x0
f010cac8:	6a 03                	push   $0x3
f010caca:	e9 b3 00 00 00       	jmp    f010cb82 <_alltraps>
f010cacf:	90                   	nop

f010cad0 <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW      )//4		// overflow
f010cad0:	6a 00                	push   $0x0
f010cad2:	6a 04                	push   $0x4
f010cad4:	e9 a9 00 00 00       	jmp    f010cb82 <_alltraps>
f010cad9:	90                   	nop

f010cada <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND      )//5		// bounds check
f010cada:	6a 00                	push   $0x0
f010cadc:	6a 05                	push   $0x5
f010cade:	e9 9f 00 00 00       	jmp    f010cb82 <_alltraps>
f010cae3:	90                   	nop

f010cae4 <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP      )//6		// illegal opcode
f010cae4:	6a 00                	push   $0x0
f010cae6:	6a 06                	push   $0x6
f010cae8:	e9 95 00 00 00       	jmp    f010cb82 <_alltraps>
f010caed:	90                   	nop

f010caee <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE     )//7		// device not available
f010caee:	6a 00                	push   $0x0
f010caf0:	6a 07                	push   $0x7
f010caf2:	e9 8b 00 00 00       	jmp    f010cb82 <_alltraps>
f010caf7:	90                   	nop

f010caf8 <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS,  T_DBLFLT     8		// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS,  9   )//9	// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )//10		// invalid task switch segment
f010caf8:	6a 0a                	push   $0xa
f010cafa:	e9 83 00 00 00       	jmp    f010cb82 <_alltraps>
f010caff:	90                   	nop

f010cb00 <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )//11		// segment not present
f010cb00:	6a 0b                	push   $0xb
f010cb02:	eb 7e                	jmp    f010cb82 <_alltraps>

f010cb04 <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )//12		// stack exception
f010cb04:	6a 0c                	push   $0xc
f010cb06:	eb 7a                	jmp    f010cb82 <_alltraps>

f010cb08 <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )//13		// General protection fault
f010cb08:	6a 0d                	push   $0xd
f010cb0a:	eb 76                	jmp    f010cb82 <_alltraps>

f010cb0c <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS,  T_PGFLT     14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )	//15 	// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR     )//16		// floating point error
f010cb0c:	6a 00                	push   $0x0
f010cb0e:	6a 10                	push   $0x10
f010cb10:	eb 70                	jmp    f010cb82 <_alltraps>

f010cb12 <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )//17		// Alignment check
f010cb12:	6a 11                	push   $0x11
f010cb14:	eb 6c                	jmp    f010cb82 <_alltraps>

f010cb16 <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK      )//18		// machine check
f010cb16:	6a 00                	push   $0x0
f010cb18:	6a 12                	push   $0x12
f010cb1a:	eb 66                	jmp    f010cb82 <_alltraps>

f010cb1c <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )//19		// the last one
f010cb1c:	6a 00                	push   $0x0
f010cb1e:	6a 13                	push   $0x13
f010cb20:	eb 60                	jmp    f010cb82 <_alltraps>

f010cb22 <ALL_FAULTS32>:

TRAPHANDLER_NOEC(ALL_FAULTS32,		IRQ0_Clock      )//32 the first IRQ
f010cb22:	6a 00                	push   $0x0
f010cb24:	6a 20                	push   $0x20
f010cb26:	eb 5a                	jmp    f010cb82 <_alltraps>

f010cb28 <ALL_FAULTS33>:
TRAPHANDLER_NOEC(ALL_FAULTS33,		33		)//33
f010cb28:	6a 00                	push   $0x0
f010cb2a:	6a 21                	push   $0x21
f010cb2c:	eb 54                	jmp    f010cb82 <_alltraps>

f010cb2e <ALL_FAULTS34>:
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f010cb2e:	6a 00                	push   $0x0
f010cb30:	6a 22                	push   $0x22
f010cb32:	eb 4e                	jmp    f010cb82 <_alltraps>

f010cb34 <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f010cb34:	6a 00                	push   $0x0
f010cb36:	6a 23                	push   $0x23
f010cb38:	eb 48                	jmp    f010cb82 <_alltraps>

f010cb3a <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f010cb3a:	6a 00                	push   $0x0
f010cb3c:	6a 24                	push   $0x24
f010cb3e:	eb 42                	jmp    f010cb82 <_alltraps>

f010cb40 <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f010cb40:	6a 00                	push   $0x0
f010cb42:	6a 25                	push   $0x25
f010cb44:	eb 3c                	jmp    f010cb82 <_alltraps>

f010cb46 <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f010cb46:	6a 00                	push   $0x0
f010cb48:	6a 26                	push   $0x26
f010cb4a:	eb 36                	jmp    f010cb82 <_alltraps>

f010cb4c <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f010cb4c:	6a 00                	push   $0x0
f010cb4e:	6a 27                	push   $0x27
f010cb50:	eb 30                	jmp    f010cb82 <_alltraps>

f010cb52 <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f010cb52:	6a 00                	push   $0x0
f010cb54:	6a 28                	push   $0x28
f010cb56:	eb 2a                	jmp    f010cb82 <_alltraps>

f010cb58 <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f010cb58:	6a 00                	push   $0x0
f010cb5a:	6a 29                	push   $0x29
f010cb5c:	eb 24                	jmp    f010cb82 <_alltraps>

f010cb5e <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f010cb5e:	6a 00                	push   $0x0
f010cb60:	6a 2a                	push   $0x2a
f010cb62:	eb 1e                	jmp    f010cb82 <_alltraps>

f010cb64 <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f010cb64:	6a 00                	push   $0x0
f010cb66:	6a 2b                	push   $0x2b
f010cb68:	eb 18                	jmp    f010cb82 <_alltraps>

f010cb6a <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f010cb6a:	6a 00                	push   $0x0
f010cb6c:	6a 2c                	push   $0x2c
f010cb6e:	eb 12                	jmp    f010cb82 <_alltraps>

f010cb70 <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f010cb70:	6a 00                	push   $0x0
f010cb72:	6a 2d                	push   $0x2d
f010cb74:	eb 0c                	jmp    f010cb82 <_alltraps>

f010cb76 <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f010cb76:	6a 00                	push   $0x0
f010cb78:	6a 2e                	push   $0x2e
f010cb7a:	eb 06                	jmp    f010cb82 <_alltraps>

f010cb7c <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 the last IRQ
f010cb7c:	6a 00                	push   $0x0
f010cb7e:	6a 2f                	push   $0x2f
f010cb80:	eb 00                	jmp    f010cb82 <_alltraps>

f010cb82 <_alltraps>:
/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:

push %ds
f010cb82:	1e                   	push   %ds
push %es
f010cb83:	06                   	push   %es
pushal
f010cb84:	60                   	pusha  

mov $(GD_KD), %ax
f010cb85:	66 b8 10 00          	mov    $0x10,%ax
mov %ax,%ds
f010cb89:	8e d8                	mov    %eax,%ds
mov %ax,%es
f010cb8b:	8e c0                	mov    %eax,%es

push %esp
f010cb8d:	54                   	push   %esp

call trap
f010cb8e:	e8 dc fb ff ff       	call   f010c76f <trap>

pop %ecx /* poping the pointer to the tf from the stack so that the stack top is at
f010cb93:	59                   	pop    %ecx
			# the beginning values of the registers pushed by pusha*/
popal
f010cb94:	61                   	popa   
pop %es
f010cb95:	07                   	pop    %es
pop %ds
f010cb96:	1f                   	pop    %ds

/*skipping the trap_no and the error code so that the stack top is at the old eip value*/
add $(8),%esp
f010cb97:	83 c4 08             	add    $0x8,%esp

iret
f010cb9a:	cf                   	iret   

f010cb9b <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010cb9b:	55                   	push   %ebp
f010cb9c:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010cb9e:	8b 45 08             	mov    0x8(%ebp),%eax
f010cba1:	8b 15 50 27 86 f0    	mov    0xf0862750,%edx
f010cba7:	29 d0                	sub    %edx,%eax
f010cba9:	c1 f8 03             	sar    $0x3,%eax
f010cbac:	89 c2                	mov    %eax,%edx
f010cbae:	89 d0                	mov    %edx,%eax
f010cbb0:	c1 e0 02             	shl    $0x2,%eax
f010cbb3:	01 d0                	add    %edx,%eax
f010cbb5:	c1 e0 02             	shl    $0x2,%eax
f010cbb8:	01 d0                	add    %edx,%eax
f010cbba:	c1 e0 02             	shl    $0x2,%eax
f010cbbd:	01 d0                	add    %edx,%eax
f010cbbf:	89 c1                	mov    %eax,%ecx
f010cbc1:	c1 e1 08             	shl    $0x8,%ecx
f010cbc4:	01 c8                	add    %ecx,%eax
f010cbc6:	89 c1                	mov    %eax,%ecx
f010cbc8:	c1 e1 10             	shl    $0x10,%ecx
f010cbcb:	01 c8                	add    %ecx,%eax
f010cbcd:	01 c0                	add    %eax,%eax
f010cbcf:	01 d0                	add    %edx,%eax
}
f010cbd1:	5d                   	pop    %ebp
f010cbd2:	c3                   	ret    

f010cbd3 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010cbd3:	55                   	push   %ebp
f010cbd4:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010cbd6:	ff 75 08             	pushl  0x8(%ebp)
f010cbd9:	e8 bd ff ff ff       	call   f010cb9b <to_frame_number>
f010cbde:	83 c4 04             	add    $0x4,%esp
f010cbe1:	c1 e0 0c             	shl    $0xc,%eax
}
f010cbe4:	c9                   	leave  
f010cbe5:	c3                   	ret    

f010cbe6 <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010cbe6:	55                   	push   %ebp
f010cbe7:	89 e5                	mov    %esp,%ebp
f010cbe9:	83 ec 18             	sub    $0x18,%esp
f010cbec:	8b 45 10             	mov    0x10(%ebp),%eax
f010cbef:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Destroy the environment if not.

	// LAB 3: Your code here.

	// Print the string supplied by the user.
	if (printProgName)
f010cbf2:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010cbf6:	74 26                	je     f010cc1e <sys_cputs+0x38>
		cprintf("[%s %d] ",curenv->prog_name, curenv->env_id);
f010cbf8:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010cbfd:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cc00:	8b 15 f4 1d 86 f0    	mov    0xf0861df4,%edx
f010cc06:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f010cc0c:	83 ec 04             	sub    $0x4,%esp
f010cc0f:	50                   	push   %eax
f010cc10:	52                   	push   %edx
f010cc11:	68 90 77 13 f0       	push   $0xf0137790
f010cc16:	e8 f3 40 ff ff       	call   f0100d0e <cprintf>
f010cc1b:	83 c4 10             	add    $0x10,%esp
	cprintf("%.*s",len, s);
f010cc1e:	83 ec 04             	sub    $0x4,%esp
f010cc21:	ff 75 08             	pushl  0x8(%ebp)
f010cc24:	ff 75 0c             	pushl  0xc(%ebp)
f010cc27:	68 99 77 13 f0       	push   $0xf0137799
f010cc2c:	e8 dd 40 ff ff       	call   f0100d0e <cprintf>
f010cc31:	83 c4 10             	add    $0x10,%esp
	//cprintf("%.*s", len, s);
}
f010cc34:	90                   	nop
f010cc35:	c9                   	leave  
f010cc36:	c3                   	ret    

f010cc37 <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010cc37:	55                   	push   %ebp
f010cc38:	89 e5                	mov    %esp,%ebp
f010cc3a:	83 ec 18             	sub    $0x18,%esp
f010cc3d:	8b 45 08             	mov    0x8(%ebp),%eax
f010cc40:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010cc43:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010cc47:	83 ec 08             	sub    $0x8,%esp
f010cc4a:	50                   	push   %eax
f010cc4b:	68 9e 77 13 f0       	push   $0xf013779e
f010cc50:	e8 b9 40 ff ff       	call   f0100d0e <cprintf>
f010cc55:	83 c4 10             	add    $0x10,%esp
}
f010cc58:	90                   	nop
f010cc59:	c9                   	leave  
f010cc5a:	c3                   	ret    

f010cc5b <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010cc5b:	55                   	push   %ebp
f010cc5c:	89 e5                	mov    %esp,%ebp
f010cc5e:	83 ec 18             	sub    $0x18,%esp
	//while ((c = cons_getc()) == 0)
	//2013: instead of busywaiting inside kernel code , we moved the waiting to user code,
	// this allows any other running user programs to run beacause the clock interrupt works in user mode
	// (the kernel system call by default disables the interrupts, so any loops inside the kernel while
	// handling an interrupt will cause the clock interrupt to be disabled)
	c = cons_getc2();
f010cc61:	e8 e2 3e ff ff       	call   f0100b48 <cons_getc2>
f010cc66:	89 45 f4             	mov    %eax,-0xc(%ebp)
	/* do nothing */;

	return c;
f010cc69:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010cc6c:	c9                   	leave  
f010cc6d:	c3                   	ret    

f010cc6e <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010cc6e:	55                   	push   %ebp
f010cc6f:	89 e5                	mov    %esp,%ebp
f010cc71:	83 ec 18             	sub    $0x18,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = curenv;
f010cc74:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010cc79:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct FrameInfo *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010cc7c:	83 ec 0c             	sub    $0xc,%esp
f010cc7f:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010cc82:	50                   	push   %eax
f010cc83:	e8 48 9c ff ff       	call   f01068d0 <allocate_frame>
f010cc88:	83 c4 10             	add    $0x10,%esp
f010cc8b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010cc8e:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010cc92:	75 08                	jne    f010cc9c <__sys_allocate_page+0x2e>
		return r ;
f010cc94:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cc97:	e9 e9 00 00 00       	jmp    f010cd85 <__sys_allocate_page+0x117>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010cc9c:	8b 45 08             	mov    0x8(%ebp),%eax
f010cc9f:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010cca4:	77 0c                	ja     f010ccb2 <__sys_allocate_page+0x44>
f010cca6:	8b 45 08             	mov    0x8(%ebp),%eax
f010cca9:	25 ff 0f 00 00       	and    $0xfff,%eax
f010ccae:	85 c0                	test   %eax,%eax
f010ccb0:	74 0a                	je     f010ccbc <__sys_allocate_page+0x4e>
		return E_INVAL;
f010ccb2:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010ccb7:	e9 c9 00 00 00       	jmp    f010cd85 <__sys_allocate_page+0x117>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010ccbc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ccbf:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010ccc4:	83 f8 04             	cmp    $0x4,%eax
f010ccc7:	74 0a                	je     f010ccd3 <__sys_allocate_page+0x65>
		return E_INVAL;
f010ccc9:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010ccce:	e9 b2 00 00 00       	jmp    f010cd85 <__sys_allocate_page+0x117>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010ccd3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ccd6:	83 ec 0c             	sub    $0xc,%esp
f010ccd9:	50                   	push   %eax
f010ccda:	e8 f4 fe ff ff       	call   f010cbd3 <to_physical_address>
f010ccdf:	83 c4 10             	add    $0x10,%esp
f010cce2:	89 45 ec             	mov    %eax,-0x14(%ebp)
#if USE_KHEAP
	{
		//FIX: we should implement a better solution for this, but for now
		//		we are using an unsed VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
		//		to do temp initialization of a frame.
		map_frame(e->env_page_directory, ptr_frame_info, USER_LIMIT, PERM_WRITEABLE);
f010cce5:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cce8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cceb:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ccee:	6a 02                	push   $0x2
f010ccf0:	68 00 00 80 ef       	push   $0xef800000
f010ccf5:	52                   	push   %edx
f010ccf6:	50                   	push   %eax
f010ccf7:	e8 23 a0 ff ff       	call   f0106d1f <map_frame>
f010ccfc:	83 c4 10             	add    $0x10,%esp
		memset((void*)USER_LIMIT, 0, PAGE_SIZE);
f010ccff:	83 ec 04             	sub    $0x4,%esp
f010cd02:	68 00 10 00 00       	push   $0x1000
f010cd07:	6a 00                	push   $0x0
f010cd09:	68 00 00 80 ef       	push   $0xef800000
f010cd0e:	e8 e3 4a 02 00       	call   f01317f6 <memset>
f010cd13:	83 c4 10             	add    $0x10,%esp

		// Temporarily increase the references to prevent unmap_frame from removing the frame
		// we just got from allocate_frame, we will use it for the new page
		ptr_frame_info->references += 1;
f010cd16:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cd19:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cd1c:	8b 40 08             	mov    0x8(%eax),%eax
f010cd1f:	40                   	inc    %eax
f010cd20:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(e->env_page_directory, USER_LIMIT);
f010cd24:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cd27:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cd2a:	83 ec 08             	sub    $0x8,%esp
f010cd2d:	68 00 00 80 ef       	push   $0xef800000
f010cd32:	50                   	push   %eax
f010cd33:	e8 1c a1 ff ff       	call   f0106e54 <unmap_frame>
f010cd38:	83 c4 10             	add    $0x10,%esp

		//return it to the original status
		ptr_frame_info->references -= 1;
f010cd3b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cd3e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cd41:	8b 40 08             	mov    0x8(%eax),%eax
f010cd44:	48                   	dec    %eax
f010cd45:	66 89 42 08          	mov    %ax,0x8(%edx)
#else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
	}
#endif
	r = map_frame(e->env_page_directory, ptr_frame_info, (uint32)va, perm) ;
f010cd49:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010cd4c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cd4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cd52:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cd55:	ff 75 0c             	pushl  0xc(%ebp)
f010cd58:	51                   	push   %ecx
f010cd59:	52                   	push   %edx
f010cd5a:	50                   	push   %eax
f010cd5b:	e8 bf 9f ff ff       	call   f0106d1f <map_frame>
f010cd60:	83 c4 10             	add    $0x10,%esp
f010cd63:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010cd66:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010cd6a:	75 14                	jne    f010cd80 <__sys_allocate_page+0x112>
	{
		decrement_references(ptr_frame_info);
f010cd6c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cd6f:	83 ec 0c             	sub    $0xc,%esp
f010cd72:	50                   	push   %eax
f010cd73:	e8 e7 9c ff ff       	call   f0106a5f <decrement_references>
f010cd78:	83 c4 10             	add    $0x10,%esp
		return r;
f010cd7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cd7e:	eb 05                	jmp    f010cd85 <__sys_allocate_page+0x117>
	}
	return 0 ;
f010cd80:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010cd85:	c9                   	leave  
f010cd86:	c3                   	ret    

f010cd87 <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010cd87:	55                   	push   %ebp
f010cd88:	89 e5                	mov    %esp,%ebp
f010cd8a:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010cd8d:	83 ec 04             	sub    $0x4,%esp
f010cd90:	68 a1 77 13 f0       	push   $0xf01377a1
f010cd95:	68 b3 00 00 00       	push   $0xb3
f010cd9a:	68 bf 77 13 f0       	push   $0xf01377bf
f010cd9f:	e8 61 34 ff ff       	call   f0100205 <_panic>

f010cda4 <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010cda4:	55                   	push   %ebp
f010cda5:	89 e5                	mov    %esp,%ebp
f010cda7:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010cdaa:	83 ec 04             	sub    $0x4,%esp
f010cdad:	68 d4 77 13 f0       	push   $0xf01377d4
f010cdb2:	68 c3 00 00 00       	push   $0xc3
f010cdb7:	68 bf 77 13 f0       	push   $0xf01377bf
f010cdbc:	e8 44 34 ff ff       	call   f0100205 <_panic>

f010cdc1 <sys_calculate_required_frames>:
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010cdc1:	55                   	push   %ebp
f010cdc2:	89 e5                	mov    %esp,%ebp
f010cdc4:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(curenv->env_page_directory, start_virtual_address, size);
f010cdc7:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010cdcc:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cdcf:	83 ec 04             	sub    $0x4,%esp
f010cdd2:	ff 75 0c             	pushl  0xc(%ebp)
f010cdd5:	ff 75 08             	pushl  0x8(%ebp)
f010cdd8:	50                   	push   %eax
f010cdd9:	e8 77 c0 ff ff       	call   f0108e55 <calculate_required_frames>
f010cdde:	83 c4 10             	add    $0x10,%esp
}
f010cde1:	c9                   	leave  
f010cde2:	c3                   	ret    

f010cde3 <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010cde3:	55                   	push   %ebp
f010cde4:	89 e5                	mov    %esp,%ebp
f010cde6:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010cde9:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010cdec:	83 ec 0c             	sub    $0xc,%esp
f010cdef:	50                   	push   %eax
f010cdf0:	e8 c4 a1 ff ff       	call   f0106fb9 <calculate_available_frames>
f010cdf5:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010cdf8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010cdfb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cdfe:	01 d0                	add    %edx,%eax
}
f010ce00:	c9                   	leave  
f010ce01:	c3                   	ret    

f010ce02 <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010ce02:	55                   	push   %ebp
f010ce03:	89 e5                	mov    %esp,%ebp
f010ce05:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010ce08:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010ce0b:	83 ec 0c             	sub    $0xc,%esp
f010ce0e:	50                   	push   %eax
f010ce0f:	e8 a5 a1 ff ff       	call   f0106fb9 <calculate_available_frames>
f010ce14:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010ce17:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010ce1a:	c9                   	leave  
f010ce1b:	c3                   	ret    

f010ce1c <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010ce1c:	55                   	push   %ebp
f010ce1d:	89 e5                	mov    %esp,%ebp
f010ce1f:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010ce22:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010ce25:	83 ec 0c             	sub    $0xc,%esp
f010ce28:	50                   	push   %eax
f010ce29:	e8 8b a1 ff ff       	call   f0106fb9 <calculate_available_frames>
f010ce2e:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010ce31:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010ce34:	c9                   	leave  
f010ce35:	c3                   	ret    

f010ce36 <sys_calculate_pages_tobe_removed_ready_exit>:

int sys_calculate_pages_tobe_removed_ready_exit(uint32 WS_or_MEMORY_flag)
{
f010ce36:	55                   	push   %ebp
f010ce37:	89 e5                	mov    %esp,%ebp
f010ce39:	83 ec 08             	sub    $0x8,%esp
	return calc_no_pages_tobe_removed_from_ready_exit_queues(WS_or_MEMORY_flag);
f010ce3c:	83 ec 0c             	sub    $0xc,%esp
f010ce3f:	ff 75 08             	pushl  0x8(%ebp)
f010ce42:	e8 cc 36 02 00       	call   f0130513 <calc_no_pages_tobe_removed_from_ready_exit_queues>
f010ce47:	83 c4 10             	add    $0x10,%esp
}
f010ce4a:	c9                   	leave  
f010ce4b:	c3                   	ret    

f010ce4c <sys_scarce_memory>:

void sys_scarce_memory(void)
{
f010ce4c:	55                   	push   %ebp
f010ce4d:	89 e5                	mov    %esp,%ebp
f010ce4f:	83 ec 08             	sub    $0x8,%esp
	scarce_memory();
f010ce52:	e8 14 36 02 00       	call   f013046b <scarce_memory>
}
f010ce57:	90                   	nop
f010ce58:	c9                   	leave  
f010ce59:	c3                   	ret    

f010ce5a <sys_clearFFL>:

void sys_clearFFL()
{
f010ce5a:	55                   	push   %ebp
f010ce5b:	89 e5                	mov    %esp,%ebp
f010ce5d:	83 ec 18             	sub    $0x18,%esp
	int size = LIST_SIZE(&free_frame_list) ;
f010ce60:	a1 20 27 86 f0       	mov    0xf0862720,%eax
f010ce65:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i = 0 ;
f010ce68:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010ce6f:	eb 12                	jmp    f010ce83 <sys_clearFFL+0x29>
	{
		allocate_frame(&ptr_tmp_FI) ;
f010ce71:	83 ec 0c             	sub    $0xc,%esp
f010ce74:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010ce77:	50                   	push   %eax
f010ce78:	e8 53 9a ff ff       	call   f01068d0 <allocate_frame>
f010ce7d:	83 c4 10             	add    $0x10,%esp
void sys_clearFFL()
{
	int size = LIST_SIZE(&free_frame_list) ;
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010ce80:	ff 45 f4             	incl   -0xc(%ebp)
f010ce83:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ce86:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ce89:	7c e6                	jl     f010ce71 <sys_clearFFL+0x17>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f010ce8b:	90                   	nop
f010ce8c:	c9                   	leave  
f010ce8d:	c3                   	ret    

f010ce8e <sys_pf_calculate_allocated_pages>:

/*******************************/
/* PAGE FILE SYSTEM CALLS */
/*******************************/
int sys_pf_calculate_allocated_pages(void)
{
f010ce8e:	55                   	push   %ebp
f010ce8f:	89 e5                	mov    %esp,%ebp
f010ce91:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(curenv);
f010ce94:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010ce99:	83 ec 0c             	sub    $0xc,%esp
f010ce9c:	50                   	push   %eax
f010ce9d:	e8 64 6e ff ff       	call   f0103d06 <pf_calculate_allocated_pages>
f010cea2:	83 c4 10             	add    $0x10,%esp
}
f010cea5:	c9                   	leave  
f010cea6:	c3                   	ret    

f010cea7 <sys_free_user_mem>:

/*******************************/
/* USER HEAP SYSTEM CALLS */
/*******************************/
void sys_free_user_mem(uint32 virtual_address, uint32 size)
{
f010cea7:	55                   	push   %ebp
f010cea8:	89 e5                	mov    %esp,%ebp
f010ceaa:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010cead:	e8 9a 11 00 00       	call   f010e04c <isBufferingEnabled>
f010ceb2:	84 c0                	test   %al,%al
f010ceb4:	74 19                	je     f010cecf <sys_free_user_mem+0x28>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
f010ceb6:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010cebb:	83 ec 04             	sub    $0x4,%esp
f010cebe:	ff 75 0c             	pushl  0xc(%ebp)
f010cec1:	ff 75 08             	pushl  0x8(%ebp)
f010cec4:	50                   	push   %eax
f010cec5:	e8 a5 c1 ff ff       	call   f010906f <__free_user_mem_with_buffering>
f010ceca:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
	}
	return;
f010cecd:	eb 18                	jmp    f010cee7 <sys_free_user_mem+0x40>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
f010cecf:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010ced4:	83 ec 04             	sub    $0x4,%esp
f010ced7:	ff 75 0c             	pushl  0xc(%ebp)
f010ceda:	ff 75 08             	pushl  0x8(%ebp)
f010cedd:	50                   	push   %eax
f010cede:	e8 7e c0 ff ff       	call   f0108f61 <free_user_mem>
f010cee3:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010cee6:	90                   	nop
}
f010cee7:	c9                   	leave  
f010cee8:	c3                   	ret    

f010cee9 <sys_allocate_user_mem>:

void sys_allocate_user_mem(uint32 virtual_address, uint32 size)
{
f010cee9:	55                   	push   %ebp
f010ceea:	89 e5                	mov    %esp,%ebp
f010ceec:	83 ec 08             	sub    $0x8,%esp
	allocate_user_mem(curenv, virtual_address, size);
f010ceef:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010cef4:	83 ec 04             	sub    $0x4,%esp
f010cef7:	ff 75 0c             	pushl  0xc(%ebp)
f010cefa:	ff 75 08             	pushl  0x8(%ebp)
f010cefd:	50                   	push   %eax
f010cefe:	e8 41 c0 ff ff       	call   f0108f44 <allocate_user_mem>
f010cf03:	83 c4 10             	add    $0x10,%esp
	return;
f010cf06:	90                   	nop
}
f010cf07:	c9                   	leave  
f010cf08:	c3                   	ret    

f010cf09 <sys_allocate_chunk>:

void sys_allocate_chunk(uint32 virtual_address, uint32 size, uint32 perms)
{
f010cf09:	55                   	push   %ebp
f010cf0a:	89 e5                	mov    %esp,%ebp
f010cf0c:	83 ec 08             	sub    $0x8,%esp
	allocate_chunk(curenv->env_page_directory, virtual_address, size, perms);
f010cf0f:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010cf14:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cf17:	ff 75 10             	pushl  0x10(%ebp)
f010cf1a:	ff 75 0c             	pushl  0xc(%ebp)
f010cf1d:	ff 75 08             	pushl  0x8(%ebp)
f010cf20:	50                   	push   %eax
f010cf21:	e8 43 bd ff ff       	call   f0108c69 <allocate_chunk>
f010cf26:	83 c4 10             	add    $0x10,%esp
	return;
f010cf29:	90                   	nop
}
f010cf2a:	c9                   	leave  
f010cf2b:	c3                   	ret    

f010cf2c <sys_move_user_mem>:

//2014
void sys_move_user_mem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010cf2c:	55                   	push   %ebp
f010cf2d:	89 e5                	mov    %esp,%ebp
f010cf2f:	83 ec 08             	sub    $0x8,%esp
	move_user_mem(curenv, src_virtual_address, dst_virtual_address, size);
f010cf32:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010cf37:	ff 75 10             	pushl  0x10(%ebp)
f010cf3a:	ff 75 0c             	pushl  0xc(%ebp)
f010cf3d:	ff 75 08             	pushl  0x8(%ebp)
f010cf40:	50                   	push   %eax
f010cf41:	e8 46 c1 ff ff       	call   f010908c <move_user_mem>
f010cf46:	83 c4 10             	add    $0x10,%esp
	return;
f010cf49:	90                   	nop
}
f010cf4a:	c9                   	leave  
f010cf4b:	c3                   	ret    

f010cf4c <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010cf4c:	55                   	push   %ebp
f010cf4d:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010cf4f:	a1 2c 27 86 f0       	mov    0xf086272c,%eax
}
f010cf54:	5d                   	pop    %ebp
f010cf55:	c3                   	ret    

f010cf56 <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010cf56:	55                   	push   %ebp
f010cf57:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010cf59:	8b 45 08             	mov    0x8(%ebp),%eax
f010cf5c:	a3 2c 27 86 f0       	mov    %eax,0xf086272c
}
f010cf61:	90                   	nop
f010cf62:	5d                   	pop    %ebp
f010cf63:	c3                   	ret    

f010cf64 <sys_disable_interrupt>:
/*******************************/
/* INTERRUPTS SYSTEM CALLS */
/*******************************/
//NEW!! 2012...
void sys_disable_interrupt()
{
f010cf64:	55                   	push   %ebp
f010cf65:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags &= ~FL_IF ;
f010cf67:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010cf6c:	8b 15 f4 1d 86 f0    	mov    0xf0861df4,%edx
f010cf72:	8b 52 38             	mov    0x38(%edx),%edx
f010cf75:	80 e6 fd             	and    $0xfd,%dh
f010cf78:	89 50 38             	mov    %edx,0x38(%eax)
}
f010cf7b:	90                   	nop
f010cf7c:	5d                   	pop    %ebp
f010cf7d:	c3                   	ret    

f010cf7e <sys_enable_interrupt>:
void sys_enable_interrupt()
{
f010cf7e:	55                   	push   %ebp
f010cf7f:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags |= FL_IF ;
f010cf81:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010cf86:	8b 15 f4 1d 86 f0    	mov    0xf0861df4,%edx
f010cf8c:	8b 52 38             	mov    0x38(%edx),%edx
f010cf8f:	80 ce 02             	or     $0x2,%dh
f010cf92:	89 50 38             	mov    %edx,0x38(%eax)
}
f010cf95:	90                   	nop
f010cf96:	5d                   	pop    %ebp
f010cf97:	c3                   	ret    

f010cf98 <sys_createSemaphore>:

/*******************************/
/* SEMAPHORES SYSTEM CALLS */
/*******************************/
int sys_createSemaphore(char* semaphoreName, uint32 initialValue)
{
f010cf98:	55                   	push   %ebp
f010cf99:	89 e5                	mov    %esp,%ebp
f010cf9b:	83 ec 08             	sub    $0x8,%esp
	return createSemaphore(curenv->env_id, semaphoreName, initialValue);
f010cf9e:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010cfa3:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cfa6:	83 ec 04             	sub    $0x4,%esp
f010cfa9:	ff 75 0c             	pushl  0xc(%ebp)
f010cfac:	ff 75 08             	pushl  0x8(%ebp)
f010cfaf:	50                   	push   %eax
f010cfb0:	e8 d2 17 00 00       	call   f010e787 <createSemaphore>
f010cfb5:	83 c4 10             	add    $0x10,%esp
}
f010cfb8:	c9                   	leave  
f010cfb9:	c3                   	ret    

f010cfba <sys_waitSemaphore>:

void sys_waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010cfba:	55                   	push   %ebp
f010cfbb:	89 e5                	mov    %esp,%ebp
f010cfbd:	83 ec 08             	sub    $0x8,%esp
	waitSemaphore(ownerEnvID, semaphoreName);
f010cfc0:	83 ec 08             	sub    $0x8,%esp
f010cfc3:	ff 75 0c             	pushl  0xc(%ebp)
f010cfc6:	ff 75 08             	pushl  0x8(%ebp)
f010cfc9:	e8 86 18 00 00       	call   f010e854 <waitSemaphore>
f010cfce:	83 c4 10             	add    $0x10,%esp
}
f010cfd1:	90                   	nop
f010cfd2:	c9                   	leave  
f010cfd3:	c3                   	ret    

f010cfd4 <sys_signalSemaphore>:

void sys_signalSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010cfd4:	55                   	push   %ebp
f010cfd5:	89 e5                	mov    %esp,%ebp
f010cfd7:	83 ec 08             	sub    $0x8,%esp
	signalSemaphore(ownerEnvID, semaphoreName);
f010cfda:	83 ec 08             	sub    $0x8,%esp
f010cfdd:	ff 75 0c             	pushl  0xc(%ebp)
f010cfe0:	ff 75 08             	pushl  0x8(%ebp)
f010cfe3:	e8 1e 19 00 00       	call   f010e906 <signalSemaphore>
f010cfe8:	83 c4 10             	add    $0x10,%esp
}
f010cfeb:	90                   	nop
f010cfec:	c9                   	leave  
f010cfed:	c3                   	ret    

f010cfee <sys_getSemaphoreValue>:

int sys_getSemaphoreValue(int32 ownerEnvID, char* semaphoreName)
{
f010cfee:	55                   	push   %ebp
f010cfef:	89 e5                	mov    %esp,%ebp
f010cff1:	83 ec 18             	sub    $0x18,%esp
	int semID = get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010cff4:	83 ec 08             	sub    $0x8,%esp
f010cff7:	ff 75 0c             	pushl  0xc(%ebp)
f010cffa:	ff 75 08             	pushl  0x8(%ebp)
f010cffd:	e8 fd 15 00 00       	call   f010e5ff <get_semaphore_object_ID>
f010d002:	83 c4 10             	add    $0x10,%esp
f010d005:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(semID >= 0 && semID < MAX_SEMAPHORES) ;
f010d008:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d00c:	78 0c                	js     f010d01a <sys_getSemaphoreValue+0x2c>
f010d00e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d011:	a1 b0 26 86 f0       	mov    0xf08626b0,%eax
f010d016:	39 c2                	cmp    %eax,%edx
f010d018:	72 19                	jb     f010d033 <sys_getSemaphoreValue+0x45>
f010d01a:	68 f4 77 13 f0       	push   $0xf01377f4
f010d01f:	68 19 78 13 f0       	push   $0xf0137819
f010d024:	68 4a 01 00 00       	push   $0x14a
f010d029:	68 bf 77 13 f0       	push   $0xf01377bf
f010d02e:	e8 d2 31 ff ff       	call   f0100205 <_panic>

	return semaphores[semID].value ;
f010d033:	8b 0d 08 27 86 f0    	mov    0xf0862708,%ecx
f010d039:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d03c:	89 d0                	mov    %edx,%eax
f010d03e:	c1 e0 02             	shl    $0x2,%eax
f010d041:	01 d0                	add    %edx,%eax
f010d043:	01 c0                	add    %eax,%eax
f010d045:	01 d0                	add    %edx,%eax
f010d047:	01 c0                	add    %eax,%eax
f010d049:	01 d0                	add    %edx,%eax
f010d04b:	c1 e0 02             	shl    $0x2,%eax
f010d04e:	01 c8                	add    %ecx,%eax
f010d050:	8b 40 54             	mov    0x54(%eax),%eax
}
f010d053:	c9                   	leave  
f010d054:	c3                   	ret    

f010d055 <sys_createSharedObject>:

/*******************************/
/* SHARED MEMORY SYSTEM CALLS */
/*******************************/
int sys_createSharedObject(char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010d055:	55                   	push   %ebp
f010d056:	89 e5                	mov    %esp,%ebp
f010d058:	83 ec 18             	sub    $0x18,%esp
f010d05b:	8b 45 10             	mov    0x10(%ebp),%eax
f010d05e:	88 45 f4             	mov    %al,-0xc(%ebp)
	return createSharedObject(curenv->env_id, shareName, size, isWritable, virtual_address);
f010d061:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
f010d065:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010d06a:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d06d:	83 ec 0c             	sub    $0xc,%esp
f010d070:	ff 75 14             	pushl  0x14(%ebp)
f010d073:	52                   	push   %edx
f010d074:	ff 75 0c             	pushl  0xc(%ebp)
f010d077:	ff 75 08             	pushl  0x8(%ebp)
f010d07a:	50                   	push   %eax
f010d07b:	e8 fa a4 ff ff       	call   f010757a <createSharedObject>
f010d080:	83 c4 20             	add    $0x20,%esp
}
f010d083:	c9                   	leave  
f010d084:	c3                   	ret    

f010d085 <sys_getSizeOfSharedObject>:

int sys_getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010d085:	55                   	push   %ebp
f010d086:	89 e5                	mov    %esp,%ebp
f010d088:	83 ec 08             	sub    $0x8,%esp
	return getSizeOfSharedObject(ownerID, shareName);
f010d08b:	83 ec 08             	sub    $0x8,%esp
f010d08e:	ff 75 0c             	pushl  0xc(%ebp)
f010d091:	ff 75 08             	pushl  0x8(%ebp)
f010d094:	e8 9b a4 ff ff       	call   f0107534 <getSizeOfSharedObject>
f010d099:	83 c4 10             	add    $0x10,%esp
}
f010d09c:	c9                   	leave  
f010d09d:	c3                   	ret    

f010d09e <sys_getSharedObject>:

int sys_getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010d09e:	55                   	push   %ebp
f010d09f:	89 e5                	mov    %esp,%ebp
f010d0a1:	83 ec 08             	sub    $0x8,%esp
	return getSharedObject(ownerID, shareName, virtual_address);
f010d0a4:	83 ec 04             	sub    $0x4,%esp
f010d0a7:	ff 75 10             	pushl  0x10(%ebp)
f010d0aa:	ff 75 0c             	pushl  0xc(%ebp)
f010d0ad:	ff 75 08             	pushl  0x8(%ebp)
f010d0b0:	e8 27 a6 ff ff       	call   f01076dc <getSharedObject>
f010d0b5:	83 c4 10             	add    $0x10,%esp
}
f010d0b8:	c9                   	leave  
f010d0b9:	c3                   	ret    

f010d0ba <sys_freeSharedObject>:

int sys_freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010d0ba:	55                   	push   %ebp
f010d0bb:	89 e5                	mov    %esp,%ebp
f010d0bd:	83 ec 08             	sub    $0x8,%esp
	return freeSharedObject(sharedObjectID, startVA);
f010d0c0:	83 ec 08             	sub    $0x8,%esp
f010d0c3:	ff 75 0c             	pushl  0xc(%ebp)
f010d0c6:	ff 75 08             	pushl  0x8(%ebp)
f010d0c9:	e8 58 a7 ff ff       	call   f0107826 <freeSharedObject>
f010d0ce:	83 c4 10             	add    $0x10,%esp
}
f010d0d1:	c9                   	leave  
f010d0d2:	c3                   	ret    

f010d0d3 <sys_getMaxShares>:

uint32 sys_getMaxShares()
{
f010d0d3:	55                   	push   %ebp
f010d0d4:	89 e5                	mov    %esp,%ebp
	return MAX_SHARES;
f010d0d6:	a1 24 27 86 f0       	mov    0xf0862724,%eax
}
f010d0db:	5d                   	pop    %ebp
f010d0dc:	c3                   	ret    

f010d0dd <sys_getenvid>:
/* USER ENVIRONMENT SYSTEM CALLS */
/*********************************/
// Returns the current environment's envid.
//2017
static int32 sys_getenvid(void)
{
f010d0dd:	55                   	push   %ebp
f010d0de:	89 e5                	mov    %esp,%ebp
	return curenv->env_id;
f010d0e0:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010d0e5:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010d0e8:	5d                   	pop    %ebp
f010d0e9:	c3                   	ret    

f010d0ea <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010d0ea:	55                   	push   %ebp
f010d0eb:	89 e5                	mov    %esp,%ebp
	//return curenv->env_id;
	return (curenv - envs) ;
f010d0ed:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010d0f2:	89 c2                	mov    %eax,%edx
f010d0f4:	a1 f0 1d 86 f0       	mov    0xf0861df0,%eax
f010d0f9:	29 c2                	sub    %eax,%edx
f010d0fb:	89 d0                	mov    %edx,%eax
f010d0fd:	c1 f8 04             	sar    $0x4,%eax
f010d100:	89 c2                	mov    %eax,%edx
f010d102:	89 d0                	mov    %edx,%eax
f010d104:	c1 e0 03             	shl    $0x3,%eax
f010d107:	01 d0                	add    %edx,%eax
f010d109:	01 c0                	add    %eax,%eax
f010d10b:	01 d0                	add    %edx,%eax
f010d10d:	c1 e0 03             	shl    $0x3,%eax
f010d110:	01 d0                	add    %edx,%eax
f010d112:	89 c1                	mov    %eax,%ecx
f010d114:	c1 e1 08             	shl    $0x8,%ecx
f010d117:	01 c8                	add    %ecx,%eax
f010d119:	01 c0                	add    %eax,%eax
f010d11b:	01 d0                	add    %edx,%eax
f010d11d:	01 c0                	add    %eax,%eax
f010d11f:	01 d0                	add    %edx,%eax
f010d121:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010d128:	01 d0                	add    %edx,%eax
f010d12a:	89 c2                	mov    %eax,%edx
f010d12c:	c1 e2 09             	shl    $0x9,%edx
f010d12f:	29 c2                	sub    %eax,%edx
f010d131:	89 d0                	mov    %edx,%eax
f010d133:	f7 d8                	neg    %eax
}
f010d135:	5d                   	pop    %ebp
f010d136:	c3                   	ret    

f010d137 <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010d137:	55                   	push   %ebp
f010d138:	89 e5                	mov    %esp,%ebp
	return curenv->env_parent_id;
f010d13a:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010d13f:	8b 40 50             	mov    0x50(%eax),%eax
}
f010d142:	5d                   	pop    %ebp
f010d143:	c3                   	ret    

f010d144 <sys_destroy_env>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_destroy_env(int32 envid)
{
f010d144:	55                   	push   %ebp
f010d145:	89 e5                	mov    %esp,%ebp
f010d147:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;
	if (envid == 0)
f010d14a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010d14e:	75 0a                	jne    f010d15a <sys_destroy_env+0x16>
	{
		e = curenv ;
f010d150:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010d155:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010d158:	eb 22                	jmp    f010d17c <sys_destroy_env+0x38>
	}
	else if ((r = envid2env(envid, &e, 0)) < 0)
f010d15a:	83 ec 04             	sub    $0x4,%esp
f010d15d:	6a 00                	push   $0x0
f010d15f:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010d162:	50                   	push   %eax
f010d163:	ff 75 08             	pushl  0x8(%ebp)
f010d166:	e8 e5 cb ff ff       	call   f0109d50 <envid2env>
f010d16b:	83 c4 10             	add    $0x10,%esp
f010d16e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d171:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d175:	79 05                	jns    f010d17c <sys_destroy_env+0x38>
	{
		return r;
f010d177:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d17a:	eb 5e                	jmp    f010d1da <sys_destroy_env+0x96>
	}

	if (e == curenv)
f010d17c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d17f:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010d184:	39 c2                	cmp    %eax,%edx
f010d186:	75 1b                	jne    f010d1a3 <sys_destroy_env+0x5f>
	{
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
f010d188:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010d18d:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d190:	83 ec 08             	sub    $0x8,%esp
f010d193:	50                   	push   %eax
f010d194:	68 2e 78 13 f0       	push   $0xf013782e
f010d199:	e8 70 3b ff ff       	call   f0100d0e <cprintf>
f010d19e:	83 c4 10             	add    $0x10,%esp
f010d1a1:	eb 20                	jmp    f010d1c3 <sys_destroy_env+0x7f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
f010d1a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d1a6:	8b 50 4c             	mov    0x4c(%eax),%edx
f010d1a9:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010d1ae:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d1b1:	83 ec 04             	sub    $0x4,%esp
f010d1b4:	52                   	push   %edx
f010d1b5:	50                   	push   %eax
f010d1b6:	68 49 78 13 f0       	push   $0xf0137849
f010d1bb:	e8 4e 3b ff ff       	call   f0100d0e <cprintf>
f010d1c0:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010d1c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d1c6:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d1c9:	83 ec 0c             	sub    $0xc,%esp
f010d1cc:	50                   	push   %eax
f010d1cd:	e8 4b 84 ff ff       	call   f010561d <sched_kill_env>
f010d1d2:	83 c4 10             	add    $0x10,%esp

	return 0;
f010d1d5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d1da:	c9                   	leave  
f010d1db:	c3                   	ret    

f010d1dc <sys_exit_env>:

//Just place the current env into the EXIT queue & schedule the next one
static void sys_exit_env()
{
f010d1dc:	55                   	push   %ebp
f010d1dd:	89 e5                	mov    %esp,%ebp
f010d1df:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010d1e2:	e8 4a cb ff ff       	call   f0109d31 <env_exit>
	//env_run_cmd_prmpt();
}
f010d1e7:	90                   	nop
f010d1e8:	c9                   	leave  
f010d1e9:	c3                   	ret    

f010d1ea <sys_create_env>:

//New update in 2020
//Create a new env & add it to the NEW queue
int sys_create_env(char* programName, unsigned int page_WS_size,unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010d1ea:	55                   	push   %ebp
f010d1eb:	89 e5                	mov    %esp,%ebp
f010d1ed:	83 ec 18             	sub    $0x18,%esp
	struct Env* env =  env_create(programName, page_WS_size, LRU_second_list_size, percent_WS_pages_to_remove);
f010d1f0:	ff 75 14             	pushl  0x14(%ebp)
f010d1f3:	ff 75 10             	pushl  0x10(%ebp)
f010d1f6:	ff 75 0c             	pushl  0xc(%ebp)
f010d1f9:	ff 75 08             	pushl  0x8(%ebp)
f010d1fc:	e8 a8 be ff ff       	call   f01090a9 <env_create>
f010d201:	83 c4 10             	add    $0x10,%esp
f010d204:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010d207:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d20b:	75 07                	jne    f010d214 <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010d20d:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010d212:	eb 14                	jmp    f010d228 <sys_create_env+0x3e>
	}

	//2015
	sched_new_env(env);
f010d214:	83 ec 0c             	sub    $0xc,%esp
f010d217:	ff 75 f4             	pushl  -0xc(%ebp)
f010d21a:	e8 c3 7f ff ff       	call   f01051e2 <sched_new_env>
f010d21f:	83 c4 10             	add    $0x10,%esp

	return env->env_id;
f010d222:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d225:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010d228:	c9                   	leave  
f010d229:	c3                   	ret    

f010d22a <sys_run_env>:

//Place a new env into the READY queue
void sys_run_env(int32 envId)
{
f010d22a:	55                   	push   %ebp
f010d22b:	89 e5                	mov    %esp,%ebp
f010d22d:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010d230:	8b 45 08             	mov    0x8(%ebp),%eax
f010d233:	83 ec 0c             	sub    $0xc,%esp
f010d236:	50                   	push   %eax
f010d237:	e8 c3 7f ff ff       	call   f01051ff <sched_run_env>
f010d23c:	83 c4 10             	add    $0x10,%esp
}
f010d23f:	90                   	nop
f010d240:	c9                   	leave  
f010d241:	c3                   	ret    

f010d242 <sys_get_virtual_time>:
/*******************************/
/* ETC... SYSTEM CALLS */
/*******************************/

struct uint64 sys_get_virtual_time()
{
f010d242:	55                   	push   %ebp
f010d243:	89 e5                	mov    %esp,%ebp
f010d245:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010d248:	0f 31                	rdtsc  
f010d24a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010d24d:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010d250:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d253:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d256:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d259:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010d25c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010d25f:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d262:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d265:	89 01                	mov    %eax,(%ecx)
f010d267:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010d26a:	8b 45 08             	mov    0x8(%ebp),%eax
f010d26d:	c9                   	leave  
f010d26e:	c2 04 00             	ret    $0x4

f010d271 <sys_rcr2>:

uint32 sys_rcr2()
{
f010d271:	55                   	push   %ebp
f010d272:	89 e5                	mov    %esp,%ebp
f010d274:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010d277:	0f 20 d0             	mov    %cr2,%eax
f010d27a:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010d27d:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010d280:	90                   	nop
}
f010d281:	c9                   	leave  
f010d282:	c3                   	ret    

f010d283 <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010d283:	55                   	push   %ebp
f010d284:	89 e5                	mov    %esp,%ebp
f010d286:	83 ec 04             	sub    $0x4,%esp
f010d289:	8b 45 08             	mov    0x8(%ebp),%eax
f010d28c:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010d28f:	8a 45 fc             	mov    -0x4(%ebp),%al
f010d292:	a2 a8 26 86 f0       	mov    %al,0xf08626a8
}
f010d297:	90                   	nop
f010d298:	c9                   	leave  
f010d299:	c3                   	ret    

f010d29a <rsttst>:

uint32 tstcnt;
void rsttst()
{
f010d29a:	55                   	push   %ebp
f010d29b:	89 e5                	mov    %esp,%ebp
	tstcnt = 0;
f010d29d:	c7 05 b0 28 86 f0 00 	movl   $0x0,0xf08628b0
f010d2a4:	00 00 00 
}
f010d2a7:	90                   	nop
f010d2a8:	5d                   	pop    %ebp
f010d2a9:	c3                   	ret    

f010d2aa <inctst>:
void inctst()
{
f010d2aa:	55                   	push   %ebp
f010d2ab:	89 e5                	mov    %esp,%ebp
	tstcnt++;
f010d2ad:	a1 b0 28 86 f0       	mov    0xf08628b0,%eax
f010d2b2:	40                   	inc    %eax
f010d2b3:	a3 b0 28 86 f0       	mov    %eax,0xf08628b0
}
f010d2b8:	90                   	nop
f010d2b9:	5d                   	pop    %ebp
f010d2ba:	c3                   	ret    

f010d2bb <gettst>:
uint32 gettst()
{
f010d2bb:	55                   	push   %ebp
f010d2bc:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f010d2be:	a1 b0 28 86 f0       	mov    0xf08628b0,%eax
}
f010d2c3:	5d                   	pop    %ebp
f010d2c4:	c3                   	ret    

f010d2c5 <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f010d2c5:	55                   	push   %ebp
f010d2c6:	89 e5                	mov    %esp,%ebp
f010d2c8:	83 ec 28             	sub    $0x28,%esp
f010d2cb:	8b 45 14             	mov    0x14(%ebp),%eax
f010d2ce:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f010d2d1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f010d2d8:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f010d2dc:	83 f8 65             	cmp    $0x65,%eax
f010d2df:	74 5d                	je     f010d33e <tst+0x79>
f010d2e1:	83 f8 65             	cmp    $0x65,%eax
f010d2e4:	7f 0a                	jg     f010d2f0 <tst+0x2b>
f010d2e6:	83 f8 62             	cmp    $0x62,%eax
f010d2e9:	74 73                	je     f010d35e <tst+0x99>
f010d2eb:	e9 91 00 00 00       	jmp    f010d381 <tst+0xbc>
f010d2f0:	83 f8 67             	cmp    $0x67,%eax
f010d2f3:	74 29                	je     f010d31e <tst+0x59>
f010d2f5:	83 f8 6c             	cmp    $0x6c,%eax
f010d2f8:	0f 85 83 00 00 00    	jne    f010d381 <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f010d2fe:	8b 45 08             	mov    0x8(%ebp),%eax
f010d301:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d304:	73 09                	jae    f010d30f <tst+0x4a>
			chk = 1;
f010d306:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010d30d:	eb 68                	jmp    f010d377 <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f010d30f:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010d313:	74 62                	je     f010d377 <tst+0xb2>
			chk = 1;
f010d315:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d31c:	eb 59                	jmp    f010d377 <tst+0xb2>
	case 'g':
		if (n > v1)
f010d31e:	8b 45 08             	mov    0x8(%ebp),%eax
f010d321:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d324:	76 09                	jbe    f010d32f <tst+0x6a>
			chk = 1;
f010d326:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010d32d:	eb 4b                	jmp    f010d37a <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f010d32f:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010d333:	74 45                	je     f010d37a <tst+0xb5>
			chk = 1;
f010d335:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d33c:	eb 3c                	jmp    f010d37a <tst+0xb5>
	case 'e':
		if (n == v1)
f010d33e:	8b 45 08             	mov    0x8(%ebp),%eax
f010d341:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d344:	75 09                	jne    f010d34f <tst+0x8a>
			chk = 1;
f010d346:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010d34d:	eb 2e                	jmp    f010d37d <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f010d34f:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010d353:	74 28                	je     f010d37d <tst+0xb8>
			chk = 1;
f010d355:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d35c:	eb 1f                	jmp    f010d37d <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v1)
f010d35e:	8b 45 08             	mov    0x8(%ebp),%eax
f010d361:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d364:	72 1a                	jb     f010d380 <tst+0xbb>
f010d366:	8b 45 08             	mov    0x8(%ebp),%eax
f010d369:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d36c:	77 12                	ja     f010d380 <tst+0xbb>
			chk = 1;
f010d36e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d375:	eb 09                	jmp    f010d380 <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010d377:	90                   	nop
f010d378:	eb 07                	jmp    f010d381 <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010d37a:	90                   	nop
f010d37b:	eb 04                	jmp    f010d381 <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010d37d:	90                   	nop
f010d37e:	eb 01                	jmp    f010d381 <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v1)
			chk = 1;
		break;
f010d380:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f010d381:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d385:	75 17                	jne    f010d39e <tst+0xd9>
f010d387:	83 ec 04             	sub    $0x4,%esp
f010d38a:	68 61 78 13 f0       	push   $0xf0137861
f010d38f:	68 00 02 00 00       	push   $0x200
f010d394:	68 bf 77 13 f0       	push   $0xf01377bf
f010d399:	e8 67 2e ff ff       	call   f0100205 <_panic>
	tstcnt++ ;
f010d39e:	a1 b0 28 86 f0       	mov    0xf08628b0,%eax
f010d3a3:	40                   	inc    %eax
f010d3a4:	a3 b0 28 86 f0       	mov    %eax,0xf08628b0
	return;
f010d3a9:	90                   	nop
}
f010d3aa:	c9                   	leave  
f010d3ab:	c3                   	ret    

f010d3ac <chktst>:

void chktst(uint32 n)
{
f010d3ac:	55                   	push   %ebp
f010d3ad:	89 e5                	mov    %esp,%ebp
f010d3af:	83 ec 08             	sub    $0x8,%esp
	if (tstcnt == n)
f010d3b2:	a1 b0 28 86 f0       	mov    0xf08628b0,%eax
f010d3b7:	3b 45 08             	cmp    0x8(%ebp),%eax
f010d3ba:	75 12                	jne    f010d3ce <chktst+0x22>
		cprintf("\nCongratulations... test runs successfully\n");
f010d3bc:	83 ec 0c             	sub    $0xc,%esp
f010d3bf:	68 74 78 13 f0       	push   $0xf0137874
f010d3c4:	e8 45 39 ff ff       	call   f0100d0e <cprintf>
f010d3c9:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f010d3cc:	eb 17                	jmp    f010d3e5 <chktst+0x39>
void chktst(uint32 n)
{
	if (tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f010d3ce:	83 ec 04             	sub    $0x4,%esp
f010d3d1:	68 a0 78 13 f0       	push   $0xf01378a0
f010d3d6:	68 0a 02 00 00       	push   $0x20a
f010d3db:	68 bf 77 13 f0       	push   $0xf01377bf
f010d3e0:	e8 20 2e ff ff       	call   f0100205 <_panic>
}
f010d3e5:	c9                   	leave  
f010d3e6:	c3                   	ret    

f010d3e7 <sys_check_LRU_lists>:



//2020
int sys_check_LRU_lists(uint32* active_list_content, uint32* second_list_content, int actual_active_list_size, int actual_second_list_size)
{
f010d3e7:	55                   	push   %ebp
f010d3e8:	89 e5                	mov    %esp,%ebp
f010d3ea:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010d3ed:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010d3f2:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int active_list_validation = 1;
f010d3f5:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
	int second_list_validation = 1;
f010d3fc:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	//1- Check active list content if not null
	if(active_list_content != NULL)
f010d403:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010d407:	0f 84 a5 00 00 00    	je     f010d4b2 <sys_check_LRU_lists+0xcb>
	{
		int idx_active_list = 0;
f010d40d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d414:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d417:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f010d41d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d420:	eb 4a                	jmp    f010d46c <sys_check_LRU_lists+0x85>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(active_list_content[idx_active_list], PAGE_SIZE))
f010d422:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d425:	8b 00                	mov    (%eax),%eax
f010d427:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010d42a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d42d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d432:	89 c2                	mov    %eax,%edx
f010d434:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d437:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d43e:	8b 45 08             	mov    0x8(%ebp),%eax
f010d441:	01 c8                	add    %ecx,%eax
f010d443:	8b 00                	mov    (%eax),%eax
f010d445:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010d448:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d44b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d450:	39 c2                	cmp    %eax,%edx
f010d452:	74 09                	je     f010d45d <sys_check_LRU_lists+0x76>
			{
				active_list_validation = 0;
f010d454:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
				break;
f010d45b:	eb 3e                	jmp    f010d49b <sys_check_LRU_lists+0xb4>
			}
			idx_active_list++;
f010d45d:	ff 45 f0             	incl   -0x10(%ebp)

	//1- Check active list content if not null
	if(active_list_content != NULL)
	{
		int idx_active_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d460:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d463:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d469:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d46c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d470:	74 08                	je     f010d47a <sys_check_LRU_lists+0x93>
f010d472:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d475:	8b 40 10             	mov    0x10(%eax),%eax
f010d478:	eb 05                	jmp    f010d47f <sys_check_LRU_lists+0x98>
f010d47a:	b8 00 00 00 00       	mov    $0x0,%eax
f010d47f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d482:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f010d488:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d48b:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d491:	85 c0                	test   %eax,%eax
f010d493:	75 8d                	jne    f010d422 <sys_check_LRU_lists+0x3b>
f010d495:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d499:	75 87                	jne    f010d422 <sys_check_LRU_lists+0x3b>
				active_list_validation = 0;
				break;
			}
			idx_active_list++;
		}
		if(LIST_SIZE(&env->ActiveList) != actual_active_list_size)
f010d49b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d49e:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f010d4a4:	8b 45 10             	mov    0x10(%ebp),%eax
f010d4a7:	39 c2                	cmp    %eax,%edx
f010d4a9:	74 07                	je     f010d4b2 <sys_check_LRU_lists+0xcb>
		{
			active_list_validation = 0;
f010d4ab:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

		}
	}

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
f010d4b2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010d4b6:	0f 84 a5 00 00 00    	je     f010d561 <sys_check_LRU_lists+0x17a>
	{
		int idx_second_list = 0;
f010d4bc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d4c3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d4c6:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f010d4cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d4cf:	eb 4a                	jmp    f010d51b <sys_check_LRU_lists+0x134>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(second_list_content[idx_second_list], PAGE_SIZE))
f010d4d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d4d4:	8b 00                	mov    (%eax),%eax
f010d4d6:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d4d9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d4dc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d4e1:	89 c2                	mov    %eax,%edx
f010d4e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d4e6:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d4ed:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d4f0:	01 c8                	add    %ecx,%eax
f010d4f2:	8b 00                	mov    (%eax),%eax
f010d4f4:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010d4f7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d4fa:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d4ff:	39 c2                	cmp    %eax,%edx
f010d501:	74 09                	je     f010d50c <sys_check_LRU_lists+0x125>
			{
				second_list_validation = 0;
f010d503:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
				break;
f010d50a:	eb 3e                	jmp    f010d54a <sys_check_LRU_lists+0x163>
			}
			idx_second_list++;
f010d50c:	ff 45 ec             	incl   -0x14(%ebp)

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
	{
		int idx_second_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d50f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d512:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d518:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d51b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d51f:	74 08                	je     f010d529 <sys_check_LRU_lists+0x142>
f010d521:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d524:	8b 40 10             	mov    0x10(%eax),%eax
f010d527:	eb 05                	jmp    f010d52e <sys_check_LRU_lists+0x147>
f010d529:	b8 00 00 00 00       	mov    $0x0,%eax
f010d52e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d531:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010d537:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d53a:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d540:	85 c0                	test   %eax,%eax
f010d542:	75 8d                	jne    f010d4d1 <sys_check_LRU_lists+0xea>
f010d544:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d548:	75 87                	jne    f010d4d1 <sys_check_LRU_lists+0xea>
				second_list_validation = 0;
				break;
			}
			idx_second_list++;
		}
		if(LIST_SIZE(&env->SecondList) != actual_second_list_size)
f010d54a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d54d:	8b 90 e4 05 00 00    	mov    0x5e4(%eax),%edx
f010d553:	8b 45 14             	mov    0x14(%ebp),%eax
f010d556:	39 c2                	cmp    %eax,%edx
f010d558:	74 07                	je     f010d561 <sys_check_LRU_lists+0x17a>
			second_list_validation = 0;
f010d55a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	}
	return active_list_validation&second_list_validation;
f010d561:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d564:	23 45 f8             	and    -0x8(%ebp),%eax
}
f010d567:	c9                   	leave  
f010d568:	c3                   	ret    

f010d569 <sys_check_LRU_lists_free>:



//2020
int sys_check_LRU_lists_free(uint32* list_content, int list_size)
{
f010d569:	55                   	push   %ebp
f010d56a:	89 e5                	mov    %esp,%ebp
f010d56c:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010d56f:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010d574:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int list_validation_count = 0;
f010d577:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d57e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d581:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f010d587:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d58a:	eb 65                	jmp    f010d5f1 <sys_check_LRU_lists_free+0x88>
	{
		for(int var = 0; var < list_size; var++)
f010d58c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010d593:	eb 3a                	jmp    f010d5cf <sys_check_LRU_lists_free+0x66>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010d595:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d598:	8b 00                	mov    (%eax),%eax
f010d59a:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010d59d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d5a0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d5a5:	89 c2                	mov    %eax,%edx
f010d5a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d5aa:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d5b1:	8b 45 08             	mov    0x8(%ebp),%eax
f010d5b4:	01 c8                	add    %ecx,%eax
f010d5b6:	8b 00                	mov    (%eax),%eax
f010d5b8:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d5bb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d5be:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d5c3:	39 c2                	cmp    %eax,%edx
f010d5c5:	75 05                	jne    f010d5cc <sys_check_LRU_lists_free+0x63>
			{
				list_validation_count++;
f010d5c7:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010d5ca:	eb 0b                	jmp    f010d5d7 <sys_check_LRU_lists_free+0x6e>
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
	{
		for(int var = 0; var < list_size; var++)
f010d5cc:	ff 45 f4             	incl   -0xc(%ebp)
f010d5cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d5d2:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d5d5:	7c be                	jl     f010d595 <sys_check_LRU_lists_free+0x2c>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010d5d7:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010d5db:	7e 08                	jle    f010d5e5 <sys_check_LRU_lists_free+0x7c>
			return list_validation_count;
f010d5dd:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d5e0:	e9 ed 00 00 00       	jmp    f010d6d2 <sys_check_LRU_lists_free+0x169>
	struct Env* env = curenv;
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d5e5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d5e8:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d5ee:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d5f1:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d5f5:	74 08                	je     f010d5ff <sys_check_LRU_lists_free+0x96>
f010d5f7:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d5fa:	8b 40 10             	mov    0x10(%eax),%eax
f010d5fd:	eb 05                	jmp    f010d604 <sys_check_LRU_lists_free+0x9b>
f010d5ff:	b8 00 00 00 00       	mov    $0x0,%eax
f010d604:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d607:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f010d60d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d610:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d616:	85 c0                	test   %eax,%eax
f010d618:	0f 85 6e ff ff ff    	jne    f010d58c <sys_check_LRU_lists_free+0x23>
f010d61e:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d622:	0f 85 64 ff ff ff    	jne    f010d58c <sys_check_LRU_lists_free+0x23>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d628:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d62b:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f010d631:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d634:	eb 62                	jmp    f010d698 <sys_check_LRU_lists_free+0x12f>
	{
		for(int var = 0; var < list_size; var++)
f010d636:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010d63d:	eb 3a                	jmp    f010d679 <sys_check_LRU_lists_free+0x110>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010d63f:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d642:	8b 00                	mov    (%eax),%eax
f010d644:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010d647:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d64a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d64f:	89 c2                	mov    %eax,%edx
f010d651:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d654:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d65b:	8b 45 08             	mov    0x8(%ebp),%eax
f010d65e:	01 c8                	add    %ecx,%eax
f010d660:	8b 00                	mov    (%eax),%eax
f010d662:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010d665:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d668:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d66d:	39 c2                	cmp    %eax,%edx
f010d66f:	75 05                	jne    f010d676 <sys_check_LRU_lists_free+0x10d>
			{
				list_validation_count++;
f010d671:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010d674:	eb 0b                	jmp    f010d681 <sys_check_LRU_lists_free+0x118>
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
	{
		for(int var = 0; var < list_size; var++)
f010d676:	ff 45 f0             	incl   -0x10(%ebp)
f010d679:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d67c:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d67f:	7c be                	jl     f010d63f <sys_check_LRU_lists_free+0xd6>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010d681:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010d685:	7e 05                	jle    f010d68c <sys_check_LRU_lists_free+0x123>
			return list_validation_count;
f010d687:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d68a:	eb 46                	jmp    f010d6d2 <sys_check_LRU_lists_free+0x169>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d68c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d68f:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d695:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d698:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d69c:	74 08                	je     f010d6a6 <sys_check_LRU_lists_free+0x13d>
f010d69e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d6a1:	8b 40 10             	mov    0x10(%eax),%eax
f010d6a4:	eb 05                	jmp    f010d6ab <sys_check_LRU_lists_free+0x142>
f010d6a6:	b8 00 00 00 00       	mov    $0x0,%eax
f010d6ab:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d6ae:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010d6b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d6b7:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d6bd:	85 c0                	test   %eax,%eax
f010d6bf:	0f 85 71 ff ff ff    	jne    f010d636 <sys_check_LRU_lists_free+0xcd>
f010d6c5:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d6c9:	0f 85 67 ff ff ff    	jne    f010d636 <sys_check_LRU_lists_free+0xcd>
			return list_validation_count;

	}


	return list_validation_count;
f010d6cf:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f010d6d2:	c9                   	leave  
f010d6d3:	c3                   	ret    

f010d6d4 <syscall>:
/*****************************************************************************/
/************************* SYSTEM CALLS DISPATCHER ***************************/
/*****************************************************************************/
// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010d6d4:	55                   	push   %ebp
f010d6d5:	89 e5                	mov    %esp,%ebp
f010d6d7:	56                   	push   %esi
f010d6d8:	53                   	push   %ebx
f010d6d9:	83 ec 10             	sub    $0x10,%esp
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	// LAB 3: Your code here.
	switch(syscallno)
f010d6dc:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010d6e0:	0f 87 0e 04 00 00    	ja     f010daf4 <syscall+0x420>
f010d6e6:	8b 45 08             	mov    0x8(%ebp),%eax
f010d6e9:	c1 e0 02             	shl    $0x2,%eax
f010d6ec:	05 bc 78 13 f0       	add    $0xf01378bc,%eax
f010d6f1:	8b 00                	mov    (%eax),%eax
f010d6f3:	ff e0                	jmp    *%eax
	{
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010d6f5:	8b 45 14             	mov    0x14(%ebp),%eax
f010d6f8:	0f b6 d0             	movzbl %al,%edx
f010d6fb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d6fe:	83 ec 04             	sub    $0x4,%esp
f010d701:	52                   	push   %edx
f010d702:	ff 75 10             	pushl  0x10(%ebp)
f010d705:	50                   	push   %eax
f010d706:	e8 db f4 ff ff       	call   f010cbe6 <sys_cputs>
f010d70b:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d70e:	b8 00 00 00 00       	mov    $0x0,%eax
f010d713:	e9 e1 03 00 00       	jmp    f010daf9 <syscall+0x425>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010d718:	e8 3e f5 ff ff       	call   f010cc5b <sys_cgetc>
f010d71d:	e9 d7 03 00 00       	jmp    f010daf9 <syscall+0x425>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010d722:	83 ec 08             	sub    $0x8,%esp
f010d725:	ff 75 10             	pushl  0x10(%ebp)
f010d728:	ff 75 0c             	pushl  0xc(%ebp)
f010d72b:	e8 91 f6 ff ff       	call   f010cdc1 <sys_calculate_required_frames>
f010d730:	83 c4 10             	add    $0x10,%esp
f010d733:	e9 c1 03 00 00       	jmp    f010daf9 <syscall+0x425>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010d738:	e8 a6 f6 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f010d73d:	e9 b7 03 00 00       	jmp    f010daf9 <syscall+0x425>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010d742:	e8 bb f6 ff ff       	call   f010ce02 <sys_calculate_modified_frames>
f010d747:	e9 ad 03 00 00       	jmp    f010daf9 <syscall+0x425>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010d74c:	e8 cb f6 ff ff       	call   f010ce1c <sys_calculate_notmod_frames>
f010d751:	e9 a3 03 00 00       	jmp    f010daf9 <syscall+0x425>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010d756:	e8 33 f7 ff ff       	call   f010ce8e <sys_pf_calculate_allocated_pages>
f010d75b:	e9 99 03 00 00       	jmp    f010daf9 <syscall+0x425>
		break;
	case SYS_calculate_pages_tobe_removed_ready_exit:
		return sys_calculate_pages_tobe_removed_ready_exit(a1);
f010d760:	83 ec 0c             	sub    $0xc,%esp
f010d763:	ff 75 0c             	pushl  0xc(%ebp)
f010d766:	e8 cb f6 ff ff       	call   f010ce36 <sys_calculate_pages_tobe_removed_ready_exit>
f010d76b:	83 c4 10             	add    $0x10,%esp
f010d76e:	e9 86 03 00 00       	jmp    f010daf9 <syscall+0x425>
		break;
	case SYS_scarce_memory:
		sys_scarce_memory();
f010d773:	e8 d4 f6 ff ff       	call   f010ce4c <sys_scarce_memory>
		return 0;
f010d778:	b8 00 00 00 00       	mov    $0x0,%eax
f010d77d:	e9 77 03 00 00       	jmp    f010daf9 <syscall+0x425>
		break;
	case SYS_free_user_mem:
		sys_free_user_mem(a1, a2);
f010d782:	83 ec 08             	sub    $0x8,%esp
f010d785:	ff 75 10             	pushl  0x10(%ebp)
f010d788:	ff 75 0c             	pushl  0xc(%ebp)
f010d78b:	e8 17 f7 ff ff       	call   f010cea7 <sys_free_user_mem>
f010d790:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d793:	b8 00 00 00 00       	mov    $0x0,%eax
f010d798:	e9 5c 03 00 00       	jmp    f010daf9 <syscall+0x425>
		break;
		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010d79d:	8b 55 10             	mov    0x10(%ebp),%edx
f010d7a0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d7a3:	83 ec 08             	sub    $0x8,%esp
f010d7a6:	52                   	push   %edx
f010d7a7:	50                   	push   %eax
f010d7a8:	e8 c1 f4 ff ff       	call   f010cc6e <__sys_allocate_page>
f010d7ad:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d7b0:	b8 00 00 00 00       	mov    $0x0,%eax
f010d7b5:	e9 3f 03 00 00       	jmp    f010daf9 <syscall+0x425>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010d7ba:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010d7bd:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010d7c0:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d7c3:	8b 55 10             	mov    0x10(%ebp),%edx
f010d7c6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d7c9:	83 ec 0c             	sub    $0xc,%esp
f010d7cc:	56                   	push   %esi
f010d7cd:	53                   	push   %ebx
f010d7ce:	51                   	push   %ecx
f010d7cf:	52                   	push   %edx
f010d7d0:	50                   	push   %eax
f010d7d1:	e8 b1 f5 ff ff       	call   f010cd87 <__sys_map_frame>
f010d7d6:	83 c4 20             	add    $0x20,%esp
		return 0;
f010d7d9:	b8 00 00 00 00       	mov    $0x0,%eax
f010d7de:	e9 16 03 00 00       	jmp    f010daf9 <syscall+0x425>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010d7e3:	8b 55 10             	mov    0x10(%ebp),%edx
f010d7e6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d7e9:	83 ec 08             	sub    $0x8,%esp
f010d7ec:	52                   	push   %edx
f010d7ed:	50                   	push   %eax
f010d7ee:	e8 b1 f5 ff ff       	call   f010cda4 <__sys_unmap_frame>
f010d7f3:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d7f6:	b8 00 00 00 00       	mov    $0x0,%eax
f010d7fb:	e9 f9 02 00 00       	jmp    f010daf9 <syscall+0x425>
		break;

		//2022
	case SYS_allocate_chunk_in_mem:
		sys_allocate_chunk(a1, (uint32)a2, a3);
f010d800:	83 ec 04             	sub    $0x4,%esp
f010d803:	ff 75 14             	pushl  0x14(%ebp)
f010d806:	ff 75 10             	pushl  0x10(%ebp)
f010d809:	ff 75 0c             	pushl  0xc(%ebp)
f010d80c:	e8 f8 f6 ff ff       	call   f010cf09 <sys_allocate_chunk>
f010d811:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d814:	b8 00 00 00 00       	mov    $0x0,%eax
f010d819:	e9 db 02 00 00       	jmp    f010daf9 <syscall+0x425>
		break;
	case SYS_disableINTR:
		sys_disable_interrupt();
f010d81e:	e8 41 f7 ff ff       	call   f010cf64 <sys_disable_interrupt>
		return 0;
f010d823:	b8 00 00 00 00       	mov    $0x0,%eax
f010d828:	e9 cc 02 00 00       	jmp    f010daf9 <syscall+0x425>
		break;

	case SYS_enableINTR:
		sys_enable_interrupt();
f010d82d:	e8 4c f7 ff ff       	call   f010cf7e <sys_enable_interrupt>
		return 0;
f010d832:	b8 00 00 00 00       	mov    $0x0,%eax
f010d837:	e9 bd 02 00 00       	jmp    f010daf9 <syscall+0x425>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010d83c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d83f:	0f be c0             	movsbl %al,%eax
f010d842:	83 ec 0c             	sub    $0xc,%esp
f010d845:	50                   	push   %eax
f010d846:	e8 ec f3 ff ff       	call   f010cc37 <sys_cputc>
f010d84b:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d84e:	b8 00 00 00 00       	mov    $0x0,%eax
f010d853:	e9 a1 02 00 00       	jmp    f010daf9 <syscall+0x425>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010d858:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d85b:	0f be c0             	movsbl %al,%eax
f010d85e:	83 ec 0c             	sub    $0xc,%esp
f010d861:	50                   	push   %eax
f010d862:	e8 f3 f5 ff ff       	call   f010ce5a <sys_clearFFL>
f010d867:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d86a:	b8 00 00 00 00       	mov    $0x0,%eax
f010d86f:	e9 85 02 00 00       	jmp    f010daf9 <syscall+0x425>
		break;

	case SYS_create_semaphore:
		return sys_createSemaphore((char*)a1, a2);
f010d874:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d877:	83 ec 08             	sub    $0x8,%esp
f010d87a:	ff 75 10             	pushl  0x10(%ebp)
f010d87d:	50                   	push   %eax
f010d87e:	e8 15 f7 ff ff       	call   f010cf98 <sys_createSemaphore>
f010d883:	83 c4 10             	add    $0x10,%esp
f010d886:	e9 6e 02 00 00       	jmp    f010daf9 <syscall+0x425>
		break;

	case SYS_wait_semaphore:
		sys_waitSemaphore((int32)a1, (char*)a2);
f010d88b:	8b 55 10             	mov    0x10(%ebp),%edx
f010d88e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d891:	83 ec 08             	sub    $0x8,%esp
f010d894:	52                   	push   %edx
f010d895:	50                   	push   %eax
f010d896:	e8 1f f7 ff ff       	call   f010cfba <sys_waitSemaphore>
f010d89b:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d89e:	b8 00 00 00 00       	mov    $0x0,%eax
f010d8a3:	e9 51 02 00 00       	jmp    f010daf9 <syscall+0x425>
		break;

	case SYS_signal_semaphore:
		sys_signalSemaphore((int32)a1, (char*)a2);
f010d8a8:	8b 55 10             	mov    0x10(%ebp),%edx
f010d8ab:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d8ae:	83 ec 08             	sub    $0x8,%esp
f010d8b1:	52                   	push   %edx
f010d8b2:	50                   	push   %eax
f010d8b3:	e8 1c f7 ff ff       	call   f010cfd4 <sys_signalSemaphore>
f010d8b8:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d8bb:	b8 00 00 00 00       	mov    $0x0,%eax
f010d8c0:	e9 34 02 00 00       	jmp    f010daf9 <syscall+0x425>
		break;

	case SYS_get_semaphore_value:
		return sys_getSemaphoreValue((int32)a1, (char*)a2);
f010d8c5:	8b 55 10             	mov    0x10(%ebp),%edx
f010d8c8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d8cb:	83 ec 08             	sub    $0x8,%esp
f010d8ce:	52                   	push   %edx
f010d8cf:	50                   	push   %eax
f010d8d0:	e8 19 f7 ff ff       	call   f010cfee <sys_getSemaphoreValue>
f010d8d5:	83 c4 10             	add    $0x10,%esp
f010d8d8:	e9 1c 02 00 00       	jmp    f010daf9 <syscall+0x425>
		break;

	case SYS_create_shared_object:
		return sys_createSharedObject((char*)a1, a2, a3, (void*)a4);
f010d8dd:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010d8e0:	8b 45 14             	mov    0x14(%ebp),%eax
f010d8e3:	0f b6 d0             	movzbl %al,%edx
f010d8e6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d8e9:	51                   	push   %ecx
f010d8ea:	52                   	push   %edx
f010d8eb:	ff 75 10             	pushl  0x10(%ebp)
f010d8ee:	50                   	push   %eax
f010d8ef:	e8 61 f7 ff ff       	call   f010d055 <sys_createSharedObject>
f010d8f4:	83 c4 10             	add    $0x10,%esp
f010d8f7:	e9 fd 01 00 00       	jmp    f010daf9 <syscall+0x425>
		break;

	case SYS_get_shared_object:
		return sys_getSharedObject((int32)a1, (char*)a2, (void*)a3);
f010d8fc:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d8ff:	8b 55 10             	mov    0x10(%ebp),%edx
f010d902:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d905:	83 ec 04             	sub    $0x4,%esp
f010d908:	51                   	push   %ecx
f010d909:	52                   	push   %edx
f010d90a:	50                   	push   %eax
f010d90b:	e8 8e f7 ff ff       	call   f010d09e <sys_getSharedObject>
f010d910:	83 c4 10             	add    $0x10,%esp
f010d913:	e9 e1 01 00 00       	jmp    f010daf9 <syscall+0x425>
		break;

	case SYS_free_shared_object:
		return sys_freeSharedObject((int32)a1, (void *)a2);
f010d918:	8b 55 10             	mov    0x10(%ebp),%edx
f010d91b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d91e:	83 ec 08             	sub    $0x8,%esp
f010d921:	52                   	push   %edx
f010d922:	50                   	push   %eax
f010d923:	e8 92 f7 ff ff       	call   f010d0ba <sys_freeSharedObject>
f010d928:	83 c4 10             	add    $0x10,%esp
f010d92b:	e9 c9 01 00 00       	jmp    f010daf9 <syscall+0x425>
		break;

	case SYS_get_size_of_shared_object:
		return sys_getSizeOfSharedObject((int32)a1, (char*)a2);
f010d930:	8b 55 10             	mov    0x10(%ebp),%edx
f010d933:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d936:	83 ec 08             	sub    $0x8,%esp
f010d939:	52                   	push   %edx
f010d93a:	50                   	push   %eax
f010d93b:	e8 45 f7 ff ff       	call   f010d085 <sys_getSizeOfSharedObject>
f010d940:	83 c4 10             	add    $0x10,%esp
f010d943:	e9 b1 01 00 00       	jmp    f010daf9 <syscall+0x425>
		break;

	case SYS_get_max_shares:
		return sys_getMaxShares();
f010d948:	e8 86 f7 ff ff       	call   f010d0d3 <sys_getMaxShares>
f010d94d:	e9 a7 01 00 00       	jmp    f010daf9 <syscall+0x425>
		break;

	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3, (uint32)a4);
f010d952:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d955:	ff 75 18             	pushl  0x18(%ebp)
f010d958:	ff 75 14             	pushl  0x14(%ebp)
f010d95b:	ff 75 10             	pushl  0x10(%ebp)
f010d95e:	50                   	push   %eax
f010d95f:	e8 86 f8 ff ff       	call   f010d1ea <sys_create_env>
f010d964:	83 c4 10             	add    $0x10,%esp
f010d967:	e9 8d 01 00 00       	jmp    f010daf9 <syscall+0x425>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010d96c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d96f:	83 ec 0c             	sub    $0xc,%esp
f010d972:	50                   	push   %eax
f010d973:	e8 b2 f8 ff ff       	call   f010d22a <sys_run_env>
f010d978:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d97b:	b8 00 00 00 00       	mov    $0x0,%eax
f010d980:	e9 74 01 00 00       	jmp    f010daf9 <syscall+0x425>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010d985:	e8 60 f7 ff ff       	call   f010d0ea <sys_getenvindex>
f010d98a:	e9 6a 01 00 00       	jmp    f010daf9 <syscall+0x425>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010d98f:	e8 49 f7 ff ff       	call   f010d0dd <sys_getenvid>
f010d994:	e9 60 01 00 00       	jmp    f010daf9 <syscall+0x425>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010d999:	e8 99 f7 ff ff       	call   f010d137 <sys_getparentenvid>
f010d99e:	e9 56 01 00 00       	jmp    f010daf9 <syscall+0x425>
		break;
	case SYS_destroy_env:
		return sys_destroy_env(a1);
f010d9a3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d9a6:	83 ec 0c             	sub    $0xc,%esp
f010d9a9:	50                   	push   %eax
f010d9aa:	e8 95 f7 ff ff       	call   f010d144 <sys_destroy_env>
f010d9af:	83 c4 10             	add    $0x10,%esp
f010d9b2:	e9 42 01 00 00       	jmp    f010daf9 <syscall+0x425>
		break;
	case SYS_exit_env:
		sys_exit_env();
f010d9b7:	e8 20 f8 ff ff       	call   f010d1dc <sys_exit_env>
		return 0;
f010d9bc:	b8 00 00 00 00       	mov    $0x0,%eax
f010d9c1:	e9 33 01 00 00       	jmp    f010daf9 <syscall+0x425>
		break;
	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010d9c6:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010d9c9:	83 ec 0c             	sub    $0xc,%esp
f010d9cc:	50                   	push   %eax
f010d9cd:	e8 70 f8 ff ff       	call   f010d242 <sys_get_virtual_time>
f010d9d2:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010d9d5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d9d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010d9db:	8b 45 10             	mov    0x10(%ebp),%eax
f010d9de:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010d9e1:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d9e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d9e7:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010d9e9:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d9ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d9ef:	89 10                	mov    %edx,(%eax)
		return 0;
f010d9f1:	b8 00 00 00 00       	mov    $0x0,%eax
f010d9f6:	e9 fe 00 00 00       	jmp    f010daf9 <syscall+0x425>
		break;
	}
	case SYS_move_user_mem:
		sys_move_user_mem(a1, a2, a3);
f010d9fb:	83 ec 04             	sub    $0x4,%esp
f010d9fe:	ff 75 14             	pushl  0x14(%ebp)
f010da01:	ff 75 10             	pushl  0x10(%ebp)
f010da04:	ff 75 0c             	pushl  0xc(%ebp)
f010da07:	e8 20 f5 ff ff       	call   f010cf2c <sys_move_user_mem>
f010da0c:	83 c4 10             	add    $0x10,%esp
		return 0;
f010da0f:	b8 00 00 00 00       	mov    $0x0,%eax
f010da14:	e9 e0 00 00 00       	jmp    f010daf9 <syscall+0x425>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010da19:	e8 53 f8 ff ff       	call   f010d271 <sys_rcr2>
f010da1e:	e9 d6 00 00 00       	jmp    f010daf9 <syscall+0x425>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010da23:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da26:	0f b6 c0             	movzbl %al,%eax
f010da29:	83 ec 0c             	sub    $0xc,%esp
f010da2c:	50                   	push   %eax
f010da2d:	e8 51 f8 ff ff       	call   f010d283 <sys_bypassPageFault>
f010da32:	83 c4 10             	add    $0x10,%esp
		return 0;
f010da35:	b8 00 00 00 00       	mov    $0x0,%eax
f010da3a:	e9 ba 00 00 00       	jmp    f010daf9 <syscall+0x425>

	case SYS_rsttst:
		rsttst();
f010da3f:	e8 56 f8 ff ff       	call   f010d29a <rsttst>
		return 0;
f010da44:	b8 00 00 00 00       	mov    $0x0,%eax
f010da49:	e9 ab 00 00 00       	jmp    f010daf9 <syscall+0x425>
	case SYS_inctst:
		inctst();
f010da4e:	e8 57 f8 ff ff       	call   f010d2aa <inctst>
		return 0;
f010da53:	b8 00 00 00 00       	mov    $0x0,%eax
f010da58:	e9 9c 00 00 00       	jmp    f010daf9 <syscall+0x425>
	case SYS_chktst:
		chktst(a1);
f010da5d:	83 ec 0c             	sub    $0xc,%esp
f010da60:	ff 75 0c             	pushl  0xc(%ebp)
f010da63:	e8 44 f9 ff ff       	call   f010d3ac <chktst>
f010da68:	83 c4 10             	add    $0x10,%esp
		return 0;
f010da6b:	b8 00 00 00 00       	mov    $0x0,%eax
f010da70:	e9 84 00 00 00       	jmp    f010daf9 <syscall+0x425>
	case SYS_gettst:
		return gettst();
f010da75:	e8 41 f8 ff ff       	call   f010d2bb <gettst>
f010da7a:	eb 7d                	jmp    f010daf9 <syscall+0x425>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010da7c:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010da7f:	8b 45 18             	mov    0x18(%ebp),%eax
f010da82:	0f be c0             	movsbl %al,%eax
f010da85:	83 ec 0c             	sub    $0xc,%esp
f010da88:	52                   	push   %edx
f010da89:	50                   	push   %eax
f010da8a:	ff 75 14             	pushl  0x14(%ebp)
f010da8d:	ff 75 10             	pushl  0x10(%ebp)
f010da90:	ff 75 0c             	pushl  0xc(%ebp)
f010da93:	e8 2d f8 ff ff       	call   f010d2c5 <tst>
f010da98:	83 c4 20             	add    $0x20,%esp
		return 0;
f010da9b:	b8 00 00 00 00       	mov    $0x0,%eax
f010daa0:	eb 57                	jmp    f010daf9 <syscall+0x425>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010daa2:	e8 a5 f4 ff ff       	call   f010cf4c <sys_get_heap_strategy>
f010daa7:	eb 50                	jmp    f010daf9 <syscall+0x425>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010daa9:	83 ec 0c             	sub    $0xc,%esp
f010daac:	ff 75 0c             	pushl  0xc(%ebp)
f010daaf:	e8 a2 f4 ff ff       	call   f010cf56 <sys_set_uheap_strategy>
f010dab4:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dab7:	b8 00 00 00 00       	mov    $0x0,%eax
f010dabc:	eb 3b                	jmp    f010daf9 <syscall+0x425>

	case SYS_check_LRU_lists:
		return sys_check_LRU_lists((uint32*)a1, (uint32*)a2, (int)a3, (int)a4);
f010dabe:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010dac1:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010dac4:	8b 55 10             	mov    0x10(%ebp),%edx
f010dac7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010daca:	53                   	push   %ebx
f010dacb:	51                   	push   %ecx
f010dacc:	52                   	push   %edx
f010dacd:	50                   	push   %eax
f010dace:	e8 14 f9 ff ff       	call   f010d3e7 <sys_check_LRU_lists>
f010dad3:	83 c4 10             	add    $0x10,%esp
f010dad6:	eb 21                	jmp    f010daf9 <syscall+0x425>

	case SYS_check_LRU_lists_free:
		return sys_check_LRU_lists_free((uint32*)a1, (int)a2);
f010dad8:	8b 55 10             	mov    0x10(%ebp),%edx
f010dadb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dade:	83 ec 08             	sub    $0x8,%esp
f010dae1:	52                   	push   %edx
f010dae2:	50                   	push   %eax
f010dae3:	e8 81 fa ff ff       	call   f010d569 <sys_check_LRU_lists_free>
f010dae8:	83 c4 10             	add    $0x10,%esp
f010daeb:	eb 0c                	jmp    f010daf9 <syscall+0x425>

	case NSYSCALLS:
		return 	-E_INVAL;
f010daed:	b8 03 00 00 00       	mov    $0x3,%eax
f010daf2:	eb 05                	jmp    f010daf9 <syscall+0x425>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010daf4:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010daf9:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010dafc:	5b                   	pop    %ebx
f010dafd:	5e                   	pop    %esi
f010dafe:	5d                   	pop    %ebp
f010daff:	c3                   	ret    

f010db00 <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010db00:	55                   	push   %ebp
f010db01:	89 e5                	mov    %esp,%ebp
f010db03:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010db06:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db09:	8b 00                	mov    (%eax),%eax
f010db0b:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010db0e:	8b 45 10             	mov    0x10(%ebp),%eax
f010db11:	8b 00                	mov    (%eax),%eax
f010db13:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010db16:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	while (l <= r) {
f010db1d:	e9 ca 00 00 00       	jmp    f010dbec <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010db22:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010db25:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010db28:	01 d0                	add    %edx,%eax
f010db2a:	89 c2                	mov    %eax,%edx
f010db2c:	c1 ea 1f             	shr    $0x1f,%edx
f010db2f:	01 d0                	add    %edx,%eax
f010db31:	d1 f8                	sar    %eax
f010db33:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010db36:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010db39:	89 45 f0             	mov    %eax,-0x10(%ebp)

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010db3c:	eb 03                	jmp    f010db41 <stab_binsearch+0x41>
			m--;
f010db3e:	ff 4d f0             	decl   -0x10(%ebp)

	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010db41:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010db44:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010db47:	7c 1e                	jl     f010db67 <stab_binsearch+0x67>
f010db49:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010db4c:	89 d0                	mov    %edx,%eax
f010db4e:	01 c0                	add    %eax,%eax
f010db50:	01 d0                	add    %edx,%eax
f010db52:	c1 e0 02             	shl    $0x2,%eax
f010db55:	89 c2                	mov    %eax,%edx
f010db57:	8b 45 08             	mov    0x8(%ebp),%eax
f010db5a:	01 d0                	add    %edx,%eax
f010db5c:	8a 40 04             	mov    0x4(%eax),%al
f010db5f:	0f b6 c0             	movzbl %al,%eax
f010db62:	3b 45 14             	cmp    0x14(%ebp),%eax
f010db65:	75 d7                	jne    f010db3e <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010db67:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010db6a:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010db6d:	7d 09                	jge    f010db78 <stab_binsearch+0x78>
			l = true_m + 1;
f010db6f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010db72:	40                   	inc    %eax
f010db73:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010db76:	eb 74                	jmp    f010dbec <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010db78:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010db7f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010db82:	89 d0                	mov    %edx,%eax
f010db84:	01 c0                	add    %eax,%eax
f010db86:	01 d0                	add    %edx,%eax
f010db88:	c1 e0 02             	shl    $0x2,%eax
f010db8b:	89 c2                	mov    %eax,%edx
f010db8d:	8b 45 08             	mov    0x8(%ebp),%eax
f010db90:	01 d0                	add    %edx,%eax
f010db92:	8b 40 08             	mov    0x8(%eax),%eax
f010db95:	3b 45 18             	cmp    0x18(%ebp),%eax
f010db98:	73 11                	jae    f010dbab <stab_binsearch+0xab>
			*region_left = m;
f010db9a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db9d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010dba0:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010dba2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010dba5:	40                   	inc    %eax
f010dba6:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010dba9:	eb 41                	jmp    f010dbec <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010dbab:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010dbae:	89 d0                	mov    %edx,%eax
f010dbb0:	01 c0                	add    %eax,%eax
f010dbb2:	01 d0                	add    %edx,%eax
f010dbb4:	c1 e0 02             	shl    $0x2,%eax
f010dbb7:	89 c2                	mov    %eax,%edx
f010dbb9:	8b 45 08             	mov    0x8(%ebp),%eax
f010dbbc:	01 d0                	add    %edx,%eax
f010dbbe:	8b 40 08             	mov    0x8(%eax),%eax
f010dbc1:	3b 45 18             	cmp    0x18(%ebp),%eax
f010dbc4:	76 14                	jbe    f010dbda <stab_binsearch+0xda>
			*region_right = m - 1;
f010dbc6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dbc9:	8d 50 ff             	lea    -0x1(%eax),%edx
f010dbcc:	8b 45 10             	mov    0x10(%ebp),%eax
f010dbcf:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010dbd1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dbd4:	48                   	dec    %eax
f010dbd5:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010dbd8:	eb 12                	jmp    f010dbec <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010dbda:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dbdd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010dbe0:	89 10                	mov    %edx,(%eax)
			l = m;
f010dbe2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dbe5:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010dbe8:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;

	while (l <= r) {
f010dbec:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010dbef:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010dbf2:	0f 8e 2a ff ff ff    	jle    f010db22 <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010dbf8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010dbfc:	75 0f                	jne    f010dc0d <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010dbfe:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc01:	8b 00                	mov    (%eax),%eax
f010dc03:	8d 50 ff             	lea    -0x1(%eax),%edx
f010dc06:	8b 45 10             	mov    0x10(%ebp),%eax
f010dc09:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010dc0b:	eb 3d                	jmp    f010dc4a <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010dc0d:	8b 45 10             	mov    0x10(%ebp),%eax
f010dc10:	8b 00                	mov    (%eax),%eax
f010dc12:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010dc15:	eb 03                	jmp    f010dc1a <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010dc17:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010dc1a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc1d:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010dc1f:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010dc22:	7d 1e                	jge    f010dc42 <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010dc24:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010dc27:	89 d0                	mov    %edx,%eax
f010dc29:	01 c0                	add    %eax,%eax
f010dc2b:	01 d0                	add    %edx,%eax
f010dc2d:	c1 e0 02             	shl    $0x2,%eax
f010dc30:	89 c2                	mov    %eax,%edx
f010dc32:	8b 45 08             	mov    0x8(%ebp),%eax
f010dc35:	01 d0                	add    %edx,%eax
f010dc37:	8a 40 04             	mov    0x4(%eax),%al
f010dc3a:	0f b6 c0             	movzbl %al,%eax
f010dc3d:	3b 45 14             	cmp    0x14(%ebp),%eax
f010dc40:	75 d5                	jne    f010dc17 <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010dc42:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc45:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010dc48:	89 10                	mov    %edx,(%eax)
	}
}
f010dc4a:	90                   	nop
f010dc4b:	c9                   	leave  
f010dc4c:	c3                   	ret    

f010dc4d <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010dc4d:	55                   	push   %ebp
f010dc4e:	89 e5                	mov    %esp,%ebp
f010dc50:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010dc53:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc56:	c7 00 80 79 13 f0    	movl   $0xf0137980,(%eax)
	info->eip_line = 0;
f010dc5c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc5f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010dc66:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc69:	c7 40 08 80 79 13 f0 	movl   $0xf0137980,0x8(%eax)
	info->eip_fn_namelen = 9;
f010dc70:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc73:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010dc7a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc7d:	8b 55 08             	mov    0x8(%ebp),%edx
f010dc80:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010dc83:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc86:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010dc8d:	8b 45 08             	mov    0x8(%ebp),%eax
f010dc90:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010dc95:	76 1e                	jbe    f010dcb5 <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010dc97:	c7 45 f4 2c d5 13 f0 	movl   $0xf013d52c,-0xc(%ebp)
		stab_end = __STAB_END__;
f010dc9e:	c7 45 f0 20 d1 17 f0 	movl   $0xf017d120,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010dca5:	c7 45 ec 21 d1 17 f0 	movl   $0xf017d121,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010dcac:	c7 45 e8 00 9d 18 f0 	movl   $0xf0189d00,-0x18(%ebp)
f010dcb3:	eb 2a                	jmp    f010dcdf <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010dcb5:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.

		stabs = usd->stabs;
f010dcbc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010dcbf:	8b 00                	mov    (%eax),%eax
f010dcc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010dcc4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010dcc7:	8b 40 04             	mov    0x4(%eax),%eax
f010dcca:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010dccd:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010dcd0:	8b 40 08             	mov    0x8(%eax),%eax
f010dcd3:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010dcd6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010dcd9:	8b 40 0c             	mov    0xc(%eax),%eax
f010dcdc:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010dcdf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010dce2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010dce5:	76 0a                	jbe    f010dcf1 <debuginfo_eip+0xa4>
f010dce7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010dcea:	48                   	dec    %eax
f010dceb:	8a 00                	mov    (%eax),%al
f010dced:	84 c0                	test   %al,%al
f010dcef:	74 0a                	je     f010dcfb <debuginfo_eip+0xae>
		return -1;
f010dcf1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010dcf6:	e9 01 02 00 00       	jmp    f010defc <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.

	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010dcfb:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010dd02:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010dd05:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dd08:	29 c2                	sub    %eax,%edx
f010dd0a:	89 d0                	mov    %edx,%eax
f010dd0c:	c1 f8 02             	sar    $0x2,%eax
f010dd0f:	89 c2                	mov    %eax,%edx
f010dd11:	89 d0                	mov    %edx,%eax
f010dd13:	c1 e0 02             	shl    $0x2,%eax
f010dd16:	01 d0                	add    %edx,%eax
f010dd18:	c1 e0 02             	shl    $0x2,%eax
f010dd1b:	01 d0                	add    %edx,%eax
f010dd1d:	c1 e0 02             	shl    $0x2,%eax
f010dd20:	01 d0                	add    %edx,%eax
f010dd22:	89 c1                	mov    %eax,%ecx
f010dd24:	c1 e1 08             	shl    $0x8,%ecx
f010dd27:	01 c8                	add    %ecx,%eax
f010dd29:	89 c1                	mov    %eax,%ecx
f010dd2b:	c1 e1 10             	shl    $0x10,%ecx
f010dd2e:	01 c8                	add    %ecx,%eax
f010dd30:	01 c0                	add    %eax,%eax
f010dd32:	01 d0                	add    %edx,%eax
f010dd34:	48                   	dec    %eax
f010dd35:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010dd38:	ff 75 08             	pushl  0x8(%ebp)
f010dd3b:	6a 64                	push   $0x64
f010dd3d:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010dd40:	50                   	push   %eax
f010dd41:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010dd44:	50                   	push   %eax
f010dd45:	ff 75 f4             	pushl  -0xc(%ebp)
f010dd48:	e8 b3 fd ff ff       	call   f010db00 <stab_binsearch>
f010dd4d:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010dd50:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010dd53:	85 c0                	test   %eax,%eax
f010dd55:	75 0a                	jne    f010dd61 <debuginfo_eip+0x114>
		return -1;
f010dd57:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010dd5c:	e9 9b 01 00 00       	jmp    f010defc <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010dd61:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010dd64:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010dd67:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010dd6a:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010dd6d:	ff 75 08             	pushl  0x8(%ebp)
f010dd70:	6a 24                	push   $0x24
f010dd72:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010dd75:	50                   	push   %eax
f010dd76:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010dd79:	50                   	push   %eax
f010dd7a:	ff 75 f4             	pushl  -0xc(%ebp)
f010dd7d:	e8 7e fd ff ff       	call   f010db00 <stab_binsearch>
f010dd82:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010dd85:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010dd88:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010dd8b:	39 c2                	cmp    %eax,%edx
f010dd8d:	0f 8f 86 00 00 00    	jg     f010de19 <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010dd93:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010dd96:	89 c2                	mov    %eax,%edx
f010dd98:	89 d0                	mov    %edx,%eax
f010dd9a:	01 c0                	add    %eax,%eax
f010dd9c:	01 d0                	add    %edx,%eax
f010dd9e:	c1 e0 02             	shl    $0x2,%eax
f010dda1:	89 c2                	mov    %eax,%edx
f010dda3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dda6:	01 d0                	add    %edx,%eax
f010dda8:	8b 00                	mov    (%eax),%eax
f010ddaa:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010ddad:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010ddb0:	29 d1                	sub    %edx,%ecx
f010ddb2:	89 ca                	mov    %ecx,%edx
f010ddb4:	39 d0                	cmp    %edx,%eax
f010ddb6:	73 22                	jae    f010ddda <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010ddb8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ddbb:	89 c2                	mov    %eax,%edx
f010ddbd:	89 d0                	mov    %edx,%eax
f010ddbf:	01 c0                	add    %eax,%eax
f010ddc1:	01 d0                	add    %edx,%eax
f010ddc3:	c1 e0 02             	shl    $0x2,%eax
f010ddc6:	89 c2                	mov    %eax,%edx
f010ddc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ddcb:	01 d0                	add    %edx,%eax
f010ddcd:	8b 10                	mov    (%eax),%edx
f010ddcf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ddd2:	01 c2                	add    %eax,%edx
f010ddd4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ddd7:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010ddda:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010dddd:	89 c2                	mov    %eax,%edx
f010dddf:	89 d0                	mov    %edx,%eax
f010dde1:	01 c0                	add    %eax,%eax
f010dde3:	01 d0                	add    %edx,%eax
f010dde5:	c1 e0 02             	shl    $0x2,%eax
f010dde8:	89 c2                	mov    %eax,%edx
f010ddea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dded:	01 d0                	add    %edx,%eax
f010ddef:	8b 50 08             	mov    0x8(%eax),%edx
f010ddf2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ddf5:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010ddf8:	8b 55 08             	mov    0x8(%ebp),%edx
f010ddfb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ddfe:	8b 40 10             	mov    0x10(%eax),%eax
f010de01:	29 c2                	sub    %eax,%edx
f010de03:	89 d0                	mov    %edx,%eax
f010de05:	c1 f8 02             	sar    $0x2,%eax
f010de08:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010de0b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010de0e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010de11:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010de14:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010de17:	eb 15                	jmp    f010de2e <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010de19:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de1c:	8b 55 08             	mov    0x8(%ebp),%edx
f010de1f:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010de22:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010de25:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010de28:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010de2b:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010de2e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de31:	8b 40 08             	mov    0x8(%eax),%eax
f010de34:	83 ec 08             	sub    $0x8,%esp
f010de37:	6a 3a                	push   $0x3a
f010de39:	50                   	push   %eax
f010de3a:	e8 8b 39 02 00       	call   f01317ca <strfind>
f010de3f:	83 c4 10             	add    $0x10,%esp
f010de42:	89 c2                	mov    %eax,%edx
f010de44:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de47:	8b 40 08             	mov    0x8(%eax),%eax
f010de4a:	29 c2                	sub    %eax,%edx
f010de4c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de4f:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010de52:	eb 03                	jmp    f010de57 <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010de54:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010de57:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010de5a:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010de5d:	7c 4e                	jl     f010dead <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010de5f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010de62:	89 d0                	mov    %edx,%eax
f010de64:	01 c0                	add    %eax,%eax
f010de66:	01 d0                	add    %edx,%eax
f010de68:	c1 e0 02             	shl    $0x2,%eax
f010de6b:	89 c2                	mov    %eax,%edx
f010de6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010de70:	01 d0                	add    %edx,%eax
f010de72:	8a 40 04             	mov    0x4(%eax),%al
f010de75:	3c 84                	cmp    $0x84,%al
f010de77:	74 34                	je     f010dead <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010de79:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010de7c:	89 d0                	mov    %edx,%eax
f010de7e:	01 c0                	add    %eax,%eax
f010de80:	01 d0                	add    %edx,%eax
f010de82:	c1 e0 02             	shl    $0x2,%eax
f010de85:	89 c2                	mov    %eax,%edx
f010de87:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010de8a:	01 d0                	add    %edx,%eax
f010de8c:	8a 40 04             	mov    0x4(%eax),%al
f010de8f:	3c 64                	cmp    $0x64,%al
f010de91:	75 c1                	jne    f010de54 <debuginfo_eip+0x207>
f010de93:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010de96:	89 d0                	mov    %edx,%eax
f010de98:	01 c0                	add    %eax,%eax
f010de9a:	01 d0                	add    %edx,%eax
f010de9c:	c1 e0 02             	shl    $0x2,%eax
f010de9f:	89 c2                	mov    %eax,%edx
f010dea1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dea4:	01 d0                	add    %edx,%eax
f010dea6:	8b 40 08             	mov    0x8(%eax),%eax
f010dea9:	85 c0                	test   %eax,%eax
f010deab:	74 a7                	je     f010de54 <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010dead:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010deb0:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010deb3:	7c 42                	jl     f010def7 <debuginfo_eip+0x2aa>
f010deb5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010deb8:	89 d0                	mov    %edx,%eax
f010deba:	01 c0                	add    %eax,%eax
f010debc:	01 d0                	add    %edx,%eax
f010debe:	c1 e0 02             	shl    $0x2,%eax
f010dec1:	89 c2                	mov    %eax,%edx
f010dec3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dec6:	01 d0                	add    %edx,%eax
f010dec8:	8b 00                	mov    (%eax),%eax
f010deca:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010decd:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010ded0:	29 d1                	sub    %edx,%ecx
f010ded2:	89 ca                	mov    %ecx,%edx
f010ded4:	39 d0                	cmp    %edx,%eax
f010ded6:	73 1f                	jae    f010def7 <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010ded8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dedb:	89 d0                	mov    %edx,%eax
f010dedd:	01 c0                	add    %eax,%eax
f010dedf:	01 d0                	add    %edx,%eax
f010dee1:	c1 e0 02             	shl    $0x2,%eax
f010dee4:	89 c2                	mov    %eax,%edx
f010dee6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dee9:	01 d0                	add    %edx,%eax
f010deeb:	8b 10                	mov    (%eax),%edx
f010deed:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010def0:	01 c2                	add    %eax,%edx
f010def2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010def5:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.


	return 0;
f010def7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010defc:	c9                   	leave  
f010defd:	c3                   	ret    

f010defe <setPageReplacmentAlgorithmLRU>:
//===============================
// REPLACEMENT STRATEGIES
//===============================
//2020
void setPageReplacmentAlgorithmLRU(int LRU_TYPE)
{
f010defe:	55                   	push   %ebp
f010deff:	89 e5                	mov    %esp,%ebp
f010df01:	83 ec 08             	sub    $0x8,%esp
	assert(LRU_TYPE == PG_REP_LRU_TIME_APPROX || LRU_TYPE == PG_REP_LRU_LISTS_APPROX);
f010df04:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010df08:	74 1c                	je     f010df26 <setPageReplacmentAlgorithmLRU+0x28>
f010df0a:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010df0e:	74 16                	je     f010df26 <setPageReplacmentAlgorithmLRU+0x28>
f010df10:	68 8c 79 13 f0       	push   $0xf013798c
f010df15:	68 d6 79 13 f0       	push   $0xf01379d6
f010df1a:	6a 18                	push   $0x18
f010df1c:	68 eb 79 13 f0       	push   $0xf01379eb
f010df21:	e8 df 22 ff ff       	call   f0100205 <_panic>
	_PageRepAlgoType = LRU_TYPE ;
f010df26:	8b 45 08             	mov    0x8(%ebp),%eax
f010df29:	a3 84 27 86 f0       	mov    %eax,0xf0862784
}
f010df2e:	90                   	nop
f010df2f:	c9                   	leave  
f010df30:	c3                   	ret    

f010df31 <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f010df31:	55                   	push   %ebp
f010df32:	89 e5                	mov    %esp,%ebp
f010df34:	c7 05 84 27 86 f0 03 	movl   $0x3,0xf0862784
f010df3b:	00 00 00 
f010df3e:	90                   	nop
f010df3f:	5d                   	pop    %ebp
f010df40:	c3                   	ret    

f010df41 <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f010df41:	55                   	push   %ebp
f010df42:	89 e5                	mov    %esp,%ebp
f010df44:	c7 05 84 27 86 f0 04 	movl   $0x4,0xf0862784
f010df4b:	00 00 00 
f010df4e:	90                   	nop
f010df4f:	5d                   	pop    %ebp
f010df50:	c3                   	ret    

f010df51 <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f010df51:	55                   	push   %ebp
f010df52:	89 e5                	mov    %esp,%ebp
f010df54:	c7 05 84 27 86 f0 05 	movl   $0x5,0xf0862784
f010df5b:	00 00 00 
f010df5e:	90                   	nop
f010df5f:	5d                   	pop    %ebp
f010df60:	c3                   	ret    

f010df61 <setPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ void setPageReplacmentAlgorithmDynamicLocal(){_PageRepAlgoType = PG_REP_DYNAMIC_LOCAL;}
f010df61:	55                   	push   %ebp
f010df62:	89 e5                	mov    %esp,%ebp
f010df64:	c7 05 84 27 86 f0 07 	movl   $0x7,0xf0862784
f010df6b:	00 00 00 
f010df6e:	90                   	nop
f010df6f:	5d                   	pop    %ebp
f010df70:	c3                   	ret    

f010df71 <setPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ void setPageReplacmentAlgorithmNchanceCLOCK(int PageWSMaxSweeps){_PageRepAlgoType = PG_REP_NchanceCLOCK;  page_WS_max_sweeps = PageWSMaxSweeps;}
f010df71:	55                   	push   %ebp
f010df72:	89 e5                	mov    %esp,%ebp
f010df74:	c7 05 84 27 86 f0 06 	movl   $0x6,0xf0862784
f010df7b:	00 00 00 
f010df7e:	8b 45 08             	mov    0x8(%ebp),%eax
f010df81:	a3 e0 26 86 f0       	mov    %eax,0xf08626e0
f010df86:	90                   	nop
f010df87:	5d                   	pop    %ebp
f010df88:	c3                   	ret    

f010df89 <isPageReplacmentAlgorithmLRU>:

//2020
uint32 isPageReplacmentAlgorithmLRU(int LRU_TYPE){return _PageRepAlgoType == LRU_TYPE ? 1 : 0;}
f010df89:	55                   	push   %ebp
f010df8a:	89 e5                	mov    %esp,%ebp
f010df8c:	8b 15 84 27 86 f0    	mov    0xf0862784,%edx
f010df92:	8b 45 08             	mov    0x8(%ebp),%eax
f010df95:	39 c2                	cmp    %eax,%edx
f010df97:	0f 94 c0             	sete   %al
f010df9a:	0f b6 c0             	movzbl %al,%eax
f010df9d:	5d                   	pop    %ebp
f010df9e:	c3                   	ret    

f010df9f <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f010df9f:	55                   	push   %ebp
f010dfa0:	89 e5                	mov    %esp,%ebp
f010dfa2:	a1 84 27 86 f0       	mov    0xf0862784,%eax
f010dfa7:	83 f8 03             	cmp    $0x3,%eax
f010dfaa:	75 07                	jne    f010dfb3 <isPageReplacmentAlgorithmCLOCK+0x14>
f010dfac:	b8 01 00 00 00       	mov    $0x1,%eax
f010dfb1:	eb 05                	jmp    f010dfb8 <isPageReplacmentAlgorithmCLOCK+0x19>
f010dfb3:	b8 00 00 00 00       	mov    $0x0,%eax
f010dfb8:	5d                   	pop    %ebp
f010dfb9:	c3                   	ret    

f010dfba <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f010dfba:	55                   	push   %ebp
f010dfbb:	89 e5                	mov    %esp,%ebp
f010dfbd:	a1 84 27 86 f0       	mov    0xf0862784,%eax
f010dfc2:	83 f8 04             	cmp    $0x4,%eax
f010dfc5:	75 07                	jne    f010dfce <isPageReplacmentAlgorithmFIFO+0x14>
f010dfc7:	b8 01 00 00 00       	mov    $0x1,%eax
f010dfcc:	eb 05                	jmp    f010dfd3 <isPageReplacmentAlgorithmFIFO+0x19>
f010dfce:	b8 00 00 00 00       	mov    $0x0,%eax
f010dfd3:	5d                   	pop    %ebp
f010dfd4:	c3                   	ret    

f010dfd5 <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f010dfd5:	55                   	push   %ebp
f010dfd6:	89 e5                	mov    %esp,%ebp
f010dfd8:	a1 84 27 86 f0       	mov    0xf0862784,%eax
f010dfdd:	83 f8 05             	cmp    $0x5,%eax
f010dfe0:	75 07                	jne    f010dfe9 <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f010dfe2:	b8 01 00 00 00       	mov    $0x1,%eax
f010dfe7:	eb 05                	jmp    f010dfee <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f010dfe9:	b8 00 00 00 00       	mov    $0x0,%eax
f010dfee:	5d                   	pop    %ebp
f010dfef:	c3                   	ret    

f010dff0 <isPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ uint32 isPageReplacmentAlgorithmDynamicLocal(){if(_PageRepAlgoType == PG_REP_DYNAMIC_LOCAL) return 1; return 0;}
f010dff0:	55                   	push   %ebp
f010dff1:	89 e5                	mov    %esp,%ebp
f010dff3:	a1 84 27 86 f0       	mov    0xf0862784,%eax
f010dff8:	83 f8 07             	cmp    $0x7,%eax
f010dffb:	75 07                	jne    f010e004 <isPageReplacmentAlgorithmDynamicLocal+0x14>
f010dffd:	b8 01 00 00 00       	mov    $0x1,%eax
f010e002:	eb 05                	jmp    f010e009 <isPageReplacmentAlgorithmDynamicLocal+0x19>
f010e004:	b8 00 00 00 00       	mov    $0x0,%eax
f010e009:	5d                   	pop    %ebp
f010e00a:	c3                   	ret    

f010e00b <isPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ uint32 isPageReplacmentAlgorithmNchanceCLOCK(){if(_PageRepAlgoType == PG_REP_NchanceCLOCK) return 1; return 0;}
f010e00b:	55                   	push   %ebp
f010e00c:	89 e5                	mov    %esp,%ebp
f010e00e:	a1 84 27 86 f0       	mov    0xf0862784,%eax
f010e013:	83 f8 06             	cmp    $0x6,%eax
f010e016:	75 07                	jne    f010e01f <isPageReplacmentAlgorithmNchanceCLOCK+0x14>
f010e018:	b8 01 00 00 00       	mov    $0x1,%eax
f010e01d:	eb 05                	jmp    f010e024 <isPageReplacmentAlgorithmNchanceCLOCK+0x19>
f010e01f:	b8 00 00 00 00       	mov    $0x0,%eax
f010e024:	5d                   	pop    %ebp
f010e025:	c3                   	ret    

f010e026 <enableModifiedBuffer>:

//===============================
// PAGE BUFFERING
//===============================
void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f010e026:	55                   	push   %ebp
f010e027:	89 e5                	mov    %esp,%ebp
f010e029:	8b 45 08             	mov    0x8(%ebp),%eax
f010e02c:	a3 4c 27 86 f0       	mov    %eax,0xf086274c
f010e031:	90                   	nop
f010e032:	5d                   	pop    %ebp
f010e033:	c3                   	ret    

f010e034 <isModifiedBufferEnabled>:
uint8 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f010e034:	55                   	push   %ebp
f010e035:	89 e5                	mov    %esp,%ebp
f010e037:	a1 4c 27 86 f0       	mov    0xf086274c,%eax
f010e03c:	5d                   	pop    %ebp
f010e03d:	c3                   	ret    

f010e03e <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f010e03e:	55                   	push   %ebp
f010e03f:	89 e5                	mov    %esp,%ebp
f010e041:	8b 45 08             	mov    0x8(%ebp),%eax
f010e044:	a3 8c 27 86 f0       	mov    %eax,0xf086278c
f010e049:	90                   	nop
f010e04a:	5d                   	pop    %ebp
f010e04b:	c3                   	ret    

f010e04c <isBufferingEnabled>:
uint8 isBufferingEnabled(){  return _EnableBuffering ; }
f010e04c:	55                   	push   %ebp
f010e04d:	89 e5                	mov    %esp,%ebp
f010e04f:	a1 8c 27 86 f0       	mov    0xf086278c,%eax
f010e054:	5d                   	pop    %ebp
f010e055:	c3                   	ret    

f010e056 <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f010e056:	55                   	push   %ebp
f010e057:	89 e5                	mov    %esp,%ebp
f010e059:	8b 45 08             	mov    0x8(%ebp),%eax
f010e05c:	a3 ac 27 86 f0       	mov    %eax,0xf08627ac
f010e061:	90                   	nop
f010e062:	5d                   	pop    %ebp
f010e063:	c3                   	ret    

f010e064 <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f010e064:	55                   	push   %ebp
f010e065:	89 e5                	mov    %esp,%ebp
f010e067:	a1 ac 27 86 f0       	mov    0xf08627ac,%eax
f010e06c:	5d                   	pop    %ebp
f010e06d:	c3                   	ret    

f010e06e <table_fault_handler>:
// FAULT HANDLERS
//===============================

//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010e06e:	55                   	push   %ebp
f010e06f:	89 e5                	mov    %esp,%ebp
f010e071:	83 ec 18             	sub    $0x18,%esp
	//panic("table_fault_handler() is not implemented yet...!!");
	//Check if it's a stack page
	uint32* ptr_table;
#if USE_KHEAP
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
f010e074:	8b 45 08             	mov    0x8(%ebp),%eax
f010e077:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e07a:	83 ec 08             	sub    $0x8,%esp
f010e07d:	ff 75 0c             	pushl  0xc(%ebp)
f010e080:	50                   	push   %eax
f010e081:	e8 5f 8b ff ff       	call   f0106be5 <create_page_table>
f010e086:	83 c4 10             	add    $0x10,%esp
f010e089:	89 45 f4             	mov    %eax,-0xc(%ebp)
#else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
	}
#endif
}
f010e08c:	90                   	nop
f010e08d:	c9                   	leave  
f010e08e:	c3                   	ret    

f010e08f <page_fault_handler>:

//Handle the page fault

void page_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010e08f:	55                   	push   %ebp
f010e090:	89 e5                	mov    %esp,%ebp
f010e092:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS3] [FAULT HANDLER] page_fault_handler
	// Write your code here, remove the panic and write your code
	fault_va = ROUNDDOWN(fault_va ,PAGE_SIZE );
f010e095:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e098:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010e09b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e09e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010e0a3:	89 45 0c             	mov    %eax,0xc(%ebp)
	    	if(env_page_ws_get_size(curenv) < curenv->page_WS_max_size){
f010e0a6:	83 ec 0c             	sub    $0xc,%esp
f010e0a9:	ff 75 08             	pushl  0x8(%ebp)
f010e0ac:	e8 23 9f ff ff       	call   f0107fd4 <env_page_ws_get_size>
f010e0b1:	83 c4 10             	add    $0x10,%esp
f010e0b4:	89 c2                	mov    %eax,%edx
f010e0b6:	8b 45 08             	mov    0x8(%ebp),%eax
f010e0b9:	8b 40 74             	mov    0x74(%eax),%eax
f010e0bc:	39 c2                	cmp    %eax,%edx
f010e0be:	0f 83 f1 00 00 00    	jae    f010e1b5 <page_fault_handler+0x126>
	        uint32 alloc_pa = pf_read_env_page(curenv , (void *)fault_va);
f010e0c4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e0c7:	83 ec 08             	sub    $0x8,%esp
f010e0ca:	50                   	push   %eax
f010e0cb:	ff 75 08             	pushl  0x8(%ebp)
f010e0ce:	e8 45 59 ff ff       	call   f0103a18 <pf_read_env_page>
f010e0d3:	83 c4 10             	add    $0x10,%esp
f010e0d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	        struct FrameInfo *to_allocate = NULL ;
f010e0d9:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	        allocate_frame(&to_allocate);
f010e0e0:	83 ec 0c             	sub    $0xc,%esp
f010e0e3:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010e0e6:	50                   	push   %eax
f010e0e7:	e8 e4 87 ff ff       	call   f01068d0 <allocate_frame>
f010e0ec:	83 c4 10             	add    $0x10,%esp
	        map_frame(curenv->env_page_directory ,to_allocate,fault_va , PERM_USER|PERM_WRITEABLE|PERM_PRESENT );
f010e0ef:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010e0f2:	8b 45 08             	mov    0x8(%ebp),%eax
f010e0f5:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e0f8:	6a 07                	push   $0x7
f010e0fa:	ff 75 0c             	pushl  0xc(%ebp)
f010e0fd:	52                   	push   %edx
f010e0fe:	50                   	push   %eax
f010e0ff:	e8 1b 8c ff ff       	call   f0106d1f <map_frame>
f010e104:	83 c4 10             	add    $0x10,%esp
	        if(alloc_pa == E_PAGE_NOT_EXIST_IN_PF){
f010e107:	83 7d f0 f7          	cmpl   $0xfffffff7,-0x10(%ebp)
f010e10b:	75 54                	jne    f010e161 <page_fault_handler+0xd2>
	            if (( fault_va >= USER_HEAP_START && fault_va < USER_HEAP_MAX) ||(fault_va <= USTACKTOP && fault_va >= USTACKBOTTOM) ){
f010e10d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e110:	85 c0                	test   %eax,%eax
f010e112:	79 09                	jns    f010e11d <page_fault_handler+0x8e>
f010e114:	81 7d 0c ff ff ff 9f 	cmpl   $0x9fffffff,0xc(%ebp)
f010e11b:	76 44                	jbe    f010e161 <page_fault_handler+0xd2>
f010e11d:	81 7d 0c 00 e0 bf ee 	cmpl   $0xeebfe000,0xc(%ebp)
f010e124:	77 27                	ja     f010e14d <page_fault_handler+0xbe>
f010e126:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f010e12d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e130:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f010e135:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010e138:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e13b:	ba 00 00 00 00       	mov    $0x0,%edx
f010e140:	f7 75 ec             	divl   -0x14(%ebp)
f010e143:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e146:	29 d0                	sub    %edx,%eax
f010e148:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010e14b:	76 14                	jbe    f010e161 <page_fault_handler+0xd2>

	            }else{
	                panic("ILLEGAL MEMORY ACCESS");
f010e14d:	83 ec 04             	sub    $0x4,%esp
f010e150:	68 05 7a 13 f0       	push   $0xf0137a05
f010e155:	6a 5a                	push   $0x5a
f010e157:	68 eb 79 13 f0       	push   $0xf01379eb
f010e15c:	e8 a4 20 ff ff       	call   f0100205 <_panic>
	            }
	        }
	        env_page_ws_set_entry(curenv ,curenv->page_last_WS_index , fault_va);
f010e161:	8b 45 08             	mov    0x8(%ebp),%eax
f010e164:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e16a:	83 ec 04             	sub    $0x4,%esp
f010e16d:	ff 75 0c             	pushl  0xc(%ebp)
f010e170:	50                   	push   %eax
f010e171:	ff 75 08             	pushl  0x8(%ebp)
f010e174:	e8 0f 9f ff ff       	call   f0108088 <env_page_ws_set_entry>
f010e179:	83 c4 10             	add    $0x10,%esp
	        curenv->page_last_WS_index = curenv->page_last_WS_index + 1 ;
f010e17c:	8b 45 08             	mov    0x8(%ebp),%eax
f010e17f:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e185:	8d 50 01             	lea    0x1(%eax),%edx
f010e188:	8b 45 08             	mov    0x8(%ebp),%eax
f010e18b:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
	        curenv->page_last_WS_index = curenv->page_last_WS_index % curenv->page_WS_max_size;
f010e191:	8b 45 08             	mov    0x8(%ebp),%eax
f010e194:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e19a:	8b 55 08             	mov    0x8(%ebp),%edx
f010e19d:	8b 4a 74             	mov    0x74(%edx),%ecx
f010e1a0:	ba 00 00 00 00       	mov    $0x0,%edx
f010e1a5:	f7 f1                	div    %ecx
f010e1a7:	8b 45 08             	mov    0x8(%ebp),%eax
f010e1aa:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
	    			curenv->page_last_WS_index = curenv->page_last_WS_index + 1 ;
	    			curenv->page_last_WS_index = curenv->page_last_WS_index % curenv->page_WS_max_size;
	    			}
	    		}
	    	}
	    }
f010e1b0:	e9 10 02 00 00       	jmp    f010e3c5 <page_fault_handler+0x336>
	        env_page_ws_set_entry(curenv ,curenv->page_last_WS_index , fault_va);
	        curenv->page_last_WS_index = curenv->page_last_WS_index + 1 ;
	        curenv->page_last_WS_index = curenv->page_last_WS_index % curenv->page_WS_max_size;
	    	}
	    	else{
	    	struct FrameInfo *to_frame = NULL;
f010e1b5:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	    	uint32 *pointer = NULL;
f010e1bc:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	    	while(1==1){
	    		uint32 vir_last = curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address;
f010e1c3:	8b 45 08             	mov    0x8(%ebp),%eax
f010e1c6:	8b 48 78             	mov    0x78(%eax),%ecx
f010e1c9:	8b 45 08             	mov    0x8(%ebp),%eax
f010e1cc:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010e1d2:	89 d0                	mov    %edx,%eax
f010e1d4:	01 c0                	add    %eax,%eax
f010e1d6:	01 d0                	add    %edx,%eax
f010e1d8:	c1 e0 03             	shl    $0x3,%eax
f010e1db:	01 c8                	add    %ecx,%eax
f010e1dd:	8b 00                	mov    (%eax),%eax
f010e1df:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	    		to_frame = get_frame_info(curenv->env_page_directory , vir_last ,&pointer );
f010e1e2:	8b 45 08             	mov    0x8(%ebp),%eax
f010e1e5:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e1e8:	83 ec 04             	sub    $0x4,%esp
f010e1eb:	8d 55 c8             	lea    -0x38(%ebp),%edx
f010e1ee:	52                   	push   %edx
f010e1ef:	ff 75 e4             	pushl  -0x1c(%ebp)
f010e1f2:	50                   	push   %eax
f010e1f3:	e8 ec 8b ff ff       	call   f0106de4 <get_frame_info>
f010e1f8:	83 c4 10             	add    $0x10,%esp
f010e1fb:	89 45 cc             	mov    %eax,-0x34(%ebp)
	    		uint32 permession = pt_get_page_permissions(curenv->env_page_directory , vir_last);
f010e1fe:	8b 45 08             	mov    0x8(%ebp),%eax
f010e201:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e204:	83 ec 08             	sub    $0x8,%esp
f010e207:	ff 75 e4             	pushl  -0x1c(%ebp)
f010e20a:	50                   	push   %eax
f010e20b:	e8 fb 9b ff ff       	call   f0107e0b <pt_get_page_permissions>
f010e210:	83 c4 10             	add    $0x10,%esp
f010e213:	89 45 e0             	mov    %eax,-0x20(%ebp)
	    		if((permession & PERM_USED) != PERM_USED){
f010e216:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e219:	83 e0 20             	and    $0x20,%eax
f010e21c:	85 c0                	test   %eax,%eax
f010e21e:	0f 85 51 01 00 00    	jne    f010e375 <page_fault_handler+0x2e6>
	    			if((permession & PERM_MODIFIED)== PERM_MODIFIED){
f010e224:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e227:	83 e0 40             	and    $0x40,%eax
f010e22a:	85 c0                	test   %eax,%eax
f010e22c:	74 15                	je     f010e243 <page_fault_handler+0x1b4>
	    				pf_update_env_page(curenv , vir_last , to_frame );
f010e22e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e231:	83 ec 04             	sub    $0x4,%esp
f010e234:	50                   	push   %eax
f010e235:	ff 75 e4             	pushl  -0x1c(%ebp)
f010e238:	ff 75 08             	pushl  0x8(%ebp)
f010e23b:	e8 76 55 ff ff       	call   f01037b6 <pf_update_env_page>
f010e240:	83 c4 10             	add    $0x10,%esp
	    		    }
	    			unmap_frame(curenv->env_page_directory , vir_last);
f010e243:	8b 45 08             	mov    0x8(%ebp),%eax
f010e246:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e249:	83 ec 08             	sub    $0x8,%esp
f010e24c:	ff 75 e4             	pushl  -0x1c(%ebp)
f010e24f:	50                   	push   %eax
f010e250:	e8 ff 8b ff ff       	call   f0106e54 <unmap_frame>
f010e255:	83 c4 10             	add    $0x10,%esp
	    			env_page_ws_clear_entry(curenv , curenv->page_last_WS_index);
f010e258:	8b 45 08             	mov    0x8(%ebp),%eax
f010e25b:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e261:	83 ec 08             	sub    $0x8,%esp
f010e264:	50                   	push   %eax
f010e265:	ff 75 08             	pushl  0x8(%ebp)
f010e268:	e8 bc 9e ff ff       	call   f0108129 <env_page_ws_clear_entry>
f010e26d:	83 c4 10             	add    $0x10,%esp
	    			if(env_page_ws_get_size(curenv) < curenv->page_WS_max_size){
f010e270:	83 ec 0c             	sub    $0xc,%esp
f010e273:	ff 75 08             	pushl  0x8(%ebp)
f010e276:	e8 59 9d ff ff       	call   f0107fd4 <env_page_ws_get_size>
f010e27b:	83 c4 10             	add    $0x10,%esp
f010e27e:	89 c2                	mov    %eax,%edx
f010e280:	8b 45 08             	mov    0x8(%ebp),%eax
f010e283:	8b 40 74             	mov    0x74(%eax),%eax
f010e286:	39 c2                	cmp    %eax,%edx
f010e288:	0f 83 36 01 00 00    	jae    f010e3c4 <page_fault_handler+0x335>
	    			allocate_frame(&to_frame);
f010e28e:	83 ec 0c             	sub    $0xc,%esp
f010e291:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010e294:	50                   	push   %eax
f010e295:	e8 36 86 ff ff       	call   f01068d0 <allocate_frame>
f010e29a:	83 c4 10             	add    $0x10,%esp
	    			map_frame(curenv->env_page_directory ,to_frame,fault_va , PERM_USER|PERM_WRITEABLE|PERM_PRESENT );
f010e29d:	8b 55 cc             	mov    -0x34(%ebp),%edx
f010e2a0:	8b 45 08             	mov    0x8(%ebp),%eax
f010e2a3:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e2a6:	6a 07                	push   $0x7
f010e2a8:	ff 75 0c             	pushl  0xc(%ebp)
f010e2ab:	52                   	push   %edx
f010e2ac:	50                   	push   %eax
f010e2ad:	e8 6d 8a ff ff       	call   f0106d1f <map_frame>
f010e2b2:	83 c4 10             	add    $0x10,%esp
	    			uint32 alloc_pa = pf_read_env_page(curenv , (void *)fault_va); if(alloc_pa == E_PAGE_NOT_EXIST_IN_PF){
f010e2b5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e2b8:	83 ec 08             	sub    $0x8,%esp
f010e2bb:	50                   	push   %eax
f010e2bc:	ff 75 08             	pushl  0x8(%ebp)
f010e2bf:	e8 54 57 ff ff       	call   f0103a18 <pf_read_env_page>
f010e2c4:	83 c4 10             	add    $0x10,%esp
f010e2c7:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010e2ca:	83 7d dc f7          	cmpl   $0xfffffff7,-0x24(%ebp)
f010e2ce:	75 54                	jne    f010e324 <page_fault_handler+0x295>
	    			if ((fault_va <= USTACKTOP && fault_va >= USTACKBOTTOM) || (fault_va >= USER_HEAP_START && fault_va < USER_HEAP_MAX)){
f010e2d0:	81 7d 0c 00 e0 bf ee 	cmpl   $0xeebfe000,0xc(%ebp)
f010e2d7:	77 27                	ja     f010e300 <page_fault_handler+0x271>
f010e2d9:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f010e2e0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e2e3:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f010e2e8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010e2eb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e2ee:	ba 00 00 00 00       	mov    $0x0,%edx
f010e2f3:	f7 75 d8             	divl   -0x28(%ebp)
f010e2f6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e2f9:	29 d0                	sub    %edx,%eax
f010e2fb:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010e2fe:	76 24                	jbe    f010e324 <page_fault_handler+0x295>
f010e300:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e303:	85 c0                	test   %eax,%eax
f010e305:	79 09                	jns    f010e310 <page_fault_handler+0x281>
f010e307:	81 7d 0c ff ff ff 9f 	cmpl   $0x9fffffff,0xc(%ebp)
f010e30e:	76 14                	jbe    f010e324 <page_fault_handler+0x295>
	    			}else{
	    			panic("ILLEGAL MEMORY ACCESS");
f010e310:	83 ec 04             	sub    $0x4,%esp
f010e313:	68 05 7a 13 f0       	push   $0xf0137a05
f010e318:	6a 74                	push   $0x74
f010e31a:	68 eb 79 13 f0       	push   $0xf01379eb
f010e31f:	e8 e1 1e ff ff       	call   f0100205 <_panic>
	    			   }
	    			}
	    			env_page_ws_set_entry(curenv ,curenv->page_last_WS_index , fault_va);
f010e324:	8b 45 08             	mov    0x8(%ebp),%eax
f010e327:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e32d:	83 ec 04             	sub    $0x4,%esp
f010e330:	ff 75 0c             	pushl  0xc(%ebp)
f010e333:	50                   	push   %eax
f010e334:	ff 75 08             	pushl  0x8(%ebp)
f010e337:	e8 4c 9d ff ff       	call   f0108088 <env_page_ws_set_entry>
f010e33c:	83 c4 10             	add    $0x10,%esp
	    			curenv->page_last_WS_index = curenv->page_last_WS_index + 1 ;
f010e33f:	8b 45 08             	mov    0x8(%ebp),%eax
f010e342:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e348:	8d 50 01             	lea    0x1(%eax),%edx
f010e34b:	8b 45 08             	mov    0x8(%ebp),%eax
f010e34e:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
	    			curenv->page_last_WS_index = curenv->page_last_WS_index % curenv->page_WS_max_size;
f010e354:	8b 45 08             	mov    0x8(%ebp),%eax
f010e357:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e35d:	8b 55 08             	mov    0x8(%ebp),%edx
f010e360:	8b 4a 74             	mov    0x74(%edx),%ecx
f010e363:	ba 00 00 00 00       	mov    $0x0,%edx
f010e368:	f7 f1                	div    %ecx
f010e36a:	8b 45 08             	mov    0x8(%ebp),%eax
f010e36d:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
	    			        }
	    			break;
f010e373:	eb 4f                	jmp    f010e3c4 <page_fault_handler+0x335>
	    			}else{
	    			pt_set_page_permissions(curenv->env_page_directory , vir_last ,0 , PERM_USED);
f010e375:	8b 45 08             	mov    0x8(%ebp),%eax
f010e378:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e37b:	6a 20                	push   $0x20
f010e37d:	6a 00                	push   $0x0
f010e37f:	ff 75 e4             	pushl  -0x1c(%ebp)
f010e382:	50                   	push   %eax
f010e383:	e8 d9 99 ff ff       	call   f0107d61 <pt_set_page_permissions>
f010e388:	83 c4 10             	add    $0x10,%esp
	    			curenv->page_last_WS_index = curenv->page_last_WS_index + 1 ;
f010e38b:	8b 45 08             	mov    0x8(%ebp),%eax
f010e38e:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e394:	8d 50 01             	lea    0x1(%eax),%edx
f010e397:	8b 45 08             	mov    0x8(%ebp),%eax
f010e39a:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
	    			curenv->page_last_WS_index = curenv->page_last_WS_index % curenv->page_WS_max_size;
f010e3a0:	8b 45 08             	mov    0x8(%ebp),%eax
f010e3a3:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e3a9:	8b 55 08             	mov    0x8(%ebp),%edx
f010e3ac:	8b 4a 74             	mov    0x74(%edx),%ecx
f010e3af:	ba 00 00 00 00       	mov    $0x0,%edx
f010e3b4:	f7 f1                	div    %ecx
f010e3b6:	8b 45 08             	mov    0x8(%ebp),%eax
f010e3b9:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
	    			}
	    		}
f010e3bf:	e9 ff fd ff ff       	jmp    f010e1c3 <page_fault_handler+0x134>
	    			}
	    			env_page_ws_set_entry(curenv ,curenv->page_last_WS_index , fault_va);
	    			curenv->page_last_WS_index = curenv->page_last_WS_index + 1 ;
	    			curenv->page_last_WS_index = curenv->page_last_WS_index % curenv->page_WS_max_size;
	    			        }
	    			break;
f010e3c4:	90                   	nop
	    			curenv->page_last_WS_index = curenv->page_last_WS_index + 1 ;
	    			curenv->page_last_WS_index = curenv->page_last_WS_index % curenv->page_WS_max_size;
	    			}
	    		}
	    	}
	    }
f010e3c5:	90                   	nop
f010e3c6:	c9                   	leave  
f010e3c7:	c3                   	ret    

f010e3c8 <__page_fault_handler_with_buffering>:
	// Write your code here, remove the panic and write your code
	//panic("page_fault_handler() is not implemented yet...!!");
	//refer to the project presentation and documentation for details

void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f010e3c8:	55                   	push   %ebp
f010e3c9:	89 e5                	mov    %esp,%ebp
f010e3cb:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("__page_fault_handler_with_buffering() is not implemented yet...!!");
f010e3ce:	83 ec 04             	sub    $0x4,%esp
f010e3d1:	68 1c 7a 13 f0       	push   $0xf0137a1c
f010e3d6:	68 8d 00 00 00       	push   $0x8d
f010e3db:	68 eb 79 13 f0       	push   $0xf01379eb
f010e3e0:	e8 20 1e ff ff       	call   f0100205 <_panic>

f010e3e5 <create_semaphores_array>:
// [1] Create "semaphores" array:
//===============================
//Dynamically allocate the "semaphores" array
//initialize the "semaphores" array by 0's and empty = 1
void create_semaphores_array(uint32 numOfSemaphores)
{
f010e3e5:	55                   	push   %ebp
f010e3e6:	89 e5                	mov    %esp,%ebp
f010e3e8:	83 ec 18             	sub    $0x18,%esp
#if USE_KHEAP
	MAX_SEMAPHORES = numOfSemaphores ;
f010e3eb:	8b 45 08             	mov    0x8(%ebp),%eax
f010e3ee:	a3 b0 26 86 f0       	mov    %eax,0xf08626b0
	semaphores = (struct Semaphore*) kmalloc(numOfSemaphores*sizeof(struct Semaphore));
f010e3f3:	8b 55 08             	mov    0x8(%ebp),%edx
f010e3f6:	89 d0                	mov    %edx,%eax
f010e3f8:	c1 e0 02             	shl    $0x2,%eax
f010e3fb:	01 d0                	add    %edx,%eax
f010e3fd:	01 c0                	add    %eax,%eax
f010e3ff:	01 d0                	add    %edx,%eax
f010e401:	01 c0                	add    %eax,%eax
f010e403:	01 d0                	add    %edx,%eax
f010e405:	c1 e0 02             	shl    $0x2,%eax
f010e408:	83 ec 0c             	sub    $0xc,%esp
f010e40b:	50                   	push   %eax
f010e40c:	e8 50 96 ff ff       	call   f0107a61 <kmalloc>
f010e411:	83 c4 10             	add    $0x10,%esp
f010e414:	a3 08 27 86 f0       	mov    %eax,0xf0862708
	if (semaphores == NULL)
f010e419:	a1 08 27 86 f0       	mov    0xf0862708,%eax
f010e41e:	85 c0                	test   %eax,%eax
f010e420:	75 14                	jne    f010e436 <create_semaphores_array+0x51>
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
f010e422:	83 ec 04             	sub    $0x4,%esp
f010e425:	68 60 7a 13 f0       	push   $0xf0137a60
f010e42a:	6a 1e                	push   $0x1e
f010e42c:	68 a0 7a 13 f0       	push   $0xf0137aa0
f010e431:	e8 cf 1d ff ff       	call   f0100205 <_panic>
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e436:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010e43d:	e9 bd 00 00 00       	jmp    f010e4ff <create_semaphores_array+0x11a>
	{
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
f010e442:	8b 0d 08 27 86 f0    	mov    0xf0862708,%ecx
f010e448:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e44b:	89 d0                	mov    %edx,%eax
f010e44d:	c1 e0 02             	shl    $0x2,%eax
f010e450:	01 d0                	add    %edx,%eax
f010e452:	01 c0                	add    %eax,%eax
f010e454:	01 d0                	add    %edx,%eax
f010e456:	01 c0                	add    %eax,%eax
f010e458:	01 d0                	add    %edx,%eax
f010e45a:	c1 e0 02             	shl    $0x2,%eax
f010e45d:	01 c8                	add    %ecx,%eax
f010e45f:	83 ec 04             	sub    $0x4,%esp
f010e462:	6a 5c                	push   $0x5c
f010e464:	6a 00                	push   $0x0
f010e466:	50                   	push   %eax
f010e467:	e8 8a 33 02 00       	call   f01317f6 <memset>
f010e46c:	83 c4 10             	add    $0x10,%esp
		semaphores[i].empty = 1;
f010e46f:	8b 0d 08 27 86 f0    	mov    0xf0862708,%ecx
f010e475:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e478:	89 d0                	mov    %edx,%eax
f010e47a:	c1 e0 02             	shl    $0x2,%eax
f010e47d:	01 d0                	add    %edx,%eax
f010e47f:	01 c0                	add    %eax,%eax
f010e481:	01 d0                	add    %edx,%eax
f010e483:	01 c0                	add    %eax,%eax
f010e485:	01 d0                	add    %edx,%eax
f010e487:	c1 e0 02             	shl    $0x2,%eax
f010e48a:	01 c8                	add    %ecx,%eax
f010e48c:	c6 40 58 01          	movb   $0x1,0x58(%eax)
		LIST_INIT(&(semaphores[i].env_queue));
f010e490:	8b 0d 08 27 86 f0    	mov    0xf0862708,%ecx
f010e496:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e499:	89 d0                	mov    %edx,%eax
f010e49b:	c1 e0 02             	shl    $0x2,%eax
f010e49e:	01 d0                	add    %edx,%eax
f010e4a0:	01 c0                	add    %eax,%eax
f010e4a2:	01 d0                	add    %edx,%eax
f010e4a4:	01 c0                	add    %eax,%eax
f010e4a6:	01 d0                	add    %edx,%eax
f010e4a8:	c1 e0 02             	shl    $0x2,%eax
f010e4ab:	01 c8                	add    %ecx,%eax
f010e4ad:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010e4b4:	8b 0d 08 27 86 f0    	mov    0xf0862708,%ecx
f010e4ba:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e4bd:	89 d0                	mov    %edx,%eax
f010e4bf:	c1 e0 02             	shl    $0x2,%eax
f010e4c2:	01 d0                	add    %edx,%eax
f010e4c4:	01 c0                	add    %eax,%eax
f010e4c6:	01 d0                	add    %edx,%eax
f010e4c8:	01 c0                	add    %eax,%eax
f010e4ca:	01 d0                	add    %edx,%eax
f010e4cc:	c1 e0 02             	shl    $0x2,%eax
f010e4cf:	01 c8                	add    %ecx,%eax
f010e4d1:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010e4d8:	8b 0d 08 27 86 f0    	mov    0xf0862708,%ecx
f010e4de:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e4e1:	89 d0                	mov    %edx,%eax
f010e4e3:	c1 e0 02             	shl    $0x2,%eax
f010e4e6:	01 d0                	add    %edx,%eax
f010e4e8:	01 c0                	add    %eax,%eax
f010e4ea:	01 d0                	add    %edx,%eax
f010e4ec:	01 c0                	add    %eax,%eax
f010e4ee:	01 d0                	add    %edx,%eax
f010e4f0:	c1 e0 02             	shl    $0x2,%eax
f010e4f3:	01 c8                	add    %ecx,%eax
f010e4f5:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e4fc:	ff 45 f4             	incl   -0xc(%ebp)
f010e4ff:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e502:	a1 b0 26 86 f0       	mov    0xf08626b0,%eax
f010e507:	39 c2                	cmp    %eax,%edx
f010e509:	0f 82 33 ff ff ff    	jb     f010e442 <create_semaphores_array+0x5d>
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
		semaphores[i].empty = 1;
		LIST_INIT(&(semaphores[i].env_queue));
	}

}
f010e50f:	90                   	nop
f010e510:	c9                   	leave  
f010e511:	c3                   	ret    

f010e512 <allocate_semaphore_object>:
//	a) if succeed:
//		1. allocatedSemaphore (pointer to struct Semaphore) passed by reference
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
f010e512:	55                   	push   %ebp
f010e513:	89 e5                	mov    %esp,%ebp
f010e515:	83 ec 18             	sub    $0x18,%esp
	int32 semaphoreObjectID = -1 ;
f010e518:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e51f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010e526:	eb 2f                	jmp    f010e557 <allocate_semaphore_object+0x45>
	{
		if (semaphores[i].empty)
f010e528:	8b 0d 08 27 86 f0    	mov    0xf0862708,%ecx
f010e52e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e531:	89 d0                	mov    %edx,%eax
f010e533:	c1 e0 02             	shl    $0x2,%eax
f010e536:	01 d0                	add    %edx,%eax
f010e538:	01 c0                	add    %eax,%eax
f010e53a:	01 d0                	add    %edx,%eax
f010e53c:	01 c0                	add    %eax,%eax
f010e53e:	01 d0                	add    %edx,%eax
f010e540:	c1 e0 02             	shl    $0x2,%eax
f010e543:	01 c8                	add    %ecx,%eax
f010e545:	8a 40 58             	mov    0x58(%eax),%al
f010e548:	84 c0                	test   %al,%al
f010e54a:	74 08                	je     f010e554 <allocate_semaphore_object+0x42>
		{
			semaphoreObjectID = i;
f010e54c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e54f:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f010e552:	eb 0f                	jmp    f010e563 <allocate_semaphore_object+0x51>
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
	int32 semaphoreObjectID = -1 ;
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e554:	ff 45 f0             	incl   -0x10(%ebp)
f010e557:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e55a:	a1 b0 26 86 f0       	mov    0xf08626b0,%eax
f010e55f:	39 c2                	cmp    %eax,%edx
f010e561:	72 c5                	jb     f010e528 <allocate_semaphore_object+0x16>
			semaphoreObjectID = i;
			break;
		}
	}

	if (semaphoreObjectID == -1)
f010e563:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f010e567:	75 4d                	jne    f010e5b6 <allocate_semaphore_object+0xa4>
	{
		//try to double the size of the "semaphores" array
		#if USE_KHEAP
		{
			semaphores = (struct Semaphore*) krealloc(semaphores, 2*MAX_SEMAPHORES);
f010e569:	a1 b0 26 86 f0       	mov    0xf08626b0,%eax
f010e56e:	01 c0                	add    %eax,%eax
f010e570:	89 c2                	mov    %eax,%edx
f010e572:	a1 08 27 86 f0       	mov    0xf0862708,%eax
f010e577:	83 ec 08             	sub    $0x8,%esp
f010e57a:	52                   	push   %edx
f010e57b:	50                   	push   %eax
f010e57c:	e8 c3 97 ff ff       	call   f0107d44 <krealloc>
f010e581:	83 c4 10             	add    $0x10,%esp
f010e584:	a3 08 27 86 f0       	mov    %eax,0xf0862708
			if (semaphores == NULL)
f010e589:	a1 08 27 86 f0       	mov    0xf0862708,%eax
f010e58e:	85 c0                	test   %eax,%eax
f010e590:	75 10                	jne    f010e5a2 <allocate_semaphore_object+0x90>
			{
				*allocatedObject = NULL;
f010e592:	8b 45 08             	mov    0x8(%ebp),%eax
f010e595:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				return E_NO_SEMAPHORE;
f010e59b:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
f010e5a0:	eb 5b                	jmp    f010e5fd <allocate_semaphore_object+0xeb>
			}
			else
			{
				semaphoreObjectID = MAX_SEMAPHORES;
f010e5a2:	a1 b0 26 86 f0       	mov    0xf08626b0,%eax
f010e5a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
				MAX_SEMAPHORES *= 2;
f010e5aa:	a1 b0 26 86 f0       	mov    0xf08626b0,%eax
f010e5af:	01 c0                	add    %eax,%eax
f010e5b1:	a3 b0 26 86 f0       	mov    %eax,0xf08626b0
			return E_NO_SEMAPHORE;
		}
		#endif
	}

	*allocatedObject = &(semaphores[semaphoreObjectID]);
f010e5b6:	8b 0d 08 27 86 f0    	mov    0xf0862708,%ecx
f010e5bc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e5bf:	89 d0                	mov    %edx,%eax
f010e5c1:	c1 e0 02             	shl    $0x2,%eax
f010e5c4:	01 d0                	add    %edx,%eax
f010e5c6:	01 c0                	add    %eax,%eax
f010e5c8:	01 d0                	add    %edx,%eax
f010e5ca:	01 c0                	add    %eax,%eax
f010e5cc:	01 d0                	add    %edx,%eax
f010e5ce:	c1 e0 02             	shl    $0x2,%eax
f010e5d1:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010e5d4:	8b 45 08             	mov    0x8(%ebp),%eax
f010e5d7:	89 10                	mov    %edx,(%eax)
	semaphores[semaphoreObjectID].empty = 0;
f010e5d9:	8b 0d 08 27 86 f0    	mov    0xf0862708,%ecx
f010e5df:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e5e2:	89 d0                	mov    %edx,%eax
f010e5e4:	c1 e0 02             	shl    $0x2,%eax
f010e5e7:	01 d0                	add    %edx,%eax
f010e5e9:	01 c0                	add    %eax,%eax
f010e5eb:	01 d0                	add    %edx,%eax
f010e5ed:	01 c0                	add    %eax,%eax
f010e5ef:	01 d0                	add    %edx,%eax
f010e5f1:	c1 e0 02             	shl    $0x2,%eax
f010e5f4:	01 c8                	add    %ecx,%eax
f010e5f6:	c6 40 58 00          	movb   $0x0,0x58(%eax)

	return semaphoreObjectID;
f010e5fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010e5fd:	c9                   	leave  
f010e5fe:	c3                   	ret    

f010e5ff <get_semaphore_object_ID>:
//Search for the given semaphore object in the "semaphores" array
//Return:
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
f010e5ff:	55                   	push   %ebp
f010e600:	89 e5                	mov    %esp,%ebp
f010e602:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010e605:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(; i < MAX_SEMAPHORES; ++i)
f010e60c:	e9 84 00 00 00       	jmp    f010e695 <get_semaphore_object_ID+0x96>
	{
		if (semaphores[i].empty)
f010e611:	8b 0d 08 27 86 f0    	mov    0xf0862708,%ecx
f010e617:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e61a:	89 d0                	mov    %edx,%eax
f010e61c:	c1 e0 02             	shl    $0x2,%eax
f010e61f:	01 d0                	add    %edx,%eax
f010e621:	01 c0                	add    %eax,%eax
f010e623:	01 d0                	add    %edx,%eax
f010e625:	01 c0                	add    %eax,%eax
f010e627:	01 d0                	add    %edx,%eax
f010e629:	c1 e0 02             	shl    $0x2,%eax
f010e62c:	01 c8                	add    %ecx,%eax
f010e62e:	8a 40 58             	mov    0x58(%eax),%al
f010e631:	84 c0                	test   %al,%al
f010e633:	75 5c                	jne    f010e691 <get_semaphore_object_ID+0x92>
			continue;

		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
f010e635:	8b 0d 08 27 86 f0    	mov    0xf0862708,%ecx
f010e63b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e63e:	89 d0                	mov    %edx,%eax
f010e640:	c1 e0 02             	shl    $0x2,%eax
f010e643:	01 d0                	add    %edx,%eax
f010e645:	01 c0                	add    %eax,%eax
f010e647:	01 d0                	add    %edx,%eax
f010e649:	01 c0                	add    %eax,%eax
f010e64b:	01 d0                	add    %edx,%eax
f010e64d:	c1 e0 02             	shl    $0x2,%eax
f010e650:	01 c8                	add    %ecx,%eax
f010e652:	8b 00                	mov    (%eax),%eax
f010e654:	3b 45 08             	cmp    0x8(%ebp),%eax
f010e657:	75 39                	jne    f010e692 <get_semaphore_object_ID+0x93>
f010e659:	8b 0d 08 27 86 f0    	mov    0xf0862708,%ecx
f010e65f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e662:	89 d0                	mov    %edx,%eax
f010e664:	c1 e0 02             	shl    $0x2,%eax
f010e667:	01 d0                	add    %edx,%eax
f010e669:	01 c0                	add    %eax,%eax
f010e66b:	01 d0                	add    %edx,%eax
f010e66d:	01 c0                	add    %eax,%eax
f010e66f:	01 d0                	add    %edx,%eax
f010e671:	c1 e0 02             	shl    $0x2,%eax
f010e674:	01 c8                	add    %ecx,%eax
f010e676:	83 c0 04             	add    $0x4,%eax
f010e679:	83 ec 08             	sub    $0x8,%esp
f010e67c:	50                   	push   %eax
f010e67d:	ff 75 0c             	pushl  0xc(%ebp)
f010e680:	e8 8f 30 02 00       	call   f0131714 <strcmp>
f010e685:	83 c4 10             	add    $0x10,%esp
f010e688:	85 c0                	test   %eax,%eax
f010e68a:	75 06                	jne    f010e692 <get_semaphore_object_ID+0x93>
		{
			return i;
f010e68c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e68f:	eb 19                	jmp    f010e6aa <get_semaphore_object_ID+0xab>
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
	{
		if (semaphores[i].empty)
			continue;
f010e691:	90                   	nop
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
f010e692:	ff 45 f4             	incl   -0xc(%ebp)
f010e695:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e698:	a1 b0 26 86 f0       	mov    0xf08626b0,%eax
f010e69d:	39 c2                	cmp    %eax,%edx
f010e69f:	0f 82 6c ff ff ff    	jb     f010e611 <get_semaphore_object_ID+0x12>
		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
		{
			return i;
		}
	}
	return E_SEMAPHORE_NOT_EXISTS;
f010e6a5:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
f010e6aa:	c9                   	leave  
f010e6ab:	c3                   	ret    

f010e6ac <free_semaphore_object>:
//delete the semaphore with the given ID from the "semaphores" array
//Return:
//	a) 0 if succeed
//	b) E_SEMAPHORE_NOT_EXISTS if the semaphore is not exists
int free_semaphore_object(uint32 semaphoreObjectID)
{
f010e6ac:	55                   	push   %ebp
f010e6ad:	89 e5                	mov    %esp,%ebp
f010e6af:	83 ec 08             	sub    $0x8,%esp
	if (semaphoreObjectID >= MAX_SEMAPHORES)
f010e6b2:	a1 b0 26 86 f0       	mov    0xf08626b0,%eax
f010e6b7:	39 45 08             	cmp    %eax,0x8(%ebp)
f010e6ba:	72 0a                	jb     f010e6c6 <free_semaphore_object+0x1a>
		return E_SEMAPHORE_NOT_EXISTS;
f010e6bc:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
f010e6c1:	e9 bf 00 00 00       	jmp    f010e785 <free_semaphore_object+0xd9>

	memset(&(semaphores[semaphoreObjectID]), 0, sizeof(struct Semaphore));
f010e6c6:	8b 0d 08 27 86 f0    	mov    0xf0862708,%ecx
f010e6cc:	8b 55 08             	mov    0x8(%ebp),%edx
f010e6cf:	89 d0                	mov    %edx,%eax
f010e6d1:	c1 e0 02             	shl    $0x2,%eax
f010e6d4:	01 d0                	add    %edx,%eax
f010e6d6:	01 c0                	add    %eax,%eax
f010e6d8:	01 d0                	add    %edx,%eax
f010e6da:	01 c0                	add    %eax,%eax
f010e6dc:	01 d0                	add    %edx,%eax
f010e6de:	c1 e0 02             	shl    $0x2,%eax
f010e6e1:	01 c8                	add    %ecx,%eax
f010e6e3:	83 ec 04             	sub    $0x4,%esp
f010e6e6:	6a 5c                	push   $0x5c
f010e6e8:	6a 00                	push   $0x0
f010e6ea:	50                   	push   %eax
f010e6eb:	e8 06 31 02 00       	call   f01317f6 <memset>
f010e6f0:	83 c4 10             	add    $0x10,%esp
	semaphores[semaphoreObjectID].empty = 1;
f010e6f3:	8b 0d 08 27 86 f0    	mov    0xf0862708,%ecx
f010e6f9:	8b 55 08             	mov    0x8(%ebp),%edx
f010e6fc:	89 d0                	mov    %edx,%eax
f010e6fe:	c1 e0 02             	shl    $0x2,%eax
f010e701:	01 d0                	add    %edx,%eax
f010e703:	01 c0                	add    %eax,%eax
f010e705:	01 d0                	add    %edx,%eax
f010e707:	01 c0                	add    %eax,%eax
f010e709:	01 d0                	add    %edx,%eax
f010e70b:	c1 e0 02             	shl    $0x2,%eax
f010e70e:	01 c8                	add    %ecx,%eax
f010e710:	c6 40 58 01          	movb   $0x1,0x58(%eax)
	LIST_INIT(&(semaphores[semaphoreObjectID].env_queue));
f010e714:	8b 0d 08 27 86 f0    	mov    0xf0862708,%ecx
f010e71a:	8b 55 08             	mov    0x8(%ebp),%edx
f010e71d:	89 d0                	mov    %edx,%eax
f010e71f:	c1 e0 02             	shl    $0x2,%eax
f010e722:	01 d0                	add    %edx,%eax
f010e724:	01 c0                	add    %eax,%eax
f010e726:	01 d0                	add    %edx,%eax
f010e728:	01 c0                	add    %eax,%eax
f010e72a:	01 d0                	add    %edx,%eax
f010e72c:	c1 e0 02             	shl    $0x2,%eax
f010e72f:	01 c8                	add    %ecx,%eax
f010e731:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010e738:	8b 0d 08 27 86 f0    	mov    0xf0862708,%ecx
f010e73e:	8b 55 08             	mov    0x8(%ebp),%edx
f010e741:	89 d0                	mov    %edx,%eax
f010e743:	c1 e0 02             	shl    $0x2,%eax
f010e746:	01 d0                	add    %edx,%eax
f010e748:	01 c0                	add    %eax,%eax
f010e74a:	01 d0                	add    %edx,%eax
f010e74c:	01 c0                	add    %eax,%eax
f010e74e:	01 d0                	add    %edx,%eax
f010e750:	c1 e0 02             	shl    $0x2,%eax
f010e753:	01 c8                	add    %ecx,%eax
f010e755:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010e75c:	8b 0d 08 27 86 f0    	mov    0xf0862708,%ecx
f010e762:	8b 55 08             	mov    0x8(%ebp),%edx
f010e765:	89 d0                	mov    %edx,%eax
f010e767:	c1 e0 02             	shl    $0x2,%eax
f010e76a:	01 d0                	add    %edx,%eax
f010e76c:	01 c0                	add    %eax,%eax
f010e76e:	01 d0                	add    %edx,%eax
f010e770:	01 c0                	add    %eax,%eax
f010e772:	01 d0                	add    %edx,%eax
f010e774:	c1 e0 02             	shl    $0x2,%eax
f010e777:	01 c8                	add    %ecx,%eax
f010e779:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)

	return 0;
f010e780:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e785:	c9                   	leave  
f010e786:	c3                   	ret    

f010e787 <createSemaphore>:

//======================
// [1] Create Semaphore:
//======================
int createSemaphore(int32 ownerEnvID, char* semaphoreName, uint32 initialValue)
{
f010e787:	55                   	push   %ebp
f010e788:	89 e5                	mov    %esp,%ebp
f010e78a:	83 ec 18             	sub    $0x18,%esp
	struct Semaphore *allocatedObject=NULL;
f010e78d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int i;
	for (i = 0; i < MAX_SEMAPHORES; i++) {
f010e794:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010e79b:	eb 61                	jmp    f010e7fe <createSemaphore+0x77>
			if((strcmp(semaphores[i].name,semaphoreName)==0)&&semaphores[i].ownerID==ownerEnvID){
f010e79d:	8b 0d 08 27 86 f0    	mov    0xf0862708,%ecx
f010e7a3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e7a6:	89 d0                	mov    %edx,%eax
f010e7a8:	c1 e0 02             	shl    $0x2,%eax
f010e7ab:	01 d0                	add    %edx,%eax
f010e7ad:	01 c0                	add    %eax,%eax
f010e7af:	01 d0                	add    %edx,%eax
f010e7b1:	01 c0                	add    %eax,%eax
f010e7b3:	01 d0                	add    %edx,%eax
f010e7b5:	c1 e0 02             	shl    $0x2,%eax
f010e7b8:	01 c8                	add    %ecx,%eax
f010e7ba:	83 c0 04             	add    $0x4,%eax
f010e7bd:	83 ec 08             	sub    $0x8,%esp
f010e7c0:	ff 75 0c             	pushl  0xc(%ebp)
f010e7c3:	50                   	push   %eax
f010e7c4:	e8 4b 2f 02 00       	call   f0131714 <strcmp>
f010e7c9:	83 c4 10             	add    $0x10,%esp
f010e7cc:	85 c0                	test   %eax,%eax
f010e7ce:	75 2b                	jne    f010e7fb <createSemaphore+0x74>
f010e7d0:	8b 0d 08 27 86 f0    	mov    0xf0862708,%ecx
f010e7d6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e7d9:	89 d0                	mov    %edx,%eax
f010e7db:	c1 e0 02             	shl    $0x2,%eax
f010e7de:	01 d0                	add    %edx,%eax
f010e7e0:	01 c0                	add    %eax,%eax
f010e7e2:	01 d0                	add    %edx,%eax
f010e7e4:	01 c0                	add    %eax,%eax
f010e7e6:	01 d0                	add    %edx,%eax
f010e7e8:	c1 e0 02             	shl    $0x2,%eax
f010e7eb:	01 c8                	add    %ecx,%eax
f010e7ed:	8b 00                	mov    (%eax),%eax
f010e7ef:	3b 45 08             	cmp    0x8(%ebp),%eax
f010e7f2:	75 07                	jne    f010e7fb <createSemaphore+0x74>
				return E_SEMAPHORE_EXISTS;
f010e7f4:	b8 f4 ff ff ff       	mov    $0xfffffff4,%eax
f010e7f9:	eb 57                	jmp    f010e852 <createSemaphore+0xcb>
//======================
int createSemaphore(int32 ownerEnvID, char* semaphoreName, uint32 initialValue)
{
	struct Semaphore *allocatedObject=NULL;
	int i;
	for (i = 0; i < MAX_SEMAPHORES; i++) {
f010e7fb:	ff 45 f4             	incl   -0xc(%ebp)
f010e7fe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e801:	a1 b0 26 86 f0       	mov    0xf08626b0,%eax
f010e806:	39 c2                	cmp    %eax,%edx
f010e808:	72 93                	jb     f010e79d <createSemaphore+0x16>
			if((strcmp(semaphores[i].name,semaphoreName)==0)&&semaphores[i].ownerID==ownerEnvID){
				return E_SEMAPHORE_EXISTS;
			}
	}
			int res= allocate_semaphore_object(&allocatedObject);
f010e80a:	83 ec 0c             	sub    $0xc,%esp
f010e80d:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010e810:	50                   	push   %eax
f010e811:	e8 fc fc ff ff       	call   f010e512 <allocate_semaphore_object>
f010e816:	83 c4 10             	add    $0x10,%esp
f010e819:	89 45 f0             	mov    %eax,-0x10(%ebp)
				if(res!=E_NO_SEMAPHORE){
f010e81c:	83 7d f0 f5          	cmpl   $0xfffffff5,-0x10(%ebp)
f010e820:	74 2b                	je     f010e84d <createSemaphore+0xc6>
					allocatedObject->ownerID=ownerEnvID;
f010e822:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e825:	8b 55 08             	mov    0x8(%ebp),%edx
f010e828:	89 10                	mov    %edx,(%eax)
					allocatedObject->value=initialValue;
f010e82a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e82d:	8b 55 10             	mov    0x10(%ebp),%edx
f010e830:	89 50 54             	mov    %edx,0x54(%eax)
					strcpy(allocatedObject->name,semaphoreName);
f010e833:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e836:	83 c0 04             	add    $0x4,%eax
f010e839:	83 ec 08             	sub    $0x8,%esp
f010e83c:	ff 75 0c             	pushl  0xc(%ebp)
f010e83f:	50                   	push   %eax
f010e840:	e8 12 2e 02 00       	call   f0131657 <strcpy>
f010e845:	83 c4 10             	add    $0x10,%esp
				return res;
f010e848:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e84b:	eb 05                	jmp    f010e852 <createSemaphore+0xcb>
				}else{
					return E_NO_SEMAPHORE;
f010e84d:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
			}
		}
f010e852:	c9                   	leave  
f010e853:	c3                   	ret    

f010e854 <waitSemaphore>:

//============
// [2] Wait():
//============
void waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010e854:	55                   	push   %ebp
f010e855:	89 e5                	mov    %esp,%ebp
f010e857:	83 ec 18             	sub    $0x18,%esp
//	cprintf("wait \n\n ");
	//TODO: [PROJECT MS3] [SEMAPHORES] waitSemaphore
	// your code is here, remove the panic and write your code
	//panic("waitSemaphore() is not implemented yet...!!");

	struct Env* myenv = curenv; //The calling environment
f010e85a:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f010e85f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// Steps:
	//	1) Get the Semaphore
	int res =get_semaphore_object_ID(ownerEnvID,semaphoreName);
f010e862:	83 ec 08             	sub    $0x8,%esp
f010e865:	ff 75 0c             	pushl  0xc(%ebp)
f010e868:	ff 75 08             	pushl  0x8(%ebp)
f010e86b:	e8 8f fd ff ff       	call   f010e5ff <get_semaphore_object_ID>
f010e870:	83 c4 10             	add    $0x10,%esp
f010e873:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//	2) Decrement its value
	semaphores[res].value--;
f010e876:	8b 0d 08 27 86 f0    	mov    0xf0862708,%ecx
f010e87c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e87f:	89 d0                	mov    %edx,%eax
f010e881:	c1 e0 02             	shl    $0x2,%eax
f010e884:	01 d0                	add    %edx,%eax
f010e886:	01 c0                	add    %eax,%eax
f010e888:	01 d0                	add    %edx,%eax
f010e88a:	01 c0                	add    %eax,%eax
f010e88c:	01 d0                	add    %edx,%eax
f010e88e:	c1 e0 02             	shl    $0x2,%eax
f010e891:	01 c8                	add    %ecx,%eax
f010e893:	8b 50 54             	mov    0x54(%eax),%edx
f010e896:	4a                   	dec    %edx
f010e897:	89 50 54             	mov    %edx,0x54(%eax)
	//	3) If negative, block the calling environment "myenv", by
	if(semaphores[res].value <0){
f010e89a:	8b 0d 08 27 86 f0    	mov    0xf0862708,%ecx
f010e8a0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e8a3:	89 d0                	mov    %edx,%eax
f010e8a5:	c1 e0 02             	shl    $0x2,%eax
f010e8a8:	01 d0                	add    %edx,%eax
f010e8aa:	01 c0                	add    %eax,%eax
f010e8ac:	01 d0                	add    %edx,%eax
f010e8ae:	01 c0                	add    %eax,%eax
f010e8b0:	01 d0                	add    %edx,%eax
f010e8b2:	c1 e0 02             	shl    $0x2,%eax
f010e8b5:	01 c8                	add    %ecx,%eax
f010e8b7:	8b 40 54             	mov    0x54(%eax),%eax
f010e8ba:	85 c0                	test   %eax,%eax
f010e8bc:	79 43                	jns    f010e901 <waitSemaphore+0xad>
		enqueue(&semaphores[res].env_queue,myenv);
f010e8be:	8b 0d 08 27 86 f0    	mov    0xf0862708,%ecx
f010e8c4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e8c7:	89 d0                	mov    %edx,%eax
f010e8c9:	c1 e0 02             	shl    $0x2,%eax
f010e8cc:	01 d0                	add    %edx,%eax
f010e8ce:	01 c0                	add    %eax,%eax
f010e8d0:	01 d0                	add    %edx,%eax
f010e8d2:	01 c0                	add    %eax,%eax
f010e8d4:	01 d0                	add    %edx,%eax
f010e8d6:	c1 e0 02             	shl    $0x2,%eax
f010e8d9:	01 c8                	add    %ecx,%eax
f010e8db:	83 c0 44             	add    $0x44,%eax
f010e8de:	83 ec 08             	sub    $0x8,%esp
f010e8e1:	ff 75 f4             	pushl  -0xc(%ebp)
f010e8e4:	50                   	push   %eax
f010e8e5:	e8 91 5b ff ff       	call   f010447b <enqueue>
f010e8ea:	83 c4 10             	add    $0x10,%esp
		myenv->env_status=ENV_BLOCKED;
f010e8ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e8f0:	c7 40 54 03 00 00 00 	movl   $0x3,0x54(%eax)
		curenv=NULL;
f010e8f7:	c7 05 f4 1d 86 f0 00 	movl   $0x0,0xf0861df4
f010e8fe:	00 00 00 
	}
	fos_scheduler();
f010e901:	e8 fe 5d ff ff       	call   f0104704 <fos_scheduler>

f010e906 <signalSemaphore>:

//==============
// [3] Signal():
//==============
void signalSemaphore(int ownerEnvID, char* semaphoreName)
{
f010e906:	55                   	push   %ebp
f010e907:	89 e5                	mov    %esp,%ebp
f010e909:	83 ec 28             	sub    $0x28,%esp
	// your code is here, remove the panic and write your code
	//panic("signalSemaphore() is not implemented yet...!!");
	struct Env* myenv ;
	// Steps:
	//	1) Get the Semaphore
	int res =get_semaphore_object_ID(ownerEnvID,semaphoreName);
f010e90c:	83 ec 08             	sub    $0x8,%esp
f010e90f:	ff 75 0c             	pushl  0xc(%ebp)
f010e912:	ff 75 08             	pushl  0x8(%ebp)
f010e915:	e8 e5 fc ff ff       	call   f010e5ff <get_semaphore_object_ID>
f010e91a:	83 c4 10             	add    $0x10,%esp
f010e91d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//	2) Increment its value
	semaphores[res].value++;
f010e920:	8b 0d 08 27 86 f0    	mov    0xf0862708,%ecx
f010e926:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e929:	89 d0                	mov    %edx,%eax
f010e92b:	c1 e0 02             	shl    $0x2,%eax
f010e92e:	01 d0                	add    %edx,%eax
f010e930:	01 c0                	add    %eax,%eax
f010e932:	01 d0                	add    %edx,%eax
f010e934:	01 c0                	add    %eax,%eax
f010e936:	01 d0                	add    %edx,%eax
f010e938:	c1 e0 02             	shl    $0x2,%eax
f010e93b:	01 c8                	add    %ecx,%eax
f010e93d:	8b 50 54             	mov    0x54(%eax),%edx
f010e940:	42                   	inc    %edx
f010e941:	89 50 54             	mov    %edx,0x54(%eax)
	//	3) If less than or equal 0, release a blocked environment, by
	if(	semaphores[res].value<=0){
f010e944:	8b 0d 08 27 86 f0    	mov    0xf0862708,%ecx
f010e94a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e94d:	89 d0                	mov    %edx,%eax
f010e94f:	c1 e0 02             	shl    $0x2,%eax
f010e952:	01 d0                	add    %edx,%eax
f010e954:	01 c0                	add    %eax,%eax
f010e956:	01 d0                	add    %edx,%eax
f010e958:	01 c0                	add    %eax,%eax
f010e95a:	01 d0                	add    %edx,%eax
f010e95c:	c1 e0 02             	shl    $0x2,%eax
f010e95f:	01 c8                	add    %ecx,%eax
f010e961:	8b 40 54             	mov    0x54(%eax),%eax
f010e964:	85 c0                	test   %eax,%eax
f010e966:	7f 47                	jg     f010e9af <signalSemaphore+0xa9>
		struct Env_Queue queue;
		myenv=dequeue(&	semaphores[res].env_queue);
f010e968:	8b 0d 08 27 86 f0    	mov    0xf0862708,%ecx
f010e96e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e971:	89 d0                	mov    %edx,%eax
f010e973:	c1 e0 02             	shl    $0x2,%eax
f010e976:	01 d0                	add    %edx,%eax
f010e978:	01 c0                	add    %eax,%eax
f010e97a:	01 d0                	add    %edx,%eax
f010e97c:	01 c0                	add    %eax,%eax
f010e97e:	01 d0                	add    %edx,%eax
f010e980:	c1 e0 02             	shl    $0x2,%eax
f010e983:	01 c8                	add    %ecx,%eax
f010e985:	83 c0 44             	add    $0x44,%eax
f010e988:	83 ec 0c             	sub    $0xc,%esp
f010e98b:	50                   	push   %eax
f010e98c:	e8 7b 5b ff ff       	call   f010450c <dequeue>
f010e991:	83 c4 10             	add    $0x10,%esp
f010e994:	89 45 f0             	mov    %eax,-0x10(%ebp)
		sched_insert_ready(myenv);
f010e997:	83 ec 0c             	sub    $0xc,%esp
f010e99a:	ff 75 f0             	pushl  -0x10(%ebp)
f010e99d:	e8 88 5f ff ff       	call   f010492a <sched_insert_ready>
f010e9a2:	83 c4 10             	add    $0x10,%esp
		myenv->env_status=ENV_READY;
f010e9a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e9a8:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)

	}
	//		a) removing it from semaphore queue	[refer to helper functions in doc]
	//		b) adding it to ready queue			[refer to helper functions in doc]
	//		c) changing its status to ENV_READY
}
f010e9af:	90                   	nop
f010e9b0:	c9                   	leave  
f010e9b1:	c3                   	ret    

f010e9b2 <test_initialize_MemBlocksList>:

#define Mega  (1024*1024)
#define kilo (1024)

void test_initialize_MemBlocksList()
{
f010e9b2:	55                   	push   %ebp
f010e9b3:	89 e5                	mov    %esp,%ebp
f010e9b5:	83 ec 18             	sub    $0x18,%esp
	uint32 numOfBlocks = 5;
f010e9b8:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010e9bf:	83 ec 0c             	sub    $0xc,%esp
f010e9c2:	ff 75 ec             	pushl  -0x14(%ebp)
f010e9c5:	e8 a8 37 02 00       	call   f0132172 <initialize_MemBlocksList>
f010e9ca:	83 c4 10             	add    $0x10,%esp
	//Check 1: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks)
f010e9cd:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f010e9d2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e9d5:	74 17                	je     f010e9ee <test_initialize_MemBlocksList+0x3c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AvailableMemBlocksList %d\n", LIST_SIZE(&(AvailableMemBlocksList)));
f010e9d7:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f010e9dc:	50                   	push   %eax
f010e9dd:	68 c0 7a 13 f0       	push   $0xf0137ac0
f010e9e2:	6a 1f                	push   $0x1f
f010e9e4:	68 14 7b 13 f0       	push   $0xf0137b14
f010e9e9:	e8 17 18 ff ff       	call   f0100205 <_panic>
		//assert(LIST_SIZE(&AvailableMemBlocksList) == numOfBlocks);
	}

	//Check 2: Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e9ee:	a1 d0 26 86 f0       	mov    0xf08626d0,%eax
f010e9f3:	85 c0                	test   %eax,%eax
f010e9f5:	74 17                	je     f010ea0e <test_initialize_MemBlocksList+0x5c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AllocMemBlocksList %d\n", LIST_SIZE(&(AllocMemBlocksList)));
f010e9f7:	a1 d0 26 86 f0       	mov    0xf08626d0,%eax
f010e9fc:	50                   	push   %eax
f010e9fd:	68 38 7b 13 f0       	push   $0xf0137b38
f010ea02:	6a 26                	push   $0x26
f010ea04:	68 14 7b 13 f0       	push   $0xf0137b14
f010ea09:	e8 f7 17 ff ff       	call   f0100205 <_panic>
	}

	//Check 3: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 0)
f010ea0e:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f010ea13:	85 c0                	test   %eax,%eax
f010ea15:	74 17                	je     f010ea2e <test_initialize_MemBlocksList+0x7c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the FreeMemBlocksList %d\n", LIST_SIZE(&(FreeMemBlocksList)));
f010ea17:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f010ea1c:	50                   	push   %eax
f010ea1d:	68 88 7b 13 f0       	push   $0xf0137b88
f010ea22:	6a 2c                	push   $0x2c
f010ea24:	68 14 7b 13 f0       	push   $0xf0137b14
f010ea29:	e8 d7 17 ff ff       	call   f0100205 <_panic>
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
f010ea2e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 size = 0;
f010ea35:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010ea3c:	a1 94 27 86 f0       	mov    0xf0862794,%eax
f010ea41:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010ea44:	eb 29                	jmp    f010ea6f <test_initialize_MemBlocksList+0xbd>
	{
		size++;
f010ea46:	ff 45 f0             	incl   -0x10(%ebp)
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f010ea49:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ea4c:	8b 50 0c             	mov    0xc(%eax),%edx
f010ea4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ea52:	8b 40 08             	mov    0x8(%eax),%eax
f010ea55:	83 ec 04             	sub    $0x4,%esp
f010ea58:	52                   	push   %edx
f010ea59:	50                   	push   %eax
f010ea5a:	68 d8 7b 13 f0       	push   $0xf0137bd8
f010ea5f:	e8 aa 22 ff ff       	call   f0100d0e <cprintf>
f010ea64:	83 c4 10             	add    $0x10,%esp
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
	uint32 size = 0;
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010ea67:	a1 9c 27 86 f0       	mov    0xf086279c,%eax
f010ea6c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010ea6f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ea73:	74 07                	je     f010ea7c <test_initialize_MemBlocksList+0xca>
f010ea75:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ea78:	8b 00                	mov    (%eax),%eax
f010ea7a:	eb 05                	jmp    f010ea81 <test_initialize_MemBlocksList+0xcf>
f010ea7c:	b8 00 00 00 00       	mov    $0x0,%eax
f010ea81:	a3 9c 27 86 f0       	mov    %eax,0xf086279c
f010ea86:	a1 9c 27 86 f0       	mov    0xf086279c,%eax
f010ea8b:	85 c0                	test   %eax,%eax
f010ea8d:	75 b7                	jne    f010ea46 <test_initialize_MemBlocksList+0x94>
f010ea8f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ea93:	75 b1                	jne    f010ea46 <test_initialize_MemBlocksList+0x94>
	{
		size++;
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
	if(LIST_SIZE(&(AvailableMemBlocksList)) != size)
f010ea95:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f010ea9a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ea9d:	74 14                	je     f010eab3 <test_initialize_MemBlocksList+0x101>
		panic("initialize_MemBlocksList: Some nodes are not created in the initialize_MemBlocksList\n");
f010ea9f:	83 ec 04             	sub    $0x4,%esp
f010eaa2:	68 f8 7b 13 f0       	push   $0xf0137bf8
f010eaa7:	6a 38                	push   $0x38
f010eaa9:	68 14 7b 13 f0       	push   $0xf0137b14
f010eaae:	e8 52 17 ff ff       	call   f0100205 <_panic>
	else
		cprintf("Congratulations!! test initialize_MemBlocksList completed successfully.\n");
f010eab3:	83 ec 0c             	sub    $0xc,%esp
f010eab6:	68 50 7c 13 f0       	push   $0xf0137c50
f010eabb:	e8 4e 22 ff ff       	call   f0100d0e <cprintf>
f010eac0:	83 c4 10             	add    $0x10,%esp
}
f010eac3:	90                   	nop
f010eac4:	c9                   	leave  
f010eac5:	c3                   	ret    

f010eac6 <test_insert_sorted_allocList>:

void test_insert_sorted_allocList()
{
f010eac6:	55                   	push   %ebp
f010eac7:	89 e5                	mov    %esp,%ebp
f010eac9:	57                   	push   %edi
f010eaca:	81 ec 94 00 00 00    	sub    $0x94,%esp
	uint32 numOfBlocks = 5;
f010ead0:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010ead7:	83 ec 0c             	sub    $0xc,%esp
f010eada:	ff 75 f4             	pushl  -0xc(%ebp)
f010eadd:	e8 90 36 02 00       	call   f0132172 <initialize_MemBlocksList>
f010eae2:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010eae5:	c7 05 c4 26 86 f0 00 	movl   $0x0,0xf08626c4
f010eaec:	00 00 00 
f010eaef:	c7 05 c8 26 86 f0 00 	movl   $0x0,0xf08626c8
f010eaf6:	00 00 00 
f010eaf9:	c7 05 d0 26 86 f0 00 	movl   $0x0,0xf08626d0
f010eb00:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f010eb03:	c7 05 60 27 86 f0 00 	movl   $0x0,0xf0862760
f010eb0a:	00 00 00 
f010eb0d:	c7 05 64 27 86 f0 00 	movl   $0x0,0xf0862764
f010eb14:	00 00 00 
f010eb17:	c7 05 6c 27 86 f0 00 	movl   $0x0,0xf086276c
f010eb1e:	00 00 00 

	uint32 blocksToInsertSVAs[5]={0,0,0,0,0};
f010eb21:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010eb24:	b9 05 00 00 00       	mov    $0x5,%ecx
f010eb29:	b8 00 00 00 00       	mov    $0x0,%eax
f010eb2e:	89 d7                	mov    %edx,%edi
f010eb30:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[5]={0,0,0,0,0};
f010eb32:	8d 55 c4             	lea    -0x3c(%ebp),%edx
f010eb35:	b9 05 00 00 00       	mov    $0x5,%ecx
f010eb3a:	b8 00 00 00 00       	mov    $0x0,%eax
f010eb3f:	89 d7                	mov    %edx,%edi
f010eb41:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f010eb43:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	uint32 actualSize = 0;
f010eb4a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)


	/*INSERT Scenario 1: Insert BLOCK_1 in the empty AllocMemBlocksList*/
	//BLOCK_1 sva = 8K
	blocksToInsertSVAs[1] = 0x0 + (8*kilo);
f010eb51:	c7 45 dc 00 20 00 00 	movl   $0x2000,-0x24(%ebp)
	blocksToInsertSizes[1] = (4*kilo);
f010eb58:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[1];
f010eb5f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010eb62:	89 45 b8             	mov    %eax,-0x48(%ebp)
	blockToInsert1.size = blocksToInsertSizes[1];
f010eb65:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010eb68:	89 45 bc             	mov    %eax,-0x44(%ebp)

	insert_sorted_allocList(&blockToInsert1);
f010eb6b:	83 ec 0c             	sub    $0xc,%esp
f010eb6e:	8d 45 b0             	lea    -0x50(%ebp),%eax
f010eb71:	50                   	push   %eax
f010eb72:	e8 0b 37 02 00       	call   f0132282 <insert_sorted_allocList>
f010eb77:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 1;
f010eb7a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010eb81:	a1 d0 26 86 f0       	mov    0xf08626d0,%eax
f010eb86:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010eb89:	74 14                	je     f010eb9f <test_insert_sorted_allocList+0xd9>
f010eb8b:	83 ec 04             	sub    $0x4,%esp
f010eb8e:	68 9c 7c 13 f0       	push   $0xf0137c9c
f010eb93:	6a 56                	push   $0x56
f010eb95:	68 14 7b 13 f0       	push   $0xf0137b14
f010eb9a:	e8 66 16 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010eb9f:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f010eba4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010eba7:	74 14                	je     f010ebbd <test_insert_sorted_allocList+0xf7>
f010eba9:	83 ec 04             	sub    $0x4,%esp
f010ebac:	68 e8 7c 13 f0       	push   $0xf0137ce8
f010ebb1:	6a 59                	push   $0x59
f010ebb3:	68 14 7b 13 f0       	push   $0xf0137b14
f010ebb8:	e8 48 16 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	int chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010ebbd:	83 ec 0c             	sub    $0xc,%esp
f010ebc0:	ff 75 f0             	pushl  -0x10(%ebp)
f010ebc3:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010ebc6:	50                   	push   %eax
f010ebc7:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010ebca:	50                   	push   %eax
f010ebcb:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010ebce:	50                   	push   %eax
f010ebcf:	68 c4 26 86 f0       	push   $0xf08626c4
f010ebd4:	e8 7d 26 00 00       	call   f0111256 <check_list_data>
f010ebd9:	83 c4 20             	add    $0x20,%esp
f010ebdc:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010ebdf:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010ebe3:	74 14                	je     f010ebf9 <test_insert_sorted_allocList+0x133>
f010ebe5:	83 ec 04             	sub    $0x4,%esp
f010ebe8:	68 38 7d 13 f0       	push   $0xf0137d38
f010ebed:	6a 5d                	push   $0x5d
f010ebef:	68 14 7b 13 f0       	push   $0xf0137b14
f010ebf4:	e8 0c 16 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010ebf9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ebfc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ebff:	74 14                	je     f010ec15 <test_insert_sorted_allocList+0x14f>
f010ec01:	83 ec 04             	sub    $0x4,%esp
f010ec04:	68 88 7d 13 f0       	push   $0xf0137d88
f010ec09:	6a 5e                	push   $0x5e
f010ec0b:	68 14 7b 13 f0       	push   $0xf0137b14
f010ec10:	e8 f0 15 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT Scenario 2: Insert BLOCK_2 in the AllocMemBlocksList with sva greater than BLOCK_1*/
	//BLOCK_2 sva = 28K
	blocksToInsertSVAs[4] = (28*kilo);
f010ec15:	c7 45 e8 00 70 00 00 	movl   $0x7000,-0x18(%ebp)
	blocksToInsertSizes[4] = (2*kilo);
f010ec1c:	c7 45 d4 00 08 00 00 	movl   $0x800,-0x2c(%ebp)
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[4];
f010ec23:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ec26:	89 45 a8             	mov    %eax,-0x58(%ebp)
	blockToInsert2.size = blocksToInsertSizes[4];
f010ec29:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010ec2c:	89 45 ac             	mov    %eax,-0x54(%ebp)

	insert_sorted_allocList(&blockToInsert2);
f010ec2f:	83 ec 0c             	sub    $0xc,%esp
f010ec32:	8d 45 a0             	lea    -0x60(%ebp),%eax
f010ec35:	50                   	push   %eax
f010ec36:	e8 47 36 02 00       	call   f0132282 <insert_sorted_allocList>
f010ec3b:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 2;
f010ec3e:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010ec45:	a1 d0 26 86 f0       	mov    0xf08626d0,%eax
f010ec4a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ec4d:	74 14                	je     f010ec63 <test_insert_sorted_allocList+0x19d>
f010ec4f:	83 ec 04             	sub    $0x4,%esp
f010ec52:	68 9c 7c 13 f0       	push   $0xf0137c9c
f010ec57:	6a 6d                	push   $0x6d
f010ec59:	68 14 7b 13 f0       	push   $0xf0137b14
f010ec5e:	e8 a2 15 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010ec63:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f010ec68:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ec6b:	74 14                	je     f010ec81 <test_insert_sorted_allocList+0x1bb>
f010ec6d:	83 ec 04             	sub    $0x4,%esp
f010ec70:	68 e8 7c 13 f0       	push   $0xf0137ce8
f010ec75:	6a 70                	push   $0x70
f010ec77:	68 14 7b 13 f0       	push   $0xf0137b14
f010ec7c:	e8 84 15 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010ec81:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010ec88:	83 ec 0c             	sub    $0xc,%esp
f010ec8b:	ff 75 f0             	pushl  -0x10(%ebp)
f010ec8e:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010ec91:	50                   	push   %eax
f010ec92:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010ec95:	50                   	push   %eax
f010ec96:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010ec99:	50                   	push   %eax
f010ec9a:	68 c4 26 86 f0       	push   $0xf08626c4
f010ec9f:	e8 b2 25 00 00       	call   f0111256 <check_list_data>
f010eca4:	83 c4 20             	add    $0x20,%esp
f010eca7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010ecaa:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010ecae:	74 14                	je     f010ecc4 <test_insert_sorted_allocList+0x1fe>
f010ecb0:	83 ec 04             	sub    $0x4,%esp
f010ecb3:	68 38 7d 13 f0       	push   $0xf0137d38
f010ecb8:	6a 75                	push   $0x75
f010ecba:	68 14 7b 13 f0       	push   $0xf0137b14
f010ecbf:	e8 41 15 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010ecc4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ecc7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ecca:	74 14                	je     f010ece0 <test_insert_sorted_allocList+0x21a>
f010eccc:	83 ec 04             	sub    $0x4,%esp
f010eccf:	68 88 7d 13 f0       	push   $0xf0137d88
f010ecd4:	6a 76                	push   $0x76
f010ecd6:	68 14 7b 13 f0       	push   $0xf0137b14
f010ecdb:	e8 25 15 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT Scenario 3: Insert BLOCK_3 in the AllocMemBlocksList with sva smaller than BLOCK_2*/
	//BLOCK_3 sva = 16K
	blocksToInsertSVAs[2] = (16*kilo);
f010ece0:	c7 45 e0 00 40 00 00 	movl   $0x4000,-0x20(%ebp)
	blocksToInsertSizes[2] = (8*kilo);
f010ece7:	c7 45 cc 00 20 00 00 	movl   $0x2000,-0x34(%ebp)
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[2];
f010ecee:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ecf1:	89 45 98             	mov    %eax,-0x68(%ebp)
	blockToInsert3.size = blocksToInsertSizes[2];
f010ecf4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ecf7:	89 45 9c             	mov    %eax,-0x64(%ebp)

	insert_sorted_allocList(&blockToInsert3);
f010ecfa:	83 ec 0c             	sub    $0xc,%esp
f010ecfd:	8d 45 90             	lea    -0x70(%ebp),%eax
f010ed00:	50                   	push   %eax
f010ed01:	e8 7c 35 02 00       	call   f0132282 <insert_sorted_allocList>
f010ed06:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 3;
f010ed09:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010ed10:	a1 d0 26 86 f0       	mov    0xf08626d0,%eax
f010ed15:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ed18:	74 17                	je     f010ed31 <test_insert_sorted_allocList+0x26b>
f010ed1a:	83 ec 04             	sub    $0x4,%esp
f010ed1d:	68 9c 7c 13 f0       	push   $0xf0137c9c
f010ed22:	68 85 00 00 00       	push   $0x85
f010ed27:	68 14 7b 13 f0       	push   $0xf0137b14
f010ed2c:	e8 d4 14 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList\n");
f010ed31:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f010ed36:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ed39:	74 17                	je     f010ed52 <test_insert_sorted_allocList+0x28c>
f010ed3b:	83 ec 04             	sub    $0x4,%esp
f010ed3e:	68 d4 7d 13 f0       	push   $0xf0137dd4
f010ed43:	68 88 00 00 00       	push   $0x88
f010ed48:	68 14 7b 13 f0       	push   $0xf0137b14
f010ed4d:	e8 b3 14 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010ed52:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010ed59:	83 ec 0c             	sub    $0xc,%esp
f010ed5c:	ff 75 f0             	pushl  -0x10(%ebp)
f010ed5f:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010ed62:	50                   	push   %eax
f010ed63:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010ed66:	50                   	push   %eax
f010ed67:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010ed6a:	50                   	push   %eax
f010ed6b:	68 c4 26 86 f0       	push   $0xf08626c4
f010ed70:	e8 e1 24 00 00       	call   f0111256 <check_list_data>
f010ed75:	83 c4 20             	add    $0x20,%esp
f010ed78:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010ed7b:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010ed7f:	74 17                	je     f010ed98 <test_insert_sorted_allocList+0x2d2>
f010ed81:	83 ec 04             	sub    $0x4,%esp
f010ed84:	68 38 7d 13 f0       	push   $0xf0137d38
f010ed89:	68 8d 00 00 00       	push   $0x8d
f010ed8e:	68 14 7b 13 f0       	push   $0xf0137b14
f010ed93:	e8 6d 14 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010ed98:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ed9b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ed9e:	74 17                	je     f010edb7 <test_insert_sorted_allocList+0x2f1>
f010eda0:	83 ec 04             	sub    $0x4,%esp
f010eda3:	68 88 7d 13 f0       	push   $0xf0137d88
f010eda8:	68 8e 00 00 00       	push   $0x8e
f010edad:	68 14 7b 13 f0       	push   $0xf0137b14
f010edb2:	e8 4e 14 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//INSERT Scenario 4: Insert BLOCK_4 in the AllocMemBlocksList with sva smaller than ALL (SHALL BE INSERTED AS HEAD)
	//BLOCK_4 sva = 0x0
	blocksToInsertSVAs[0] = (0x0);
f010edb7:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	blocksToInsertSizes[0] = (8*kilo);
f010edbe:	c7 45 c4 00 20 00 00 	movl   $0x2000,-0x3c(%ebp)
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[0];
f010edc5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010edc8:	89 45 88             	mov    %eax,-0x78(%ebp)
	blockToInsert4.size = blocksToInsertSizes[0];
f010edcb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010edce:	89 45 8c             	mov    %eax,-0x74(%ebp)
	insert_sorted_allocList(&blockToInsert4);
f010edd1:	83 ec 0c             	sub    $0xc,%esp
f010edd4:	8d 45 80             	lea    -0x80(%ebp),%eax
f010edd7:	50                   	push   %eax
f010edd8:	e8 a5 34 02 00       	call   f0132282 <insert_sorted_allocList>
f010eddd:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 4;
f010ede0:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010ede7:	a1 d0 26 86 f0       	mov    0xf08626d0,%eax
f010edec:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010edef:	74 17                	je     f010ee08 <test_insert_sorted_allocList+0x342>
f010edf1:	83 ec 04             	sub    $0x4,%esp
f010edf4:	68 9c 7c 13 f0       	push   $0xf0137c9c
f010edf9:	68 9c 00 00 00       	push   $0x9c
f010edfe:	68 14 7b 13 f0       	push   $0xf0137b14
f010ee03:	e8 fd 13 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010ee08:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f010ee0d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ee10:	74 17                	je     f010ee29 <test_insert_sorted_allocList+0x363>
f010ee12:	83 ec 04             	sub    $0x4,%esp
f010ee15:	68 e8 7c 13 f0       	push   $0xf0137ce8
f010ee1a:	68 9f 00 00 00       	push   $0x9f
f010ee1f:	68 14 7b 13 f0       	push   $0xf0137b14
f010ee24:	e8 dc 13 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010ee29:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010ee30:	83 ec 0c             	sub    $0xc,%esp
f010ee33:	ff 75 f0             	pushl  -0x10(%ebp)
f010ee36:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010ee39:	50                   	push   %eax
f010ee3a:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010ee3d:	50                   	push   %eax
f010ee3e:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010ee41:	50                   	push   %eax
f010ee42:	68 c4 26 86 f0       	push   $0xf08626c4
f010ee47:	e8 0a 24 00 00       	call   f0111256 <check_list_data>
f010ee4c:	83 c4 20             	add    $0x20,%esp
f010ee4f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010ee52:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010ee56:	74 17                	je     f010ee6f <test_insert_sorted_allocList+0x3a9>
f010ee58:	83 ec 04             	sub    $0x4,%esp
f010ee5b:	68 38 7d 13 f0       	push   $0xf0137d38
f010ee60:	68 a4 00 00 00       	push   $0xa4
f010ee65:	68 14 7b 13 f0       	push   $0xf0137b14
f010ee6a:	e8 96 13 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010ee6f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ee72:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ee75:	74 17                	je     f010ee8e <test_insert_sorted_allocList+0x3c8>
f010ee77:	83 ec 04             	sub    $0x4,%esp
f010ee7a:	68 88 7d 13 f0       	push   $0xf0137d88
f010ee7f:	68 a5 00 00 00       	push   $0xa5
f010ee84:	68 14 7b 13 f0       	push   $0xf0137b14
f010ee89:	e8 77 13 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//INSERT Scenario 5: Insert BLOCK_5 in the AllocMemBlocksList with sva not greater than the first block only
	//BLOCK_5 sva = 24K
	blocksToInsertSVAs[3] = 24*kilo;
f010ee8e:	c7 45 e4 00 60 00 00 	movl   $0x6000,-0x1c(%ebp)
	blocksToInsertSizes[3] = (4*kilo);
f010ee95:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[3];
f010ee9c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ee9f:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
	blockToInsert5.size = blocksToInsertSizes[3];
f010eea5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010eea8:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	insert_sorted_allocList(&blockToInsert5);
f010eeae:	83 ec 0c             	sub    $0xc,%esp
f010eeb1:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
f010eeb7:	50                   	push   %eax
f010eeb8:	e8 c5 33 02 00       	call   f0132282 <insert_sorted_allocList>
f010eebd:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 5;
f010eec0:	c7 45 f0 05 00 00 00 	movl   $0x5,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010eec7:	a1 d0 26 86 f0       	mov    0xf08626d0,%eax
f010eecc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010eecf:	74 17                	je     f010eee8 <test_insert_sorted_allocList+0x422>
f010eed1:	83 ec 04             	sub    $0x4,%esp
f010eed4:	68 9c 7c 13 f0       	push   $0xf0137c9c
f010eed9:	68 b3 00 00 00       	push   $0xb3
f010eede:	68 14 7b 13 f0       	push   $0xf0137b14
f010eee3:	e8 1d 13 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010eee8:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f010eeed:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010eef0:	74 17                	je     f010ef09 <test_insert_sorted_allocList+0x443>
f010eef2:	83 ec 04             	sub    $0x4,%esp
f010eef5:	68 e8 7c 13 f0       	push   $0xf0137ce8
f010eefa:	68 b6 00 00 00       	push   $0xb6
f010eeff:	68 14 7b 13 f0       	push   $0xf0137b14
f010ef04:	e8 fc 12 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010ef09:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010ef10:	83 ec 0c             	sub    $0xc,%esp
f010ef13:	ff 75 f0             	pushl  -0x10(%ebp)
f010ef16:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010ef19:	50                   	push   %eax
f010ef1a:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010ef1d:	50                   	push   %eax
f010ef1e:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010ef21:	50                   	push   %eax
f010ef22:	68 c4 26 86 f0       	push   $0xf08626c4
f010ef27:	e8 2a 23 00 00       	call   f0111256 <check_list_data>
f010ef2c:	83 c4 20             	add    $0x20,%esp
f010ef2f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010ef32:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010ef36:	74 17                	je     f010ef4f <test_insert_sorted_allocList+0x489>
f010ef38:	83 ec 04             	sub    $0x4,%esp
f010ef3b:	68 38 7d 13 f0       	push   $0xf0137d38
f010ef40:	68 bb 00 00 00       	push   $0xbb
f010ef45:	68 14 7b 13 f0       	push   $0xf0137b14
f010ef4a:	e8 b6 12 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010ef4f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ef52:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ef55:	74 17                	je     f010ef6e <test_insert_sorted_allocList+0x4a8>
f010ef57:	83 ec 04             	sub    $0x4,%esp
f010ef5a:	68 88 7d 13 f0       	push   $0xf0137d88
f010ef5f:	68 bc 00 00 00       	push   $0xbc
f010ef64:	68 14 7b 13 f0       	push   $0xf0137b14
f010ef69:	e8 97 12 ff ff       	call   f0100205 <_panic>
	//====================================================================//
	//====================================================================//
	//show_list_content(&AllocMemBlocksList);

	cprintf("Congratulations!! test insert_sorted completed successfully.\n");
f010ef6e:	83 ec 0c             	sub    $0xc,%esp
f010ef71:	68 24 7e 13 f0       	push   $0xf0137e24
f010ef76:	e8 93 1d ff ff       	call   f0100d0e <cprintf>
f010ef7b:	83 c4 10             	add    $0x10,%esp
}
f010ef7e:	90                   	nop
f010ef7f:	8b 7d fc             	mov    -0x4(%ebp),%edi
f010ef82:	c9                   	leave  
f010ef83:	c3                   	ret    

f010ef84 <test_find_block>:

void test_find_block()
{
f010ef84:	55                   	push   %ebp
f010ef85:	89 e5                	mov    %esp,%ebp
f010ef87:	57                   	push   %edi
f010ef88:	56                   	push   %esi
f010ef89:	53                   	push   %ebx
f010ef8a:	81 ec ac 00 00 00    	sub    $0xac,%esp
	uint32 numOfBlocks = 6;
f010ef90:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010ef97:	83 ec 0c             	sub    $0xc,%esp
f010ef9a:	ff 75 e0             	pushl  -0x20(%ebp)
f010ef9d:	e8 d0 31 02 00       	call   f0132172 <initialize_MemBlocksList>
f010efa2:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&FreeMemBlocksList);
f010efa5:	c7 05 60 27 86 f0 00 	movl   $0x0,0xf0862760
f010efac:	00 00 00 
f010efaf:	c7 05 64 27 86 f0 00 	movl   $0x0,0xf0862764
f010efb6:	00 00 00 
f010efb9:	c7 05 6c 27 86 f0 00 	movl   $0x0,0xf086276c
f010efc0:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfAllocBlocks  6
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
f010efc3:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010efc6:	bb 9c 7f 13 f0       	mov    $0xf0137f9c,%ebx
f010efcb:	ba 06 00 00 00       	mov    $0x6,%edx
f010efd0:	89 c7                	mov    %eax,%edi
f010efd2:	89 de                	mov    %ebx,%esi
f010efd4:	89 d1                	mov    %edx,%ecx
f010efd6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;
f010efd8:	8d 45 ac             	lea    -0x54(%ebp),%eax
f010efdb:	bb b4 7f 13 f0       	mov    $0xf0137fb4,%ebx
f010efe0:	ba 06 00 00 00       	mov    $0x6,%edx
f010efe5:	89 c7                	mov    %eax,%edi
f010efe7:	89 de                	mov    %ebx,%esi
f010efe9:	89 d1                	mov    %edx,%ecx
f010efeb:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&AllocMemBlocksList);
f010efed:	c7 05 c4 26 86 f0 00 	movl   $0x0,0xf08626c4
f010eff4:	00 00 00 
f010eff7:	c7 05 c8 26 86 f0 00 	movl   $0x0,0xf08626c8
f010effe:	00 00 00 
f010f001:	c7 05 d0 26 86 f0 00 	movl   $0x0,0xf08626d0
f010f008:	00 00 00 
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010f00b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010f012:	e9 5f 01 00 00       	jmp    f010f176 <test_find_block+0x1f2>
	{
		blockToInsert[i].sva = BlocksSVAs[i];
f010f017:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f01a:	8b 44 85 c4          	mov    -0x3c(%ebp,%eax,4),%eax
f010f01e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f021:	c1 e2 04             	shl    $0x4,%edx
f010f024:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f027:	01 da                	add    %ebx,%edx
f010f029:	81 ea 94 00 00 00    	sub    $0x94,%edx
f010f02f:	89 02                	mov    %eax,(%edx)
		blockToInsert[i].size = BlocksSizes[i];
f010f031:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f034:	8b 44 85 ac          	mov    -0x54(%ebp,%eax,4),%eax
f010f038:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f03b:	c1 e2 04             	shl    $0x4,%edx
f010f03e:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f041:	01 f2                	add    %esi,%edx
f010f043:	81 ea 90 00 00 00    	sub    $0x90,%edx
f010f049:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010f04b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010f04f:	0f 85 92 00 00 00    	jne    f010f0e7 <test_find_block+0x163>
			LIST_INSERT_HEAD(&AllocMemBlocksList, &(blockToInsert[i]));
f010f055:	a1 c4 26 86 f0       	mov    0xf08626c4,%eax
f010f05a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f05d:	c1 e2 04             	shl    $0x4,%edx
f010f060:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f063:	01 fa                	add    %edi,%edx
f010f065:	81 ea 9c 00 00 00    	sub    $0x9c,%edx
f010f06b:	89 02                	mov    %eax,(%edx)
f010f06d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f070:	c1 e0 04             	shl    $0x4,%eax
f010f073:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f076:	01 d8                	add    %ebx,%eax
f010f078:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010f07d:	8b 00                	mov    (%eax),%eax
f010f07f:	85 c0                	test   %eax,%eax
f010f081:	74 18                	je     f010f09b <test_find_block+0x117>
f010f083:	a1 c4 26 86 f0       	mov    0xf08626c4,%eax
f010f088:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010f08e:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f091:	c1 e1 04             	shl    $0x4,%ecx
f010f094:	01 ca                	add    %ecx,%edx
f010f096:	89 50 04             	mov    %edx,0x4(%eax)
f010f099:	eb 13                	jmp    f010f0ae <test_find_block+0x12a>
f010f09b:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010f0a1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f0a4:	c1 e2 04             	shl    $0x4,%edx
f010f0a7:	01 d0                	add    %edx,%eax
f010f0a9:	a3 c8 26 86 f0       	mov    %eax,0xf08626c8
f010f0ae:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010f0b4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f0b7:	c1 e2 04             	shl    $0x4,%edx
f010f0ba:	01 d0                	add    %edx,%eax
f010f0bc:	a3 c4 26 86 f0       	mov    %eax,0xf08626c4
f010f0c1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f0c4:	c1 e0 04             	shl    $0x4,%eax
f010f0c7:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f0ca:	01 f0                	add    %esi,%eax
f010f0cc:	2d 98 00 00 00       	sub    $0x98,%eax
f010f0d1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f0d7:	a1 d0 26 86 f0       	mov    0xf08626d0,%eax
f010f0dc:	40                   	inc    %eax
f010f0dd:	a3 d0 26 86 f0       	mov    %eax,0xf08626d0
f010f0e2:	e9 8c 00 00 00       	jmp    f010f173 <test_find_block+0x1ef>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
f010f0e7:	a1 c8 26 86 f0       	mov    0xf08626c8,%eax
f010f0ec:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f0ef:	c1 e2 04             	shl    $0x4,%edx
f010f0f2:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f0f5:	01 fa                	add    %edi,%edx
f010f0f7:	81 ea 98 00 00 00    	sub    $0x98,%edx
f010f0fd:	89 02                	mov    %eax,(%edx)
f010f0ff:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f102:	c1 e0 04             	shl    $0x4,%eax
f010f105:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f108:	01 d8                	add    %ebx,%eax
f010f10a:	2d 98 00 00 00       	sub    $0x98,%eax
f010f10f:	8b 00                	mov    (%eax),%eax
f010f111:	85 c0                	test   %eax,%eax
f010f113:	74 17                	je     f010f12c <test_find_block+0x1a8>
f010f115:	a1 c8 26 86 f0       	mov    0xf08626c8,%eax
f010f11a:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010f120:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f123:	c1 e1 04             	shl    $0x4,%ecx
f010f126:	01 ca                	add    %ecx,%edx
f010f128:	89 10                	mov    %edx,(%eax)
f010f12a:	eb 13                	jmp    f010f13f <test_find_block+0x1bb>
f010f12c:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010f132:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f135:	c1 e2 04             	shl    $0x4,%edx
f010f138:	01 d0                	add    %edx,%eax
f010f13a:	a3 c4 26 86 f0       	mov    %eax,0xf08626c4
f010f13f:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010f145:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f148:	c1 e2 04             	shl    $0x4,%edx
f010f14b:	01 d0                	add    %edx,%eax
f010f14d:	a3 c8 26 86 f0       	mov    %eax,0xf08626c8
f010f152:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f155:	c1 e0 04             	shl    $0x4,%eax
f010f158:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f15b:	01 f0                	add    %esi,%eax
f010f15d:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010f162:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f168:	a1 d0 26 86 f0       	mov    0xf08626d0,%eax
f010f16d:	40                   	inc    %eax
f010f16e:	a3 d0 26 86 f0       	mov    %eax,0xf08626d0
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;

	LIST_INIT(&AllocMemBlocksList);
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010f173:	ff 45 e4             	incl   -0x1c(%ebp)
f010f176:	83 7d e4 05          	cmpl   $0x5,-0x1c(%ebp)
f010f17a:	0f 8e 97 fe ff ff    	jle    f010f017 <test_find_block+0x93>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
	}

	/*FIND Scenario 1: Search for a block that doesn't exist (Block with SVA = 4KB)*/
	struct MemBlock * blockToFind = find_block(&AllocMemBlocksList, 0x1000);
f010f180:	83 ec 08             	sub    $0x8,%esp
f010f183:	68 00 10 00 00       	push   $0x1000
f010f188:	68 c4 26 86 f0       	push   $0xf08626c4
f010f18d:	e8 bd 30 02 00       	call   f013224f <find_block>
f010f192:	83 c4 10             	add    $0x10,%esp
f010f195:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind != NULL)
f010f198:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f19c:	74 17                	je     f010f1b5 <test_find_block+0x231>
		panic("find_block: WRONG SEARCH - The block you searched for doesn't exist, however find_block find it.");
f010f19e:	83 ec 04             	sub    $0x4,%esp
f010f1a1:	68 64 7e 13 f0       	push   $0xf0137e64
f010f1a6:	68 de 00 00 00       	push   $0xde
f010f1ab:	68 14 7b 13 f0       	push   $0xf0137b14
f010f1b0:	e8 50 10 ff ff       	call   f0100205 <_panic>

	/*FIND Scenario 2: Search for a block exist @ the beginning (Block with SVA = 0KB)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x0);
f010f1b5:	83 ec 08             	sub    $0x8,%esp
f010f1b8:	6a 00                	push   $0x0
f010f1ba:	68 c4 26 86 f0       	push   $0xf08626c4
f010f1bf:	e8 8b 30 02 00       	call   f013224f <find_block>
f010f1c4:	83 c4 10             	add    $0x10,%esp
f010f1c7:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 3*kilo || blockToFind->sva != 0x0)
f010f1ca:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f1ce:	74 17                	je     f010f1e7 <test_find_block+0x263>
f010f1d0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f1d3:	8b 40 0c             	mov    0xc(%eax),%eax
f010f1d6:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010f1db:	75 0a                	jne    f010f1e7 <test_find_block+0x263>
f010f1dd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f1e0:	8b 40 08             	mov    0x8(%eax),%eax
f010f1e3:	85 c0                	test   %eax,%eax
f010f1e5:	74 17                	je     f010f1fe <test_find_block+0x27a>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010f1e7:	83 ec 04             	sub    $0x4,%esp
f010f1ea:	68 c8 7e 13 f0       	push   $0xf0137ec8
f010f1ef:	68 e3 00 00 00       	push   $0xe3
f010f1f4:	68 14 7b 13 f0       	push   $0xf0137b14
f010f1f9:	e8 07 10 ff ff       	call   f0100205 <_panic>

	/*FIND Scenario 3: Search for a block exist @ the mid (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x7000);
f010f1fe:	83 ec 08             	sub    $0x8,%esp
f010f201:	68 00 70 00 00       	push   $0x7000
f010f206:	68 c4 26 86 f0       	push   $0xf08626c4
f010f20b:	e8 3f 30 02 00       	call   f013224f <find_block>
f010f210:	83 c4 10             	add    $0x10,%esp
f010f213:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 9*kilo || blockToFind->sva != 0x7000)
f010f216:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f21a:	74 1a                	je     f010f236 <test_find_block+0x2b2>
f010f21c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f21f:	8b 40 0c             	mov    0xc(%eax),%eax
f010f222:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010f227:	75 0d                	jne    f010f236 <test_find_block+0x2b2>
f010f229:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f22c:	8b 40 08             	mov    0x8(%eax),%eax
f010f22f:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010f234:	74 17                	je     f010f24d <test_find_block+0x2c9>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010f236:	83 ec 04             	sub    $0x4,%esp
f010f239:	68 c8 7e 13 f0       	push   $0xf0137ec8
f010f23e:	68 e8 00 00 00       	push   $0xe8
f010f243:	68 14 7b 13 f0       	push   $0xf0137b14
f010f248:	e8 b8 0f ff ff       	call   f0100205 <_panic>

	/*FIND Scenario 4: Search for a block exist @ the end (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x1A400);
f010f24d:	83 ec 08             	sub    $0x8,%esp
f010f250:	68 00 a4 01 00       	push   $0x1a400
f010f255:	68 c4 26 86 f0       	push   $0xf08626c4
f010f25a:	e8 f0 2f 02 00       	call   f013224f <find_block>
f010f25f:	83 c4 10             	add    $0x10,%esp
f010f262:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 2*Mega || blockToFind->sva != 0x1A400)
f010f265:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f269:	74 1a                	je     f010f285 <test_find_block+0x301>
f010f26b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f26e:	8b 40 0c             	mov    0xc(%eax),%eax
f010f271:	3d 00 00 20 00       	cmp    $0x200000,%eax
f010f276:	75 0d                	jne    f010f285 <test_find_block+0x301>
f010f278:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f27b:	8b 40 08             	mov    0x8(%eax),%eax
f010f27e:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010f283:	74 17                	je     f010f29c <test_find_block+0x318>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010f285:	83 ec 04             	sub    $0x4,%esp
f010f288:	68 c8 7e 13 f0       	push   $0xf0137ec8
f010f28d:	68 ed 00 00 00       	push   $0xed
f010f292:	68 14 7b 13 f0       	push   $0xf0137b14
f010f297:	e8 69 0f ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList & FreeMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 0 )
f010f29c:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f010f2a1:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f2a4:	75 09                	jne    f010f2af <test_find_block+0x32b>
f010f2a6:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f010f2ab:	85 c0                	test   %eax,%eax
f010f2ad:	74 17                	je     f010f2c6 <test_find_block+0x342>
	{
		panic("find_block: AvailableMemBlocksList and FreeMemBlocksList are affected and this shall not occurred.");
f010f2af:	83 ec 04             	sub    $0x4,%esp
f010f2b2:	68 fc 7e 13 f0       	push   $0xf0137efc
f010f2b7:	68 f2 00 00 00       	push   $0xf2
f010f2bc:	68 14 7b 13 f0       	push   $0xf0137b14
f010f2c1:	e8 3f 0f ff ff       	call   f0100205 <_panic>
	}

	//show_list_content(&AllocMemBlocksList);
	cprintf("Congratulations!! test find_block completed successfully.\n");
f010f2c6:	83 ec 0c             	sub    $0xc,%esp
f010f2c9:	68 60 7f 13 f0       	push   $0xf0137f60
f010f2ce:	e8 3b 1a ff ff       	call   f0100d0e <cprintf>
f010f2d3:	83 c4 10             	add    $0x10,%esp
}
f010f2d6:	90                   	nop
f010f2d7:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010f2da:	5b                   	pop    %ebx
f010f2db:	5e                   	pop    %esi
f010f2dc:	5f                   	pop    %edi
f010f2dd:	5d                   	pop    %ebp
f010f2de:	c3                   	ret    

f010f2df <test_alloc_block_FF>:

void test_alloc_block_FF()
{
f010f2df:	55                   	push   %ebp
f010f2e0:	89 e5                	mov    %esp,%ebp
f010f2e2:	57                   	push   %edi
f010f2e3:	56                   	push   %esi
f010f2e4:	53                   	push   %ebx
f010f2e5:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010f2eb:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010f2f2:	83 ec 0c             	sub    $0xc,%esp
f010f2f5:	ff 75 e0             	pushl  -0x20(%ebp)
f010f2f8:	e8 75 2e 02 00       	call   f0132172 <initialize_MemBlocksList>
f010f2fd:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010f300:	c7 05 c4 26 86 f0 00 	movl   $0x0,0xf08626c4
f010f307:	00 00 00 
f010f30a:	c7 05 c8 26 86 f0 00 	movl   $0x0,0xf08626c8
f010f311:	00 00 00 
f010f314:	c7 05 d0 26 86 f0 00 	movl   $0x0,0xf08626d0
f010f31b:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_FF  8
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010f31e:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f321:	bb 40 82 13 f0       	mov    $0xf0138240,%ebx
f010f326:	ba 08 00 00 00       	mov    $0x8,%edx
f010f32b:	89 c7                	mov    %eax,%edi
f010f32d:	89 de                	mov    %ebx,%esi
f010f32f:	89 d1                	mov    %edx,%ecx
f010f331:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;
f010f333:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f336:	bb 60 82 13 f0       	mov    $0xf0138260,%ebx
f010f33b:	ba 08 00 00 00       	mov    $0x8,%edx
f010f340:	89 c7                	mov    %eax,%edi
f010f342:	89 de                	mov    %ebx,%esi
f010f344:	89 d1                	mov    %edx,%ecx
f010f346:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010f348:	c7 05 60 27 86 f0 00 	movl   $0x0,0xf0862760
f010f34f:	00 00 00 
f010f352:	c7 05 64 27 86 f0 00 	movl   $0x0,0xf0862764
f010f359:	00 00 00 
f010f35c:	c7 05 6c 27 86 f0 00 	movl   $0x0,0xf086276c
f010f363:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010f366:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010f36d:	e9 5f 01 00 00       	jmp    f010f4d1 <test_alloc_block_FF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010f372:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f375:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010f379:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f37c:	c1 e2 04             	shl    $0x4,%edx
f010f37f:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f382:	01 da                	add    %ebx,%edx
f010f384:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010f38a:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010f38c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f38f:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010f393:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f396:	c1 e2 04             	shl    $0x4,%edx
f010f399:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f39c:	01 f2                	add    %esi,%edx
f010f39e:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010f3a4:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010f3a6:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010f3aa:	0f 85 92 00 00 00    	jne    f010f442 <test_alloc_block_FF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010f3b0:	a1 60 27 86 f0       	mov    0xf0862760,%eax
f010f3b5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f3b8:	c1 e2 04             	shl    $0x4,%edx
f010f3bb:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f3be:	01 fa                	add    %edi,%edx
f010f3c0:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010f3c6:	89 02                	mov    %eax,(%edx)
f010f3c8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f3cb:	c1 e0 04             	shl    $0x4,%eax
f010f3ce:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f3d1:	01 d8                	add    %ebx,%eax
f010f3d3:	2d d4 00 00 00       	sub    $0xd4,%eax
f010f3d8:	8b 00                	mov    (%eax),%eax
f010f3da:	85 c0                	test   %eax,%eax
f010f3dc:	74 18                	je     f010f3f6 <test_alloc_block_FF+0x117>
f010f3de:	a1 60 27 86 f0       	mov    0xf0862760,%eax
f010f3e3:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010f3e9:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f3ec:	c1 e1 04             	shl    $0x4,%ecx
f010f3ef:	01 ca                	add    %ecx,%edx
f010f3f1:	89 50 04             	mov    %edx,0x4(%eax)
f010f3f4:	eb 13                	jmp    f010f409 <test_alloc_block_FF+0x12a>
f010f3f6:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f3fc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f3ff:	c1 e2 04             	shl    $0x4,%edx
f010f402:	01 d0                	add    %edx,%eax
f010f404:	a3 64 27 86 f0       	mov    %eax,0xf0862764
f010f409:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f40f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f412:	c1 e2 04             	shl    $0x4,%edx
f010f415:	01 d0                	add    %edx,%eax
f010f417:	a3 60 27 86 f0       	mov    %eax,0xf0862760
f010f41c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f41f:	c1 e0 04             	shl    $0x4,%eax
f010f422:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f425:	01 f0                	add    %esi,%eax
f010f427:	2d d0 00 00 00       	sub    $0xd0,%eax
f010f42c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f432:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f010f437:	40                   	inc    %eax
f010f438:	a3 6c 27 86 f0       	mov    %eax,0xf086276c
f010f43d:	e9 8c 00 00 00       	jmp    f010f4ce <test_alloc_block_FF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010f442:	a1 64 27 86 f0       	mov    0xf0862764,%eax
f010f447:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f44a:	c1 e2 04             	shl    $0x4,%edx
f010f44d:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f450:	01 fa                	add    %edi,%edx
f010f452:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010f458:	89 02                	mov    %eax,(%edx)
f010f45a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f45d:	c1 e0 04             	shl    $0x4,%eax
f010f460:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f463:	01 d8                	add    %ebx,%eax
f010f465:	2d d0 00 00 00       	sub    $0xd0,%eax
f010f46a:	8b 00                	mov    (%eax),%eax
f010f46c:	85 c0                	test   %eax,%eax
f010f46e:	74 17                	je     f010f487 <test_alloc_block_FF+0x1a8>
f010f470:	a1 64 27 86 f0       	mov    0xf0862764,%eax
f010f475:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010f47b:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f47e:	c1 e1 04             	shl    $0x4,%ecx
f010f481:	01 ca                	add    %ecx,%edx
f010f483:	89 10                	mov    %edx,(%eax)
f010f485:	eb 13                	jmp    f010f49a <test_alloc_block_FF+0x1bb>
f010f487:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f48d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f490:	c1 e2 04             	shl    $0x4,%edx
f010f493:	01 d0                	add    %edx,%eax
f010f495:	a3 60 27 86 f0       	mov    %eax,0xf0862760
f010f49a:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f4a0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f4a3:	c1 e2 04             	shl    $0x4,%edx
f010f4a6:	01 d0                	add    %edx,%eax
f010f4a8:	a3 64 27 86 f0       	mov    %eax,0xf0862764
f010f4ad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f4b0:	c1 e0 04             	shl    $0x4,%eax
f010f4b3:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f4b6:	01 f0                	add    %esi,%eax
f010f4b8:	2d d4 00 00 00       	sub    $0xd4,%eax
f010f4bd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f4c3:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f010f4c8:	40                   	inc    %eax
f010f4c9:	a3 6c 27 86 f0       	mov    %eax,0xf086276c
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010f4ce:	ff 45 e4             	incl   -0x1c(%ebp)
f010f4d1:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010f4d5:	0f 8e 97 fe ff ff    	jle    f010f372 <test_alloc_block_FF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_FF(3*Mega);
f010f4db:	83 ec 0c             	sub    $0xc,%esp
f010f4de:	68 00 00 30 00       	push   $0x300000
f010f4e3:	e8 32 2f 02 00       	call   f013241a <alloc_block_FF>
f010f4e8:	83 c4 10             	add    $0x10,%esp
f010f4eb:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a block instead no existing free blocks with the given size.");
f010f4ee:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f4f2:	74 17                	je     f010f50b <test_alloc_block_FF+0x22c>
f010f4f4:	83 ec 04             	sub    $0x4,%esp
f010f4f7:	68 cc 7f 13 f0       	push   $0xf0137fcc
f010f4fc:	68 15 01 00 00       	push   $0x115
f010f501:	68 14 7b 13 f0       	push   $0xf0137b14
f010f506:	e8 fa 0c ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f50b:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f010f510:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f513:	75 13                	jne    f010f528 <test_alloc_block_FF+0x249>
f010f515:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f010f51a:	83 f8 08             	cmp    $0x8,%eax
f010f51d:	75 09                	jne    f010f528 <test_alloc_block_FF+0x249>
f010f51f:	a1 d0 26 86 f0       	mov    0xf08626d0,%eax
f010f524:	85 c0                	test   %eax,%eax
f010f526:	74 17                	je     f010f53f <test_alloc_block_FF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010f528:	83 ec 04             	sub    $0x4,%esp
f010f52b:	68 40 80 13 f0       	push   $0xf0138040
f010f530:	68 19 01 00 00       	push   $0x119
f010f535:	68 14 7b 13 f0       	push   $0xf0137b14
f010f53a:	e8 c6 0c ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(9*kilo);
f010f53f:	83 ec 0c             	sub    $0xc,%esp
f010f542:	68 00 24 00 00       	push   $0x2400
f010f547:	e8 ce 2e 02 00       	call   f013241a <alloc_block_FF>
f010f54c:	83 c4 10             	add    $0x10,%esp
f010f54f:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 9*kilo || blockToAlloc->sva != 0x7000)
f010f552:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f556:	74 1a                	je     f010f572 <test_alloc_block_FF+0x293>
f010f558:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f55b:	8b 40 0c             	mov    0xc(%eax),%eax
f010f55e:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010f563:	75 0d                	jne    f010f572 <test_alloc_block_FF+0x293>
f010f565:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f568:	8b 40 08             	mov    0x8(%eax),%eax
f010f56b:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010f570:	74 17                	je     f010f589 <test_alloc_block_FF+0x2aa>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010f572:	83 ec 04             	sub    $0x4,%esp
f010f575:	68 b8 80 13 f0       	push   $0xf01380b8
f010f57a:	68 21 01 00 00       	push   $0x121
f010f57f:	68 14 7b 13 f0       	push   $0xf0137b14
f010f584:	e8 7c 0c ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f589:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f010f58e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f591:	75 13                	jne    f010f5a6 <test_alloc_block_FF+0x2c7>
f010f593:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f010f598:	83 f8 07             	cmp    $0x7,%eax
f010f59b:	75 09                	jne    f010f5a6 <test_alloc_block_FF+0x2c7>
f010f59d:	a1 d0 26 86 f0       	mov    0xf08626d0,%eax
f010f5a2:	85 c0                	test   %eax,%eax
f010f5a4:	74 17                	je     f010f5bd <test_alloc_block_FF+0x2de>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f5a6:	83 ec 04             	sub    $0x4,%esp
f010f5a9:	68 fc 80 13 f0       	push   $0xf01380fc
f010f5ae:	68 25 01 00 00       	push   $0x125
f010f5b3:	68 14 7b 13 f0       	push   $0xf0137b14
f010f5b8:	e8 48 0c ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010f5bd:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f5c4:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_FF-1;
f010f5c7:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f010f5ce:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f010f5d5:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f5dc:	83 ec 0c             	sub    $0xc,%esp
f010f5df:	ff 75 d8             	pushl  -0x28(%ebp)
f010f5e2:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f5e8:	50                   	push   %eax
f010f5e9:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f5ec:	50                   	push   %eax
f010f5ed:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f5f0:	50                   	push   %eax
f010f5f1:	68 60 27 86 f0       	push   $0xf0862760
f010f5f6:	e8 5b 1c 00 00       	call   f0111256 <check_list_data>
f010f5fb:	83 c4 20             	add    $0x20,%esp
f010f5fe:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010f601:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f605:	74 17                	je     f010f61e <test_alloc_block_FF+0x33f>
f010f607:	83 ec 04             	sub    $0x4,%esp
f010f60a:	68 60 81 13 f0       	push   $0xf0138160
f010f60f:	68 2d 01 00 00       	push   $0x12d
f010f614:	68 14 7b 13 f0       	push   $0xf0137b14
f010f619:	e8 e7 0b ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010f61e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f624:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f627:	74 17                	je     f010f640 <test_alloc_block_FF+0x361>
f010f629:	83 ec 04             	sub    $0x4,%esp
f010f62c:	68 ac 81 13 f0       	push   $0xf01381ac
f010f631:	68 2e 01 00 00       	push   $0x12e
f010f636:	68 14 7b 13 f0       	push   $0xf0137b14
f010f63b:	e8 c5 0b ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(1*Mega);
f010f640:	83 ec 0c             	sub    $0xc,%esp
f010f643:	68 00 00 10 00       	push   $0x100000
f010f648:	e8 cd 2d 02 00       	call   f013241a <alloc_block_FF>
f010f64d:	83 c4 10             	add    $0x10,%esp
f010f650:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010f653:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f657:	74 1a                	je     f010f673 <test_alloc_block_FF+0x394>
f010f659:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f65c:	8b 40 0c             	mov    0xc(%eax),%eax
f010f65f:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010f664:	75 0d                	jne    f010f673 <test_alloc_block_FF+0x394>
f010f666:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f669:	8b 40 08             	mov    0x8(%eax),%eax
f010f66c:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010f671:	74 17                	je     f010f68a <test_alloc_block_FF+0x3ab>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010f673:	83 ec 04             	sub    $0x4,%esp
f010f676:	68 b8 80 13 f0       	push   $0xf01380b8
f010f67b:	68 36 01 00 00       	push   $0x136
f010f680:	68 14 7b 13 f0       	push   $0xf0137b14
f010f685:	e8 7b 0b ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f68a:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f010f68f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f692:	4a                   	dec    %edx
f010f693:	39 d0                	cmp    %edx,%eax
f010f695:	75 13                	jne    f010f6aa <test_alloc_block_FF+0x3cb>
f010f697:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f010f69c:	83 f8 07             	cmp    $0x7,%eax
f010f69f:	75 09                	jne    f010f6aa <test_alloc_block_FF+0x3cb>
f010f6a1:	a1 d0 26 86 f0       	mov    0xf08626d0,%eax
f010f6a6:	85 c0                	test   %eax,%eax
f010f6a8:	74 17                	je     f010f6c1 <test_alloc_block_FF+0x3e2>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f6aa:	83 ec 04             	sub    $0x4,%esp
f010f6ad:	68 fc 80 13 f0       	push   $0xf01380fc
f010f6b2:	68 3a 01 00 00       	push   $0x13a
f010f6b7:	68 14 7b 13 f0       	push   $0xf0137b14
f010f6bc:	e8 44 0b ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f6c1:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f6c8:	00 00 00 
	actualSize = numOfFreeBlocks_FF-1;
f010f6cb:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010f6d2:	c7 45 c8 00 a4 11 00 	movl   $0x11a400,-0x38(%ebp)
	BlocksSizes[5] = 1*Mega;
f010f6d9:	c7 45 a8 00 00 10 00 	movl   $0x100000,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f6e0:	83 ec 0c             	sub    $0xc,%esp
f010f6e3:	ff 75 d8             	pushl  -0x28(%ebp)
f010f6e6:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f6ec:	50                   	push   %eax
f010f6ed:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f6f0:	50                   	push   %eax
f010f6f1:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f6f4:	50                   	push   %eax
f010f6f5:	68 60 27 86 f0       	push   $0xf0862760
f010f6fa:	e8 57 1b 00 00       	call   f0111256 <check_list_data>
f010f6ff:	83 c4 20             	add    $0x20,%esp
f010f702:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010f705:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f709:	74 17                	je     f010f722 <test_alloc_block_FF+0x443>
f010f70b:	83 ec 04             	sub    $0x4,%esp
f010f70e:	68 60 81 13 f0       	push   $0xf0138160
f010f713:	68 42 01 00 00       	push   $0x142
f010f718:	68 14 7b 13 f0       	push   $0xf0137b14
f010f71d:	e8 e3 0a ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010f722:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f728:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f72b:	74 17                	je     f010f744 <test_alloc_block_FF+0x465>
f010f72d:	83 ec 04             	sub    $0x4,%esp
f010f730:	68 ac 81 13 f0       	push   $0xf01381ac
f010f735:	68 43 01 00 00       	push   $0x143
f010f73a:	68 14 7b 13 f0       	push   $0xf0137b14
f010f73f:	e8 c1 0a ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_FF completed successfully.\n");
f010f744:	83 ec 0c             	sub    $0xc,%esp
f010f747:	68 f8 81 13 f0       	push   $0xf01381f8
f010f74c:	e8 bd 15 ff ff       	call   f0100d0e <cprintf>
f010f751:	83 c4 10             	add    $0x10,%esp
}
f010f754:	90                   	nop
f010f755:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010f758:	5b                   	pop    %ebx
f010f759:	5e                   	pop    %esi
f010f75a:	5f                   	pop    %edi
f010f75b:	5d                   	pop    %ebp
f010f75c:	c3                   	ret    

f010f75d <test_alloc_block_BF>:

void test_alloc_block_BF()
{
f010f75d:	55                   	push   %ebp
f010f75e:	89 e5                	mov    %esp,%ebp
f010f760:	57                   	push   %edi
f010f761:	56                   	push   %esi
f010f762:	53                   	push   %ebx
f010f763:	81 ec cc 00 00 00    	sub    $0xcc,%esp
	uint32 numOfBlocks = 10;
f010f769:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010f770:	83 ec 0c             	sub    $0xc,%esp
f010f773:	ff 75 e0             	pushl  -0x20(%ebp)
f010f776:	e8 f7 29 02 00       	call   f0132172 <initialize_MemBlocksList>
f010f77b:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010f77e:	c7 05 c4 26 86 f0 00 	movl   $0x0,0xf08626c4
f010f785:	00 00 00 
f010f788:	c7 05 c8 26 86 f0 00 	movl   $0x0,0xf08626c8
f010f78f:	00 00 00 
f010f792:	c7 05 d0 26 86 f0 00 	movl   $0x0,0xf08626d0
f010f799:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_BF 7
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
f010f79c:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010f79f:	bb 74 84 13 f0       	mov    $0xf0138474,%ebx
f010f7a4:	ba 07 00 00 00       	mov    $0x7,%edx
f010f7a9:	89 c7                	mov    %eax,%edi
f010f7ab:	89 de                	mov    %ebx,%esi
f010f7ad:	89 d1                	mov    %edx,%ecx
f010f7af:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;
f010f7b1:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010f7b4:	bb 90 84 13 f0       	mov    $0xf0138490,%ebx
f010f7b9:	ba 07 00 00 00       	mov    $0x7,%edx
f010f7be:	89 c7                	mov    %eax,%edi
f010f7c0:	89 de                	mov    %ebx,%esi
f010f7c2:	89 d1                	mov    %edx,%ecx
f010f7c4:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010f7c6:	c7 05 60 27 86 f0 00 	movl   $0x0,0xf0862760
f010f7cd:	00 00 00 
f010f7d0:	c7 05 64 27 86 f0 00 	movl   $0x0,0xf0862764
f010f7d7:	00 00 00 
f010f7da:	c7 05 6c 27 86 f0 00 	movl   $0x0,0xf086276c
f010f7e1:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010f7e4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010f7eb:	e9 5f 01 00 00       	jmp    f010f94f <test_alloc_block_BF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010f7f0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f7f3:	8b 44 85 b8          	mov    -0x48(%ebp,%eax,4),%eax
f010f7f7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f7fa:	c1 e2 04             	shl    $0x4,%edx
f010f7fd:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f800:	01 da                	add    %ebx,%edx
f010f802:	81 ea b4 00 00 00    	sub    $0xb4,%edx
f010f808:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010f80a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f80d:	8b 44 85 9c          	mov    -0x64(%ebp,%eax,4),%eax
f010f811:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f814:	c1 e2 04             	shl    $0x4,%edx
f010f817:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f81a:	01 f2                	add    %esi,%edx
f010f81c:	81 ea b0 00 00 00    	sub    $0xb0,%edx
f010f822:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010f824:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010f828:	0f 85 92 00 00 00    	jne    f010f8c0 <test_alloc_block_BF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010f82e:	a1 60 27 86 f0       	mov    0xf0862760,%eax
f010f833:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f836:	c1 e2 04             	shl    $0x4,%edx
f010f839:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f83c:	01 fa                	add    %edi,%edx
f010f83e:	81 ea bc 00 00 00    	sub    $0xbc,%edx
f010f844:	89 02                	mov    %eax,(%edx)
f010f846:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f849:	c1 e0 04             	shl    $0x4,%eax
f010f84c:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f84f:	01 d8                	add    %ebx,%eax
f010f851:	2d bc 00 00 00       	sub    $0xbc,%eax
f010f856:	8b 00                	mov    (%eax),%eax
f010f858:	85 c0                	test   %eax,%eax
f010f85a:	74 18                	je     f010f874 <test_alloc_block_BF+0x117>
f010f85c:	a1 60 27 86 f0       	mov    0xf0862760,%eax
f010f861:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010f867:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f86a:	c1 e1 04             	shl    $0x4,%ecx
f010f86d:	01 ca                	add    %ecx,%edx
f010f86f:	89 50 04             	mov    %edx,0x4(%eax)
f010f872:	eb 13                	jmp    f010f887 <test_alloc_block_BF+0x12a>
f010f874:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010f87a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f87d:	c1 e2 04             	shl    $0x4,%edx
f010f880:	01 d0                	add    %edx,%eax
f010f882:	a3 64 27 86 f0       	mov    %eax,0xf0862764
f010f887:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010f88d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f890:	c1 e2 04             	shl    $0x4,%edx
f010f893:	01 d0                	add    %edx,%eax
f010f895:	a3 60 27 86 f0       	mov    %eax,0xf0862760
f010f89a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f89d:	c1 e0 04             	shl    $0x4,%eax
f010f8a0:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f8a3:	01 f0                	add    %esi,%eax
f010f8a5:	2d b8 00 00 00       	sub    $0xb8,%eax
f010f8aa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f8b0:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f010f8b5:	40                   	inc    %eax
f010f8b6:	a3 6c 27 86 f0       	mov    %eax,0xf086276c
f010f8bb:	e9 8c 00 00 00       	jmp    f010f94c <test_alloc_block_BF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010f8c0:	a1 64 27 86 f0       	mov    0xf0862764,%eax
f010f8c5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f8c8:	c1 e2 04             	shl    $0x4,%edx
f010f8cb:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f8ce:	01 fa                	add    %edi,%edx
f010f8d0:	81 ea b8 00 00 00    	sub    $0xb8,%edx
f010f8d6:	89 02                	mov    %eax,(%edx)
f010f8d8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f8db:	c1 e0 04             	shl    $0x4,%eax
f010f8de:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f8e1:	01 d8                	add    %ebx,%eax
f010f8e3:	2d b8 00 00 00       	sub    $0xb8,%eax
f010f8e8:	8b 00                	mov    (%eax),%eax
f010f8ea:	85 c0                	test   %eax,%eax
f010f8ec:	74 17                	je     f010f905 <test_alloc_block_BF+0x1a8>
f010f8ee:	a1 64 27 86 f0       	mov    0xf0862764,%eax
f010f8f3:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010f8f9:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f8fc:	c1 e1 04             	shl    $0x4,%ecx
f010f8ff:	01 ca                	add    %ecx,%edx
f010f901:	89 10                	mov    %edx,(%eax)
f010f903:	eb 13                	jmp    f010f918 <test_alloc_block_BF+0x1bb>
f010f905:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010f90b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f90e:	c1 e2 04             	shl    $0x4,%edx
f010f911:	01 d0                	add    %edx,%eax
f010f913:	a3 60 27 86 f0       	mov    %eax,0xf0862760
f010f918:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010f91e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f921:	c1 e2 04             	shl    $0x4,%edx
f010f924:	01 d0                	add    %edx,%eax
f010f926:	a3 64 27 86 f0       	mov    %eax,0xf0862764
f010f92b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f92e:	c1 e0 04             	shl    $0x4,%eax
f010f931:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f934:	01 f0                	add    %esi,%eax
f010f936:	2d bc 00 00 00       	sub    $0xbc,%eax
f010f93b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f941:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f010f946:	40                   	inc    %eax
f010f947:	a3 6c 27 86 f0       	mov    %eax,0xf086276c
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010f94c:	ff 45 e4             	incl   -0x1c(%ebp)
f010f94f:	83 7d e4 06          	cmpl   $0x6,-0x1c(%ebp)
f010f953:	0f 8e 97 fe ff ff    	jle    f010f7f0 <test_alloc_block_BF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_BF(4*Mega);
f010f959:	83 ec 0c             	sub    $0xc,%esp
f010f95c:	68 00 00 40 00       	push   $0x400000
f010f961:	e8 54 2c 02 00       	call   f01325ba <alloc_block_BF>
f010f966:	83 c4 10             	add    $0x10,%esp
f010f969:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a block instead no existing free blocks with the given size.");
f010f96c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f970:	74 17                	je     f010f989 <test_alloc_block_BF+0x22c>
f010f972:	83 ec 04             	sub    $0x4,%esp
f010f975:	68 80 82 13 f0       	push   $0xf0138280
f010f97a:	68 66 01 00 00       	push   $0x166
f010f97f:	68 14 7b 13 f0       	push   $0xf0137b14
f010f984:	e8 7c 08 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f989:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f010f98e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f991:	75 13                	jne    f010f9a6 <test_alloc_block_BF+0x249>
f010f993:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f010f998:	83 f8 07             	cmp    $0x7,%eax
f010f99b:	75 09                	jne    f010f9a6 <test_alloc_block_BF+0x249>
f010f99d:	a1 d0 26 86 f0       	mov    0xf08626d0,%eax
f010f9a2:	85 c0                	test   %eax,%eax
f010f9a4:	74 17                	je     f010f9bd <test_alloc_block_BF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010f9a6:	83 ec 04             	sub    $0x4,%esp
f010f9a9:	68 40 80 13 f0       	push   $0xf0138040
f010f9ae:	68 6a 01 00 00       	push   $0x16a
f010f9b3:	68 14 7b 13 f0       	push   $0xf0137b14
f010f9b8:	e8 48 08 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (NOT THE FIRST BLOCK FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010f9bd:	83 ec 0c             	sub    $0xc,%esp
f010f9c0:	68 00 00 10 00       	push   $0x100000
f010f9c5:	e8 f0 2b 02 00       	call   f01325ba <alloc_block_BF>
f010f9ca:	83 c4 10             	add    $0x10,%esp
f010f9cd:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x21B400)
f010f9d0:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f9d4:	74 1a                	je     f010f9f0 <test_alloc_block_BF+0x293>
f010f9d6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f9d9:	8b 40 0c             	mov    0xc(%eax),%eax
f010f9dc:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010f9e1:	75 0d                	jne    f010f9f0 <test_alloc_block_BF+0x293>
f010f9e3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f9e6:	8b 40 08             	mov    0x8(%eax),%eax
f010f9e9:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f010f9ee:	74 17                	je     f010fa07 <test_alloc_block_BF+0x2aa>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010f9f0:	83 ec 04             	sub    $0x4,%esp
f010f9f3:	68 f4 82 13 f0       	push   $0xf01382f4
f010f9f8:	68 72 01 00 00       	push   $0x172
f010f9fd:	68 14 7b 13 f0       	push   $0xf0137b14
f010fa02:	e8 fe 07 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fa07:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f010fa0c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010fa0f:	75 13                	jne    f010fa24 <test_alloc_block_BF+0x2c7>
f010fa11:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f010fa16:	83 f8 06             	cmp    $0x6,%eax
f010fa19:	75 09                	jne    f010fa24 <test_alloc_block_BF+0x2c7>
f010fa1b:	a1 d0 26 86 f0       	mov    0xf08626d0,%eax
f010fa20:	85 c0                	test   %eax,%eax
f010fa22:	74 17                	je     f010fa3b <test_alloc_block_BF+0x2de>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fa24:	83 ec 04             	sub    $0x4,%esp
f010fa27:	68 38 83 13 f0       	push   $0xf0138338
f010fa2c:	68 76 01 00 00       	push   $0x176
f010fa31:	68 14 7b 13 f0       	push   $0xf0137b14
f010fa36:	e8 ca 07 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010fa3b:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010fa42:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_BF-1;
f010fa45:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0;
f010fa4c:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	BlocksSizes[6] = 0;
f010fa53:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fa5a:	83 ec 0c             	sub    $0xc,%esp
f010fa5d:	ff 75 d8             	pushl  -0x28(%ebp)
f010fa60:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010fa66:	50                   	push   %eax
f010fa67:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010fa6a:	50                   	push   %eax
f010fa6b:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010fa6e:	50                   	push   %eax
f010fa6f:	68 60 27 86 f0       	push   $0xf0862760
f010fa74:	e8 dd 17 00 00       	call   f0111256 <check_list_data>
f010fa79:	83 c4 20             	add    $0x20,%esp
f010fa7c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010fa7f:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fa83:	74 17                	je     f010fa9c <test_alloc_block_BF+0x33f>
f010fa85:	83 ec 04             	sub    $0x4,%esp
f010fa88:	68 9c 83 13 f0       	push   $0xf013839c
f010fa8d:	68 7e 01 00 00       	push   $0x17e
f010fa92:	68 14 7b 13 f0       	push   $0xf0137b14
f010fa97:	e8 69 07 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010fa9c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010faa2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010faa5:	74 17                	je     f010fabe <test_alloc_block_BF+0x361>
f010faa7:	83 ec 04             	sub    $0x4,%esp
f010faaa:	68 e8 83 13 f0       	push   $0xf01383e8
f010faaf:	68 7f 01 00 00       	push   $0x17f
f010fab4:	68 14 7b 13 f0       	push   $0xf0137b14
f010fab9:	e8 47 07 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of any existing free block (ONLY ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010fabe:	83 ec 0c             	sub    $0xc,%esp
f010fac1:	68 00 00 10 00       	push   $0x100000
f010fac6:	e8 ef 2a 02 00       	call   f01325ba <alloc_block_BF>
f010facb:	83 c4 10             	add    $0x10,%esp
f010face:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010fad1:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fad5:	74 1a                	je     f010faf1 <test_alloc_block_BF+0x394>
f010fad7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fada:	8b 40 0c             	mov    0xc(%eax),%eax
f010fadd:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010fae2:	75 0d                	jne    f010faf1 <test_alloc_block_BF+0x394>
f010fae4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fae7:	8b 40 08             	mov    0x8(%eax),%eax
f010faea:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010faef:	74 17                	je     f010fb08 <test_alloc_block_BF+0x3ab>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010faf1:	83 ec 04             	sub    $0x4,%esp
f010faf4:	68 f4 82 13 f0       	push   $0xf01382f4
f010faf9:	68 87 01 00 00       	push   $0x187
f010fafe:	68 14 7b 13 f0       	push   $0xf0137b14
f010fb03:	e8 fd 06 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fb08:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f010fb0d:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010fb10:	4a                   	dec    %edx
f010fb11:	39 d0                	cmp    %edx,%eax
f010fb13:	75 13                	jne    f010fb28 <test_alloc_block_BF+0x3cb>
f010fb15:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f010fb1a:	83 f8 06             	cmp    $0x6,%eax
f010fb1d:	75 09                	jne    f010fb28 <test_alloc_block_BF+0x3cb>
f010fb1f:	a1 d0 26 86 f0       	mov    0xf08626d0,%eax
f010fb24:	85 c0                	test   %eax,%eax
f010fb26:	74 17                	je     f010fb3f <test_alloc_block_BF+0x3e2>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fb28:	83 ec 04             	sub    $0x4,%esp
f010fb2b:	68 38 83 13 f0       	push   $0xf0138338
f010fb30:	68 8b 01 00 00       	push   $0x18b
f010fb35:	68 14 7b 13 f0       	push   $0xf0137b14
f010fb3a:	e8 c6 06 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010fb3f:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010fb46:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010fb49:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010fb50:	c7 45 cc 00 a4 11 00 	movl   $0x11a400,-0x34(%ebp)
	BlocksSizes[5] = 1*Mega;
f010fb57:	c7 45 b0 00 00 10 00 	movl   $0x100000,-0x50(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fb5e:	83 ec 0c             	sub    $0xc,%esp
f010fb61:	ff 75 d8             	pushl  -0x28(%ebp)
f010fb64:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010fb6a:	50                   	push   %eax
f010fb6b:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010fb6e:	50                   	push   %eax
f010fb6f:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010fb72:	50                   	push   %eax
f010fb73:	68 60 27 86 f0       	push   $0xf0862760
f010fb78:	e8 d9 16 00 00       	call   f0111256 <check_list_data>
f010fb7d:	83 c4 20             	add    $0x20,%esp
f010fb80:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010fb83:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fb87:	74 17                	je     f010fba0 <test_alloc_block_BF+0x443>
f010fb89:	83 ec 04             	sub    $0x4,%esp
f010fb8c:	68 9c 83 13 f0       	push   $0xf013839c
f010fb91:	68 93 01 00 00       	push   $0x193
f010fb96:	68 14 7b 13 f0       	push   $0xf0137b14
f010fb9b:	e8 65 06 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010fba0:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010fba6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fba9:	74 17                	je     f010fbc2 <test_alloc_block_BF+0x465>
f010fbab:	83 ec 04             	sub    $0x4,%esp
f010fbae:	68 e8 83 13 f0       	push   $0xf01383e8
f010fbb3:	68 94 01 00 00       	push   $0x194
f010fbb8:	68 14 7b 13 f0       	push   $0xf0137b14
f010fbbd:	e8 43 06 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (MORE THAN ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(3*kilo);
f010fbc2:	83 ec 0c             	sub    $0xc,%esp
f010fbc5:	68 00 0c 00 00       	push   $0xc00
f010fbca:	e8 eb 29 02 00       	call   f01325ba <alloc_block_BF>
f010fbcf:	83 c4 10             	add    $0x10,%esp
f010fbd2:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x19000)
f010fbd5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fbd9:	74 1a                	je     f010fbf5 <test_alloc_block_BF+0x498>
f010fbdb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fbde:	8b 40 0c             	mov    0xc(%eax),%eax
f010fbe1:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010fbe6:	75 0d                	jne    f010fbf5 <test_alloc_block_BF+0x498>
f010fbe8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fbeb:	8b 40 08             	mov    0x8(%eax),%eax
f010fbee:	3d 00 90 01 00       	cmp    $0x19000,%eax
f010fbf3:	74 17                	je     f010fc0c <test_alloc_block_BF+0x4af>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010fbf5:	83 ec 04             	sub    $0x4,%esp
f010fbf8:	68 f4 82 13 f0       	push   $0xf01382f4
f010fbfd:	68 9c 01 00 00       	push   $0x19c
f010fc02:	68 14 7b 13 f0       	push   $0xf0137b14
f010fc07:	e8 f9 05 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fc0c:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f010fc11:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010fc14:	83 ea 02             	sub    $0x2,%edx
f010fc17:	39 d0                	cmp    %edx,%eax
f010fc19:	75 13                	jne    f010fc2e <test_alloc_block_BF+0x4d1>
f010fc1b:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f010fc20:	83 f8 06             	cmp    $0x6,%eax
f010fc23:	75 09                	jne    f010fc2e <test_alloc_block_BF+0x4d1>
f010fc25:	a1 d0 26 86 f0       	mov    0xf08626d0,%eax
f010fc2a:	85 c0                	test   %eax,%eax
f010fc2c:	74 17                	je     f010fc45 <test_alloc_block_BF+0x4e8>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fc2e:	83 ec 04             	sub    $0x4,%esp
f010fc31:	68 38 83 13 f0       	push   $0xf0138338
f010fc36:	68 a0 01 00 00       	push   $0x1a0
f010fc3b:	68 14 7b 13 f0       	push   $0xf0137b14
f010fc40:	e8 c0 05 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010fc45:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010fc4c:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010fc4f:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[4] = 0x19C00;  //100KB + 3KB
f010fc56:	c7 45 c8 00 9c 01 00 	movl   $0x19c00,-0x38(%ebp)
	BlocksSizes[4] = 1*kilo;
f010fc5d:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fc64:	83 ec 0c             	sub    $0xc,%esp
f010fc67:	ff 75 d8             	pushl  -0x28(%ebp)
f010fc6a:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010fc70:	50                   	push   %eax
f010fc71:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010fc74:	50                   	push   %eax
f010fc75:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010fc78:	50                   	push   %eax
f010fc79:	68 60 27 86 f0       	push   $0xf0862760
f010fc7e:	e8 d3 15 00 00       	call   f0111256 <check_list_data>
f010fc83:	83 c4 20             	add    $0x20,%esp
f010fc86:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010fc89:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fc8d:	74 17                	je     f010fca6 <test_alloc_block_BF+0x549>
f010fc8f:	83 ec 04             	sub    $0x4,%esp
f010fc92:	68 9c 83 13 f0       	push   $0xf013839c
f010fc97:	68 a8 01 00 00       	push   $0x1a8
f010fc9c:	68 14 7b 13 f0       	push   $0xf0137b14
f010fca1:	e8 5f 05 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010fca6:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010fcac:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fcaf:	74 17                	je     f010fcc8 <test_alloc_block_BF+0x56b>
f010fcb1:	83 ec 04             	sub    $0x4,%esp
f010fcb4:	68 e8 83 13 f0       	push   $0xf01383e8
f010fcb9:	68 a9 01 00 00       	push   $0x1a9
f010fcbe:	68 14 7b 13 f0       	push   $0xf0137b14
f010fcc3:	e8 3d 05 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 5: Try to allocate a block @ the head of the free block list */
	blockToAlloc = alloc_block_BF(2*kilo);
f010fcc8:	83 ec 0c             	sub    $0xc,%esp
f010fccb:	68 00 08 00 00       	push   $0x800
f010fcd0:	e8 e5 28 02 00       	call   f01325ba <alloc_block_BF>
f010fcd5:	83 c4 10             	add    $0x10,%esp
f010fcd8:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*kilo || blockToAlloc->sva != 0x0)
f010fcdb:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fcdf:	74 17                	je     f010fcf8 <test_alloc_block_BF+0x59b>
f010fce1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fce4:	8b 40 0c             	mov    0xc(%eax),%eax
f010fce7:	3d 00 08 00 00       	cmp    $0x800,%eax
f010fcec:	75 0a                	jne    f010fcf8 <test_alloc_block_BF+0x59b>
f010fcee:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fcf1:	8b 40 08             	mov    0x8(%eax),%eax
f010fcf4:	85 c0                	test   %eax,%eax
f010fcf6:	74 17                	je     f010fd0f <test_alloc_block_BF+0x5b2>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010fcf8:	83 ec 04             	sub    $0x4,%esp
f010fcfb:	68 f4 82 13 f0       	push   $0xf01382f4
f010fd00:	68 b1 01 00 00       	push   $0x1b1
f010fd05:	68 14 7b 13 f0       	push   $0xf0137b14
f010fd0a:	e8 f6 04 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fd0f:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f010fd14:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010fd17:	83 ea 02             	sub    $0x2,%edx
f010fd1a:	39 d0                	cmp    %edx,%eax
f010fd1c:	75 13                	jne    f010fd31 <test_alloc_block_BF+0x5d4>
f010fd1e:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f010fd23:	83 f8 05             	cmp    $0x5,%eax
f010fd26:	75 09                	jne    f010fd31 <test_alloc_block_BF+0x5d4>
f010fd28:	a1 d0 26 86 f0       	mov    0xf08626d0,%eax
f010fd2d:	85 c0                	test   %eax,%eax
f010fd2f:	74 17                	je     f010fd48 <test_alloc_block_BF+0x5eb>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fd31:	83 ec 04             	sub    $0x4,%esp
f010fd34:	68 38 83 13 f0       	push   $0xf0138338
f010fd39:	68 b5 01 00 00       	push   $0x1b5
f010fd3e:	68 14 7b 13 f0       	push   $0xf0137b14
f010fd43:	e8 bd 04 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010fd48:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010fd4f:	00 00 00 
	actualSize = numOfFreeBlocks_BF-2;
f010fd52:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0x0;
f010fd59:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
	BlocksSizes[0] = 0;
f010fd60:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fd67:	83 ec 0c             	sub    $0xc,%esp
f010fd6a:	ff 75 d8             	pushl  -0x28(%ebp)
f010fd6d:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010fd73:	50                   	push   %eax
f010fd74:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010fd77:	50                   	push   %eax
f010fd78:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010fd7b:	50                   	push   %eax
f010fd7c:	68 60 27 86 f0       	push   $0xf0862760
f010fd81:	e8 d0 14 00 00       	call   f0111256 <check_list_data>
f010fd86:	83 c4 20             	add    $0x20,%esp
f010fd89:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010fd8c:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fd90:	74 17                	je     f010fda9 <test_alloc_block_BF+0x64c>
f010fd92:	83 ec 04             	sub    $0x4,%esp
f010fd95:	68 9c 83 13 f0       	push   $0xf013839c
f010fd9a:	68 bd 01 00 00       	push   $0x1bd
f010fd9f:	68 14 7b 13 f0       	push   $0xf0137b14
f010fda4:	e8 5c 04 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010fda9:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010fdaf:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fdb2:	74 17                	je     f010fdcb <test_alloc_block_BF+0x66e>
f010fdb4:	83 ec 04             	sub    $0x4,%esp
f010fdb7:	68 e8 83 13 f0       	push   $0xf01383e8
f010fdbc:	68 be 01 00 00       	push   $0x1be
f010fdc1:	68 14 7b 13 f0       	push   $0xf0137b14
f010fdc6:	e8 3a 04 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_BF completed successfully.\n");
f010fdcb:	83 ec 0c             	sub    $0xc,%esp
f010fdce:	68 34 84 13 f0       	push   $0xf0138434
f010fdd3:	e8 36 0f ff ff       	call   f0100d0e <cprintf>
f010fdd8:	83 c4 10             	add    $0x10,%esp
}
f010fddb:	90                   	nop
f010fddc:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010fddf:	5b                   	pop    %ebx
f010fde0:	5e                   	pop    %esi
f010fde1:	5f                   	pop    %edi
f010fde2:	5d                   	pop    %ebp
f010fde3:	c3                   	ret    

f010fde4 <test_alloc_block_NF>:

void test_alloc_block_NF()
{
f010fde4:	55                   	push   %ebp
f010fde5:	89 e5                	mov    %esp,%ebp
f010fde7:	57                   	push   %edi
f010fde8:	56                   	push   %esi
f010fde9:	53                   	push   %ebx
f010fdea:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010fdf0:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010fdf7:	83 ec 0c             	sub    $0xc,%esp
f010fdfa:	ff 75 e0             	pushl  -0x20(%ebp)
f010fdfd:	e8 70 23 02 00       	call   f0132172 <initialize_MemBlocksList>
f010fe02:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010fe05:	c7 05 c4 26 86 f0 00 	movl   $0x0,0xf08626c4
f010fe0c:	00 00 00 
f010fe0f:	c7 05 c8 26 86 f0 00 	movl   $0x0,0xf08626c8
f010fe16:	00 00 00 
f010fe19:	c7 05 d0 26 86 f0 00 	movl   $0x0,0xf08626d0
f010fe20:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_NF 8
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010fe23:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010fe26:	bb 40 82 13 f0       	mov    $0xf0138240,%ebx
f010fe2b:	ba 08 00 00 00       	mov    $0x8,%edx
f010fe30:	89 c7                	mov    %eax,%edi
f010fe32:	89 de                	mov    %ebx,%esi
f010fe34:	89 d1                	mov    %edx,%ecx
f010fe36:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;
f010fe38:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fe3b:	bb a0 86 13 f0       	mov    $0xf01386a0,%ebx
f010fe40:	ba 08 00 00 00       	mov    $0x8,%edx
f010fe45:	89 c7                	mov    %eax,%edi
f010fe47:	89 de                	mov    %ebx,%esi
f010fe49:	89 d1                	mov    %edx,%ecx
f010fe4b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010fe4d:	c7 05 60 27 86 f0 00 	movl   $0x0,0xf0862760
f010fe54:	00 00 00 
f010fe57:	c7 05 64 27 86 f0 00 	movl   $0x0,0xf0862764
f010fe5e:	00 00 00 
f010fe61:	c7 05 6c 27 86 f0 00 	movl   $0x0,0xf086276c
f010fe68:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f010fe6b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010fe72:	e9 5f 01 00 00       	jmp    f010ffd6 <test_alloc_block_NF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010fe77:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fe7a:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010fe7e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fe81:	c1 e2 04             	shl    $0x4,%edx
f010fe84:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010fe87:	01 da                	add    %ebx,%edx
f010fe89:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010fe8f:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010fe91:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fe94:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010fe98:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fe9b:	c1 e2 04             	shl    $0x4,%edx
f010fe9e:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010fea1:	01 f2                	add    %esi,%edx
f010fea3:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010fea9:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010feab:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010feaf:	0f 85 92 00 00 00    	jne    f010ff47 <test_alloc_block_NF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010feb5:	a1 60 27 86 f0       	mov    0xf0862760,%eax
f010feba:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010febd:	c1 e2 04             	shl    $0x4,%edx
f010fec0:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010fec3:	01 fa                	add    %edi,%edx
f010fec5:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010fecb:	89 02                	mov    %eax,(%edx)
f010fecd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fed0:	c1 e0 04             	shl    $0x4,%eax
f010fed3:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010fed6:	01 d8                	add    %ebx,%eax
f010fed8:	2d d4 00 00 00       	sub    $0xd4,%eax
f010fedd:	8b 00                	mov    (%eax),%eax
f010fedf:	85 c0                	test   %eax,%eax
f010fee1:	74 18                	je     f010fefb <test_alloc_block_NF+0x117>
f010fee3:	a1 60 27 86 f0       	mov    0xf0862760,%eax
f010fee8:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010feee:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010fef1:	c1 e1 04             	shl    $0x4,%ecx
f010fef4:	01 ca                	add    %ecx,%edx
f010fef6:	89 50 04             	mov    %edx,0x4(%eax)
f010fef9:	eb 13                	jmp    f010ff0e <test_alloc_block_NF+0x12a>
f010fefb:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010ff01:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ff04:	c1 e2 04             	shl    $0x4,%edx
f010ff07:	01 d0                	add    %edx,%eax
f010ff09:	a3 64 27 86 f0       	mov    %eax,0xf0862764
f010ff0e:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010ff14:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ff17:	c1 e2 04             	shl    $0x4,%edx
f010ff1a:	01 d0                	add    %edx,%eax
f010ff1c:	a3 60 27 86 f0       	mov    %eax,0xf0862760
f010ff21:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ff24:	c1 e0 04             	shl    $0x4,%eax
f010ff27:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ff2a:	01 f0                	add    %esi,%eax
f010ff2c:	2d d0 00 00 00       	sub    $0xd0,%eax
f010ff31:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010ff37:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f010ff3c:	40                   	inc    %eax
f010ff3d:	a3 6c 27 86 f0       	mov    %eax,0xf086276c
f010ff42:	e9 8c 00 00 00       	jmp    f010ffd3 <test_alloc_block_NF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010ff47:	a1 64 27 86 f0       	mov    0xf0862764,%eax
f010ff4c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ff4f:	c1 e2 04             	shl    $0x4,%edx
f010ff52:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010ff55:	01 fa                	add    %edi,%edx
f010ff57:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010ff5d:	89 02                	mov    %eax,(%edx)
f010ff5f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ff62:	c1 e0 04             	shl    $0x4,%eax
f010ff65:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010ff68:	01 d8                	add    %ebx,%eax
f010ff6a:	2d d0 00 00 00       	sub    $0xd0,%eax
f010ff6f:	8b 00                	mov    (%eax),%eax
f010ff71:	85 c0                	test   %eax,%eax
f010ff73:	74 17                	je     f010ff8c <test_alloc_block_NF+0x1a8>
f010ff75:	a1 64 27 86 f0       	mov    0xf0862764,%eax
f010ff7a:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010ff80:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010ff83:	c1 e1 04             	shl    $0x4,%ecx
f010ff86:	01 ca                	add    %ecx,%edx
f010ff88:	89 10                	mov    %edx,(%eax)
f010ff8a:	eb 13                	jmp    f010ff9f <test_alloc_block_NF+0x1bb>
f010ff8c:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010ff92:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ff95:	c1 e2 04             	shl    $0x4,%edx
f010ff98:	01 d0                	add    %edx,%eax
f010ff9a:	a3 60 27 86 f0       	mov    %eax,0xf0862760
f010ff9f:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010ffa5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ffa8:	c1 e2 04             	shl    $0x4,%edx
f010ffab:	01 d0                	add    %edx,%eax
f010ffad:	a3 64 27 86 f0       	mov    %eax,0xf0862764
f010ffb2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ffb5:	c1 e0 04             	shl    $0x4,%eax
f010ffb8:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ffbb:	01 f0                	add    %esi,%eax
f010ffbd:	2d d4 00 00 00       	sub    $0xd4,%eax
f010ffc2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010ffc8:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f010ffcd:	40                   	inc    %eax
f010ffce:	a3 6c 27 86 f0       	mov    %eax,0xf086276c
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f010ffd3:	ff 45 e4             	incl   -0x1c(%ebp)
f010ffd6:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010ffda:	0f 8e 97 fe ff ff    	jle    f010fe77 <test_alloc_block_NF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*NF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_NF(10*Mega);
f010ffe0:	83 ec 0c             	sub    $0xc,%esp
f010ffe3:	68 00 00 a0 00       	push   $0xa00000
f010ffe8:	e8 cb 27 02 00       	call   f01327b8 <alloc_block_NF>
f010ffed:	83 c4 10             	add    $0x10,%esp
f010fff0:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a block instead no existing free blocks with the given size.");
f010fff3:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fff7:	74 17                	je     f0110010 <test_alloc_block_NF+0x22c>
f010fff9:	83 ec 04             	sub    $0x4,%esp
f010fffc:	68 ac 84 13 f0       	push   $0xf01384ac
f0110001:	68 e1 01 00 00       	push   $0x1e1
f0110006:	68 14 7b 13 f0       	push   $0xf0137b14
f011000b:	e8 f5 01 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f0110010:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f0110015:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0110018:	75 13                	jne    f011002d <test_alloc_block_NF+0x249>
f011001a:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f011001f:	83 f8 08             	cmp    $0x8,%eax
f0110022:	75 09                	jne    f011002d <test_alloc_block_NF+0x249>
f0110024:	a1 d0 26 86 f0       	mov    0xf08626d0,%eax
f0110029:	85 c0                	test   %eax,%eax
f011002b:	74 17                	je     f0110044 <test_alloc_block_NF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f011002d:	83 ec 04             	sub    $0x4,%esp
f0110030:	68 40 80 13 f0       	push   $0xf0138040
f0110035:	68 e5 01 00 00       	push   $0x1e5
f011003a:	68 14 7b 13 f0       	push   $0xf0137b14
f011003f:	e8 c1 01 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (STARTING from 0)*/
	blockToAlloc = alloc_block_NF(10*kilo);
f0110044:	83 ec 0c             	sub    $0xc,%esp
f0110047:	68 00 28 00 00       	push   $0x2800
f011004c:	e8 67 27 02 00       	call   f01327b8 <alloc_block_NF>
f0110051:	83 c4 10             	add    $0x10,%esp
f0110054:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 10*kilo || blockToAlloc->sva != 0x7000)
f0110057:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011005b:	74 1a                	je     f0110077 <test_alloc_block_NF+0x293>
f011005d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110060:	8b 40 0c             	mov    0xc(%eax),%eax
f0110063:	3d 00 28 00 00       	cmp    $0x2800,%eax
f0110068:	75 0d                	jne    f0110077 <test_alloc_block_NF+0x293>
f011006a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011006d:	8b 40 08             	mov    0x8(%eax),%eax
f0110070:	3d 00 70 00 00       	cmp    $0x7000,%eax
f0110075:	74 17                	je     f011008e <test_alloc_block_NF+0x2aa>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f0110077:	83 ec 04             	sub    $0x4,%esp
f011007a:	68 20 85 13 f0       	push   $0xf0138520
f011007f:	68 ed 01 00 00       	push   $0x1ed
f0110084:	68 14 7b 13 f0       	push   $0xf0137b14
f0110089:	e8 77 01 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f011008e:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f0110093:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0110096:	75 13                	jne    f01100ab <test_alloc_block_NF+0x2c7>
f0110098:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f011009d:	83 f8 07             	cmp    $0x7,%eax
f01100a0:	75 09                	jne    f01100ab <test_alloc_block_NF+0x2c7>
f01100a2:	a1 d0 26 86 f0       	mov    0xf08626d0,%eax
f01100a7:	85 c0                	test   %eax,%eax
f01100a9:	74 17                	je     f01100c2 <test_alloc_block_NF+0x2de>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01100ab:	83 ec 04             	sub    $0x4,%esp
f01100ae:	68 64 85 13 f0       	push   $0xf0138564
f01100b3:	68 f1 01 00 00       	push   $0x1f1
f01100b8:	68 14 7b 13 f0       	push   $0xf0137b14
f01100bd:	e8 43 01 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f01100c2:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f01100c9:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_NF-1;
f01100cc:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f01100d3:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f01100da:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f01100e1:	83 ec 0c             	sub    $0xc,%esp
f01100e4:	ff 75 d8             	pushl  -0x28(%ebp)
f01100e7:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f01100ed:	50                   	push   %eax
f01100ee:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01100f1:	50                   	push   %eax
f01100f2:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01100f5:	50                   	push   %eax
f01100f6:	68 60 27 86 f0       	push   $0xf0862760
f01100fb:	e8 56 11 00 00       	call   f0111256 <check_list_data>
f0110100:	83 c4 20             	add    $0x20,%esp
f0110103:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f0110106:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f011010a:	74 17                	je     f0110123 <test_alloc_block_NF+0x33f>
f011010c:	83 ec 04             	sub    $0x4,%esp
f011010f:	68 c8 85 13 f0       	push   $0xf01385c8
f0110114:	68 f9 01 00 00       	push   $0x1f9
f0110119:	68 14 7b 13 f0       	push   $0xf0137b14
f011011e:	e8 e2 00 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f0110123:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0110129:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011012c:	74 17                	je     f0110145 <test_alloc_block_NF+0x361>
f011012e:	83 ec 04             	sub    $0x4,%esp
f0110131:	68 14 86 13 f0       	push   $0xf0138614
f0110136:	68 fa 01 00 00       	push   $0x1fa
f011013b:	68 14 7b 13 f0       	push   $0xf0137b14
f0110140:	e8 c0 00 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the one existing free blocks (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(2*Mega);
f0110145:	83 ec 0c             	sub    $0xc,%esp
f0110148:	68 00 00 20 00       	push   $0x200000
f011014d:	e8 66 26 02 00       	call   f01327b8 <alloc_block_NF>
f0110152:	83 c4 10             	add    $0x10,%esp
f0110155:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*Mega || blockToAlloc->sva != 0x1A400)
f0110158:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011015c:	74 1a                	je     f0110178 <test_alloc_block_NF+0x394>
f011015e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110161:	8b 40 0c             	mov    0xc(%eax),%eax
f0110164:	3d 00 00 20 00       	cmp    $0x200000,%eax
f0110169:	75 0d                	jne    f0110178 <test_alloc_block_NF+0x394>
f011016b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011016e:	8b 40 08             	mov    0x8(%eax),%eax
f0110171:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f0110176:	74 17                	je     f011018f <test_alloc_block_NF+0x3ab>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f0110178:	83 ec 04             	sub    $0x4,%esp
f011017b:	68 20 85 13 f0       	push   $0xf0138520
f0110180:	68 03 02 00 00       	push   $0x203
f0110185:	68 14 7b 13 f0       	push   $0xf0137b14
f011018a:	e8 76 00 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f011018f:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f0110194:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0110197:	75 13                	jne    f01101ac <test_alloc_block_NF+0x3c8>
f0110199:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f011019e:	83 f8 06             	cmp    $0x6,%eax
f01101a1:	75 09                	jne    f01101ac <test_alloc_block_NF+0x3c8>
f01101a3:	a1 d0 26 86 f0       	mov    0xf08626d0,%eax
f01101a8:	85 c0                	test   %eax,%eax
f01101aa:	74 17                	je     f01101c3 <test_alloc_block_NF+0x3df>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01101ac:	83 ec 04             	sub    $0x4,%esp
f01101af:	68 64 85 13 f0       	push   $0xf0138564
f01101b4:	68 07 02 00 00       	push   $0x207
f01101b9:	68 14 7b 13 f0       	push   $0xf0137b14
f01101be:	e8 42 00 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f01101c3:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f01101ca:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f01101cd:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0;
f01101d4:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	BlocksSizes[5] = 0;
f01101db:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f01101e2:	83 ec 0c             	sub    $0xc,%esp
f01101e5:	ff 75 d8             	pushl  -0x28(%ebp)
f01101e8:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f01101ee:	50                   	push   %eax
f01101ef:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01101f2:	50                   	push   %eax
f01101f3:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01101f6:	50                   	push   %eax
f01101f7:	68 60 27 86 f0       	push   $0xf0862760
f01101fc:	e8 55 10 00 00       	call   f0111256 <check_list_data>
f0110201:	83 c4 20             	add    $0x20,%esp
f0110204:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f0110207:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f011020b:	74 17                	je     f0110224 <test_alloc_block_NF+0x440>
f011020d:	83 ec 04             	sub    $0x4,%esp
f0110210:	68 c8 85 13 f0       	push   $0xf01385c8
f0110215:	68 0f 02 00 00       	push   $0x20f
f011021a:	68 14 7b 13 f0       	push   $0xf0137b14
f011021f:	e8 e1 ff fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f0110224:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011022a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011022d:	74 17                	je     f0110246 <test_alloc_block_NF+0x462>
f011022f:	83 ec 04             	sub    $0x4,%esp
f0110232:	68 14 86 13 f0       	push   $0xf0138614
f0110237:	68 10 02 00 00       	push   $0x210
f011023c:	68 14 7b 13 f0       	push   $0xf0137b14
f0110241:	e8 bf ff fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(512*kilo);
f0110246:	83 ec 0c             	sub    $0xc,%esp
f0110249:	68 00 00 08 00       	push   $0x80000
f011024e:	e8 65 25 02 00       	call   f01327b8 <alloc_block_NF>
f0110253:	83 c4 10             	add    $0x10,%esp
f0110256:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 512*kilo || blockToAlloc->sva != 0x21B400)
f0110259:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011025d:	74 1a                	je     f0110279 <test_alloc_block_NF+0x495>
f011025f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110262:	8b 40 0c             	mov    0xc(%eax),%eax
f0110265:	3d 00 00 08 00       	cmp    $0x80000,%eax
f011026a:	75 0d                	jne    f0110279 <test_alloc_block_NF+0x495>
f011026c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011026f:	8b 40 08             	mov    0x8(%eax),%eax
f0110272:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f0110277:	74 17                	je     f0110290 <test_alloc_block_NF+0x4ac>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f0110279:	83 ec 04             	sub    $0x4,%esp
f011027c:	68 20 85 13 f0       	push   $0xf0138520
f0110281:	68 19 02 00 00       	push   $0x219
f0110286:	68 14 7b 13 f0       	push   $0xf0137b14
f011028b:	e8 75 ff fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f0110290:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f0110295:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0110298:	4a                   	dec    %edx
f0110299:	39 d0                	cmp    %edx,%eax
f011029b:	75 13                	jne    f01102b0 <test_alloc_block_NF+0x4cc>
f011029d:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f01102a2:	83 f8 06             	cmp    $0x6,%eax
f01102a5:	75 09                	jne    f01102b0 <test_alloc_block_NF+0x4cc>
f01102a7:	a1 d0 26 86 f0       	mov    0xf08626d0,%eax
f01102ac:	85 c0                	test   %eax,%eax
f01102ae:	74 17                	je     f01102c7 <test_alloc_block_NF+0x4e3>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01102b0:	83 ec 04             	sub    $0x4,%esp
f01102b3:	68 64 85 13 f0       	push   $0xf0138564
f01102b8:	68 1d 02 00 00       	push   $0x21d
f01102bd:	68 14 7b 13 f0       	push   $0xf0137b14
f01102c2:	e8 3e ff fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f01102c7:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f01102ce:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f01102d1:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo;
f01102d8:	c7 45 cc 00 b4 29 00 	movl   $0x29b400,-0x34(%ebp)
	BlocksSizes[6] = 512*kilo;
f01102df:	c7 45 ac 00 00 08 00 	movl   $0x80000,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f01102e6:	83 ec 0c             	sub    $0xc,%esp
f01102e9:	ff 75 d8             	pushl  -0x28(%ebp)
f01102ec:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f01102f2:	50                   	push   %eax
f01102f3:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01102f6:	50                   	push   %eax
f01102f7:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01102fa:	50                   	push   %eax
f01102fb:	68 60 27 86 f0       	push   $0xf0862760
f0110300:	e8 51 0f 00 00       	call   f0111256 <check_list_data>
f0110305:	83 c4 20             	add    $0x20,%esp
f0110308:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f011030b:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f011030f:	74 17                	je     f0110328 <test_alloc_block_NF+0x544>
f0110311:	83 ec 04             	sub    $0x4,%esp
f0110314:	68 c8 85 13 f0       	push   $0xf01385c8
f0110319:	68 25 02 00 00       	push   $0x225
f011031e:	68 14 7b 13 f0       	push   $0xf0137b14
f0110323:	e8 dd fe fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f0110328:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011032e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110331:	74 17                	je     f011034a <test_alloc_block_NF+0x566>
f0110333:	83 ec 04             	sub    $0x4,%esp
f0110336:	68 14 86 13 f0       	push   $0xf0138614
f011033b:	68 26 02 00 00       	push   $0x226
f0110340:	68 14 7b 13 f0       	push   $0xf0137b14
f0110345:	e8 bb fe fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 5: Try to allocate a block with a size smaller than the size of any existing free block (One from the updated blocks before in the free list)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(511*kilo);
f011034a:	83 ec 0c             	sub    $0xc,%esp
f011034d:	68 00 fc 07 00       	push   $0x7fc00
f0110352:	e8 61 24 02 00       	call   f01327b8 <alloc_block_NF>
f0110357:	83 c4 10             	add    $0x10,%esp
f011035a:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 511*kilo || blockToAlloc->sva != (0x21B400 + 512*kilo))
f011035d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0110361:	74 1a                	je     f011037d <test_alloc_block_NF+0x599>
f0110363:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110366:	8b 40 0c             	mov    0xc(%eax),%eax
f0110369:	3d 00 fc 07 00       	cmp    $0x7fc00,%eax
f011036e:	75 0d                	jne    f011037d <test_alloc_block_NF+0x599>
f0110370:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110373:	8b 40 08             	mov    0x8(%eax),%eax
f0110376:	3d 00 b4 29 00       	cmp    $0x29b400,%eax
f011037b:	74 17                	je     f0110394 <test_alloc_block_NF+0x5b0>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f011037d:	83 ec 04             	sub    $0x4,%esp
f0110380:	68 20 85 13 f0       	push   $0xf0138520
f0110385:	68 2f 02 00 00       	push   $0x22f
f011038a:	68 14 7b 13 f0       	push   $0xf0137b14
f011038f:	e8 71 fe fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f0110394:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f0110399:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011039c:	83 ea 02             	sub    $0x2,%edx
f011039f:	39 d0                	cmp    %edx,%eax
f01103a1:	75 13                	jne    f01103b6 <test_alloc_block_NF+0x5d2>
f01103a3:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f01103a8:	83 f8 06             	cmp    $0x6,%eax
f01103ab:	75 09                	jne    f01103b6 <test_alloc_block_NF+0x5d2>
f01103ad:	a1 d0 26 86 f0       	mov    0xf08626d0,%eax
f01103b2:	85 c0                	test   %eax,%eax
f01103b4:	74 17                	je     f01103cd <test_alloc_block_NF+0x5e9>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01103b6:	83 ec 04             	sub    $0x4,%esp
f01103b9:	68 64 85 13 f0       	push   $0xf0138564
f01103be:	68 33 02 00 00       	push   $0x233
f01103c3:	68 14 7b 13 f0       	push   $0xf0137b14
f01103c8:	e8 38 fe fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f01103cd:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f01103d4:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f01103d7:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo + (511*kilo);
f01103de:	c7 45 cc 00 b0 31 00 	movl   $0x31b000,-0x34(%ebp)
	BlocksSizes[6] = 1*kilo;
f01103e5:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f01103ec:	83 ec 0c             	sub    $0xc,%esp
f01103ef:	ff 75 d8             	pushl  -0x28(%ebp)
f01103f2:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f01103f8:	50                   	push   %eax
f01103f9:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01103fc:	50                   	push   %eax
f01103fd:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0110400:	50                   	push   %eax
f0110401:	68 60 27 86 f0       	push   $0xf0862760
f0110406:	e8 4b 0e 00 00       	call   f0111256 <check_list_data>
f011040b:	83 c4 20             	add    $0x20,%esp
f011040e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f0110411:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f0110415:	74 17                	je     f011042e <test_alloc_block_NF+0x64a>
f0110417:	83 ec 04             	sub    $0x4,%esp
f011041a:	68 c8 85 13 f0       	push   $0xf01385c8
f011041f:	68 3b 02 00 00       	push   $0x23b
f0110424:	68 14 7b 13 f0       	push   $0xf0137b14
f0110429:	e8 d7 fd fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f011042e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0110434:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110437:	74 17                	je     f0110450 <test_alloc_block_NF+0x66c>
f0110439:	83 ec 04             	sub    $0x4,%esp
f011043c:	68 14 86 13 f0       	push   $0xf0138614
f0110441:	68 3c 02 00 00       	push   $0x23c
f0110446:	68 14 7b 13 f0       	push   $0xf0137b14
f011044b:	e8 b5 fd fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 6: Try to allocate a block with a size smaller than ALL the NEXT existing blocks .. Shall start search from the start of the list*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(3*kilo);
f0110450:	83 ec 0c             	sub    $0xc,%esp
f0110453:	68 00 0c 00 00       	push   $0xc00
f0110458:	e8 5b 23 02 00       	call   f01327b8 <alloc_block_NF>
f011045d:	83 c4 10             	add    $0x10,%esp
f0110460:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x0)
f0110463:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0110467:	74 17                	je     f0110480 <test_alloc_block_NF+0x69c>
f0110469:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011046c:	8b 40 0c             	mov    0xc(%eax),%eax
f011046f:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f0110474:	75 0a                	jne    f0110480 <test_alloc_block_NF+0x69c>
f0110476:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110479:	8b 40 08             	mov    0x8(%eax),%eax
f011047c:	85 c0                	test   %eax,%eax
f011047e:	74 17                	je     f0110497 <test_alloc_block_NF+0x6b3>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f0110480:	83 ec 04             	sub    $0x4,%esp
f0110483:	68 20 85 13 f0       	push   $0xf0138520
f0110488:	68 45 02 00 00       	push   $0x245
f011048d:	68 14 7b 13 f0       	push   $0xf0137b14
f0110492:	e8 6e fd fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f0110497:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f011049c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011049f:	83 ea 02             	sub    $0x2,%edx
f01104a2:	39 d0                	cmp    %edx,%eax
f01104a4:	75 13                	jne    f01104b9 <test_alloc_block_NF+0x6d5>
f01104a6:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f01104ab:	83 f8 05             	cmp    $0x5,%eax
f01104ae:	75 09                	jne    f01104b9 <test_alloc_block_NF+0x6d5>
f01104b0:	a1 d0 26 86 f0       	mov    0xf08626d0,%eax
f01104b5:	85 c0                	test   %eax,%eax
f01104b7:	74 17                	je     f01104d0 <test_alloc_block_NF+0x6ec>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01104b9:	83 ec 04             	sub    $0x4,%esp
f01104bc:	68 64 85 13 f0       	push   $0xf0138564
f01104c1:	68 49 02 00 00       	push   $0x249
f01104c6:	68 14 7b 13 f0       	push   $0xf0137b14
f01104cb:	e8 35 fd fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f01104d0:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f01104d7:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f01104da:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0;
f01104e1:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	BlocksSizes[0] = 0;
f01104e8:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f01104ef:	83 ec 0c             	sub    $0xc,%esp
f01104f2:	ff 75 d8             	pushl  -0x28(%ebp)
f01104f5:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f01104fb:	50                   	push   %eax
f01104fc:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01104ff:	50                   	push   %eax
f0110500:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0110503:	50                   	push   %eax
f0110504:	68 60 27 86 f0       	push   $0xf0862760
f0110509:	e8 48 0d 00 00       	call   f0111256 <check_list_data>
f011050e:	83 c4 20             	add    $0x20,%esp
f0110511:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f0110514:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f0110518:	74 17                	je     f0110531 <test_alloc_block_NF+0x74d>
f011051a:	83 ec 04             	sub    $0x4,%esp
f011051d:	68 c8 85 13 f0       	push   $0xf01385c8
f0110522:	68 51 02 00 00       	push   $0x251
f0110527:	68 14 7b 13 f0       	push   $0xf0137b14
f011052c:	e8 d4 fc fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f0110531:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0110537:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011053a:	74 17                	je     f0110553 <test_alloc_block_NF+0x76f>
f011053c:	83 ec 04             	sub    $0x4,%esp
f011053f:	68 14 86 13 f0       	push   $0xf0138614
f0110544:	68 52 02 00 00       	push   $0x252
f0110549:	68 14 7b 13 f0       	push   $0xf0137b14
f011054e:	e8 b2 fc fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 7: Try to allocate a block with a size smaller than the existing blocks .. To try to update head not to remove it*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(1*kilo);
f0110553:	83 ec 0c             	sub    $0xc,%esp
f0110556:	68 00 04 00 00       	push   $0x400
f011055b:	e8 58 22 02 00       	call   f01327b8 <alloc_block_NF>
f0110560:	83 c4 10             	add    $0x10,%esp
f0110563:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*kilo || blockToAlloc->sva != 0x2000)
f0110566:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011056a:	74 1a                	je     f0110586 <test_alloc_block_NF+0x7a2>
f011056c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011056f:	8b 40 0c             	mov    0xc(%eax),%eax
f0110572:	3d 00 04 00 00       	cmp    $0x400,%eax
f0110577:	75 0d                	jne    f0110586 <test_alloc_block_NF+0x7a2>
f0110579:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011057c:	8b 40 08             	mov    0x8(%eax),%eax
f011057f:	3d 00 20 00 00       	cmp    $0x2000,%eax
f0110584:	74 17                	je     f011059d <test_alloc_block_NF+0x7b9>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f0110586:	83 ec 04             	sub    $0x4,%esp
f0110589:	68 20 85 13 f0       	push   $0xf0138520
f011058e:	68 5b 02 00 00       	push   $0x25b
f0110593:	68 14 7b 13 f0       	push   $0xf0137b14
f0110598:	e8 68 fc fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-3 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f011059d:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f01105a2:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01105a5:	83 ea 03             	sub    $0x3,%edx
f01105a8:	39 d0                	cmp    %edx,%eax
f01105aa:	75 13                	jne    f01105bf <test_alloc_block_NF+0x7db>
f01105ac:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f01105b1:	83 f8 05             	cmp    $0x5,%eax
f01105b4:	75 09                	jne    f01105bf <test_alloc_block_NF+0x7db>
f01105b6:	a1 d0 26 86 f0       	mov    0xf08626d0,%eax
f01105bb:	85 c0                	test   %eax,%eax
f01105bd:	74 17                	je     f01105d6 <test_alloc_block_NF+0x7f2>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01105bf:	83 ec 04             	sub    $0x4,%esp
f01105c2:	68 64 85 13 f0       	push   $0xf0138564
f01105c7:	68 5f 02 00 00       	push   $0x25f
f01105cc:	68 14 7b 13 f0       	push   $0xf0137b14
f01105d1:	e8 2f fc fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f01105d6:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f01105dd:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f01105e0:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[1] = 0x2000 + 1*kilo;
f01105e7:	c7 45 b8 00 24 00 00 	movl   $0x2400,-0x48(%ebp)
	BlocksSizes[1] = 7*kilo;
f01105ee:	c7 45 98 00 1c 00 00 	movl   $0x1c00,-0x68(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f01105f5:	83 ec 0c             	sub    $0xc,%esp
f01105f8:	ff 75 d8             	pushl  -0x28(%ebp)
f01105fb:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0110601:	50                   	push   %eax
f0110602:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110605:	50                   	push   %eax
f0110606:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0110609:	50                   	push   %eax
f011060a:	68 60 27 86 f0       	push   $0xf0862760
f011060f:	e8 42 0c 00 00       	call   f0111256 <check_list_data>
f0110614:	83 c4 20             	add    $0x20,%esp
f0110617:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f011061a:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f011061e:	74 17                	je     f0110637 <test_alloc_block_NF+0x853>
f0110620:	83 ec 04             	sub    $0x4,%esp
f0110623:	68 c8 85 13 f0       	push   $0xf01385c8
f0110628:	68 67 02 00 00       	push   $0x267
f011062d:	68 14 7b 13 f0       	push   $0xf0137b14
f0110632:	e8 ce fb fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f0110637:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011063d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110640:	74 17                	je     f0110659 <test_alloc_block_NF+0x875>
f0110642:	83 ec 04             	sub    $0x4,%esp
f0110645:	68 14 86 13 f0       	push   $0xf0138614
f011064a:	68 68 02 00 00       	push   $0x268
f011064f:	68 14 7b 13 f0       	push   $0xf0137b14
f0110654:	e8 ac fb fe ff       	call   f0100205 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_NF completed successfully.\n");
f0110659:	83 ec 0c             	sub    $0xc,%esp
f011065c:	68 60 86 13 f0       	push   $0xf0138660
f0110661:	e8 a8 06 ff ff       	call   f0100d0e <cprintf>
f0110666:	83 c4 10             	add    $0x10,%esp

}
f0110669:	90                   	nop
f011066a:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011066d:	5b                   	pop    %ebx
f011066e:	5e                   	pop    %esi
f011066f:	5f                   	pop    %edi
f0110670:	5d                   	pop    %ebp
f0110671:	c3                   	ret    

f0110672 <test_insert_sorted_with_merge_freeList>:

void test_insert_sorted_with_merge_freeList()
{
f0110672:	55                   	push   %ebp
f0110673:	89 e5                	mov    %esp,%ebp
f0110675:	57                   	push   %edi
f0110676:	81 ec 04 01 00 00    	sub    $0x104,%esp
	uint32 numOfBlocks = 10;
f011067c:	c7 45 f4 0a 00 00 00 	movl   $0xa,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f0110683:	83 ec 0c             	sub    $0xc,%esp
f0110686:	ff 75 f4             	pushl  -0xc(%ebp)
f0110689:	e8 e4 1a 02 00       	call   f0132172 <initialize_MemBlocksList>
f011068e:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f0110691:	c7 05 c4 26 86 f0 00 	movl   $0x0,0xf08626c4
f0110698:	00 00 00 
f011069b:	c7 05 c8 26 86 f0 00 	movl   $0x0,0xf08626c8
f01106a2:	00 00 00 
f01106a5:	c7 05 d0 26 86 f0 00 	movl   $0x0,0xf08626d0
f01106ac:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f01106af:	c7 05 60 27 86 f0 00 	movl   $0x0,0xf0862760
f01106b6:	00 00 00 
f01106b9:	c7 05 64 27 86 f0 00 	movl   $0x0,0xf0862764
f01106c0:	00 00 00 
f01106c3:	c7 05 6c 27 86 f0 00 	movl   $0x0,0xf086276c
f01106ca:	00 00 00 

	uint32 blocksToInsertSVAs[10]={0,0,0,0,0,0,0,0,0,0};
f01106cd:	8d 55 c0             	lea    -0x40(%ebp),%edx
f01106d0:	b9 0a 00 00 00       	mov    $0xa,%ecx
f01106d5:	b8 00 00 00 00       	mov    $0x0,%eax
f01106da:	89 d7                	mov    %edx,%edi
f01106dc:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[10]={0,0,0,0,0,0,0,0,0,0};
f01106de:	8d 55 98             	lea    -0x68(%ebp),%edx
f01106e1:	b9 0a 00 00 00       	mov    $0xa,%ecx
f01106e6:	b8 00 00 00 00       	mov    $0x0,%eax
f01106eb:	89 d7                	mov    %edx,%edi
f01106ed:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f01106ef:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	uint32 actualSize = 0;
f01106f6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	/*INSERT_SORTED_WITH MERGE Scenario 1: CASE 0 - Insert BLOCK_1 in the empty FreeMemBlocksList*/
	int idx_blocksToInsert = 3;
f01106fd:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo;
f0110704:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110707:	c7 44 85 c0 00 20 00 	movl   $0x2000,-0x40(%ebp,%eax,4)
f011070e:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f011070f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110712:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f0110719:	00 
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[idx_blocksToInsert];
f011071a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011071d:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110721:	89 45 8c             	mov    %eax,-0x74(%ebp)
	blockToInsert1.size = blocksToInsertSizes[idx_blocksToInsert];
f0110724:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110727:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011072b:	89 45 90             	mov    %eax,-0x70(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert1);
f011072e:	83 ec 0c             	sub    $0xc,%esp
f0110731:	8d 45 84             	lea    -0x7c(%ebp),%eax
f0110734:	50                   	push   %eax
f0110735:	e8 1e 22 02 00       	call   f0132958 <insert_sorted_with_merge_freeList>
f011073a:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 1)
f011073d:	a1 d0 26 86 f0       	mov    0xf08626d0,%eax
f0110742:	85 c0                	test   %eax,%eax
f0110744:	75 14                	jne    f011075a <test_insert_sorted_with_merge_freeList+0xe8>
f0110746:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f011074b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011074e:	75 0a                	jne    f011075a <test_insert_sorted_with_merge_freeList+0xe8>
f0110750:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f0110755:	83 f8 01             	cmp    $0x1,%eax
f0110758:	74 17                	je     f0110771 <test_insert_sorted_with_merge_freeList+0xff>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f011075a:	83 ec 04             	sub    $0x4,%esp
f011075d:	68 c0 86 13 f0       	push   $0xf01386c0
f0110762:	68 88 02 00 00       	push   $0x288
f0110767:	68 14 7b 13 f0       	push   $0xf0137b14
f011076c:	e8 94 fa fe ff       	call   f0100205 <_panic>

	//Check 2: Check the free list content
	size = 0;
f0110771:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 1;
f0110778:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f011077f:	83 ec 0c             	sub    $0xc,%esp
f0110782:	ff 75 f0             	pushl  -0x10(%ebp)
f0110785:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110788:	50                   	push   %eax
f0110789:	8d 45 98             	lea    -0x68(%ebp),%eax
f011078c:	50                   	push   %eax
f011078d:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110790:	50                   	push   %eax
f0110791:	68 60 27 86 f0       	push   $0xf0862760
f0110796:	e8 bb 0a 00 00       	call   f0111256 <check_list_data>
f011079b:	83 c4 20             	add    $0x20,%esp
f011079e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f01107a1:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01107a5:	74 17                	je     f01107be <test_insert_sorted_with_merge_freeList+0x14c>
f01107a7:	83 ec 04             	sub    $0x4,%esp
f01107aa:	68 2c 87 13 f0       	push   $0xf013872c
f01107af:	68 8e 02 00 00       	push   $0x28e
f01107b4:	68 14 7b 13 f0       	push   $0xf0137b14
f01107b9:	e8 47 fa fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f01107be:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01107c1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01107c4:	74 17                	je     f01107dd <test_insert_sorted_with_merge_freeList+0x16b>
f01107c6:	83 ec 04             	sub    $0x4,%esp
f01107c9:	68 80 87 13 f0       	push   $0xf0138780
f01107ce:	68 8f 02 00 00       	push   $0x28f
f01107d3:	68 14 7b 13 f0       	push   $0xf0137b14
f01107d8:	e8 28 fa fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 2: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE TAIL)*/
	idx_blocksToInsert = 7;
f01107dd:	c7 45 ec 07 00 00 00 	movl   $0x7,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo;
f01107e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01107e7:	c7 44 85 c0 00 80 00 	movl   $0x8000,-0x40(%ebp,%eax,4)
f01107ee:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 7*kilo;
f01107ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01107f2:	c7 44 85 98 00 1c 00 	movl   $0x1c00,-0x68(%ebp,%eax,4)
f01107f9:	00 
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[idx_blocksToInsert];
f01107fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01107fd:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110801:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	blockToInsert2.size = blocksToInsertSizes[idx_blocksToInsert];
f0110807:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011080a:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011080e:	89 45 80             	mov    %eax,-0x80(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert2);
f0110811:	83 ec 0c             	sub    $0xc,%esp
f0110814:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f011081a:	50                   	push   %eax
f011081b:	e8 38 21 02 00       	call   f0132958 <insert_sorted_with_merge_freeList>
f0110820:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 2)
f0110823:	a1 d0 26 86 f0       	mov    0xf08626d0,%eax
f0110828:	85 c0                	test   %eax,%eax
f011082a:	75 14                	jne    f0110840 <test_insert_sorted_with_merge_freeList+0x1ce>
f011082c:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f0110831:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110834:	75 0a                	jne    f0110840 <test_insert_sorted_with_merge_freeList+0x1ce>
f0110836:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f011083b:	83 f8 02             	cmp    $0x2,%eax
f011083e:	74 17                	je     f0110857 <test_insert_sorted_with_merge_freeList+0x1e5>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110840:	83 ec 04             	sub    $0x4,%esp
f0110843:	68 c0 86 13 f0       	push   $0xf01386c0
f0110848:	68 9e 02 00 00       	push   $0x29e
f011084d:	68 14 7b 13 f0       	push   $0xf0137b14
f0110852:	e8 ae f9 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110857:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 2;
f011085e:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110865:	83 ec 0c             	sub    $0xc,%esp
f0110868:	ff 75 f0             	pushl  -0x10(%ebp)
f011086b:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011086e:	50                   	push   %eax
f011086f:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110872:	50                   	push   %eax
f0110873:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110876:	50                   	push   %eax
f0110877:	68 60 27 86 f0       	push   $0xf0862760
f011087c:	e8 d5 09 00 00       	call   f0111256 <check_list_data>
f0110881:	83 c4 20             	add    $0x20,%esp
f0110884:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110887:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011088b:	74 17                	je     f01108a4 <test_insert_sorted_with_merge_freeList+0x232>
f011088d:	83 ec 04             	sub    $0x4,%esp
f0110890:	68 2c 87 13 f0       	push   $0xf013872c
f0110895:	68 a4 02 00 00       	push   $0x2a4
f011089a:	68 14 7b 13 f0       	push   $0xf0137b14
f011089f:	e8 61 f9 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f01108a4:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01108a7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01108aa:	74 17                	je     f01108c3 <test_insert_sorted_with_merge_freeList+0x251>
f01108ac:	83 ec 04             	sub    $0x4,%esp
f01108af:	68 80 87 13 f0       	push   $0xf0138780
f01108b4:	68 a5 02 00 00       	push   $0x2a5
f01108b9:	68 14 7b 13 f0       	push   $0xf0137b14
f01108be:	e8 42 f9 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 3: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE HEAD)*/
	idx_blocksToInsert = 1;
f01108c3:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 1*kilo;
f01108ca:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01108cd:	c7 44 85 c0 00 04 00 	movl   $0x400,-0x40(%ebp,%eax,4)
f01108d4:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f01108d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01108d8:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f01108df:	00 
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[idx_blocksToInsert];
f01108e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01108e3:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f01108e7:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
	blockToInsert3.size = blocksToInsertSizes[idx_blocksToInsert];
f01108ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01108f0:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01108f4:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert3);
f01108fa:	83 ec 0c             	sub    $0xc,%esp
f01108fd:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
f0110903:	50                   	push   %eax
f0110904:	e8 4f 20 02 00       	call   f0132958 <insert_sorted_with_merge_freeList>
f0110909:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f011090c:	a1 d0 26 86 f0       	mov    0xf08626d0,%eax
f0110911:	85 c0                	test   %eax,%eax
f0110913:	75 14                	jne    f0110929 <test_insert_sorted_with_merge_freeList+0x2b7>
f0110915:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f011091a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011091d:	75 0a                	jne    f0110929 <test_insert_sorted_with_merge_freeList+0x2b7>
f011091f:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f0110924:	83 f8 03             	cmp    $0x3,%eax
f0110927:	74 17                	je     f0110940 <test_insert_sorted_with_merge_freeList+0x2ce>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110929:	83 ec 04             	sub    $0x4,%esp
f011092c:	68 c0 86 13 f0       	push   $0xf01386c0
f0110931:	68 b4 02 00 00       	push   $0x2b4
f0110936:	68 14 7b 13 f0       	push   $0xf0137b14
f011093b:	e8 c5 f8 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110940:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f0110947:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f011094e:	83 ec 0c             	sub    $0xc,%esp
f0110951:	ff 75 f0             	pushl  -0x10(%ebp)
f0110954:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110957:	50                   	push   %eax
f0110958:	8d 45 98             	lea    -0x68(%ebp),%eax
f011095b:	50                   	push   %eax
f011095c:	8d 45 c0             	lea    -0x40(%ebp),%eax
f011095f:	50                   	push   %eax
f0110960:	68 60 27 86 f0       	push   $0xf0862760
f0110965:	e8 ec 08 00 00       	call   f0111256 <check_list_data>
f011096a:	83 c4 20             	add    $0x20,%esp
f011096d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110970:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110974:	74 17                	je     f011098d <test_insert_sorted_with_merge_freeList+0x31b>
f0110976:	83 ec 04             	sub    $0x4,%esp
f0110979:	68 2c 87 13 f0       	push   $0xf013872c
f011097e:	68 ba 02 00 00       	push   $0x2ba
f0110983:	68 14 7b 13 f0       	push   $0xf0137b14
f0110988:	e8 78 f8 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f011098d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110990:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110993:	74 17                	je     f01109ac <test_insert_sorted_with_merge_freeList+0x33a>
f0110995:	83 ec 04             	sub    $0x4,%esp
f0110998:	68 80 87 13 f0       	push   $0xf0138780
f011099d:	68 bb 02 00 00       	push   $0x2bb
f01109a2:	68 14 7b 13 f0       	push   $0xf0137b14
f01109a7:	e8 59 f8 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 4: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 6;
f01109ac:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 10*kilo;
f01109b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01109b6:	c7 44 85 c0 00 58 00 	movl   $0x5800,-0x40(%ebp,%eax,4)
f01109bd:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f01109be:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01109c1:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f01109c8:	00 
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[idx_blocksToInsert];
f01109c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01109cc:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f01109d0:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
	blockToInsert4.size = blocksToInsertSizes[idx_blocksToInsert];
f01109d6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01109d9:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01109dd:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert4);
f01109e3:	83 ec 0c             	sub    $0xc,%esp
f01109e6:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f01109ec:	50                   	push   %eax
f01109ed:	e8 66 1f 02 00       	call   f0132958 <insert_sorted_with_merge_freeList>
f01109f2:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f01109f5:	a1 d0 26 86 f0       	mov    0xf08626d0,%eax
f01109fa:	85 c0                	test   %eax,%eax
f01109fc:	75 14                	jne    f0110a12 <test_insert_sorted_with_merge_freeList+0x3a0>
f01109fe:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f0110a03:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110a06:	75 0a                	jne    f0110a12 <test_insert_sorted_with_merge_freeList+0x3a0>
f0110a08:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f0110a0d:	83 f8 04             	cmp    $0x4,%eax
f0110a10:	74 17                	je     f0110a29 <test_insert_sorted_with_merge_freeList+0x3b7>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110a12:	83 ec 04             	sub    $0x4,%esp
f0110a15:	68 c0 86 13 f0       	push   $0xf01386c0
f0110a1a:	68 ca 02 00 00       	push   $0x2ca
f0110a1f:	68 14 7b 13 f0       	push   $0xf0137b14
f0110a24:	e8 dc f7 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110a29:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110a30:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110a37:	83 ec 0c             	sub    $0xc,%esp
f0110a3a:	ff 75 f0             	pushl  -0x10(%ebp)
f0110a3d:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110a40:	50                   	push   %eax
f0110a41:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110a44:	50                   	push   %eax
f0110a45:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110a48:	50                   	push   %eax
f0110a49:	68 60 27 86 f0       	push   $0xf0862760
f0110a4e:	e8 03 08 00 00       	call   f0111256 <check_list_data>
f0110a53:	83 c4 20             	add    $0x20,%esp
f0110a56:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110a59:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110a5d:	74 17                	je     f0110a76 <test_insert_sorted_with_merge_freeList+0x404>
f0110a5f:	83 ec 04             	sub    $0x4,%esp
f0110a62:	68 2c 87 13 f0       	push   $0xf013872c
f0110a67:	68 d0 02 00 00       	push   $0x2d0
f0110a6c:	68 14 7b 13 f0       	push   $0xf0137b14
f0110a71:	e8 8f f7 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110a76:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110a79:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110a7c:	74 17                	je     f0110a95 <test_insert_sorted_with_merge_freeList+0x423>
f0110a7e:	83 ec 04             	sub    $0x4,%esp
f0110a81:	68 80 87 13 f0       	push   $0xf0138780
f0110a86:	68 d1 02 00 00       	push   $0x2d1
f0110a8b:	68 14 7b 13 f0       	push   $0xf0137b14
f0110a90:	e8 70 f7 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 5: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (AT the tail)*/
	idx_blocksToInsert = 8;
f0110a95:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo + 7*kilo;
f0110a9c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110a9f:	c7 44 85 c0 00 9c 00 	movl   $0x9c00,-0x40(%ebp,%eax,4)
f0110aa6:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 3*kilo;
f0110aa7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110aaa:	c7 44 85 98 00 0c 00 	movl   $0xc00,-0x68(%ebp,%eax,4)
f0110ab1:	00 
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110ab2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ab5:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110ab9:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
	blockToInsert5.size = blocksToInsertSizes[idx_blocksToInsert];
f0110abf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ac2:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110ac6:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert5);
f0110acc:	83 ec 0c             	sub    $0xc,%esp
f0110acf:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
f0110ad5:	50                   	push   %eax
f0110ad6:	e8 7d 1e 02 00       	call   f0132958 <insert_sorted_with_merge_freeList>
f0110adb:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 1 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110ade:	a1 d0 26 86 f0       	mov    0xf08626d0,%eax
f0110ae3:	85 c0                	test   %eax,%eax
f0110ae5:	75 17                	jne    f0110afe <test_insert_sorted_with_merge_freeList+0x48c>
f0110ae7:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f0110aec:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110aef:	42                   	inc    %edx
f0110af0:	39 d0                	cmp    %edx,%eax
f0110af2:	75 0a                	jne    f0110afe <test_insert_sorted_with_merge_freeList+0x48c>
f0110af4:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f0110af9:	83 f8 04             	cmp    $0x4,%eax
f0110afc:	74 17                	je     f0110b15 <test_insert_sorted_with_merge_freeList+0x4a3>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110afe:	83 ec 04             	sub    $0x4,%esp
f0110b01:	68 c0 86 13 f0       	push   $0xf01386c0
f0110b06:	68 e3 02 00 00       	push   $0x2e3
f0110b0b:	68 14 7b 13 f0       	push   $0xf0137b14
f0110b10:	e8 f0 f6 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110b15:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110b1c:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f0110b23:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110b26:	8d 50 ff             	lea    -0x1(%eax),%edx
f0110b29:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110b2c:	48                   	dec    %eax
f0110b2d:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110b31:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110b34:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110b38:	01 c8                	add    %ecx,%eax
f0110b3a:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110b3e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110b41:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110b48:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110b49:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110b4c:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110b53:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110b54:	83 ec 0c             	sub    $0xc,%esp
f0110b57:	ff 75 f0             	pushl  -0x10(%ebp)
f0110b5a:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110b5d:	50                   	push   %eax
f0110b5e:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110b61:	50                   	push   %eax
f0110b62:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110b65:	50                   	push   %eax
f0110b66:	68 60 27 86 f0       	push   $0xf0862760
f0110b6b:	e8 e6 06 00 00       	call   f0111256 <check_list_data>
f0110b70:	83 c4 20             	add    $0x20,%esp
f0110b73:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110b76:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110b7a:	74 17                	je     f0110b93 <test_insert_sorted_with_merge_freeList+0x521>
f0110b7c:	83 ec 04             	sub    $0x4,%esp
f0110b7f:	68 2c 87 13 f0       	push   $0xf013872c
f0110b84:	68 ec 02 00 00       	push   $0x2ec
f0110b89:	68 14 7b 13 f0       	push   $0xf0137b14
f0110b8e:	e8 72 f6 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110b93:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110b96:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110b99:	74 17                	je     f0110bb2 <test_insert_sorted_with_merge_freeList+0x540>
f0110b9b:	83 ec 04             	sub    $0x4,%esp
f0110b9e:	68 80 87 13 f0       	push   $0xf0138780
f0110ba3:	68 ed 02 00 00       	push   $0x2ed
f0110ba8:	68 14 7b 13 f0       	push   $0xf0137b14
f0110bad:	e8 53 f6 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110bb2:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0110bb9:	83 ec 0c             	sub    $0xc,%esp
f0110bbc:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110bbf:	50                   	push   %eax
f0110bc0:	e8 5d 07 00 00       	call   f0111322 <check_avaliable_list_data>
f0110bc5:	83 c4 10             	add    $0x10,%esp
f0110bc8:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110bcb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110bce:	8d 50 01             	lea    0x1(%eax),%edx
f0110bd1:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110bd4:	39 c2                	cmp    %eax,%edx
f0110bd6:	74 17                	je     f0110bef <test_insert_sorted_with_merge_freeList+0x57d>
f0110bd8:	83 ec 04             	sub    $0x4,%esp
f0110bdb:	68 d4 87 13 f0       	push   $0xf01387d4
f0110be0:	68 f2 02 00 00       	push   $0x2f2
f0110be5:	68 14 7b 13 f0       	push   $0xf0137b14
f0110bea:	e8 16 f6 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110bef:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110bf3:	74 17                	je     f0110c0c <test_insert_sorted_with_merge_freeList+0x59a>
f0110bf5:	83 ec 04             	sub    $0x4,%esp
f0110bf8:	68 2c 88 13 f0       	push   $0xf013882c
f0110bfd:	68 f3 02 00 00       	push   $0x2f3
f0110c02:	68 14 7b 13 f0       	push   $0xf0137b14
f0110c07:	e8 f9 f5 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 6: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 4;
f0110c0c:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo;
f0110c13:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c16:	c7 44 85 c0 00 30 00 	movl   $0x3000,-0x40(%ebp,%eax,4)
f0110c1d:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f0110c1e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c21:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f0110c28:	00 
	struct MemBlock blockToInsert6;
	blockToInsert6.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110c29:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c2c:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110c30:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
	blockToInsert6.size = blocksToInsertSizes[idx_blocksToInsert];
f0110c36:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c39:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110c3d:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert6);
f0110c43:	83 ec 0c             	sub    $0xc,%esp
f0110c46:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0110c4c:	50                   	push   %eax
f0110c4d:	e8 06 1d 02 00       	call   f0132958 <insert_sorted_with_merge_freeList>
f0110c52:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 2 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110c55:	a1 d0 26 86 f0       	mov    0xf08626d0,%eax
f0110c5a:	85 c0                	test   %eax,%eax
f0110c5c:	75 19                	jne    f0110c77 <test_insert_sorted_with_merge_freeList+0x605>
f0110c5e:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f0110c63:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110c66:	83 c2 02             	add    $0x2,%edx
f0110c69:	39 d0                	cmp    %edx,%eax
f0110c6b:	75 0a                	jne    f0110c77 <test_insert_sorted_with_merge_freeList+0x605>
f0110c6d:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f0110c72:	83 f8 04             	cmp    $0x4,%eax
f0110c75:	74 17                	je     f0110c8e <test_insert_sorted_with_merge_freeList+0x61c>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110c77:	83 ec 04             	sub    $0x4,%esp
f0110c7a:	68 c0 86 13 f0       	push   $0xf01386c0
f0110c7f:	68 05 03 00 00       	push   $0x305
f0110c84:	68 14 7b 13 f0       	push   $0xf0137b14
f0110c89:	e8 77 f5 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110c8e:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110c95:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f0110c9c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c9f:	8d 50 ff             	lea    -0x1(%eax),%edx
f0110ca2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ca5:	48                   	dec    %eax
f0110ca6:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110caa:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110cad:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110cb1:	01 c8                	add    %ecx,%eax
f0110cb3:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110cb7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110cba:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110cc1:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110cc2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110cc5:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110ccc:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110ccd:	83 ec 0c             	sub    $0xc,%esp
f0110cd0:	ff 75 f0             	pushl  -0x10(%ebp)
f0110cd3:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110cd6:	50                   	push   %eax
f0110cd7:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110cda:	50                   	push   %eax
f0110cdb:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110cde:	50                   	push   %eax
f0110cdf:	68 60 27 86 f0       	push   $0xf0862760
f0110ce4:	e8 6d 05 00 00       	call   f0111256 <check_list_data>
f0110ce9:	83 c4 20             	add    $0x20,%esp
f0110cec:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110cef:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110cf3:	74 17                	je     f0110d0c <test_insert_sorted_with_merge_freeList+0x69a>
f0110cf5:	83 ec 04             	sub    $0x4,%esp
f0110cf8:	68 2c 87 13 f0       	push   $0xf013872c
f0110cfd:	68 0e 03 00 00       	push   $0x30e
f0110d02:	68 14 7b 13 f0       	push   $0xf0137b14
f0110d07:	e8 f9 f4 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110d0c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110d0f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110d12:	74 17                	je     f0110d2b <test_insert_sorted_with_merge_freeList+0x6b9>
f0110d14:	83 ec 04             	sub    $0x4,%esp
f0110d17:	68 80 87 13 f0       	push   $0xf0138780
f0110d1c:	68 0f 03 00 00       	push   $0x30f
f0110d21:	68 14 7b 13 f0       	push   $0xf0137b14
f0110d26:	e8 da f4 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110d2b:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0110d32:	83 ec 0c             	sub    $0xc,%esp
f0110d35:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110d38:	50                   	push   %eax
f0110d39:	e8 e4 05 00 00       	call   f0111322 <check_avaliable_list_data>
f0110d3e:	83 c4 10             	add    $0x10,%esp
f0110d41:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 2) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110d44:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110d47:	8d 50 02             	lea    0x2(%eax),%edx
f0110d4a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110d4d:	39 c2                	cmp    %eax,%edx
f0110d4f:	74 17                	je     f0110d68 <test_insert_sorted_with_merge_freeList+0x6f6>
f0110d51:	83 ec 04             	sub    $0x4,%esp
f0110d54:	68 d4 87 13 f0       	push   $0xf01387d4
f0110d59:	68 14 03 00 00       	push   $0x314
f0110d5e:	68 14 7b 13 f0       	push   $0xf0137b14
f0110d63:	e8 9d f4 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110d68:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110d6c:	74 17                	je     f0110d85 <test_insert_sorted_with_merge_freeList+0x713>
f0110d6e:	83 ec 04             	sub    $0x4,%esp
f0110d71:	68 2c 88 13 f0       	push   $0xf013882c
f0110d76:	68 15 03 00 00       	push   $0x315
f0110d7b:	68 14 7b 13 f0       	push   $0xf0137b14
f0110d80:	e8 80 f4 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 7: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (AT the head)*/
	idx_blocksToInsert = 0;
f0110d85:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110d8c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110d8f:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110d96:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f0110d97:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110d9a:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f0110da1:	00 
	struct MemBlock blockToInsert7;
	blockToInsert7.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110da2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110da5:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110da9:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
	blockToInsert7.size = blocksToInsertSizes[idx_blocksToInsert];
f0110daf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110db2:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110db6:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert7);
f0110dbc:	83 ec 0c             	sub    $0xc,%esp
f0110dbf:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0110dc5:	50                   	push   %eax
f0110dc6:	e8 8d 1b 02 00       	call   f0132958 <insert_sorted_with_merge_freeList>
f0110dcb:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 3 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110dce:	a1 d0 26 86 f0       	mov    0xf08626d0,%eax
f0110dd3:	85 c0                	test   %eax,%eax
f0110dd5:	75 19                	jne    f0110df0 <test_insert_sorted_with_merge_freeList+0x77e>
f0110dd7:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f0110ddc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110ddf:	83 c2 03             	add    $0x3,%edx
f0110de2:	39 d0                	cmp    %edx,%eax
f0110de4:	75 0a                	jne    f0110df0 <test_insert_sorted_with_merge_freeList+0x77e>
f0110de6:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f0110deb:	83 f8 04             	cmp    $0x4,%eax
f0110dee:	74 17                	je     f0110e07 <test_insert_sorted_with_merge_freeList+0x795>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110df0:	83 ec 04             	sub    $0x4,%esp
f0110df3:	68 c0 86 13 f0       	push   $0xf01386c0
f0110df8:	68 28 03 00 00       	push   $0x328
f0110dfd:	68 14 7b 13 f0       	push   $0xf0137b14
f0110e02:	e8 fe f3 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110e07:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110e0e:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f0110e15:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110e18:	8d 50 01             	lea    0x1(%eax),%edx
f0110e1b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110e1e:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110e22:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f0110e26:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110e29:	8d 50 01             	lea    0x1(%eax),%edx
f0110e2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110e2f:	40                   	inc    %eax
f0110e30:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110e34:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110e37:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110e3b:	01 c8                	add    %ecx,%eax
f0110e3d:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110e41:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110e44:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110e4b:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110e4c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110e4f:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110e56:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110e57:	83 ec 0c             	sub    $0xc,%esp
f0110e5a:	ff 75 f0             	pushl  -0x10(%ebp)
f0110e5d:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110e60:	50                   	push   %eax
f0110e61:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110e64:	50                   	push   %eax
f0110e65:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110e68:	50                   	push   %eax
f0110e69:	68 60 27 86 f0       	push   $0xf0862760
f0110e6e:	e8 e3 03 00 00       	call   f0111256 <check_list_data>
f0110e73:	83 c4 20             	add    $0x20,%esp
f0110e76:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110e79:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110e7d:	74 17                	je     f0110e96 <test_insert_sorted_with_merge_freeList+0x824>
f0110e7f:	83 ec 04             	sub    $0x4,%esp
f0110e82:	68 2c 87 13 f0       	push   $0xf013872c
f0110e87:	68 32 03 00 00       	push   $0x332
f0110e8c:	68 14 7b 13 f0       	push   $0xf0137b14
f0110e91:	e8 6f f3 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110e96:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110e99:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110e9c:	74 17                	je     f0110eb5 <test_insert_sorted_with_merge_freeList+0x843>
f0110e9e:	83 ec 04             	sub    $0x4,%esp
f0110ea1:	68 80 87 13 f0       	push   $0xf0138780
f0110ea6:	68 33 03 00 00       	push   $0x333
f0110eab:	68 14 7b 13 f0       	push   $0xf0137b14
f0110eb0:	e8 50 f3 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110eb5:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0110ebc:	83 ec 0c             	sub    $0xc,%esp
f0110ebf:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110ec2:	50                   	push   %eax
f0110ec3:	e8 5a 04 00 00       	call   f0111322 <check_avaliable_list_data>
f0110ec8:	83 c4 10             	add    $0x10,%esp
f0110ecb:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 3) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110ece:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110ed1:	8d 50 03             	lea    0x3(%eax),%edx
f0110ed4:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110ed7:	39 c2                	cmp    %eax,%edx
f0110ed9:	74 17                	je     f0110ef2 <test_insert_sorted_with_merge_freeList+0x880>
f0110edb:	83 ec 04             	sub    $0x4,%esp
f0110ede:	68 d4 87 13 f0       	push   $0xf01387d4
f0110ee3:	68 38 03 00 00       	push   $0x338
f0110ee8:	68 14 7b 13 f0       	push   $0xf0137b14
f0110eed:	e8 13 f3 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110ef2:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110ef6:	74 17                	je     f0110f0f <test_insert_sorted_with_merge_freeList+0x89d>
f0110ef8:	83 ec 04             	sub    $0x4,%esp
f0110efb:	68 2c 88 13 f0       	push   $0xf013882c
f0110f00:	68 39 03 00 00       	push   $0x339
f0110f05:	68 14 7b 13 f0       	push   $0xf0137b14
f0110f0a:	e8 f6 f2 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 8: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 5;
f0110f0f:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = (8*kilo + 4*kilo + 10*kilo) - (4*kilo);
f0110f16:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f19:	c7 44 85 c0 00 48 00 	movl   $0x4800,-0x40(%ebp,%eax,4)
f0110f20:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f0110f21:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f24:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f0110f2b:	00 
	struct MemBlock blockToInsert8;
	blockToInsert8.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110f2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f2f:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110f33:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
	blockToInsert8.size = blocksToInsertSizes[idx_blocksToInsert];
f0110f39:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f3c:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110f40:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert8);
f0110f46:	83 ec 0c             	sub    $0xc,%esp
f0110f49:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f0110f4f:	50                   	push   %eax
f0110f50:	e8 03 1a 02 00       	call   f0132958 <insert_sorted_with_merge_freeList>
f0110f55:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 4 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110f58:	a1 d0 26 86 f0       	mov    0xf08626d0,%eax
f0110f5d:	85 c0                	test   %eax,%eax
f0110f5f:	75 19                	jne    f0110f7a <test_insert_sorted_with_merge_freeList+0x908>
f0110f61:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f0110f66:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110f69:	83 c2 04             	add    $0x4,%edx
f0110f6c:	39 d0                	cmp    %edx,%eax
f0110f6e:	75 0a                	jne    f0110f7a <test_insert_sorted_with_merge_freeList+0x908>
f0110f70:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f0110f75:	83 f8 04             	cmp    $0x4,%eax
f0110f78:	74 17                	je     f0110f91 <test_insert_sorted_with_merge_freeList+0x91f>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110f7a:	83 ec 04             	sub    $0x4,%esp
f0110f7d:	68 c0 86 13 f0       	push   $0xf01386c0
f0110f82:	68 4c 03 00 00       	push   $0x34c
f0110f87:	68 14 7b 13 f0       	push   $0xf0137b14
f0110f8c:	e8 74 f2 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110f91:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110f98:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f0110f9f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110fa2:	8d 50 01             	lea    0x1(%eax),%edx
f0110fa5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110fa8:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110fac:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f0110fb0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110fb3:	8d 50 01             	lea    0x1(%eax),%edx
f0110fb6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110fb9:	40                   	inc    %eax
f0110fba:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110fbe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110fc1:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110fc5:	01 c8                	add    %ecx,%eax
f0110fc7:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110fcb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110fce:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110fd5:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110fd6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110fd9:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110fe0:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110fe1:	83 ec 0c             	sub    $0xc,%esp
f0110fe4:	ff 75 f0             	pushl  -0x10(%ebp)
f0110fe7:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110fea:	50                   	push   %eax
f0110feb:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110fee:	50                   	push   %eax
f0110fef:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110ff2:	50                   	push   %eax
f0110ff3:	68 60 27 86 f0       	push   $0xf0862760
f0110ff8:	e8 59 02 00 00       	call   f0111256 <check_list_data>
f0110ffd:	83 c4 20             	add    $0x20,%esp
f0111000:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0111003:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111007:	74 17                	je     f0111020 <test_insert_sorted_with_merge_freeList+0x9ae>
f0111009:	83 ec 04             	sub    $0x4,%esp
f011100c:	68 2c 87 13 f0       	push   $0xf013872c
f0111011:	68 56 03 00 00       	push   $0x356
f0111016:	68 14 7b 13 f0       	push   $0xf0137b14
f011101b:	e8 e5 f1 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0111020:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111023:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111026:	74 17                	je     f011103f <test_insert_sorted_with_merge_freeList+0x9cd>
f0111028:	83 ec 04             	sub    $0x4,%esp
f011102b:	68 80 87 13 f0       	push   $0xf0138780
f0111030:	68 57 03 00 00       	push   $0x357
f0111035:	68 14 7b 13 f0       	push   $0xf0137b14
f011103a:	e8 c6 f1 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f011103f:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0111046:	83 ec 0c             	sub    $0xc,%esp
f0111049:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011104c:	50                   	push   %eax
f011104d:	e8 d0 02 00 00       	call   f0111322 <check_avaliable_list_data>
f0111052:	83 c4 10             	add    $0x10,%esp
f0111055:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 4) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0111058:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011105b:	8d 50 04             	lea    0x4(%eax),%edx
f011105e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111061:	39 c2                	cmp    %eax,%edx
f0111063:	74 17                	je     f011107c <test_insert_sorted_with_merge_freeList+0xa0a>
f0111065:	83 ec 04             	sub    $0x4,%esp
f0111068:	68 d4 87 13 f0       	push   $0xf01387d4
f011106d:	68 5c 03 00 00       	push   $0x35c
f0111072:	68 14 7b 13 f0       	push   $0xf0137b14
f0111077:	e8 89 f1 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f011107c:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111080:	74 17                	je     f0111099 <test_insert_sorted_with_merge_freeList+0xa27>
f0111082:	83 ec 04             	sub    $0x4,%esp
f0111085:	68 2c 88 13 f0       	push   $0xf013882c
f011108a:	68 5d 03 00 00       	push   $0x35d
f011108f:	68 14 7b 13 f0       	push   $0xf0137b14
f0111094:	e8 6c f1 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 9: CASE 4 - Merge with prev & next in the FreeMemBlocksList */
	idx_blocksToInsert = 2;
f0111099:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 2*kilo;
f01110a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01110a3:	c7 44 85 c0 00 08 00 	movl   $0x800,-0x40(%ebp,%eax,4)
f01110aa:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0x2000 - 2*kilo; //6144
f01110ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01110ae:	c7 44 85 98 00 18 00 	movl   $0x1800,-0x68(%ebp,%eax,4)
f01110b5:	00 
	struct MemBlock blockToInsert9;
	blockToInsert9.sva = blocksToInsertSVAs[idx_blocksToInsert];
f01110b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01110b9:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f01110bd:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
	blockToInsert9.size = blocksToInsertSizes[idx_blocksToInsert];
f01110c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01110c6:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01110ca:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)

	//printf("===>BEFORE\n");
	//show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert9);
f01110d0:	83 ec 0c             	sub    $0xc,%esp
f01110d3:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01110d9:	50                   	push   %eax
f01110da:	e8 79 18 02 00       	call   f0132958 <insert_sorted_with_merge_freeList>
f01110df:	83 c4 10             	add    $0x10,%esp
	//show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 6 || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f01110e2:	a1 d0 26 86 f0       	mov    0xf08626d0,%eax
f01110e7:	85 c0                	test   %eax,%eax
f01110e9:	75 19                	jne    f0111104 <test_insert_sorted_with_merge_freeList+0xa92>
f01110eb:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f01110f0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01110f3:	83 c2 06             	add    $0x6,%edx
f01110f6:	39 d0                	cmp    %edx,%eax
f01110f8:	75 0a                	jne    f0111104 <test_insert_sorted_with_merge_freeList+0xa92>
f01110fa:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f01110ff:	83 f8 03             	cmp    $0x3,%eax
f0111102:	74 17                	je     f011111b <test_insert_sorted_with_merge_freeList+0xaa9>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0111104:	83 ec 04             	sub    $0x4,%esp
f0111107:	68 c0 86 13 f0       	push   $0xf01386c0
f011110c:	68 70 03 00 00       	push   $0x370
f0111111:	68 14 7b 13 f0       	push   $0xf0137b14
f0111116:	e8 ea f0 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f011111b:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f0111122:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert-1] = 0x0;
f0111129:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011112c:	48                   	dec    %eax
f011112d:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0111134:	00 
	blocksToInsertSizes[idx_blocksToInsert-1] = blocksToInsertSizes[idx_blocksToInsert-1] + blocksToInsertSizes[idx_blocksToInsert] + blocksToInsertSizes[idx_blocksToInsert+1];
f0111135:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111138:	8d 50 ff             	lea    -0x1(%eax),%edx
f011113b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011113e:	48                   	dec    %eax
f011113f:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0111143:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111146:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011114a:	01 c1                	add    %eax,%ecx
f011114c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011114f:	40                   	inc    %eax
f0111150:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0111154:	01 c8                	add    %ecx,%eax
f0111156:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f011115a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011115d:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0111164:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0111165:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111168:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f011116f:	00 
	blocksToInsertSVAs[idx_blocksToInsert+1] = 0x0;
f0111170:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111173:	40                   	inc    %eax
f0111174:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f011117b:	00 
	blocksToInsertSizes[idx_blocksToInsert+1] = 0;
f011117c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011117f:	40                   	inc    %eax
f0111180:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0111187:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0111188:	83 ec 0c             	sub    $0xc,%esp
f011118b:	ff 75 f0             	pushl  -0x10(%ebp)
f011118e:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0111191:	50                   	push   %eax
f0111192:	8d 45 98             	lea    -0x68(%ebp),%eax
f0111195:	50                   	push   %eax
f0111196:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0111199:	50                   	push   %eax
f011119a:	68 60 27 86 f0       	push   $0xf0862760
f011119f:	e8 b2 00 00 00       	call   f0111256 <check_list_data>
f01111a4:	83 c4 20             	add    $0x20,%esp
f01111a7:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f01111aa:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01111ae:	74 17                	je     f01111c7 <test_insert_sorted_with_merge_freeList+0xb55>
f01111b0:	83 ec 04             	sub    $0x4,%esp
f01111b3:	68 2c 87 13 f0       	push   $0xf013872c
f01111b8:	68 7c 03 00 00       	push   $0x37c
f01111bd:	68 14 7b 13 f0       	push   $0xf0137b14
f01111c2:	e8 3e f0 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f01111c7:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01111ca:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01111cd:	74 17                	je     f01111e6 <test_insert_sorted_with_merge_freeList+0xb74>
f01111cf:	83 ec 04             	sub    $0x4,%esp
f01111d2:	68 80 87 13 f0       	push   $0xf0138780
f01111d7:	68 7d 03 00 00       	push   $0x37d
f01111dc:	68 14 7b 13 f0       	push   $0xf0137b14
f01111e1:	e8 1f f0 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f01111e6:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f01111ed:	83 ec 0c             	sub    $0xc,%esp
f01111f0:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01111f3:	50                   	push   %eax
f01111f4:	e8 29 01 00 00       	call   f0111322 <check_avaliable_list_data>
f01111f9:	83 c4 10             	add    $0x10,%esp
f01111fc:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 6) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f01111ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111202:	8d 50 06             	lea    0x6(%eax),%edx
f0111205:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111208:	39 c2                	cmp    %eax,%edx
f011120a:	74 17                	je     f0111223 <test_insert_sorted_with_merge_freeList+0xbb1>
f011120c:	83 ec 04             	sub    $0x4,%esp
f011120f:	68 d4 87 13 f0       	push   $0xf01387d4
f0111214:	68 82 03 00 00       	push   $0x382
f0111219:	68 14 7b 13 f0       	push   $0xf0137b14
f011121e:	e8 e2 ef fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0111223:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111227:	74 17                	je     f0111240 <test_insert_sorted_with_merge_freeList+0xbce>
f0111229:	83 ec 04             	sub    $0x4,%esp
f011122c:	68 2c 88 13 f0       	push   $0xf013882c
f0111231:	68 83 03 00 00       	push   $0x383
f0111236:	68 14 7b 13 f0       	push   $0xf0137b14
f011123b:	e8 c5 ef fe ff       	call   f0100205 <_panic>
	//====================================================================//


	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test insert_sorted_with_merge_freeList completed successfully.\n");
f0111240:	83 ec 0c             	sub    $0xc,%esp
f0111243:	68 88 88 13 f0       	push   $0xf0138888
f0111248:	e8 c1 fa fe ff       	call   f0100d0e <cprintf>
f011124d:	83 c4 10             	add    $0x10,%esp

}
f0111250:	90                   	nop
f0111251:	8b 7d fc             	mov    -0x4(%ebp),%edi
f0111254:	c9                   	leave  
f0111255:	c3                   	ret    

f0111256 <check_list_data>:

/********************Helper Functions***************************/
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
f0111256:	55                   	push   %ebp
f0111257:	89 e5                	mov    %esp,%ebp
f0111259:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f011125c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f0111263:	8b 45 14             	mov    0x14(%ebp),%eax
f0111266:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i = 0;
f011126c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	LIST_FOREACH(node, list)
f0111273:	8b 45 08             	mov    0x8(%ebp),%eax
f0111276:	8b 00                	mov    (%eax),%eax
f0111278:	89 45 fc             	mov    %eax,-0x4(%ebp)
f011127b:	eb 6e                	jmp    f01112eb <check_list_data+0x95>
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
			i++;
f011127d:	ff 45 f8             	incl   -0x8(%ebp)
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
f0111280:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111283:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011128a:	8b 45 10             	mov    0x10(%ebp),%eax
f011128d:	01 d0                	add    %edx,%eax
f011128f:	8b 00                	mov    (%eax),%eax
f0111291:	85 c0                	test   %eax,%eax
f0111293:	74 e8                	je     f011127d <check_list_data+0x27>
			i++;
		if(node->sva != blocksSVAs[(i)] || node->size != blocksSizes[i])
f0111295:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111298:	8b 50 08             	mov    0x8(%eax),%edx
f011129b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011129e:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f01112a5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01112a8:	01 c8                	add    %ecx,%eax
f01112aa:	8b 00                	mov    (%eax),%eax
f01112ac:	39 c2                	cmp    %eax,%edx
f01112ae:	75 1b                	jne    f01112cb <check_list_data+0x75>
f01112b0:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01112b3:	8b 50 0c             	mov    0xc(%eax),%edx
f01112b6:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01112b9:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f01112c0:	8b 45 10             	mov    0x10(%ebp),%eax
f01112c3:	01 c8                	add    %ecx,%eax
f01112c5:	8b 00                	mov    (%eax),%eax
f01112c7:	39 c2                	cmp    %eax,%edx
f01112c9:	74 07                	je     f01112d2 <check_list_data+0x7c>
		{
//			cprintf("i = %d .. \n", i);
//			cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
//			cprintf("blocks[i] data: sva = %x, size = %d\n", blocksSVAs[(i)], blocksSizes[i]);
			return 0;
f01112cb:	b8 00 00 00 00       	mov    $0x0,%eax
f01112d0:	eb 4e                	jmp    f0111320 <check_list_data+0xca>
		}
		(*size)++;
f01112d2:	8b 45 14             	mov    0x14(%ebp),%eax
f01112d5:	8b 00                	mov    (%eax),%eax
f01112d7:	8d 50 01             	lea    0x1(%eax),%edx
f01112da:	8b 45 14             	mov    0x14(%ebp),%eax
f01112dd:	89 10                	mov    %edx,(%eax)
		i++;
f01112df:	ff 45 f8             	incl   -0x8(%ebp)
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
f01112e2:	8b 45 08             	mov    0x8(%ebp),%eax
f01112e5:	8b 40 08             	mov    0x8(%eax),%eax
f01112e8:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01112eb:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01112ef:	74 07                	je     f01112f8 <check_list_data+0xa2>
f01112f1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01112f4:	8b 00                	mov    (%eax),%eax
f01112f6:	eb 05                	jmp    f01112fd <check_list_data+0xa7>
f01112f8:	b8 00 00 00 00       	mov    $0x0,%eax
f01112fd:	8b 55 08             	mov    0x8(%ebp),%edx
f0111300:	89 42 08             	mov    %eax,0x8(%edx)
f0111303:	8b 45 08             	mov    0x8(%ebp),%eax
f0111306:	8b 40 08             	mov    0x8(%eax),%eax
f0111309:	85 c0                	test   %eax,%eax
f011130b:	0f 85 6f ff ff ff    	jne    f0111280 <check_list_data+0x2a>
f0111311:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0111315:	0f 85 65 ff ff ff    	jne    f0111280 <check_list_data+0x2a>
			return 0;
		}
		(*size)++;
		i++;
	}
	return 1;
f011131b:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0111320:	c9                   	leave  
f0111321:	c3                   	ret    

f0111322 <check_avaliable_list_data>:

int check_avaliable_list_data(uint32* size)
{
f0111322:	55                   	push   %ebp
f0111323:	89 e5                	mov    %esp,%ebp
f0111325:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f0111328:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f011132f:	8b 45 08             	mov    0x8(%ebp),%eax
f0111332:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	LIST_FOREACH(node, &AvailableMemBlocksList)
f0111338:	a1 94 27 86 f0       	mov    0xf0862794,%eax
f011133d:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0111340:	eb 30                	jmp    f0111372 <check_avaliable_list_data+0x50>
	{
		if(node->sva != 0x0 || node->size != 0)
f0111342:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111345:	8b 40 08             	mov    0x8(%eax),%eax
f0111348:	85 c0                	test   %eax,%eax
f011134a:	75 0a                	jne    f0111356 <check_avaliable_list_data+0x34>
f011134c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011134f:	8b 40 0c             	mov    0xc(%eax),%eax
f0111352:	85 c0                	test   %eax,%eax
f0111354:	74 07                	je     f011135d <check_avaliable_list_data+0x3b>
		{
			return 0;
f0111356:	b8 00 00 00 00       	mov    $0x0,%eax
f011135b:	eb 40                	jmp    f011139d <check_avaliable_list_data+0x7b>
		}
		(*size)++;
f011135d:	8b 45 08             	mov    0x8(%ebp),%eax
f0111360:	8b 00                	mov    (%eax),%eax
f0111362:	8d 50 01             	lea    0x1(%eax),%edx
f0111365:	8b 45 08             	mov    0x8(%ebp),%eax
f0111368:	89 10                	mov    %edx,(%eax)
int check_avaliable_list_data(uint32* size)
{
	struct MemBlock* node = NULL;
	*size = 0;

	LIST_FOREACH(node, &AvailableMemBlocksList)
f011136a:	a1 9c 27 86 f0       	mov    0xf086279c,%eax
f011136f:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0111372:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0111376:	74 07                	je     f011137f <check_avaliable_list_data+0x5d>
f0111378:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011137b:	8b 00                	mov    (%eax),%eax
f011137d:	eb 05                	jmp    f0111384 <check_avaliable_list_data+0x62>
f011137f:	b8 00 00 00 00       	mov    $0x0,%eax
f0111384:	a3 9c 27 86 f0       	mov    %eax,0xf086279c
f0111389:	a1 9c 27 86 f0       	mov    0xf086279c,%eax
f011138e:	85 c0                	test   %eax,%eax
f0111390:	75 b0                	jne    f0111342 <check_avaliable_list_data+0x20>
f0111392:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0111396:	75 aa                	jne    f0111342 <check_avaliable_list_data+0x20>
		{
			return 0;
		}
		(*size)++;
	}
	return 1;
f0111398:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011139d:	c9                   	leave  
f011139e:	c3                   	ret    

f011139f <show_list_content>:


void show_list_content(struct MemBlock_List* list)
{
f011139f:	55                   	push   %ebp
f01113a0:	89 e5                	mov    %esp,%ebp
f01113a2:	83 ec 18             	sub    $0x18,%esp
	struct MemBlock* node = NULL;
f01113a5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(node, list)
f01113ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01113af:	8b 00                	mov    (%eax),%eax
f01113b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01113b4:	eb 27                	jmp    f01113dd <show_list_content+0x3e>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f01113b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01113b9:	8b 50 0c             	mov    0xc(%eax),%edx
f01113bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01113bf:	8b 40 08             	mov    0x8(%eax),%eax
f01113c2:	83 ec 04             	sub    $0x4,%esp
f01113c5:	52                   	push   %edx
f01113c6:	50                   	push   %eax
f01113c7:	68 d8 7b 13 f0       	push   $0xf0137bd8
f01113cc:	e8 3d f9 fe ff       	call   f0100d0e <cprintf>
f01113d1:	83 c4 10             	add    $0x10,%esp


void show_list_content(struct MemBlock_List* list)
{
	struct MemBlock* node = NULL;
	LIST_FOREACH(node, list)
f01113d4:	8b 45 08             	mov    0x8(%ebp),%eax
f01113d7:	8b 40 08             	mov    0x8(%eax),%eax
f01113da:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01113dd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01113e1:	74 07                	je     f01113ea <show_list_content+0x4b>
f01113e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01113e6:	8b 00                	mov    (%eax),%eax
f01113e8:	eb 05                	jmp    f01113ef <show_list_content+0x50>
f01113ea:	b8 00 00 00 00       	mov    $0x0,%eax
f01113ef:	8b 55 08             	mov    0x8(%ebp),%edx
f01113f2:	89 42 08             	mov    %eax,0x8(%edx)
f01113f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01113f8:	8b 40 08             	mov    0x8(%eax),%eax
f01113fb:	85 c0                	test   %eax,%eax
f01113fd:	75 b7                	jne    f01113b6 <show_list_content+0x17>
f01113ff:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0111403:	75 b1                	jne    f01113b6 <show_list_content+0x17>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
}
f0111405:	90                   	nop
f0111406:	c9                   	leave  
f0111407:	c3                   	ret    

f0111408 <TestAutoCompleteCommand>:
int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc);
int CA(uint32 *ptr_dir, uint32 va);
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which);
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type);
int TestAutoCompleteCommand()
{
f0111408:	55                   	push   %ebp
f0111409:	89 e5                	mov    %esp,%ebp
f011140b:	57                   	push   %edi
f011140c:	56                   	push   %esi
f011140d:	53                   	push   %ebx
f011140e:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	cprintf("Automatic Testing of Autocomplete:\n");
f0111414:	83 ec 0c             	sub    $0xc,%esp
f0111417:	68 dc 88 13 f0       	push   $0xf01388dc
f011141c:	e8 ed f8 fe ff       	call   f0100d0e <cprintf>
f0111421:	83 c4 10             	add    $0x10,%esp
	cprintf("\n========================\n");
f0111424:	83 ec 0c             	sub    $0xc,%esp
f0111427:	68 00 89 13 f0       	push   $0xf0138900
f011142c:	e8 dd f8 fe ff       	call   f0100d0e <cprintf>
f0111431:	83 c4 10             	add    $0x10,%esp
	//	cprintf("========================\n");
	//	cprintf("Q2 Test: manually try the test cases in the doc. \n..."
	//			"OR, you can do it automatically by un-commenting the code in this function, it should output the same results in the Examples exist in the MS1 ppt\n");
	//
	//	int retValue = 0;
	int i = 0;
f0111434:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	//CASE1:
	//should execute the kernel_info command
	cprintf("==>Testing now AUTOCOMPLETE for: kernel_info\n");
f011143b:	83 ec 0c             	sub    $0xc,%esp
f011143e:	68 1c 89 13 f0       	push   $0xf013891c
f0111443:	e8 c6 f8 fe ff       	call   f0100d0e <cprintf>
f0111448:	83 c4 10             	add    $0x10,%esp
	char cr0[100] = "kernel_info";
f011144b:	8d 45 80             	lea    -0x80(%ebp),%eax
f011144e:	bb d6 89 13 f0       	mov    $0xf01389d6,%ebx
f0111453:	ba 03 00 00 00       	mov    $0x3,%edx
f0111458:	89 c7                	mov    %eax,%edi
f011145a:	89 de                	mov    %ebx,%esi
f011145c:	89 d1                	mov    %edx,%ecx
f011145e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0111460:	8d 55 8c             	lea    -0x74(%ebp),%edx
f0111463:	b9 16 00 00 00       	mov    $0x16,%ecx
f0111468:	b8 00 00 00 00       	mov    $0x0,%eax
f011146d:	89 d7                	mov    %edx,%edi
f011146f:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr0) ;
f0111471:	83 ec 0c             	sub    $0xc,%esp
f0111474:	8d 45 80             	lea    -0x80(%ebp),%eax
f0111477:	50                   	push   %eax
f0111478:	e8 f3 f8 fe ff       	call   f0100d70 <execute_command>
f011147d:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111480:	83 ec 0c             	sub    $0xc,%esp
f0111483:	68 4a 89 13 f0       	push   $0xf013894a
f0111488:	e8 81 f8 fe ff       	call   f0100d0e <cprintf>
f011148d:	83 c4 10             	add    $0x10,%esp

	//CASE2: should print the commands that start with he ---> Shall print (help)
	cprintf("==>Testing now AUTOCOMPLETE for: he\n");
f0111490:	83 ec 0c             	sub    $0xc,%esp
f0111493:	68 60 89 13 f0       	push   $0xf0138960
f0111498:	e8 71 f8 fe ff       	call   f0100d0e <cprintf>
f011149d:	83 c4 10             	add    $0x10,%esp
	char cr2[100] = "he";
f01114a0:	c7 85 1c ff ff ff 68 	movl   $0x6568,-0xe4(%ebp)
f01114a7:	65 00 00 
f01114aa:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f01114b0:	b9 18 00 00 00       	mov    $0x18,%ecx
f01114b5:	b8 00 00 00 00       	mov    $0x0,%eax
f01114ba:	89 d7                	mov    %edx,%edi
f01114bc:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr2) ;
f01114be:	83 ec 0c             	sub    $0xc,%esp
f01114c1:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
f01114c7:	50                   	push   %eax
f01114c8:	e8 a3 f8 fe ff       	call   f0100d70 <execute_command>
f01114cd:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f01114d0:	83 ec 0c             	sub    $0xc,%esp
f01114d3:	68 4a 89 13 f0       	push   $0xf013894a
f01114d8:	e8 31 f8 fe ff       	call   f0100d0e <cprintf>
f01114dd:	83 c4 10             	add    $0x10,%esp


	//CASE3: should print the commands that start with ru ---> Shall print (rum, rub, rut, run, runall) .. Each in a separate line
	cprintf("==>Testing now AUTOCOMPLETE for: ru\n");
f01114e0:	83 ec 0c             	sub    $0xc,%esp
f01114e3:	68 88 89 13 f0       	push   $0xf0138988
f01114e8:	e8 21 f8 fe ff       	call   f0100d0e <cprintf>
f01114ed:	83 c4 10             	add    $0x10,%esp
	char cr3[100] = "ru";
f01114f0:	c7 85 b8 fe ff ff 72 	movl   $0x7572,-0x148(%ebp)
f01114f7:	75 00 00 
f01114fa:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f0111500:	b9 18 00 00 00       	mov    $0x18,%ecx
f0111505:	b8 00 00 00 00       	mov    $0x0,%eax
f011150a:	89 d7                	mov    %edx,%edi
f011150c:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr3) ;
f011150e:	83 ec 0c             	sub    $0xc,%esp
f0111511:	8d 85 b8 fe ff ff    	lea    -0x148(%ebp),%eax
f0111517:	50                   	push   %eax
f0111518:	e8 53 f8 fe ff       	call   f0100d70 <execute_command>
f011151d:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111520:	83 ec 0c             	sub    $0xc,%esp
f0111523:	68 4a 89 13 f0       	push   $0xf013894a
f0111528:	e8 e1 f7 fe ff       	call   f0100d0e <cprintf>
f011152d:	83 c4 10             	add    $0x10,%esp

	//CASE4: should print unknown command
	cprintf("==>Testing now AUTOCOMPLETE for: smm\n");
f0111530:	83 ec 0c             	sub    $0xc,%esp
f0111533:	68 b0 89 13 f0       	push   $0xf01389b0
f0111538:	e8 d1 f7 fe ff       	call   f0100d0e <cprintf>
f011153d:	83 c4 10             	add    $0x10,%esp
	char cr4[100] = "smm";
f0111540:	c7 85 54 fe ff ff 73 	movl   $0x6d6d73,-0x1ac(%ebp)
f0111547:	6d 6d 00 
f011154a:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f0111550:	b9 18 00 00 00       	mov    $0x18,%ecx
f0111555:	b8 00 00 00 00       	mov    $0x0,%eax
f011155a:	89 d7                	mov    %edx,%edi
f011155c:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr4) ;
f011155e:	83 ec 0c             	sub    $0xc,%esp
f0111561:	8d 85 54 fe ff ff    	lea    -0x1ac(%ebp),%eax
f0111567:	50                   	push   %eax
f0111568:	e8 03 f8 fe ff       	call   f0100d70 <execute_command>
f011156d:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111570:	83 ec 0c             	sub    $0xc,%esp
f0111573:	68 4a 89 13 f0       	push   $0xf013894a
f0111578:	e8 91 f7 fe ff       	call   f0100d0e <cprintf>
f011157d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111580:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111585:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0111588:	5b                   	pop    %ebx
f0111589:	5e                   	pop    %esi
f011158a:	5f                   	pop    %edi
f011158b:	5d                   	pop    %ebp
f011158c:	c3                   	ret    

f011158d <test_pt_set_page_permissions>:

//=====================================
// 1) TEST SET/CLEAR PAGE PERMISSIONS:
//=====================================
int test_pt_set_page_permissions()
{
f011158d:	55                   	push   %ebp
f011158e:	89 e5                	mov    %esp,%ebp
f0111590:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check setting a permission
	uint32 va = 0xEF800000;
f0111593:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f011159a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f01115a1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01115a8:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f01115ad:	ff 75 ec             	pushl  -0x14(%ebp)
f01115b0:	ff 75 f0             	pushl  -0x10(%ebp)
f01115b3:	ff 75 f4             	pushl  -0xc(%ebp)
f01115b6:	50                   	push   %eax
f01115b7:	e8 a5 67 ff ff       	call   f0107d61 <pt_set_page_permissions>
f01115bc:	83 c4 10             	add    $0x10,%esp
	int ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01115bf:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f01115c4:	ff 75 ec             	pushl  -0x14(%ebp)
f01115c7:	ff 75 f0             	pushl  -0x10(%ebp)
f01115ca:	ff 75 f4             	pushl  -0xc(%ebp)
f01115cd:	50                   	push   %eax
f01115ce:	e8 9e 4e 00 00       	call   f0116471 <CP>
f01115d3:	83 c4 10             	add    $0x10,%esp
f01115d6:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01115d9:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01115dd:	74 14                	je     f01115f3 <test_pt_set_page_permissions+0x66>
	{
		panic("[EVAL] #1 Set Permission Failed.\n");
f01115df:	83 ec 04             	sub    $0x4,%esp
f01115e2:	68 3c 8a 13 f0       	push   $0xf0138a3c
f01115e7:	6a 5a                	push   $0x5a
f01115e9:	68 5e 8a 13 f0       	push   $0xf0138a5e
f01115ee:	e8 12 ec fe ff       	call   f0100205 <_panic>
	}

	//Case 2: Check setting MORE THAN ONE permission
	va = 0xEF801000;
f01115f3:	c7 45 f4 00 10 80 ef 	movl   $0xef801000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER;
f01115fa:	c7 45 f0 44 00 00 00 	movl   $0x44,-0x10(%ebp)
	permissions_to_clear = 0;
f0111601:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111608:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f011160d:	ff 75 ec             	pushl  -0x14(%ebp)
f0111610:	ff 75 f0             	pushl  -0x10(%ebp)
f0111613:	ff 75 f4             	pushl  -0xc(%ebp)
f0111616:	50                   	push   %eax
f0111617:	e8 45 67 ff ff       	call   f0107d61 <pt_set_page_permissions>
f011161c:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011161f:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0111624:	ff 75 ec             	pushl  -0x14(%ebp)
f0111627:	ff 75 f0             	pushl  -0x10(%ebp)
f011162a:	ff 75 f4             	pushl  -0xc(%ebp)
f011162d:	50                   	push   %eax
f011162e:	e8 3e 4e 00 00       	call   f0116471 <CP>
f0111633:	83 c4 10             	add    $0x10,%esp
f0111636:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111639:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011163d:	74 14                	je     f0111653 <test_pt_set_page_permissions+0xc6>
	{
		panic("[EVAL] #2 Set Permission Failed.\n");
f011163f:	83 ec 04             	sub    $0x4,%esp
f0111642:	68 7c 8a 13 f0       	push   $0xf0138a7c
f0111647:	6a 66                	push   $0x66
f0111649:	68 5e 8a 13 f0       	push   $0xf0138a5e
f011164e:	e8 b2 eb fe ff       	call   f0100205 <_panic>
	}

	va = 0xEF800000;
f0111653:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER|PERM_USED|PERM_PRESENT;
f011165a:	c7 45 f0 65 00 00 00 	movl   $0x65,-0x10(%ebp)
	permissions_to_clear = 0;
f0111661:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111668:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f011166d:	ff 75 ec             	pushl  -0x14(%ebp)
f0111670:	ff 75 f0             	pushl  -0x10(%ebp)
f0111673:	ff 75 f4             	pushl  -0xc(%ebp)
f0111676:	50                   	push   %eax
f0111677:	e8 e5 66 ff ff       	call   f0107d61 <pt_set_page_permissions>
f011167c:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011167f:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0111684:	ff 75 ec             	pushl  -0x14(%ebp)
f0111687:	ff 75 f0             	pushl  -0x10(%ebp)
f011168a:	ff 75 f4             	pushl  -0xc(%ebp)
f011168d:	50                   	push   %eax
f011168e:	e8 de 4d 00 00       	call   f0116471 <CP>
f0111693:	83 c4 10             	add    $0x10,%esp
f0111696:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111699:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011169d:	74 14                	je     f01116b3 <test_pt_set_page_permissions+0x126>
	{
		panic("[EVAL] #3 Set Permission Failed.\n");
f011169f:	83 ec 04             	sub    $0x4,%esp
f01116a2:	68 a0 8a 13 f0       	push   $0xf0138aa0
f01116a7:	6a 71                	push   $0x71
f01116a9:	68 5e 8a 13 f0       	push   $0xf0138a5e
f01116ae:	e8 52 eb fe ff       	call   f0100205 <_panic>
	}

	//Case 3: Check clearing a permission
	va = 0xF0000000;
f01116b3:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	permissions_to_set = 0;
f01116ba:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_PRESENT;
f01116c1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01116c8:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f01116cd:	ff 75 ec             	pushl  -0x14(%ebp)
f01116d0:	ff 75 f0             	pushl  -0x10(%ebp)
f01116d3:	ff 75 f4             	pushl  -0xc(%ebp)
f01116d6:	50                   	push   %eax
f01116d7:	e8 85 66 ff ff       	call   f0107d61 <pt_set_page_permissions>
f01116dc:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01116df:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f01116e4:	ff 75 ec             	pushl  -0x14(%ebp)
f01116e7:	ff 75 f0             	pushl  -0x10(%ebp)
f01116ea:	ff 75 f4             	pushl  -0xc(%ebp)
f01116ed:	50                   	push   %eax
f01116ee:	e8 7e 4d 00 00       	call   f0116471 <CP>
f01116f3:	83 c4 10             	add    $0x10,%esp
f01116f6:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01116f9:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01116fd:	74 14                	je     f0111713 <test_pt_set_page_permissions+0x186>
	{
		panic("[EVAL] #4 Clear Permission Failed.\n");
f01116ff:	83 ec 04             	sub    $0x4,%esp
f0111702:	68 c4 8a 13 f0       	push   $0xf0138ac4
f0111707:	6a 7d                	push   $0x7d
f0111709:	68 5e 8a 13 f0       	push   $0xf0138a5e
f011170e:	e8 f2 ea fe ff       	call   f0100205 <_panic>
	}

	//Case 4: Check clearing MORE THAN ONE permission
	va = 0xEF800000;
f0111713:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = 0;
f011171a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_MODIFIED|PERM_USER;
f0111721:	c7 45 ec 44 00 00 00 	movl   $0x44,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111728:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f011172d:	ff 75 ec             	pushl  -0x14(%ebp)
f0111730:	ff 75 f0             	pushl  -0x10(%ebp)
f0111733:	ff 75 f4             	pushl  -0xc(%ebp)
f0111736:	50                   	push   %eax
f0111737:	e8 25 66 ff ff       	call   f0107d61 <pt_set_page_permissions>
f011173c:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011173f:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0111744:	ff 75 ec             	pushl  -0x14(%ebp)
f0111747:	ff 75 f0             	pushl  -0x10(%ebp)
f011174a:	ff 75 f4             	pushl  -0xc(%ebp)
f011174d:	50                   	push   %eax
f011174e:	e8 1e 4d 00 00       	call   f0116471 <CP>
f0111753:	83 c4 10             	add    $0x10,%esp
f0111756:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111759:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011175d:	74 17                	je     f0111776 <test_pt_set_page_permissions+0x1e9>
	{
		panic("[EVAL] #5 Clear Permission Failed.\n");
f011175f:	83 ec 04             	sub    $0x4,%esp
f0111762:	68 e8 8a 13 f0       	push   $0xf0138ae8
f0111767:	68 89 00 00 00       	push   $0x89
f011176c:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0111771:	e8 8f ea fe ff       	call   f0100205 <_panic>
	}

	//Case 5: Check settiing & clearing MORE THAN ONE permission together
	va = 0xF0001000;
f0111776:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	permissions_to_set = PERM_USER|PERM_BUFFERED;
f011177d:	c7 45 f0 04 02 00 00 	movl   $0x204,-0x10(%ebp)
	permissions_to_clear = PERM_WRITEABLE|PERM_USED|PERM_MODIFIED;
f0111784:	c7 45 ec 62 00 00 00 	movl   $0x62,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011178b:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0111790:	ff 75 ec             	pushl  -0x14(%ebp)
f0111793:	ff 75 f0             	pushl  -0x10(%ebp)
f0111796:	ff 75 f4             	pushl  -0xc(%ebp)
f0111799:	50                   	push   %eax
f011179a:	e8 c2 65 ff ff       	call   f0107d61 <pt_set_page_permissions>
f011179f:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01117a2:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f01117a7:	ff 75 ec             	pushl  -0x14(%ebp)
f01117aa:	ff 75 f0             	pushl  -0x10(%ebp)
f01117ad:	ff 75 f4             	pushl  -0xc(%ebp)
f01117b0:	50                   	push   %eax
f01117b1:	e8 bb 4c 00 00       	call   f0116471 <CP>
f01117b6:	83 c4 10             	add    $0x10,%esp
f01117b9:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01117bc:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01117c0:	74 17                	je     f01117d9 <test_pt_set_page_permissions+0x24c>
	{
		panic("[EVAL] #6 Set & Clear Permission Failed.\n");
f01117c2:	83 ec 04             	sub    $0x4,%esp
f01117c5:	68 0c 8b 13 f0       	push   $0xf0138b0c
f01117ca:	68 95 00 00 00       	push   $0x95
f01117cf:	68 5e 8a 13 f0       	push   $0xf0138a5e
f01117d4:	e8 2c ea fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test pt_set&clear_page_permissions completed successfully.\n");
f01117d9:	83 ec 0c             	sub    $0xc,%esp
f01117dc:	68 38 8b 13 f0       	push   $0xf0138b38
f01117e1:	e8 28 f5 fe ff       	call   f0100d0e <cprintf>
f01117e6:	83 c4 10             	add    $0x10,%esp
	return 0;
f01117e9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01117ee:	c9                   	leave  
f01117ef:	c3                   	ret    

f01117f0 <test_pt_set_page_permissions_invalid_va>:

int test_pt_set_page_permissions_invalid_va()
{
f01117f0:	55                   	push   %ebp
f01117f1:	89 e5                	mov    %esp,%ebp
f01117f3:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x0;
f01117f6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f01117fd:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0111804:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011180b:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0111810:	ff 75 ec             	pushl  -0x14(%ebp)
f0111813:	ff 75 f0             	pushl  -0x10(%ebp)
f0111816:	ff 75 f4             	pushl  -0xc(%ebp)
f0111819:	50                   	push   %eax
f011181a:	e8 42 65 ff ff       	call   f0107d61 <pt_set_page_permissions>
f011181f:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling setting permissions of an invalid virtual address with non existing page table.");
f0111822:	83 ec 04             	sub    $0x4,%esp
f0111825:	68 88 8b 13 f0       	push   $0xf0138b88
f011182a:	68 a2 00 00 00       	push   $0xa2
f011182f:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0111834:	e8 cc e9 fe ff       	call   f0100205 <_panic>

f0111839 <test_pt_get_page_permissions>:

//=====================================
// 2) TEST GET PAGE PERMISSIONS:
//=====================================
int test_pt_get_page_permissions()
{
f0111839:	55                   	push   %ebp
f011183a:	89 e5                	mov    %esp,%ebp
f011183c:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check getting a permission of a non existing VA with NO table
	uint32 va = 0xeebfe000;
f011183f:	c7 45 f4 00 e0 bf ee 	movl   $0xeebfe000,-0xc(%ebp)
	int ret = pt_get_page_permissions(ptr_page_directory, va);
f0111846:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f011184b:	83 ec 08             	sub    $0x8,%esp
f011184e:	ff 75 f4             	pushl  -0xc(%ebp)
f0111851:	50                   	push   %eax
f0111852:	e8 b4 65 ff ff       	call   f0107e0b <pt_get_page_permissions>
f0111857:	83 c4 10             	add    $0x10,%esp
f011185a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != -1)
f011185d:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0111861:	74 17                	je     f011187a <test_pt_get_page_permissions+0x41>
	{
		panic("[EVAL] #1 Get Permission Failed.\n");
f0111863:	83 ec 04             	sub    $0x4,%esp
f0111866:	68 24 8c 13 f0       	push   $0xf0138c24
f011186b:	68 b0 00 00 00       	push   $0xb0
f0111870:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0111875:	e8 8b e9 fe ff       	call   f0100205 <_panic>
	}

	//Case 2: Check getting a permission of a non existing VA with an existing table
	va = 0xEF800000;
f011187a:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111881:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0111886:	83 ec 08             	sub    $0x8,%esp
f0111889:	ff 75 f4             	pushl  -0xc(%ebp)
f011188c:	50                   	push   %eax
f011188d:	e8 79 65 ff ff       	call   f0107e0b <pt_get_page_permissions>
f0111892:	83 c4 10             	add    $0x10,%esp
f0111895:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 0)
f0111898:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011189c:	74 17                	je     f01118b5 <test_pt_get_page_permissions+0x7c>
	{
		panic("[EVAL] #2 Get Permission Failed.\n");
f011189e:	83 ec 04             	sub    $0x4,%esp
f01118a1:	68 48 8c 13 f0       	push   $0xf0138c48
f01118a6:	68 b8 00 00 00       	push   $0xb8
f01118ab:	68 5e 8a 13 f0       	push   $0xf0138a5e
f01118b0:	e8 50 e9 fe ff       	call   f0100205 <_panic>
	}

	//Case 3: Check getting a permission of an existing VA with an existing table
	va = 0xf0000000;
f01118b5:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f01118bc:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f01118c1:	83 ec 08             	sub    $0x8,%esp
f01118c4:	ff 75 f4             	pushl  -0xc(%ebp)
f01118c7:	50                   	push   %eax
f01118c8:	e8 3e 65 ff ff       	call   f0107e0b <pt_get_page_permissions>
f01118cd:	83 c4 10             	add    $0x10,%esp
f01118d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f01118d3:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f01118d7:	74 17                	je     f01118f0 <test_pt_get_page_permissions+0xb7>
	{
		panic("[EVAL] #3 Get Permission Failed.\n");
f01118d9:	83 ec 04             	sub    $0x4,%esp
f01118dc:	68 6c 8c 13 f0       	push   $0xf0138c6c
f01118e1:	68 c0 00 00 00       	push   $0xc0
f01118e6:	68 5e 8a 13 f0       	push   $0xf0138a5e
f01118eb:	e8 15 e9 fe ff       	call   f0100205 <_panic>
	}

	va = 0xF1000000;
f01118f0:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f01118f7:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f01118fc:	83 ec 08             	sub    $0x8,%esp
f01118ff:	ff 75 f4             	pushl  -0xc(%ebp)
f0111902:	50                   	push   %eax
f0111903:	e8 03 65 ff ff       	call   f0107e0b <pt_get_page_permissions>
f0111908:	83 c4 10             	add    $0x10,%esp
f011190b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f011190e:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f0111912:	74 17                	je     f011192b <test_pt_get_page_permissions+0xf2>
	{
		panic("[EVAL] #4 Get Permission Failed.\n");
f0111914:	83 ec 04             	sub    $0x4,%esp
f0111917:	68 90 8c 13 f0       	push   $0xf0138c90
f011191c:	68 c7 00 00 00       	push   $0xc7
f0111921:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0111926:	e8 da e8 fe ff       	call   f0100205 <_panic>
	}

	va = 0xF0001000;
f011192b:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111932:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0111937:	83 ec 08             	sub    $0x8,%esp
f011193a:	ff 75 f4             	pushl  -0xc(%ebp)
f011193d:	50                   	push   %eax
f011193e:	e8 c8 64 ff ff       	call   f0107e0b <pt_get_page_permissions>
f0111943:	83 c4 10             	add    $0x10,%esp
f0111946:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 99)
f0111949:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f011194d:	74 17                	je     f0111966 <test_pt_get_page_permissions+0x12d>
	{
		panic("[EVAL] #5 Get Permission Failed.\n");
f011194f:	83 ec 04             	sub    $0x4,%esp
f0111952:	68 b4 8c 13 f0       	push   $0xf0138cb4
f0111957:	68 ce 00 00 00       	push   $0xce
f011195c:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0111961:	e8 9f e8 fe ff       	call   f0100205 <_panic>
	}
	cprintf("Congratulations!! test pt_get_page_permissions completed successfully.\n");
f0111966:	83 ec 0c             	sub    $0xc,%esp
f0111969:	68 d8 8c 13 f0       	push   $0xf0138cd8
f011196e:	e8 9b f3 fe ff       	call   f0100d0e <cprintf>
f0111973:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111976:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011197b:	c9                   	leave  
f011197c:	c3                   	ret    

f011197d <test_pt_clear_page_table_entry>:

//=====================================
// 3) TEST CLEAR PAGE TABLE ENTRY:
//=====================================
int test_pt_clear_page_table_entry()
{
f011197d:	55                   	push   %ebp
f011197e:	89 e5                	mov    %esp,%ebp
f0111980:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0xF1000000;
f0111983:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f011198a:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f011198f:	83 ec 08             	sub    $0x8,%esp
f0111992:	ff 75 f4             	pushl  -0xc(%ebp)
f0111995:	50                   	push   %eax
f0111996:	e8 ca 64 ff ff       	call   f0107e65 <pt_clear_page_table_entry>
f011199b:	83 c4 10             	add    $0x10,%esp
	int ret = CE(ptr_page_directory, va);
f011199e:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f01119a3:	83 ec 08             	sub    $0x8,%esp
f01119a6:	ff 75 f4             	pushl  -0xc(%ebp)
f01119a9:	50                   	push   %eax
f01119aa:	e8 1e 4a 00 00       	call   f01163cd <CE>
f01119af:	83 c4 10             	add    $0x10,%esp
f01119b2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f01119b5:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f01119b9:	74 17                	je     f01119d2 <test_pt_clear_page_table_entry+0x55>
	{
		panic("[EVAL] #1 Clear Page Table Entry Failed.\n");
f01119bb:	83 ec 04             	sub    $0x4,%esp
f01119be:	68 20 8d 13 f0       	push   $0xf0138d20
f01119c3:	68 de 00 00 00       	push   $0xde
f01119c8:	68 5e 8a 13 f0       	push   $0xf0138a5e
f01119cd:	e8 33 e8 fe ff       	call   f0100205 <_panic>
	}

	va = 0xF0001000;
f01119d2:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f01119d9:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f01119de:	83 ec 08             	sub    $0x8,%esp
f01119e1:	ff 75 f4             	pushl  -0xc(%ebp)
f01119e4:	50                   	push   %eax
f01119e5:	e8 7b 64 ff ff       	call   f0107e65 <pt_clear_page_table_entry>
f01119ea:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f01119ed:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f01119f2:	83 ec 08             	sub    $0x8,%esp
f01119f5:	ff 75 f4             	pushl  -0xc(%ebp)
f01119f8:	50                   	push   %eax
f01119f9:	e8 cf 49 00 00       	call   f01163cd <CE>
f01119fe:	83 c4 10             	add    $0x10,%esp
f0111a01:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111a04:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111a08:	74 17                	je     f0111a21 <test_pt_clear_page_table_entry+0xa4>
	{
		panic("[EVAL] #2 Clear Page Table Entry Failed.\n");
f0111a0a:	83 ec 04             	sub    $0x4,%esp
f0111a0d:	68 4c 8d 13 f0       	push   $0xf0138d4c
f0111a12:	68 e6 00 00 00       	push   $0xe6
f0111a17:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0111a1c:	e8 e4 e7 fe ff       	call   f0100205 <_panic>
	}

	va = 0xEF800000;
f0111a21:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111a28:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0111a2d:	83 ec 08             	sub    $0x8,%esp
f0111a30:	ff 75 f4             	pushl  -0xc(%ebp)
f0111a33:	50                   	push   %eax
f0111a34:	e8 2c 64 ff ff       	call   f0107e65 <pt_clear_page_table_entry>
f0111a39:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0111a3c:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0111a41:	83 ec 08             	sub    $0x8,%esp
f0111a44:	ff 75 f4             	pushl  -0xc(%ebp)
f0111a47:	50                   	push   %eax
f0111a48:	e8 80 49 00 00       	call   f01163cd <CE>
f0111a4d:	83 c4 10             	add    $0x10,%esp
f0111a50:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111a53:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111a57:	74 17                	je     f0111a70 <test_pt_clear_page_table_entry+0xf3>
	{
		panic("[EVAL] #3 Clear Page Table Entry Failed.\n");
f0111a59:	83 ec 04             	sub    $0x4,%esp
f0111a5c:	68 78 8d 13 f0       	push   $0xf0138d78
f0111a61:	68 ee 00 00 00       	push   $0xee
f0111a66:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0111a6b:	e8 95 e7 fe ff       	call   f0100205 <_panic>
	}

	va = 0xF0000000;
f0111a70:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111a77:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0111a7c:	83 ec 08             	sub    $0x8,%esp
f0111a7f:	ff 75 f4             	pushl  -0xc(%ebp)
f0111a82:	50                   	push   %eax
f0111a83:	e8 dd 63 ff ff       	call   f0107e65 <pt_clear_page_table_entry>
f0111a88:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0111a8b:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0111a90:	83 ec 08             	sub    $0x8,%esp
f0111a93:	ff 75 f4             	pushl  -0xc(%ebp)
f0111a96:	50                   	push   %eax
f0111a97:	e8 31 49 00 00       	call   f01163cd <CE>
f0111a9c:	83 c4 10             	add    $0x10,%esp
f0111a9f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111aa2:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111aa6:	74 17                	je     f0111abf <test_pt_clear_page_table_entry+0x142>
	{
		panic("[EVAL] #4 Clear Page Table Entry Failed.\n");
f0111aa8:	83 ec 04             	sub    $0x4,%esp
f0111aab:	68 a4 8d 13 f0       	push   $0xf0138da4
f0111ab0:	68 f6 00 00 00       	push   $0xf6
f0111ab5:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0111aba:	e8 46 e7 fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test pt_clear_page_table_entry completed successfully.\n");
f0111abf:	83 ec 0c             	sub    $0xc,%esp
f0111ac2:	68 d0 8d 13 f0       	push   $0xf0138dd0
f0111ac7:	e8 42 f2 fe ff       	call   f0100d0e <cprintf>
f0111acc:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111acf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111ad4:	c9                   	leave  
f0111ad5:	c3                   	ret    

f0111ad6 <test_pt_clear_page_table_entry_invalid_va>:

int test_pt_clear_page_table_entry_invalid_va()
{
f0111ad6:	55                   	push   %ebp
f0111ad7:	89 e5                	mov    %esp,%ebp
f0111ad9:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x1000;
f0111adc:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111ae3:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0111ae8:	83 ec 08             	sub    $0x8,%esp
f0111aeb:	ff 75 f4             	pushl  -0xc(%ebp)
f0111aee:	50                   	push   %eax
f0111aef:	e8 71 63 ff ff       	call   f0107e65 <pt_clear_page_table_entry>
f0111af4:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling clearing the entry of an invalid virtual address non existing page table.");
f0111af7:	83 ec 04             	sub    $0x4,%esp
f0111afa:	68 1c 8e 13 f0       	push   $0xf0138e1c
f0111aff:	68 01 01 00 00       	push   $0x101
f0111b04:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0111b09:	e8 f7 e6 fe ff       	call   f0100205 <_panic>

f0111b0e <test_virtual_to_physical>:

//=====================================
// 4) TEST CONVERTING VA 2 PA:
//=====================================
int test_virtual_to_physical()
{
f0111b0e:	55                   	push   %ebp
f0111b0f:	89 e5                	mov    %esp,%ebp
f0111b11:	57                   	push   %edi
f0111b12:	56                   	push   %esi
f0111b13:	53                   	push   %ebx
f0111b14:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	int kilo = 1024 ;
f0111b1a:	c7 45 e4 00 04 00 00 	movl   $0x400,-0x1c(%ebp)
	int mega = 1024*1024 ;
f0111b21:	c7 45 e0 00 00 10 00 	movl   $0x100000,-0x20(%ebp)
	uint32 va;
	ClearUserSpace(ptr_page_directory);
f0111b28:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0111b2d:	83 ec 0c             	sub    $0xc,%esp
f0111b30:	50                   	push   %eax
f0111b31:	e8 79 49 00 00       	call   f01164af <ClearUserSpace>
f0111b36:	83 c4 10             	add    $0x10,%esp

	//============================
	//Case 1: Check getting pa of a va with NO table
	va = 0xeebfe000;
f0111b39:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	int pa = virtual_to_physical(ptr_page_directory, va);
f0111b40:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0111b45:	83 ec 08             	sub    $0x8,%esp
f0111b48:	ff 75 dc             	pushl  -0x24(%ebp)
f0111b4b:	50                   	push   %eax
f0111b4c:	e8 88 63 ff ff       	call   f0107ed9 <virtual_to_physical>
f0111b51:	83 c4 10             	add    $0x10,%esp
f0111b54:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %d\n", va, CA(ptr_page_directory, va), pa);
	if(pa != -1)
f0111b57:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
f0111b5b:	74 17                	je     f0111b74 <test_virtual_to_physical+0x66>
		panic("[EVAL] #1 Test of virtual_to_physical Entry Failed.\n");
f0111b5d:	83 ec 04             	sub    $0x4,%esp
f0111b60:	68 b4 8e 13 f0       	push   $0xf0138eb4
f0111b65:	68 16 01 00 00       	push   $0x116
f0111b6a:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0111b6f:	e8 91 e6 fe ff       	call   f0100205 <_panic>

	//============================
	//Case 2: Check getting pa of a va with a table
	va = 0xf0000000;
f0111b74:	c7 45 dc 00 00 00 f0 	movl   $0xf0000000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111b7b:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0111b80:	83 ec 08             	sub    $0x8,%esp
f0111b83:	ff 75 dc             	pushl  -0x24(%ebp)
f0111b86:	50                   	push   %eax
f0111b87:	e8 4d 63 ff ff       	call   f0107ed9 <virtual_to_physical>
f0111b8c:	83 c4 10             	add    $0x10,%esp
f0111b8f:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111b92:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0111b97:	83 ec 08             	sub    $0x8,%esp
f0111b9a:	ff 75 dc             	pushl  -0x24(%ebp)
f0111b9d:	50                   	push   %eax
f0111b9e:	e8 0b 48 00 00       	call   f01163ae <CA>
f0111ba3:	83 c4 10             	add    $0x10,%esp
f0111ba6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111ba9:	74 17                	je     f0111bc2 <test_virtual_to_physical+0xb4>
		panic("[EVAL] #2 Test of virtual_to_physical Entry Failed.\n");
f0111bab:	83 ec 04             	sub    $0x4,%esp
f0111bae:	68 ec 8e 13 f0       	push   $0xf0138eec
f0111bb3:	68 1f 01 00 00       	push   $0x11f
f0111bb8:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0111bbd:	e8 43 e6 fe ff       	call   f0100205 <_panic>

	//============================
	char ap1[100] = "ap 0x2800000";execute_command(ap1);
f0111bc2:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0111bc8:	bb b8 90 13 f0       	mov    $0xf01390b8,%ebx
f0111bcd:	ba 0d 00 00 00       	mov    $0xd,%edx
f0111bd2:	89 c7                	mov    %eax,%edi
f0111bd4:	89 de                	mov    %ebx,%esi
f0111bd6:	89 d1                	mov    %edx,%ecx
f0111bd8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111bda:	8d 55 81             	lea    -0x7f(%ebp),%edx
f0111bdd:	b9 57 00 00 00       	mov    $0x57,%ecx
f0111be2:	b0 00                	mov    $0x0,%al
f0111be4:	89 d7                	mov    %edx,%edi
f0111be6:	f3 aa                	rep stos %al,%es:(%edi)
f0111be8:	83 ec 0c             	sub    $0xc,%esp
f0111beb:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0111bf1:	50                   	push   %eax
f0111bf2:	e8 79 f1 fe ff       	call   f0100d70 <execute_command>
f0111bf7:	83 c4 10             	add    $0x10,%esp
	va = 0x2800000;
f0111bfa:	c7 45 dc 00 00 80 02 	movl   $0x2800000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111c01:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0111c06:	83 ec 08             	sub    $0x8,%esp
f0111c09:	ff 75 dc             	pushl  -0x24(%ebp)
f0111c0c:	50                   	push   %eax
f0111c0d:	e8 c7 62 ff ff       	call   f0107ed9 <virtual_to_physical>
f0111c12:	83 c4 10             	add    $0x10,%esp
f0111c15:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111c18:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0111c1d:	83 ec 08             	sub    $0x8,%esp
f0111c20:	ff 75 dc             	pushl  -0x24(%ebp)
f0111c23:	50                   	push   %eax
f0111c24:	e8 85 47 00 00       	call   f01163ae <CA>
f0111c29:	83 c4 10             	add    $0x10,%esp
f0111c2c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111c2f:	74 17                	je     f0111c48 <test_virtual_to_physical+0x13a>
		panic("[EVAL] #3 Test of virtual_to_physical Entry Failed.\n");
f0111c31:	83 ec 04             	sub    $0x4,%esp
f0111c34:	68 24 8f 13 f0       	push   $0xf0138f24
f0111c39:	68 28 01 00 00       	push   $0x128
f0111c3e:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0111c43:	e8 bd e5 fe ff       	call   f0100205 <_panic>

	//============================
	char ap2[100] = "ap 0x2801000";execute_command(ap2);
f0111c48:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0111c4e:	bb 1c 91 13 f0       	mov    $0xf013911c,%ebx
f0111c53:	ba 0d 00 00 00       	mov    $0xd,%edx
f0111c58:	89 c7                	mov    %eax,%edi
f0111c5a:	89 de                	mov    %ebx,%esi
f0111c5c:	89 d1                	mov    %edx,%ecx
f0111c5e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111c60:	8d 95 1d ff ff ff    	lea    -0xe3(%ebp),%edx
f0111c66:	b9 57 00 00 00       	mov    $0x57,%ecx
f0111c6b:	b0 00                	mov    $0x0,%al
f0111c6d:	89 d7                	mov    %edx,%edi
f0111c6f:	f3 aa                	rep stos %al,%es:(%edi)
f0111c71:	83 ec 0c             	sub    $0xc,%esp
f0111c74:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0111c7a:	50                   	push   %eax
f0111c7b:	e8 f0 f0 fe ff       	call   f0100d70 <execute_command>
f0111c80:	83 c4 10             	add    $0x10,%esp
	va = 0x2801000;
f0111c83:	c7 45 dc 00 10 80 02 	movl   $0x2801000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111c8a:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0111c8f:	83 ec 08             	sub    $0x8,%esp
f0111c92:	ff 75 dc             	pushl  -0x24(%ebp)
f0111c95:	50                   	push   %eax
f0111c96:	e8 3e 62 ff ff       	call   f0107ed9 <virtual_to_physical>
f0111c9b:	83 c4 10             	add    $0x10,%esp
f0111c9e:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111ca1:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0111ca6:	83 ec 08             	sub    $0x8,%esp
f0111ca9:	ff 75 dc             	pushl  -0x24(%ebp)
f0111cac:	50                   	push   %eax
f0111cad:	e8 fc 46 00 00       	call   f01163ae <CA>
f0111cb2:	83 c4 10             	add    $0x10,%esp
f0111cb5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111cb8:	74 17                	je     f0111cd1 <test_virtual_to_physical+0x1c3>
		panic("[EVAL] #4 Test of virtual_to_physical Entry Failed.\n");
f0111cba:	83 ec 04             	sub    $0x4,%esp
f0111cbd:	68 5c 8f 13 f0       	push   $0xf0138f5c
f0111cc2:	68 31 01 00 00       	push   $0x131
f0111cc7:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0111ccc:	e8 34 e5 fe ff       	call   f0100205 <_panic>

	//============================
	char ap3[100] = "ap 0x2802000";execute_command(ap3);
f0111cd1:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f0111cd7:	bb 80 91 13 f0       	mov    $0xf0139180,%ebx
f0111cdc:	ba 0d 00 00 00       	mov    $0xd,%edx
f0111ce1:	89 c7                	mov    %eax,%edi
f0111ce3:	89 de                	mov    %ebx,%esi
f0111ce5:	89 d1                	mov    %edx,%ecx
f0111ce7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111ce9:	8d 95 b9 fe ff ff    	lea    -0x147(%ebp),%edx
f0111cef:	b9 57 00 00 00       	mov    $0x57,%ecx
f0111cf4:	b0 00                	mov    $0x0,%al
f0111cf6:	89 d7                	mov    %edx,%edi
f0111cf8:	f3 aa                	rep stos %al,%es:(%edi)
f0111cfa:	83 ec 0c             	sub    $0xc,%esp
f0111cfd:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f0111d03:	50                   	push   %eax
f0111d04:	e8 67 f0 fe ff       	call   f0100d70 <execute_command>
f0111d09:	83 c4 10             	add    $0x10,%esp
	va = 0x2802000;
f0111d0c:	c7 45 dc 00 20 80 02 	movl   $0x2802000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111d13:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0111d18:	83 ec 08             	sub    $0x8,%esp
f0111d1b:	ff 75 dc             	pushl  -0x24(%ebp)
f0111d1e:	50                   	push   %eax
f0111d1f:	e8 b5 61 ff ff       	call   f0107ed9 <virtual_to_physical>
f0111d24:	83 c4 10             	add    $0x10,%esp
f0111d27:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111d2a:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0111d2f:	83 ec 08             	sub    $0x8,%esp
f0111d32:	ff 75 dc             	pushl  -0x24(%ebp)
f0111d35:	50                   	push   %eax
f0111d36:	e8 73 46 00 00       	call   f01163ae <CA>
f0111d3b:	83 c4 10             	add    $0x10,%esp
f0111d3e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111d41:	74 17                	je     f0111d5a <test_virtual_to_physical+0x24c>
		panic("[EVAL] #5 Test of virtual_to_physical Entry Failed.\n");
f0111d43:	83 ec 04             	sub    $0x4,%esp
f0111d46:	68 94 8f 13 f0       	push   $0xf0138f94
f0111d4b:	68 3a 01 00 00       	push   $0x13a
f0111d50:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0111d55:	e8 ab e4 fe ff       	call   f0100205 <_panic>

	//============================
	va = 0xF0001000;
f0111d5a:	c7 45 dc 00 10 00 f0 	movl   $0xf0001000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111d61:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0111d66:	83 ec 08             	sub    $0x8,%esp
f0111d69:	ff 75 dc             	pushl  -0x24(%ebp)
f0111d6c:	50                   	push   %eax
f0111d6d:	e8 67 61 ff ff       	call   f0107ed9 <virtual_to_physical>
f0111d72:	83 c4 10             	add    $0x10,%esp
f0111d75:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111d78:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0111d7d:	83 ec 08             	sub    $0x8,%esp
f0111d80:	ff 75 dc             	pushl  -0x24(%ebp)
f0111d83:	50                   	push   %eax
f0111d84:	e8 25 46 00 00       	call   f01163ae <CA>
f0111d89:	83 c4 10             	add    $0x10,%esp
f0111d8c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111d8f:	74 17                	je     f0111da8 <test_virtual_to_physical+0x29a>
		panic("[EVAL] #6 Test of virtual_to_physical Entry Failed.\n");
f0111d91:	83 ec 04             	sub    $0x4,%esp
f0111d94:	68 cc 8f 13 f0       	push   $0xf0138fcc
f0111d99:	68 42 01 00 00       	push   $0x142
f0111d9e:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0111da3:	e8 5d e4 fe ff       	call   f0100205 <_panic>

	//============================
	va = 0xF0001005;
f0111da8:	c7 45 dc 05 10 00 f0 	movl   $0xf0001005,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111daf:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0111db4:	83 ec 08             	sub    $0x8,%esp
f0111db7:	ff 75 dc             	pushl  -0x24(%ebp)
f0111dba:	50                   	push   %eax
f0111dbb:	e8 19 61 ff ff       	call   f0107ed9 <virtual_to_physical>
f0111dc0:	83 c4 10             	add    $0x10,%esp
f0111dc3:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111dc6:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0111dcb:	83 ec 08             	sub    $0x8,%esp
f0111dce:	ff 75 dc             	pushl  -0x24(%ebp)
f0111dd1:	50                   	push   %eax
f0111dd2:	e8 d7 45 00 00       	call   f01163ae <CA>
f0111dd7:	83 c4 10             	add    $0x10,%esp
f0111dda:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111ddd:	74 17                	je     f0111df6 <test_virtual_to_physical+0x2e8>
		panic("[EVAL] #7 Test of virtual_to_physical Entry Failed.\n");
f0111ddf:	83 ec 04             	sub    $0x4,%esp
f0111de2:	68 04 90 13 f0       	push   $0xf0139004
f0111de7:	68 4a 01 00 00       	push   $0x14a
f0111dec:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0111df1:	e8 0f e4 fe ff       	call   f0100205 <_panic>

	//============================
	char ap4[100] = "ap 0xeebfe000";execute_command(ap4);
f0111df6:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f0111dfc:	bb e4 91 13 f0       	mov    $0xf01391e4,%ebx
f0111e01:	ba 0e 00 00 00       	mov    $0xe,%edx
f0111e06:	89 c7                	mov    %eax,%edi
f0111e08:	89 de                	mov    %ebx,%esi
f0111e0a:	89 d1                	mov    %edx,%ecx
f0111e0c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111e0e:	8d 95 56 fe ff ff    	lea    -0x1aa(%ebp),%edx
f0111e14:	b9 56 00 00 00       	mov    $0x56,%ecx
f0111e19:	b0 00                	mov    $0x0,%al
f0111e1b:	89 d7                	mov    %edx,%edi
f0111e1d:	f3 aa                	rep stos %al,%es:(%edi)
f0111e1f:	83 ec 0c             	sub    $0xc,%esp
f0111e22:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f0111e28:	50                   	push   %eax
f0111e29:	e8 42 ef fe ff       	call   f0100d70 <execute_command>
f0111e2e:	83 c4 10             	add    $0x10,%esp
	va = 0xeebfe000;
f0111e31:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111e38:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0111e3d:	83 ec 08             	sub    $0x8,%esp
f0111e40:	ff 75 dc             	pushl  -0x24(%ebp)
f0111e43:	50                   	push   %eax
f0111e44:	e8 90 60 ff ff       	call   f0107ed9 <virtual_to_physical>
f0111e49:	83 c4 10             	add    $0x10,%esp
f0111e4c:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111e4f:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0111e54:	83 ec 08             	sub    $0x8,%esp
f0111e57:	ff 75 dc             	pushl  -0x24(%ebp)
f0111e5a:	50                   	push   %eax
f0111e5b:	e8 4e 45 00 00       	call   f01163ae <CA>
f0111e60:	83 c4 10             	add    $0x10,%esp
f0111e63:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111e66:	74 17                	je     f0111e7f <test_virtual_to_physical+0x371>
		panic("[EVAL] #8 Test of virtual_to_physical Entry Failed.\n");
f0111e68:	83 ec 04             	sub    $0x4,%esp
f0111e6b:	68 3c 90 13 f0       	push   $0xf013903c
f0111e70:	68 53 01 00 00       	push   $0x153
f0111e75:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0111e7a:	e8 86 e3 fe ff       	call   f0100205 <_panic>

	//============================
	cprintf("Congratulations!! test virtual_to_physical completed successfully.\n");
f0111e7f:	83 ec 0c             	sub    $0xc,%esp
f0111e82:	68 74 90 13 f0       	push   $0xf0139074
f0111e87:	e8 82 ee fe ff       	call   f0100d0e <cprintf>
f0111e8c:	83 c4 10             	add    $0x10,%esp

	return 0;
f0111e8f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111e94:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0111e97:	5b                   	pop    %ebx
f0111e98:	5e                   	pop    %esi
f0111e99:	5f                   	pop    %edi
f0111e9a:	5d                   	pop    %ebp
f0111e9b:	c3                   	ret    

f0111e9c <test_cut_paste_pages>:

//===============================
// 1) TEST CUT-PASTE PAGES:
//===============================
int test_cut_paste_pages()
{
f0111e9c:	55                   	push   %ebp
f0111e9d:	89 e5                	mov    %esp,%ebp
f0111e9f:	57                   	push   %edi
f0111ea0:	56                   	push   %esi
f0111ea1:	53                   	push   %ebx
f0111ea2:	81 ec ec 03 00 00    	sub    $0x3ec,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0111ea8:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0111eae:	bb f8 94 13 f0       	mov    $0xf01394f8,%ebx
f0111eb3:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111eb8:	89 c7                	mov    %eax,%edi
f0111eba:	89 de                	mov    %ebx,%esi
f0111ebc:	89 d1                	mov    %edx,%ecx
f0111ebe:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111ec0:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0111ec6:	b9 23 00 00 00       	mov    $0x23,%ecx
f0111ecb:	b0 00                	mov    $0x0,%al
f0111ecd:	89 d7                	mov    %edx,%edi
f0111ecf:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0111ed1:	6a 00                	push   $0x0
f0111ed3:	6a 0a                	push   $0xa
f0111ed5:	6a 14                	push   $0x14
f0111ed7:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0111edd:	50                   	push   %eax
f0111ede:	e8 c6 71 ff ff       	call   f01090a9 <env_create>
f0111ee3:	83 c4 10             	add    $0x10,%esp
f0111ee6:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0111ee9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111eec:	8b 40 5c             	mov    0x5c(%eax),%eax
f0111eef:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0111ef2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111ef5:	8b 40 60             	mov    0x60(%eax),%eax
f0111ef8:	89 45 90             	mov    %eax,-0x70(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0111efb:	8b 45 90             	mov    -0x70(%ebp),%eax
f0111efe:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0111f01:	c7 85 4a ff ff ff 61 	movl   $0x20707561,-0xb6(%ebp)
f0111f08:	75 70 20 
f0111f0b:	c7 85 4e ff ff ff 00 	movl   $0x0,-0xb2(%ebp)
f0111f12:	00 00 00 
f0111f15:	8d 95 52 ff ff ff    	lea    -0xae(%ebp),%edx
f0111f1b:	b9 03 00 00 00       	mov    $0x3,%ecx
f0111f20:	b8 00 00 00 00       	mov    $0x0,%eax
f0111f25:	89 d7                	mov    %edx,%edi
f0111f27:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0111f29:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111f2c:	8b 40 4c             	mov    0x4c(%eax),%eax
f0111f2f:	83 ec 08             	sub    $0x8,%esp
f0111f32:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0111f38:	52                   	push   %edx
f0111f39:	50                   	push   %eax
f0111f3a:	e8 6f fb 01 00       	call   f0131aae <ltostr>
f0111f3f:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0111f42:	83 ec 04             	sub    $0x4,%esp
f0111f45:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111f4b:	50                   	push   %eax
f0111f4c:	8d 85 36 ff ff ff    	lea    -0xca(%ebp),%eax
f0111f52:	50                   	push   %eax
f0111f53:	8d 85 4a ff ff ff    	lea    -0xb6(%ebp),%eax
f0111f59:	50                   	push   %eax
f0111f5a:	e8 47 fc 01 00       	call   f0131ba6 <strcconcat>
f0111f5f:	83 c4 10             	add    $0x10,%esp
	//===================================================
	int numOfArgs = 0;
f0111f62:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6;
	int kilo = 1024 ;
f0111f69:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f0111f70:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)

	ClearUserSpace(proc_directory);
f0111f77:	83 ec 0c             	sub    $0xc,%esp
f0111f7a:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111f7d:	e8 2d 45 00 00       	call   f01164af <ClearUserSpace>
f0111f82:	83 c4 10             	add    $0x10,%esp

	char ap1[100] ;strcconcat(aup_cmd, " 0x2800000", ap1); execute_command(ap1);
f0111f85:	83 ec 04             	sub    $0x4,%esp
f0111f88:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0111f8e:	50                   	push   %eax
f0111f8f:	68 48 92 13 f0       	push   $0xf0139248
f0111f94:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111f9a:	50                   	push   %eax
f0111f9b:	e8 06 fc 01 00       	call   f0131ba6 <strcconcat>
f0111fa0:	83 c4 10             	add    $0x10,%esp
f0111fa3:	83 ec 0c             	sub    $0xc,%esp
f0111fa6:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0111fac:	50                   	push   %eax
f0111fad:	e8 be ed fe ff       	call   f0100d70 <execute_command>
f0111fb2:	83 c4 10             	add    $0x10,%esp
	char ap2[100] ;strcconcat(aup_cmd, " 0x2801000", ap2); execute_command(ap2);
f0111fb5:	83 ec 04             	sub    $0x4,%esp
f0111fb8:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f0111fbe:	50                   	push   %eax
f0111fbf:	68 53 92 13 f0       	push   $0xf0139253
f0111fc4:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111fca:	50                   	push   %eax
f0111fcb:	e8 d6 fb 01 00       	call   f0131ba6 <strcconcat>
f0111fd0:	83 c4 10             	add    $0x10,%esp
f0111fd3:	83 ec 0c             	sub    $0xc,%esp
f0111fd6:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f0111fdc:	50                   	push   %eax
f0111fdd:	e8 8e ed fe ff       	call   f0100d70 <execute_command>
f0111fe2:	83 c4 10             	add    $0x10,%esp
	char ap3[100] ;strcconcat(aup_cmd, " 0x2802000", ap3); execute_command(ap3);
f0111fe5:	83 ec 04             	sub    $0x4,%esp
f0111fe8:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f0111fee:	50                   	push   %eax
f0111fef:	68 5e 92 13 f0       	push   $0xf013925e
f0111ff4:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111ffa:	50                   	push   %eax
f0111ffb:	e8 a6 fb 01 00       	call   f0131ba6 <strcconcat>
f0112000:	83 c4 10             	add    $0x10,%esp
f0112003:	83 ec 0c             	sub    $0xc,%esp
f0112006:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f011200c:	50                   	push   %eax
f011200d:	e8 5e ed fe ff       	call   f0100d70 <execute_command>
f0112012:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x2800000; *ptr1 = 'a';
f0112015:	c7 45 c0 00 00 80 02 	movl   $0x2800000,-0x40(%ebp)
f011201c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011201f:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x28017FF; *ptr1 = 'b';
f0112022:	c7 45 c0 ff 17 80 02 	movl   $0x28017ff,-0x40(%ebp)
f0112029:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011202c:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x2802FFF; *ptr1 = 'c';
f011202f:	c7 45 c0 ff 2f 80 02 	movl   $0x2802fff,-0x40(%ebp)
f0112036:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112039:	c6 00 63             	movb   $0x63,(%eax)

	uint32 perms = GP(proc_directory, (uint32)ptr1);
f011203c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011203f:	83 ec 08             	sub    $0x8,%esp
f0112042:	50                   	push   %eax
f0112043:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112046:	e8 45 44 00 00       	call   f0116490 <GP>
f011204b:	83 c4 10             	add    $0x10,%esp
f011204e:	89 45 bc             	mov    %eax,-0x44(%ebp)

	int eval = 0;
f0112051:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int correct = 1;
f0112058:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	int ff1 = sys_calculate_free_frames();
f011205f:	e8 7f ad ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0112064:	89 45 b8             	mov    %eax,-0x48(%ebp)

	/*=============================================*/
	/*PART I: Destination Pages Does NOT Exist 60% */
	/*=============================================*/
	cprintf("CASE I: Destination Pages Does NOT Exist [60%]\n") ;
f0112067:	83 ec 0c             	sub    $0xc,%esp
f011206a:	68 6c 92 13 f0       	push   $0xf013926c
f011206f:	e8 9a ec fe ff       	call   f0100d0e <cprintf>
f0112074:	83 c4 10             	add    $0x10,%esp
	int ret = cut_paste_pages(proc_directory, 0x2800000, 0x2900000, 3) ;
f0112077:	6a 03                	push   $0x3
f0112079:	68 00 00 90 02       	push   $0x2900000
f011207e:	68 00 00 80 02       	push   $0x2800000
f0112083:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112086:	e8 83 68 ff ff       	call   f010890e <cut_paste_pages>
f011208b:	83 c4 10             	add    $0x10,%esp
f011208e:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	int ff2 = sys_calculate_free_frames();
f0112091:	e8 4d ad ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0112096:	89 45 b0             	mov    %eax,-0x50(%ebp)

	correct = 1 ;
f0112099:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	if (ret != 0 || ff1 != ff2)
f01120a0:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f01120a4:	75 08                	jne    f01120ae <test_cut_paste_pages+0x212>
f01120a6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01120a9:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01120ac:	74 2b                	je     f01120d9 <test_cut_paste_pages+0x23d>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f01120ae:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01120b1:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01120b4:	83 ec 0c             	sub    $0xc,%esp
f01120b7:	50                   	push   %eax
f01120b8:	ff 75 b4             	pushl  -0x4c(%ebp)
f01120bb:	68 9c 92 13 f0       	push   $0xf013929c
f01120c0:	68 91 01 00 00       	push   $0x191
f01120c5:	68 5e 8a 13 f0       	push   $0xf0138a5e
f01120ca:	e8 44 e3 fe ff       	call   f0100413 <_warn>
f01120cf:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f01120d2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 5 ;
f01120d9:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01120dd:	74 04                	je     f01120e3 <test_cut_paste_pages+0x247>
f01120df:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f01120e3:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2800000, 0x2900000, 3*PAGE_SIZE, 1, perms, 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f01120ea:	83 ec 08             	sub    $0x8,%esp
f01120ed:	6a 00                	push   $0x0
f01120ef:	6a 01                	push   $0x1
f01120f1:	6a 00                	push   $0x0
f01120f3:	68 ff 0f 00 00       	push   $0xfff
f01120f8:	ff 75 bc             	pushl  -0x44(%ebp)
f01120fb:	6a 01                	push   $0x1
f01120fd:	68 00 30 00 00       	push   $0x3000
f0112102:	68 00 00 90 02       	push   $0x2900000
f0112107:	68 00 00 80 02       	push   $0x2800000
f011210c:	ff 75 d4             	pushl  -0x2c(%ebp)
f011210f:	e8 cf 43 00 00       	call   f01164e3 <CCP>
f0112114:	83 c4 30             	add    $0x30,%esp
f0112117:	83 f8 01             	cmp    $0x1,%eax
f011211a:	74 21                	je     f011213d <test_cut_paste_pages+0x2a1>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f011211c:	83 ec 04             	sub    $0x4,%esp
f011211f:	68 f0 92 13 f0       	push   $0xf01392f0
f0112124:	68 99 01 00 00       	push   $0x199
f0112129:	68 5e 8a 13 f0       	push   $0xf0138a5e
f011212e:	e8 e0 e2 fe ff       	call   f0100413 <_warn>
f0112133:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112136:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 15 ;
f011213d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112141:	74 04                	je     f0112147 <test_cut_paste_pages+0x2ab>
f0112143:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	correct = 1 ;
f0112147:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2900000, 0) && CB(proc_directory, 0x2901000, 0) && CB(proc_directory, 0x2902000, 0))
f011214e:	83 ec 04             	sub    $0x4,%esp
f0112151:	6a 00                	push   $0x0
f0112153:	68 00 00 90 02       	push   $0x2900000
f0112158:	ff 75 d4             	pushl  -0x2c(%ebp)
f011215b:	e8 5f 41 00 00       	call   f01162bf <CB>
f0112160:	83 c4 10             	add    $0x10,%esp
f0112163:	85 c0                	test   %eax,%eax
f0112165:	0f 84 f6 00 00 00    	je     f0112261 <test_cut_paste_pages+0x3c5>
f011216b:	83 ec 04             	sub    $0x4,%esp
f011216e:	6a 00                	push   $0x0
f0112170:	68 00 10 90 02       	push   $0x2901000
f0112175:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112178:	e8 42 41 00 00       	call   f01162bf <CB>
f011217d:	83 c4 10             	add    $0x10,%esp
f0112180:	85 c0                	test   %eax,%eax
f0112182:	0f 84 d9 00 00 00    	je     f0112261 <test_cut_paste_pages+0x3c5>
f0112188:	83 ec 04             	sub    $0x4,%esp
f011218b:	6a 00                	push   $0x0
f011218d:	68 00 20 90 02       	push   $0x2902000
f0112192:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112195:	e8 25 41 00 00       	call   f01162bf <CB>
f011219a:	83 c4 10             	add    $0x10,%esp
f011219d:	85 c0                	test   %eax,%eax
f011219f:	0f 84 bc 00 00 00    	je     f0112261 <test_cut_paste_pages+0x3c5>
	{
		ptr1 = (char*)0x2900000;
f01121a5:	c7 45 c0 00 00 90 02 	movl   $0x2900000,-0x40(%ebp)
		ptr2 = (char*)0x29017FF;
f01121ac:	c7 45 ac ff 17 90 02 	movl   $0x29017ff,-0x54(%ebp)
		ptr3 = (char*)0x2902FFF;
f01121b3:	c7 45 a8 ff 2f 90 02 	movl   $0x2902fff,-0x58(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'b' || (*ptr3) != 'c')
f01121ba:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01121bd:	8a 00                	mov    (%eax),%al
f01121bf:	3c 61                	cmp    $0x61,%al
f01121c1:	75 12                	jne    f01121d5 <test_cut_paste_pages+0x339>
f01121c3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01121c6:	8a 00                	mov    (%eax),%al
f01121c8:	3c 62                	cmp    $0x62,%al
f01121ca:	75 09                	jne    f01121d5 <test_cut_paste_pages+0x339>
f01121cc:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01121cf:	8a 00                	mov    (%eax),%al
f01121d1:	3c 63                	cmp    $0x63,%al
f01121d3:	74 21                	je     f01121f6 <test_cut_paste_pages+0x35a>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01121d5:	83 ec 04             	sub    $0x4,%esp
f01121d8:	68 3c 93 13 f0       	push   $0xf013933c
f01121dd:	68 a6 01 00 00       	push   $0x1a6
f01121e2:	68 5e 8a 13 f0       	push   $0xf0138a5e
f01121e7:	e8 27 e2 fe ff       	call   f0100413 <_warn>
f01121ec:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01121ef:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01121f6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01121fa:	74 04                	je     f0112200 <test_cut_paste_pages+0x364>
f01121fc:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112200:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CB(proc_directory, 0x2901000, 1))
f0112207:	83 ec 04             	sub    $0x4,%esp
f011220a:	6a 01                	push   $0x1
f011220c:	68 00 10 90 02       	push   $0x2901000
f0112211:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112214:	e8 a6 40 00 00       	call   f01162bf <CB>
f0112219:	83 c4 10             	add    $0x10,%esp
f011221c:	85 c0                	test   %eax,%eax
f011221e:	74 41                	je     f0112261 <test_cut_paste_pages+0x3c5>
		{
			*ptr2 = 'y';
f0112220:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112223:	c6 00 79             	movb   $0x79,(%eax)
			if ((*ptr2) != 'y')
f0112226:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112229:	8a 00                	mov    (%eax),%al
f011222b:	3c 79                	cmp    $0x79,%al
f011222d:	74 21                	je     f0112250 <test_cut_paste_pages+0x3b4>
			{
				warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011222f:	83 ec 04             	sub    $0x4,%esp
f0112232:	68 3c 93 13 f0       	push   $0xf013933c
f0112237:	68 b1 01 00 00       	push   $0x1b1
f011223c:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0112241:	e8 cd e1 fe ff       	call   f0100413 <_warn>
f0112246:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112249:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0112250:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112254:	74 04                	je     f011225a <test_cut_paste_pages+0x3be>
f0112256:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011225a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}


	ff1 = ff2 ;
f0112261:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112264:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x2901000, 0x2BFF000, 2) ;
f0112267:	6a 02                	push   $0x2
f0112269:	68 00 f0 bf 02       	push   $0x2bff000
f011226e:	68 00 10 90 02       	push   $0x2901000
f0112273:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112276:	e8 93 66 ff ff       	call   f010890e <cut_paste_pages>
f011227b:	83 c4 10             	add    $0x10,%esp
f011227e:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0112281:	e8 5d ab ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0112286:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != 0 || ff1 - ff2 != 1)
f0112289:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f011228d:	75 0b                	jne    f011229a <test_cut_paste_pages+0x3fe>
f011228f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112292:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112295:	83 f8 01             	cmp    $0x1,%eax
f0112298:	74 2b                	je     f01122c5 <test_cut_paste_pages+0x429>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f011229a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011229d:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01122a0:	83 ec 0c             	sub    $0xc,%esp
f01122a3:	50                   	push   %eax
f01122a4:	ff 75 b4             	pushl  -0x4c(%ebp)
f01122a7:	68 9c 92 13 f0       	push   $0xf013929c
f01122ac:	68 c2 01 00 00       	push   $0x1c2
f01122b1:	68 5e 8a 13 f0       	push   $0xf0138a5e
f01122b6:	e8 58 e1 fe ff       	call   f0100413 <_warn>
f01122bb:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f01122be:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f01122c5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01122c9:	74 04                	je     f01122cf <test_cut_paste_pages+0x433>
f01122cb:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f01122cf:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2901000, 0x2BFF000, 2*PAGE_SIZE, 1, perms , 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f01122d6:	83 ec 08             	sub    $0x8,%esp
f01122d9:	6a 00                	push   $0x0
f01122db:	6a 01                	push   $0x1
f01122dd:	6a 00                	push   $0x0
f01122df:	68 ff 0f 00 00       	push   $0xfff
f01122e4:	ff 75 bc             	pushl  -0x44(%ebp)
f01122e7:	6a 01                	push   $0x1
f01122e9:	68 00 20 00 00       	push   $0x2000
f01122ee:	68 00 f0 bf 02       	push   $0x2bff000
f01122f3:	68 00 10 90 02       	push   $0x2901000
f01122f8:	ff 75 d4             	pushl  -0x2c(%ebp)
f01122fb:	e8 e3 41 00 00       	call   f01164e3 <CCP>
f0112300:	83 c4 30             	add    $0x30,%esp
f0112303:	83 f8 01             	cmp    $0x1,%eax
f0112306:	74 21                	je     f0112329 <test_cut_paste_pages+0x48d>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0112308:	83 ec 04             	sub    $0x4,%esp
f011230b:	68 f0 92 13 f0       	push   $0xf01392f0
f0112310:	68 ca 01 00 00       	push   $0x1ca
f0112315:	68 5e 8a 13 f0       	push   $0xf0138a5e
f011231a:	e8 f4 e0 fe ff       	call   f0100413 <_warn>
f011231f:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112322:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112329:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011232d:	74 04                	je     f0112333 <test_cut_paste_pages+0x497>
f011232f:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0112333:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2BFF7FF, 0) && CB(proc_directory, 0x2C00FFF, 0))
f011233a:	83 ec 04             	sub    $0x4,%esp
f011233d:	6a 00                	push   $0x0
f011233f:	68 ff f7 bf 02       	push   $0x2bff7ff
f0112344:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112347:	e8 73 3f 00 00       	call   f01162bf <CB>
f011234c:	83 c4 10             	add    $0x10,%esp
f011234f:	85 c0                	test   %eax,%eax
f0112351:	74 6b                	je     f01123be <test_cut_paste_pages+0x522>
f0112353:	83 ec 04             	sub    $0x4,%esp
f0112356:	6a 00                	push   $0x0
f0112358:	68 ff 0f c0 02       	push   $0x2c00fff
f011235d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112360:	e8 5a 3f 00 00       	call   f01162bf <CB>
f0112365:	83 c4 10             	add    $0x10,%esp
f0112368:	85 c0                	test   %eax,%eax
f011236a:	74 52                	je     f01123be <test_cut_paste_pages+0x522>
	{
		ptr1 = (char*)0x2BFF7FF;
f011236c:	c7 45 c0 ff f7 bf 02 	movl   $0x2bff7ff,-0x40(%ebp)
		ptr2 = (char*)0x2C00FFF;
f0112373:	c7 45 ac ff 0f c0 02 	movl   $0x2c00fff,-0x54(%ebp)
		if ((*ptr1) != 'y' || (*ptr2) != 'c')
f011237a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011237d:	8a 00                	mov    (%eax),%al
f011237f:	3c 79                	cmp    $0x79,%al
f0112381:	75 09                	jne    f011238c <test_cut_paste_pages+0x4f0>
f0112383:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112386:	8a 00                	mov    (%eax),%al
f0112388:	3c 63                	cmp    $0x63,%al
f011238a:	74 21                	je     f01123ad <test_cut_paste_pages+0x511>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011238c:	83 ec 04             	sub    $0x4,%esp
f011238f:	68 3c 93 13 f0       	push   $0xf013933c
f0112394:	68 d6 01 00 00       	push   $0x1d6
f0112399:	68 5e 8a 13 f0       	push   $0xf0138a5e
f011239e:	e8 70 e0 fe ff       	call   f0100413 <_warn>
f01123a3:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01123a6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01123ad:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01123b1:	74 04                	je     f01123b7 <test_cut_paste_pages+0x51b>
f01123b3:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01123b7:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}
	cprintf("CASE I: END\n") ;
f01123be:	83 ec 0c             	sub    $0xc,%esp
f01123c1:	68 75 93 13 f0       	push   $0xf0139375
f01123c6:	e8 43 e9 fe ff       	call   f0100d0e <cprintf>
f01123cb:	83 c4 10             	add    $0x10,%esp

	/*========================================*/
	/*PART II: Destination Pages Exist 40%	  */
	/*========================================*/
	cprintf("\nCASE II: Destination Pages Exist [40%]\n") ;
f01123ce:	83 ec 0c             	sub    $0xc,%esp
f01123d1:	68 84 93 13 f0       	push   $0xf0139384
f01123d6:	e8 33 e9 fe ff       	call   f0100d0e <cprintf>
f01123db:	83 c4 10             	add    $0x10,%esp

	char ap4[100] ;strcconcat(aup_cmd, " 0x1400000", ap4); execute_command(ap4);
f01123de:	83 ec 04             	sub    $0x4,%esp
f01123e1:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f01123e7:	50                   	push   %eax
f01123e8:	68 ad 93 13 f0       	push   $0xf01393ad
f01123ed:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01123f3:	50                   	push   %eax
f01123f4:	e8 ad f7 01 00       	call   f0131ba6 <strcconcat>
f01123f9:	83 c4 10             	add    $0x10,%esp
f01123fc:	83 ec 0c             	sub    $0xc,%esp
f01123ff:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0112405:	50                   	push   %eax
f0112406:	e8 65 e9 fe ff       	call   f0100d70 <execute_command>
f011240b:	83 c4 10             	add    $0x10,%esp
	char ap5[100] ;strcconcat(aup_cmd, " 0x1401000", ap5); execute_command(ap5);
f011240e:	83 ec 04             	sub    $0x4,%esp
f0112411:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0112417:	50                   	push   %eax
f0112418:	68 b8 93 13 f0       	push   $0xf01393b8
f011241d:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112423:	50                   	push   %eax
f0112424:	e8 7d f7 01 00       	call   f0131ba6 <strcconcat>
f0112429:	83 c4 10             	add    $0x10,%esp
f011242c:	83 ec 0c             	sub    $0xc,%esp
f011242f:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0112435:	50                   	push   %eax
f0112436:	e8 35 e9 fe ff       	call   f0100d70 <execute_command>
f011243b:	83 c4 10             	add    $0x10,%esp
	char ap6[100] ;strcconcat(aup_cmd, " 0x1402000", ap6); execute_command(ap6);
f011243e:	83 ec 04             	sub    $0x4,%esp
f0112441:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0112447:	50                   	push   %eax
f0112448:	68 c3 93 13 f0       	push   $0xf01393c3
f011244d:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112453:	50                   	push   %eax
f0112454:	e8 4d f7 01 00       	call   f0131ba6 <strcconcat>
f0112459:	83 c4 10             	add    $0x10,%esp
f011245c:	83 ec 0c             	sub    $0xc,%esp
f011245f:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0112465:	50                   	push   %eax
f0112466:	e8 05 e9 fe ff       	call   f0100d70 <execute_command>
f011246b:	83 c4 10             	add    $0x10,%esp
	char ap7[100] ;strcconcat(aup_cmd, " 0x1C00000", ap7); execute_command(ap7);
f011246e:	83 ec 04             	sub    $0x4,%esp
f0112471:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0112477:	50                   	push   %eax
f0112478:	68 ce 93 13 f0       	push   $0xf01393ce
f011247d:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112483:	50                   	push   %eax
f0112484:	e8 1d f7 01 00       	call   f0131ba6 <strcconcat>
f0112489:	83 c4 10             	add    $0x10,%esp
f011248c:	83 ec 0c             	sub    $0xc,%esp
f011248f:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0112495:	50                   	push   %eax
f0112496:	e8 d5 e8 fe ff       	call   f0100d70 <execute_command>
f011249b:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x1400000; *ptr1 = 'a';
f011249e:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
f01124a5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01124a8:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x14007FF; *ptr1 = 'b';
f01124ab:	c7 45 c0 ff 07 40 01 	movl   $0x14007ff,-0x40(%ebp)
f01124b2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01124b5:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x1400FFF; *ptr1 = 'c';
f01124b8:	c7 45 c0 ff 0f 40 01 	movl   $0x1400fff,-0x40(%ebp)
f01124bf:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01124c2:	c6 00 63             	movb   $0x63,(%eax)
	ptr1 = (char*)0x1C00000; *ptr1 = 'x';
f01124c5:	c7 45 c0 00 00 c0 01 	movl   $0x1c00000,-0x40(%ebp)
f01124cc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01124cf:	c6 00 78             	movb   $0x78,(%eax)
	ptr1 = (char*)0x1C007FF; *ptr1 = 'y';
f01124d2:	c7 45 c0 ff 07 c0 01 	movl   $0x1c007ff,-0x40(%ebp)
f01124d9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01124dc:	c6 00 79             	movb   $0x79,(%eax)
	ptr1 = (char*)0x1C00FFF; *ptr1 = 'z';
f01124df:	c7 45 c0 ff 0f c0 01 	movl   $0x1c00fff,-0x40(%ebp)
f01124e6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01124e9:	c6 00 7a             	movb   $0x7a,(%eax)
	uint32 srcp = GP(proc_directory, 0x1C00000) ;
f01124ec:	83 ec 08             	sub    $0x8,%esp
f01124ef:	68 00 00 c0 01       	push   $0x1c00000
f01124f4:	ff 75 d4             	pushl  -0x2c(%ebp)
f01124f7:	e8 94 3f 00 00       	call   f0116490 <GP>
f01124fc:	83 c4 10             	add    $0x10,%esp
f01124ff:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	uint32 dstp = GP(proc_directory, 0x1400000) ;
f0112502:	83 ec 08             	sub    $0x8,%esp
f0112505:	68 00 00 40 01       	push   $0x1400000
f011250a:	ff 75 d4             	pushl  -0x2c(%ebp)
f011250d:	e8 7e 3f 00 00       	call   f0116490 <GP>
f0112512:	83 c4 10             	add    $0x10,%esp
f0112515:	89 45 a0             	mov    %eax,-0x60(%ebp)

	ff1 = sys_calculate_free_frames();
f0112518:	e8 c6 a8 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011251d:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1C00000, 0x1400000, 1) ;
f0112520:	6a 01                	push   $0x1
f0112522:	68 00 00 40 01       	push   $0x1400000
f0112527:	68 00 00 c0 01       	push   $0x1c00000
f011252c:	ff 75 d4             	pushl  -0x2c(%ebp)
f011252f:	e8 da 63 ff ff       	call   f010890e <cut_paste_pages>
f0112534:	83 c4 10             	add    $0x10,%esp
f0112537:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f011253a:	e8 a4 a8 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011253f:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f0112542:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0112546:	75 08                	jne    f0112550 <test_cut_paste_pages+0x6b4>
f0112548:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011254b:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011254e:	74 2b                	je     f011257b <test_cut_paste_pages+0x6df>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0112550:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112553:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112556:	83 ec 0c             	sub    $0xc,%esp
f0112559:	50                   	push   %eax
f011255a:	ff 75 b4             	pushl  -0x4c(%ebp)
f011255d:	68 dc 93 13 f0       	push   $0xf01393dc
f0112562:	68 f9 01 00 00       	push   $0x1f9
f0112567:	68 5e 8a 13 f0       	push   $0xf0138a5e
f011256c:	e8 a2 de fe ff       	call   f0100413 <_warn>
f0112571:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0112574:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f011257b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011257f:	74 04                	je     f0112585 <test_cut_paste_pages+0x6e9>
f0112581:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0112585:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	int chk_cntnt = 1 ;
f011258c:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CCP(proc_directory, 0x1C00000, 0x1400000, 1*PAGE_SIZE, 1, dstp , 0xFFF, srcp, 0xFFF, CHK_CUT_PASTE) != 1)
f0112593:	83 ec 08             	sub    $0x8,%esp
f0112596:	6a 00                	push   $0x0
f0112598:	68 ff 0f 00 00       	push   $0xfff
f011259d:	ff 75 a4             	pushl  -0x5c(%ebp)
f01125a0:	68 ff 0f 00 00       	push   $0xfff
f01125a5:	ff 75 a0             	pushl  -0x60(%ebp)
f01125a8:	6a 01                	push   $0x1
f01125aa:	68 00 10 00 00       	push   $0x1000
f01125af:	68 00 00 40 01       	push   $0x1400000
f01125b4:	68 00 00 c0 01       	push   $0x1c00000
f01125b9:	ff 75 d4             	pushl  -0x2c(%ebp)
f01125bc:	e8 22 3f 00 00       	call   f01164e3 <CCP>
f01125c1:	83 c4 30             	add    $0x30,%esp
f01125c4:	83 f8 01             	cmp    $0x1,%eax
f01125c7:	74 28                	je     f01125f1 <test_cut_paste_pages+0x755>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f01125c9:	83 ec 04             	sub    $0x4,%esp
f01125cc:	68 f0 92 13 f0       	push   $0xf01392f0
f01125d1:	68 02 02 00 00       	push   $0x202
f01125d6:	68 5e 8a 13 f0       	push   $0xf0138a5e
f01125db:	e8 33 de fe ff       	call   f0100413 <_warn>
f01125e0:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01125e3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f01125ea:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f01125f1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01125f5:	74 04                	je     f01125fb <test_cut_paste_pages+0x75f>
f01125f7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f01125fb:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0112602:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112606:	0f 84 92 00 00 00    	je     f011269e <test_cut_paste_pages+0x802>
	{
		ptr1 = (char*)0x1400000;
f011260c:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0112613:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f011261a:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0112621:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0112628:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f011262f:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112636:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112639:	8a 00                	mov    (%eax),%al
f011263b:	3c 61                	cmp    $0x61,%al
f011263d:	75 2d                	jne    f011266c <test_cut_paste_pages+0x7d0>
f011263f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112642:	8a 00                	mov    (%eax),%al
f0112644:	3c 78                	cmp    $0x78,%al
f0112646:	75 24                	jne    f011266c <test_cut_paste_pages+0x7d0>
f0112648:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011264b:	8a 00                	mov    (%eax),%al
f011264d:	3c 62                	cmp    $0x62,%al
f011264f:	75 1b                	jne    f011266c <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112651:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112654:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112656:	3c 79                	cmp    $0x79,%al
f0112658:	75 12                	jne    f011266c <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f011265a:	8b 45 98             	mov    -0x68(%ebp),%eax
f011265d:	8a 00                	mov    (%eax),%al
f011265f:	3c 63                	cmp    $0x63,%al
f0112661:	75 09                	jne    f011266c <test_cut_paste_pages+0x7d0>
f0112663:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112666:	8a 00                	mov    (%eax),%al
f0112668:	3c 7a                	cmp    $0x7a,%al
f011266a:	74 21                	je     f011268d <test_cut_paste_pages+0x7f1>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011266c:	83 ec 04             	sub    $0x4,%esp
f011266f:	68 3c 93 13 f0       	push   $0xf013933c
f0112674:	68 14 02 00 00       	push   $0x214
f0112679:	68 5e 8a 13 f0       	push   $0xf0138a5e
f011267e:	e8 90 dd fe ff       	call   f0100413 <_warn>
f0112683:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112686:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011268d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112691:	74 04                	je     f0112697 <test_cut_paste_pages+0x7fb>
f0112693:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112697:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	ff1 = sys_calculate_free_frames();
f011269e:	e8 40 a7 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f01126a3:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1400000, 0x1BFF000, 3) ;
f01126a6:	6a 03                	push   $0x3
f01126a8:	68 00 f0 bf 01       	push   $0x1bff000
f01126ad:	68 00 00 40 01       	push   $0x1400000
f01126b2:	ff 75 d4             	pushl  -0x2c(%ebp)
f01126b5:	e8 54 62 ff ff       	call   f010890e <cut_paste_pages>
f01126ba:	83 c4 10             	add    $0x10,%esp
f01126bd:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f01126c0:	e8 1e a7 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f01126c5:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f01126c8:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f01126cc:	75 08                	jne    f01126d6 <test_cut_paste_pages+0x83a>
f01126ce:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01126d1:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01126d4:	74 2b                	je     f0112701 <test_cut_paste_pages+0x865>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f01126d6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01126d9:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01126dc:	83 ec 0c             	sub    $0xc,%esp
f01126df:	50                   	push   %eax
f01126e0:	ff 75 b4             	pushl  -0x4c(%ebp)
f01126e3:	68 dc 93 13 f0       	push   $0xf01393dc
f01126e8:	68 23 02 00 00       	push   $0x223
f01126ed:	68 5e 8a 13 f0       	push   $0xf0138a5e
f01126f2:	e8 1c dd fe ff       	call   f0100413 <_warn>
f01126f7:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f01126fa:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112701:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112705:	74 04                	je     f011270b <test_cut_paste_pages+0x86f>
f0112707:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f011270b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	chk_cntnt = 1;
f0112712:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0112719:	83 ec 04             	sub    $0x4,%esp
f011271c:	6a 00                	push   $0x0
f011271e:	68 00 00 40 01       	push   $0x1400000
f0112723:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112726:	e8 94 3b 00 00       	call   f01162bf <CB>
f011272b:	83 c4 10             	add    $0x10,%esp
f011272e:	83 f8 01             	cmp    $0x1,%eax
f0112731:	0f 85 80 00 00 00    	jne    f01127b7 <test_cut_paste_pages+0x91b>
f0112737:	83 ec 04             	sub    $0x4,%esp
f011273a:	6a 00                	push   $0x0
f011273c:	68 00 10 40 01       	push   $0x1401000
f0112741:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112744:	e8 76 3b 00 00       	call   f01162bf <CB>
f0112749:	83 c4 10             	add    $0x10,%esp
f011274c:	83 f8 01             	cmp    $0x1,%eax
f011274f:	75 66                	jne    f01127b7 <test_cut_paste_pages+0x91b>
f0112751:	83 ec 04             	sub    $0x4,%esp
f0112754:	6a 00                	push   $0x0
f0112756:	68 00 20 40 01       	push   $0x1402000
f011275b:	ff 75 d4             	pushl  -0x2c(%ebp)
f011275e:	e8 5c 3b 00 00       	call   f01162bf <CB>
f0112763:	83 c4 10             	add    $0x10,%esp
f0112766:	83 f8 01             	cmp    $0x1,%eax
f0112769:	75 4c                	jne    f01127b7 <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f011276b:	83 ec 04             	sub    $0x4,%esp
f011276e:	6a 00                	push   $0x0
f0112770:	68 00 f0 bf 01       	push   $0x1bff000
f0112775:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112778:	e8 42 3b 00 00       	call   f01162bf <CB>
f011277d:	83 c4 10             	add    $0x10,%esp
		correct = 0;
	}
	if (correct) eval += 10 ;
	correct = 1 ;
	chk_cntnt = 1;
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0112780:	85 c0                	test   %eax,%eax
f0112782:	75 33                	jne    f01127b7 <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0112784:	83 ec 04             	sub    $0x4,%esp
f0112787:	6a 00                	push   $0x0
f0112789:	68 00 00 c0 01       	push   $0x1c00000
f011278e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112791:	e8 29 3b 00 00       	call   f01162bf <CB>
f0112796:	83 c4 10             	add    $0x10,%esp
f0112799:	83 f8 01             	cmp    $0x1,%eax
f011279c:	75 19                	jne    f01127b7 <test_cut_paste_pages+0x91b>
f011279e:	83 ec 04             	sub    $0x4,%esp
f01127a1:	6a 00                	push   $0x0
f01127a3:	68 00 10 c0 01       	push   $0x1c01000
f01127a8:	ff 75 d4             	pushl  -0x2c(%ebp)
f01127ab:	e8 0f 3b 00 00       	call   f01162bf <CB>
f01127b0:	83 c4 10             	add    $0x10,%esp
f01127b3:	85 c0                	test   %eax,%eax
f01127b5:	74 28                	je     f01127df <test_cut_paste_pages+0x943>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions)\n");
f01127b7:	83 ec 04             	sub    $0x4,%esp
f01127ba:	68 3c 94 13 f0       	push   $0xf013943c
f01127bf:	68 2c 02 00 00       	push   $0x22c
f01127c4:	68 5e 8a 13 f0       	push   $0xf0138a5e
f01127c9:	e8 45 dc fe ff       	call   f0100413 <_warn>
f01127ce:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01127d1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f01127d8:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f01127df:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01127e3:	74 04                	je     f01127e9 <test_cut_paste_pages+0x94d>
f01127e5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f01127e9:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f01127f0:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01127f4:	0f 84 99 00 00 00    	je     f0112893 <test_cut_paste_pages+0x9f7>
	{
		ptr1 = (char*)0x1400000;
f01127fa:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0112801:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0112808:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f011280f:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0112816:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f011281d:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112824:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112827:	8a 00                	mov    (%eax),%al
f0112829:	3c 61                	cmp    $0x61,%al
f011282b:	75 2d                	jne    f011285a <test_cut_paste_pages+0x9be>
f011282d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112830:	8a 00                	mov    (%eax),%al
f0112832:	3c 78                	cmp    $0x78,%al
f0112834:	75 24                	jne    f011285a <test_cut_paste_pages+0x9be>
f0112836:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112839:	8a 00                	mov    (%eax),%al
f011283b:	3c 62                	cmp    $0x62,%al
f011283d:	75 1b                	jne    f011285a <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f011283f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112842:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112844:	3c 79                	cmp    $0x79,%al
f0112846:	75 12                	jne    f011285a <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112848:	8b 45 98             	mov    -0x68(%ebp),%eax
f011284b:	8a 00                	mov    (%eax),%al
f011284d:	3c 63                	cmp    $0x63,%al
f011284f:	75 09                	jne    f011285a <test_cut_paste_pages+0x9be>
f0112851:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112854:	8a 00                	mov    (%eax),%al
f0112856:	3c 7a                	cmp    $0x7a,%al
f0112858:	74 28                	je     f0112882 <test_cut_paste_pages+0x9e6>
		{
			correct = 0;
f011285a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chk_cntnt = 0;
f0112861:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112868:	83 ec 04             	sub    $0x4,%esp
f011286b:	68 3c 93 13 f0       	push   $0xf013933c
f0112870:	68 40 02 00 00       	push   $0x240
f0112875:	68 5e 8a 13 f0       	push   $0xf0138a5e
f011287a:	e8 94 db fe ff       	call   f0100413 <_warn>
f011287f:	83 c4 10             	add    $0x10,%esp
		}
		if (correct) eval += 5 ;
f0112882:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112886:	74 04                	je     f011288c <test_cut_paste_pages+0x9f0>
f0112888:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011288c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	cprintf("CASE II: END\n") ;
f0112893:	83 ec 0c             	sub    $0xc,%esp
f0112896:	68 75 94 13 f0       	push   $0xf0139475
f011289b:	e8 6e e4 fe ff       	call   f0100d0e <cprintf>
f01128a0:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] cut_paste_pages: FINISHED. Evaluation = %d\n", eval);
f01128a3:	83 ec 08             	sub    $0x8,%esp
f01128a6:	ff 75 e4             	pushl  -0x1c(%ebp)
f01128a9:	68 84 94 13 f0       	push   $0xf0139484
f01128ae:	e8 5b e4 fe ff       	call   f0100d0e <cprintf>
f01128b3:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01128b6:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01128ba:	75 10                	jne    f01128cc <test_cut_paste_pages+0xa30>
		cprintf("Congratulations!! test cut_paste_pages completed successfully.\n");
f01128bc:	83 ec 0c             	sub    $0xc,%esp
f01128bf:	68 b8 94 13 f0       	push   $0xf01394b8
f01128c4:	e8 45 e4 fe ff       	call   f0100d0e <cprintf>
f01128c9:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01128cc:	a1 a8 27 86 f0       	mov    0xf08627a8,%eax
f01128d1:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01128d4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01128d7:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01128da:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01128df:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01128e2:	5b                   	pop    %ebx
f01128e3:	5e                   	pop    %esi
f01128e4:	5f                   	pop    %edi
f01128e5:	5d                   	pop    %ebp
f01128e6:	c3                   	ret    

f01128e7 <test_copy_paste_chunk>:

//===============================
// 2) TEST COPY-PASTE CHUNK:
//===============================
int test_copy_paste_chunk()
{
f01128e7:	55                   	push   %ebp
f01128e8:	89 e5                	mov    %esp,%ebp
f01128ea:	57                   	push   %edi
f01128eb:	56                   	push   %esi
f01128ec:	53                   	push   %ebx
f01128ed:	81 ec ac 05 00 00    	sub    $0x5ac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01128f3:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f01128f9:	bb f8 94 13 f0       	mov    $0xf01394f8,%ebx
f01128fe:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112903:	89 c7                	mov    %eax,%edi
f0112905:	89 de                	mov    %ebx,%esi
f0112907:	89 d1                	mov    %edx,%ecx
f0112909:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011290b:	8d 95 51 ff ff ff    	lea    -0xaf(%ebp),%edx
f0112911:	b9 23 00 00 00       	mov    $0x23,%ecx
f0112916:	b0 00                	mov    $0x0,%al
f0112918:	89 d7                	mov    %edx,%edi
f011291a:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f011291c:	6a 00                	push   $0x0
f011291e:	6a 0a                	push   $0xa
f0112920:	6a 14                	push   $0x14
f0112922:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0112928:	50                   	push   %eax
f0112929:	e8 7b 67 ff ff       	call   f01090a9 <env_create>
f011292e:	83 c4 10             	add    $0x10,%esp
f0112931:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0112934:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112937:	8b 40 5c             	mov    0x5c(%eax),%eax
f011293a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f011293d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112940:	8b 40 60             	mov    0x60(%eax),%eax
f0112943:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0112949:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011294f:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0112952:	c7 85 2e ff ff ff 61 	movl   $0x20707561,-0xd2(%ebp)
f0112959:	75 70 20 
f011295c:	c7 85 32 ff ff ff 00 	movl   $0x0,-0xce(%ebp)
f0112963:	00 00 00 
f0112966:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f011296c:	b9 03 00 00 00       	mov    $0x3,%ecx
f0112971:	b8 00 00 00 00       	mov    $0x0,%eax
f0112976:	89 d7                	mov    %edx,%edi
f0112978:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f011297a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011297d:	8b 40 4c             	mov    0x4c(%eax),%eax
f0112980:	83 ec 08             	sub    $0x8,%esp
f0112983:	8d 95 1a ff ff ff    	lea    -0xe6(%ebp),%edx
f0112989:	52                   	push   %edx
f011298a:	50                   	push   %eax
f011298b:	e8 1e f1 01 00       	call   f0131aae <ltostr>
f0112990:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0112993:	83 ec 04             	sub    $0x4,%esp
f0112996:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011299c:	50                   	push   %eax
f011299d:	8d 85 1a ff ff ff    	lea    -0xe6(%ebp),%eax
f01129a3:	50                   	push   %eax
f01129a4:	8d 85 2e ff ff ff    	lea    -0xd2(%ebp),%eax
f01129aa:	50                   	push   %eax
f01129ab:	e8 f6 f1 01 00       	call   f0131ba6 <strcconcat>
f01129b0:	83 c4 10             	add    $0x10,%esp
	//===================================================

	ClearUserSpace(proc_directory);
f01129b3:	83 ec 0c             	sub    $0xc,%esp
f01129b6:	ff 75 d4             	pushl  -0x2c(%ebp)
f01129b9:	e8 f1 3a 00 00       	call   f01164af <ClearUserSpace>
f01129be:	83 c4 10             	add    $0x10,%esp
	int numOfArgs = 0;
f01129c1:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;
	uint32 res =0;
f01129c8:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 eval = 0; int correct = 1 ;
f01129cf:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f01129d6:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter ;
	char *ch1, *ch2, *ch3, *ch4, *ch5, *ch6, *ch7,*ch8, *ch9, *ch10, *ch11, *ch12 ;
	char tch[13];
	int kilo = 1024 ;
f01129dd:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f01129e4:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	/*==================================================*/
	/*PART I: Destination page(s) exist & read only 20% */
	/*==================================================*/
	cprintf("\nCASE I: Destination page(s) exist & read only [20%]\n") ;
f01129eb:	83 ec 0c             	sub    $0xc,%esp
f01129ee:	68 2c 95 13 f0       	push   $0xf013952c
f01129f3:	e8 16 e3 fe ff       	call   f0100d0e <cprintf>
f01129f8:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f01129fb:	83 ec 04             	sub    $0x4,%esp
f01129fe:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112a04:	50                   	push   %eax
f0112a05:	68 62 95 13 f0       	push   $0xf0139562
f0112a0a:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112a10:	50                   	push   %eax
f0112a11:	e8 90 f1 01 00       	call   f0131ba6 <strcconcat>
f0112a16:	83 c4 10             	add    $0x10,%esp
f0112a19:	83 ec 0c             	sub    $0xc,%esp
f0112a1c:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112a22:	50                   	push   %eax
f0112a23:	e8 48 e3 fe ff       	call   f0100d70 <execute_command>
f0112a28:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x1000", c1); execute_command(c1);
f0112a2b:	83 ec 04             	sub    $0x4,%esp
f0112a2e:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112a34:	50                   	push   %eax
f0112a35:	68 67 95 13 f0       	push   $0xf0139567
f0112a3a:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112a40:	50                   	push   %eax
f0112a41:	e8 60 f1 01 00       	call   f0131ba6 <strcconcat>
f0112a46:	83 c4 10             	add    $0x10,%esp
f0112a49:	83 ec 0c             	sub    $0xc,%esp
f0112a4c:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112a52:	50                   	push   %eax
f0112a53:	e8 18 e3 fe ff       	call   f0100d70 <execute_command>
f0112a58:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x000000 a";execute_command(c2);
f0112a5b:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112a61:	bb 6d 98 13 f0       	mov    $0xf013986d,%ebx
f0112a66:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112a6b:	89 c7                	mov    %eax,%edi
f0112a6d:	89 de                	mov    %ebx,%esi
f0112a6f:	89 d1                	mov    %edx,%ecx
f0112a71:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112a73:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0112a79:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112a7e:	b0 00                	mov    $0x0,%al
f0112a80:	89 d7                	mov    %edx,%edi
f0112a82:	f3 aa                	rep stos %al,%es:(%edi)
f0112a84:	83 ec 0c             	sub    $0xc,%esp
f0112a87:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112a8d:	50                   	push   %eax
f0112a8e:	e8 dd e2 fe ff       	call   f0100d70 <execute_command>
f0112a93:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x0007FF b";execute_command(c3);
f0112a96:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112a9c:	bb d1 98 13 f0       	mov    $0xf01398d1,%ebx
f0112aa1:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112aa6:	89 c7                	mov    %eax,%edi
f0112aa8:	89 de                	mov    %ebx,%esi
f0112aaa:	89 d1                	mov    %edx,%ecx
f0112aac:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112aae:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0112ab4:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112ab9:	b0 00                	mov    $0x0,%al
f0112abb:	89 d7                	mov    %edx,%edi
f0112abd:	f3 aa                	rep stos %al,%es:(%edi)
f0112abf:	83 ec 0c             	sub    $0xc,%esp
f0112ac2:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112ac8:	50                   	push   %eax
f0112ac9:	e8 a2 e2 fe ff       	call   f0100d70 <execute_command>
f0112ace:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x000FFF c";execute_command(c4);
f0112ad1:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112ad7:	bb 35 99 13 f0       	mov    $0xf0139935,%ebx
f0112adc:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112ae1:	89 c7                	mov    %eax,%edi
f0112ae3:	89 de                	mov    %ebx,%esi
f0112ae5:	89 d1                	mov    %edx,%ecx
f0112ae7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112ae9:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0112aef:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112af4:	b0 00                	mov    $0x0,%al
f0112af6:	89 d7                	mov    %edx,%edi
f0112af8:	f3 aa                	rep stos %al,%es:(%edi)
f0112afa:	83 ec 0c             	sub    $0xc,%esp
f0112afd:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112b03:	50                   	push   %eax
f0112b04:	e8 67 e2 fe ff       	call   f0100d70 <execute_command>
f0112b09:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x001000 d";execute_command(c22);
f0112b0c:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112b12:	bb 99 99 13 f0       	mov    $0xf0139999,%ebx
f0112b17:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112b1c:	89 c7                	mov    %eax,%edi
f0112b1e:	89 de                	mov    %ebx,%esi
f0112b20:	89 d1                	mov    %edx,%ecx
f0112b22:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112b24:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0112b2a:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112b2f:	b0 00                	mov    $0x0,%al
f0112b31:	89 d7                	mov    %edx,%edi
f0112b33:	f3 aa                	rep stos %al,%es:(%edi)
f0112b35:	83 ec 0c             	sub    $0xc,%esp
f0112b38:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112b3e:	50                   	push   %eax
f0112b3f:	e8 2c e2 fe ff       	call   f0100d70 <execute_command>
f0112b44:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x0017FF e";execute_command(c23);
f0112b47:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112b4d:	bb fd 99 13 f0       	mov    $0xf01399fd,%ebx
f0112b52:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112b57:	89 c7                	mov    %eax,%edi
f0112b59:	89 de                	mov    %ebx,%esi
f0112b5b:	89 d1                	mov    %edx,%ecx
f0112b5d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112b5f:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0112b65:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112b6a:	b0 00                	mov    $0x0,%al
f0112b6c:	89 d7                	mov    %edx,%edi
f0112b6e:	f3 aa                	rep stos %al,%es:(%edi)
f0112b70:	83 ec 0c             	sub    $0xc,%esp
f0112b73:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112b79:	50                   	push   %eax
f0112b7a:	e8 f1 e1 fe ff       	call   f0100d70 <execute_command>
f0112b7f:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x001FFF f";execute_command(c24);
f0112b82:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112b88:	bb 61 9a 13 f0       	mov    $0xf0139a61,%ebx
f0112b8d:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112b92:	89 c7                	mov    %eax,%edi
f0112b94:	89 de                	mov    %ebx,%esi
f0112b96:	89 d1                	mov    %edx,%ecx
f0112b98:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112b9a:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0112ba0:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112ba5:	b0 00                	mov    $0x0,%al
f0112ba7:	89 d7                	mov    %edx,%edi
f0112ba9:	f3 aa                	rep stos %al,%es:(%edi)
f0112bab:	83 ec 0c             	sub    $0xc,%esp
f0112bae:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112bb4:	50                   	push   %eax
f0112bb5:	e8 b6 e1 fe ff       	call   f0100d70 <execute_command>
f0112bba:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x100000", c5); execute_command(c5);
f0112bbd:	83 ec 04             	sub    $0x4,%esp
f0112bc0:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112bc6:	50                   	push   %eax
f0112bc7:	68 6f 95 13 f0       	push   $0xf013956f
f0112bcc:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112bd2:	50                   	push   %eax
f0112bd3:	e8 ce ef 01 00       	call   f0131ba6 <strcconcat>
f0112bd8:	83 c4 10             	add    $0x10,%esp
f0112bdb:	83 ec 0c             	sub    $0xc,%esp
f0112bde:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112be4:	50                   	push   %eax
f0112be5:	e8 86 e1 fe ff       	call   f0100d70 <execute_command>
f0112bea:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x101000 r", c5); execute_command(c5);
f0112bed:	83 ec 04             	sub    $0x4,%esp
f0112bf0:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112bf6:	50                   	push   %eax
f0112bf7:	68 79 95 13 f0       	push   $0xf0139579
f0112bfc:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112c02:	50                   	push   %eax
f0112c03:	e8 9e ef 01 00       	call   f0131ba6 <strcconcat>
f0112c08:	83 c4 10             	add    $0x10,%esp
f0112c0b:	83 ec 0c             	sub    $0xc,%esp
f0112c0e:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112c14:	50                   	push   %eax
f0112c15:	e8 56 e1 fe ff       	call   f0100d70 <execute_command>
f0112c1a:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x100000 x";execute_command(c6);
f0112c1d:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112c23:	bb c5 9a 13 f0       	mov    $0xf0139ac5,%ebx
f0112c28:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112c2d:	89 c7                	mov    %eax,%edi
f0112c2f:	89 de                	mov    %ebx,%esi
f0112c31:	89 d1                	mov    %edx,%ecx
f0112c33:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112c35:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0112c3b:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112c40:	b0 00                	mov    $0x0,%al
f0112c42:	89 d7                	mov    %edx,%edi
f0112c44:	f3 aa                	rep stos %al,%es:(%edi)
f0112c46:	83 ec 0c             	sub    $0xc,%esp
f0112c49:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112c4f:	50                   	push   %eax
f0112c50:	e8 1b e1 fe ff       	call   f0100d70 <execute_command>
f0112c55:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x1007FF y";execute_command(c7);
f0112c58:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112c5e:	bb 29 9b 13 f0       	mov    $0xf0139b29,%ebx
f0112c63:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112c68:	89 c7                	mov    %eax,%edi
f0112c6a:	89 de                	mov    %ebx,%esi
f0112c6c:	89 d1                	mov    %edx,%ecx
f0112c6e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112c70:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0112c76:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112c7b:	b0 00                	mov    $0x0,%al
f0112c7d:	89 d7                	mov    %edx,%edi
f0112c7f:	f3 aa                	rep stos %al,%es:(%edi)
f0112c81:	83 ec 0c             	sub    $0xc,%esp
f0112c84:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112c8a:	50                   	push   %eax
f0112c8b:	e8 e0 e0 fe ff       	call   f0100d70 <execute_command>
f0112c90:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x100FFF z";execute_command(c8);
f0112c93:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112c99:	bb 8d 9b 13 f0       	mov    $0xf0139b8d,%ebx
f0112c9e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112ca3:	89 c7                	mov    %eax,%edi
f0112ca5:	89 de                	mov    %ebx,%esi
f0112ca7:	89 d1                	mov    %edx,%ecx
f0112ca9:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112cab:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0112cb1:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112cb6:	b0 00                	mov    $0x0,%al
f0112cb8:	89 d7                	mov    %edx,%edi
f0112cba:	f3 aa                	rep stos %al,%es:(%edi)
f0112cbc:	83 ec 0c             	sub    $0xc,%esp
f0112cbf:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112cc5:	50                   	push   %eax
f0112cc6:	e8 a5 e0 fe ff       	call   f0100d70 <execute_command>
f0112ccb:	83 c4 10             	add    $0x10,%esp

		ch1 = (char*)0x000000; ch2 = (char*)0x100000;
f0112cce:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0112cd5:	c7 45 b8 00 00 10 00 	movl   $0x100000,-0x48(%ebp)
		ch3 = (char*)0x0007FF; ch4 = (char*)0x1007FF;
f0112cdc:	c7 45 b4 ff 07 00 00 	movl   $0x7ff,-0x4c(%ebp)
f0112ce3:	c7 45 b0 ff 07 10 00 	movl   $0x1007ff,-0x50(%ebp)
		ch5 = (char*)0x000FFF; ch6 = (char*)0x100FFF;
f0112cea:	c7 45 ac ff 0f 00 00 	movl   $0xfff,-0x54(%ebp)
f0112cf1:	c7 45 a8 ff 0f 10 00 	movl   $0x100fff,-0x58(%ebp)
		ch7 = (char*)0x001000; ch8 = (char*)0x101000;
f0112cf8:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0112cff:	c7 45 a0 00 10 10 00 	movl   $0x101000,-0x60(%ebp)
		ch9 = (char*)0x0017FF; ch10= (char*)0x1017FF;
f0112d06:	c7 45 9c ff 17 00 00 	movl   $0x17ff,-0x64(%ebp)
f0112d0d:	c7 45 98 ff 17 10 00 	movl   $0x1017ff,-0x68(%ebp)
		ch11= (char*)0x001FFF; ch12= (char*)0x101FFF;
f0112d14:	c7 45 94 ff 1f 00 00 	movl   $0x1fff,-0x6c(%ebp)
f0112d1b:	c7 45 90 ff 1f 10 00 	movl   $0x101fff,-0x70(%ebp)

		tch[8] = *ch8 ;tch[10] = *ch10 ;tch[12] = *ch12 ;
f0112d22:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0112d25:	8a 00                	mov    (%eax),%al
f0112d27:	88 85 a3 fe ff ff    	mov    %al,-0x15d(%ebp)
f0112d2d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112d30:	8a 00                	mov    (%eax),%al
f0112d32:	88 85 a5 fe ff ff    	mov    %al,-0x15b(%ebp)
f0112d38:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112d3b:	8a 00                	mov    (%eax),%al
f0112d3d:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112d43:	e8 9b a0 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0112d48:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x0, 0x100000, 6*kilo);
f0112d4b:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112d4e:	89 d0                	mov    %edx,%eax
f0112d50:	01 c0                	add    %eax,%eax
f0112d52:	01 d0                	add    %edx,%eax
f0112d54:	01 c0                	add    %eax,%eax
f0112d56:	50                   	push   %eax
f0112d57:	68 00 00 10 00       	push   $0x100000
f0112d5c:	6a 00                	push   $0x0
f0112d5e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112d61:	e8 71 5d ff ff       	call   f0108ad7 <copy_paste_chunk>
f0112d66:	83 c4 10             	add    $0x10,%esp
f0112d69:	89 45 88             	mov    %eax,-0x78(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112d6c:	e8 72 a0 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0112d71:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0112d74:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != -1 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0112d7b:	83 7d 88 ff          	cmpl   $0xffffffff,-0x78(%ebp)
f0112d7f:	75 08                	jne    f0112d89 <test_copy_paste_chunk+0x4a2>
f0112d81:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112d84:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0112d87:	74 2b                	je     f0112db4 <test_copy_paste_chunk+0x4cd>
		{
			warn("[EVAL] copy_paste_chunk: Failed (dest is read-only... operation should be denied) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112d89:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112d8c:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112d8f:	83 ec 0c             	sub    $0xc,%esp
f0112d92:	50                   	push   %eax
f0112d93:	ff 75 88             	pushl  -0x78(%ebp)
f0112d96:	68 88 95 13 f0       	push   $0xf0139588
f0112d9b:	68 93 02 00 00       	push   $0x293
f0112da0:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0112da5:	e8 69 d6 fe ff       	call   f0100413 <_warn>
f0112daa:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112dad:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112db4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112db8:	74 04                	je     f0112dbe <test_copy_paste_chunk+0x4d7>
f0112dba:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112dbe:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'x' || *ch3 != 'b' || *ch4 != 'y' || *ch5 != 'c' || *ch6 != 'z'
f0112dc5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112dc8:	8a 00                	mov    (%eax),%al
f0112dca:	3c 61                	cmp    $0x61,%al
f0112dcc:	75 75                	jne    f0112e43 <test_copy_paste_chunk+0x55c>
f0112dce:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112dd1:	8a 00                	mov    (%eax),%al
f0112dd3:	3c 78                	cmp    $0x78,%al
f0112dd5:	75 6c                	jne    f0112e43 <test_copy_paste_chunk+0x55c>
f0112dd7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112dda:	8a 00                	mov    (%eax),%al
f0112ddc:	3c 62                	cmp    $0x62,%al
f0112dde:	75 63                	jne    f0112e43 <test_copy_paste_chunk+0x55c>
f0112de0:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112de3:	8a 00                	mov    (%eax),%al
f0112de5:	3c 79                	cmp    $0x79,%al
f0112de7:	75 5a                	jne    f0112e43 <test_copy_paste_chunk+0x55c>
f0112de9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112dec:	8a 00                	mov    (%eax),%al
f0112dee:	3c 63                	cmp    $0x63,%al
f0112df0:	75 51                	jne    f0112e43 <test_copy_paste_chunk+0x55c>
f0112df2:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112df5:	8a 00                	mov    (%eax),%al
f0112df7:	3c 7a                	cmp    $0x7a,%al
f0112df9:	75 48                	jne    f0112e43 <test_copy_paste_chunk+0x55c>
				||  *ch7 != 'd' || *ch8 != tch[8] || *ch9 != 'e' || *ch10 != tch[10] || *ch11!= 'f' || *ch12 != tch[12])
f0112dfb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112dfe:	8a 00                	mov    (%eax),%al
f0112e00:	3c 64                	cmp    $0x64,%al
f0112e02:	75 3f                	jne    f0112e43 <test_copy_paste_chunk+0x55c>
f0112e04:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0112e07:	8a 10                	mov    (%eax),%dl
f0112e09:	8a 85 a3 fe ff ff    	mov    -0x15d(%ebp),%al
f0112e0f:	38 c2                	cmp    %al,%dl
f0112e11:	75 30                	jne    f0112e43 <test_copy_paste_chunk+0x55c>
f0112e13:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112e16:	8a 00                	mov    (%eax),%al
f0112e18:	3c 65                	cmp    $0x65,%al
f0112e1a:	75 27                	jne    f0112e43 <test_copy_paste_chunk+0x55c>
f0112e1c:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112e1f:	8a 10                	mov    (%eax),%dl
f0112e21:	8a 85 a5 fe ff ff    	mov    -0x15b(%ebp),%al
f0112e27:	38 c2                	cmp    %al,%dl
f0112e29:	75 18                	jne    f0112e43 <test_copy_paste_chunk+0x55c>
f0112e2b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112e2e:	8a 00                	mov    (%eax),%al
f0112e30:	3c 66                	cmp    $0x66,%al
f0112e32:	75 0f                	jne    f0112e43 <test_copy_paste_chunk+0x55c>
f0112e34:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112e37:	8a 10                	mov    (%eax),%dl
f0112e39:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0112e3f:	38 c2                	cmp    %al,%dl
f0112e41:	74 21                	je     f0112e64 <test_copy_paste_chunk+0x57d>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112e43:	83 ec 04             	sub    $0x4,%esp
f0112e46:	68 ec 95 13 f0       	push   $0xf01395ec
f0112e4b:	68 9c 02 00 00       	push   $0x29c
f0112e50:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0112e55:	e8 b9 d5 fe ff       	call   f0100413 <_warn>
f0112e5a:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112e5d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112e64:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112e68:	74 04                	je     f0112e6e <test_copy_paste_chunk+0x587>
f0112e6a:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112e6e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE I: END \n") ;
f0112e75:	83 ec 0c             	sub    $0xc,%esp
f0112e78:	68 26 96 13 f0       	push   $0xf0139626
f0112e7d:	e8 8c de fe ff       	call   f0100d0e <cprintf>
f0112e82:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: Destination page(s) exist & writable 40% */
	/*==================================================*/
	cprintf("\nCASE II: Destination page(s) exist & writable [40%]\n") ;
f0112e85:	83 ec 0c             	sub    $0xc,%esp
f0112e88:	68 38 96 13 f0       	push   $0xf0139638
f0112e8d:	e8 7c de fe ff       	call   f0100d0e <cprintf>
f0112e92:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x200000", c1); execute_command(c1);
f0112e95:	83 ec 04             	sub    $0x4,%esp
f0112e98:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112e9e:	50                   	push   %eax
f0112e9f:	68 6e 96 13 f0       	push   $0xf013966e
f0112ea4:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112eaa:	50                   	push   %eax
f0112eab:	e8 f6 ec 01 00       	call   f0131ba6 <strcconcat>
f0112eb0:	83 c4 10             	add    $0x10,%esp
f0112eb3:	83 ec 0c             	sub    $0xc,%esp
f0112eb6:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112ebc:	50                   	push   %eax
f0112ebd:	e8 ae de fe ff       	call   f0100d70 <execute_command>
f0112ec2:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x201000", c1); execute_command(c1);
f0112ec5:	83 ec 04             	sub    $0x4,%esp
f0112ec8:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112ece:	50                   	push   %eax
f0112ecf:	68 78 96 13 f0       	push   $0xf0139678
f0112ed4:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112eda:	50                   	push   %eax
f0112edb:	e8 c6 ec 01 00       	call   f0131ba6 <strcconcat>
f0112ee0:	83 c4 10             	add    $0x10,%esp
f0112ee3:	83 ec 0c             	sub    $0xc,%esp
f0112ee6:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112eec:	50                   	push   %eax
f0112eed:	e8 7e de fe ff       	call   f0100d70 <execute_command>
f0112ef2:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x200000 a";execute_command(c2);
f0112ef5:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112efb:	bb f1 9b 13 f0       	mov    $0xf0139bf1,%ebx
f0112f00:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112f05:	89 c7                	mov    %eax,%edi
f0112f07:	89 de                	mov    %ebx,%esi
f0112f09:	89 d1                	mov    %edx,%ecx
f0112f0b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112f0d:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0112f13:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112f18:	b0 00                	mov    $0x0,%al
f0112f1a:	89 d7                	mov    %edx,%edi
f0112f1c:	f3 aa                	rep stos %al,%es:(%edi)
f0112f1e:	83 ec 0c             	sub    $0xc,%esp
f0112f21:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112f27:	50                   	push   %eax
f0112f28:	e8 43 de fe ff       	call   f0100d70 <execute_command>
f0112f2d:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x2007FF b";execute_command(c3);
f0112f30:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112f36:	bb 55 9c 13 f0       	mov    $0xf0139c55,%ebx
f0112f3b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112f40:	89 c7                	mov    %eax,%edi
f0112f42:	89 de                	mov    %ebx,%esi
f0112f44:	89 d1                	mov    %edx,%ecx
f0112f46:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112f48:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0112f4e:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112f53:	b0 00                	mov    $0x0,%al
f0112f55:	89 d7                	mov    %edx,%edi
f0112f57:	f3 aa                	rep stos %al,%es:(%edi)
f0112f59:	83 ec 0c             	sub    $0xc,%esp
f0112f5c:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112f62:	50                   	push   %eax
f0112f63:	e8 08 de fe ff       	call   f0100d70 <execute_command>
f0112f68:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x200FFF c";execute_command(c4);
f0112f6b:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112f71:	bb b9 9c 13 f0       	mov    $0xf0139cb9,%ebx
f0112f76:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112f7b:	89 c7                	mov    %eax,%edi
f0112f7d:	89 de                	mov    %ebx,%esi
f0112f7f:	89 d1                	mov    %edx,%ecx
f0112f81:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112f83:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0112f89:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112f8e:	b0 00                	mov    $0x0,%al
f0112f90:	89 d7                	mov    %edx,%edi
f0112f92:	f3 aa                	rep stos %al,%es:(%edi)
f0112f94:	83 ec 0c             	sub    $0xc,%esp
f0112f97:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112f9d:	50                   	push   %eax
f0112f9e:	e8 cd dd fe ff       	call   f0100d70 <execute_command>
f0112fa3:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x201000 d";execute_command(c22);
f0112fa6:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112fac:	bb 1d 9d 13 f0       	mov    $0xf0139d1d,%ebx
f0112fb1:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112fb6:	89 c7                	mov    %eax,%edi
f0112fb8:	89 de                	mov    %ebx,%esi
f0112fba:	89 d1                	mov    %edx,%ecx
f0112fbc:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112fbe:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0112fc4:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112fc9:	b0 00                	mov    $0x0,%al
f0112fcb:	89 d7                	mov    %edx,%edi
f0112fcd:	f3 aa                	rep stos %al,%es:(%edi)
f0112fcf:	83 ec 0c             	sub    $0xc,%esp
f0112fd2:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112fd8:	50                   	push   %eax
f0112fd9:	e8 92 dd fe ff       	call   f0100d70 <execute_command>
f0112fde:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x2017FF e";execute_command(c23);
f0112fe1:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112fe7:	bb 81 9d 13 f0       	mov    $0xf0139d81,%ebx
f0112fec:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112ff1:	89 c7                	mov    %eax,%edi
f0112ff3:	89 de                	mov    %ebx,%esi
f0112ff5:	89 d1                	mov    %edx,%ecx
f0112ff7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112ff9:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0112fff:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113004:	b0 00                	mov    $0x0,%al
f0113006:	89 d7                	mov    %edx,%edi
f0113008:	f3 aa                	rep stos %al,%es:(%edi)
f011300a:	83 ec 0c             	sub    $0xc,%esp
f011300d:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0113013:	50                   	push   %eax
f0113014:	e8 57 dd fe ff       	call   f0100d70 <execute_command>
f0113019:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x201FFF f";execute_command(c24);
f011301c:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0113022:	bb e5 9d 13 f0       	mov    $0xf0139de5,%ebx
f0113027:	ba 0f 00 00 00       	mov    $0xf,%edx
f011302c:	89 c7                	mov    %eax,%edi
f011302e:	89 de                	mov    %ebx,%esi
f0113030:	89 d1                	mov    %edx,%ecx
f0113032:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113034:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f011303a:	b9 55 00 00 00       	mov    $0x55,%ecx
f011303f:	b0 00                	mov    $0x0,%al
f0113041:	89 d7                	mov    %edx,%edi
f0113043:	f3 aa                	rep stos %al,%es:(%edi)
f0113045:	83 ec 0c             	sub    $0xc,%esp
f0113048:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f011304e:	50                   	push   %eax
f011304f:	e8 1c dd fe ff       	call   f0100d70 <execute_command>
f0113054:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x400000", c5); execute_command(c5);
f0113057:	83 ec 04             	sub    $0x4,%esp
f011305a:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113060:	50                   	push   %eax
f0113061:	68 82 96 13 f0       	push   $0xf0139682
f0113066:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011306c:	50                   	push   %eax
f011306d:	e8 34 eb 01 00       	call   f0131ba6 <strcconcat>
f0113072:	83 c4 10             	add    $0x10,%esp
f0113075:	83 ec 0c             	sub    $0xc,%esp
f0113078:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011307e:	50                   	push   %eax
f011307f:	e8 ec dc fe ff       	call   f0100d70 <execute_command>
f0113084:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x401000", c5); execute_command(c5);
f0113087:	83 ec 04             	sub    $0x4,%esp
f011308a:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113090:	50                   	push   %eax
f0113091:	68 8c 96 13 f0       	push   $0xf013968c
f0113096:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011309c:	50                   	push   %eax
f011309d:	e8 04 eb 01 00       	call   f0131ba6 <strcconcat>
f01130a2:	83 c4 10             	add    $0x10,%esp
f01130a5:	83 ec 0c             	sub    $0xc,%esp
f01130a8:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01130ae:	50                   	push   %eax
f01130af:	e8 bc dc fe ff       	call   f0100d70 <execute_command>
f01130b4:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x400000 x";execute_command(c6);
f01130b7:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01130bd:	bb 49 9e 13 f0       	mov    $0xf0139e49,%ebx
f01130c2:	ba 0f 00 00 00       	mov    $0xf,%edx
f01130c7:	89 c7                	mov    %eax,%edi
f01130c9:	89 de                	mov    %ebx,%esi
f01130cb:	89 d1                	mov    %edx,%ecx
f01130cd:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01130cf:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f01130d5:	b9 55 00 00 00       	mov    $0x55,%ecx
f01130da:	b0 00                	mov    $0x0,%al
f01130dc:	89 d7                	mov    %edx,%edi
f01130de:	f3 aa                	rep stos %al,%es:(%edi)
f01130e0:	83 ec 0c             	sub    $0xc,%esp
f01130e3:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01130e9:	50                   	push   %eax
f01130ea:	e8 81 dc fe ff       	call   f0100d70 <execute_command>
f01130ef:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x4007FF y";execute_command(c7);
f01130f2:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01130f8:	bb ad 9e 13 f0       	mov    $0xf0139ead,%ebx
f01130fd:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113102:	89 c7                	mov    %eax,%edi
f0113104:	89 de                	mov    %ebx,%esi
f0113106:	89 d1                	mov    %edx,%ecx
f0113108:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011310a:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0113110:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113115:	b0 00                	mov    $0x0,%al
f0113117:	89 d7                	mov    %edx,%edi
f0113119:	f3 aa                	rep stos %al,%es:(%edi)
f011311b:	83 ec 0c             	sub    $0xc,%esp
f011311e:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113124:	50                   	push   %eax
f0113125:	e8 46 dc fe ff       	call   f0100d70 <execute_command>
f011312a:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x400FFF z";execute_command(c8);
f011312d:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113133:	bb 11 9f 13 f0       	mov    $0xf0139f11,%ebx
f0113138:	ba 0f 00 00 00       	mov    $0xf,%edx
f011313d:	89 c7                	mov    %eax,%edi
f011313f:	89 de                	mov    %ebx,%esi
f0113141:	89 d1                	mov    %edx,%ecx
f0113143:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113145:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f011314b:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113150:	b0 00                	mov    $0x0,%al
f0113152:	89 d7                	mov    %edx,%edi
f0113154:	f3 aa                	rep stos %al,%es:(%edi)
f0113156:	83 ec 0c             	sub    $0xc,%esp
f0113159:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f011315f:	50                   	push   %eax
f0113160:	e8 0b dc fe ff       	call   f0100d70 <execute_command>
f0113165:	83 c4 10             	add    $0x10,%esp

		//Test1
		ch1 = (char*)0x200000; ch2 = (char*)0x400000;
f0113168:	c7 45 bc 00 00 20 00 	movl   $0x200000,-0x44(%ebp)
f011316f:	c7 45 b8 00 00 40 00 	movl   $0x400000,-0x48(%ebp)
		ch3 = (char*)0x2007FF; ch4 = (char*)0x4007FF;
f0113176:	c7 45 b4 ff 07 20 00 	movl   $0x2007ff,-0x4c(%ebp)
f011317d:	c7 45 b0 ff 07 40 00 	movl   $0x4007ff,-0x50(%ebp)
		ch5 = (char*)0x200FFF; ch6 = (char*)0x400FFF;
f0113184:	c7 45 ac ff 0f 20 00 	movl   $0x200fff,-0x54(%ebp)
f011318b:	c7 45 a8 ff 0f 40 00 	movl   $0x400fff,-0x58(%ebp)
		ch7 = (char*)0x201000; ch8 = (char*)0x401000;
f0113192:	c7 45 a4 00 10 20 00 	movl   $0x201000,-0x5c(%ebp)
f0113199:	c7 45 a0 00 10 40 00 	movl   $0x401000,-0x60(%ebp)
		ch9 = (char*)0x2017FF; ch10= (char*)0x4017FF;
f01131a0:	c7 45 9c ff 17 20 00 	movl   $0x2017ff,-0x64(%ebp)
f01131a7:	c7 45 98 ff 17 40 00 	movl   $0x4017ff,-0x68(%ebp)
		ch11= (char*)0x201FFF; ch12= (char*)0x401FFF;
f01131ae:	c7 45 94 ff 1f 20 00 	movl   $0x201fff,-0x6c(%ebp)
f01131b5:	c7 45 90 ff 1f 40 00 	movl   $0x401fff,-0x70(%ebp)

		tch[12] = *ch12 ;
f01131bc:	8b 45 90             	mov    -0x70(%ebp),%eax
f01131bf:	8a 00                	mov    (%eax),%al
f01131c1:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01131c7:	e8 17 9c ff ff       	call   f010cde3 <sys_calculate_free_frames>
f01131cc:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x200000, 0x400000, 6*kilo);
f01131cf:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01131d2:	89 d0                	mov    %edx,%eax
f01131d4:	01 c0                	add    %eax,%eax
f01131d6:	01 d0                	add    %edx,%eax
f01131d8:	01 c0                	add    %eax,%eax
f01131da:	50                   	push   %eax
f01131db:	68 00 00 40 00       	push   $0x400000
f01131e0:	68 00 00 20 00       	push   $0x200000
f01131e5:	ff 75 d4             	pushl  -0x2c(%ebp)
f01131e8:	e8 ea 58 ff ff       	call   f0108ad7 <copy_paste_chunk>
f01131ed:	83 c4 10             	add    $0x10,%esp
f01131f0:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01131f3:	e8 eb 9b ff ff       	call   f010cde3 <sys_calculate_free_frames>
f01131f8:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f01131fb:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0113202:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0113206:	75 08                	jne    f0113210 <test_copy_paste_chunk+0x929>
f0113208:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011320b:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011320e:	74 2b                	je     f011323b <test_copy_paste_chunk+0x954>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113210:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113213:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113216:	83 ec 0c             	sub    $0xc,%esp
f0113219:	50                   	push   %eax
f011321a:	ff 75 80             	pushl  -0x80(%ebp)
f011321d:	68 98 96 13 f0       	push   $0xf0139698
f0113222:	68 cc 02 00 00       	push   $0x2cc
f0113227:	68 5e 8a 13 f0       	push   $0xf0138a5e
f011322c:	e8 e2 d1 fe ff       	call   f0100413 <_warn>
f0113231:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113234:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011323b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011323f:	74 04                	je     f0113245 <test_copy_paste_chunk+0x95e>
f0113241:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113245:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1;
f011324c:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%ebp)
f0113253:	00 00 00 
		if (CCP(proc_directory, 0x200000, 0x400000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0113256:	83 ec 08             	sub    $0x8,%esp
f0113259:	6a 01                	push   $0x1
f011325b:	6a 07                	push   $0x7
f011325d:	6a 07                	push   $0x7
f011325f:	6a 07                	push   $0x7
f0113261:	6a 07                	push   $0x7
f0113263:	6a 01                	push   $0x1
f0113265:	68 00 20 00 00       	push   $0x2000
f011326a:	68 00 00 40 00       	push   $0x400000
f011326f:	68 00 00 20 00       	push   $0x200000
f0113274:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113277:	e8 67 32 00 00       	call   f01164e3 <CCP>
f011327c:	83 c4 30             	add    $0x30,%esp
f011327f:	83 f8 01             	cmp    $0x1,%eax
f0113282:	74 2b                	je     f01132af <test_copy_paste_chunk+0x9c8>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references)\n");
f0113284:	83 ec 04             	sub    $0x4,%esp
f0113287:	68 ec 96 13 f0       	push   $0xf01396ec
f011328c:	68 d5 02 00 00       	push   $0x2d5
f0113291:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0113296:	e8 78 d1 fe ff       	call   f0100413 <_warn>
f011329b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011329e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0;
f01132a5:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%ebp)
f01132ac:	00 00 00 
		}
		if (correct) eval += 5 ;
f01132af:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01132b3:	74 04                	je     f01132b9 <test_copy_paste_chunk+0x9d2>
f01132b5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01132b9:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		*ch3 = 'y' ;	// wum 0x2007FF y
f01132c0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01132c3:	c6 00 79             	movb   $0x79,(%eax)
		*ch6 = 'z' ;	// wum 0x400FFF z
f01132c6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01132c9:	c6 00 7a             	movb   $0x7a,(%eax)
		*ch7 = 'w' ;	// wum 0x201000 w
f01132cc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01132cf:	c6 00 77             	movb   $0x77,(%eax)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z'
f01132d2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01132d5:	8a 00                	mov    (%eax),%al
f01132d7:	3c 61                	cmp    $0x61,%al
f01132d9:	75 69                	jne    f0113344 <test_copy_paste_chunk+0xa5d>
f01132db:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01132de:	8a 00                	mov    (%eax),%al
f01132e0:	3c 61                	cmp    $0x61,%al
f01132e2:	75 60                	jne    f0113344 <test_copy_paste_chunk+0xa5d>
f01132e4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01132e7:	8a 00                	mov    (%eax),%al
f01132e9:	3c 79                	cmp    $0x79,%al
f01132eb:	75 57                	jne    f0113344 <test_copy_paste_chunk+0xa5d>
f01132ed:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01132f0:	8a 00                	mov    (%eax),%al
f01132f2:	3c 62                	cmp    $0x62,%al
f01132f4:	75 4e                	jne    f0113344 <test_copy_paste_chunk+0xa5d>
f01132f6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01132f9:	8a 00                	mov    (%eax),%al
f01132fb:	3c 63                	cmp    $0x63,%al
f01132fd:	75 45                	jne    f0113344 <test_copy_paste_chunk+0xa5d>
f01132ff:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113302:	8a 00                	mov    (%eax),%al
f0113304:	3c 7a                	cmp    $0x7a,%al
f0113306:	75 3c                	jne    f0113344 <test_copy_paste_chunk+0xa5d>
				||  *ch7 != 'w' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'e' || *ch11!= 'f' || *ch12 != tch[12])
f0113308:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011330b:	8a 00                	mov    (%eax),%al
f011330d:	3c 77                	cmp    $0x77,%al
f011330f:	75 33                	jne    f0113344 <test_copy_paste_chunk+0xa5d>
f0113311:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0113314:	8a 00                	mov    (%eax),%al
f0113316:	3c 64                	cmp    $0x64,%al
f0113318:	75 2a                	jne    f0113344 <test_copy_paste_chunk+0xa5d>
f011331a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011331d:	8a 00                	mov    (%eax),%al
f011331f:	3c 65                	cmp    $0x65,%al
f0113321:	75 21                	jne    f0113344 <test_copy_paste_chunk+0xa5d>
f0113323:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113326:	8a 00                	mov    (%eax),%al
f0113328:	3c 65                	cmp    $0x65,%al
f011332a:	75 18                	jne    f0113344 <test_copy_paste_chunk+0xa5d>
f011332c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011332f:	8a 00                	mov    (%eax),%al
f0113331:	3c 66                	cmp    $0x66,%al
f0113333:	75 0f                	jne    f0113344 <test_copy_paste_chunk+0xa5d>
f0113335:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113338:	8a 10                	mov    (%eax),%dl
f011333a:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0113340:	38 c2                	cmp    %al,%dl
f0113342:	74 21                	je     f0113365 <test_copy_paste_chunk+0xa7e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113344:	83 ec 04             	sub    $0x4,%esp
f0113347:	68 ec 95 13 f0       	push   $0xf01395ec
f011334c:	68 e3 02 00 00       	push   $0x2e3
f0113351:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0113356:	e8 b8 d0 fe ff       	call   f0100413 <_warn>
f011335b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011335e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0113365:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113369:	74 04                	je     f011336f <test_copy_paste_chunk+0xa88>
f011336b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011336f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		//Test2
		*ch10 = 'x';	// wum 0x4017FF y
f0113376:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113379:	c6 00 78             	movb   $0x78,(%eax)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011337c:	e8 62 9a ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0113381:	89 45 8c             	mov    %eax,-0x74(%ebp)

		ret = copy_paste_chunk(proc_directory, 0x400800, 0x200800, 3*kilo);
f0113384:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113387:	89 c2                	mov    %eax,%edx
f0113389:	01 d2                	add    %edx,%edx
f011338b:	01 d0                	add    %edx,%eax
f011338d:	50                   	push   %eax
f011338e:	68 00 08 20 00       	push   $0x200800
f0113393:	68 00 08 40 00       	push   $0x400800
f0113398:	ff 75 d4             	pushl  -0x2c(%ebp)
f011339b:	e8 37 57 ff ff       	call   f0108ad7 <copy_paste_chunk>
f01133a0:	83 c4 10             	add    $0x10,%esp
f01133a3:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01133a6:	e8 38 9a ff ff       	call   f010cde3 <sys_calculate_free_frames>
f01133ab:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f01133ae:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f01133b2:	75 08                	jne    f01133bc <test_copy_paste_chunk+0xad5>
f01133b4:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01133b7:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f01133ba:	74 2b                	je     f01133e7 <test_copy_paste_chunk+0xb00>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01133bc:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01133bf:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01133c2:	83 ec 0c             	sub    $0xc,%esp
f01133c5:	50                   	push   %eax
f01133c6:	ff 75 80             	pushl  -0x80(%ebp)
f01133c9:	68 98 96 13 f0       	push   $0xf0139698
f01133ce:	68 f3 02 00 00       	push   $0x2f3
f01133d3:	68 5e 8a 13 f0       	push   $0xf0138a5e
f01133d8:	e8 36 d0 fe ff       	call   f0100413 <_warn>
f01133dd:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01133e0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01133e7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01133eb:	74 04                	je     f01133f1 <test_copy_paste_chunk+0xb0a>
f01133ed:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01133f1:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CCP(proc_directory, 0x400000, 0x200000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f01133f8:	83 ec 08             	sub    $0x8,%esp
f01133fb:	6a 01                	push   $0x1
f01133fd:	6a 07                	push   $0x7
f01133ff:	6a 07                	push   $0x7
f0113401:	6a 07                	push   $0x7
f0113403:	6a 07                	push   $0x7
f0113405:	6a 01                	push   $0x1
f0113407:	68 00 20 00 00       	push   $0x2000
f011340c:	68 00 00 20 00       	push   $0x200000
f0113411:	68 00 00 40 00       	push   $0x400000
f0113416:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113419:	e8 c5 30 00 00       	call   f01164e3 <CCP>
f011341e:	83 c4 30             	add    $0x30,%esp
f0113421:	83 f8 01             	cmp    $0x1,%eax
f0113424:	74 21                	je     f0113447 <test_copy_paste_chunk+0xb60>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0113426:	83 ec 04             	sub    $0x4,%esp
f0113429:	68 38 97 13 f0       	push   $0xf0139738
f011342e:	68 fb 02 00 00       	push   $0x2fb
f0113433:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0113438:	e8 d6 cf fe ff       	call   f0100413 <_warn>
f011343d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113440:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113447:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011344b:	74 04                	je     f0113451 <test_copy_paste_chunk+0xb6a>
f011344d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113451:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0113458:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011345b:	8a 00                	mov    (%eax),%al
f011345d:	3c 61                	cmp    $0x61,%al
f011345f:	75 69                	jne    f01134ca <test_copy_paste_chunk+0xbe3>
f0113461:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113464:	8a 00                	mov    (%eax),%al
f0113466:	3c 61                	cmp    $0x61,%al
f0113468:	75 60                	jne    f01134ca <test_copy_paste_chunk+0xbe3>
f011346a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011346d:	8a 00                	mov    (%eax),%al
f011346f:	3c 79                	cmp    $0x79,%al
f0113471:	75 57                	jne    f01134ca <test_copy_paste_chunk+0xbe3>
f0113473:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113476:	8a 00                	mov    (%eax),%al
f0113478:	3c 62                	cmp    $0x62,%al
f011347a:	75 4e                	jne    f01134ca <test_copy_paste_chunk+0xbe3>
f011347c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011347f:	8a 00                	mov    (%eax),%al
f0113481:	3c 7a                	cmp    $0x7a,%al
f0113483:	75 45                	jne    f01134ca <test_copy_paste_chunk+0xbe3>
f0113485:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113488:	8a 00                	mov    (%eax),%al
f011348a:	3c 7a                	cmp    $0x7a,%al
f011348c:	75 3c                	jne    f01134ca <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f011348e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113491:	8a 00                	mov    (%eax),%al
			correct = 0;
		}
		if (correct) eval += 5 ;
		correct = 1 ;

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0113493:	3c 64                	cmp    $0x64,%al
f0113495:	75 33                	jne    f01134ca <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0113497:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011349a:	8a 00                	mov    (%eax),%al
f011349c:	3c 64                	cmp    $0x64,%al
f011349e:	75 2a                	jne    f01134ca <test_copy_paste_chunk+0xbe3>
f01134a0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01134a3:	8a 00                	mov    (%eax),%al
f01134a5:	3c 65                	cmp    $0x65,%al
f01134a7:	75 21                	jne    f01134ca <test_copy_paste_chunk+0xbe3>
f01134a9:	8b 45 98             	mov    -0x68(%ebp),%eax
f01134ac:	8a 00                	mov    (%eax),%al
f01134ae:	3c 78                	cmp    $0x78,%al
f01134b0:	75 18                	jne    f01134ca <test_copy_paste_chunk+0xbe3>
f01134b2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01134b5:	8a 00                	mov    (%eax),%al
f01134b7:	3c 66                	cmp    $0x66,%al
f01134b9:	75 0f                	jne    f01134ca <test_copy_paste_chunk+0xbe3>
f01134bb:	8b 45 90             	mov    -0x70(%ebp),%eax
f01134be:	8a 10                	mov    (%eax),%dl
f01134c0:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f01134c6:	38 c2                	cmp    %al,%dl
f01134c8:	74 21                	je     f01134eb <test_copy_paste_chunk+0xc04>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01134ca:	83 ec 04             	sub    $0x4,%esp
f01134cd:	68 ec 95 13 f0       	push   $0xf01395ec
f01134d2:	68 04 03 00 00       	push   $0x304
f01134d7:	68 5e 8a 13 f0       	push   $0xf0138a5e
f01134dc:	e8 32 cf fe ff       	call   f0100413 <_warn>
f01134e1:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01134e4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01134eb:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01134ef:	74 04                	je     f01134f5 <test_copy_paste_chunk+0xc0e>
f01134f1:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01134f5:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE II: END\n") ;
f01134fc:	83 ec 0c             	sub    $0xc,%esp
f01134ff:	68 83 97 13 f0       	push   $0xf0139783
f0113504:	e8 05 d8 fe ff       	call   f0100d0e <cprintf>
f0113509:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART III: Destination page(s) doesn't exist 40% */
	/*================================================*/
	cprintf("\nCASE III: Destination page(s) doesn't exist [40%]\n") ;
f011350c:	83 ec 0c             	sub    $0xc,%esp
f011350f:	68 94 97 13 f0       	push   $0xf0139794
f0113514:	e8 f5 d7 fe ff       	call   f0100d0e <cprintf>
f0113519:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x800000", c1); execute_command(c1);
f011351c:	83 ec 04             	sub    $0x4,%esp
f011351f:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113525:	50                   	push   %eax
f0113526:	68 c8 97 13 f0       	push   $0xf01397c8
f011352b:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113531:	50                   	push   %eax
f0113532:	e8 6f e6 01 00       	call   f0131ba6 <strcconcat>
f0113537:	83 c4 10             	add    $0x10,%esp
f011353a:	83 ec 0c             	sub    $0xc,%esp
f011353d:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113543:	50                   	push   %eax
f0113544:	e8 27 d8 fe ff       	call   f0100d70 <execute_command>
f0113549:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x801000", c1); execute_command(c1);
f011354c:	83 ec 04             	sub    $0x4,%esp
f011354f:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113555:	50                   	push   %eax
f0113556:	68 d2 97 13 f0       	push   $0xf01397d2
f011355b:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113561:	50                   	push   %eax
f0113562:	e8 3f e6 01 00       	call   f0131ba6 <strcconcat>
f0113567:	83 c4 10             	add    $0x10,%esp
f011356a:	83 ec 0c             	sub    $0xc,%esp
f011356d:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113573:	50                   	push   %eax
f0113574:	e8 f7 d7 fe ff       	call   f0100d70 <execute_command>
f0113579:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x802000", c1); execute_command(c1);
f011357c:	83 ec 04             	sub    $0x4,%esp
f011357f:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113585:	50                   	push   %eax
f0113586:	68 dc 97 13 f0       	push   $0xf01397dc
f011358b:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113591:	50                   	push   %eax
f0113592:	e8 0f e6 01 00       	call   f0131ba6 <strcconcat>
f0113597:	83 c4 10             	add    $0x10,%esp
f011359a:	83 ec 0c             	sub    $0xc,%esp
f011359d:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01135a3:	50                   	push   %eax
f01135a4:	e8 c7 d7 fe ff       	call   f0100d70 <execute_command>
f01135a9:	83 c4 10             	add    $0x10,%esp
		char c14[100] = "wum 0x800000 a"; execute_command(c14);
f01135ac:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01135b2:	bb 75 9f 13 f0       	mov    $0xf0139f75,%ebx
f01135b7:	ba 0f 00 00 00       	mov    $0xf,%edx
f01135bc:	89 c7                	mov    %eax,%edi
f01135be:	89 de                	mov    %ebx,%esi
f01135c0:	89 d1                	mov    %edx,%ecx
f01135c2:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01135c4:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f01135ca:	b9 55 00 00 00       	mov    $0x55,%ecx
f01135cf:	b0 00                	mov    $0x0,%al
f01135d1:	89 d7                	mov    %edx,%edi
f01135d3:	f3 aa                	rep stos %al,%es:(%edi)
f01135d5:	83 ec 0c             	sub    $0xc,%esp
f01135d8:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01135de:	50                   	push   %eax
f01135df:	e8 8c d7 fe ff       	call   f0100d70 <execute_command>
f01135e4:	83 c4 10             	add    $0x10,%esp
		char c15[100] = "wum 0x8017FF b"; execute_command(c15);
f01135e7:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01135ed:	bb d9 9f 13 f0       	mov    $0xf0139fd9,%ebx
f01135f2:	ba 0f 00 00 00       	mov    $0xf,%edx
f01135f7:	89 c7                	mov    %eax,%edi
f01135f9:	89 de                	mov    %ebx,%esi
f01135fb:	89 d1                	mov    %edx,%ecx
f01135fd:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01135ff:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0113605:	b9 55 00 00 00       	mov    $0x55,%ecx
f011360a:	b0 00                	mov    $0x0,%al
f011360c:	89 d7                	mov    %edx,%edi
f011360e:	f3 aa                	rep stos %al,%es:(%edi)
f0113610:	83 ec 0c             	sub    $0xc,%esp
f0113613:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113619:	50                   	push   %eax
f011361a:	e8 51 d7 fe ff       	call   f0100d70 <execute_command>
f011361f:	83 c4 10             	add    $0x10,%esp
		char c16[100] = "wum 0x802FFF c"; execute_command(c16);
f0113622:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113628:	bb 3d a0 13 f0       	mov    $0xf013a03d,%ebx
f011362d:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113632:	89 c7                	mov    %eax,%edi
f0113634:	89 de                	mov    %ebx,%esi
f0113636:	89 d1                	mov    %edx,%ecx
f0113638:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011363a:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0113640:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113645:	b0 00                	mov    $0x0,%al
f0113647:	89 d7                	mov    %edx,%edi
f0113649:	f3 aa                	rep stos %al,%es:(%edi)
f011364b:	83 ec 0c             	sub    $0xc,%esp
f011364e:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113654:	50                   	push   %eax
f0113655:	e8 16 d7 fe ff       	call   f0100d70 <execute_command>
f011365a:	83 c4 10             	add    $0x10,%esp

		//Test3
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011365d:	e8 81 97 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0113662:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x800000, 0x900000, 12*kilo);
f0113665:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113668:	89 d0                	mov    %edx,%eax
f011366a:	01 c0                	add    %eax,%eax
f011366c:	01 d0                	add    %edx,%eax
f011366e:	c1 e0 02             	shl    $0x2,%eax
f0113671:	50                   	push   %eax
f0113672:	68 00 00 90 00       	push   $0x900000
f0113677:	68 00 00 80 00       	push   $0x800000
f011367c:	ff 75 d4             	pushl  -0x2c(%ebp)
f011367f:	e8 53 54 ff ff       	call   f0108ad7 <copy_paste_chunk>
f0113684:	83 c4 10             	add    $0x10,%esp
f0113687:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011368d:	e8 51 97 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0113692:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0113695:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f011369c:	75 0b                	jne    f01136a9 <test_copy_paste_chunk+0xdc2>
f011369e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01136a1:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01136a4:	83 f8 03             	cmp    $0x3,%eax
f01136a7:	74 2e                	je     f01136d7 <test_copy_paste_chunk+0xdf0>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01136a9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01136ac:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01136af:	83 ec 0c             	sub    $0xc,%esp
f01136b2:	50                   	push   %eax
f01136b3:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f01136b9:	68 98 96 13 f0       	push   $0xf0139698
f01136be:	68 22 03 00 00       	push   $0x322
f01136c3:	68 5e 8a 13 f0       	push   $0xf0138a5e
f01136c8:	e8 46 cd fe ff       	call   f0100413 <_warn>
f01136cd:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01136d0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01136d7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01136db:	74 04                	je     f01136e1 <test_copy_paste_chunk+0xdfa>
f01136dd:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01136e1:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1 ;
f01136e8:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x800000, 0x900000, 3*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f01136ef:	83 ec 08             	sub    $0x8,%esp
f01136f2:	6a 01                	push   $0x1
f01136f4:	6a 07                	push   $0x7
f01136f6:	6a 07                	push   $0x7
f01136f8:	6a 07                	push   $0x7
f01136fa:	6a 07                	push   $0x7
f01136fc:	6a 01                	push   $0x1
f01136fe:	68 00 30 00 00       	push   $0x3000
f0113703:	68 00 00 90 00       	push   $0x900000
f0113708:	68 00 00 80 00       	push   $0x800000
f011370d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113710:	e8 ce 2d 00 00       	call   f01164e3 <CCP>
f0113715:	83 c4 30             	add    $0x30,%esp
f0113718:	83 f8 01             	cmp    $0x1,%eax
f011371b:	74 28                	je     f0113745 <test_copy_paste_chunk+0xe5e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f011371d:	83 ec 04             	sub    $0x4,%esp
f0113720:	68 38 97 13 f0       	push   $0xf0139738
f0113725:	68 2b 03 00 00       	push   $0x32b
f011372a:	68 5e 8a 13 f0       	push   $0xf0138a5e
f011372f:	e8 df cc fe ff       	call   f0100413 <_warn>
f0113734:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113737:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f011373e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 5 ;
f0113745:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113749:	74 04                	je     f011374f <test_copy_paste_chunk+0xe68>
f011374b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011374f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0113756:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011375a:	0f 84 9e 00 00 00    	je     f01137fe <test_copy_paste_chunk+0xf17>
		{
			ch1 = (char*)0x800000; ch2 = (char*)0x900000;
f0113760:	c7 45 bc 00 00 80 00 	movl   $0x800000,-0x44(%ebp)
f0113767:	c7 45 b8 00 00 90 00 	movl   $0x900000,-0x48(%ebp)
			ch3 = (char*)0x8017FF; ch4 = (char*)0x9017FF;
f011376e:	c7 45 b4 ff 17 80 00 	movl   $0x8017ff,-0x4c(%ebp)
f0113775:	c7 45 b0 ff 17 90 00 	movl   $0x9017ff,-0x50(%ebp)
			ch5 = (char*)0x802FFF; ch6 = (char*)0x902FFF;
f011377c:	c7 45 ac ff 2f 80 00 	movl   $0x802fff,-0x54(%ebp)
f0113783:	c7 45 a8 ff 2f 90 00 	movl   $0x902fff,-0x58(%ebp)

			*ch3 = 'y';	//wum 0x8017FF y
f011378a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011378d:	c6 00 79             	movb   $0x79,(%eax)
			*ch6 = 'z';	//wum 0x902FFF z
f0113790:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113793:	c6 00 7a             	movb   $0x7a,(%eax)

			if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z')
f0113796:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113799:	8a 00                	mov    (%eax),%al
f011379b:	3c 61                	cmp    $0x61,%al
f011379d:	75 2d                	jne    f01137cc <test_copy_paste_chunk+0xee5>
f011379f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01137a2:	8a 00                	mov    (%eax),%al
f01137a4:	3c 61                	cmp    $0x61,%al
f01137a6:	75 24                	jne    f01137cc <test_copy_paste_chunk+0xee5>
f01137a8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01137ab:	8a 00                	mov    (%eax),%al
f01137ad:	3c 79                	cmp    $0x79,%al
f01137af:	75 1b                	jne    f01137cc <test_copy_paste_chunk+0xee5>
f01137b1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01137b4:	8a 00                	mov    (%eax),%al
f01137b6:	3c 62                	cmp    $0x62,%al
f01137b8:	75 12                	jne    f01137cc <test_copy_paste_chunk+0xee5>
f01137ba:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01137bd:	8a 00                	mov    (%eax),%al
f01137bf:	3c 63                	cmp    $0x63,%al
f01137c1:	75 09                	jne    f01137cc <test_copy_paste_chunk+0xee5>
f01137c3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01137c6:	8a 00                	mov    (%eax),%al
f01137c8:	3c 7a                	cmp    $0x7a,%al
f01137ca:	74 21                	je     f01137ed <test_copy_paste_chunk+0xf06>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01137cc:	83 ec 04             	sub    $0x4,%esp
f01137cf:	68 ec 95 13 f0       	push   $0xf01395ec
f01137d4:	68 3d 03 00 00       	push   $0x33d
f01137d9:	68 5e 8a 13 f0       	push   $0xf0138a5e
f01137de:	e8 30 cc fe ff       	call   f0100413 <_warn>
f01137e3:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01137e6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 10 ;
f01137ed:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01137f1:	74 04                	je     f01137f7 <test_copy_paste_chunk+0xf10>
f01137f3:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
			correct = 1 ;
f01137f7:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
		//Test4
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01137fe:	e8 e0 95 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0113803:	89 45 8c             	mov    %eax,-0x74(%ebp)
		SB(proc_directory, 0x901000, 2 , 0) ;
f0113806:	6a 00                	push   $0x0
f0113808:	6a 02                	push   $0x2
f011380a:	68 00 10 90 00       	push   $0x901000
f011380f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113812:	e8 59 2b 00 00       	call   f0116370 <SB>
f0113817:	83 c4 10             	add    $0x10,%esp
		SB(proc_directory, 0x902000, 2 , 0) ;
f011381a:	6a 00                	push   $0x0
f011381c:	6a 02                	push   $0x2
f011381e:	68 00 20 90 00       	push   $0x902000
f0113823:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113826:	e8 45 2b 00 00       	call   f0116370 <SB>
f011382b:	83 c4 10             	add    $0x10,%esp

		ret = copy_paste_chunk(proc_directory, 0x901000, 0xBFF000, 8*kilo);
f011382e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113831:	c1 e0 03             	shl    $0x3,%eax
f0113834:	50                   	push   %eax
f0113835:	68 00 f0 bf 00       	push   $0xbff000
f011383a:	68 00 10 90 00       	push   $0x901000
f011383f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113842:	e8 90 52 ff ff       	call   f0108ad7 <copy_paste_chunk>
f0113847:	83 c4 10             	add    $0x10,%esp
f011384a:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113850:	e8 8e 95 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0113855:	89 45 84             	mov    %eax,-0x7c(%ebp)
		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0113858:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f011385f:	75 0b                	jne    f011386c <test_copy_paste_chunk+0xf85>
f0113861:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113864:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113867:	83 f8 03             	cmp    $0x3,%eax
f011386a:	74 2e                	je     f011389a <test_copy_paste_chunk+0xfb3>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011386c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011386f:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113872:	83 ec 0c             	sub    $0xc,%esp
f0113875:	50                   	push   %eax
f0113876:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f011387c:	68 98 96 13 f0       	push   $0xf0139698
f0113881:	68 4d 03 00 00       	push   $0x34d
f0113886:	68 5e 8a 13 f0       	push   $0xf0138a5e
f011388b:	e8 83 cb fe ff       	call   f0100413 <_warn>
f0113890:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113893:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011389a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011389e:	74 04                	je     f01138a4 <test_copy_paste_chunk+0xfbd>
f01138a0:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01138a4:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		chkcnt = 1 ;
f01138ab:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x901000, 0xBFF000, 2*PAGE_SIZE, 1, 0x003, 0x007, 0x003, 0x007, CHK_COPY_PASTE) != 1)
f01138b2:	83 ec 08             	sub    $0x8,%esp
f01138b5:	6a 01                	push   $0x1
f01138b7:	6a 07                	push   $0x7
f01138b9:	6a 03                	push   $0x3
f01138bb:	6a 07                	push   $0x7
f01138bd:	6a 03                	push   $0x3
f01138bf:	6a 01                	push   $0x1
f01138c1:	68 00 20 00 00       	push   $0x2000
f01138c6:	68 00 f0 bf 00       	push   $0xbff000
f01138cb:	68 00 10 90 00       	push   $0x901000
f01138d0:	ff 75 d4             	pushl  -0x2c(%ebp)
f01138d3:	e8 0b 2c 00 00       	call   f01164e3 <CCP>
f01138d8:	83 c4 30             	add    $0x30,%esp
f01138db:	83 f8 01             	cmp    $0x1,%eax
f01138de:	74 28                	je     f0113908 <test_copy_paste_chunk+0x1021>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f01138e0:	83 ec 04             	sub    $0x4,%esp
f01138e3:	68 38 97 13 f0       	push   $0xf0139738
f01138e8:	68 56 03 00 00       	push   $0x356
f01138ed:	68 5e 8a 13 f0       	push   $0xf0138a5e
f01138f2:	e8 1c cb fe ff       	call   f0100413 <_warn>
f01138f7:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01138fa:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0113901:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f0113908:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011390c:	74 04                	je     f0113912 <test_copy_paste_chunk+0x102b>
f011390e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113912:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0113919:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011391d:	74 72                	je     f0113991 <test_copy_paste_chunk+0x10aa>
		{
			ch1 = (char*)0x9017FF; ch2 = (char*)0xBFF7FF; ch3 = (char*)0x902FFF;ch4 = (char*)0xC00FFF;
f011391f:	c7 45 bc ff 17 90 00 	movl   $0x9017ff,-0x44(%ebp)
f0113926:	c7 45 b8 ff f7 bf 00 	movl   $0xbff7ff,-0x48(%ebp)
f011392d:	c7 45 b4 ff 2f 90 00 	movl   $0x902fff,-0x4c(%ebp)
f0113934:	c7 45 b0 ff 0f c0 00 	movl   $0xc00fff,-0x50(%ebp)
			if (*ch1 != 'b' || *ch2 != 'b' || *ch3 != 'z' || *ch4 != 'z')
f011393b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011393e:	8a 00                	mov    (%eax),%al
f0113940:	3c 62                	cmp    $0x62,%al
f0113942:	75 1b                	jne    f011395f <test_copy_paste_chunk+0x1078>
f0113944:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113947:	8a 00                	mov    (%eax),%al
f0113949:	3c 62                	cmp    $0x62,%al
f011394b:	75 12                	jne    f011395f <test_copy_paste_chunk+0x1078>
f011394d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113950:	8a 00                	mov    (%eax),%al
f0113952:	3c 7a                	cmp    $0x7a,%al
f0113954:	75 09                	jne    f011395f <test_copy_paste_chunk+0x1078>
f0113956:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113959:	8a 00                	mov    (%eax),%al
f011395b:	3c 7a                	cmp    $0x7a,%al
f011395d:	74 21                	je     f0113980 <test_copy_paste_chunk+0x1099>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f011395f:	83 ec 04             	sub    $0x4,%esp
f0113962:	68 ec 95 13 f0       	push   $0xf01395ec
f0113967:	68 62 03 00 00       	push   $0x362
f011396c:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0113971:	e8 9d ca fe ff       	call   f0100413 <_warn>
f0113976:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113979:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0113980:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113984:	74 04                	je     f011398a <test_copy_paste_chunk+0x10a3>
f0113986:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011398a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0113991:	83 ec 0c             	sub    $0xc,%esp
f0113994:	68 e6 97 13 f0       	push   $0xf01397e6
f0113999:	e8 70 d3 fe ff       	call   f0100d0e <cprintf>
f011399e:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] copy_paste_chunk: FINISHED. Evaluation = %d\n", eval);
f01139a1:	83 ec 08             	sub    $0x8,%esp
f01139a4:	ff 75 e4             	pushl  -0x1c(%ebp)
f01139a7:	68 f8 97 13 f0       	push   $0xf01397f8
f01139ac:	e8 5d d3 fe ff       	call   f0100d0e <cprintf>
f01139b1:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01139b4:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01139b8:	75 10                	jne    f01139ca <test_copy_paste_chunk+0x10e3>
		cprintf("Congratulations!! test copy_paste_chunk completed successfully.\n");
f01139ba:	83 ec 0c             	sub    $0xc,%esp
f01139bd:	68 2c 98 13 f0       	push   $0xf013982c
f01139c2:	e8 47 d3 fe ff       	call   f0100d0e <cprintf>
f01139c7:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01139ca:	a1 a8 27 86 f0       	mov    0xf08627a8,%eax
f01139cf:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01139d2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01139d5:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01139d8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01139dd:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01139e0:	5b                   	pop    %ebx
f01139e1:	5e                   	pop    %esi
f01139e2:	5f                   	pop    %edi
f01139e3:	5d                   	pop    %ebp
f01139e4:	c3                   	ret    

f01139e5 <test_share_chunk>:

//===============================
// 3) TEST SHARE CHUNK:
//===============================
int test_share_chunk()
{
f01139e5:	55                   	push   %ebp
f01139e6:	89 e5                	mov    %esp,%ebp
f01139e8:	57                   	push   %edi
f01139e9:	56                   	push   %esi
f01139ea:	53                   	push   %ebx
f01139eb:	81 ec bc 00 00 00    	sub    $0xbc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01139f1:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f01139f7:	bb f8 94 13 f0       	mov    $0xf01394f8,%ebx
f01139fc:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113a01:	89 c7                	mov    %eax,%edi
f0113a03:	89 de                	mov    %ebx,%esi
f0113a05:	89 d1                	mov    %edx,%ecx
f0113a07:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113a09:	8d 95 5d ff ff ff    	lea    -0xa3(%ebp),%edx
f0113a0f:	b9 23 00 00 00       	mov    $0x23,%ecx
f0113a14:	b0 00                	mov    $0x0,%al
f0113a16:	89 d7                	mov    %edx,%edi
f0113a18:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0113a1a:	6a 00                	push   $0x0
f0113a1c:	6a 0a                	push   $0xa
f0113a1e:	6a 14                	push   $0x14
f0113a20:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0113a26:	50                   	push   %eax
f0113a27:	e8 7d 56 ff ff       	call   f01090a9 <env_create>
f0113a2c:	83 c4 10             	add    $0x10,%esp
f0113a2f:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0113a32:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113a35:	8b 40 5c             	mov    0x5c(%eax),%eax
f0113a38:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f0113a3b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113a3e:	8b 40 60             	mov    0x60(%eax),%eax
f0113a41:	89 45 80             	mov    %eax,-0x80(%ebp)
f0113a44:	8b 45 80             	mov    -0x80(%ebp),%eax
f0113a47:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0113a4a:	83 ec 0c             	sub    $0xc,%esp
f0113a4d:	ff 75 cc             	pushl  -0x34(%ebp)
f0113a50:	e8 5a 2a 00 00       	call   f01164af <ClearUserSpace>
f0113a55:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0113a58:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0113a5f:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f0113a66:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0113a6d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 20% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [20%]\n") ;
f0113a71:	83 ec 0c             	sub    $0xc,%esp
f0113a74:	68 a4 a0 13 f0       	push   $0xf013a0a4
f0113a79:	e8 90 d2 fe ff       	call   f0100d0e <cprintf>
f0113a7e:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)0xF0100000;
f0113a81:	c7 45 bc 00 00 10 f0 	movl   $0xf0100000,-0x44(%ebp)
		ptr2 = (char*)0xF1004000;
f0113a88:	c7 45 b8 00 40 00 f1 	movl   $0xf1004000,-0x48(%ebp)
		tptr[1] = *ptr1 ;
f0113a8f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113a92:	8a 00                	mov    (%eax),%al
f0113a94:	88 85 45 ff ff ff    	mov    %al,-0xbb(%ebp)
		tptr[2] = *ptr2 ;
f0113a9a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113a9d:	8a 00                	mov    (%eax),%al
f0113a9f:	88 85 46 ff ff ff    	mov    %al,-0xba(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113aa5:	e8 39 93 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0113aaa:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0100000,0xF0104000, 6*kilo, PERM_WRITEABLE) ;
f0113aad:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113ab0:	89 d0                	mov    %edx,%eax
f0113ab2:	01 c0                	add    %eax,%eax
f0113ab4:	01 d0                	add    %edx,%eax
f0113ab6:	01 c0                	add    %eax,%eax
f0113ab8:	83 ec 0c             	sub    $0xc,%esp
f0113abb:	6a 02                	push   $0x2
f0113abd:	50                   	push   %eax
f0113abe:	68 00 40 10 f0       	push   $0xf0104000
f0113ac3:	68 00 00 10 f0       	push   $0xf0100000
f0113ac8:	ff 75 cc             	pushl  -0x34(%ebp)
f0113acb:	e8 21 50 ff ff       	call   f0108af1 <share_chunk>
f0113ad0:	83 c4 20             	add    $0x20,%esp
f0113ad3:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113ad6:	e8 08 93 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0113adb:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0113ade:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0113ae2:	75 08                	jne    f0113aec <test_share_chunk+0x107>
f0113ae4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113ae7:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0113aea:	74 28                	je     f0113b14 <test_share_chunk+0x12f>
		{
			warn("[EVAL] share_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter));
f0113aec:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113aef:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113af2:	83 ec 0c             	sub    $0xc,%esp
f0113af5:	50                   	push   %eax
f0113af6:	ff 75 b0             	pushl  -0x50(%ebp)
f0113af9:	68 d0 a0 13 f0       	push   $0xf013a0d0
f0113afe:	68 9e 03 00 00       	push   $0x39e
f0113b03:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0113b08:	e8 06 c9 fe ff       	call   f0100413 <_warn>
f0113b0d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113b10:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113b14:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113b18:	74 04                	je     f0113b1e <test_share_chunk+0x139>
f0113b1a:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113b1e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xF0100000, 0xF0104000, 8*kilo, 1, 0x003, 0x007, 0x003, 0x007, ~CHK_SHARE) == 0)
f0113b22:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113b25:	c1 e0 03             	shl    $0x3,%eax
f0113b28:	83 ec 08             	sub    $0x8,%esp
f0113b2b:	68 fd 00 00 00       	push   $0xfd
f0113b30:	6a 07                	push   $0x7
f0113b32:	6a 03                	push   $0x3
f0113b34:	6a 07                	push   $0x7
f0113b36:	6a 03                	push   $0x3
f0113b38:	6a 01                	push   $0x1
f0113b3a:	50                   	push   %eax
f0113b3b:	68 00 40 10 f0       	push   $0xf0104000
f0113b40:	68 00 00 10 f0       	push   $0xf0100000
f0113b45:	ff 75 cc             	pushl  -0x34(%ebp)
f0113b48:	e8 96 29 00 00       	call   f01164e3 <CCP>
f0113b4d:	83 c4 30             	add    $0x30,%esp
f0113b50:	85 c0                	test   %eax,%eax
f0113b52:	75 1e                	jne    f0113b72 <test_share_chunk+0x18d>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113b54:	83 ec 04             	sub    $0x4,%esp
f0113b57:	68 2c a1 13 f0       	push   $0xf013a12c
f0113b5c:	68 a6 03 00 00       	push   $0x3a6
f0113b61:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0113b66:	e8 a8 c8 fe ff       	call   f0100413 <_warn>
f0113b6b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113b6e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113b72:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113b76:	74 04                	je     f0113b7c <test_share_chunk+0x197>
f0113b78:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)

		*ptr1 = 'A' ;
f0113b7c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113b7f:	c6 00 41             	movb   $0x41,(%eax)
		*ptr2 = 'B' ;
f0113b82:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113b85:	c6 00 42             	movb   $0x42,(%eax)

		if ((*ptr1) != 'A' || (*ptr2) != 'B')
f0113b88:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113b8b:	8a 00                	mov    (%eax),%al
f0113b8d:	3c 41                	cmp    $0x41,%al
f0113b8f:	75 09                	jne    f0113b9a <test_share_chunk+0x1b5>
f0113b91:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113b94:	8a 00                	mov    (%eax),%al
f0113b96:	3c 42                	cmp    $0x42,%al
f0113b98:	74 1e                	je     f0113bb8 <test_share_chunk+0x1d3>
		{
			warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113b9a:	83 ec 04             	sub    $0x4,%esp
f0113b9d:	68 74 a1 13 f0       	push   $0xf013a174
f0113ba2:	68 b0 03 00 00       	push   $0x3b0
f0113ba7:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0113bac:	e8 62 c8 fe ff       	call   f0100413 <_warn>
f0113bb1:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113bb4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113bb8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113bbc:	74 04                	je     f0113bc2 <test_share_chunk+0x1dd>
f0113bbe:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113bc2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		*ptr1 = tptr[1] ;
f0113bc6:	8a 95 45 ff ff ff    	mov    -0xbb(%ebp),%dl
f0113bcc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113bcf:	88 10                	mov    %dl,(%eax)
		*ptr2 = tptr[2] ;
f0113bd1:	8a 95 46 ff ff ff    	mov    -0xba(%ebp),%dl
f0113bd7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113bda:	88 10                	mov    %dl,(%eax)
	}
	cprintf("\nCASE I: END\n") ;
f0113bdc:	83 ec 0c             	sub    $0xc,%esp
f0113bdf:	68 a9 a1 13 f0       	push   $0xf013a1a9
f0113be4:	e8 25 d1 fe ff       	call   f0100d0e <cprintf>
f0113be9:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART II: Destination page(s) not exist [Supervisor] 25% */
	/*========================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor] [25%]\n") ;
f0113bec:	83 ec 0c             	sub    $0xc,%esp
f0113bef:	68 b8 a1 13 f0       	push   $0xf013a1b8
f0113bf4:	e8 15 d1 fe ff       	call   f0100d0e <cprintf>
f0113bf9:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113bfc:	e8 e2 91 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0113c01:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0000000,0x40000000, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0113c04:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113c07:	c1 e0 05             	shl    $0x5,%eax
f0113c0a:	83 ec 0c             	sub    $0xc,%esp
f0113c0d:	68 02 0e 00 00       	push   $0xe02
f0113c12:	50                   	push   %eax
f0113c13:	68 00 00 00 40       	push   $0x40000000
f0113c18:	68 00 00 00 f0       	push   $0xf0000000
f0113c1d:	ff 75 cc             	pushl  -0x34(%ebp)
f0113c20:	e8 cc 4e ff ff       	call   f0108af1 <share_chunk>
f0113c25:	83 c4 20             	add    $0x20,%esp
f0113c28:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113c2b:	e8 b3 91 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0113c30:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (32*mega) / (4*mega))
f0113c33:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0113c37:	75 1f                	jne    f0113c58 <test_share_chunk+0x273>
f0113c39:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113c3c:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113c3f:	89 c1                	mov    %eax,%ecx
f0113c41:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113c44:	c1 e0 05             	shl    $0x5,%eax
f0113c47:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0113c4a:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0113c51:	99                   	cltd   
f0113c52:	f7 fb                	idiv   %ebx
f0113c54:	39 c1                	cmp    %eax,%ecx
f0113c56:	74 28                	je     f0113c80 <test_share_chunk+0x29b>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113c58:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113c5b:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113c5e:	83 ec 0c             	sub    $0xc,%esp
f0113c61:	50                   	push   %eax
f0113c62:	ff 75 a8             	pushl  -0x58(%ebp)
f0113c65:	68 f4 a1 13 f0       	push   $0xf013a1f4
f0113c6a:	68 c8 03 00 00       	push   $0x3c8
f0113c6f:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0113c74:	e8 9a c7 fe ff       	call   f0100413 <_warn>
f0113c79:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113c7c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113c80:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113c84:	74 04                	je     f0113c8a <test_share_chunk+0x2a5>
f0113c86:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113c8a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113c8e:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0xF0000000, 0x40000000, 32*mega, -1, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0113c95:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113c98:	c1 e0 05             	shl    $0x5,%eax
f0113c9b:	83 ec 08             	sub    $0x8,%esp
f0113c9e:	6a 02                	push   $0x2
f0113ca0:	6a 07                	push   $0x7
f0113ca2:	6a 03                	push   $0x3
f0113ca4:	68 07 0e 00 00       	push   $0xe07
f0113ca9:	68 03 0e 00 00       	push   $0xe03
f0113cae:	6a ff                	push   $0xffffffff
f0113cb0:	50                   	push   %eax
f0113cb1:	68 00 00 00 40       	push   $0x40000000
f0113cb6:	68 00 00 00 f0       	push   $0xf0000000
f0113cbb:	ff 75 cc             	pushl  -0x34(%ebp)
f0113cbe:	e8 20 28 00 00       	call   f01164e3 <CCP>
f0113cc3:	83 c4 30             	add    $0x30,%esp
f0113cc6:	85 c0                	test   %eax,%eax
f0113cc8:	75 25                	jne    f0113cef <test_share_chunk+0x30a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113cca:	83 ec 04             	sub    $0x4,%esp
f0113ccd:	68 2c a1 13 f0       	push   $0xf013a12c
f0113cd2:	68 d1 03 00 00       	push   $0x3d1
f0113cd7:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0113cdc:	e8 32 c7 fe ff       	call   f0100413 <_warn>
f0113ce1:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113ce4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113ce8:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}

		if (CCP(proc_directory, 0xF0000000, 0x40000000, 12*kilo, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0113cef:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113cf2:	89 d0                	mov    %edx,%eax
f0113cf4:	01 c0                	add    %eax,%eax
f0113cf6:	01 d0                	add    %edx,%eax
f0113cf8:	c1 e0 02             	shl    $0x2,%eax
f0113cfb:	83 ec 08             	sub    $0x8,%esp
f0113cfe:	6a 02                	push   $0x2
f0113d00:	6a 07                	push   $0x7
f0113d02:	6a 03                	push   $0x3
f0113d04:	68 07 0e 00 00       	push   $0xe07
f0113d09:	68 03 0e 00 00       	push   $0xe03
f0113d0e:	6a 02                	push   $0x2
f0113d10:	50                   	push   %eax
f0113d11:	68 00 00 00 40       	push   $0x40000000
f0113d16:	68 00 00 00 f0       	push   $0xf0000000
f0113d1b:	ff 75 cc             	pushl  -0x34(%ebp)
f0113d1e:	e8 c0 27 00 00       	call   f01164e3 <CCP>
f0113d23:	83 c4 30             	add    $0x30,%esp
f0113d26:	85 c0                	test   %eax,%eax
f0113d28:	75 1e                	jne    f0113d48 <test_share_chunk+0x363>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113d2a:	83 ec 04             	sub    $0x4,%esp
f0113d2d:	68 2c a1 13 f0       	push   $0xf013a12c
f0113d32:	68 d8 03 00 00       	push   $0x3d8
f0113d37:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0113d3c:	e8 d2 c6 fe ff       	call   f0100413 <_warn>
f0113d41:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113d44:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113d48:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113d4c:	74 04                	je     f0113d52 <test_share_chunk+0x36d>
f0113d4e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113d52:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		extern char end_of_kernel[];
		uint32 endRange = ((uint32)end_of_kernel - KERNEL_BASE);
f0113d56:	b8 bc 28 86 f0       	mov    $0xf08628bc,%eax
f0113d5b:	05 00 00 00 10       	add    $0x10000000,%eax
f0113d60:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (CCP(proc_directory, 0xF0000000+PHYS_IO_MEM, 0x40000000+PHYS_IO_MEM, endRange - PHYS_IO_MEM, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0113d63:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113d66:	2d 00 00 0a 00       	sub    $0xa0000,%eax
f0113d6b:	83 ec 08             	sub    $0x8,%esp
f0113d6e:	6a 02                	push   $0x2
f0113d70:	6a 07                	push   $0x7
f0113d72:	6a 03                	push   $0x3
f0113d74:	68 07 0e 00 00       	push   $0xe07
f0113d79:	68 03 0e 00 00       	push   $0xe03
f0113d7e:	6a 02                	push   $0x2
f0113d80:	50                   	push   %eax
f0113d81:	68 00 00 0a 40       	push   $0x400a0000
f0113d86:	68 00 00 0a f0       	push   $0xf00a0000
f0113d8b:	ff 75 cc             	pushl  -0x34(%ebp)
f0113d8e:	e8 50 27 00 00       	call   f01164e3 <CCP>
f0113d93:	83 c4 30             	add    $0x30,%esp
f0113d96:	85 c0                	test   %eax,%eax
f0113d98:	75 1e                	jne    f0113db8 <test_share_chunk+0x3d3>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113d9a:	83 ec 04             	sub    $0x4,%esp
f0113d9d:	68 2c a1 13 f0       	push   $0xf013a12c
f0113da2:	68 e2 03 00 00       	push   $0x3e2
f0113da7:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0113dac:	e8 62 c6 fe ff       	call   f0100413 <_warn>
f0113db1:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113db4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113db8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113dbc:	74 04                	je     f0113dc2 <test_share_chunk+0x3dd>
f0113dbe:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113dc2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0113dc6:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0113dca:	0f 84 a4 00 00 00    	je     f0113e74 <test_share_chunk+0x48f>
		{
			ptr1 = (char*)0xF00007FF; *ptr1 = 'A' ;
f0113dd0:	c7 45 bc ff 07 00 f0 	movl   $0xf00007ff,-0x44(%ebp)
f0113dd7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113dda:	c6 00 41             	movb   $0x41,(%eax)
			ptr2 = (char*)0x400007FF;
f0113ddd:	c7 45 b8 ff 07 00 40 	movl   $0x400007ff,-0x48(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A')
f0113de4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113de7:	8a 00                	mov    (%eax),%al
f0113de9:	3c 41                	cmp    $0x41,%al
f0113deb:	75 09                	jne    f0113df6 <test_share_chunk+0x411>
f0113ded:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113df0:	8a 00                	mov    (%eax),%al
f0113df2:	3c 41                	cmp    $0x41,%al
f0113df4:	74 1e                	je     f0113e14 <test_share_chunk+0x42f>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113df6:	83 ec 04             	sub    $0x4,%esp
f0113df9:	68 74 a1 13 f0       	push   $0xf013a174
f0113dfe:	68 ef 03 00 00       	push   $0x3ef
f0113e03:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0113e08:	e8 06 c6 fe ff       	call   f0100413 <_warn>
f0113e0d:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113e10:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113e14:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113e18:	74 04                	je     f0113e1e <test_share_chunk+0x439>
f0113e1a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113e1e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

			ptr1 = (char*)0x41000FFF; *ptr1 = 'C' ;
f0113e22:	c7 45 bc ff 0f 00 41 	movl   $0x41000fff,-0x44(%ebp)
f0113e29:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113e2c:	c6 00 43             	movb   $0x43,(%eax)
			ptr2 = (char*)0xF1000FFF;
f0113e2f:	c7 45 b8 ff 0f 00 f1 	movl   $0xf1000fff,-0x48(%ebp)

			if ((*ptr1) != 'C' || (*ptr2) != 'C')
f0113e36:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113e39:	8a 00                	mov    (%eax),%al
f0113e3b:	3c 43                	cmp    $0x43,%al
f0113e3d:	75 09                	jne    f0113e48 <test_share_chunk+0x463>
f0113e3f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113e42:	8a 00                	mov    (%eax),%al
f0113e44:	3c 43                	cmp    $0x43,%al
f0113e46:	74 1e                	je     f0113e66 <test_share_chunk+0x481>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113e48:	83 ec 04             	sub    $0x4,%esp
f0113e4b:	68 74 a1 13 f0       	push   $0xf013a174
f0113e50:	68 fa 03 00 00       	push   $0x3fa
f0113e55:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0113e5a:	e8 b4 c5 fe ff       	call   f0100413 <_warn>
f0113e5f:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113e62:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113e66:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113e6a:	74 04                	je     f0113e70 <test_share_chunk+0x48b>
f0113e6c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113e70:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0113e74:	83 ec 0c             	sub    $0xc,%esp
f0113e77:	68 83 97 13 f0       	push   $0xf0139783
f0113e7c:	e8 8d ce fe ff       	call   f0100d0e <cprintf>
f0113e81:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART III: Destination page(s) not exist [User r/w] 25%  */
	/*========================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [User r/w] [25%]\n") ;
f0113e84:	83 ec 0c             	sub    $0xc,%esp
f0113e87:	68 44 a2 13 f0       	push   $0xf013a244
f0113e8c:	e8 7d ce fe ff       	call   f0100d0e <cprintf>
f0113e91:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113e94:	e8 4a 8f ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0113e99:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x40000000,0x0, 648*kilo, PERM_WRITEABLE|PERM_USER) ;
f0113e9c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113e9f:	89 d0                	mov    %edx,%eax
f0113ea1:	c1 e0 03             	shl    $0x3,%eax
f0113ea4:	01 d0                	add    %edx,%eax
f0113ea6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0113ead:	01 d0                	add    %edx,%eax
f0113eaf:	c1 e0 03             	shl    $0x3,%eax
f0113eb2:	83 ec 0c             	sub    $0xc,%esp
f0113eb5:	6a 06                	push   $0x6
f0113eb7:	50                   	push   %eax
f0113eb8:	6a 00                	push   $0x0
f0113eba:	68 00 00 00 40       	push   $0x40000000
f0113ebf:	ff 75 cc             	pushl  -0x34(%ebp)
f0113ec2:	e8 2a 4c ff ff       	call   f0108af1 <share_chunk>
f0113ec7:	83 c4 20             	add    $0x20,%esp
f0113eca:	89 45 a0             	mov    %eax,-0x60(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113ecd:	e8 11 8f ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0113ed2:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f0113ed5:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f0113ed9:	75 0b                	jne    f0113ee6 <test_share_chunk+0x501>
f0113edb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113ede:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113ee1:	83 f8 01             	cmp    $0x1,%eax
f0113ee4:	74 28                	je     f0113f0e <test_share_chunk+0x529>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113ee6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113ee9:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113eec:	83 ec 0c             	sub    $0xc,%esp
f0113eef:	50                   	push   %eax
f0113ef0:	ff 75 a0             	pushl  -0x60(%ebp)
f0113ef3:	68 f4 a1 13 f0       	push   $0xf013a1f4
f0113ef8:	68 10 04 00 00       	push   $0x410
f0113efd:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0113f02:	e8 0c c5 fe ff       	call   f0100413 <_warn>
f0113f07:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113f0a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113f0e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113f12:	74 04                	je     f0113f18 <test_share_chunk+0x533>
f0113f14:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113f18:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113f1c:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0x40000000, 0x0, PHYS_IO_MEM + 4*kilo, -1, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0113f23:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113f26:	05 00 80 02 00       	add    $0x28000,%eax
f0113f2b:	c1 e0 02             	shl    $0x2,%eax
f0113f2e:	83 ec 08             	sub    $0x8,%esp
f0113f31:	6a 02                	push   $0x2
f0113f33:	6a 07                	push   $0x7
f0113f35:	6a 03                	push   $0x3
f0113f37:	6a 07                	push   $0x7
f0113f39:	6a 07                	push   $0x7
f0113f3b:	6a ff                	push   $0xffffffff
f0113f3d:	50                   	push   %eax
f0113f3e:	6a 00                	push   $0x0
f0113f40:	68 00 00 00 40       	push   $0x40000000
f0113f45:	ff 75 cc             	pushl  -0x34(%ebp)
f0113f48:	e8 96 25 00 00       	call   f01164e3 <CCP>
f0113f4d:	83 c4 30             	add    $0x30,%esp
f0113f50:	85 c0                	test   %eax,%eax
f0113f52:	75 25                	jne    f0113f79 <test_share_chunk+0x594>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113f54:	83 ec 04             	sub    $0x4,%esp
f0113f57:	68 2c a1 13 f0       	push   $0xf013a12c
f0113f5c:	68 19 04 00 00       	push   $0x419
f0113f61:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0113f66:	e8 a8 c4 fe ff       	call   f0100413 <_warn>
f0113f6b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113f6e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113f72:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}

		if (CCP(proc_directory, 0x40000000, 0x0, 12*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0113f79:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113f7c:	89 d0                	mov    %edx,%eax
f0113f7e:	01 c0                	add    %eax,%eax
f0113f80:	01 d0                	add    %edx,%eax
f0113f82:	c1 e0 02             	shl    $0x2,%eax
f0113f85:	83 ec 08             	sub    $0x8,%esp
f0113f88:	6a 02                	push   $0x2
f0113f8a:	6a 07                	push   $0x7
f0113f8c:	6a 03                	push   $0x3
f0113f8e:	6a 07                	push   $0x7
f0113f90:	6a 07                	push   $0x7
f0113f92:	6a 03                	push   $0x3
f0113f94:	50                   	push   %eax
f0113f95:	6a 00                	push   $0x0
f0113f97:	68 00 00 00 40       	push   $0x40000000
f0113f9c:	ff 75 cc             	pushl  -0x34(%ebp)
f0113f9f:	e8 3f 25 00 00       	call   f01164e3 <CCP>
f0113fa4:	83 c4 30             	add    $0x30,%esp
f0113fa7:	85 c0                	test   %eax,%eax
f0113fa9:	75 1e                	jne    f0113fc9 <test_share_chunk+0x5e4>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113fab:	83 ec 04             	sub    $0x4,%esp
f0113fae:	68 2c a1 13 f0       	push   $0xf013a12c
f0113fb3:	68 20 04 00 00       	push   $0x420
f0113fb8:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0113fbd:	e8 51 c4 fe ff       	call   f0100413 <_warn>
f0113fc2:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113fc5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113fc9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113fcd:	74 04                	je     f0113fd3 <test_share_chunk+0x5ee>
f0113fcf:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113fd3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40003000, 0x3000, PHYS_IO_MEM - 12*kilo, 2, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0113fd7:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113fda:	89 d0                	mov    %edx,%eax
f0113fdc:	01 c0                	add    %eax,%eax
f0113fde:	01 d0                	add    %edx,%eax
f0113fe0:	c1 e0 02             	shl    $0x2,%eax
f0113fe3:	f7 d8                	neg    %eax
f0113fe5:	05 00 00 0a 00       	add    $0xa0000,%eax
f0113fea:	83 ec 08             	sub    $0x8,%esp
f0113fed:	6a 02                	push   $0x2
f0113fef:	6a 07                	push   $0x7
f0113ff1:	6a 03                	push   $0x3
f0113ff3:	6a 07                	push   $0x7
f0113ff5:	6a 07                	push   $0x7
f0113ff7:	6a 02                	push   $0x2
f0113ff9:	50                   	push   %eax
f0113ffa:	68 00 30 00 00       	push   $0x3000
f0113fff:	68 00 30 00 40       	push   $0x40003000
f0114004:	ff 75 cc             	pushl  -0x34(%ebp)
f0114007:	e8 d7 24 00 00       	call   f01164e3 <CCP>
f011400c:	83 c4 30             	add    $0x30,%esp
f011400f:	85 c0                	test   %eax,%eax
f0114011:	75 1e                	jne    f0114031 <test_share_chunk+0x64c>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114013:	83 ec 04             	sub    $0x4,%esp
f0114016:	68 2c a1 13 f0       	push   $0xf013a12c
f011401b:	68 28 04 00 00       	push   $0x428
f0114020:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0114025:	e8 e9 c3 fe ff       	call   f0100413 <_warn>
f011402a:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011402d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114031:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114035:	74 04                	je     f011403b <test_share_chunk+0x656>
f0114037:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011403b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40000000+PHYS_IO_MEM, PHYS_IO_MEM, 4*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f011403f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114042:	c1 e0 02             	shl    $0x2,%eax
f0114045:	83 ec 08             	sub    $0x8,%esp
f0114048:	6a 02                	push   $0x2
f011404a:	6a 07                	push   $0x7
f011404c:	6a 03                	push   $0x3
f011404e:	6a 07                	push   $0x7
f0114050:	6a 07                	push   $0x7
f0114052:	6a 03                	push   $0x3
f0114054:	50                   	push   %eax
f0114055:	68 00 00 0a 00       	push   $0xa0000
f011405a:	68 00 00 0a 40       	push   $0x400a0000
f011405f:	ff 75 cc             	pushl  -0x34(%ebp)
f0114062:	e8 7c 24 00 00       	call   f01164e3 <CCP>
f0114067:	83 c4 30             	add    $0x30,%esp
f011406a:	85 c0                	test   %eax,%eax
f011406c:	75 1e                	jne    f011408c <test_share_chunk+0x6a7>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011406e:	83 ec 04             	sub    $0x4,%esp
f0114071:	68 2c a1 13 f0       	push   $0xf013a12c
f0114076:	68 30 04 00 00       	push   $0x430
f011407b:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0114080:	e8 8e c3 fe ff       	call   f0100413 <_warn>
f0114085:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114088:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011408c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114090:	74 04                	je     f0114096 <test_share_chunk+0x6b1>
f0114092:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114096:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f011409a:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f011409e:	0f 84 92 00 00 00    	je     f0114136 <test_share_chunk+0x751>
		{
			ptr1 = (char*)0x7FF;
f01140a4:	c7 45 bc ff 07 00 00 	movl   $0x7ff,-0x44(%ebp)
			ptr2 = (char*)0xF00007FF;
f01140ab:	c7 45 b8 ff 07 00 f0 	movl   $0xf00007ff,-0x48(%ebp)
			ptr3 = (char*)0x400007FF;
f01140b2:	c7 45 9c ff 07 00 40 	movl   $0x400007ff,-0x64(%ebp)
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
f01140b9:	c7 45 98 ff ff 09 00 	movl   $0x9ffff,-0x68(%ebp)
f01140c0:	8b 45 98             	mov    -0x68(%ebp),%eax
f01140c3:	c6 00 44             	movb   $0x44,(%eax)
			ptr5 = (char*)0xF009FFFF;
f01140c6:	c7 45 94 ff ff 09 f0 	movl   $0xf009ffff,-0x6c(%ebp)
			ptr6 = (char*)0x4009FFFF;
f01140cd:	c7 45 90 ff ff 09 40 	movl   $0x4009ffff,-0x70(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f01140d4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01140d7:	8a 00                	mov    (%eax),%al
f01140d9:	3c 41                	cmp    $0x41,%al
f01140db:	75 2d                	jne    f011410a <test_share_chunk+0x725>
f01140dd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01140e0:	8a 00                	mov    (%eax),%al
f01140e2:	3c 41                	cmp    $0x41,%al
f01140e4:	75 24                	jne    f011410a <test_share_chunk+0x725>
f01140e6:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01140e9:	8a 00                	mov    (%eax),%al
f01140eb:	3c 41                	cmp    $0x41,%al
f01140ed:	75 1b                	jne    f011410a <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f01140ef:	8b 45 98             	mov    -0x68(%ebp),%eax
f01140f2:	8a 00                	mov    (%eax),%al
			ptr3 = (char*)0x400007FF;
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
			ptr5 = (char*)0xF009FFFF;
			ptr6 = (char*)0x4009FFFF;

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f01140f4:	3c 44                	cmp    $0x44,%al
f01140f6:	75 12                	jne    f011410a <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f01140f8:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01140fb:	8a 00                	mov    (%eax),%al
f01140fd:	3c 44                	cmp    $0x44,%al
f01140ff:	75 09                	jne    f011410a <test_share_chunk+0x725>
f0114101:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114104:	8a 00                	mov    (%eax),%al
f0114106:	3c 44                	cmp    $0x44,%al
f0114108:	74 1e                	je     f0114128 <test_share_chunk+0x743>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f011410a:	83 ec 04             	sub    $0x4,%esp
f011410d:	68 74 a1 13 f0       	push   $0xf013a174
f0114112:	68 42 04 00 00       	push   $0x442
f0114117:	68 5e 8a 13 f0       	push   $0xf0138a5e
f011411c:	e8 f2 c2 fe ff       	call   f0100413 <_warn>
f0114121:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114124:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114128:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011412c:	74 04                	je     f0114132 <test_share_chunk+0x74d>
f011412e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114132:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0114136:	83 ec 0c             	sub    $0xc,%esp
f0114139:	68 e6 97 13 f0       	push   $0xf01397e6
f011413e:	e8 cb cb fe ff       	call   f0100d0e <cprintf>
f0114143:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r] 30%     */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r] [30%]\n") ;
f0114146:	83 ec 0c             	sub    $0xc,%esp
f0114149:	68 80 a2 13 f0       	push   $0xf013a280
f011414e:	e8 bb cb fe ff       	call   f0100d0e <cprintf>
f0114153:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114156:	e8 88 8c ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011415b:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x9FC00,0x3FFC00, 7*kilo, PERM_USER) ;
f011415e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114161:	89 d0                	mov    %edx,%eax
f0114163:	01 c0                	add    %eax,%eax
f0114165:	01 d0                	add    %edx,%eax
f0114167:	01 c0                	add    %eax,%eax
f0114169:	01 d0                	add    %edx,%eax
f011416b:	83 ec 0c             	sub    $0xc,%esp
f011416e:	6a 04                	push   $0x4
f0114170:	50                   	push   %eax
f0114171:	68 00 fc 3f 00       	push   $0x3ffc00
f0114176:	68 00 fc 09 00       	push   $0x9fc00
f011417b:	ff 75 cc             	pushl  -0x34(%ebp)
f011417e:	e8 6e 49 ff ff       	call   f0108af1 <share_chunk>
f0114183:	83 c4 20             	add    $0x20,%esp
f0114186:	89 45 8c             	mov    %eax,-0x74(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114189:	e8 55 8c ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011418e:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f0114191:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
f0114195:	75 0b                	jne    f01141a2 <test_share_chunk+0x7bd>
f0114197:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011419a:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011419d:	83 f8 01             	cmp    $0x1,%eax
f01141a0:	74 28                	je     f01141ca <test_share_chunk+0x7e5>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01141a2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01141a5:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01141a8:	83 ec 0c             	sub    $0xc,%esp
f01141ab:	50                   	push   %eax
f01141ac:	ff 75 8c             	pushl  -0x74(%ebp)
f01141af:	68 f4 a1 13 f0       	push   $0xf013a1f4
f01141b4:	68 58 04 00 00       	push   $0x458
f01141b9:	68 5e 8a 13 f0       	push   $0xf0138a5e
f01141be:	e8 50 c2 fe ff       	call   f0100413 <_warn>
f01141c3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01141c6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01141ca:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01141ce:	74 04                	je     f01141d4 <test_share_chunk+0x7ef>
f01141d0:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01141d4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01141d8:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0x9F000, 0x3FF000, 12*kilo, -1, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f01141df:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01141e2:	89 d0                	mov    %edx,%eax
f01141e4:	01 c0                	add    %eax,%eax
f01141e6:	01 d0                	add    %edx,%eax
f01141e8:	c1 e0 02             	shl    $0x2,%eax
f01141eb:	83 ec 08             	sub    $0x8,%esp
f01141ee:	6a 02                	push   $0x2
f01141f0:	6a 07                	push   $0x7
f01141f2:	6a 07                	push   $0x7
f01141f4:	6a 07                	push   $0x7
f01141f6:	6a 05                	push   $0x5
f01141f8:	6a ff                	push   $0xffffffff
f01141fa:	50                   	push   %eax
f01141fb:	68 00 f0 3f 00       	push   $0x3ff000
f0114200:	68 00 f0 09 00       	push   $0x9f000
f0114205:	ff 75 cc             	pushl  -0x34(%ebp)
f0114208:	e8 d6 22 00 00       	call   f01164e3 <CCP>
f011420d:	83 c4 30             	add    $0x30,%esp
f0114210:	85 c0                	test   %eax,%eax
f0114212:	75 25                	jne    f0114239 <test_share_chunk+0x854>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114214:	83 ec 04             	sub    $0x4,%esp
f0114217:	68 2c a1 13 f0       	push   $0xf013a12c
f011421c:	68 61 04 00 00       	push   $0x461
f0114221:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0114226:	e8 e8 c1 fe ff       	call   f0100413 <_warn>
f011422b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011422e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114232:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 5 ;
f0114239:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011423d:	74 04                	je     f0114243 <test_share_chunk+0x85e>
f011423f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114243:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x9F000, 0x3FF000, 4*kilo, 3, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0114247:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011424a:	c1 e0 02             	shl    $0x2,%eax
f011424d:	83 ec 08             	sub    $0x8,%esp
f0114250:	6a 02                	push   $0x2
f0114252:	6a 07                	push   $0x7
f0114254:	6a 07                	push   $0x7
f0114256:	6a 07                	push   $0x7
f0114258:	6a 05                	push   $0x5
f011425a:	6a 03                	push   $0x3
f011425c:	50                   	push   %eax
f011425d:	68 00 f0 3f 00       	push   $0x3ff000
f0114262:	68 00 f0 09 00       	push   $0x9f000
f0114267:	ff 75 cc             	pushl  -0x34(%ebp)
f011426a:	e8 74 22 00 00       	call   f01164e3 <CCP>
f011426f:	83 c4 30             	add    $0x30,%esp
f0114272:	85 c0                	test   %eax,%eax
f0114274:	75 1e                	jne    f0114294 <test_share_chunk+0x8af>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114276:	83 ec 04             	sub    $0x4,%esp
f0114279:	68 2c a1 13 f0       	push   $0xf013a12c
f011427e:	68 6a 04 00 00       	push   $0x46a
f0114283:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0114288:	e8 86 c1 fe ff       	call   f0100413 <_warn>
f011428d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114290:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114294:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114298:	74 04                	je     f011429e <test_share_chunk+0x8b9>
f011429a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011429e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xA0000, 0x400000, 8*kilo, 4, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f01142a2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01142a5:	c1 e0 03             	shl    $0x3,%eax
f01142a8:	83 ec 08             	sub    $0x8,%esp
f01142ab:	6a 02                	push   $0x2
f01142ad:	6a 07                	push   $0x7
f01142af:	6a 07                	push   $0x7
f01142b1:	6a 07                	push   $0x7
f01142b3:	6a 05                	push   $0x5
f01142b5:	6a 04                	push   $0x4
f01142b7:	50                   	push   %eax
f01142b8:	68 00 00 40 00       	push   $0x400000
f01142bd:	68 00 00 0a 00       	push   $0xa0000
f01142c2:	ff 75 cc             	pushl  -0x34(%ebp)
f01142c5:	e8 19 22 00 00       	call   f01164e3 <CCP>
f01142ca:	83 c4 30             	add    $0x30,%esp
f01142cd:	85 c0                	test   %eax,%eax
f01142cf:	75 1e                	jne    f01142ef <test_share_chunk+0x90a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01142d1:	83 ec 04             	sub    $0x4,%esp
f01142d4:	68 2c a1 13 f0       	push   $0xf013a12c
f01142d9:	68 72 04 00 00       	push   $0x472
f01142de:	68 5e 8a 13 f0       	push   $0xf0138a5e
f01142e3:	e8 2b c1 fe ff       	call   f0100413 <_warn>
f01142e8:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01142eb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01142ef:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01142f3:	74 04                	je     f01142f9 <test_share_chunk+0x914>
f01142f5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01142f9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01142fd:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0114301:	0f 84 b2 00 00 00    	je     f01143b9 <test_share_chunk+0x9d4>
		{
			ptr1 = (char*)0x0009FFFF;
f0114307:	c7 45 bc ff ff 09 00 	movl   $0x9ffff,-0x44(%ebp)
			ptr2 = (char*)0x003FFFFF;
f011430e:	c7 45 b8 ff ff 3f 00 	movl   $0x3fffff,-0x48(%ebp)
			ptr3 = (char*)0x4009FFFF;
f0114315:	c7 45 9c ff ff 09 40 	movl   $0x4009ffff,-0x64(%ebp)
			ptr4 = (char*)0xF009FFFF;
f011431c:	c7 45 98 ff ff 09 f0 	movl   $0xf009ffff,-0x68(%ebp)

			ptr5 = (char*)0x000A1001;
f0114323:	c7 45 94 01 10 0a 00 	movl   $0xa1001,-0x6c(%ebp)
			ptr6 = (char*)0x00401001;
f011432a:	c7 45 90 01 10 40 00 	movl   $0x401001,-0x70(%ebp)
			ptr7 = (char*)0x400A1001;
f0114331:	c7 45 88 01 10 0a 40 	movl   $0x400a1001,-0x78(%ebp)
			ptr8 = (char*)0xF00A1001;
f0114338:	c7 45 84 01 10 0a f0 	movl   $0xf00a1001,-0x7c(%ebp)

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f011433f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114342:	8a 00                	mov    (%eax),%al
f0114344:	3c 44                	cmp    $0x44,%al
f0114346:	75 45                	jne    f011438d <test_share_chunk+0x9a8>
f0114348:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011434b:	8a 00                	mov    (%eax),%al
f011434d:	3c 44                	cmp    $0x44,%al
f011434f:	75 3c                	jne    f011438d <test_share_chunk+0x9a8>
f0114351:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0114354:	8a 00                	mov    (%eax),%al
f0114356:	3c 44                	cmp    $0x44,%al
f0114358:	75 33                	jne    f011438d <test_share_chunk+0x9a8>
f011435a:	8b 45 98             	mov    -0x68(%ebp),%eax
f011435d:	8a 00                	mov    (%eax),%al
f011435f:	3c 44                	cmp    $0x44,%al
f0114361:	75 2a                	jne    f011438d <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f0114363:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114366:	8a 10                	mov    (%eax),%dl
f0114368:	8b 45 90             	mov    -0x70(%ebp),%eax
f011436b:	8a 00                	mov    (%eax),%al
			ptr5 = (char*)0x000A1001;
			ptr6 = (char*)0x00401001;
			ptr7 = (char*)0x400A1001;
			ptr8 = (char*)0xF00A1001;

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f011436d:	38 c2                	cmp    %al,%dl
f011436f:	75 1c                	jne    f011438d <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f0114371:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114374:	8a 10                	mov    (%eax),%dl
f0114376:	8b 45 88             	mov    -0x78(%ebp),%eax
f0114379:	8a 00                	mov    (%eax),%al
f011437b:	38 c2                	cmp    %al,%dl
f011437d:	75 0e                	jne    f011438d <test_share_chunk+0x9a8>
f011437f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114382:	8a 10                	mov    (%eax),%dl
f0114384:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0114387:	8a 00                	mov    (%eax),%al
f0114389:	38 c2                	cmp    %al,%dl
f011438b:	74 1e                	je     f01143ab <test_share_chunk+0x9c6>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f011438d:	83 ec 04             	sub    $0x4,%esp
f0114390:	68 74 a1 13 f0       	push   $0xf013a174
f0114395:	68 87 04 00 00       	push   $0x487
f011439a:	68 5e 8a 13 f0       	push   $0xf0138a5e
f011439f:	e8 6f c0 fe ff       	call   f0100413 <_warn>
f01143a4:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01143a7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01143ab:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01143af:	74 04                	je     f01143b5 <test_share_chunk+0x9d0>
f01143b1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01143b5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE IV: END\n") ;
f01143b9:	83 ec 0c             	sub    $0xc,%esp
f01143bc:	68 b8 a2 13 f0       	push   $0xf013a2b8
f01143c1:	e8 48 c9 fe ff       	call   f0100d0e <cprintf>
f01143c6:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] share_chunk: FINISHED. Evaluation = %d\n", eval);
f01143c9:	83 ec 08             	sub    $0x8,%esp
f01143cc:	ff 75 e4             	pushl  -0x1c(%ebp)
f01143cf:	68 c8 a2 13 f0       	push   $0xf013a2c8
f01143d4:	e8 35 c9 fe ff       	call   f0100d0e <cprintf>
f01143d9:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01143dc:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01143e0:	75 10                	jne    f01143f2 <test_share_chunk+0xa0d>
		cprintf("Congratulations!! test share_chunk completed successfully.\n");
f01143e2:	83 ec 0c             	sub    $0xc,%esp
f01143e5:	68 f8 a2 13 f0       	push   $0xf013a2f8
f01143ea:	e8 1f c9 fe ff       	call   f0100d0e <cprintf>
f01143ef:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01143f2:	a1 a8 27 86 f0       	mov    0xf08627a8,%eax
f01143f7:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01143fa:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01143fd:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0114400:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0114405:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0114408:	5b                   	pop    %ebx
f0114409:	5e                   	pop    %esi
f011440a:	5f                   	pop    %edi
f011440b:	5d                   	pop    %ebp
f011440c:	c3                   	ret    

f011440d <test_allocate_chunk>:

//===============================
// 4) TEST ALLOCATE CHUNK:
//===============================
int test_allocate_chunk()
{
f011440d:	55                   	push   %ebp
f011440e:	89 e5                	mov    %esp,%ebp
f0114410:	57                   	push   %edi
f0114411:	56                   	push   %esi
f0114412:	53                   	push   %ebx
f0114413:	81 ec ac 00 00 00    	sub    $0xac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0114419:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f011441f:	bb f8 94 13 f0       	mov    $0xf01394f8,%ebx
f0114424:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114429:	89 c7                	mov    %eax,%edi
f011442b:	89 de                	mov    %ebx,%esi
f011442d:	89 d1                	mov    %edx,%ecx
f011442f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114431:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0114437:	b9 23 00 00 00       	mov    $0x23,%ecx
f011443c:	b0 00                	mov    $0x0,%al
f011443e:	89 d7                	mov    %edx,%edi
f0114440:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0114442:	6a 00                	push   $0x0
f0114444:	6a 0a                	push   $0xa
f0114446:	6a 14                	push   $0x14
f0114448:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f011444e:	50                   	push   %eax
f011444f:	e8 55 4c ff ff       	call   f01090a9 <env_create>
f0114454:	83 c4 10             	add    $0x10,%esp
f0114457:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f011445a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011445d:	8b 40 5c             	mov    0x5c(%eax),%eax
f0114460:	89 45 d0             	mov    %eax,-0x30(%ebp)
	lcr3(env->env_cr3) ;
f0114463:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0114466:	8b 40 60             	mov    0x60(%eax),%eax
f0114469:	89 45 90             	mov    %eax,-0x70(%ebp)
f011446c:	8b 45 90             	mov    -0x70(%ebp),%eax
f011446f:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0114472:	83 ec 0c             	sub    $0xc,%esp
f0114475:	ff 75 d0             	pushl  -0x30(%ebp)
f0114478:	e8 32 20 00 00       	call   f01164af <ClearUserSpace>
f011447d:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0114480:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f0114487:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)
	uint32 eval = 0;
f011448e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0114495:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 30% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [30%]\n") ;
f0114499:	83 ec 0c             	sub    $0xc,%esp
f011449c:	68 34 a3 13 f0       	push   $0xf013a334
f01144a1:	e8 68 c8 fe ff       	call   f0100d0e <cprintf>
f01144a6:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)KERNEL_STACK_TOP - 1;
f01144a9:	c7 45 c0 ff ff bf ef 	movl   $0xefbfffff,-0x40(%ebp)
		ptr2 = (char*)KERNEL_STACK_TOP - 2;
f01144b0:	c7 45 bc fe ff bf ef 	movl   $0xefbffffe,-0x44(%ebp)
		tptr[1] = *ptr1 ;
f01144b7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01144ba:	8a 00                	mov    (%eax),%al
f01144bc:	88 85 55 ff ff ff    	mov    %al,-0xab(%ebp)
		tptr[2] = *ptr2 ;
f01144c2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01144c5:	8a 00                	mov    (%eax),%al
f01144c7:	88 85 56 ff ff ff    	mov    %al,-0xaa(%ebp)
		uint32 old_perms = GP(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE) ;
f01144cd:	83 ec 08             	sub    $0x8,%esp
f01144d0:	68 00 f0 bf ef       	push   $0xefbff000
f01144d5:	ff 75 d0             	pushl  -0x30(%ebp)
f01144d8:	e8 b3 1f 00 00       	call   f0116490 <GP>
f01144dd:	83 c4 10             	add    $0x10,%esp
f01144e0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01144e3:	e8 fb 88 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f01144e8:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE, 4*kilo, PERM_WRITEABLE) ;
f01144eb:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01144ee:	c1 e0 02             	shl    $0x2,%eax
f01144f1:	6a 02                	push   $0x2
f01144f3:	50                   	push   %eax
f01144f4:	68 00 f0 bf ef       	push   $0xefbff000
f01144f9:	ff 75 d0             	pushl  -0x30(%ebp)
f01144fc:	e8 68 47 ff ff       	call   f0108c69 <allocate_chunk>
f0114501:	83 c4 10             	add    $0x10,%esp
f0114504:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114507:	e8 d7 88 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011450c:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f011450f:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0114513:	75 08                	jne    f011451d <test_allocate_chunk+0x110>
f0114515:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114518:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011451b:	74 2a                	je     f0114547 <test_allocate_chunk+0x13a>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f011451d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114520:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114523:	83 ec 08             	sub    $0x8,%esp
f0114526:	6a 00                	push   $0x0
f0114528:	50                   	push   %eax
f0114529:	ff 75 b0             	pushl  -0x50(%ebp)
f011452c:	68 60 a3 13 f0       	push   $0xf013a360
f0114531:	68 c3 04 00 00       	push   $0x4c3
f0114536:	68 5e 8a 13 f0       	push   $0xf0138a5e
f011453b:	e8 d3 be fe ff       	call   f0100413 <_warn>
f0114540:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114543:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114547:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011454b:	74 04                	je     f0114551 <test_allocate_chunk+0x144>
f011454d:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114551:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114555:	e8 89 88 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011455a:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 5*kilo, 2*kilo, PERM_WRITEABLE) ;
f011455d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114560:	01 c0                	add    %eax,%eax
f0114562:	89 c1                	mov    %eax,%ecx
f0114564:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114567:	89 d0                	mov    %edx,%eax
f0114569:	c1 e0 02             	shl    $0x2,%eax
f011456c:	01 d0                	add    %edx,%eax
f011456e:	f7 d8                	neg    %eax
f0114570:	2d 00 00 40 10       	sub    $0x10400000,%eax
f0114575:	6a 02                	push   $0x2
f0114577:	51                   	push   %ecx
f0114578:	50                   	push   %eax
f0114579:	ff 75 d0             	pushl  -0x30(%ebp)
f011457c:	e8 e8 46 ff ff       	call   f0108c69 <allocate_chunk>
f0114581:	83 c4 10             	add    $0x10,%esp
f0114584:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114587:	e8 57 88 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011458c:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f011458f:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0114593:	75 08                	jne    f011459d <test_allocate_chunk+0x190>
f0114595:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114598:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011459b:	74 2a                	je     f01145c7 <test_allocate_chunk+0x1ba>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f011459d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01145a0:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01145a3:	83 ec 08             	sub    $0x8,%esp
f01145a6:	6a 00                	push   $0x0
f01145a8:	50                   	push   %eax
f01145a9:	ff 75 b0             	pushl  -0x50(%ebp)
f01145ac:	68 60 a3 13 f0       	push   $0xf013a360
f01145b1:	68 d1 04 00 00       	push   $0x4d1
f01145b6:	68 5e 8a 13 f0       	push   $0xf0138a5e
f01145bb:	e8 53 be fe ff       	call   f0100413 <_warn>
f01145c0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01145c3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01145c7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01145cb:	74 04                	je     f01145d1 <test_allocate_chunk+0x1c4>
f01145cd:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01145d1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0, KERNEL_STACK_TOP-1*PAGE_SIZE, 4*kilo, 1, old_perms, 0xFFF, 0, 0, CHK_ALLOC) == 0)
f01145d5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01145d8:	c1 e0 02             	shl    $0x2,%eax
f01145db:	83 ec 08             	sub    $0x8,%esp
f01145de:	6a 03                	push   $0x3
f01145e0:	6a 00                	push   $0x0
f01145e2:	6a 00                	push   $0x0
f01145e4:	68 ff 0f 00 00       	push   $0xfff
f01145e9:	ff 75 b8             	pushl  -0x48(%ebp)
f01145ec:	6a 01                	push   $0x1
f01145ee:	50                   	push   %eax
f01145ef:	68 00 f0 bf ef       	push   $0xefbff000
f01145f4:	6a 00                	push   $0x0
f01145f6:	ff 75 d0             	pushl  -0x30(%ebp)
f01145f9:	e8 e5 1e 00 00       	call   f01164e3 <CCP>
f01145fe:	83 c4 30             	add    $0x30,%esp
f0114601:	85 c0                	test   %eax,%eax
f0114603:	75 1e                	jne    f0114623 <test_allocate_chunk+0x216>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114605:	83 ec 04             	sub    $0x4,%esp
f0114608:	68 c8 a3 13 f0       	push   $0xf013a3c8
f011460d:	68 d9 04 00 00       	push   $0x4d9
f0114612:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0114617:	e8 f7 bd fe ff       	call   f0100413 <_warn>
f011461c:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011461f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114623:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114627:	74 04                	je     f011462d <test_allocate_chunk+0x220>
f0114629:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011462d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if ((*ptr1) != tptr[1] || (*ptr2) != tptr[2])
f0114631:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114634:	8a 10                	mov    (%eax),%dl
f0114636:	8a 85 55 ff ff ff    	mov    -0xab(%ebp),%al
f011463c:	38 c2                	cmp    %al,%dl
f011463e:	75 0f                	jne    f011464f <test_allocate_chunk+0x242>
f0114640:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114643:	8a 10                	mov    (%eax),%dl
f0114645:	8a 85 56 ff ff ff    	mov    -0xaa(%ebp),%al
f011464b:	38 c2                	cmp    %al,%dl
f011464d:	74 1e                	je     f011466d <test_allocate_chunk+0x260>
		{
			warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f011464f:	83 ec 04             	sub    $0x4,%esp
f0114652:	68 14 a4 13 f0       	push   $0xf013a414
f0114657:	68 e1 04 00 00       	push   $0x4e1
f011465c:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0114661:	e8 ad bd fe ff       	call   f0100413 <_warn>
f0114666:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114669:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011466d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114671:	74 04                	je     f0114677 <test_allocate_chunk+0x26a>
f0114673:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114677:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f011467b:	83 ec 0c             	sub    $0xc,%esp
f011467e:	68 a9 a1 13 f0       	push   $0xf013a1a9
f0114683:	e8 86 c6 fe ff       	call   f0100d0e <cprintf>
f0114688:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART II: Destination page(s) not exist [Supervisor r/w] 20% */
	/*============================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor r/w] [20%]\n") ;
f011468b:	83 ec 0c             	sub    $0xc,%esp
f011468e:	68 4c a4 13 f0       	push   $0xf013a44c
f0114693:	e8 76 c6 fe ff       	call   f0100d0e <cprintf>
f0114698:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011469b:	e8 43 87 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f01146a0:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f01146a3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01146a6:	c1 e0 05             	shl    $0x5,%eax
f01146a9:	68 02 0e 00 00       	push   $0xe02
f01146ae:	50                   	push   %eax
f01146af:	6a 00                	push   $0x0
f01146b1:	ff 75 d0             	pushl  -0x30(%ebp)
f01146b4:	e8 b0 45 ff ff       	call   f0108c69 <allocate_chunk>
f01146b9:	83 c4 10             	add    $0x10,%esp
f01146bc:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01146bf:	e8 1f 87 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f01146c4:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((32*mega)/(4*mega) + (32*mega)/(4*kilo)))
f01146c7:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f01146cb:	75 36                	jne    f0114703 <test_allocate_chunk+0x2f6>
f01146cd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01146d0:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01146d3:	89 c1                	mov    %eax,%ecx
f01146d5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01146d8:	c1 e0 05             	shl    $0x5,%eax
f01146db:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01146de:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01146e5:	99                   	cltd   
f01146e6:	f7 fe                	idiv   %esi
f01146e8:	89 c3                	mov    %eax,%ebx
f01146ea:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01146ed:	c1 e0 05             	shl    $0x5,%eax
f01146f0:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01146f3:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01146fa:	99                   	cltd   
f01146fb:	f7 fe                	idiv   %esi
f01146fd:	01 d8                	add    %ebx,%eax
f01146ff:	39 c1                	cmp    %eax,%ecx
f0114701:	74 54                	je     f0114757 <test_allocate_chunk+0x34a>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((32*mega)/(4*mega) + (32*mega)/(4*kilo)));
f0114703:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114706:	c1 e0 05             	shl    $0x5,%eax
f0114709:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011470c:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114713:	99                   	cltd   
f0114714:	f7 ff                	idiv   %edi
f0114716:	89 c1                	mov    %eax,%ecx
f0114718:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011471b:	c1 e0 05             	shl    $0x5,%eax
f011471e:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114721:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114728:	99                   	cltd   
f0114729:	f7 fe                	idiv   %esi
f011472b:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f011472e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114731:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114734:	83 ec 08             	sub    $0x8,%esp
f0114737:	52                   	push   %edx
f0114738:	50                   	push   %eax
f0114739:	ff 75 a8             	pushl  -0x58(%ebp)
f011473c:	68 8c a4 13 f0       	push   $0xf013a48c
f0114741:	68 f6 04 00 00       	push   $0x4f6
f0114746:	68 5e 8a 13 f0       	push   $0xf0138a5e
f011474b:	e8 c3 bc fe ff       	call   f0100413 <_warn>
f0114750:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114753:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114757:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011475b:	74 04                	je     f0114761 <test_allocate_chunk+0x354>
f011475d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114761:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114765:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0, 0x0, 32*mega, 1, 0xE03, 0xE07, 0, 0, CHK_ALLOC) == 0)
f011476c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011476f:	c1 e0 05             	shl    $0x5,%eax
f0114772:	83 ec 08             	sub    $0x8,%esp
f0114775:	6a 03                	push   $0x3
f0114777:	6a 00                	push   $0x0
f0114779:	6a 00                	push   $0x0
f011477b:	68 07 0e 00 00       	push   $0xe07
f0114780:	68 03 0e 00 00       	push   $0xe03
f0114785:	6a 01                	push   $0x1
f0114787:	50                   	push   %eax
f0114788:	6a 00                	push   $0x0
f011478a:	6a 00                	push   $0x0
f011478c:	ff 75 d0             	pushl  -0x30(%ebp)
f011478f:	e8 4f 1d 00 00       	call   f01164e3 <CCP>
f0114794:	83 c4 30             	add    $0x30,%esp
f0114797:	85 c0                	test   %eax,%eax
f0114799:	75 25                	jne    f01147c0 <test_allocate_chunk+0x3b3>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f011479b:	83 ec 04             	sub    $0x4,%esp
f011479e:	68 c8 a3 13 f0       	push   $0xf013a3c8
f01147a3:	68 ff 04 00 00       	push   $0x4ff
f01147a8:	68 5e 8a 13 f0       	push   $0xf0138a5e
f01147ad:	e8 61 bc fe ff       	call   f0100413 <_warn>
f01147b2:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01147b5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01147b9:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f01147c0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01147c4:	74 04                	je     f01147ca <test_allocate_chunk+0x3bd>
f01147c6:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01147ca:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01147ce:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01147d2:	74 5a                	je     f011482e <test_allocate_chunk+0x421>
		{
			ptr1 = (char*)(0x0+2*kilo); *ptr1 = 'K' ;
f01147d4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01147d7:	01 c0                	add    %eax,%eax
f01147d9:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01147dc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01147df:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(0x0+2*mega); *ptr2 = 'M' ;
f01147e2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01147e5:	01 c0                	add    %eax,%eax
f01147e7:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01147ea:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01147ed:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f01147f0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01147f3:	8a 00                	mov    (%eax),%al
f01147f5:	3c 4b                	cmp    $0x4b,%al
f01147f7:	75 09                	jne    f0114802 <test_allocate_chunk+0x3f5>
f01147f9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01147fc:	8a 00                	mov    (%eax),%al
f01147fe:	3c 4d                	cmp    $0x4d,%al
f0114800:	74 1e                	je     f0114820 <test_allocate_chunk+0x413>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114802:	83 ec 04             	sub    $0x4,%esp
f0114805:	68 14 a4 13 f0       	push   $0xf013a414
f011480a:	68 0d 05 00 00       	push   $0x50d
f011480f:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0114814:	e8 fa bb fe ff       	call   f0100413 <_warn>
f0114819:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011481c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114820:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114824:	74 04                	je     f011482a <test_allocate_chunk+0x41d>
f0114826:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011482a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f011482e:	83 ec 0c             	sub    $0xc,%esp
f0114831:	68 83 97 13 f0       	push   $0xf0139783
f0114836:	e8 d3 c4 fe ff       	call   f0100d0e <cprintf>
f011483b:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART III: Destination page(s) not exist [Supervisor r] 15%  */
	/*============================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [Supervisor r] [15%]\n") ;
f011483e:	83 ec 0c             	sub    $0xc,%esp
f0114841:	68 ec a4 13 f0       	push   $0xf013a4ec
f0114846:	e8 c3 c4 fe ff       	call   f0100d0e <cprintf>
f011484b:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011484e:	e8 90 85 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0114853:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0+32*mega, 64*mega, 0) ;
f0114856:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114859:	c1 e0 06             	shl    $0x6,%eax
f011485c:	89 c2                	mov    %eax,%edx
f011485e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114861:	c1 e0 05             	shl    $0x5,%eax
f0114864:	6a 00                	push   $0x0
f0114866:	52                   	push   %edx
f0114867:	50                   	push   %eax
f0114868:	ff 75 d0             	pushl  -0x30(%ebp)
f011486b:	e8 f9 43 ff ff       	call   f0108c69 <allocate_chunk>
f0114870:	83 c4 10             	add    $0x10,%esp
f0114873:	89 45 a4             	mov    %eax,-0x5c(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114876:	e8 68 85 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011487b:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*mega) + (64*mega)/(4*kilo)))
f011487e:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
f0114882:	75 36                	jne    f01148ba <test_allocate_chunk+0x4ad>
f0114884:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114887:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011488a:	89 c1                	mov    %eax,%ecx
f011488c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011488f:	c1 e0 06             	shl    $0x6,%eax
f0114892:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114895:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f011489c:	99                   	cltd   
f011489d:	f7 ff                	idiv   %edi
f011489f:	89 c3                	mov    %eax,%ebx
f01148a1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01148a4:	c1 e0 06             	shl    $0x6,%eax
f01148a7:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01148aa:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01148b1:	99                   	cltd   
f01148b2:	f7 fe                	idiv   %esi
f01148b4:	01 d8                	add    %ebx,%eax
f01148b6:	39 c1                	cmp    %eax,%ecx
f01148b8:	74 54                	je     f011490e <test_allocate_chunk+0x501>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*mega) + (64*mega)/(4*kilo)));
f01148ba:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01148bd:	c1 e0 06             	shl    $0x6,%eax
f01148c0:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01148c3:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01148ca:	99                   	cltd   
f01148cb:	f7 fb                	idiv   %ebx
f01148cd:	89 c1                	mov    %eax,%ecx
f01148cf:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01148d2:	c1 e0 06             	shl    $0x6,%eax
f01148d5:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01148d8:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f01148df:	99                   	cltd   
f01148e0:	f7 ff                	idiv   %edi
f01148e2:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01148e5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01148e8:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01148eb:	83 ec 08             	sub    $0x8,%esp
f01148ee:	52                   	push   %edx
f01148ef:	50                   	push   %eax
f01148f0:	ff 75 a4             	pushl  -0x5c(%ebp)
f01148f3:	68 8c a4 13 f0       	push   $0xf013a48c
f01148f8:	68 23 05 00 00       	push   $0x523
f01148fd:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0114902:	e8 0c bb fe ff       	call   f0100413 <_warn>
f0114907:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011490a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011490e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114912:	74 04                	je     f0114918 <test_allocate_chunk+0x50b>
f0114914:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114918:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f011491c:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
		if (CCP(proc_directory, 0, 0x0+32*mega, 64*mega, 1, 0x001, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114923:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114926:	c1 e0 06             	shl    $0x6,%eax
f0114929:	89 c2                	mov    %eax,%edx
f011492b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011492e:	c1 e0 05             	shl    $0x5,%eax
f0114931:	83 ec 08             	sub    $0x8,%esp
f0114934:	6a 03                	push   $0x3
f0114936:	6a 00                	push   $0x0
f0114938:	6a 00                	push   $0x0
f011493a:	68 07 0e 00 00       	push   $0xe07
f011493f:	6a 01                	push   $0x1
f0114941:	6a 01                	push   $0x1
f0114943:	52                   	push   %edx
f0114944:	50                   	push   %eax
f0114945:	6a 00                	push   $0x0
f0114947:	ff 75 d0             	pushl  -0x30(%ebp)
f011494a:	e8 94 1b 00 00       	call   f01164e3 <CCP>
f011494f:	83 c4 30             	add    $0x30,%esp
f0114952:	85 c0                	test   %eax,%eax
f0114954:	75 25                	jne    f011497b <test_allocate_chunk+0x56e>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114956:	83 ec 04             	sub    $0x4,%esp
f0114959:	68 c8 a3 13 f0       	push   $0xf013a3c8
f011495e:	68 2c 05 00 00       	push   $0x52c
f0114963:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0114968:	e8 a6 ba fe ff       	call   f0100413 <_warn>
f011496d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114970:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114974:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
		}
		if (correct) eval += 10 ;
f011497b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011497f:	74 04                	je     f0114985 <test_allocate_chunk+0x578>
f0114981:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114985:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE III: END\n") ;
f0114989:	83 ec 0c             	sub    $0xc,%esp
f011498c:	68 e6 97 13 f0       	push   $0xf01397e6
f0114991:	e8 78 c3 fe ff       	call   f0100d0e <cprintf>
f0114996:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r/w] 20%  */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r/w] [20%]\n") ;
f0114999:	83 ec 0c             	sub    $0xc,%esp
f011499c:	68 2c a5 13 f0       	push   $0xf013a52c
f01149a1:	e8 68 c3 fe ff       	call   f0100d0e <cprintf>
f01149a6:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01149a9:	e8 35 84 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f01149ae:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, USER_HEAP_START, 64*mega, PERM_WRITEABLE|PERM_USER|PERM_AVAILABLE) ;
f01149b1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01149b4:	c1 e0 06             	shl    $0x6,%eax
f01149b7:	68 06 0e 00 00       	push   $0xe06
f01149bc:	50                   	push   %eax
f01149bd:	68 00 00 00 80       	push   $0x80000000
f01149c2:	ff 75 d0             	pushl  -0x30(%ebp)
f01149c5:	e8 9f 42 ff ff       	call   f0108c69 <allocate_chunk>
f01149ca:	83 c4 10             	add    $0x10,%esp
f01149cd:	89 45 9c             	mov    %eax,-0x64(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01149d0:	e8 0e 84 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f01149d5:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*kilo)+(64*mega)/(4*mega)))
f01149d8:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f01149dc:	75 36                	jne    f0114a14 <test_allocate_chunk+0x607>
f01149de:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01149e1:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01149e4:	89 c1                	mov    %eax,%ecx
f01149e6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01149e9:	c1 e0 06             	shl    $0x6,%eax
f01149ec:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01149ef:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01149f6:	99                   	cltd   
f01149f7:	f7 fb                	idiv   %ebx
f01149f9:	89 c3                	mov    %eax,%ebx
f01149fb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01149fe:	c1 e0 06             	shl    $0x6,%eax
f0114a01:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114a04:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114a0b:	99                   	cltd   
f0114a0c:	f7 fe                	idiv   %esi
f0114a0e:	01 d8                	add    %ebx,%eax
f0114a10:	39 c1                	cmp    %eax,%ecx
f0114a12:	74 54                	je     f0114a68 <test_allocate_chunk+0x65b>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*kilo)+(64*mega)/(4*mega)));
f0114a14:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114a17:	c1 e0 06             	shl    $0x6,%eax
f0114a1a:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114a1d:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114a24:	99                   	cltd   
f0114a25:	f7 ff                	idiv   %edi
f0114a27:	89 c1                	mov    %eax,%ecx
f0114a29:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114a2c:	c1 e0 06             	shl    $0x6,%eax
f0114a2f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114a32:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114a39:	99                   	cltd   
f0114a3a:	f7 fb                	idiv   %ebx
f0114a3c:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114a3f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114a42:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114a45:	83 ec 08             	sub    $0x8,%esp
f0114a48:	52                   	push   %edx
f0114a49:	50                   	push   %eax
f0114a4a:	ff 75 9c             	pushl  -0x64(%ebp)
f0114a4d:	68 8c a4 13 f0       	push   $0xf013a48c
f0114a52:	68 42 05 00 00       	push   $0x542
f0114a57:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0114a5c:	e8 b2 b9 fe ff       	call   f0100413 <_warn>
f0114a61:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114a64:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114a68:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114a6c:	74 04                	je     f0114a72 <test_allocate_chunk+0x665>
f0114a6e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114a72:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114a76:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0, USER_HEAP_START, 64*mega, 1, 0xE07, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114a7d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114a80:	c1 e0 06             	shl    $0x6,%eax
f0114a83:	83 ec 08             	sub    $0x8,%esp
f0114a86:	6a 03                	push   $0x3
f0114a88:	6a 00                	push   $0x0
f0114a8a:	6a 00                	push   $0x0
f0114a8c:	68 07 0e 00 00       	push   $0xe07
f0114a91:	68 07 0e 00 00       	push   $0xe07
f0114a96:	6a 01                	push   $0x1
f0114a98:	50                   	push   %eax
f0114a99:	68 00 00 00 80       	push   $0x80000000
f0114a9e:	6a 00                	push   $0x0
f0114aa0:	ff 75 d0             	pushl  -0x30(%ebp)
f0114aa3:	e8 3b 1a 00 00       	call   f01164e3 <CCP>
f0114aa8:	83 c4 30             	add    $0x30,%esp
f0114aab:	85 c0                	test   %eax,%eax
f0114aad:	75 25                	jne    f0114ad4 <test_allocate_chunk+0x6c7>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114aaf:	83 ec 04             	sub    $0x4,%esp
f0114ab2:	68 c8 a3 13 f0       	push   $0xf013a3c8
f0114ab7:	68 4b 05 00 00       	push   $0x54b
f0114abc:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0114ac1:	e8 4d b9 fe ff       	call   f0100413 <_warn>
f0114ac6:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114ac9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114acd:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}
		if (correct) eval += 10 ;
f0114ad4:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114ad8:	74 04                	je     f0114ade <test_allocate_chunk+0x6d1>
f0114ada:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114ade:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114ae2:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0114ae6:	74 6f                	je     f0114b57 <test_allocate_chunk+0x74a>
		{
			ptr1 = (char*)(USER_HEAP_START+2*kilo); *ptr1 = 'K' ;
f0114ae8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114aeb:	01 c0                	add    %eax,%eax
f0114aed:	05 00 00 00 80       	add    $0x80000000,%eax
f0114af2:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0114af5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114af8:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(USER_HEAP_START+22*mega);*ptr2 = 'M' ;
f0114afb:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114afe:	89 d0                	mov    %edx,%eax
f0114b00:	c1 e0 02             	shl    $0x2,%eax
f0114b03:	01 d0                	add    %edx,%eax
f0114b05:	01 c0                	add    %eax,%eax
f0114b07:	01 d0                	add    %edx,%eax
f0114b09:	01 c0                	add    %eax,%eax
f0114b0b:	05 00 00 00 80       	add    $0x80000000,%eax
f0114b10:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0114b13:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114b16:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0114b19:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114b1c:	8a 00                	mov    (%eax),%al
f0114b1e:	3c 4b                	cmp    $0x4b,%al
f0114b20:	75 09                	jne    f0114b2b <test_allocate_chunk+0x71e>
f0114b22:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114b25:	8a 00                	mov    (%eax),%al
f0114b27:	3c 4d                	cmp    $0x4d,%al
f0114b29:	74 1e                	je     f0114b49 <test_allocate_chunk+0x73c>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114b2b:	83 ec 04             	sub    $0x4,%esp
f0114b2e:	68 14 a4 13 f0       	push   $0xf013a414
f0114b33:	68 59 05 00 00       	push   $0x559
f0114b38:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0114b3d:	e8 d1 b8 fe ff       	call   f0100413 <_warn>
f0114b42:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114b45:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114b49:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114b4d:	74 04                	je     f0114b53 <test_allocate_chunk+0x746>
f0114b4f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114b53:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		}
	}
	cprintf("\nCASE IV: END\n") ;
f0114b57:	83 ec 0c             	sub    $0xc,%esp
f0114b5a:	68 b8 a2 13 f0       	push   $0xf013a2b8
f0114b5f:	e8 aa c1 fe ff       	call   f0100d0e <cprintf>
f0114b64:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART V: Destination page(s) not exist [User r] 15%     */
	/*========================================================*/
	cprintf("\nCASE V: Destination page(s) not exist [User r] [15%]\n") ;
f0114b67:	83 ec 0c             	sub    $0xc,%esp
f0114b6a:	68 68 a5 13 f0       	push   $0xf013a568
f0114b6f:	e8 9a c1 fe ff       	call   f0100d0e <cprintf>
f0114b74:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114b77:	e8 67 82 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0114b7c:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory,0x403FFC00, 7*kilo, PERM_USER|PERM_AVAILABLE) ;
f0114b7f:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114b82:	89 d0                	mov    %edx,%eax
f0114b84:	01 c0                	add    %eax,%eax
f0114b86:	01 d0                	add    %edx,%eax
f0114b88:	01 c0                	add    %eax,%eax
f0114b8a:	01 d0                	add    %edx,%eax
f0114b8c:	68 04 0e 00 00       	push   $0xe04
f0114b91:	50                   	push   %eax
f0114b92:	68 00 fc 3f 40       	push   $0x403ffc00
f0114b97:	ff 75 d0             	pushl  -0x30(%ebp)
f0114b9a:	e8 ca 40 ff ff       	call   f0108c69 <allocate_chunk>
f0114b9f:	83 c4 10             	add    $0x10,%esp
f0114ba2:	89 45 98             	mov    %eax,-0x68(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114ba5:	e8 39 82 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0114baa:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (3+2))
f0114bad:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0114bb1:	75 0b                	jne    f0114bbe <test_allocate_chunk+0x7b1>
f0114bb3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114bb6:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114bb9:	83 f8 05             	cmp    $0x5,%eax
f0114bbc:	74 2a                	je     f0114be8 <test_allocate_chunk+0x7db>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, (3+2));
f0114bbe:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114bc1:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114bc4:	83 ec 08             	sub    $0x8,%esp
f0114bc7:	6a 05                	push   $0x5
f0114bc9:	50                   	push   %eax
f0114bca:	ff 75 98             	pushl  -0x68(%ebp)
f0114bcd:	68 8c a4 13 f0       	push   $0xf013a48c
f0114bd2:	68 70 05 00 00       	push   $0x570
f0114bd7:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0114bdc:	e8 32 b8 fe ff       	call   f0100413 <_warn>
f0114be1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114be4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114be8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114bec:	74 04                	je     f0114bf2 <test_allocate_chunk+0x7e5>
f0114bee:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114bf2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114bf6:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
		if (CCP(proc_directory, 0, 0x403FF000, 12*kilo, 1, 0xE05, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114bfd:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114c00:	89 d0                	mov    %edx,%eax
f0114c02:	01 c0                	add    %eax,%eax
f0114c04:	01 d0                	add    %edx,%eax
f0114c06:	c1 e0 02             	shl    $0x2,%eax
f0114c09:	83 ec 08             	sub    $0x8,%esp
f0114c0c:	6a 03                	push   $0x3
f0114c0e:	6a 00                	push   $0x0
f0114c10:	6a 00                	push   $0x0
f0114c12:	68 07 0e 00 00       	push   $0xe07
f0114c17:	68 05 0e 00 00       	push   $0xe05
f0114c1c:	6a 01                	push   $0x1
f0114c1e:	50                   	push   %eax
f0114c1f:	68 00 f0 3f 40       	push   $0x403ff000
f0114c24:	6a 00                	push   $0x0
f0114c26:	ff 75 d0             	pushl  -0x30(%ebp)
f0114c29:	e8 b5 18 00 00       	call   f01164e3 <CCP>
f0114c2e:	83 c4 30             	add    $0x30,%esp
f0114c31:	85 c0                	test   %eax,%eax
f0114c33:	75 25                	jne    f0114c5a <test_allocate_chunk+0x84d>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114c35:	83 ec 04             	sub    $0x4,%esp
f0114c38:	68 c8 a3 13 f0       	push   $0xf013a3c8
f0114c3d:	68 79 05 00 00       	push   $0x579
f0114c42:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0114c47:	e8 c7 b7 fe ff       	call   f0100413 <_warn>
f0114c4c:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114c4f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114c53:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
		}
		if (correct) eval += 5 ;
f0114c5a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114c5e:	74 04                	je     f0114c64 <test_allocate_chunk+0x857>
f0114c60:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114c64:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

	}
	cprintf("\nCASE V: END\n") ;
f0114c68:	83 ec 0c             	sub    $0xc,%esp
f0114c6b:	68 9f a5 13 f0       	push   $0xf013a59f
f0114c70:	e8 99 c0 fe ff       	call   f0100d0e <cprintf>
f0114c75:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] allocate_chunk: FINISHED. Evaluation = %d\n", eval);
f0114c78:	83 ec 08             	sub    $0x8,%esp
f0114c7b:	ff 75 e4             	pushl  -0x1c(%ebp)
f0114c7e:	68 b0 a5 13 f0       	push   $0xf013a5b0
f0114c83:	e8 86 c0 fe ff       	call   f0100d0e <cprintf>
f0114c88:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0114c8b:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0114c8f:	75 10                	jne    f0114ca1 <test_allocate_chunk+0x894>
		cprintf("Congratulations!! test allocate_chunk completed successfully.\n");
f0114c91:	83 ec 0c             	sub    $0xc,%esp
f0114c94:	68 e4 a5 13 f0       	push   $0xf013a5e4
f0114c99:	e8 70 c0 fe ff       	call   f0100d0e <cprintf>
f0114c9e:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0114ca1:	a1 a8 27 86 f0       	mov    0xf08627a8,%eax
f0114ca6:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0114ca9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114cac:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0114caf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0114cb4:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0114cb7:	5b                   	pop    %ebx
f0114cb8:	5e                   	pop    %esi
f0114cb9:	5f                   	pop    %edi
f0114cba:	5d                   	pop    %ebp
f0114cbb:	c3                   	ret    

f0114cbc <test_calculate_required_frames>:

//======================================
// 5) [+]TEST CALCULATE REQUIRED FRAMES:
//======================================
int test_calculate_required_frames()
{
f0114cbc:	55                   	push   %ebp
f0114cbd:	89 e5                	mov    %esp,%ebp
f0114cbf:	57                   	push   %edi
f0114cc0:	56                   	push   %esi
f0114cc1:	53                   	push   %ebx
f0114cc2:	81 ec fc 01 00 00    	sub    $0x1fc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0114cc8:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0114ccb:	bb f8 94 13 f0       	mov    $0xf01394f8,%ebx
f0114cd0:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114cd5:	89 c7                	mov    %eax,%edi
f0114cd7:	89 de                	mov    %ebx,%esi
f0114cd9:	89 d1                	mov    %edx,%ecx
f0114cdb:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114cdd:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0114ce0:	b9 23 00 00 00       	mov    $0x23,%ecx
f0114ce5:	b0 00                	mov    $0x0,%al
f0114ce7:	89 d7                	mov    %edx,%edi
f0114ce9:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0114ceb:	6a 00                	push   $0x0
f0114ced:	6a 0a                	push   $0xa
f0114cef:	6a 14                	push   $0x14
f0114cf1:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0114cf4:	50                   	push   %eax
f0114cf5:	e8 af 43 ff ff       	call   f01090a9 <env_create>
f0114cfa:	83 c4 10             	add    $0x10,%esp
f0114cfd:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0114d00:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114d03:	8b 40 5c             	mov    0x5c(%eax),%eax
f0114d06:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0114d09:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114d0c:	8b 40 60             	mov    0x60(%eax),%eax
f0114d0f:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0114d12:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114d15:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0114d18:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0114d1f:	75 70 20 
f0114d22:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0114d29:	00 00 00 
f0114d2c:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0114d2f:	b9 03 00 00 00       	mov    $0x3,%ecx
f0114d34:	b8 00 00 00 00       	mov    $0x0,%eax
f0114d39:	89 d7                	mov    %edx,%edi
f0114d3b:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0114d3d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114d40:	8b 40 4c             	mov    0x4c(%eax),%eax
f0114d43:	83 ec 08             	sub    $0x8,%esp
f0114d46:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0114d4c:	52                   	push   %edx
f0114d4d:	50                   	push   %eax
f0114d4e:	e8 5b cd 01 00       	call   f0131aae <ltostr>
f0114d53:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0114d56:	83 ec 04             	sub    $0x4,%esp
f0114d59:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114d5f:	50                   	push   %eax
f0114d60:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0114d66:	50                   	push   %eax
f0114d67:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0114d6d:	50                   	push   %eax
f0114d6e:	e8 33 ce 01 00       	call   f0131ba6 <strcconcat>
f0114d73:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0114d76:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0114d7d:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0114d84:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32 res =0;
f0114d8b:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint8 correct = 1;
f0114d92:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;

	ClearUserSpace(proc_directory);
f0114d96:	83 ec 0c             	sub    $0xc,%esp
f0114d99:	ff 75 d8             	pushl  -0x28(%ebp)
f0114d9c:	e8 0e 17 00 00       	call   f01164af <ClearUserSpace>
f0114da1:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0114da4:	83 ec 0c             	sub    $0xc,%esp
f0114da7:	68 24 a6 13 f0       	push   $0xf013a624
f0114dac:	e8 5d bf fe ff       	call   f0100d0e <cprintf>
f0114db1:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f0114db4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114db7:	c1 e0 03             	shl    $0x3,%eax
f0114dba:	83 ec 04             	sub    $0x4,%esp
f0114dbd:	50                   	push   %eax
f0114dbe:	6a 00                	push   $0x0
f0114dc0:	ff 75 d8             	pushl  -0x28(%ebp)
f0114dc3:	e8 8d 40 ff ff       	call   f0108e55 <calculate_required_frames>
f0114dc8:	83 c4 10             	add    $0x10,%esp
f0114dcb:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0114dce:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0114dd2:	74 23                	je     f0114df7 <test_calculate_required_frames+0x13b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0114dd4:	83 ec 0c             	sub    $0xc,%esp
f0114dd7:	6a 03                	push   $0x3
f0114dd9:	ff 75 c8             	pushl  -0x38(%ebp)
f0114ddc:	68 58 a6 13 f0       	push   $0xf013a658
f0114de1:	68 b2 05 00 00       	push   $0x5b2
f0114de6:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0114deb:	e8 23 b6 fe ff       	call   f0100413 <_warn>
f0114df0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114df3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114df7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114dfb:	74 04                	je     f0114e01 <test_calculate_required_frames+0x145>
f0114dfd:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114e01:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 4*mega);
f0114e05:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114e08:	c1 e0 02             	shl    $0x2,%eax
f0114e0b:	83 ec 04             	sub    $0x4,%esp
f0114e0e:	50                   	push   %eax
f0114e0f:	6a 00                	push   $0x0
f0114e11:	ff 75 d8             	pushl  -0x28(%ebp)
f0114e14:	e8 3c 40 ff ff       	call   f0108e55 <calculate_required_frames>
f0114e19:	83 c4 10             	add    $0x10,%esp
f0114e1c:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 1025)
f0114e1f:	81 7d c8 01 04 00 00 	cmpl   $0x401,-0x38(%ebp)
f0114e26:	74 26                	je     f0114e4e <test_calculate_required_frames+0x192>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 1025);
f0114e28:	83 ec 0c             	sub    $0xc,%esp
f0114e2b:	68 01 04 00 00       	push   $0x401
f0114e30:	ff 75 c8             	pushl  -0x38(%ebp)
f0114e33:	68 58 a6 13 f0       	push   $0xf013a658
f0114e38:	68 bc 05 00 00       	push   $0x5bc
f0114e3d:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0114e42:	e8 cc b5 fe ff       	call   f0100413 <_warn>
f0114e47:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114e4a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114e4e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114e52:	74 04                	je     f0114e58 <test_calculate_required_frames+0x19c>
f0114e54:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114e58:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f0114e5c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114e5f:	c1 e0 0a             	shl    $0xa,%eax
f0114e62:	83 ec 04             	sub    $0x4,%esp
f0114e65:	50                   	push   %eax
f0114e66:	6a 00                	push   $0x0
f0114e68:	ff 75 d8             	pushl  -0x28(%ebp)
f0114e6b:	e8 e5 3f ff ff       	call   f0108e55 <calculate_required_frames>
f0114e70:	83 c4 10             	add    $0x10,%esp
f0114e73:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)))
f0114e76:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114e79:	c1 e0 0a             	shl    $0xa,%eax
f0114e7c:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114e7f:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114e86:	99                   	cltd   
f0114e87:	f7 fb                	idiv   %ebx
f0114e89:	89 c1                	mov    %eax,%ecx
f0114e8b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114e8e:	c1 e0 0a             	shl    $0xa,%eax
f0114e91:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0114e94:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114e9b:	99                   	cltd   
f0114e9c:	f7 fe                	idiv   %esi
f0114e9e:	01 c8                	add    %ecx,%eax
f0114ea0:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114ea3:	74 4c                	je     f0114ef1 <test_calculate_required_frames+0x235>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)));
f0114ea5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114ea8:	c1 e0 0a             	shl    $0xa,%eax
f0114eab:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114eae:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114eb5:	99                   	cltd   
f0114eb6:	f7 fb                	idiv   %ebx
f0114eb8:	89 c1                	mov    %eax,%ecx
f0114eba:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114ebd:	c1 e0 0a             	shl    $0xa,%eax
f0114ec0:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0114ec3:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114eca:	99                   	cltd   
f0114ecb:	f7 fe                	idiv   %esi
f0114ecd:	01 c8                	add    %ecx,%eax
f0114ecf:	83 ec 0c             	sub    $0xc,%esp
f0114ed2:	50                   	push   %eax
f0114ed3:	ff 75 c8             	pushl  -0x38(%ebp)
f0114ed6:	68 58 a6 13 f0       	push   $0xf013a658
f0114edb:	68 c6 05 00 00       	push   $0x5c6
f0114ee0:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0114ee5:	e8 29 b5 fe ff       	call   f0100413 <_warn>
f0114eea:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114eed:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114ef1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114ef5:	74 04                	je     f0114efb <test_calculate_required_frames+0x23f>
f0114ef7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114efb:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test4
		res = calculate_required_frames(proc_directory, 0x1000, 6*kilo);
f0114eff:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0114f02:	89 d0                	mov    %edx,%eax
f0114f04:	01 c0                	add    %eax,%eax
f0114f06:	01 d0                	add    %edx,%eax
f0114f08:	01 c0                	add    %eax,%eax
f0114f0a:	83 ec 04             	sub    $0x4,%esp
f0114f0d:	50                   	push   %eax
f0114f0e:	68 00 10 00 00       	push   $0x1000
f0114f13:	ff 75 d8             	pushl  -0x28(%ebp)
f0114f16:	e8 3a 3f ff ff       	call   f0108e55 <calculate_required_frames>
f0114f1b:	83 c4 10             	add    $0x10,%esp
f0114f1e:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0114f21:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0114f25:	74 23                	je     f0114f4a <test_calculate_required_frames+0x28e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0114f27:	83 ec 0c             	sub    $0xc,%esp
f0114f2a:	6a 03                	push   $0x3
f0114f2c:	ff 75 c8             	pushl  -0x38(%ebp)
f0114f2f:	68 58 a6 13 f0       	push   $0xf013a658
f0114f34:	68 d2 05 00 00       	push   $0x5d2
f0114f39:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0114f3e:	e8 d0 b4 fe ff       	call   f0100413 <_warn>
f0114f43:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114f46:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114f4a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114f4e:	74 04                	je     f0114f54 <test_calculate_required_frames+0x298>
f0114f50:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114f54:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0114f58:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114f5b:	89 c2                	mov    %eax,%edx
f0114f5d:	01 d2                	add    %edx,%edx
f0114f5f:	01 d0                	add    %edx,%eax
f0114f61:	83 ec 04             	sub    $0x4,%esp
f0114f64:	50                   	push   %eax
f0114f65:	68 00 18 00 00       	push   $0x1800
f0114f6a:	ff 75 d8             	pushl  -0x28(%ebp)
f0114f6d:	e8 e3 3e ff ff       	call   f0108e55 <calculate_required_frames>
f0114f72:	83 c4 10             	add    $0x10,%esp
f0114f75:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0114f78:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0114f7c:	74 23                	je     f0114fa1 <test_calculate_required_frames+0x2e5>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0114f7e:	83 ec 0c             	sub    $0xc,%esp
f0114f81:	6a 03                	push   $0x3
f0114f83:	ff 75 c8             	pushl  -0x38(%ebp)
f0114f86:	68 58 a6 13 f0       	push   $0xf013a658
f0114f8b:	68 dc 05 00 00       	push   $0x5dc
f0114f90:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0114f95:	e8 79 b4 fe ff       	call   f0100413 <_warn>
f0114f9a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114f9d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114fa1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114fa5:	74 04                	je     f0114fab <test_calculate_required_frames+0x2ef>
f0114fa7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114fab:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f0114faf:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114fb2:	89 d0                	mov    %edx,%eax
f0114fb4:	c1 e0 02             	shl    $0x2,%eax
f0114fb7:	01 d0                	add    %edx,%eax
f0114fb9:	01 c0                	add    %eax,%eax
f0114fbb:	83 ec 04             	sub    $0x4,%esp
f0114fbe:	50                   	push   %eax
f0114fbf:	68 00 00 40 00       	push   $0x400000
f0114fc4:	ff 75 d8             	pushl  -0x28(%ebp)
f0114fc7:	e8 89 3e ff ff       	call   f0108e55 <calculate_required_frames>
f0114fcc:	83 c4 10             	add    $0x10,%esp
f0114fcf:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2563)
f0114fd2:	81 7d c8 03 0a 00 00 	cmpl   $0xa03,-0x38(%ebp)
f0114fd9:	74 26                	je     f0115001 <test_calculate_required_frames+0x345>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f0114fdb:	83 ec 0c             	sub    $0xc,%esp
f0114fde:	68 03 0a 00 00       	push   $0xa03
f0114fe3:	ff 75 c8             	pushl  -0x38(%ebp)
f0114fe6:	68 58 a6 13 f0       	push   $0xf013a658
f0114feb:	68 e6 05 00 00       	push   $0x5e6
f0114ff0:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0114ff5:	e8 19 b4 fe ff       	call   f0100413 <_warn>
f0114ffa:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114ffd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115001:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115005:	74 04                	je     f011500b <test_calculate_required_frames+0x34f>
f0115007:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011500b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f011500f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115012:	01 c0                	add    %eax,%eax
f0115014:	83 ec 04             	sub    $0x4,%esp
f0115017:	50                   	push   %eax
f0115018:	68 00 00 70 00       	push   $0x700000
f011501d:	ff 75 d8             	pushl  -0x28(%ebp)
f0115020:	e8 30 3e ff ff       	call   f0108e55 <calculate_required_frames>
f0115025:	83 c4 10             	add    $0x10,%esp
f0115028:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 514)
f011502b:	81 7d c8 02 02 00 00 	cmpl   $0x202,-0x38(%ebp)
f0115032:	74 26                	je     f011505a <test_calculate_required_frames+0x39e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 514);
f0115034:	83 ec 0c             	sub    $0xc,%esp
f0115037:	68 02 02 00 00       	push   $0x202
f011503c:	ff 75 c8             	pushl  -0x38(%ebp)
f011503f:	68 58 a6 13 f0       	push   $0xf013a658
f0115044:	68 f2 05 00 00       	push   $0x5f2
f0115049:	68 5e 8a 13 f0       	push   $0xf0138a5e
f011504e:	e8 c0 b3 fe ff       	call   f0100413 <_warn>
f0115053:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115056:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011505a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011505e:	74 04                	je     f0115064 <test_calculate_required_frames+0x3a8>
f0115060:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115064:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0115068:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011506b:	83 ec 04             	sub    $0x4,%esp
f011506e:	50                   	push   %eax
f011506f:	68 ff ff 3f 00       	push   $0x3fffff
f0115074:	ff 75 d8             	pushl  -0x28(%ebp)
f0115077:	e8 d9 3d ff ff       	call   f0108e55 <calculate_required_frames>
f011507c:	83 c4 10             	add    $0x10,%esp
f011507f:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 4)
f0115082:	83 7d c8 04          	cmpl   $0x4,-0x38(%ebp)
f0115086:	74 23                	je     f01150ab <test_calculate_required_frames+0x3ef>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 4);
f0115088:	83 ec 0c             	sub    $0xc,%esp
f011508b:	6a 04                	push   $0x4
f011508d:	ff 75 c8             	pushl  -0x38(%ebp)
f0115090:	68 58 a6 13 f0       	push   $0xf013a658
f0115095:	68 fc 05 00 00       	push   $0x5fc
f011509a:	68 5e 8a 13 f0       	push   $0xf0138a5e
f011509f:	e8 6f b3 fe ff       	call   f0100413 <_warn>
f01150a4:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01150a7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01150ab:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01150af:	74 04                	je     f01150b5 <test_calculate_required_frames+0x3f9>
f01150b1:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01150b5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f01150b9:	83 ec 0c             	sub    $0xc,%esp
f01150bc:	68 a9 a1 13 f0       	push   $0xf013a1a9
f01150c1:	e8 48 bc fe ff       	call   f0100d0e <cprintf>
f01150c6:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f01150c9:	83 ec 0c             	sub    $0xc,%esp
f01150cc:	68 b0 a6 13 f0       	push   $0xf013a6b0
f01150d1:	e8 38 bc fe ff       	call   f0100d0e <cprintf>
f01150d6:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f01150d9:	83 ec 04             	sub    $0x4,%esp
f01150dc:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f01150e2:	50                   	push   %eax
f01150e3:	68 62 95 13 f0       	push   $0xf0139562
f01150e8:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01150ee:	50                   	push   %eax
f01150ef:	e8 b2 ca 01 00       	call   f0131ba6 <strcconcat>
f01150f4:	83 c4 10             	add    $0x10,%esp
f01150f7:	83 ec 0c             	sub    $0xc,%esp
f01150fa:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f0115100:	50                   	push   %eax
f0115101:	e8 6a bc fe ff       	call   f0100d70 <execute_command>
f0115106:	83 c4 10             	add    $0x10,%esp

		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f0115109:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011510c:	c1 e0 03             	shl    $0x3,%eax
f011510f:	83 ec 04             	sub    $0x4,%esp
f0115112:	50                   	push   %eax
f0115113:	6a 00                	push   $0x0
f0115115:	ff 75 d8             	pushl  -0x28(%ebp)
f0115118:	e8 38 3d ff ff       	call   f0108e55 <calculate_required_frames>
f011511d:	83 c4 10             	add    $0x10,%esp
f0115120:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0115123:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f011512a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011512d:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115130:	74 24                	je     f0115156 <test_calculate_required_frames+0x49a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115132:	83 ec 0c             	sub    $0xc,%esp
f0115135:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115138:	ff 75 c8             	pushl  -0x38(%ebp)
f011513b:	68 58 a6 13 f0       	push   $0xf013a658
f0115140:	68 10 06 00 00       	push   $0x610
f0115145:	68 5e 8a 13 f0       	push   $0xf0138a5e
f011514a:	e8 c4 b2 fe ff       	call   f0100413 <_warn>
f011514f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115152:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115156:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011515a:	74 04                	je     f0115160 <test_calculate_required_frames+0x4a4>
f011515c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115160:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f0115164:	83 ec 04             	sub    $0x4,%esp
f0115167:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011516d:	50                   	push   %eax
f011516e:	68 6f 95 13 f0       	push   $0xf013956f
f0115173:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115179:	50                   	push   %eax
f011517a:	e8 27 ca 01 00       	call   f0131ba6 <strcconcat>
f011517f:	83 c4 10             	add    $0x10,%esp
f0115182:	83 ec 0c             	sub    $0xc,%esp
f0115185:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011518b:	50                   	push   %eax
f011518c:	e8 df bb fe ff       	call   f0100d70 <execute_command>
f0115191:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f0115194:	83 ec 04             	sub    $0x4,%esp
f0115197:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f011519d:	50                   	push   %eax
f011519e:	68 e4 a6 13 f0       	push   $0xf013a6e4
f01151a3:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01151a9:	50                   	push   %eax
f01151aa:	e8 f7 c9 01 00       	call   f0131ba6 <strcconcat>
f01151af:	83 c4 10             	add    $0x10,%esp
f01151b2:	83 ec 0c             	sub    $0xc,%esp
f01151b5:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01151bb:	50                   	push   %eax
f01151bc:	e8 af bb fe ff       	call   f0100d70 <execute_command>
f01151c1:	83 c4 10             	add    $0x10,%esp

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 8*mega);
f01151c4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01151c7:	c1 e0 03             	shl    $0x3,%eax
f01151ca:	83 ec 04             	sub    $0x4,%esp
f01151cd:	50                   	push   %eax
f01151ce:	6a 00                	push   $0x0
f01151d0:	ff 75 d8             	pushl  -0x28(%ebp)
f01151d3:	e8 7d 3c ff ff       	call   f0108e55 <calculate_required_frames>
f01151d8:	83 c4 10             	add    $0x10,%esp
f01151db:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 2047;
f01151de:	c7 45 c4 ff 07 00 00 	movl   $0x7ff,-0x3c(%ebp)
		if (res != expected)
f01151e5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01151e8:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01151eb:	74 24                	je     f0115211 <test_calculate_required_frames+0x555>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01151ed:	83 ec 0c             	sub    $0xc,%esp
f01151f0:	ff 75 c4             	pushl  -0x3c(%ebp)
f01151f3:	ff 75 c8             	pushl  -0x38(%ebp)
f01151f6:	68 58 a6 13 f0       	push   $0xf013a658
f01151fb:	68 1e 06 00 00       	push   $0x61e
f0115200:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0115205:	e8 09 b2 fe ff       	call   f0100413 <_warn>
f011520a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011520d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115211:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115215:	74 04                	je     f011521b <test_calculate_required_frames+0x55f>
f0115217:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011521b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f011521f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115222:	c1 e0 0a             	shl    $0xa,%eax
f0115225:	83 ec 04             	sub    $0x4,%esp
f0115228:	50                   	push   %eax
f0115229:	6a 00                	push   $0x0
f011522b:	ff 75 d8             	pushl  -0x28(%ebp)
f011522e:	e8 22 3c ff ff       	call   f0108e55 <calculate_required_frames>
f0115233:	83 c4 10             	add    $0x10,%esp
f0115236:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)) - 2 - 1 - 2;
f0115239:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011523c:	c1 e0 0a             	shl    $0xa,%eax
f011523f:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115242:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0115249:	99                   	cltd   
f011524a:	f7 fb                	idiv   %ebx
f011524c:	89 c1                	mov    %eax,%ecx
f011524e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115251:	c1 e0 0a             	shl    $0xa,%eax
f0115254:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115257:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011525e:	99                   	cltd   
f011525f:	f7 fe                	idiv   %esi
f0115261:	01 c8                	add    %ecx,%eax
f0115263:	83 e8 05             	sub    $0x5,%eax
f0115266:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (res != expected)
f0115269:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011526c:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011526f:	74 24                	je     f0115295 <test_calculate_required_frames+0x5d9>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115271:	83 ec 0c             	sub    $0xc,%esp
f0115274:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115277:	ff 75 c8             	pushl  -0x38(%ebp)
f011527a:	68 58 a6 13 f0       	push   $0xf013a658
f011527f:	68 29 06 00 00       	push   $0x629
f0115284:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0115289:	e8 85 b1 fe ff       	call   f0100413 <_warn>
f011528e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115291:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115295:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115299:	74 04                	je     f011529f <test_calculate_required_frames+0x5e3>
f011529b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011529f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f01152a3:	83 ec 04             	sub    $0x4,%esp
f01152a6:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01152ac:	50                   	push   %eax
f01152ad:	68 f0 a6 13 f0       	push   $0xf013a6f0
f01152b2:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01152b8:	50                   	push   %eax
f01152b9:	e8 e8 c8 01 00       	call   f0131ba6 <strcconcat>
f01152be:	83 c4 10             	add    $0x10,%esp
f01152c1:	83 ec 0c             	sub    $0xc,%esp
f01152c4:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01152ca:	50                   	push   %eax
f01152cb:	e8 a0 ba fe ff       	call   f0100d70 <execute_command>
f01152d0:	83 c4 10             	add    $0x10,%esp

		//Test4
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f01152d3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01152d6:	89 c2                	mov    %eax,%edx
f01152d8:	01 d2                	add    %edx,%edx
f01152da:	01 d0                	add    %edx,%eax
f01152dc:	83 ec 04             	sub    $0x4,%esp
f01152df:	50                   	push   %eax
f01152e0:	68 00 18 00 00       	push   $0x1800
f01152e5:	ff 75 d8             	pushl  -0x28(%ebp)
f01152e8:	e8 68 3b ff ff       	call   f0108e55 <calculate_required_frames>
f01152ed:	83 c4 10             	add    $0x10,%esp
f01152f0:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f01152f3:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f01152fa:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01152fd:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115300:	74 24                	je     f0115326 <test_calculate_required_frames+0x66a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115302:	83 ec 0c             	sub    $0xc,%esp
f0115305:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115308:	ff 75 c8             	pushl  -0x38(%ebp)
f011530b:	68 58 a6 13 f0       	push   $0xf013a658
f0115310:	68 38 06 00 00       	push   $0x638
f0115315:	68 5e 8a 13 f0       	push   $0xf0138a5e
f011531a:	e8 f4 b0 fe ff       	call   f0100413 <_warn>
f011531f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115322:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115326:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011532a:	74 04                	je     f0115330 <test_calculate_required_frames+0x674>
f011532c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115330:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0115334:	83 ec 04             	sub    $0x4,%esp
f0115337:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f011533d:	50                   	push   %eax
f011533e:	68 c8 97 13 f0       	push   $0xf01397c8
f0115343:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115349:	50                   	push   %eax
f011534a:	e8 57 c8 01 00       	call   f0131ba6 <strcconcat>
f011534f:	83 c4 10             	add    $0x10,%esp
f0115352:	83 ec 0c             	sub    $0xc,%esp
f0115355:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f011535b:	50                   	push   %eax
f011535c:	e8 0f ba fe ff       	call   f0100d70 <execute_command>
f0115361:	83 c4 10             	add    $0x10,%esp

		//Test5
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f0115364:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115367:	89 d0                	mov    %edx,%eax
f0115369:	c1 e0 02             	shl    $0x2,%eax
f011536c:	01 d0                	add    %edx,%eax
f011536e:	01 c0                	add    %eax,%eax
f0115370:	83 ec 04             	sub    $0x4,%esp
f0115373:	50                   	push   %eax
f0115374:	68 00 00 40 00       	push   $0x400000
f0115379:	ff 75 d8             	pushl  -0x28(%ebp)
f011537c:	e8 d4 3a ff ff       	call   f0108e55 <calculate_required_frames>
f0115381:	83 c4 10             	add    $0x10,%esp
f0115384:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2561)
f0115387:	81 7d c8 01 0a 00 00 	cmpl   $0xa01,-0x38(%ebp)
f011538e:	74 26                	je     f01153b6 <test_calculate_required_frames+0x6fa>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f0115390:	83 ec 0c             	sub    $0xc,%esp
f0115393:	68 03 0a 00 00       	push   $0xa03
f0115398:	ff 75 c8             	pushl  -0x38(%ebp)
f011539b:	68 58 a6 13 f0       	push   $0xf013a658
f01153a0:	68 44 06 00 00       	push   $0x644
f01153a5:	68 5e 8a 13 f0       	push   $0xf0138a5e
f01153aa:	e8 64 b0 fe ff       	call   f0100413 <_warn>
f01153af:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01153b2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01153b6:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01153ba:	74 04                	je     f01153c0 <test_calculate_required_frames+0x704>
f01153bc:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01153c0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f01153c4:	83 ec 04             	sub    $0x4,%esp
f01153c7:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01153cd:	50                   	push   %eax
f01153ce:	68 d2 97 13 f0       	push   $0xf01397d2
f01153d3:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01153d9:	50                   	push   %eax
f01153da:	e8 c7 c7 01 00       	call   f0131ba6 <strcconcat>
f01153df:	83 c4 10             	add    $0x10,%esp
f01153e2:	83 ec 0c             	sub    $0xc,%esp
f01153e5:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01153eb:	50                   	push   %eax
f01153ec:	e8 7f b9 fe ff       	call   f0100d70 <execute_command>
f01153f1:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f01153f4:	83 ec 04             	sub    $0x4,%esp
f01153f7:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01153fd:	50                   	push   %eax
f01153fe:	68 f8 a6 13 f0       	push   $0xf013a6f8
f0115403:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115409:	50                   	push   %eax
f011540a:	e8 97 c7 01 00       	call   f0131ba6 <strcconcat>
f011540f:	83 c4 10             	add    $0x10,%esp
f0115412:	83 ec 0c             	sub    $0xc,%esp
f0115415:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f011541b:	50                   	push   %eax
f011541c:	e8 4f b9 fe ff       	call   f0100d70 <execute_command>
f0115421:	83 c4 10             	add    $0x10,%esp

		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f0115424:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115427:	01 c0                	add    %eax,%eax
f0115429:	83 ec 04             	sub    $0x4,%esp
f011542c:	50                   	push   %eax
f011542d:	68 00 00 70 00       	push   $0x700000
f0115432:	ff 75 d8             	pushl  -0x28(%ebp)
f0115435:	e8 1b 3a ff ff       	call   f0108e55 <calculate_required_frames>
f011543a:	83 c4 10             	add    $0x10,%esp
f011543d:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 510 ;
f0115440:	c7 45 c4 fe 01 00 00 	movl   $0x1fe,-0x3c(%ebp)
		if (res != expected)
f0115447:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011544a:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011544d:	74 24                	je     f0115473 <test_calculate_required_frames+0x7b7>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f011544f:	83 ec 0c             	sub    $0xc,%esp
f0115452:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115455:	ff 75 c8             	pushl  -0x38(%ebp)
f0115458:	68 58 a6 13 f0       	push   $0xf013a658
f011545d:	68 54 06 00 00       	push   $0x654
f0115462:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0115467:	e8 a7 af fe ff       	call   f0100413 <_warn>
f011546c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011546f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115473:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115477:	74 04                	je     f011547d <test_calculate_required_frames+0x7c1>
f0115479:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011547d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0115481:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115484:	83 ec 04             	sub    $0x4,%esp
f0115487:	50                   	push   %eax
f0115488:	68 ff ff 3f 00       	push   $0x3fffff
f011548d:	ff 75 d8             	pushl  -0x28(%ebp)
f0115490:	e8 c0 39 ff ff       	call   f0108e55 <calculate_required_frames>
f0115495:	83 c4 10             	add    $0x10,%esp
f0115498:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 3 ;
f011549b:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (res != expected)
f01154a2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01154a5:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01154a8:	74 24                	je     f01154ce <test_calculate_required_frames+0x812>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01154aa:	83 ec 0c             	sub    $0xc,%esp
f01154ad:	ff 75 c4             	pushl  -0x3c(%ebp)
f01154b0:	ff 75 c8             	pushl  -0x38(%ebp)
f01154b3:	68 58 a6 13 f0       	push   $0xf013a658
f01154b8:	68 5f 06 00 00       	push   $0x65f
f01154bd:	68 5e 8a 13 f0       	push   $0xf0138a5e
f01154c2:	e8 4c af fe ff       	call   f0100413 <_warn>
f01154c7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01154ca:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01154ce:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01154d2:	74 04                	je     f01154d8 <test_calculate_required_frames+0x81c>
f01154d4:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01154d8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f01154dc:	83 ec 0c             	sub    $0xc,%esp
f01154df:	68 83 97 13 f0       	push   $0xf0139783
f01154e4:	e8 25 b8 fe ff       	call   f0100d0e <cprintf>
f01154e9:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_required_frames: FINISHED. Evaluation = %d\n", eval);
f01154ec:	83 ec 08             	sub    $0x8,%esp
f01154ef:	ff 75 e4             	pushl  -0x1c(%ebp)
f01154f2:	68 04 a7 13 f0       	push   $0xf013a704
f01154f7:	e8 12 b8 fe ff       	call   f0100d0e <cprintf>
f01154fc:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01154ff:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0115503:	75 10                	jne    f0115515 <test_calculate_required_frames+0x859>
		cprintf("Congratulations!! test calculate_required_frames completed successfully.\n");
f0115505:	83 ec 0c             	sub    $0xc,%esp
f0115508:	68 44 a7 13 f0       	push   $0xf013a744
f011550d:	e8 fc b7 fe ff       	call   f0100d0e <cprintf>
f0115512:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0115515:	a1 a8 27 86 f0       	mov    0xf08627a8,%eax
f011551a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f011551d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0115520:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0115523:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0115528:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011552b:	5b                   	pop    %ebx
f011552c:	5e                   	pop    %esi
f011552d:	5f                   	pop    %edi
f011552e:	5d                   	pop    %ebp
f011552f:	c3                   	ret    

f0115530 <test_calculate_allocated_space>:

int test_calculate_allocated_space()
{
f0115530:	55                   	push   %ebp
f0115531:	89 e5                	mov    %esp,%ebp
f0115533:	57                   	push   %edi
f0115534:	56                   	push   %esi
f0115535:	53                   	push   %ebx
f0115536:	81 ec 0c 02 00 00    	sub    $0x20c,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f011553c:	8d 45 8e             	lea    -0x72(%ebp),%eax
f011553f:	bb f8 94 13 f0       	mov    $0xf01394f8,%ebx
f0115544:	ba 0f 00 00 00       	mov    $0xf,%edx
f0115549:	89 c7                	mov    %eax,%edi
f011554b:	89 de                	mov    %ebx,%esi
f011554d:	89 d1                	mov    %edx,%ecx
f011554f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115551:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0115554:	b9 23 00 00 00       	mov    $0x23,%ecx
f0115559:	b0 00                	mov    $0x0,%al
f011555b:	89 d7                	mov    %edx,%edi
f011555d:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f011555f:	6a 00                	push   $0x0
f0115561:	6a 0a                	push   $0xa
f0115563:	6a 14                	push   $0x14
f0115565:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0115568:	50                   	push   %eax
f0115569:	e8 3b 3b ff ff       	call   f01090a9 <env_create>
f011556e:	83 c4 10             	add    $0x10,%esp
f0115571:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0115574:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115577:	8b 40 5c             	mov    0x5c(%eax),%eax
f011557a:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f011557d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115580:	8b 40 60             	mov    0x60(%eax),%eax
f0115583:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0115586:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115589:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f011558c:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0115593:	75 70 20 
f0115596:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f011559d:	00 00 00 
f01155a0:	8d 55 82             	lea    -0x7e(%ebp),%edx
f01155a3:	b9 03 00 00 00       	mov    $0x3,%ecx
f01155a8:	b8 00 00 00 00       	mov    $0x0,%eax
f01155ad:	89 d7                	mov    %edx,%edi
f01155af:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f01155b1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01155b4:	8b 40 4c             	mov    0x4c(%eax),%eax
f01155b7:	83 ec 08             	sub    $0x8,%esp
f01155ba:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f01155c0:	52                   	push   %edx
f01155c1:	50                   	push   %eax
f01155c2:	e8 e7 c4 01 00       	call   f0131aae <ltostr>
f01155c7:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f01155ca:	83 ec 04             	sub    $0x4,%esp
f01155cd:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01155d3:	50                   	push   %eax
f01155d4:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f01155da:	50                   	push   %eax
f01155db:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f01155e1:	50                   	push   %eax
f01155e2:	e8 bf c5 01 00       	call   f0131ba6 <strcconcat>
f01155e7:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f01155ea:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f01155f1:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f01155f8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct = 1;
f01155ff:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected_num_pages;
	uint32 expected_num_tables;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;
	uint32 num_pages = 0;
f0115603:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011560a:	00 00 00 
	uint32 num_tables = 0;
f011560d:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115614:	00 00 00 
	ClearUserSpace(proc_directory);
f0115617:	83 ec 0c             	sub    $0xc,%esp
f011561a:	ff 75 d8             	pushl  -0x28(%ebp)
f011561d:	e8 8d 0e 00 00       	call   f01164af <ClearUserSpace>
f0115622:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0115625:	83 ec 0c             	sub    $0xc,%esp
f0115628:	68 24 a6 13 f0       	push   $0xf013a624
f011562d:	e8 dc b6 fe ff       	call   f0100d0e <cprintf>
f0115632:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0115635:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115638:	c1 e0 03             	shl    $0x3,%eax
f011563b:	89 c2                	mov    %eax,%edx
f011563d:	83 ec 0c             	sub    $0xc,%esp
f0115640:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115646:	50                   	push   %eax
f0115647:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011564d:	50                   	push   %eax
f011564e:	52                   	push   %edx
f011564f:	6a 00                	push   $0x0
f0115651:	ff 75 d8             	pushl  -0x28(%ebp)
f0115654:	e8 09 37 ff ff       	call   f0108d62 <calculate_allocated_space>
f0115659:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011565c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115662:	85 c0                	test   %eax,%eax
f0115664:	74 27                	je     f011568d <test_calculate_allocated_space+0x15d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115666:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011566c:	83 ec 0c             	sub    $0xc,%esp
f011566f:	6a 00                	push   $0x0
f0115671:	50                   	push   %eax
f0115672:	68 90 a7 13 f0       	push   $0xf013a790
f0115677:	68 94 06 00 00       	push   $0x694
f011567c:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0115681:	e8 8d ad fe ff       	call   f0100413 <_warn>
f0115686:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115689:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f011568d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115693:	85 c0                	test   %eax,%eax
f0115695:	74 27                	je     f01156be <test_calculate_allocated_space+0x18e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115697:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011569d:	83 ec 0c             	sub    $0xc,%esp
f01156a0:	6a 00                	push   $0x0
f01156a2:	50                   	push   %eax
f01156a3:	68 f0 a7 13 f0       	push   $0xf013a7f0
f01156a8:	68 99 06 00 00       	push   $0x699
f01156ad:	68 5e 8a 13 f0       	push   $0xf0138a5e
f01156b2:	e8 5c ad fe ff       	call   f0100413 <_warn>
f01156b7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01156ba:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01156be:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01156c2:	74 04                	je     f01156c8 <test_calculate_allocated_space+0x198>
f01156c4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01156c8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		num_tables = 0;
f01156cc:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01156d3:	00 00 00 
		num_pages = 0;
f01156d6:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01156dd:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+4*mega, &num_tables, &num_pages);
f01156e0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01156e3:	c1 e0 02             	shl    $0x2,%eax
f01156e6:	89 c2                	mov    %eax,%edx
f01156e8:	83 ec 0c             	sub    $0xc,%esp
f01156eb:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01156f1:	50                   	push   %eax
f01156f2:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01156f8:	50                   	push   %eax
f01156f9:	52                   	push   %edx
f01156fa:	6a 00                	push   $0x0
f01156fc:	ff 75 d8             	pushl  -0x28(%ebp)
f01156ff:	e8 5e 36 ff ff       	call   f0108d62 <calculate_allocated_space>
f0115704:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115707:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011570d:	85 c0                	test   %eax,%eax
f011570f:	74 27                	je     f0115738 <test_calculate_allocated_space+0x208>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115711:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115717:	83 ec 0c             	sub    $0xc,%esp
f011571a:	6a 00                	push   $0x0
f011571c:	50                   	push   %eax
f011571d:	68 90 a7 13 f0       	push   $0xf013a790
f0115722:	68 a5 06 00 00       	push   $0x6a5
f0115727:	68 5e 8a 13 f0       	push   $0xf0138a5e
f011572c:	e8 e2 ac fe ff       	call   f0100413 <_warn>
f0115731:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115734:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115738:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011573e:	85 c0                	test   %eax,%eax
f0115740:	74 27                	je     f0115769 <test_calculate_allocated_space+0x239>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115742:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115748:	83 ec 0c             	sub    $0xc,%esp
f011574b:	6a 00                	push   $0x0
f011574d:	50                   	push   %eax
f011574e:	68 f0 a7 13 f0       	push   $0xf013a7f0
f0115753:	68 aa 06 00 00       	push   $0x6aa
f0115758:	68 5e 8a 13 f0       	push   $0xf0138a5e
f011575d:	e8 b1 ac fe ff       	call   f0100413 <_warn>
f0115762:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115765:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115769:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011576d:	74 04                	je     f0115773 <test_calculate_allocated_space+0x243>
f011576f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115773:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0115777:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011577e:	00 00 00 
		num_pages = 0;
f0115781:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115788:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f011578b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011578e:	c1 e0 0a             	shl    $0xa,%eax
f0115791:	89 c2                	mov    %eax,%edx
f0115793:	83 ec 0c             	sub    $0xc,%esp
f0115796:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011579c:	50                   	push   %eax
f011579d:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01157a3:	50                   	push   %eax
f01157a4:	52                   	push   %edx
f01157a5:	6a 00                	push   $0x0
f01157a7:	ff 75 d8             	pushl  -0x28(%ebp)
f01157aa:	e8 b3 35 ff ff       	call   f0108d62 <calculate_allocated_space>
f01157af:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01157b2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01157b8:	85 c0                	test   %eax,%eax
f01157ba:	74 27                	je     f01157e3 <test_calculate_allocated_space+0x2b3>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01157bc:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01157c2:	83 ec 0c             	sub    $0xc,%esp
f01157c5:	6a 00                	push   $0x0
f01157c7:	50                   	push   %eax
f01157c8:	68 90 a7 13 f0       	push   $0xf013a790
f01157cd:	68 b6 06 00 00       	push   $0x6b6
f01157d2:	68 5e 8a 13 f0       	push   $0xf0138a5e
f01157d7:	e8 37 ac fe ff       	call   f0100413 <_warn>
f01157dc:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01157df:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01157e3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01157e9:	85 c0                	test   %eax,%eax
f01157eb:	74 27                	je     f0115814 <test_calculate_allocated_space+0x2e4>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01157ed:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01157f3:	83 ec 0c             	sub    $0xc,%esp
f01157f6:	6a 00                	push   $0x0
f01157f8:	50                   	push   %eax
f01157f9:	68 f0 a7 13 f0       	push   $0xf013a7f0
f01157fe:	68 bb 06 00 00       	push   $0x6bb
f0115803:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0115808:	e8 06 ac fe ff       	call   f0100413 <_warn>
f011580d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115810:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115814:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115818:	74 04                	je     f011581e <test_calculate_allocated_space+0x2ee>
f011581a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011581e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test4
		num_tables = 0;
f0115822:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115829:	00 00 00 
		num_pages = 0;
f011582c:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115833:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1000, 0x1000+6*kilo, &num_tables, &num_pages);
f0115836:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115839:	89 d0                	mov    %edx,%eax
f011583b:	01 c0                	add    %eax,%eax
f011583d:	01 d0                	add    %edx,%eax
f011583f:	01 c0                	add    %eax,%eax
f0115841:	05 00 10 00 00       	add    $0x1000,%eax
f0115846:	89 c2                	mov    %eax,%edx
f0115848:	83 ec 0c             	sub    $0xc,%esp
f011584b:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115851:	50                   	push   %eax
f0115852:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115858:	50                   	push   %eax
f0115859:	52                   	push   %edx
f011585a:	68 00 10 00 00       	push   $0x1000
f011585f:	ff 75 d8             	pushl  -0x28(%ebp)
f0115862:	e8 fb 34 ff ff       	call   f0108d62 <calculate_allocated_space>
f0115867:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011586a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115870:	85 c0                	test   %eax,%eax
f0115872:	74 27                	je     f011589b <test_calculate_allocated_space+0x36b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115874:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011587a:	83 ec 0c             	sub    $0xc,%esp
f011587d:	6a 00                	push   $0x0
f011587f:	50                   	push   %eax
f0115880:	68 90 a7 13 f0       	push   $0xf013a790
f0115885:	68 c8 06 00 00       	push   $0x6c8
f011588a:	68 5e 8a 13 f0       	push   $0xf0138a5e
f011588f:	e8 7f ab fe ff       	call   f0100413 <_warn>
f0115894:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115897:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f011589b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01158a1:	85 c0                	test   %eax,%eax
f01158a3:	74 27                	je     f01158cc <test_calculate_allocated_space+0x39c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01158a5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01158ab:	83 ec 0c             	sub    $0xc,%esp
f01158ae:	6a 00                	push   $0x0
f01158b0:	50                   	push   %eax
f01158b1:	68 f0 a7 13 f0       	push   $0xf013a7f0
f01158b6:	68 cd 06 00 00       	push   $0x6cd
f01158bb:	68 5e 8a 13 f0       	push   $0xf0138a5e
f01158c0:	e8 4e ab fe ff       	call   f0100413 <_warn>
f01158c5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01158c8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01158cc:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01158d0:	74 04                	je     f01158d6 <test_calculate_allocated_space+0x3a6>
f01158d2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01158d6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		num_tables = 0;
f01158da:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01158e1:	00 00 00 
		num_pages = 0;
f01158e4:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01158eb:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f01158ee:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01158f1:	89 c2                	mov    %eax,%edx
f01158f3:	01 d2                	add    %edx,%edx
f01158f5:	01 d0                	add    %edx,%eax
f01158f7:	05 00 18 00 00       	add    $0x1800,%eax
f01158fc:	89 c2                	mov    %eax,%edx
f01158fe:	83 ec 0c             	sub    $0xc,%esp
f0115901:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115907:	50                   	push   %eax
f0115908:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011590e:	50                   	push   %eax
f011590f:	52                   	push   %edx
f0115910:	68 00 18 00 00       	push   $0x1800
f0115915:	ff 75 d8             	pushl  -0x28(%ebp)
f0115918:	e8 45 34 ff ff       	call   f0108d62 <calculate_allocated_space>
f011591d:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115920:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115926:	85 c0                	test   %eax,%eax
f0115928:	74 27                	je     f0115951 <test_calculate_allocated_space+0x421>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f011592a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115930:	83 ec 0c             	sub    $0xc,%esp
f0115933:	6a 00                	push   $0x0
f0115935:	50                   	push   %eax
f0115936:	68 90 a7 13 f0       	push   $0xf013a790
f011593b:	68 d9 06 00 00       	push   $0x6d9
f0115940:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0115945:	e8 c9 aa fe ff       	call   f0100413 <_warn>
f011594a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011594d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115951:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115957:	85 c0                	test   %eax,%eax
f0115959:	74 27                	je     f0115982 <test_calculate_allocated_space+0x452>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f011595b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115961:	83 ec 0c             	sub    $0xc,%esp
f0115964:	6a 00                	push   $0x0
f0115966:	50                   	push   %eax
f0115967:	68 f0 a7 13 f0       	push   $0xf013a7f0
f011596c:	68 de 06 00 00       	push   $0x6de
f0115971:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0115976:	e8 98 aa fe ff       	call   f0100413 <_warn>
f011597b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011597e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115982:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115986:	74 04                	je     f011598c <test_calculate_allocated_space+0x45c>
f0115988:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011598c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		num_tables = 0;
f0115990:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115997:	00 00 00 
		num_pages = 0;
f011599a:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01159a1:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f01159a4:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01159a7:	89 d0                	mov    %edx,%eax
f01159a9:	c1 e0 02             	shl    $0x2,%eax
f01159ac:	01 d0                	add    %edx,%eax
f01159ae:	01 c0                	add    %eax,%eax
f01159b0:	05 00 00 40 00       	add    $0x400000,%eax
f01159b5:	89 c2                	mov    %eax,%edx
f01159b7:	83 ec 0c             	sub    $0xc,%esp
f01159ba:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01159c0:	50                   	push   %eax
f01159c1:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01159c7:	50                   	push   %eax
f01159c8:	52                   	push   %edx
f01159c9:	68 00 00 40 00       	push   $0x400000
f01159ce:	ff 75 d8             	pushl  -0x28(%ebp)
f01159d1:	e8 8c 33 ff ff       	call   f0108d62 <calculate_allocated_space>
f01159d6:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01159d9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01159df:	85 c0                	test   %eax,%eax
f01159e1:	74 27                	je     f0115a0a <test_calculate_allocated_space+0x4da>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01159e3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01159e9:	83 ec 0c             	sub    $0xc,%esp
f01159ec:	6a 00                	push   $0x0
f01159ee:	50                   	push   %eax
f01159ef:	68 90 a7 13 f0       	push   $0xf013a790
f01159f4:	68 ea 06 00 00       	push   $0x6ea
f01159f9:	68 5e 8a 13 f0       	push   $0xf0138a5e
f01159fe:	e8 10 aa fe ff       	call   f0100413 <_warn>
f0115a03:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115a06:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115a0a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115a10:	85 c0                	test   %eax,%eax
f0115a12:	74 27                	je     f0115a3b <test_calculate_allocated_space+0x50b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115a14:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115a1a:	83 ec 0c             	sub    $0xc,%esp
f0115a1d:	6a 00                	push   $0x0
f0115a1f:	50                   	push   %eax
f0115a20:	68 f0 a7 13 f0       	push   $0xf013a7f0
f0115a25:	68 ef 06 00 00       	push   $0x6ef
f0115a2a:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0115a2f:	e8 df a9 fe ff       	call   f0100413 <_warn>
f0115a34:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115a37:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115a3b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115a3f:	74 04                	je     f0115a45 <test_calculate_allocated_space+0x515>
f0115a41:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115a45:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test7
		num_tables = 0;
f0115a49:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115a50:	00 00 00 
		num_pages = 0;
f0115a53:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115a5a:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0115a5d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115a60:	05 00 00 38 00       	add    $0x380000,%eax
f0115a65:	01 c0                	add    %eax,%eax
f0115a67:	89 c2                	mov    %eax,%edx
f0115a69:	83 ec 0c             	sub    $0xc,%esp
f0115a6c:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115a72:	50                   	push   %eax
f0115a73:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115a79:	50                   	push   %eax
f0115a7a:	52                   	push   %edx
f0115a7b:	68 00 00 70 00       	push   $0x700000
f0115a80:	ff 75 d8             	pushl  -0x28(%ebp)
f0115a83:	e8 da 32 ff ff       	call   f0108d62 <calculate_allocated_space>
f0115a88:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115a8b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115a91:	85 c0                	test   %eax,%eax
f0115a93:	74 27                	je     f0115abc <test_calculate_allocated_space+0x58c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115a95:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115a9b:	83 ec 0c             	sub    $0xc,%esp
f0115a9e:	6a 00                	push   $0x0
f0115aa0:	50                   	push   %eax
f0115aa1:	68 90 a7 13 f0       	push   $0xf013a790
f0115aa6:	68 fc 06 00 00       	push   $0x6fc
f0115aab:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0115ab0:	e8 5e a9 fe ff       	call   f0100413 <_warn>
f0115ab5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115ab8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115abc:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115ac2:	85 c0                	test   %eax,%eax
f0115ac4:	74 27                	je     f0115aed <test_calculate_allocated_space+0x5bd>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115ac6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115acc:	83 ec 0c             	sub    $0xc,%esp
f0115acf:	6a 00                	push   $0x0
f0115ad1:	50                   	push   %eax
f0115ad2:	68 f0 a7 13 f0       	push   $0xf013a7f0
f0115ad7:	68 01 07 00 00       	push   $0x701
f0115adc:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0115ae1:	e8 2d a9 fe ff       	call   f0100413 <_warn>
f0115ae6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115ae9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115aed:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115af1:	74 04                	je     f0115af7 <test_calculate_allocated_space+0x5c7>
f0115af3:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115af7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		num_tables = 0;
f0115afb:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115b02:	00 00 00 
		num_pages = 0;
f0115b05:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115b0c:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0115b0f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115b12:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0115b17:	89 c2                	mov    %eax,%edx
f0115b19:	83 ec 0c             	sub    $0xc,%esp
f0115b1c:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115b22:	50                   	push   %eax
f0115b23:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115b29:	50                   	push   %eax
f0115b2a:	52                   	push   %edx
f0115b2b:	68 ff ff 3f 00       	push   $0x3fffff
f0115b30:	ff 75 d8             	pushl  -0x28(%ebp)
f0115b33:	e8 2a 32 ff ff       	call   f0108d62 <calculate_allocated_space>
f0115b38:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115b3b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115b41:	85 c0                	test   %eax,%eax
f0115b43:	74 27                	je     f0115b6c <test_calculate_allocated_space+0x63c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115b45:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115b4b:	83 ec 0c             	sub    $0xc,%esp
f0115b4e:	6a 00                	push   $0x0
f0115b50:	50                   	push   %eax
f0115b51:	68 90 a7 13 f0       	push   $0xf013a790
f0115b56:	68 0d 07 00 00       	push   $0x70d
f0115b5b:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0115b60:	e8 ae a8 fe ff       	call   f0100413 <_warn>
f0115b65:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115b68:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115b6c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115b72:	85 c0                	test   %eax,%eax
f0115b74:	74 27                	je     f0115b9d <test_calculate_allocated_space+0x66d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115b76:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115b7c:	83 ec 0c             	sub    $0xc,%esp
f0115b7f:	6a 00                	push   $0x0
f0115b81:	50                   	push   %eax
f0115b82:	68 f0 a7 13 f0       	push   $0xf013a7f0
f0115b87:	68 12 07 00 00       	push   $0x712
f0115b8c:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0115b91:	e8 7d a8 fe ff       	call   f0100413 <_warn>
f0115b96:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115b99:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115b9d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115ba1:	74 04                	je     f0115ba7 <test_calculate_allocated_space+0x677>
f0115ba3:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115ba7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0115bab:	83 ec 0c             	sub    $0xc,%esp
f0115bae:	68 a9 a1 13 f0       	push   $0xf013a1a9
f0115bb3:	e8 56 b1 fe ff       	call   f0100d0e <cprintf>
f0115bb8:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f0115bbb:	83 ec 0c             	sub    $0xc,%esp
f0115bbe:	68 b0 a6 13 f0       	push   $0xf013a6b0
f0115bc3:	e8 46 b1 fe ff       	call   f0100d0e <cprintf>
f0115bc8:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0115bcb:	83 ec 04             	sub    $0x4,%esp
f0115bce:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0115bd4:	50                   	push   %eax
f0115bd5:	68 62 95 13 f0       	push   $0xf0139562
f0115bda:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115be0:	50                   	push   %eax
f0115be1:	e8 c0 bf 01 00       	call   f0131ba6 <strcconcat>
f0115be6:	83 c4 10             	add    $0x10,%esp
f0115be9:	83 ec 0c             	sub    $0xc,%esp
f0115bec:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0115bf2:	50                   	push   %eax
f0115bf3:	e8 78 b1 fe ff       	call   f0100d70 <execute_command>
f0115bf8:	83 c4 10             	add    $0x10,%esp

		num_tables = 0;
f0115bfb:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115c02:	00 00 00 
		num_pages = 0;
f0115c05:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115c0c:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0115c0f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115c12:	c1 e0 03             	shl    $0x3,%eax
f0115c15:	89 c2                	mov    %eax,%edx
f0115c17:	83 ec 0c             	sub    $0xc,%esp
f0115c1a:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115c20:	50                   	push   %eax
f0115c21:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115c27:	50                   	push   %eax
f0115c28:	52                   	push   %edx
f0115c29:	6a 00                	push   $0x0
f0115c2b:	ff 75 d8             	pushl  -0x28(%ebp)
f0115c2e:	e8 2f 31 ff ff       	call   f0108d62 <calculate_allocated_space>
f0115c33:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0115c36:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1 ;
f0115c3d:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115c44:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115c4a:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115c4d:	74 28                	je     f0115c77 <test_calculate_allocated_space+0x747>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115c4f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115c55:	83 ec 0c             	sub    $0xc,%esp
f0115c58:	ff 75 c8             	pushl  -0x38(%ebp)
f0115c5b:	50                   	push   %eax
f0115c5c:	68 90 a7 13 f0       	push   $0xf013a790
f0115c61:	68 29 07 00 00       	push   $0x729
f0115c66:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0115c6b:	e8 a3 a7 fe ff       	call   f0100413 <_warn>
f0115c70:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115c73:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115c77:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115c7d:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115c80:	74 28                	je     f0115caa <test_calculate_allocated_space+0x77a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115c82:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115c88:	83 ec 0c             	sub    $0xc,%esp
f0115c8b:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115c8e:	50                   	push   %eax
f0115c8f:	68 f0 a7 13 f0       	push   $0xf013a7f0
f0115c94:	68 2e 07 00 00       	push   $0x72e
f0115c99:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0115c9e:	e8 70 a7 fe ff       	call   f0100413 <_warn>
f0115ca3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115ca6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115caa:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115cae:	74 04                	je     f0115cb4 <test_calculate_allocated_space+0x784>
f0115cb0:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115cb4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f0115cb8:	83 ec 04             	sub    $0x4,%esp
f0115cbb:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115cc1:	50                   	push   %eax
f0115cc2:	68 6f 95 13 f0       	push   $0xf013956f
f0115cc7:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115ccd:	50                   	push   %eax
f0115cce:	e8 d3 be 01 00       	call   f0131ba6 <strcconcat>
f0115cd3:	83 c4 10             	add    $0x10,%esp
f0115cd6:	83 ec 0c             	sub    $0xc,%esp
f0115cd9:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115cdf:	50                   	push   %eax
f0115ce0:	e8 8b b0 fe ff       	call   f0100d70 <execute_command>
f0115ce5:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f0115ce8:	83 ec 04             	sub    $0x4,%esp
f0115ceb:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115cf1:	50                   	push   %eax
f0115cf2:	68 e4 a6 13 f0       	push   $0xf013a6e4
f0115cf7:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115cfd:	50                   	push   %eax
f0115cfe:	e8 a3 be 01 00       	call   f0131ba6 <strcconcat>
f0115d03:	83 c4 10             	add    $0x10,%esp
f0115d06:	83 ec 0c             	sub    $0xc,%esp
f0115d09:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115d0f:	50                   	push   %eax
f0115d10:	e8 5b b0 fe ff       	call   f0100d70 <execute_command>
f0115d15:	83 c4 10             	add    $0x10,%esp

		//Test2
		num_tables = 0;
f0115d18:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115d1f:	00 00 00 
		num_pages = 0;
f0115d22:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115d29:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*mega, &num_tables, &num_pages);
f0115d2c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115d2f:	c1 e0 03             	shl    $0x3,%eax
f0115d32:	89 c2                	mov    %eax,%edx
f0115d34:	83 ec 0c             	sub    $0xc,%esp
f0115d37:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115d3d:	50                   	push   %eax
f0115d3e:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115d44:	50                   	push   %eax
f0115d45:	52                   	push   %edx
f0115d46:	6a 00                	push   $0x0
f0115d48:	ff 75 d8             	pushl  -0x28(%ebp)
f0115d4b:	e8 12 30 ff ff       	call   f0108d62 <calculate_allocated_space>
f0115d50:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0115d53:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 2 ;
f0115d5a:	c7 45 c4 02 00 00 00 	movl   $0x2,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115d61:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115d67:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115d6a:	74 28                	je     f0115d94 <test_calculate_allocated_space+0x864>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115d6c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115d72:	83 ec 0c             	sub    $0xc,%esp
f0115d75:	ff 75 c8             	pushl  -0x38(%ebp)
f0115d78:	50                   	push   %eax
f0115d79:	68 90 a7 13 f0       	push   $0xf013a790
f0115d7e:	68 3f 07 00 00       	push   $0x73f
f0115d83:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0115d88:	e8 86 a6 fe ff       	call   f0100413 <_warn>
f0115d8d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115d90:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115d94:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115d9a:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115d9d:	74 28                	je     f0115dc7 <test_calculate_allocated_space+0x897>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115d9f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115da5:	83 ec 0c             	sub    $0xc,%esp
f0115da8:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115dab:	50                   	push   %eax
f0115dac:	68 f0 a7 13 f0       	push   $0xf013a7f0
f0115db1:	68 44 07 00 00       	push   $0x744
f0115db6:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0115dbb:	e8 53 a6 fe ff       	call   f0100413 <_warn>
f0115dc0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115dc3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115dc7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115dcb:	74 04                	je     f0115dd1 <test_calculate_allocated_space+0x8a1>
f0115dcd:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115dd1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0115dd5:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115ddc:	00 00 00 
		num_pages = 0;
f0115ddf:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115de6:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0115de9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115dec:	c1 e0 0a             	shl    $0xa,%eax
f0115def:	89 c2                	mov    %eax,%edx
f0115df1:	83 ec 0c             	sub    $0xc,%esp
f0115df4:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115dfa:	50                   	push   %eax
f0115dfb:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115e01:	50                   	push   %eax
f0115e02:	52                   	push   %edx
f0115e03:	6a 00                	push   $0x0
f0115e05:	ff 75 d8             	pushl  -0x28(%ebp)
f0115e08:	e8 55 2f ff ff       	call   f0108d62 <calculate_allocated_space>
f0115e0d:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 + 1;
f0115e10:	c7 45 c8 02 00 00 00 	movl   $0x2,-0x38(%ebp)
		expected_num_pages = 1 + 1 + 1;
f0115e17:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115e1e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115e24:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115e27:	74 28                	je     f0115e51 <test_calculate_allocated_space+0x921>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115e29:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115e2f:	83 ec 0c             	sub    $0xc,%esp
f0115e32:	ff 75 c8             	pushl  -0x38(%ebp)
f0115e35:	50                   	push   %eax
f0115e36:	68 90 a7 13 f0       	push   $0xf013a790
f0115e3b:	68 52 07 00 00       	push   $0x752
f0115e40:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0115e45:	e8 c9 a5 fe ff       	call   f0100413 <_warn>
f0115e4a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115e4d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115e51:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115e57:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115e5a:	74 28                	je     f0115e84 <test_calculate_allocated_space+0x954>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115e5c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115e62:	83 ec 0c             	sub    $0xc,%esp
f0115e65:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115e68:	50                   	push   %eax
f0115e69:	68 f0 a7 13 f0       	push   $0xf013a7f0
f0115e6e:	68 57 07 00 00       	push   $0x757
f0115e73:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0115e78:	e8 96 a5 fe ff       	call   f0100413 <_warn>
f0115e7d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115e80:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115e84:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115e88:	74 04                	je     f0115e8e <test_calculate_allocated_space+0x95e>
f0115e8a:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115e8e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0115e92:	83 ec 04             	sub    $0x4,%esp
f0115e95:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115e9b:	50                   	push   %eax
f0115e9c:	68 f0 a6 13 f0       	push   $0xf013a6f0
f0115ea1:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115ea7:	50                   	push   %eax
f0115ea8:	e8 f9 bc 01 00       	call   f0131ba6 <strcconcat>
f0115ead:	83 c4 10             	add    $0x10,%esp
f0115eb0:	83 ec 0c             	sub    $0xc,%esp
f0115eb3:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115eb9:	50                   	push   %eax
f0115eba:	e8 b1 ae fe ff       	call   f0100d70 <execute_command>
f0115ebf:	83 c4 10             	add    $0x10,%esp

		//Test4
		num_tables = 0;
f0115ec2:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115ec9:	00 00 00 
		num_pages = 0;
f0115ecc:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115ed3:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0115ed6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115ed9:	89 c2                	mov    %eax,%edx
f0115edb:	01 d2                	add    %edx,%edx
f0115edd:	01 d0                	add    %edx,%eax
f0115edf:	05 00 18 00 00       	add    $0x1800,%eax
f0115ee4:	89 c2                	mov    %eax,%edx
f0115ee6:	83 ec 0c             	sub    $0xc,%esp
f0115ee9:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115eef:	50                   	push   %eax
f0115ef0:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115ef6:	50                   	push   %eax
f0115ef7:	52                   	push   %edx
f0115ef8:	68 00 18 00 00       	push   $0x1800
f0115efd:	ff 75 d8             	pushl  -0x28(%ebp)
f0115f00:	e8 5d 2e ff ff       	call   f0108d62 <calculate_allocated_space>
f0115f05:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0115f08:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0115f0f:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115f16:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115f1c:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115f1f:	74 28                	je     f0115f49 <test_calculate_allocated_space+0xa19>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115f21:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115f27:	83 ec 0c             	sub    $0xc,%esp
f0115f2a:	ff 75 c8             	pushl  -0x38(%ebp)
f0115f2d:	50                   	push   %eax
f0115f2e:	68 90 a7 13 f0       	push   $0xf013a790
f0115f33:	68 68 07 00 00       	push   $0x768
f0115f38:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0115f3d:	e8 d1 a4 fe ff       	call   f0100413 <_warn>
f0115f42:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115f45:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115f49:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115f4f:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115f52:	74 28                	je     f0115f7c <test_calculate_allocated_space+0xa4c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115f54:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115f5a:	83 ec 0c             	sub    $0xc,%esp
f0115f5d:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115f60:	50                   	push   %eax
f0115f61:	68 f0 a7 13 f0       	push   $0xf013a7f0
f0115f66:	68 6d 07 00 00       	push   $0x76d
f0115f6b:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0115f70:	e8 9e a4 fe ff       	call   f0100413 <_warn>
f0115f75:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115f78:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115f7c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115f80:	74 04                	je     f0115f86 <test_calculate_allocated_space+0xa56>
f0115f82:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115f86:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0115f8a:	83 ec 04             	sub    $0x4,%esp
f0115f8d:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115f93:	50                   	push   %eax
f0115f94:	68 c8 97 13 f0       	push   $0xf01397c8
f0115f99:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115f9f:	50                   	push   %eax
f0115fa0:	e8 01 bc 01 00       	call   f0131ba6 <strcconcat>
f0115fa5:	83 c4 10             	add    $0x10,%esp
f0115fa8:	83 ec 0c             	sub    $0xc,%esp
f0115fab:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115fb1:	50                   	push   %eax
f0115fb2:	e8 b9 ad fe ff       	call   f0100d70 <execute_command>
f0115fb7:	83 c4 10             	add    $0x10,%esp

		//Test5
		num_tables = 0;
f0115fba:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115fc1:	00 00 00 
		num_pages = 0;
f0115fc4:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115fcb:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0115fce:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115fd1:	89 d0                	mov    %edx,%eax
f0115fd3:	c1 e0 02             	shl    $0x2,%eax
f0115fd6:	01 d0                	add    %edx,%eax
f0115fd8:	01 c0                	add    %eax,%eax
f0115fda:	05 00 00 40 00       	add    $0x400000,%eax
f0115fdf:	89 c2                	mov    %eax,%edx
f0115fe1:	83 ec 0c             	sub    $0xc,%esp
f0115fe4:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115fea:	50                   	push   %eax
f0115feb:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115ff1:	50                   	push   %eax
f0115ff2:	52                   	push   %edx
f0115ff3:	68 00 00 40 00       	push   $0x400000
f0115ff8:	ff 75 d8             	pushl  -0x28(%ebp)
f0115ffb:	e8 62 2d ff ff       	call   f0108d62 <calculate_allocated_space>
f0116000:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0116003:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f011600a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0116011:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116017:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011601a:	74 28                	je     f0116044 <test_calculate_allocated_space+0xb14>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f011601c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116022:	83 ec 0c             	sub    $0xc,%esp
f0116025:	ff 75 c8             	pushl  -0x38(%ebp)
f0116028:	50                   	push   %eax
f0116029:	68 90 a7 13 f0       	push   $0xf013a790
f011602e:	68 7d 07 00 00       	push   $0x77d
f0116033:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0116038:	e8 d6 a3 fe ff       	call   f0100413 <_warn>
f011603d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116040:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0116044:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011604a:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011604d:	74 28                	je     f0116077 <test_calculate_allocated_space+0xb47>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f011604f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116055:	83 ec 0c             	sub    $0xc,%esp
f0116058:	ff 75 c4             	pushl  -0x3c(%ebp)
f011605b:	50                   	push   %eax
f011605c:	68 f0 a7 13 f0       	push   $0xf013a7f0
f0116061:	68 82 07 00 00       	push   $0x782
f0116066:	68 5e 8a 13 f0       	push   $0xf0138a5e
f011606b:	e8 a3 a3 fe ff       	call   f0100413 <_warn>
f0116070:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116073:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116077:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011607b:	74 04                	je     f0116081 <test_calculate_allocated_space+0xb51>
f011607d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116081:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0116085:	83 ec 04             	sub    $0x4,%esp
f0116088:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f011608e:	50                   	push   %eax
f011608f:	68 d2 97 13 f0       	push   $0xf01397d2
f0116094:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011609a:	50                   	push   %eax
f011609b:	e8 06 bb 01 00       	call   f0131ba6 <strcconcat>
f01160a0:	83 c4 10             	add    $0x10,%esp
f01160a3:	83 ec 0c             	sub    $0xc,%esp
f01160a6:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01160ac:	50                   	push   %eax
f01160ad:	e8 be ac fe ff       	call   f0100d70 <execute_command>
f01160b2:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f01160b5:	83 ec 04             	sub    $0x4,%esp
f01160b8:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01160be:	50                   	push   %eax
f01160bf:	68 f8 a6 13 f0       	push   $0xf013a6f8
f01160c4:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01160ca:	50                   	push   %eax
f01160cb:	e8 d6 ba 01 00       	call   f0131ba6 <strcconcat>
f01160d0:	83 c4 10             	add    $0x10,%esp
f01160d3:	83 ec 0c             	sub    $0xc,%esp
f01160d6:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01160dc:	50                   	push   %eax
f01160dd:	e8 8e ac fe ff       	call   f0100d70 <execute_command>
f01160e2:	83 c4 10             	add    $0x10,%esp

		//Test6
		num_tables = 0;
f01160e5:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01160ec:	00 00 00 
		num_pages = 0;
f01160ef:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01160f6:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f01160f9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01160fc:	05 00 00 38 00       	add    $0x380000,%eax
f0116101:	01 c0                	add    %eax,%eax
f0116103:	89 c2                	mov    %eax,%edx
f0116105:	83 ec 0c             	sub    $0xc,%esp
f0116108:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011610e:	50                   	push   %eax
f011610f:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0116115:	50                   	push   %eax
f0116116:	52                   	push   %edx
f0116117:	68 00 00 70 00       	push   $0x700000
f011611c:	ff 75 d8             	pushl  -0x28(%ebp)
f011611f:	e8 3e 2c ff ff       	call   f0108d62 <calculate_allocated_space>
f0116124:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0116127:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 3;
f011612e:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0116135:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011613b:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011613e:	74 28                	je     f0116168 <test_calculate_allocated_space+0xc38>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116140:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116146:	83 ec 0c             	sub    $0xc,%esp
f0116149:	ff 75 c8             	pushl  -0x38(%ebp)
f011614c:	50                   	push   %eax
f011614d:	68 90 a7 13 f0       	push   $0xf013a790
f0116152:	68 94 07 00 00       	push   $0x794
f0116157:	68 5e 8a 13 f0       	push   $0xf0138a5e
f011615c:	e8 b2 a2 fe ff       	call   f0100413 <_warn>
f0116161:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116164:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0116168:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011616e:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116171:	74 28                	je     f011619b <test_calculate_allocated_space+0xc6b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116173:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116179:	83 ec 0c             	sub    $0xc,%esp
f011617c:	ff 75 c4             	pushl  -0x3c(%ebp)
f011617f:	50                   	push   %eax
f0116180:	68 f0 a7 13 f0       	push   $0xf013a7f0
f0116185:	68 99 07 00 00       	push   $0x799
f011618a:	68 5e 8a 13 f0       	push   $0xf0138a5e
f011618f:	e8 7f a2 fe ff       	call   f0100413 <_warn>
f0116194:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116197:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011619b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011619f:	74 04                	je     f01161a5 <test_calculate_allocated_space+0xc75>
f01161a1:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01161a5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test7
		num_tables = 0;
f01161a9:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01161b0:	00 00 00 
		num_pages = 0;
f01161b3:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01161ba:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f01161bd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01161c0:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f01161c5:	89 c2                	mov    %eax,%edx
f01161c7:	83 ec 0c             	sub    $0xc,%esp
f01161ca:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01161d0:	50                   	push   %eax
f01161d1:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01161d7:	50                   	push   %eax
f01161d8:	52                   	push   %edx
f01161d9:	68 ff ff 3f 00       	push   $0x3fffff
f01161de:	ff 75 d8             	pushl  -0x28(%ebp)
f01161e1:	e8 7c 2b ff ff       	call   f0108d62 <calculate_allocated_space>
f01161e6:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01161e9:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 0;
f01161f0:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01161f7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01161fd:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116200:	74 28                	je     f011622a <test_calculate_allocated_space+0xcfa>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116202:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116208:	83 ec 0c             	sub    $0xc,%esp
f011620b:	ff 75 c8             	pushl  -0x38(%ebp)
f011620e:	50                   	push   %eax
f011620f:	68 90 a7 13 f0       	push   $0xf013a790
f0116214:	68 a7 07 00 00       	push   $0x7a7
f0116219:	68 5e 8a 13 f0       	push   $0xf0138a5e
f011621e:	e8 f0 a1 fe ff       	call   f0100413 <_warn>
f0116223:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116226:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011622a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116230:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116233:	74 28                	je     f011625d <test_calculate_allocated_space+0xd2d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116235:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011623b:	83 ec 0c             	sub    $0xc,%esp
f011623e:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116241:	50                   	push   %eax
f0116242:	68 f0 a7 13 f0       	push   $0xf013a7f0
f0116247:	68 ac 07 00 00       	push   $0x7ac
f011624c:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0116251:	e8 bd a1 fe ff       	call   f0100413 <_warn>
f0116256:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116259:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011625d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116261:	74 04                	je     f0116267 <test_calculate_allocated_space+0xd37>
f0116263:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0116267:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f011626b:	83 ec 0c             	sub    $0xc,%esp
f011626e:	68 83 97 13 f0       	push   $0xf0139783
f0116273:	e8 96 aa fe ff       	call   f0100d0e <cprintf>
f0116278:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_allocated_space: FINISHED. Evaluation = %d\n", eval);
f011627b:	83 ec 08             	sub    $0x8,%esp
f011627e:	ff 75 e4             	pushl  -0x1c(%ebp)
f0116281:	68 4c a8 13 f0       	push   $0xf013a84c
f0116286:	e8 83 aa fe ff       	call   f0100d0e <cprintf>
f011628b:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f011628e:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0116292:	75 10                	jne    f01162a4 <test_calculate_allocated_space+0xd74>
		cprintf("Congratulations!! test calculate_allocated_space completed successfully.\n");
f0116294:	83 ec 0c             	sub    $0xc,%esp
f0116297:	68 8c a8 13 f0       	push   $0xf013a88c
f011629c:	e8 6d aa fe ff       	call   f0100d0e <cprintf>
f01162a1:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01162a4:	a1 a8 27 86 f0       	mov    0xf08627a8,%eax
f01162a9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01162ac:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01162af:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01162b2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01162b7:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01162ba:	5b                   	pop    %ebx
f01162bb:	5e                   	pop    %esi
f01162bc:	5f                   	pop    %edi
f01162bd:	5d                   	pop    %ebp
f01162be:	c3                   	ret    

f01162bf <CB>:
//===========================================================================
//===========================================================================
//===========================================================================

int CB(uint32 *ptr_dir, uint32 va, int bn)
{
f01162bf:	55                   	push   %ebp
f01162c0:	89 e5                	mov    %esp,%ebp
f01162c2:	83 ec 18             	sub    $0x18,%esp
	//assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f01162c5:	8b 45 10             	mov    0x10(%ebp),%eax
f01162c8:	ba 01 00 00 00       	mov    $0x1,%edx
f01162cd:	88 c1                	mov    %al,%cl
f01162cf:	d3 e2                	shl    %cl,%edx
f01162d1:	89 d0                	mov    %edx,%eax
f01162d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01162d6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01162d9:	c1 e8 16             	shr    $0x16,%eax
f01162dc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01162e3:	8b 45 08             	mov    0x8(%ebp),%eax
f01162e6:	01 d0                	add    %edx,%eax
f01162e8:	8b 00                	mov    (%eax),%eax
f01162ea:	83 e0 01             	and    $0x1,%eax
f01162ed:	85 c0                	test   %eax,%eax
f01162ef:	75 07                	jne    f01162f8 <CB+0x39>
f01162f1:	b8 00 00 00 00       	mov    $0x0,%eax
f01162f6:	eb 76                	jmp    f011636e <CB+0xaf>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01162f8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01162fb:	c1 e8 16             	shr    $0x16,%eax
f01162fe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116305:	8b 45 08             	mov    0x8(%ebp),%eax
f0116308:	01 d0                	add    %edx,%eax
f011630a:	8b 00                	mov    (%eax),%eax
f011630c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116311:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116314:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116317:	c1 e8 0c             	shr    $0xc,%eax
f011631a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f011631d:	a1 0c 27 86 f0       	mov    0xf086270c,%eax
f0116322:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0116325:	72 17                	jb     f011633e <CB+0x7f>
f0116327:	ff 75 f0             	pushl  -0x10(%ebp)
f011632a:	68 d8 a8 13 f0       	push   $0xf013a8d8
f011632f:	68 c7 07 00 00       	push   $0x7c7
f0116334:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0116339:	e8 c7 9e fe ff       	call   f0100205 <_panic>
f011633e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116341:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116346:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return ((table[((((uint32) (va)) >> 12) & 0x3FF)]&mask) == mask)? 1 : 0 ;
f0116349:	8b 45 0c             	mov    0xc(%ebp),%eax
f011634c:	c1 e8 0c             	shr    $0xc,%eax
f011634f:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116354:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011635b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011635e:	01 d0                	add    %edx,%eax
f0116360:	8b 00                	mov    (%eax),%eax
f0116362:	23 45 f4             	and    -0xc(%ebp),%eax
f0116365:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0116368:	0f 94 c0             	sete   %al
f011636b:	0f b6 c0             	movzbl %al,%eax
}
f011636e:	c9                   	leave  
f011636f:	c3                   	ret    

f0116370 <SB>:
int SB(uint32 *ptr_dir, uint32 va, int bn , int v)
{
f0116370:	55                   	push   %ebp
f0116371:	89 e5                	mov    %esp,%ebp
f0116373:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0116376:	68 07 a9 13 f0       	push   $0xf013a907
f011637b:	68 16 a9 13 f0       	push   $0xf013a916
f0116380:	68 cc 07 00 00       	push   $0x7cc
f0116385:	68 5e 8a 13 f0       	push   $0xf0138a5e
f011638a:	e8 76 9e fe ff       	call   f0100205 <_panic>

f011638f <CPs>:
	if (~v) table[((((uint32) (va)) >> 12) & 0x3FF)] &= ~mask ;
	else 	table[((((uint32) (va)) >> 12) & 0x3FF)] |= mask ;
	return 0;
}
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
f011638f:	55                   	push   %ebp
f0116390:	89 e5                	mov    %esp,%ebp
f0116392:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0116395:	68 07 a9 13 f0       	push   $0xf013a907
f011639a:	68 16 a9 13 f0       	push   $0xf013a916
f011639f:	68 d6 07 00 00       	push   $0x7d6
f01163a4:	68 5e 8a 13 f0       	push   $0xf0138a5e
f01163a9:	e8 57 9e fe ff       	call   f0100205 <_panic>

f01163ae <CA>:
	}
	return 1;
}

int CA(uint32 *ptr_dir, uint32 va)
{
f01163ae:	55                   	push   %ebp
f01163af:	89 e5                	mov    %esp,%ebp
f01163b1:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f01163b4:	68 07 a9 13 f0       	push   $0xf013a907
f01163b9:	68 16 a9 13 f0       	push   $0xf013a916
f01163be:	68 e5 07 00 00       	push   $0x7e5
f01163c3:	68 5e 8a 13 f0       	push   $0xf0138a5e
f01163c8:	e8 38 9e fe ff       	call   f0100205 <_panic>

f01163cd <CE>:
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	return table[((((uint32) (va)) >> 12) & 0x3FF)]&~0x00000FFF;
}

int CE(uint32 *_d, uint32 va)
{
f01163cd:	55                   	push   %ebp
f01163ce:	89 e5                	mov    %esp,%ebp
f01163d0:	83 ec 18             	sub    $0x18,%esp
	if (!(_d[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01163d3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01163d6:	c1 e8 16             	shr    $0x16,%eax
f01163d9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01163e0:	8b 45 08             	mov    0x8(%ebp),%eax
f01163e3:	01 d0                	add    %edx,%eax
f01163e5:	8b 00                	mov    (%eax),%eax
f01163e7:	83 e0 01             	and    $0x1,%eax
f01163ea:	85 c0                	test   %eax,%eax
f01163ec:	75 07                	jne    f01163f5 <CE+0x28>
f01163ee:	b8 00 00 00 00       	mov    $0x0,%eax
f01163f3:	eb 7a                	jmp    f011646f <CE+0xa2>
	uint32 *_t = (STATIC_KERNEL_VIRTUAL_ADDRESS(_d[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01163f5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01163f8:	c1 e8 16             	shr    $0x16,%eax
f01163fb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116402:	8b 45 08             	mov    0x8(%ebp),%eax
f0116405:	01 d0                	add    %edx,%eax
f0116407:	8b 00                	mov    (%eax),%eax
f0116409:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011640e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0116411:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116414:	c1 e8 0c             	shr    $0xc,%eax
f0116417:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011641a:	a1 0c 27 86 f0       	mov    0xf086270c,%eax
f011641f:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0116422:	72 17                	jb     f011643b <CE+0x6e>
f0116424:	ff 75 f4             	pushl  -0xc(%ebp)
f0116427:	68 d8 a8 13 f0       	push   $0xf013a8d8
f011642c:	68 ee 07 00 00       	push   $0x7ee
f0116431:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0116436:	e8 ca 9d fe ff       	call   f0100205 <_panic>
f011643b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011643e:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116443:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((_t[((((uint32) (va)) >> 12) & 0x3FF)])!=0) return 0;
f0116446:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116449:	c1 e8 0c             	shr    $0xc,%eax
f011644c:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116451:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116458:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011645b:	01 d0                	add    %edx,%eax
f011645d:	8b 00                	mov    (%eax),%eax
f011645f:	85 c0                	test   %eax,%eax
f0116461:	74 07                	je     f011646a <CE+0x9d>
f0116463:	b8 00 00 00 00       	mov    $0x0,%eax
f0116468:	eb 05                	jmp    f011646f <CE+0xa2>
	return 1;
f011646a:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011646f:	c9                   	leave  
f0116470:	c3                   	ret    

f0116471 <CP>:

int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc)
{
f0116471:	55                   	push   %ebp
f0116472:	89 e5                	mov    %esp,%ebp
f0116474:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0116477:	68 07 a9 13 f0       	push   $0xf013a907
f011647c:	68 16 a9 13 f0       	push   $0xf013a916
f0116481:	68 f5 07 00 00       	push   $0x7f5
f0116486:	68 5e 8a 13 f0       	push   $0xf0138a5e
f011648b:	e8 75 9d fe ff       	call   f0100205 <_panic>

f0116490 <GP>:
	}
	return 0;
}

uint32 GP(uint32 *ptr_dir, uint32 va)
{
f0116490:	55                   	push   %ebp
f0116491:	89 e5                	mov    %esp,%ebp
f0116493:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0116496:	68 07 a9 13 f0       	push   $0xf013a907
f011649b:	68 16 a9 13 f0       	push   $0xf013a916
f01164a0:	68 05 08 00 00       	push   $0x805
f01164a5:	68 5e 8a 13 f0       	push   $0xf0138a5e
f01164aa:	e8 56 9d fe ff       	call   f0100205 <_panic>

f01164af <ClearUserSpace>:
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
f01164af:	55                   	push   %ebp
f01164b0:	89 e5                	mov    %esp,%ebp
f01164b2:	83 ec 10             	sub    $0x10,%esp
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f01164b5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01164bc:	eb 18                	jmp    f01164d6 <ClearUserSpace+0x27>
		ptr_dir[i] = 0;
f01164be:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01164c1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01164c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01164cb:	01 d0                	add    %edx,%eax
f01164cd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f01164d3:	ff 45 fc             	incl   -0x4(%ebp)
f01164d6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01164d9:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f01164de:	76 de                	jbe    f01164be <ClearUserSpace+0xf>
		ptr_dir[i] = 0;
	}
}
f01164e0:	90                   	nop
f01164e1:	c9                   	leave  
f01164e2:	c3                   	ret    

f01164e3 <CCP>:

int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
f01164e3:	55                   	push   %ebp
f01164e4:	89 e5                	mov    %esp,%ebp
f01164e6:	83 ec 38             	sub    $0x38,%esp
f01164e9:	8b 45 2c             	mov    0x2c(%ebp),%eax
f01164ec:	88 45 d4             	mov    %al,-0x2c(%ebp)
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
f01164ef:	8b 45 0c             	mov    0xc(%ebp),%eax
f01164f2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01164f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));
f01164fa:	8b 45 10             	mov    0x10(%ebp),%eax
f01164fd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116502:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0116505:	e9 ea 01 00 00       	jmp    f01166f4 <CCP+0x211>
	{
		uint32* ptr_table1;
		uint32* ptr_table2;
		struct FrameInfo * pfi1 ;
		struct FrameInfo * pfi2 ;
		if (chk_type != CHK_ALLOC)
f011650a:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f011650e:	74 44                	je     f0116554 <CCP+0x71>
		{
			pfi1 = get_frame_info(ptr_dir, (uint32)ptrTemp1, &ptr_table1);
f0116510:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116513:	83 ec 04             	sub    $0x4,%esp
f0116516:	8d 55 dc             	lea    -0x24(%ebp),%edx
f0116519:	52                   	push   %edx
f011651a:	50                   	push   %eax
f011651b:	ff 75 08             	pushl  0x8(%ebp)
f011651e:	e8 c1 08 ff ff       	call   f0106de4 <get_frame_info>
f0116523:	83 c4 10             	add    $0x10,%esp
f0116526:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (ptr_table1 == NULL)
f0116529:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011652c:	85 c0                	test   %eax,%eax
f011652e:	75 24                	jne    f0116554 <CCP+0x71>
			{
				warn("[EVAL] Failed. Table of address 1 = NULL\n");
f0116530:	83 ec 04             	sub    $0x4,%esp
f0116533:	68 2c a9 13 f0       	push   $0xf013a92c
f0116538:	68 22 08 00 00       	push   $0x822
f011653d:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0116542:	e8 cc 9e fe ff       	call   f0100413 <_warn>
f0116547:	83 c4 10             	add    $0x10,%esp
				return 0;
f011654a:	b8 00 00 00 00       	mov    $0x0,%eax
f011654f:	e9 b6 01 00 00       	jmp    f011670a <CCP+0x227>
			}
		}
		pfi2 = get_frame_info(ptr_dir, (uint32)ptrTemp2, &ptr_table2);
f0116554:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116557:	83 ec 04             	sub    $0x4,%esp
f011655a:	8d 55 d8             	lea    -0x28(%ebp),%edx
f011655d:	52                   	push   %edx
f011655e:	50                   	push   %eax
f011655f:	ff 75 08             	pushl  0x8(%ebp)
f0116562:	e8 7d 08 ff ff       	call   f0106de4 <get_frame_info>
f0116567:	83 c4 10             	add    $0x10,%esp
f011656a:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (ptr_table2 == NULL)
f011656d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116570:	85 c0                	test   %eax,%eax
f0116572:	75 24                	jne    f0116598 <CCP+0xb5>
		{
			warn("[EVAL] Failed. Table of address 2 = NULL\n");
f0116574:	83 ec 04             	sub    $0x4,%esp
f0116577:	68 58 a9 13 f0       	push   $0xf013a958
f011657c:	68 29 08 00 00       	push   $0x829
f0116581:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0116586:	e8 88 9e fe ff       	call   f0100413 <_warn>
f011658b:	83 c4 10             	add    $0x10,%esp
			return 0;
f011658e:	b8 00 00 00 00       	mov    $0x0,%eax
f0116593:	e9 72 01 00 00       	jmp    f011670a <CCP+0x227>
		}
		if (chk_type == CHK_SHARE)
f0116598:	80 7d d4 02          	cmpb   $0x2,-0x2c(%ebp)
f011659c:	75 70                	jne    f011660e <CCP+0x12b>
		{
			uint32 fn1 = ptr_table1[PTX(ptrTemp1)] >> 12 ;
f011659e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01165a1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01165a4:	c1 ea 0c             	shr    $0xc,%edx
f01165a7:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01165ad:	c1 e2 02             	shl    $0x2,%edx
f01165b0:	01 d0                	add    %edx,%eax
f01165b2:	8b 00                	mov    (%eax),%eax
f01165b4:	c1 e8 0c             	shr    $0xc,%eax
f01165b7:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 fn2 = ptr_table2[PTX(ptrTemp2)] >> 12 ;
f01165ba:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01165bd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01165c0:	c1 ea 0c             	shr    $0xc,%edx
f01165c3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01165c9:	c1 e2 02             	shl    $0x2,%edx
f01165cc:	01 d0                	add    %edx,%eax
f01165ce:	8b 00                	mov    (%eax),%eax
f01165d0:	c1 e8 0c             	shr    $0xc,%eax
f01165d3:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			if(fn1 != fn2)
f01165d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01165d9:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01165dc:	74 30                	je     f011660e <CCP+0x12b>
			{
				warn("[EVAL] Failed. Frame numbers not equal in the whole range!\nva1=%x, va2=%x, fn1=%x, fn2=%x\n", ptrTemp1, ptrTemp2, fn1, fn2);
f01165de:	83 ec 04             	sub    $0x4,%esp
f01165e1:	ff 75 e4             	pushl  -0x1c(%ebp)
f01165e4:	ff 75 e8             	pushl  -0x18(%ebp)
f01165e7:	ff 75 f0             	pushl  -0x10(%ebp)
f01165ea:	ff 75 f4             	pushl  -0xc(%ebp)
f01165ed:	68 84 a9 13 f0       	push   $0xf013a984
f01165f2:	68 33 08 00 00       	push   $0x833
f01165f7:	68 5e 8a 13 f0       	push   $0xf0138a5e
f01165fc:	e8 12 9e fe ff       	call   f0100413 <_warn>
f0116601:	83 c4 20             	add    $0x20,%esp
				return 0;
f0116604:	b8 00 00 00 00       	mov    $0x0,%eax
f0116609:	e9 fc 00 00 00       	jmp    f011670a <CCP+0x227>
			}
		}
		if (ref != -1)
f011660e:	83 7d 18 ff          	cmpl   $0xffffffff,0x18(%ebp)
f0116612:	74 52                	je     f0116666 <CCP+0x183>
		{
			if (pfi2 == NULL || (*pfi2).references != ref)
f0116614:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0116618:	74 0e                	je     f0116628 <CCP+0x145>
f011661a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011661d:	8b 40 08             	mov    0x8(%eax),%eax
f0116620:	0f b7 c0             	movzwl %ax,%eax
f0116623:	3b 45 18             	cmp    0x18(%ebp),%eax
f0116626:	74 3e                	je     f0116666 <CCP+0x183>
			{
				warn("[EVAL] Failed. Num of frame references is not correct. MAKE SURE to use the functions of LAB5! va2=%x, ref2=%d\n", ptrTemp2, pfi2==NULL? 0 : (*pfi2).references);
f0116628:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011662c:	74 0b                	je     f0116639 <CCP+0x156>
f011662e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116631:	8b 40 08             	mov    0x8(%eax),%eax
f0116634:	0f b7 c0             	movzwl %ax,%eax
f0116637:	eb 05                	jmp    f011663e <CCP+0x15b>
f0116639:	b8 00 00 00 00       	mov    $0x0,%eax
f011663e:	83 ec 0c             	sub    $0xc,%esp
f0116641:	50                   	push   %eax
f0116642:	ff 75 f0             	pushl  -0x10(%ebp)
f0116645:	68 e0 a9 13 f0       	push   $0xf013a9e0
f011664a:	68 3b 08 00 00       	push   $0x83b
f011664f:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0116654:	e8 ba 9d fe ff       	call   f0100413 <_warn>
f0116659:	83 c4 20             	add    $0x20,%esp
				return 0;
f011665c:	b8 00 00 00 00       	mov    $0x0,%eax
f0116661:	e9 a4 00 00 00       	jmp    f011670a <CCP+0x227>
			}
		}
		if (CPs(ptr_dir, (uint32)ptrTemp2, dst_perms, dst_to_chk) <= 0)
f0116666:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116669:	ff 75 20             	pushl  0x20(%ebp)
f011666c:	ff 75 1c             	pushl  0x1c(%ebp)
f011666f:	50                   	push   %eax
f0116670:	ff 75 08             	pushl  0x8(%ebp)
f0116673:	e8 17 fd ff ff       	call   f011638f <CPs>
f0116678:	83 c4 10             	add    $0x10,%esp
f011667b:	85 c0                	test   %eax,%eax
f011667d:	7f 21                	jg     f01166a0 <CCP+0x1bd>
		{
			warn("[EVAL] Failed. one or more permission in destination is not correct\n");
f011667f:	83 ec 04             	sub    $0x4,%esp
f0116682:	68 50 aa 13 f0       	push   $0xf013aa50
f0116687:	68 41 08 00 00       	push   $0x841
f011668c:	68 5e 8a 13 f0       	push   $0xf0138a5e
f0116691:	e8 7d 9d fe ff       	call   f0100413 <_warn>
f0116696:	83 c4 10             	add    $0x10,%esp
			return 0;
f0116699:	b8 00 00 00 00       	mov    $0x0,%eax
f011669e:	eb 6a                	jmp    f011670a <CCP+0x227>
		}
		if (chk_type != CHK_ALLOC)
f01166a0:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f01166a4:	74 3a                	je     f01166e0 <CCP+0x1fd>
		{
			if (CPs(ptr_dir, (uint32)ptrTemp1, src_perms, src_to_chk) <= 0)
f01166a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01166a9:	ff 75 28             	pushl  0x28(%ebp)
f01166ac:	ff 75 24             	pushl  0x24(%ebp)
f01166af:	50                   	push   %eax
f01166b0:	ff 75 08             	pushl  0x8(%ebp)
f01166b3:	e8 d7 fc ff ff       	call   f011638f <CPs>
f01166b8:	83 c4 10             	add    $0x10,%esp
f01166bb:	85 c0                	test   %eax,%eax
f01166bd:	7f 21                	jg     f01166e0 <CCP+0x1fd>
			{
				warn("[EVAL] Failed. one or more permission in source is not correct\n");
f01166bf:	83 ec 04             	sub    $0x4,%esp
f01166c2:	68 98 aa 13 f0       	push   $0xf013aa98
f01166c7:	68 48 08 00 00       	push   $0x848
f01166cc:	68 5e 8a 13 f0       	push   $0xf0138a5e
f01166d1:	e8 3d 9d fe ff       	call   f0100413 <_warn>
f01166d6:	83 c4 10             	add    $0x10,%esp
				return 0;
f01166d9:	b8 00 00 00 00       	mov    $0x0,%eax
f01166de:	eb 2a                	jmp    f011670a <CCP+0x227>
			}
		}
		if (chk_type != CHK_ALLOC)
f01166e0:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f01166e4:	74 07                	je     f01166ed <CCP+0x20a>
		{
			ptrTemp1 += PAGE_SIZE;
f01166e6:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f01166ed:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f01166f4:	8b 55 10             	mov    0x10(%ebp),%edx
f01166f7:	8b 45 14             	mov    0x14(%ebp),%eax
f01166fa:	01 d0                	add    %edx,%eax
f01166fc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01166ff:	0f 87 05 fe ff ff    	ja     f011650a <CCP+0x27>
		{
			ptrTemp1 += PAGE_SIZE;
		}
	}

	return 1;
f0116705:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011670a:	c9                   	leave  
f011670b:	c3                   	ret    

f011670c <test_priority_normal_and_higher>:

extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f011670c:	55                   	push   %ebp
f011670d:	89 e5                	mov    %esp,%ebp
f011670f:	57                   	push   %edi
f0116710:	56                   	push   %esi
f0116711:	53                   	push   %ebx
f0116712:	81 ec 4c 03 00 00    	sub    $0x34c,%esp
	if(firstTime)
f0116718:	a0 22 2d 19 f0       	mov    0xf0192d22,%al
f011671d:	84 c0                	test   %al,%al
f011671f:	0f 84 b4 09 00 00    	je     f01170d9 <test_priority_normal_and_higher+0x9cd>
		uint32 fact_WS[15];
		uint32 fact_TimeStamp[15];
		uint32 hello_WS[10];
		uint32 hello_TimeStamp[10];

		firstTime = 0;
f0116725:	c6 05 22 2d 19 f0 00 	movb   $0x0,0xf0192d22
		char command[100] = "load fos_add 20";
f011672c:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0116732:	bb 38 ad 13 f0       	mov    $0xf013ad38,%ebx
f0116737:	ba 04 00 00 00       	mov    $0x4,%edx
f011673c:	89 c7                	mov    %eax,%edi
f011673e:	89 de                	mov    %ebx,%esi
f0116740:	89 d1                	mov    %edx,%ecx
f0116742:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0116744:	8d 95 24 fe ff ff    	lea    -0x1dc(%ebp),%edx
f011674a:	b9 15 00 00 00       	mov    $0x15,%ecx
f011674f:	b8 00 00 00 00       	mov    $0x0,%eax
f0116754:	89 d7                	mov    %edx,%edi
f0116756:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0116758:	83 ec 0c             	sub    $0xc,%esp
f011675b:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0116761:	50                   	push   %eax
f0116762:	e8 09 a6 fe ff       	call   f0100d70 <execute_command>
f0116767:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 15";
f011676a:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0116770:	bb 9c ad 13 f0       	mov    $0xf013ad9c,%ebx
f0116775:	ba 0d 00 00 00       	mov    $0xd,%edx
f011677a:	89 c7                	mov    %eax,%edi
f011677c:	89 de                	mov    %ebx,%esi
f011677e:	89 d1                	mov    %edx,%ecx
f0116780:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116782:	8d 95 85 fe ff ff    	lea    -0x17b(%ebp),%edx
f0116788:	b9 57 00 00 00       	mov    $0x57,%ecx
f011678d:	b0 00                	mov    $0x0,%al
f011678f:	89 d7                	mov    %edx,%edi
f0116791:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0116793:	83 ec 0c             	sub    $0xc,%esp
f0116796:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f011679c:	50                   	push   %eax
f011679d:	e8 ce a5 fe ff       	call   f0100d70 <execute_command>
f01167a2:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 10";
f01167a5:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f01167ab:	bb 00 ae 13 f0       	mov    $0xf013ae00,%ebx
f01167b0:	ba 17 00 00 00       	mov    $0x17,%edx
f01167b5:	89 c7                	mov    %eax,%edi
f01167b7:	89 de                	mov    %ebx,%esi
f01167b9:	89 d1                	mov    %edx,%ecx
f01167bb:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01167bd:	8d 95 f3 fe ff ff    	lea    -0x10d(%ebp),%edx
f01167c3:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f01167c8:	b0 00                	mov    $0x0,%al
f01167ca:	89 d7                	mov    %edx,%edi
f01167cc:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f01167ce:	83 ec 0c             	sub    $0xc,%esp
f01167d1:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f01167d7:	50                   	push   %eax
f01167d8:	e8 93 a5 fe ff       	call   f0100d70 <execute_command>
f01167dd:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f01167e0:	83 ec 04             	sub    $0x4,%esp
f01167e3:	6a 00                	push   $0x0
f01167e5:	8d 45 ac             	lea    -0x54(%ebp),%eax
f01167e8:	50                   	push   %eax
f01167e9:	68 00 10 00 00       	push   $0x1000
f01167ee:	e8 5d 35 ff ff       	call   f0109d50 <envid2env>
f01167f3:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f01167f6:	83 ec 04             	sub    $0x4,%esp
f01167f9:	6a 00                	push   $0x0
f01167fb:	8d 45 a8             	lea    -0x58(%ebp),%eax
f01167fe:	50                   	push   %eax
f01167ff:	68 01 10 00 00       	push   $0x1001
f0116804:	e8 47 35 ff ff       	call   f0109d50 <envid2env>
f0116809:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f011680c:	83 ec 04             	sub    $0x4,%esp
f011680f:	6a 00                	push   $0x0
f0116811:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f0116814:	50                   	push   %eax
f0116815:	68 02 10 00 00       	push   $0x1002
f011681a:	e8 31 35 ff ff       	call   f0109d50 <envid2env>
f011681f:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0116822:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116825:	85 c0                	test   %eax,%eax
f0116827:	74 0e                	je     f0116837 <test_priority_normal_and_higher+0x12b>
f0116829:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011682c:	85 c0                	test   %eax,%eax
f011682e:	74 07                	je     f0116837 <test_priority_normal_and_higher+0x12b>
f0116830:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116833:	85 c0                	test   %eax,%eax
f0116835:	75 14                	jne    f011684b <test_priority_normal_and_higher+0x13f>
			panic("Loading programs failed\n");
f0116837:	83 ec 04             	sub    $0x4,%esp
f011683a:	68 d8 aa 13 f0       	push   $0xf013aad8
f011683f:	6a 26                	push   $0x26
f0116841:	68 f1 aa 13 f0       	push   $0xf013aaf1
f0116846:	e8 ba 99 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f011684b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011684e:	8b 40 74             	mov    0x74(%eax),%eax
f0116851:	83 f8 14             	cmp    $0x14,%eax
f0116854:	75 16                	jne    f011686c <test_priority_normal_and_higher+0x160>
f0116856:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116859:	8b 40 74             	mov    0x74(%eax),%eax
f011685c:	83 f8 0f             	cmp    $0xf,%eax
f011685f:	75 0b                	jne    f011686c <test_priority_normal_and_higher+0x160>
f0116861:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116864:	8b 40 74             	mov    0x74(%eax),%eax
f0116867:	83 f8 0a             	cmp    $0xa,%eax
f011686a:	74 14                	je     f0116880 <test_priority_normal_and_higher+0x174>
			panic("The programs should be initially loaded with the given working set size\n");
f011686c:	83 ec 04             	sub    $0x4,%esp
f011686f:	68 0c ab 13 f0       	push   $0xf013ab0c
f0116874:	6a 29                	push   $0x29
f0116876:	68 f1 aa 13 f0       	push   $0xf013aaf1
f011687b:	e8 85 99 fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 20; i++)
f0116880:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0116887:	eb 44                	jmp    f01168cd <test_priority_normal_and_higher+0x1c1>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0116889:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011688c:	8b 48 78             	mov    0x78(%eax),%ecx
f011688f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0116892:	89 d0                	mov    %edx,%eax
f0116894:	01 c0                	add    %eax,%eax
f0116896:	01 d0                	add    %edx,%eax
f0116898:	c1 e0 03             	shl    $0x3,%eax
f011689b:	01 c8                	add    %ecx,%eax
f011689d:	8b 10                	mov    (%eax),%edx
f011689f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01168a2:	89 94 85 74 fd ff ff 	mov    %edx,-0x28c(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f01168a9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01168ac:	8b 48 78             	mov    0x78(%eax),%ecx
f01168af:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01168b2:	89 d0                	mov    %edx,%eax
f01168b4:	01 c0                	add    %eax,%eax
f01168b6:	01 d0                	add    %edx,%eax
f01168b8:	c1 e0 03             	shl    $0x3,%eax
f01168bb:	01 c8                	add    %ecx,%eax
f01168bd:	8b 50 08             	mov    0x8(%eax),%edx
f01168c0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01168c3:	89 94 85 c4 fd ff ff 	mov    %edx,-0x23c(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f01168ca:	ff 45 e4             	incl   -0x1c(%ebp)
f01168cd:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f01168d1:	7e b6                	jle    f0116889 <test_priority_normal_and_higher+0x17d>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f01168d3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f01168da:	eb 44                	jmp    f0116920 <test_priority_normal_and_higher+0x214>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f01168dc:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01168df:	8b 48 78             	mov    0x78(%eax),%ecx
f01168e2:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01168e5:	89 d0                	mov    %edx,%eax
f01168e7:	01 c0                	add    %eax,%eax
f01168e9:	01 d0                	add    %edx,%eax
f01168eb:	c1 e0 03             	shl    $0x3,%eax
f01168ee:	01 c8                	add    %ecx,%eax
f01168f0:	8b 10                	mov    (%eax),%edx
f01168f2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01168f5:	89 94 85 fc fc ff ff 	mov    %edx,-0x304(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f01168fc:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01168ff:	8b 48 78             	mov    0x78(%eax),%ecx
f0116902:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0116905:	89 d0                	mov    %edx,%eax
f0116907:	01 c0                	add    %eax,%eax
f0116909:	01 d0                	add    %edx,%eax
f011690b:	c1 e0 03             	shl    $0x3,%eax
f011690e:	01 c8                	add    %ecx,%eax
f0116910:	8b 50 08             	mov    0x8(%eax),%edx
f0116913:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0116916:	89 94 85 38 fd ff ff 	mov    %edx,-0x2c8(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f011691d:	ff 45 e0             	incl   -0x20(%ebp)
f0116920:	83 7d e0 0e          	cmpl   $0xe,-0x20(%ebp)
f0116924:	7e b6                	jle    f01168dc <test_priority_normal_and_higher+0x1d0>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0116926:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f011692d:	eb 44                	jmp    f0116973 <test_priority_normal_and_higher+0x267>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f011692f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116932:	8b 48 78             	mov    0x78(%eax),%ecx
f0116935:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0116938:	89 d0                	mov    %edx,%eax
f011693a:	01 c0                	add    %eax,%eax
f011693c:	01 d0                	add    %edx,%eax
f011693e:	c1 e0 03             	shl    $0x3,%eax
f0116941:	01 c8                	add    %ecx,%eax
f0116943:	8b 10                	mov    (%eax),%edx
f0116945:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116948:	89 94 85 ac fc ff ff 	mov    %edx,-0x354(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f011694f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116952:	8b 48 78             	mov    0x78(%eax),%ecx
f0116955:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0116958:	89 d0                	mov    %edx,%eax
f011695a:	01 c0                	add    %eax,%eax
f011695c:	01 d0                	add    %edx,%eax
f011695e:	c1 e0 03             	shl    $0x3,%eax
f0116961:	01 c8                	add    %ecx,%eax
f0116963:	8b 50 08             	mov    0x8(%eax),%edx
f0116966:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116969:	89 94 85 d4 fc ff ff 	mov    %edx,-0x32c(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0116970:	ff 45 dc             	incl   -0x24(%ebp)
f0116973:	83 7d dc 09          	cmpl   $0x9,-0x24(%ebp)
f0116977:	7e b6                	jle    f011692f <test_priority_normal_and_higher+0x223>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0116979:	e8 65 64 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011697e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames();
f0116981:	e8 20 d4 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0116986:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0116989:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011698c:	83 ec 08             	sub    $0x8,%esp
f011698f:	6a 03                	push   $0x3
f0116991:	50                   	push   %eax
f0116992:	e8 97 48 ff ff       	call   f010b22e <set_program_priority>
f0116997:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f011699a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011699d:	83 ec 08             	sub    $0x8,%esp
f01169a0:	6a 03                	push   $0x3
f01169a2:	50                   	push   %eax
f01169a3:	e8 86 48 ff ff       	call   f010b22e <set_program_priority>
f01169a8:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f01169ab:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01169ae:	83 ec 08             	sub    $0x8,%esp
f01169b1:	6a 03                	push   $0x3
f01169b3:	50                   	push   %eax
f01169b4:	e8 75 48 ff ff       	call   f010b22e <set_program_priority>
f01169b9:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01169bc:	e8 e5 d3 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f01169c1:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01169c4:	74 14                	je     f01169da <test_priority_normal_and_higher+0x2ce>
f01169c6:	83 ec 04             	sub    $0x4,%esp
f01169c9:	68 58 ab 13 f0       	push   $0xf013ab58
f01169ce:	6a 45                	push   $0x45
f01169d0:	68 f1 aa 13 f0       	push   $0xf013aaf1
f01169d5:	e8 2b 98 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01169da:	e8 04 64 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f01169df:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01169e2:	74 14                	je     f01169f8 <test_priority_normal_and_higher+0x2ec>
f01169e4:	83 ec 04             	sub    $0x4,%esp
f01169e7:	68 58 ab 13 f0       	push   $0xf013ab58
f01169ec:	6a 46                	push   $0x46
f01169ee:	68 f1 aa 13 f0       	push   $0xf013aaf1
f01169f3:	e8 0d 98 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f01169f8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01169fb:	8b 40 74             	mov    0x74(%eax),%eax
f01169fe:	83 f8 14             	cmp    $0x14,%eax
f0116a01:	75 16                	jne    f0116a19 <test_priority_normal_and_higher+0x30d>
f0116a03:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116a06:	8b 40 74             	mov    0x74(%eax),%eax
f0116a09:	83 f8 0f             	cmp    $0xf,%eax
f0116a0c:	75 0b                	jne    f0116a19 <test_priority_normal_and_higher+0x30d>
f0116a0e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116a11:	8b 40 74             	mov    0x74(%eax),%eax
f0116a14:	83 f8 0a             	cmp    $0xa,%eax
f0116a17:	74 14                	je     f0116a2d <test_priority_normal_and_higher+0x321>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0116a19:	83 ec 04             	sub    $0x4,%esp
f0116a1c:	68 84 ab 13 f0       	push   $0xf013ab84
f0116a21:	6a 49                	push   $0x49
f0116a23:	68 f1 aa 13 f0       	push   $0xf013aaf1
f0116a28:	e8 d8 97 fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f0116a2d:	e8 b1 63 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0116a32:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116a35:	e8 6c d3 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0116a3a:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Above Normal // Should change only helloWorld as none of the rest is full
		set_program_priority(addEnv, 4);
f0116a3d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116a40:	83 ec 08             	sub    $0x8,%esp
f0116a43:	6a 04                	push   $0x4
f0116a45:	50                   	push   %eax
f0116a46:	e8 e3 47 ff ff       	call   f010b22e <set_program_priority>
f0116a4b:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 4);
f0116a4e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116a51:	83 ec 08             	sub    $0x8,%esp
f0116a54:	6a 04                	push   $0x4
f0116a56:	50                   	push   %eax
f0116a57:	e8 d2 47 ff ff       	call   f010b22e <set_program_priority>
f0116a5c:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0116a5f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116a62:	83 ec 08             	sub    $0x8,%esp
f0116a65:	6a 04                	push   $0x4
f0116a67:	50                   	push   %eax
f0116a68:	e8 c1 47 ff ff       	call   f010b22e <set_program_priority>
f0116a6d:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116a70:	e8 31 d3 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0116a75:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116a78:	74 14                	je     f0116a8e <test_priority_normal_and_higher+0x382>
f0116a7a:	83 ec 04             	sub    $0x4,%esp
f0116a7d:	68 58 ab 13 f0       	push   $0xf013ab58
f0116a82:	6a 53                	push   $0x53
f0116a84:	68 f1 aa 13 f0       	push   $0xf013aaf1
f0116a89:	e8 77 97 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly%x\n");
f0116a8e:	e8 50 63 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0116a93:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116a96:	74 14                	je     f0116aac <test_priority_normal_and_higher+0x3a0>
f0116a98:	83 ec 04             	sub    $0x4,%esp
f0116a9b:	68 d8 ab 13 f0       	push   $0xf013abd8
f0116aa0:	6a 54                	push   $0x54
f0116aa2:	68 f1 aa 13 f0       	push   $0xf013aaf1
f0116aa7:	e8 59 97 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116aac:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116aaf:	8b 40 74             	mov    0x74(%eax),%eax
f0116ab2:	83 f8 14             	cmp    $0x14,%eax
f0116ab5:	75 16                	jne    f0116acd <test_priority_normal_and_higher+0x3c1>
f0116ab7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116aba:	8b 40 74             	mov    0x74(%eax),%eax
f0116abd:	83 f8 0f             	cmp    $0xf,%eax
f0116ac0:	75 0b                	jne    f0116acd <test_priority_normal_and_higher+0x3c1>
f0116ac2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116ac5:	8b 40 74             	mov    0x74(%eax),%eax
f0116ac8:	83 f8 14             	cmp    $0x14,%eax
f0116acb:	74 14                	je     f0116ae1 <test_priority_normal_and_higher+0x3d5>
			panic("The programs' working set size should be doubled only if it is full\n");
f0116acd:	83 ec 04             	sub    $0x4,%esp
f0116ad0:	68 08 ac 13 f0       	push   $0xf013ac08
f0116ad5:	6a 57                	push   $0x57
f0116ad7:	68 f1 aa 13 f0       	push   $0xf013aaf1
f0116adc:	e8 24 97 fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f0116ae1:	e8 fd 62 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0116ae6:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116ae9:	e8 b8 d2 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0116aee:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set priority to above normal --> nothing should change (1 time only)
		set_program_priority(helloEnv, 4);
f0116af1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116af4:	83 ec 08             	sub    $0x8,%esp
f0116af7:	6a 04                	push   $0x4
f0116af9:	50                   	push   %eax
f0116afa:	e8 2f 47 ff ff       	call   f010b22e <set_program_priority>
f0116aff:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116b02:	e8 9f d2 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0116b07:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116b0a:	74 14                	je     f0116b20 <test_priority_normal_and_higher+0x414>
f0116b0c:	83 ec 04             	sub    $0x4,%esp
f0116b0f:	68 58 ab 13 f0       	push   $0xf013ab58
f0116b14:	6a 5f                	push   $0x5f
f0116b16:	68 f1 aa 13 f0       	push   $0xf013aaf1
f0116b1b:	e8 e5 96 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116b20:	e8 be 62 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0116b25:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116b28:	74 14                	je     f0116b3e <test_priority_normal_and_higher+0x432>
f0116b2a:	83 ec 04             	sub    $0x4,%esp
f0116b2d:	68 58 ab 13 f0       	push   $0xf013ab58
f0116b32:	6a 60                	push   $0x60
f0116b34:	68 f1 aa 13 f0       	push   $0xf013aaf1
f0116b39:	e8 c7 96 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116b3e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116b41:	8b 40 74             	mov    0x74(%eax),%eax
f0116b44:	83 f8 14             	cmp    $0x14,%eax
f0116b47:	75 16                	jne    f0116b5f <test_priority_normal_and_higher+0x453>
f0116b49:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116b4c:	8b 40 74             	mov    0x74(%eax),%eax
f0116b4f:	83 f8 0f             	cmp    $0xf,%eax
f0116b52:	75 0b                	jne    f0116b5f <test_priority_normal_and_higher+0x453>
f0116b54:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116b57:	8b 40 74             	mov    0x74(%eax),%eax
f0116b5a:	83 f8 14             	cmp    $0x14,%eax
f0116b5d:	74 14                	je     f0116b73 <test_priority_normal_and_higher+0x467>
			panic("The programs' working set size should be doubled only once\n");
f0116b5f:	83 ec 04             	sub    $0x4,%esp
f0116b62:	68 50 ac 13 f0       	push   $0xf013ac50
f0116b67:	6a 63                	push   $0x63
f0116b69:	68 f1 aa 13 f0       	push   $0xf013aaf1
f0116b6e:	e8 92 96 fe ff       	call   f0100205 <_panic>


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0116b73:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
f0116b7a:	eb 1b                	jmp    f0116b97 <test_priority_normal_and_higher+0x48b>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0116b7c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116b7f:	8b 48 78             	mov    0x78(%eax),%ecx
f0116b82:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0116b85:	89 d0                	mov    %edx,%eax
f0116b87:	01 c0                	add    %eax,%eax
f0116b89:	01 d0                	add    %edx,%eax
f0116b8b:	c1 e0 03             	shl    $0x3,%eax
f0116b8e:	01 c8                	add    %ecx,%eax
f0116b90:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0116b94:	ff 45 d8             	incl   -0x28(%ebp)
f0116b97:	83 7d d8 13          	cmpl   $0x13,-0x28(%ebp)
f0116b9b:	7e df                	jle    f0116b7c <test_priority_normal_and_higher+0x470>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116b9d:	e8 41 62 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0116ba2:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116ba5:	e8 fc d1 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0116baa:	89 45 b0             	mov    %eax,-0x50(%ebp)

		set_program_priority(helloEnv, 4);
f0116bad:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116bb0:	83 ec 08             	sub    $0x8,%esp
f0116bb3:	6a 04                	push   $0x4
f0116bb5:	50                   	push   %eax
f0116bb6:	e8 73 46 ff ff       	call   f010b22e <set_program_priority>
f0116bbb:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116bbe:	e8 e3 d1 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0116bc3:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116bc6:	74 14                	je     f0116bdc <test_priority_normal_and_higher+0x4d0>
f0116bc8:	83 ec 04             	sub    $0x4,%esp
f0116bcb:	68 58 ab 13 f0       	push   $0xf013ab58
f0116bd0:	6a 70                	push   $0x70
f0116bd2:	68 f1 aa 13 f0       	push   $0xf013aaf1
f0116bd7:	e8 29 96 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116bdc:	e8 02 62 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0116be1:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116be4:	74 14                	je     f0116bfa <test_priority_normal_and_higher+0x4ee>
f0116be6:	83 ec 04             	sub    $0x4,%esp
f0116be9:	68 58 ab 13 f0       	push   $0xf013ab58
f0116bee:	6a 71                	push   $0x71
f0116bf0:	68 f1 aa 13 f0       	push   $0xf013aaf1
f0116bf5:	e8 0b 96 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116bfa:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116bfd:	8b 40 74             	mov    0x74(%eax),%eax
f0116c00:	83 f8 14             	cmp    $0x14,%eax
f0116c03:	75 16                	jne    f0116c1b <test_priority_normal_and_higher+0x50f>
f0116c05:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116c08:	8b 40 74             	mov    0x74(%eax),%eax
f0116c0b:	83 f8 0f             	cmp    $0xf,%eax
f0116c0e:	75 0b                	jne    f0116c1b <test_priority_normal_and_higher+0x50f>
f0116c10:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116c13:	8b 40 74             	mov    0x74(%eax),%eax
f0116c16:	83 f8 14             	cmp    $0x14,%eax
f0116c19:	74 14                	je     f0116c2f <test_priority_normal_and_higher+0x523>
			panic("The programs' working set size should be doubled only once\n");
f0116c1b:	83 ec 04             	sub    $0x4,%esp
f0116c1e:	68 50 ac 13 f0       	push   $0xf013ac50
f0116c23:	6a 74                	push   $0x74
f0116c25:	68 f1 aa 13 f0       	push   $0xf013aaf1
f0116c2a:	e8 d6 95 fe ff       	call   f0100205 <_panic>

		for(int i = 10; i < 15; i++)
f0116c2f:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
f0116c36:	eb 1b                	jmp    f0116c53 <test_priority_normal_and_higher+0x547>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0116c38:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116c3b:	8b 48 78             	mov    0x78(%eax),%ecx
f0116c3e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0116c41:	89 d0                	mov    %edx,%eax
f0116c43:	01 c0                	add    %eax,%eax
f0116c45:	01 d0                	add    %edx,%eax
f0116c47:	c1 e0 03             	shl    $0x3,%eax
f0116c4a:	01 c8                	add    %ecx,%eax
f0116c4c:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");

		for(int i = 10; i < 15; i++)
f0116c50:	ff 45 d4             	incl   -0x2c(%ebp)
f0116c53:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0116c57:	7e df                	jle    f0116c38 <test_priority_normal_and_higher+0x52c>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116c59:	e8 85 61 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0116c5e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116c61:	e8 40 d1 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0116c66:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0116c69:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116c6c:	83 ec 08             	sub    $0x8,%esp
f0116c6f:	6a 05                	push   $0x5
f0116c71:	50                   	push   %eax
f0116c72:	e8 b7 45 ff ff       	call   f010b22e <set_program_priority>
f0116c77:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 5);
f0116c7a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116c7d:	83 ec 08             	sub    $0x8,%esp
f0116c80:	6a 05                	push   $0x5
f0116c82:	50                   	push   %eax
f0116c83:	e8 a6 45 ff ff       	call   f010b22e <set_program_priority>
f0116c88:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116c8b:	e8 16 d1 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0116c90:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116c93:	74 14                	je     f0116ca9 <test_priority_normal_and_higher+0x59d>
f0116c95:	83 ec 04             	sub    $0x4,%esp
f0116c98:	68 58 ab 13 f0       	push   $0xf013ab58
f0116c9d:	6a 7f                	push   $0x7f
f0116c9f:	68 f1 aa 13 f0       	push   $0xf013aaf1
f0116ca4:	e8 5c 95 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116ca9:	e8 35 61 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0116cae:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116cb1:	74 17                	je     f0116cca <test_priority_normal_and_higher+0x5be>
f0116cb3:	83 ec 04             	sub    $0x4,%esp
f0116cb6:	68 58 ab 13 f0       	push   $0xf013ab58
f0116cbb:	68 80 00 00 00       	push   $0x80
f0116cc0:	68 f1 aa 13 f0       	push   $0xf013aaf1
f0116cc5:	e8 3b 95 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0116cca:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116ccd:	8b 40 74             	mov    0x74(%eax),%eax
f0116cd0:	83 f8 14             	cmp    $0x14,%eax
f0116cd3:	75 16                	jne    f0116ceb <test_priority_normal_and_higher+0x5df>
f0116cd5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116cd8:	8b 40 74             	mov    0x74(%eax),%eax
f0116cdb:	83 f8 1e             	cmp    $0x1e,%eax
f0116cde:	75 0b                	jne    f0116ceb <test_priority_normal_and_higher+0x5df>
f0116ce0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116ce3:	8b 40 74             	mov    0x74(%eax),%eax
f0116ce6:	83 f8 28             	cmp    $0x28,%eax
f0116ce9:	74 17                	je     f0116d02 <test_priority_normal_and_higher+0x5f6>
			panic("The programs' working set size should be doubled if full\n");
f0116ceb:	83 ec 04             	sub    $0x4,%esp
f0116cee:	68 8c ac 13 f0       	push   $0xf013ac8c
f0116cf3:	68 83 00 00 00       	push   $0x83
f0116cf8:	68 f1 aa 13 f0       	push   $0xf013aaf1
f0116cfd:	e8 03 95 fe ff       	call   f0100205 <_panic>

		for(int i = 20; i < 40; i++)
f0116d02:	c7 45 d0 14 00 00 00 	movl   $0x14,-0x30(%ebp)
f0116d09:	eb 1b                	jmp    f0116d26 <test_priority_normal_and_higher+0x61a>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0116d0b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116d0e:	8b 48 78             	mov    0x78(%eax),%ecx
f0116d11:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0116d14:	89 d0                	mov    %edx,%eax
f0116d16:	01 c0                	add    %eax,%eax
f0116d18:	01 d0                	add    %edx,%eax
f0116d1a:	c1 e0 03             	shl    $0x3,%eax
f0116d1d:	01 c8                	add    %ecx,%eax
f0116d1f:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 20; i < 40; i++)
f0116d23:	ff 45 d0             	incl   -0x30(%ebp)
f0116d26:	83 7d d0 27          	cmpl   $0x27,-0x30(%ebp)
f0116d2a:	7e df                	jle    f0116d0b <test_priority_normal_and_higher+0x5ff>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116d2c:	e8 b2 60 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0116d31:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116d34:	e8 6d d0 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0116d39:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0116d3c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116d3f:	83 ec 08             	sub    $0x8,%esp
f0116d42:	6a 05                	push   $0x5
f0116d44:	50                   	push   %eax
f0116d45:	e8 e4 44 ff ff       	call   f010b22e <set_program_priority>
f0116d4a:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0116d4d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116d50:	83 ec 08             	sub    $0x8,%esp
f0116d53:	6a 04                	push   $0x4
f0116d55:	50                   	push   %eax
f0116d56:	e8 d3 44 ff ff       	call   f010b22e <set_program_priority>
f0116d5b:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116d5e:	e8 43 d0 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0116d63:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116d66:	74 17                	je     f0116d7f <test_priority_normal_and_higher+0x673>
f0116d68:	83 ec 04             	sub    $0x4,%esp
f0116d6b:	68 58 ab 13 f0       	push   $0xf013ab58
f0116d70:	68 8e 00 00 00       	push   $0x8e
f0116d75:	68 f1 aa 13 f0       	push   $0xf013aaf1
f0116d7a:	e8 86 94 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116d7f:	e8 5f 60 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0116d84:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116d87:	74 17                	je     f0116da0 <test_priority_normal_and_higher+0x694>
f0116d89:	83 ec 04             	sub    $0x4,%esp
f0116d8c:	68 58 ab 13 f0       	push   $0xf013ab58
f0116d91:	68 8f 00 00 00       	push   $0x8f
f0116d96:	68 f1 aa 13 f0       	push   $0xf013aaf1
f0116d9b:	e8 65 94 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0116da0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116da3:	8b 40 74             	mov    0x74(%eax),%eax
f0116da6:	83 f8 14             	cmp    $0x14,%eax
f0116da9:	75 16                	jne    f0116dc1 <test_priority_normal_and_higher+0x6b5>
f0116dab:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116dae:	8b 40 74             	mov    0x74(%eax),%eax
f0116db1:	83 f8 1e             	cmp    $0x1e,%eax
f0116db4:	75 0b                	jne    f0116dc1 <test_priority_normal_and_higher+0x6b5>
f0116db6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116db9:	8b 40 74             	mov    0x74(%eax),%eax
f0116dbc:	83 f8 28             	cmp    $0x28,%eax
f0116dbf:	74 17                	je     f0116dd8 <test_priority_normal_and_higher+0x6cc>
			panic("The programs' working set size should be doubled if full\n");
f0116dc1:	83 ec 04             	sub    $0x4,%esp
f0116dc4:	68 8c ac 13 f0       	push   $0xf013ac8c
f0116dc9:	68 92 00 00 00       	push   $0x92
f0116dce:	68 f1 aa 13 f0       	push   $0xf013aaf1
f0116dd3:	e8 2d 94 fe ff       	call   f0100205 <_panic>

		for(int i = 15; i < 30; i++)
f0116dd8:	c7 45 cc 0f 00 00 00 	movl   $0xf,-0x34(%ebp)
f0116ddf:	eb 1b                	jmp    f0116dfc <test_priority_normal_and_higher+0x6f0>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0116de1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116de4:	8b 48 78             	mov    0x78(%eax),%ecx
f0116de7:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116dea:	89 d0                	mov    %edx,%eax
f0116dec:	01 c0                	add    %eax,%eax
f0116dee:	01 d0                	add    %edx,%eax
f0116df0:	c1 e0 03             	shl    $0x3,%eax
f0116df3:	01 c8                	add    %ecx,%eax
f0116df5:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 30; i++)
f0116df9:	ff 45 cc             	incl   -0x34(%ebp)
f0116dfc:	83 7d cc 1d          	cmpl   $0x1d,-0x34(%ebp)
f0116e00:	7e df                	jle    f0116de1 <test_priority_normal_and_higher+0x6d5>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116e02:	e8 dc 5f ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0116e07:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116e0a:	e8 97 cf fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0116e0f:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0116e12:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116e15:	83 ec 08             	sub    $0x8,%esp
f0116e18:	6a 05                	push   $0x5
f0116e1a:	50                   	push   %eax
f0116e1b:	e8 0e 44 ff ff       	call   f010b22e <set_program_priority>
f0116e20:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0116e23:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116e26:	83 ec 08             	sub    $0x8,%esp
f0116e29:	6a 04                	push   $0x4
f0116e2b:	50                   	push   %eax
f0116e2c:	e8 fd 43 ff ff       	call   f010b22e <set_program_priority>
f0116e31:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116e34:	e8 6d cf fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0116e39:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116e3c:	74 17                	je     f0116e55 <test_priority_normal_and_higher+0x749>
f0116e3e:	83 ec 04             	sub    $0x4,%esp
f0116e41:	68 58 ab 13 f0       	push   $0xf013ab58
f0116e46:	68 9d 00 00 00       	push   $0x9d
f0116e4b:	68 f1 aa 13 f0       	push   $0xf013aaf1
f0116e50:	e8 b0 93 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116e55:	e8 89 5f ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0116e5a:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116e5d:	74 17                	je     f0116e76 <test_priority_normal_and_higher+0x76a>
f0116e5f:	83 ec 04             	sub    $0x4,%esp
f0116e62:	68 58 ab 13 f0       	push   $0xf013ab58
f0116e67:	68 9e 00 00 00       	push   $0x9e
f0116e6c:	68 f1 aa 13 f0       	push   $0xf013aaf1
f0116e71:	e8 8f 93 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
f0116e76:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116e79:	8b 40 74             	mov    0x74(%eax),%eax
f0116e7c:	83 f8 14             	cmp    $0x14,%eax
f0116e7f:	75 16                	jne    f0116e97 <test_priority_normal_and_higher+0x78b>
f0116e81:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116e84:	8b 40 74             	mov    0x74(%eax),%eax
f0116e87:	83 f8 3c             	cmp    $0x3c,%eax
f0116e8a:	75 0b                	jne    f0116e97 <test_priority_normal_and_higher+0x78b>
f0116e8c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116e8f:	8b 40 74             	mov    0x74(%eax),%eax
f0116e92:	83 f8 28             	cmp    $0x28,%eax
f0116e95:	74 17                	je     f0116eae <test_priority_normal_and_higher+0x7a2>
			panic("The programs' working set size should be doubled if full\n");
f0116e97:	83 ec 04             	sub    $0x4,%esp
f0116e9a:	68 8c ac 13 f0       	push   $0xf013ac8c
f0116e9f:	68 a1 00 00 00       	push   $0xa1
f0116ea4:	68 f1 aa 13 f0       	push   $0xf013aaf1
f0116ea9:	e8 57 93 fe ff       	call   f0100205 <_panic>

		for(int i = 15; i < 60; i++)
f0116eae:	c7 45 c8 0f 00 00 00 	movl   $0xf,-0x38(%ebp)
f0116eb5:	eb 1b                	jmp    f0116ed2 <test_priority_normal_and_higher+0x7c6>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
f0116eb7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116eba:	8b 48 78             	mov    0x78(%eax),%ecx
f0116ebd:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0116ec0:	89 d0                	mov    %edx,%eax
f0116ec2:	01 c0                	add    %eax,%eax
f0116ec4:	01 d0                	add    %edx,%eax
f0116ec6:	c1 e0 03             	shl    $0x3,%eax
f0116ec9:	01 c8                	add    %ecx,%eax
f0116ecb:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 60; i++)
f0116ecf:	ff 45 c8             	incl   -0x38(%ebp)
f0116ed2:	83 7d c8 3b          	cmpl   $0x3b,-0x38(%ebp)
f0116ed6:	7e df                	jle    f0116eb7 <test_priority_normal_and_higher+0x7ab>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0116ed8:	c7 45 c4 0a 00 00 00 	movl   $0xa,-0x3c(%ebp)
f0116edf:	eb 1b                	jmp    f0116efc <test_priority_normal_and_higher+0x7f0>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
f0116ee1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116ee4:	8b 48 78             	mov    0x78(%eax),%ecx
f0116ee7:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116eea:	89 d0                	mov    %edx,%eax
f0116eec:	01 c0                	add    %eax,%eax
f0116eee:	01 d0                	add    %edx,%eax
f0116ef0:	c1 e0 03             	shl    $0x3,%eax
f0116ef3:	01 c8                	add    %ecx,%eax
f0116ef5:	c6 40 04 01          	movb   $0x1,0x4(%eax)

		for(int i = 15; i < 60; i++)
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0116ef9:	ff 45 c4             	incl   -0x3c(%ebp)
f0116efc:	83 7d c4 27          	cmpl   $0x27,-0x3c(%ebp)
f0116f00:	7e df                	jle    f0116ee1 <test_priority_normal_and_higher+0x7d5>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0116f02:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f0116f09:	eb 7a                	jmp    f0116f85 <test_priority_normal_and_higher+0x879>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0116f0b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116f0e:	8b 8c 85 74 fd ff ff 	mov    -0x28c(%ebp,%eax,4),%ecx
f0116f15:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116f18:	8b 58 78             	mov    0x78(%eax),%ebx
f0116f1b:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116f1e:	89 d0                	mov    %edx,%eax
f0116f20:	01 c0                	add    %eax,%eax
f0116f22:	01 d0                	add    %edx,%eax
f0116f24:	c1 e0 03             	shl    $0x3,%eax
f0116f27:	01 d8                	add    %ebx,%eax
f0116f29:	8b 00                	mov    (%eax),%eax
f0116f2b:	39 c1                	cmp    %eax,%ecx
f0116f2d:	74 17                	je     f0116f46 <test_priority_normal_and_higher+0x83a>
				panic("Working set should be moved properly to the new one");
f0116f2f:	83 ec 04             	sub    $0x4,%esp
f0116f32:	68 c8 ac 13 f0       	push   $0xf013acc8
f0116f37:	68 af 00 00 00       	push   $0xaf
f0116f3c:	68 f1 aa 13 f0       	push   $0xf013aaf1
f0116f41:	e8 bf 92 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0116f46:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116f49:	8b 8c 85 c4 fd ff ff 	mov    -0x23c(%ebp,%eax,4),%ecx
f0116f50:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116f53:	8b 58 78             	mov    0x78(%eax),%ebx
f0116f56:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116f59:	89 d0                	mov    %edx,%eax
f0116f5b:	01 c0                	add    %eax,%eax
f0116f5d:	01 d0                	add    %edx,%eax
f0116f5f:	c1 e0 03             	shl    $0x3,%eax
f0116f62:	01 d8                	add    %ebx,%eax
f0116f64:	8b 40 08             	mov    0x8(%eax),%eax
f0116f67:	39 c1                	cmp    %eax,%ecx
f0116f69:	74 17                	je     f0116f82 <test_priority_normal_and_higher+0x876>
				panic("Working set should be moved properly to the new one");
f0116f6b:	83 ec 04             	sub    $0x4,%esp
f0116f6e:	68 c8 ac 13 f0       	push   $0xf013acc8
f0116f73:	68 b2 00 00 00       	push   $0xb2
f0116f78:	68 f1 aa 13 f0       	push   $0xf013aaf1
f0116f7d:	e8 83 92 fe ff       	call   f0100205 <_panic>
		for(int i = 10; i < 40; i++)
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0116f82:	ff 45 c0             	incl   -0x40(%ebp)
f0116f85:	83 7d c0 13          	cmpl   $0x13,-0x40(%ebp)
f0116f89:	7e 80                	jle    f0116f0b <test_priority_normal_and_higher+0x7ff>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116f8b:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0116f92:	eb 7a                	jmp    f011700e <test_priority_normal_and_higher+0x902>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0116f94:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0116f97:	8b 8c 85 fc fc ff ff 	mov    -0x304(%ebp,%eax,4),%ecx
f0116f9e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116fa1:	8b 58 78             	mov    0x78(%eax),%ebx
f0116fa4:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0116fa7:	89 d0                	mov    %edx,%eax
f0116fa9:	01 c0                	add    %eax,%eax
f0116fab:	01 d0                	add    %edx,%eax
f0116fad:	c1 e0 03             	shl    $0x3,%eax
f0116fb0:	01 d8                	add    %ebx,%eax
f0116fb2:	8b 00                	mov    (%eax),%eax
f0116fb4:	39 c1                	cmp    %eax,%ecx
f0116fb6:	74 17                	je     f0116fcf <test_priority_normal_and_higher+0x8c3>
				panic("Working set should be moved properly to the new one");
f0116fb8:	83 ec 04             	sub    $0x4,%esp
f0116fbb:	68 c8 ac 13 f0       	push   $0xf013acc8
f0116fc0:	68 b8 00 00 00       	push   $0xb8
f0116fc5:	68 f1 aa 13 f0       	push   $0xf013aaf1
f0116fca:	e8 36 92 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0116fcf:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0116fd2:	8b 8c 85 38 fd ff ff 	mov    -0x2c8(%ebp,%eax,4),%ecx
f0116fd9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116fdc:	8b 58 78             	mov    0x78(%eax),%ebx
f0116fdf:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0116fe2:	89 d0                	mov    %edx,%eax
f0116fe4:	01 c0                	add    %eax,%eax
f0116fe6:	01 d0                	add    %edx,%eax
f0116fe8:	c1 e0 03             	shl    $0x3,%eax
f0116feb:	01 d8                	add    %ebx,%eax
f0116fed:	8b 40 08             	mov    0x8(%eax),%eax
f0116ff0:	39 c1                	cmp    %eax,%ecx
f0116ff2:	74 17                	je     f011700b <test_priority_normal_and_higher+0x8ff>
				panic("Working set should be moved properly to the new one");
f0116ff4:	83 ec 04             	sub    $0x4,%esp
f0116ff7:	68 c8 ac 13 f0       	push   $0xf013acc8
f0116ffc:	68 bb 00 00 00       	push   $0xbb
f0117001:	68 f1 aa 13 f0       	push   $0xf013aaf1
f0117006:	e8 fa 91 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f011700b:	ff 45 bc             	incl   -0x44(%ebp)
f011700e:	83 7d bc 0e          	cmpl   $0xe,-0x44(%ebp)
f0117012:	7e 80                	jle    f0116f94 <test_priority_normal_and_higher+0x888>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117014:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f011701b:	eb 7a                	jmp    f0117097 <test_priority_normal_and_higher+0x98b>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f011701d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117020:	8b 8c 85 ac fc ff ff 	mov    -0x354(%ebp,%eax,4),%ecx
f0117027:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011702a:	8b 58 78             	mov    0x78(%eax),%ebx
f011702d:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0117030:	89 d0                	mov    %edx,%eax
f0117032:	01 c0                	add    %eax,%eax
f0117034:	01 d0                	add    %edx,%eax
f0117036:	c1 e0 03             	shl    $0x3,%eax
f0117039:	01 d8                	add    %ebx,%eax
f011703b:	8b 00                	mov    (%eax),%eax
f011703d:	39 c1                	cmp    %eax,%ecx
f011703f:	74 17                	je     f0117058 <test_priority_normal_and_higher+0x94c>
				panic("Working set should be moved properly to the new one");
f0117041:	83 ec 04             	sub    $0x4,%esp
f0117044:	68 c8 ac 13 f0       	push   $0xf013acc8
f0117049:	68 c1 00 00 00       	push   $0xc1
f011704e:	68 f1 aa 13 f0       	push   $0xf013aaf1
f0117053:	e8 ad 91 fe ff       	call   f0100205 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0117058:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011705b:	8b 8c 85 d4 fc ff ff 	mov    -0x32c(%ebp,%eax,4),%ecx
f0117062:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117065:	8b 58 78             	mov    0x78(%eax),%ebx
f0117068:	8b 55 b8             	mov    -0x48(%ebp),%edx
f011706b:	89 d0                	mov    %edx,%eax
f011706d:	01 c0                	add    %eax,%eax
f011706f:	01 d0                	add    %edx,%eax
f0117071:	c1 e0 03             	shl    $0x3,%eax
f0117074:	01 d8                	add    %ebx,%eax
f0117076:	8b 40 08             	mov    0x8(%eax),%eax
f0117079:	39 c1                	cmp    %eax,%ecx
f011707b:	74 17                	je     f0117094 <test_priority_normal_and_higher+0x988>
				panic("Working set should be moved properly to the new one");
f011707d:	83 ec 04             	sub    $0x4,%esp
f0117080:	68 c8 ac 13 f0       	push   $0xf013acc8
f0117085:	68 c4 00 00 00       	push   $0xc4
f011708a:	68 f1 aa 13 f0       	push   $0xf013aaf1
f011708f:	e8 71 91 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117094:	ff 45 b8             	incl   -0x48(%ebp)
f0117097:	83 7d b8 09          	cmpl   $0x9,-0x48(%ebp)
f011709b:	7e 80                	jle    f011701d <test_priority_normal_and_higher+0x911>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		char command4[100] = "runall";
f011709d:	c7 85 40 ff ff ff 72 	movl   $0x616e7572,-0xc0(%ebp)
f01170a4:	75 6e 61 
f01170a7:	c7 85 44 ff ff ff 6c 	movl   $0x6c6c,-0xbc(%ebp)
f01170ae:	6c 00 00 
f01170b1:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f01170b7:	b9 17 00 00 00       	mov    $0x17,%ecx
f01170bc:	b8 00 00 00 00       	mov    $0x0,%eax
f01170c1:	89 d7                	mov    %edx,%edi
f01170c3:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f01170c5:	83 ec 0c             	sub    $0xc,%esp
f01170c8:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f01170ce:	50                   	push   %eax
f01170cf:	e8 9c 9c fe ff       	call   f0100d70 <execute_command>
f01170d4:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
	}
}
f01170d7:	eb 10                	jmp    f01170e9 <test_priority_normal_and_higher+0x9dd>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
f01170d9:	83 ec 0c             	sub    $0xc,%esp
f01170dc:	68 fc ac 13 f0       	push   $0xf013acfc
f01170e1:	e8 28 9c fe ff       	call   f0100d0e <cprintf>
f01170e6:	83 c4 10             	add    $0x10,%esp
	}
}
f01170e9:	90                   	nop
f01170ea:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01170ed:	5b                   	pop    %ebx
f01170ee:	5e                   	pop    %esi
f01170ef:	5f                   	pop    %edi
f01170f0:	5d                   	pop    %ebp
f01170f1:	c3                   	ret    

f01170f2 <test_priority_normal_and_lower>:

void test_priority_normal_and_lower()
{
f01170f2:	55                   	push   %ebp
f01170f3:	89 e5                	mov    %esp,%ebp
f01170f5:	57                   	push   %edi
f01170f6:	56                   	push   %esi
f01170f7:	53                   	push   %ebx
f01170f8:	81 ec ac 04 00 00    	sub    $0x4ac,%esp
	if(firstTime)
f01170fe:	a0 22 2d 19 f0       	mov    0xf0192d22,%al
f0117103:	84 c0                	test   %al,%al
f0117105:	0f 84 be 09 00 00    	je     f0117ac9 <test_priority_normal_and_lower+0x9d7>
		uint32 fact_WS[30];
		uint32 fact_TimeStamp[30];
		uint32 hello_WS[40];
		uint32 hello_TimeStamp[40];

		firstTime = 0;
f011710b:	c6 05 22 2d 19 f0 00 	movb   $0x0,0xf0192d22
		char command[100] = "load fos_add 20";
f0117112:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0117118:	bb 38 ad 13 f0       	mov    $0xf013ad38,%ebx
f011711d:	ba 04 00 00 00       	mov    $0x4,%edx
f0117122:	89 c7                	mov    %eax,%edi
f0117124:	89 de                	mov    %ebx,%esi
f0117126:	89 d1                	mov    %edx,%ecx
f0117128:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f011712a:	8d 95 00 fc ff ff    	lea    -0x400(%ebp),%edx
f0117130:	b9 15 00 00 00       	mov    $0x15,%ecx
f0117135:	b8 00 00 00 00       	mov    $0x0,%eax
f011713a:	89 d7                	mov    %edx,%edi
f011713c:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f011713e:	83 ec 0c             	sub    $0xc,%esp
f0117141:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0117147:	50                   	push   %eax
f0117148:	e8 23 9c fe ff       	call   f0100d70 <execute_command>
f011714d:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 30";
f0117150:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0117156:	bb f4 af 13 f0       	mov    $0xf013aff4,%ebx
f011715b:	ba 0d 00 00 00       	mov    $0xd,%edx
f0117160:	89 c7                	mov    %eax,%edi
f0117162:	89 de                	mov    %ebx,%esi
f0117164:	89 d1                	mov    %edx,%ecx
f0117166:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0117168:	8d 95 61 fc ff ff    	lea    -0x39f(%ebp),%edx
f011716e:	b9 57 00 00 00       	mov    $0x57,%ecx
f0117173:	b0 00                	mov    $0x0,%al
f0117175:	89 d7                	mov    %edx,%edi
f0117177:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0117179:	83 ec 0c             	sub    $0xc,%esp
f011717c:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0117182:	50                   	push   %eax
f0117183:	e8 e8 9b fe ff       	call   f0100d70 <execute_command>
f0117188:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 40";
f011718b:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0117191:	bb 58 b0 13 f0       	mov    $0xf013b058,%ebx
f0117196:	ba 17 00 00 00       	mov    $0x17,%edx
f011719b:	89 c7                	mov    %eax,%edi
f011719d:	89 de                	mov    %ebx,%esi
f011719f:	89 d1                	mov    %edx,%ecx
f01171a1:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01171a3:	8d 95 cf fc ff ff    	lea    -0x331(%ebp),%edx
f01171a9:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f01171ae:	b0 00                	mov    $0x0,%al
f01171b0:	89 d7                	mov    %edx,%edi
f01171b2:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f01171b4:	83 ec 0c             	sub    $0xc,%esp
f01171b7:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f01171bd:	50                   	push   %eax
f01171be:	e8 ad 9b fe ff       	call   f0100d70 <execute_command>
f01171c3:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f01171c6:	83 ec 04             	sub    $0x4,%esp
f01171c9:	6a 00                	push   $0x0
f01171cb:	8d 45 b8             	lea    -0x48(%ebp),%eax
f01171ce:	50                   	push   %eax
f01171cf:	68 00 10 00 00       	push   $0x1000
f01171d4:	e8 77 2b ff ff       	call   f0109d50 <envid2env>
f01171d9:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f01171dc:	83 ec 04             	sub    $0x4,%esp
f01171df:	6a 00                	push   $0x0
f01171e1:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01171e4:	50                   	push   %eax
f01171e5:	68 01 10 00 00       	push   $0x1001
f01171ea:	e8 61 2b ff ff       	call   f0109d50 <envid2env>
f01171ef:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f01171f2:	83 ec 04             	sub    $0x4,%esp
f01171f5:	6a 00                	push   $0x0
f01171f7:	8d 45 b0             	lea    -0x50(%ebp),%eax
f01171fa:	50                   	push   %eax
f01171fb:	68 02 10 00 00       	push   $0x1002
f0117200:	e8 4b 2b ff ff       	call   f0109d50 <envid2env>
f0117205:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0117208:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011720b:	85 c0                	test   %eax,%eax
f011720d:	74 0e                	je     f011721d <test_priority_normal_and_lower+0x12b>
f011720f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117212:	85 c0                	test   %eax,%eax
f0117214:	74 07                	je     f011721d <test_priority_normal_and_lower+0x12b>
f0117216:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117219:	85 c0                	test   %eax,%eax
f011721b:	75 17                	jne    f0117234 <test_priority_normal_and_lower+0x142>
			panic("Loading programs failed\n");
f011721d:	83 ec 04             	sub    $0x4,%esp
f0117220:	68 d8 aa 13 f0       	push   $0xf013aad8
f0117225:	68 eb 00 00 00       	push   $0xeb
f011722a:	68 f1 aa 13 f0       	push   $0xf013aaf1
f011722f:	e8 d1 8f fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0117234:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117237:	8b 40 74             	mov    0x74(%eax),%eax
f011723a:	83 f8 14             	cmp    $0x14,%eax
f011723d:	75 16                	jne    f0117255 <test_priority_normal_and_lower+0x163>
f011723f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117242:	8b 40 74             	mov    0x74(%eax),%eax
f0117245:	83 f8 1e             	cmp    $0x1e,%eax
f0117248:	75 0b                	jne    f0117255 <test_priority_normal_and_lower+0x163>
f011724a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011724d:	8b 40 74             	mov    0x74(%eax),%eax
f0117250:	83 f8 28             	cmp    $0x28,%eax
f0117253:	74 17                	je     f011726c <test_priority_normal_and_lower+0x17a>
			panic("The programs should be initially loaded with the given working set size\n");
f0117255:	83 ec 04             	sub    $0x4,%esp
f0117258:	68 0c ab 13 f0       	push   $0xf013ab0c
f011725d:	68 ee 00 00 00       	push   $0xee
f0117262:	68 f1 aa 13 f0       	push   $0xf013aaf1
f0117267:	e8 99 8f fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 20; i++)
f011726c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0117273:	eb 44                	jmp    f01172b9 <test_priority_normal_and_lower+0x1c7>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0117275:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117278:	8b 48 78             	mov    0x78(%eax),%ecx
f011727b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011727e:	89 d0                	mov    %edx,%eax
f0117280:	01 c0                	add    %eax,%eax
f0117282:	01 d0                	add    %edx,%eax
f0117284:	c1 e0 03             	shl    $0x3,%eax
f0117287:	01 c8                	add    %ecx,%eax
f0117289:	8b 10                	mov    (%eax),%edx
f011728b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011728e:	89 94 85 50 fb ff ff 	mov    %edx,-0x4b0(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0117295:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117298:	8b 48 78             	mov    0x78(%eax),%ecx
f011729b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011729e:	89 d0                	mov    %edx,%eax
f01172a0:	01 c0                	add    %eax,%eax
f01172a2:	01 d0                	add    %edx,%eax
f01172a4:	c1 e0 03             	shl    $0x3,%eax
f01172a7:	01 c8                	add    %ecx,%eax
f01172a9:	8b 50 08             	mov    0x8(%eax),%edx
f01172ac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01172af:	89 94 85 a0 fb ff ff 	mov    %edx,-0x460(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f01172b6:	ff 45 e4             	incl   -0x1c(%ebp)
f01172b9:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f01172bd:	7e b6                	jle    f0117275 <test_priority_normal_and_lower+0x183>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f01172bf:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f01172c6:	eb 44                	jmp    f011730c <test_priority_normal_and_lower+0x21a>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f01172c8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01172cb:	8b 48 78             	mov    0x78(%eax),%ecx
f01172ce:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01172d1:	89 d0                	mov    %edx,%eax
f01172d3:	01 c0                	add    %eax,%eax
f01172d5:	01 d0                	add    %edx,%eax
f01172d7:	c1 e0 03             	shl    $0x3,%eax
f01172da:	01 c8                	add    %ecx,%eax
f01172dc:	8b 10                	mov    (%eax),%edx
f01172de:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01172e1:	89 94 85 80 fd ff ff 	mov    %edx,-0x280(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f01172e8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01172eb:	8b 48 78             	mov    0x78(%eax),%ecx
f01172ee:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01172f1:	89 d0                	mov    %edx,%eax
f01172f3:	01 c0                	add    %eax,%eax
f01172f5:	01 d0                	add    %edx,%eax
f01172f7:	c1 e0 03             	shl    $0x3,%eax
f01172fa:	01 c8                	add    %ecx,%eax
f01172fc:	8b 50 08             	mov    0x8(%eax),%edx
f01172ff:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0117302:	89 94 85 f8 fd ff ff 	mov    %edx,-0x208(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0117309:	ff 45 e0             	incl   -0x20(%ebp)
f011730c:	83 7d e0 1d          	cmpl   $0x1d,-0x20(%ebp)
f0117310:	7e b6                	jle    f01172c8 <test_priority_normal_and_lower+0x1d6>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0117312:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0117319:	eb 44                	jmp    f011735f <test_priority_normal_and_lower+0x26d>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f011731b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011731e:	8b 48 78             	mov    0x78(%eax),%ecx
f0117321:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0117324:	89 d0                	mov    %edx,%eax
f0117326:	01 c0                	add    %eax,%eax
f0117328:	01 d0                	add    %edx,%eax
f011732a:	c1 e0 03             	shl    $0x3,%eax
f011732d:	01 c8                	add    %ecx,%eax
f011732f:	8b 10                	mov    (%eax),%edx
f0117331:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117334:	89 94 85 70 fe ff ff 	mov    %edx,-0x190(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f011733b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011733e:	8b 48 78             	mov    0x78(%eax),%ecx
f0117341:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0117344:	89 d0                	mov    %edx,%eax
f0117346:	01 c0                	add    %eax,%eax
f0117348:	01 d0                	add    %edx,%eax
f011734a:	c1 e0 03             	shl    $0x3,%eax
f011734d:	01 c8                	add    %ecx,%eax
f011734f:	8b 50 08             	mov    0x8(%eax),%edx
f0117352:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117355:	89 94 85 10 ff ff ff 	mov    %edx,-0xf0(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f011735c:	ff 45 dc             	incl   -0x24(%ebp)
f011735f:	83 7d dc 27          	cmpl   $0x27,-0x24(%ebp)
f0117363:	7e b6                	jle    f011731b <test_priority_normal_and_lower+0x229>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0117365:	e8 79 5a ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011736a:	89 45 c0             	mov    %eax,-0x40(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011736d:	e8 34 ca fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0117372:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0117375:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117378:	83 ec 08             	sub    $0x8,%esp
f011737b:	6a 03                	push   $0x3
f011737d:	50                   	push   %eax
f011737e:	e8 ab 3e ff ff       	call   f010b22e <set_program_priority>
f0117383:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0117386:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117389:	83 ec 08             	sub    $0x8,%esp
f011738c:	6a 03                	push   $0x3
f011738e:	50                   	push   %eax
f011738f:	e8 9a 3e ff ff       	call   f010b22e <set_program_priority>
f0117394:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0117397:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011739a:	83 ec 08             	sub    $0x8,%esp
f011739d:	6a 03                	push   $0x3
f011739f:	50                   	push   %eax
f01173a0:	e8 89 3e ff ff       	call   f010b22e <set_program_priority>
f01173a5:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01173a8:	e8 f9 c9 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f01173ad:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01173b0:	74 17                	je     f01173c9 <test_priority_normal_and_lower+0x2d7>
f01173b2:	83 ec 04             	sub    $0x4,%esp
f01173b5:	68 58 ab 13 f0       	push   $0xf013ab58
f01173ba:	68 0a 01 00 00       	push   $0x10a
f01173bf:	68 f1 aa 13 f0       	push   $0xf013aaf1
f01173c4:	e8 3c 8e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01173c9:	e8 15 5a ff ff       	call   f010cde3 <sys_calculate_free_frames>
f01173ce:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f01173d1:	74 17                	je     f01173ea <test_priority_normal_and_lower+0x2f8>
f01173d3:	83 ec 04             	sub    $0x4,%esp
f01173d6:	68 58 ab 13 f0       	push   $0xf013ab58
f01173db:	68 0b 01 00 00       	push   $0x10b
f01173e0:	68 f1 aa 13 f0       	push   $0xf013aaf1
f01173e5:	e8 1b 8e fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f01173ea:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01173ed:	8b 40 74             	mov    0x74(%eax),%eax
f01173f0:	83 f8 14             	cmp    $0x14,%eax
f01173f3:	75 16                	jne    f011740b <test_priority_normal_and_lower+0x319>
f01173f5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01173f8:	8b 40 74             	mov    0x74(%eax),%eax
f01173fb:	83 f8 1e             	cmp    $0x1e,%eax
f01173fe:	75 0b                	jne    f011740b <test_priority_normal_and_lower+0x319>
f0117400:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117403:	8b 40 74             	mov    0x74(%eax),%eax
f0117406:	83 f8 28             	cmp    $0x28,%eax
f0117409:	74 17                	je     f0117422 <test_priority_normal_and_lower+0x330>
			panic("The programs' working set size should not change after setting priority to normal\n");
f011740b:	83 ec 04             	sub    $0x4,%esp
f011740e:	68 84 ab 13 f0       	push   $0xf013ab84
f0117413:	68 0e 01 00 00       	push   $0x10e
f0117418:	68 f1 aa 13 f0       	push   $0xf013aaf1
f011741d:	e8 e3 8d fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f0117422:	e8 bc 59 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0117427:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011742a:	e8 77 c9 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011742f:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f0117432:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117435:	83 ec 08             	sub    $0x8,%esp
f0117438:	6a 02                	push   $0x2
f011743a:	50                   	push   %eax
f011743b:	e8 ee 3d ff ff       	call   f010b22e <set_program_priority>
f0117440:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f0117443:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117446:	83 ec 08             	sub    $0x8,%esp
f0117449:	6a 02                	push   $0x2
f011744b:	50                   	push   %eax
f011744c:	e8 dd 3d ff ff       	call   f010b22e <set_program_priority>
f0117451:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f0117454:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117457:	83 ec 08             	sub    $0x8,%esp
f011745a:	6a 02                	push   $0x2
f011745c:	50                   	push   %eax
f011745d:	e8 cc 3d ff ff       	call   f010b22e <set_program_priority>
f0117462:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117465:	e8 3c c9 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011746a:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011746d:	74 17                	je     f0117486 <test_priority_normal_and_lower+0x394>
f011746f:	83 ec 04             	sub    $0x4,%esp
f0117472:	68 58 ab 13 f0       	push   $0xf013ab58
f0117477:	68 18 01 00 00       	push   $0x118
f011747c:	68 f1 aa 13 f0       	push   $0xf013aaf1
f0117481:	e8 7f 8d fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0117486:	e8 58 59 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011748b:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f011748e:	74 21                	je     f01174b1 <test_priority_normal_and_lower+0x3bf>
f0117490:	e8 4e 59 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0117495:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117498:	29 c2                	sub    %eax,%edx
f011749a:	89 d0                	mov    %edx,%eax
f011749c:	50                   	push   %eax
f011749d:	68 d8 ab 13 f0       	push   $0xf013abd8
f01174a2:	68 19 01 00 00       	push   $0x119
f01174a7:	68 f1 aa 13 f0       	push   $0xf013aaf1
f01174ac:	e8 54 8d fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f01174b1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01174b4:	8b 40 74             	mov    0x74(%eax),%eax
f01174b7:	83 f8 0a             	cmp    $0xa,%eax
f01174ba:	75 16                	jne    f01174d2 <test_priority_normal_and_lower+0x3e0>
f01174bc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01174bf:	8b 40 74             	mov    0x74(%eax),%eax
f01174c2:	83 f8 0f             	cmp    $0xf,%eax
f01174c5:	75 0b                	jne    f01174d2 <test_priority_normal_and_lower+0x3e0>
f01174c7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01174ca:	8b 40 74             	mov    0x74(%eax),%eax
f01174cd:	83 f8 14             	cmp    $0x14,%eax
f01174d0:	74 17                	je     f01174e9 <test_priority_normal_and_lower+0x3f7>
			panic("The programs' working set size should be doubled only if it is full\n");
f01174d2:	83 ec 04             	sub    $0x4,%esp
f01174d5:	68 08 ac 13 f0       	push   $0xf013ac08
f01174da:	68 1c 01 00 00       	push   $0x11c
f01174df:	68 f1 aa 13 f0       	push   $0xf013aaf1
f01174e4:	e8 1c 8d fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f01174e9:	e8 f5 58 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f01174ee:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01174f1:	e8 b0 c8 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f01174f6:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f01174f9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01174fc:	83 ec 08             	sub    $0x8,%esp
f01174ff:	6a 02                	push   $0x2
f0117501:	50                   	push   %eax
f0117502:	e8 27 3d ff ff       	call   f010b22e <set_program_priority>
f0117507:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f011750a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011750d:	83 ec 08             	sub    $0x8,%esp
f0117510:	6a 02                	push   $0x2
f0117512:	50                   	push   %eax
f0117513:	e8 16 3d ff ff       	call   f010b22e <set_program_priority>
f0117518:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f011751b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011751e:	83 ec 08             	sub    $0x8,%esp
f0117521:	6a 02                	push   $0x2
f0117523:	50                   	push   %eax
f0117524:	e8 05 3d ff ff       	call   f010b22e <set_program_priority>
f0117529:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011752c:	e8 75 c8 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0117531:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117534:	74 17                	je     f011754d <test_priority_normal_and_lower+0x45b>
f0117536:	83 ec 04             	sub    $0x4,%esp
f0117539:	68 58 ab 13 f0       	push   $0xf013ab58
f011753e:	68 26 01 00 00       	push   $0x126
f0117543:	68 f1 aa 13 f0       	push   $0xf013aaf1
f0117548:	e8 b8 8c fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f011754d:	e8 91 58 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0117552:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0117555:	74 21                	je     f0117578 <test_priority_normal_and_lower+0x486>
f0117557:	e8 87 58 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011755c:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011755f:	29 c2                	sub    %eax,%edx
f0117561:	89 d0                	mov    %edx,%eax
f0117563:	50                   	push   %eax
f0117564:	68 d8 ab 13 f0       	push   $0xf013abd8
f0117569:	68 27 01 00 00       	push   $0x127
f011756e:	68 f1 aa 13 f0       	push   $0xf013aaf1
f0117573:	e8 8d 8c fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0117578:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011757b:	8b 40 74             	mov    0x74(%eax),%eax
f011757e:	83 f8 0a             	cmp    $0xa,%eax
f0117581:	75 16                	jne    f0117599 <test_priority_normal_and_lower+0x4a7>
f0117583:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117586:	8b 40 74             	mov    0x74(%eax),%eax
f0117589:	83 f8 0f             	cmp    $0xf,%eax
f011758c:	75 0b                	jne    f0117599 <test_priority_normal_and_lower+0x4a7>
f011758e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117591:	8b 40 74             	mov    0x74(%eax),%eax
f0117594:	83 f8 0a             	cmp    $0xa,%eax
f0117597:	74 17                	je     f01175b0 <test_priority_normal_and_lower+0x4be>
			panic("The programs' working set size should be doubled only if it is full\n");
f0117599:	83 ec 04             	sub    $0x4,%esp
f011759c:	68 08 ac 13 f0       	push   $0xf013ac08
f01175a1:	68 2a 01 00 00       	push   $0x12a
f01175a6:	68 f1 aa 13 f0       	push   $0xf013aaf1
f01175ab:	e8 55 8c fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 10; i++)
f01175b0:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01175b7:	eb 7a                	jmp    f0117633 <test_priority_normal_and_lower+0x541>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f01175b9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01175bc:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f01175c3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01175c6:	8b 58 78             	mov    0x78(%eax),%ebx
f01175c9:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01175cc:	89 d0                	mov    %edx,%eax
f01175ce:	01 c0                	add    %eax,%eax
f01175d0:	01 d0                	add    %edx,%eax
f01175d2:	c1 e0 03             	shl    $0x3,%eax
f01175d5:	01 d8                	add    %ebx,%eax
f01175d7:	8b 00                	mov    (%eax),%eax
f01175d9:	39 c1                	cmp    %eax,%ecx
f01175db:	74 17                	je     f01175f4 <test_priority_normal_and_lower+0x502>
				panic("Working set should be moved properly to the new one");
f01175dd:	83 ec 04             	sub    $0x4,%esp
f01175e0:	68 c8 ac 13 f0       	push   $0xf013acc8
f01175e5:	68 2f 01 00 00       	push   $0x12f
f01175ea:	68 f1 aa 13 f0       	push   $0xf013aaf1
f01175ef:	e8 11 8c fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f01175f4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01175f7:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f01175fe:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117601:	8b 58 78             	mov    0x78(%eax),%ebx
f0117604:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0117607:	89 d0                	mov    %edx,%eax
f0117609:	01 c0                	add    %eax,%eax
f011760b:	01 d0                	add    %edx,%eax
f011760d:	c1 e0 03             	shl    $0x3,%eax
f0117610:	01 d8                	add    %ebx,%eax
f0117612:	8b 40 08             	mov    0x8(%eax),%eax
f0117615:	39 c1                	cmp    %eax,%ecx
f0117617:	74 17                	je     f0117630 <test_priority_normal_and_lower+0x53e>
				panic("Working set should be moved properly to the new one");
f0117619:	83 ec 04             	sub    $0x4,%esp
f011761c:	68 c8 ac 13 f0       	push   $0xf013acc8
f0117621:	68 32 01 00 00       	push   $0x132
f0117626:	68 f1 aa 13 f0       	push   $0xf013aaf1
f011762b:	e8 d5 8b fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs' working set size should be doubled only if it is full\n");

		for(int i = 0; i < 10; i++)
f0117630:	ff 45 d8             	incl   -0x28(%ebp)
f0117633:	83 7d d8 09          	cmpl   $0x9,-0x28(%ebp)
f0117637:	7e 80                	jle    f01175b9 <test_priority_normal_and_lower+0x4c7>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117639:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0117640:	eb 7a                	jmp    f01176bc <test_priority_normal_and_lower+0x5ca>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0117642:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117645:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f011764c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011764f:	8b 58 78             	mov    0x78(%eax),%ebx
f0117652:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0117655:	89 d0                	mov    %edx,%eax
f0117657:	01 c0                	add    %eax,%eax
f0117659:	01 d0                	add    %edx,%eax
f011765b:	c1 e0 03             	shl    $0x3,%eax
f011765e:	01 d8                	add    %ebx,%eax
f0117660:	8b 00                	mov    (%eax),%eax
f0117662:	39 c1                	cmp    %eax,%ecx
f0117664:	74 17                	je     f011767d <test_priority_normal_and_lower+0x58b>
				panic("Working set should be moved properly to the new one");
f0117666:	83 ec 04             	sub    $0x4,%esp
f0117669:	68 c8 ac 13 f0       	push   $0xf013acc8
f011766e:	68 38 01 00 00       	push   $0x138
f0117673:	68 f1 aa 13 f0       	push   $0xf013aaf1
f0117678:	e8 88 8b fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f011767d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117680:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0117687:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011768a:	8b 58 78             	mov    0x78(%eax),%ebx
f011768d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0117690:	89 d0                	mov    %edx,%eax
f0117692:	01 c0                	add    %eax,%eax
f0117694:	01 d0                	add    %edx,%eax
f0117696:	c1 e0 03             	shl    $0x3,%eax
f0117699:	01 d8                	add    %ebx,%eax
f011769b:	8b 40 08             	mov    0x8(%eax),%eax
f011769e:	39 c1                	cmp    %eax,%ecx
f01176a0:	74 17                	je     f01176b9 <test_priority_normal_and_lower+0x5c7>
				panic("Working set should be moved properly to the new one");
f01176a2:	83 ec 04             	sub    $0x4,%esp
f01176a5:	68 c8 ac 13 f0       	push   $0xf013acc8
f01176aa:	68 3b 01 00 00       	push   $0x13b
f01176af:	68 f1 aa 13 f0       	push   $0xf013aaf1
f01176b4:	e8 4c 8b fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f01176b9:	ff 45 d4             	incl   -0x2c(%ebp)
f01176bc:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f01176c0:	7e 80                	jle    f0117642 <test_priority_normal_and_lower+0x550>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f01176c2:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f01176c9:	eb 7a                	jmp    f0117745 <test_priority_normal_and_lower+0x653>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f01176cb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01176ce:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f01176d5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01176d8:	8b 58 78             	mov    0x78(%eax),%ebx
f01176db:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01176de:	89 d0                	mov    %edx,%eax
f01176e0:	01 c0                	add    %eax,%eax
f01176e2:	01 d0                	add    %edx,%eax
f01176e4:	c1 e0 03             	shl    $0x3,%eax
f01176e7:	01 d8                	add    %ebx,%eax
f01176e9:	8b 00                	mov    (%eax),%eax
f01176eb:	39 c1                	cmp    %eax,%ecx
f01176ed:	74 17                	je     f0117706 <test_priority_normal_and_lower+0x614>
				panic("Working set should be moved properly to the new one");
f01176ef:	83 ec 04             	sub    $0x4,%esp
f01176f2:	68 c8 ac 13 f0       	push   $0xf013acc8
f01176f7:	68 41 01 00 00       	push   $0x141
f01176fc:	68 f1 aa 13 f0       	push   $0xf013aaf1
f0117701:	e8 ff 8a fe ff       	call   f0100205 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0117706:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117709:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0117710:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117713:	8b 58 78             	mov    0x78(%eax),%ebx
f0117716:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0117719:	89 d0                	mov    %edx,%eax
f011771b:	01 c0                	add    %eax,%eax
f011771d:	01 d0                	add    %edx,%eax
f011771f:	c1 e0 03             	shl    $0x3,%eax
f0117722:	01 d8                	add    %ebx,%eax
f0117724:	8b 40 08             	mov    0x8(%eax),%eax
f0117727:	39 c1                	cmp    %eax,%ecx
f0117729:	74 17                	je     f0117742 <test_priority_normal_and_lower+0x650>
				panic("Working set should be moved properly to the new one");
f011772b:	83 ec 04             	sub    $0x4,%esp
f011772e:	68 c8 ac 13 f0       	push   $0xf013acc8
f0117733:	68 44 01 00 00       	push   $0x144
f0117738:	68 f1 aa 13 f0       	push   $0xf013aaf1
f011773d:	e8 c3 8a fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117742:	ff 45 d0             	incl   -0x30(%ebp)
f0117745:	83 7d d0 09          	cmpl   $0x9,-0x30(%ebp)
f0117749:	7e 80                	jle    f01176cb <test_priority_normal_and_lower+0x5d9>
			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		// Set priority to low
		freeFrames = sys_calculate_free_frames();
f011774b:	e8 93 56 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0117750:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117753:	e8 4e c6 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0117758:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f011775b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011775e:	83 ec 08             	sub    $0x8,%esp
f0117761:	6a 01                	push   $0x1
f0117763:	50                   	push   %eax
f0117764:	e8 c5 3a ff ff       	call   f010b22e <set_program_priority>
f0117769:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 1);
f011776c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011776f:	83 ec 08             	sub    $0x8,%esp
f0117772:	6a 01                	push   $0x1
f0117774:	50                   	push   %eax
f0117775:	e8 b4 3a ff ff       	call   f010b22e <set_program_priority>
f011777a:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 1);
f011777d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117780:	83 ec 08             	sub    $0x8,%esp
f0117783:	6a 01                	push   $0x1
f0117785:	50                   	push   %eax
f0117786:	e8 a3 3a ff ff       	call   f010b22e <set_program_priority>
f011778b:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011778e:	e8 13 c6 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0117793:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117796:	74 17                	je     f01177af <test_priority_normal_and_lower+0x6bd>
f0117798:	83 ec 04             	sub    $0x4,%esp
f011779b:	68 58 ab 13 f0       	push   $0xf013ab58
f01177a0:	68 4d 01 00 00       	push   $0x14d
f01177a5:	68 f1 aa 13 f0       	push   $0xf013aaf1
f01177aa:	e8 56 8a fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (5+3+5)) panic("Old working set and extra pages in WS should be removed properly %d\n");
f01177af:	e8 2f 56 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f01177b4:	2b 45 c0             	sub    -0x40(%ebp),%eax
f01177b7:	83 f8 0d             	cmp    $0xd,%eax
f01177ba:	74 17                	je     f01177d3 <test_priority_normal_and_lower+0x6e1>
f01177bc:	83 ec 04             	sub    $0x4,%esp
f01177bf:	68 64 ae 13 f0       	push   $0xf013ae64
f01177c4:	68 4e 01 00 00       	push   $0x14e
f01177c9:	68 f1 aa 13 f0       	push   $0xf013aaf1
f01177ce:	e8 32 8a fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 5 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f01177d3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01177d6:	8b 40 74             	mov    0x74(%eax),%eax
f01177d9:	83 f8 05             	cmp    $0x5,%eax
f01177dc:	75 16                	jne    f01177f4 <test_priority_normal_and_lower+0x702>
f01177de:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01177e1:	8b 40 74             	mov    0x74(%eax),%eax
f01177e4:	83 f8 07             	cmp    $0x7,%eax
f01177e7:	75 0b                	jne    f01177f4 <test_priority_normal_and_lower+0x702>
f01177e9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01177ec:	8b 40 74             	mov    0x74(%eax),%eax
f01177ef:	83 f8 05             	cmp    $0x5,%eax
f01177f2:	74 17                	je     f011780b <test_priority_normal_and_lower+0x719>
			panic("The programs' working set size should be half\n");
f01177f4:	83 ec 04             	sub    $0x4,%esp
f01177f7:	68 ac ae 13 f0       	push   $0xf013aeac
f01177fc:	68 51 01 00 00       	push   $0x151
f0117801:	68 f1 aa 13 f0       	push   $0xf013aaf1
f0117806:	e8 fa 89 fe ff       	call   f0100205 <_panic>


		freeFrames = sys_calculate_free_frames();
f011780b:	e8 d3 55 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0117810:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117813:	e8 8e c5 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0117818:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f011781b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011781e:	83 ec 08             	sub    $0x8,%esp
f0117821:	6a 01                	push   $0x1
f0117823:	50                   	push   %eax
f0117824:	e8 05 3a ff ff       	call   f010b22e <set_program_priority>
f0117829:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011782c:	e8 75 c5 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0117831:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117834:	74 17                	je     f011784d <test_priority_normal_and_lower+0x75b>
f0117836:	83 ec 04             	sub    $0x4,%esp
f0117839:	68 58 ab 13 f0       	push   $0xf013ab58
f011783e:	68 57 01 00 00       	push   $0x157
f0117843:	68 f1 aa 13 f0       	push   $0xf013aaf1
f0117848:	e8 b8 89 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");
f011784d:	e8 91 55 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0117852:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0117855:	83 f8 03             	cmp    $0x3,%eax
f0117858:	74 17                	je     f0117871 <test_priority_normal_and_lower+0x77f>
f011785a:	83 ec 04             	sub    $0x4,%esp
f011785d:	68 58 ab 13 f0       	push   $0xf013ab58
f0117862:	68 58 01 00 00       	push   $0x158
f0117867:	68 f1 aa 13 f0       	push   $0xf013aaf1
f011786c:	e8 94 89 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0117871:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117874:	8b 40 74             	mov    0x74(%eax),%eax
f0117877:	83 f8 02             	cmp    $0x2,%eax
f011787a:	75 16                	jne    f0117892 <test_priority_normal_and_lower+0x7a0>
f011787c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011787f:	8b 40 74             	mov    0x74(%eax),%eax
f0117882:	83 f8 07             	cmp    $0x7,%eax
f0117885:	75 0b                	jne    f0117892 <test_priority_normal_and_lower+0x7a0>
f0117887:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011788a:	8b 40 74             	mov    0x74(%eax),%eax
f011788d:	83 f8 05             	cmp    $0x5,%eax
f0117890:	74 17                	je     f01178a9 <test_priority_normal_and_lower+0x7b7>
			panic("The programs' working set size should be doubled if full\n");
f0117892:	83 ec 04             	sub    $0x4,%esp
f0117895:	68 8c ac 13 f0       	push   $0xf013ac8c
f011789a:	68 5b 01 00 00       	push   $0x15b
f011789f:	68 f1 aa 13 f0       	push   $0xf013aaf1
f01178a4:	e8 5c 89 fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 2; i++)
f01178a9:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01178b0:	e9 80 00 00 00       	jmp    f0117935 <test_priority_normal_and_lower+0x843>
		{
			if(add_WS[i+8] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f01178b5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01178b8:	83 c0 08             	add    $0x8,%eax
f01178bb:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f01178c2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01178c5:	8b 58 78             	mov    0x78(%eax),%ebx
f01178c8:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01178cb:	89 d0                	mov    %edx,%eax
f01178cd:	01 c0                	add    %eax,%eax
f01178cf:	01 d0                	add    %edx,%eax
f01178d1:	c1 e0 03             	shl    $0x3,%eax
f01178d4:	01 d8                	add    %ebx,%eax
f01178d6:	8b 00                	mov    (%eax),%eax
f01178d8:	39 c1                	cmp    %eax,%ecx
f01178da:	74 17                	je     f01178f3 <test_priority_normal_and_lower+0x801>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01178dc:	83 ec 04             	sub    $0x4,%esp
f01178df:	68 dc ae 13 f0       	push   $0xf013aedc
f01178e4:	68 60 01 00 00       	push   $0x160
f01178e9:	68 f1 aa 13 f0       	push   $0xf013aaf1
f01178ee:	e8 12 89 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f01178f3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01178f6:	83 c0 08             	add    $0x8,%eax
f01178f9:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0117900:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117903:	8b 58 78             	mov    0x78(%eax),%ebx
f0117906:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0117909:	89 d0                	mov    %edx,%eax
f011790b:	01 c0                	add    %eax,%eax
f011790d:	01 d0                	add    %edx,%eax
f011790f:	c1 e0 03             	shl    $0x3,%eax
f0117912:	01 d8                	add    %ebx,%eax
f0117914:	8b 40 08             	mov    0x8(%eax),%eax
f0117917:	39 c1                	cmp    %eax,%ecx
f0117919:	74 17                	je     f0117932 <test_priority_normal_and_lower+0x840>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f011791b:	83 ec 04             	sub    $0x4,%esp
f011791e:	68 dc ae 13 f0       	push   $0xf013aedc
f0117923:	68 63 01 00 00       	push   $0x163
f0117928:	68 f1 aa 13 f0       	push   $0xf013aaf1
f011792d:	e8 d3 88 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 0; i < 2; i++)
f0117932:	ff 45 cc             	incl   -0x34(%ebp)
f0117935:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f0117939:	0f 8e 76 ff ff ff    	jle    f01178b5 <test_priority_normal_and_lower+0x7c3>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f011793f:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f0117946:	e9 80 00 00 00       	jmp    f01179cb <test_priority_normal_and_lower+0x8d9>
		{
			if(fact_WS[i+3] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f011794b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011794e:	83 c0 03             	add    $0x3,%eax
f0117951:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0117958:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011795b:	8b 58 78             	mov    0x78(%eax),%ebx
f011795e:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0117961:	89 d0                	mov    %edx,%eax
f0117963:	01 c0                	add    %eax,%eax
f0117965:	01 d0                	add    %edx,%eax
f0117967:	c1 e0 03             	shl    $0x3,%eax
f011796a:	01 d8                	add    %ebx,%eax
f011796c:	8b 00                	mov    (%eax),%eax
f011796e:	39 c1                	cmp    %eax,%ecx
f0117970:	74 17                	je     f0117989 <test_priority_normal_and_lower+0x897>
				panic("%d Working set should be moved properly to the new one, removed pages are chosen based on replacement policy", i);
f0117972:	ff 75 c8             	pushl  -0x38(%ebp)
f0117975:	68 48 af 13 f0       	push   $0xf013af48
f011797a:	68 69 01 00 00       	push   $0x169
f011797f:	68 f1 aa 13 f0       	push   $0xf013aaf1
f0117984:	e8 7c 88 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0117989:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011798c:	83 c0 03             	add    $0x3,%eax
f011798f:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0117996:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117999:	8b 58 78             	mov    0x78(%eax),%ebx
f011799c:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011799f:	89 d0                	mov    %edx,%eax
f01179a1:	01 c0                	add    %eax,%eax
f01179a3:	01 d0                	add    %edx,%eax
f01179a5:	c1 e0 03             	shl    $0x3,%eax
f01179a8:	01 d8                	add    %ebx,%eax
f01179aa:	8b 40 08             	mov    0x8(%eax),%eax
f01179ad:	39 c1                	cmp    %eax,%ecx
f01179af:	74 17                	je     f01179c8 <test_priority_normal_and_lower+0x8d6>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01179b1:	83 ec 04             	sub    $0x4,%esp
f01179b4:	68 dc ae 13 f0       	push   $0xf013aedc
f01179b9:	68 6c 01 00 00       	push   $0x16c
f01179be:	68 f1 aa 13 f0       	push   $0xf013aaf1
f01179c3:	e8 3d 88 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f01179c8:	ff 45 c8             	incl   -0x38(%ebp)
f01179cb:	83 7d c8 06          	cmpl   $0x6,-0x38(%ebp)
f01179cf:	0f 8e 76 ff ff ff    	jle    f011794b <test_priority_normal_and_lower+0x859>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f01179d5:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f01179dc:	e9 80 00 00 00       	jmp    f0117a61 <test_priority_normal_and_lower+0x96f>
		{
			if(hello_WS[i+5] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f01179e1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01179e4:	83 c0 05             	add    $0x5,%eax
f01179e7:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f01179ee:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01179f1:	8b 58 78             	mov    0x78(%eax),%ebx
f01179f4:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01179f7:	89 d0                	mov    %edx,%eax
f01179f9:	01 c0                	add    %eax,%eax
f01179fb:	01 d0                	add    %edx,%eax
f01179fd:	c1 e0 03             	shl    $0x3,%eax
f0117a00:	01 d8                	add    %ebx,%eax
f0117a02:	8b 00                	mov    (%eax),%eax
f0117a04:	39 c1                	cmp    %eax,%ecx
f0117a06:	74 17                	je     f0117a1f <test_priority_normal_and_lower+0x92d>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117a08:	83 ec 04             	sub    $0x4,%esp
f0117a0b:	68 dc ae 13 f0       	push   $0xf013aedc
f0117a10:	68 72 01 00 00       	push   $0x172
f0117a15:	68 f1 aa 13 f0       	push   $0xf013aaf1
f0117a1a:	e8 e6 87 fe ff       	call   f0100205 <_panic>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0117a1f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117a22:	83 c0 05             	add    $0x5,%eax
f0117a25:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0117a2c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117a2f:	8b 58 78             	mov    0x78(%eax),%ebx
f0117a32:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0117a35:	89 d0                	mov    %edx,%eax
f0117a37:	01 c0                	add    %eax,%eax
f0117a39:	01 d0                	add    %edx,%eax
f0117a3b:	c1 e0 03             	shl    $0x3,%eax
f0117a3e:	01 d8                	add    %ebx,%eax
f0117a40:	8b 40 08             	mov    0x8(%eax),%eax
f0117a43:	39 c1                	cmp    %eax,%ecx
f0117a45:	74 17                	je     f0117a5e <test_priority_normal_and_lower+0x96c>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117a47:	83 ec 04             	sub    $0x4,%esp
f0117a4a:	68 dc ae 13 f0       	push   $0xf013aedc
f0117a4f:	68 75 01 00 00       	push   $0x175
f0117a54:	68 f1 aa 13 f0       	push   $0xf013aaf1
f0117a59:	e8 a7 87 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0117a5e:	ff 45 c4             	incl   -0x3c(%ebp)
f0117a61:	83 7d c4 04          	cmpl   $0x4,-0x3c(%ebp)
f0117a65:	0f 8e 76 ff ff ff    	jle    f01179e1 <test_priority_normal_and_lower+0x8ef>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		set_program_priority(addEnv, 5);
f0117a6b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117a6e:	83 ec 08             	sub    $0x8,%esp
f0117a71:	6a 05                	push   $0x5
f0117a73:	50                   	push   %eax
f0117a74:	e8 b5 37 ff ff       	call   f010b22e <set_program_priority>
f0117a79:	83 c4 10             	add    $0x10,%esp
		set_program_priority(addEnv, 5);
f0117a7c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117a7f:	83 ec 08             	sub    $0x8,%esp
f0117a82:	6a 05                	push   $0x5
f0117a84:	50                   	push   %eax
f0117a85:	e8 a4 37 ff ff       	call   f010b22e <set_program_priority>
f0117a8a:	83 c4 10             	add    $0x10,%esp

		char command4[100] = "runall";
f0117a8d:	c7 85 1c fd ff ff 72 	movl   $0x616e7572,-0x2e4(%ebp)
f0117a94:	75 6e 61 
f0117a97:	c7 85 20 fd ff ff 6c 	movl   $0x6c6c,-0x2e0(%ebp)
f0117a9e:	6c 00 00 
f0117aa1:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0117aa7:	b9 17 00 00 00       	mov    $0x17,%ecx
f0117aac:	b8 00 00 00 00       	mov    $0x0,%eax
f0117ab1:	89 d7                	mov    %edx,%edi
f0117ab3:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0117ab5:	83 ec 0c             	sub    $0xc,%esp
f0117ab8:	8d 85 1c fd ff ff    	lea    -0x2e4(%ebp),%eax
f0117abe:	50                   	push   %eax
f0117abf:	e8 ac 92 fe ff       	call   f0100d70 <execute_command>
f0117ac4:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
	}
}
f0117ac7:	eb 10                	jmp    f0117ad9 <test_priority_normal_and_lower+0x9e7>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
f0117ac9:	83 ec 0c             	sub    $0xc,%esp
f0117acc:	68 b8 af 13 f0       	push   $0xf013afb8
f0117ad1:	e8 38 92 fe ff       	call   f0100d0e <cprintf>
f0117ad6:	83 c4 10             	add    $0x10,%esp
	}
}
f0117ad9:	90                   	nop
f0117ada:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0117add:	5b                   	pop    %ebx
f0117ade:	5e                   	pop    %esi
f0117adf:	5f                   	pop    %edi
f0117ae0:	5d                   	pop    %ebp
f0117ae1:	c3                   	ret    

f0117ae2 <isKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0117ae2:	55                   	push   %ebp
f0117ae3:	89 e5                	mov    %esp,%ebp
f0117ae5:	a1 58 27 86 f0       	mov    0xf0862758,%eax
f0117aea:	83 f8 03             	cmp    $0x3,%eax
f0117aed:	75 04                	jne    f0117af3 <isKHeapPlacementStrategyNEXTFIT+0x11>
f0117aef:	b0 01                	mov    $0x1,%al
f0117af1:	eb 02                	jmp    f0117af5 <isKHeapPlacementStrategyNEXTFIT+0x13>
f0117af3:	b0 00                	mov    $0x0,%al
f0117af5:	5d                   	pop    %ebp
f0117af6:	c3                   	ret    

f0117af7 <test_kmalloc>:
	int c;
};


int test_kmalloc()
{
f0117af7:	55                   	push   %ebp
f0117af8:	89 e5                	mov    %esp,%ebp
f0117afa:	57                   	push   %edi
f0117afb:	53                   	push   %ebx
f0117afc:	81 ec c0 01 00 00    	sub    $0x1c0,%esp
	cprintf("==============================================\n");
f0117b02:	83 ec 0c             	sub    $0xc,%esp
f0117b05:	68 bc b0 13 f0       	push   $0xf013b0bc
f0117b0a:	e8 ff 91 fe ff       	call   f0100d0e <cprintf>
f0117b0f:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0117b12:	83 ec 0c             	sub    $0xc,%esp
f0117b15:	68 ec b0 13 f0       	push   $0xf013b0ec
f0117b1a:	e8 ef 91 fe ff       	call   f0100d0e <cprintf>
f0117b1f:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0117b22:	83 ec 0c             	sub    $0xc,%esp
f0117b25:	68 bc b0 13 f0       	push   $0xf013b0bc
f0117b2a:	e8 df 91 fe ff       	call   f0100d0e <cprintf>
f0117b2f:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0117b32:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0117b36:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0117b3a:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0117b40:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0117b46:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0117b4d:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0117b54:	e8 8a 52 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0117b59:	89 45 e0             	mov    %eax,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f0117b5c:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f0117b62:	b9 14 00 00 00       	mov    $0x14,%ecx
f0117b67:	b8 00 00 00 00       	mov    $0x0,%eax
f0117b6c:	89 d7                	mov    %edx,%edi
f0117b6e:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//Insufficient space
		int freeFrames = sys_calculate_free_frames() ;
f0117b70:	e8 6e 52 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0117b75:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0117b78:	e8 29 c2 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0117b7d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f0117b80:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0117b87:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117b8a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117b8f:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0117b92:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117b95:	ba 00 00 00 00       	mov    $0x0,%edx
f0117b9a:	f7 75 d4             	divl   -0x2c(%ebp)
f0117b9d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117ba0:	29 d0                	sub    %edx,%eax
f0117ba2:	89 c1                	mov    %eax,%ecx
f0117ba4:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0117bab:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0117bb0:	0f b6 d0             	movzbl %al,%edx
f0117bb3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117bb6:	01 d0                	add    %edx,%eax
f0117bb8:	48                   	dec    %eax
f0117bb9:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0117bbc:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117bbf:	ba 00 00 00 00       	mov    $0x0,%edx
f0117bc4:	f7 75 cc             	divl   -0x34(%ebp)
f0117bc7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117bca:	29 d0                	sub    %edx,%eax
f0117bcc:	01 c1                	add    %eax,%ecx
f0117bce:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0117bd5:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0117bda:	0f b6 c0             	movzbl %al,%eax
f0117bdd:	c1 e0 04             	shl    $0x4,%eax
f0117be0:	89 c2                	mov    %eax,%edx
f0117be2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117be5:	01 d0                	add    %edx,%eax
f0117be7:	48                   	dec    %eax
f0117be8:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0117beb:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117bee:	ba 00 00 00 00       	mov    $0x0,%edx
f0117bf3:	f7 75 c4             	divl   -0x3c(%ebp)
f0117bf6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117bf9:	29 d0                	sub    %edx,%eax
f0117bfb:	01 c8                	add    %ecx,%eax
f0117bfd:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f0117c02:	29 c2                	sub    %eax,%edx
f0117c04:	89 d0                	mov    %edx,%eax
f0117c06:	89 45 bc             	mov    %eax,-0x44(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f0117c09:	83 ec 0c             	sub    $0xc,%esp
f0117c0c:	ff 75 bc             	pushl  -0x44(%ebp)
f0117c0f:	e8 4d fe fe ff       	call   f0107a61 <kmalloc>
f0117c14:	83 c4 10             	add    $0x10,%esp
f0117c17:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Allocating insufficient space: should return NULL");
f0117c1d:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0117c23:	85 c0                	test   %eax,%eax
f0117c25:	74 14                	je     f0117c3b <test_kmalloc+0x144>
f0117c27:	83 ec 04             	sub    $0x4,%esp
f0117c2a:	68 48 b1 13 f0       	push   $0xf013b148
f0117c2f:	6a 40                	push   $0x40
f0117c31:	68 7a b1 13 f0       	push   $0xf013b17a
f0117c36:	e8 ca 85 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117c3b:	e8 66 c1 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0117c40:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117c43:	74 14                	je     f0117c59 <test_kmalloc+0x162>
f0117c45:	83 ec 04             	sub    $0x4,%esp
f0117c48:	68 94 b1 13 f0       	push   $0xf013b194
f0117c4d:	6a 41                	push   $0x41
f0117c4f:	68 7a b1 13 f0       	push   $0xf013b17a
f0117c54:	e8 ac 85 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117c59:	e8 85 51 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0117c5e:	89 c2                	mov    %eax,%edx
f0117c60:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117c63:	39 c2                	cmp    %eax,%edx
f0117c65:	74 14                	je     f0117c7b <test_kmalloc+0x184>
f0117c67:	83 ec 04             	sub    $0x4,%esp
f0117c6a:	68 fc b1 13 f0       	push   $0xf013b1fc
f0117c6f:	6a 42                	push   $0x42
f0117c71:	68 7a b1 13 f0       	push   $0xf013b17a
f0117c76:	e8 8a 85 fe ff       	call   f0100205 <_panic>

		cprintf("\nkmalloc: current evaluation = 10%");
f0117c7b:	83 ec 0c             	sub    $0xc,%esp
f0117c7e:	68 3c b2 13 f0       	push   $0xf013b23c
f0117c83:	e8 86 90 fe ff       	call   f0100d0e <cprintf>
f0117c88:	83 c4 10             	add    $0x10,%esp
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0117c8b:	e8 53 51 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0117c90:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117c93:	e8 0e c1 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0117c98:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0117c9b:	83 ec 0c             	sub    $0xc,%esp
f0117c9e:	68 00 fc 1f 00       	push   $0x1ffc00
f0117ca3:	e8 b9 fd fe ff       	call   f0107a61 <kmalloc>
f0117ca8:	83 c4 10             	add    $0x10,%esp
f0117cab:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117cb1:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0117cb7:	89 c1                	mov    %eax,%ecx
f0117cb9:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0117cc0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117cc3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117cc8:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0117ccb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117cce:	ba 00 00 00 00       	mov    $0x0,%edx
f0117cd3:	f7 75 b8             	divl   -0x48(%ebp)
f0117cd6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117cd9:	29 d0                	sub    %edx,%eax
f0117cdb:	89 c3                	mov    %eax,%ebx
f0117cdd:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0117ce4:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0117ce9:	0f b6 d0             	movzbl %al,%edx
f0117cec:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117cef:	01 d0                	add    %edx,%eax
f0117cf1:	48                   	dec    %eax
f0117cf2:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0117cf5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117cf8:	ba 00 00 00 00       	mov    $0x0,%edx
f0117cfd:	f7 75 b0             	divl   -0x50(%ebp)
f0117d00:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117d03:	29 d0                	sub    %edx,%eax
f0117d05:	01 c3                	add    %eax,%ebx
f0117d07:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0117d0e:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0117d13:	0f b6 c0             	movzbl %al,%eax
f0117d16:	c1 e0 04             	shl    $0x4,%eax
f0117d19:	89 c2                	mov    %eax,%edx
f0117d1b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117d1e:	01 d0                	add    %edx,%eax
f0117d20:	48                   	dec    %eax
f0117d21:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0117d24:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117d27:	ba 00 00 00 00       	mov    $0x0,%edx
f0117d2c:	f7 75 a8             	divl   -0x58(%ebp)
f0117d2f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117d32:	29 d0                	sub    %edx,%eax
f0117d34:	01 d8                	add    %ebx,%eax
f0117d36:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0117d3b:	39 c1                	cmp    %eax,%ecx
f0117d3d:	74 14                	je     f0117d53 <test_kmalloc+0x25c>
f0117d3f:	83 ec 04             	sub    $0x4,%esp
f0117d42:	68 60 b2 13 f0       	push   $0xf013b260
f0117d47:	6a 49                	push   $0x49
f0117d49:	68 7a b1 13 f0       	push   $0xf013b17a
f0117d4e:	e8 b2 84 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117d53:	e8 4e c0 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0117d58:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117d5b:	74 14                	je     f0117d71 <test_kmalloc+0x27a>
f0117d5d:	83 ec 04             	sub    $0x4,%esp
f0117d60:	68 94 b1 13 f0       	push   $0xf013b194
f0117d65:	6a 4a                	push   $0x4a
f0117d67:	68 7a b1 13 f0       	push   $0xf013b17a
f0117d6c:	e8 94 84 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117d71:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117d74:	e8 6a 50 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0117d79:	29 c3                	sub    %eax,%ebx
f0117d7b:	89 d8                	mov    %ebx,%eax
f0117d7d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0117d82:	74 14                	je     f0117d98 <test_kmalloc+0x2a1>
f0117d84:	83 ec 04             	sub    $0x4,%esp
f0117d87:	68 fc b1 13 f0       	push   $0xf013b1fc
f0117d8c:	6a 4b                	push   $0x4b
f0117d8e:	68 7a b1 13 f0       	push   $0xf013b17a
f0117d93:	e8 6d 84 fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0117d98:	e8 46 50 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0117d9d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117da0:	e8 01 c0 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0117da5:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0117da8:	83 ec 0c             	sub    $0xc,%esp
f0117dab:	68 00 fc 1f 00       	push   $0x1ffc00
f0117db0:	e8 ac fc fe ff       	call   f0107a61 <kmalloc>
f0117db5:	83 c4 10             	add    $0x10,%esp
f0117db8:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117dbe:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0117dc4:	89 c1                	mov    %eax,%ecx
f0117dc6:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0117dcd:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0117dd0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117dd5:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0117dd8:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0117ddb:	ba 00 00 00 00       	mov    $0x0,%edx
f0117de0:	f7 75 a0             	divl   -0x60(%ebp)
f0117de3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0117de6:	29 d0                	sub    %edx,%eax
f0117de8:	89 c3                	mov    %eax,%ebx
f0117dea:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0117df1:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0117df6:	0f b6 d0             	movzbl %al,%edx
f0117df9:	8b 45 98             	mov    -0x68(%ebp),%eax
f0117dfc:	01 d0                	add    %edx,%eax
f0117dfe:	48                   	dec    %eax
f0117dff:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0117e02:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0117e05:	ba 00 00 00 00       	mov    $0x0,%edx
f0117e0a:	f7 75 98             	divl   -0x68(%ebp)
f0117e0d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0117e10:	29 d0                	sub    %edx,%eax
f0117e12:	01 c3                	add    %eax,%ebx
f0117e14:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0117e1b:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0117e20:	0f b6 c0             	movzbl %al,%eax
f0117e23:	c1 e0 04             	shl    $0x4,%eax
f0117e26:	89 c2                	mov    %eax,%edx
f0117e28:	8b 45 90             	mov    -0x70(%ebp),%eax
f0117e2b:	01 d0                	add    %edx,%eax
f0117e2d:	48                   	dec    %eax
f0117e2e:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0117e31:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0117e34:	ba 00 00 00 00       	mov    $0x0,%edx
f0117e39:	f7 75 90             	divl   -0x70(%ebp)
f0117e3c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0117e3f:	29 d0                	sub    %edx,%eax
f0117e41:	01 d8                	add    %ebx,%eax
f0117e43:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0117e48:	39 c1                	cmp    %eax,%ecx
f0117e4a:	74 14                	je     f0117e60 <test_kmalloc+0x369>
f0117e4c:	83 ec 04             	sub    $0x4,%esp
f0117e4f:	68 60 b2 13 f0       	push   $0xf013b260
f0117e54:	6a 51                	push   $0x51
f0117e56:	68 7a b1 13 f0       	push   $0xf013b17a
f0117e5b:	e8 a5 83 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117e60:	e8 41 bf fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0117e65:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117e68:	74 14                	je     f0117e7e <test_kmalloc+0x387>
f0117e6a:	83 ec 04             	sub    $0x4,%esp
f0117e6d:	68 94 b1 13 f0       	push   $0xf013b194
f0117e72:	6a 52                	push   $0x52
f0117e74:	68 7a b1 13 f0       	push   $0xf013b17a
f0117e79:	e8 87 83 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117e7e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117e81:	e8 5d 4f ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0117e86:	29 c3                	sub    %eax,%ebx
f0117e88:	89 d8                	mov    %ebx,%eax
f0117e8a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0117e8f:	74 14                	je     f0117ea5 <test_kmalloc+0x3ae>
f0117e91:	83 ec 04             	sub    $0x4,%esp
f0117e94:	68 fc b1 13 f0       	push   $0xf013b1fc
f0117e99:	6a 53                	push   $0x53
f0117e9b:	68 7a b1 13 f0       	push   $0xf013b17a
f0117ea0:	e8 60 83 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0117ea5:	e8 39 4f ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0117eaa:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117ead:	e8 f4 be fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0117eb2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0117eb5:	83 ec 0c             	sub    $0xc,%esp
f0117eb8:	68 00 08 00 00       	push   $0x800
f0117ebd:	e8 9f fb fe ff       	call   f0107a61 <kmalloc>
f0117ec2:	83 c4 10             	add    $0x10,%esp
f0117ec5:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117ecb:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0117ed1:	89 c1                	mov    %eax,%ecx
f0117ed3:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0117eda:	8b 45 88             	mov    -0x78(%ebp),%eax
f0117edd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117ee2:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0117ee5:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0117ee8:	ba 00 00 00 00       	mov    $0x0,%edx
f0117eed:	f7 75 88             	divl   -0x78(%ebp)
f0117ef0:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0117ef3:	29 d0                	sub    %edx,%eax
f0117ef5:	89 c3                	mov    %eax,%ebx
f0117ef7:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0117efe:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0117f03:	0f b6 d0             	movzbl %al,%edx
f0117f06:	8b 45 80             	mov    -0x80(%ebp),%eax
f0117f09:	01 d0                	add    %edx,%eax
f0117f0b:	48                   	dec    %eax
f0117f0c:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0117f12:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0117f18:	ba 00 00 00 00       	mov    $0x0,%edx
f0117f1d:	f7 75 80             	divl   -0x80(%ebp)
f0117f20:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0117f26:	29 d0                	sub    %edx,%eax
f0117f28:	01 c3                	add    %eax,%ebx
f0117f2a:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0117f31:	10 00 00 
f0117f34:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0117f39:	0f b6 c0             	movzbl %al,%eax
f0117f3c:	c1 e0 04             	shl    $0x4,%eax
f0117f3f:	89 c2                	mov    %eax,%edx
f0117f41:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0117f47:	01 d0                	add    %edx,%eax
f0117f49:	48                   	dec    %eax
f0117f4a:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0117f50:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0117f56:	ba 00 00 00 00       	mov    $0x0,%edx
f0117f5b:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0117f61:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0117f67:	29 d0                	sub    %edx,%eax
f0117f69:	01 d8                	add    %ebx,%eax
f0117f6b:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0117f70:	39 c1                	cmp    %eax,%ecx
f0117f72:	74 14                	je     f0117f88 <test_kmalloc+0x491>
f0117f74:	83 ec 04             	sub    $0x4,%esp
f0117f77:	68 60 b2 13 f0       	push   $0xf013b260
f0117f7c:	6a 59                	push   $0x59
f0117f7e:	68 7a b1 13 f0       	push   $0xf013b17a
f0117f83:	e8 7d 82 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117f88:	e8 19 be fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0117f8d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117f90:	74 14                	je     f0117fa6 <test_kmalloc+0x4af>
f0117f92:	83 ec 04             	sub    $0x4,%esp
f0117f95:	68 94 b1 13 f0       	push   $0xf013b194
f0117f9a:	6a 5a                	push   $0x5a
f0117f9c:	68 7a b1 13 f0       	push   $0xf013b17a
f0117fa1:	e8 5f 82 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117fa6:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117fa9:	e8 35 4e ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0117fae:	29 c3                	sub    %eax,%ebx
f0117fb0:	89 d8                	mov    %ebx,%eax
f0117fb2:	83 f8 01             	cmp    $0x1,%eax
f0117fb5:	74 14                	je     f0117fcb <test_kmalloc+0x4d4>
f0117fb7:	83 ec 04             	sub    $0x4,%esp
f0117fba:	68 fc b1 13 f0       	push   $0xf013b1fc
f0117fbf:	6a 5b                	push   $0x5b
f0117fc1:	68 7a b1 13 f0       	push   $0xf013b17a
f0117fc6:	e8 3a 82 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0117fcb:	e8 13 4e ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0117fd0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117fd3:	e8 ce bd fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0117fd8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0117fdb:	83 ec 0c             	sub    $0xc,%esp
f0117fde:	68 00 08 00 00       	push   $0x800
f0117fe3:	e8 79 fa fe ff       	call   f0107a61 <kmalloc>
f0117fe8:	83 c4 10             	add    $0x10,%esp
f0117feb:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117ff1:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0117ff7:	89 c1                	mov    %eax,%ecx
f0117ff9:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0118000:	10 00 00 
f0118003:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0118009:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011800e:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0118014:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011801a:	ba 00 00 00 00       	mov    $0x0,%edx
f011801f:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0118025:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011802b:	29 d0                	sub    %edx,%eax
f011802d:	89 c3                	mov    %eax,%ebx
f011802f:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0118036:	10 00 00 
f0118039:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011803e:	0f b6 d0             	movzbl %al,%edx
f0118041:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0118047:	01 d0                	add    %edx,%eax
f0118049:	48                   	dec    %eax
f011804a:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0118050:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118056:	ba 00 00 00 00       	mov    $0x0,%edx
f011805b:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0118061:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118067:	29 d0                	sub    %edx,%eax
f0118069:	01 c3                	add    %eax,%ebx
f011806b:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0118072:	10 00 00 
f0118075:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011807a:	0f b6 c0             	movzbl %al,%eax
f011807d:	c1 e0 04             	shl    $0x4,%eax
f0118080:	89 c2                	mov    %eax,%edx
f0118082:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0118088:	01 d0                	add    %edx,%eax
f011808a:	48                   	dec    %eax
f011808b:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0118091:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0118097:	ba 00 00 00 00       	mov    $0x0,%edx
f011809c:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01180a2:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01180a8:	29 d0                	sub    %edx,%eax
f01180aa:	01 d8                	add    %ebx,%eax
f01180ac:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01180b1:	39 c1                	cmp    %eax,%ecx
f01180b3:	74 14                	je     f01180c9 <test_kmalloc+0x5d2>
f01180b5:	83 ec 04             	sub    $0x4,%esp
f01180b8:	68 60 b2 13 f0       	push   $0xf013b260
f01180bd:	6a 61                	push   $0x61
f01180bf:	68 7a b1 13 f0       	push   $0xf013b17a
f01180c4:	e8 3c 81 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01180c9:	e8 d8 bc fe ff       	call   f0103da6 <pf_calculate_free_frames>
f01180ce:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01180d1:	74 14                	je     f01180e7 <test_kmalloc+0x5f0>
f01180d3:	83 ec 04             	sub    $0x4,%esp
f01180d6:	68 94 b1 13 f0       	push   $0xf013b194
f01180db:	6a 62                	push   $0x62
f01180dd:	68 7a b1 13 f0       	push   $0xf013b17a
f01180e2:	e8 1e 81 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01180e7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01180ea:	e8 f4 4c ff ff       	call   f010cde3 <sys_calculate_free_frames>
f01180ef:	29 c3                	sub    %eax,%ebx
f01180f1:	89 d8                	mov    %ebx,%eax
f01180f3:	83 f8 01             	cmp    $0x1,%eax
f01180f6:	74 14                	je     f011810c <test_kmalloc+0x615>
f01180f8:	83 ec 04             	sub    $0x4,%esp
f01180fb:	68 fc b1 13 f0       	push   $0xf013b1fc
f0118100:	6a 63                	push   $0x63
f0118102:	68 7a b1 13 f0       	push   $0xf013b17a
f0118107:	e8 f9 80 fe ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011810c:	e8 d2 4c ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0118111:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118114:	e8 8d bc fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0118119:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011811c:	83 ec 0c             	sub    $0xc,%esp
f011811f:	68 00 1c 00 00       	push   $0x1c00
f0118124:	e8 38 f9 fe ff       	call   f0107a61 <kmalloc>
f0118129:	83 c4 10             	add    $0x10,%esp
f011812c:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118132:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0118138:	89 c1                	mov    %eax,%ecx
f011813a:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0118141:	10 00 00 
f0118144:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011814a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011814f:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0118155:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011815b:	ba 00 00 00 00       	mov    $0x0,%edx
f0118160:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0118166:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011816c:	29 d0                	sub    %edx,%eax
f011816e:	89 c3                	mov    %eax,%ebx
f0118170:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0118177:	10 00 00 
f011817a:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011817f:	0f b6 d0             	movzbl %al,%edx
f0118182:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0118188:	01 d0                	add    %edx,%eax
f011818a:	48                   	dec    %eax
f011818b:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0118191:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0118197:	ba 00 00 00 00       	mov    $0x0,%edx
f011819c:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f01181a2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01181a8:	29 d0                	sub    %edx,%eax
f01181aa:	01 c3                	add    %eax,%ebx
f01181ac:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f01181b3:	10 00 00 
f01181b6:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01181bb:	0f b6 c0             	movzbl %al,%eax
f01181be:	c1 e0 04             	shl    $0x4,%eax
f01181c1:	89 c2                	mov    %eax,%edx
f01181c3:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01181c9:	01 d0                	add    %edx,%eax
f01181cb:	48                   	dec    %eax
f01181cc:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01181d2:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01181d8:	ba 00 00 00 00       	mov    $0x0,%edx
f01181dd:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01181e3:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01181e9:	29 d0                	sub    %edx,%eax
f01181eb:	01 d8                	add    %ebx,%eax
f01181ed:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01181f2:	39 c1                	cmp    %eax,%ecx
f01181f4:	74 14                	je     f011820a <test_kmalloc+0x713>
f01181f6:	83 ec 04             	sub    $0x4,%esp
f01181f9:	68 60 b2 13 f0       	push   $0xf013b260
f01181fe:	6a 69                	push   $0x69
f0118200:	68 7a b1 13 f0       	push   $0xf013b17a
f0118205:	e8 fb 7f fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011820a:	e8 97 bb fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011820f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118212:	74 14                	je     f0118228 <test_kmalloc+0x731>
f0118214:	83 ec 04             	sub    $0x4,%esp
f0118217:	68 94 b1 13 f0       	push   $0xf013b194
f011821c:	6a 6a                	push   $0x6a
f011821e:	68 7a b1 13 f0       	push   $0xf013b17a
f0118223:	e8 dd 7f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118228:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011822b:	e8 b3 4b ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0118230:	29 c3                	sub    %eax,%ebx
f0118232:	89 d8                	mov    %ebx,%eax
f0118234:	83 f8 02             	cmp    $0x2,%eax
f0118237:	74 14                	je     f011824d <test_kmalloc+0x756>
f0118239:	83 ec 04             	sub    $0x4,%esp
f011823c:	68 fc b1 13 f0       	push   $0xf013b1fc
f0118241:	6a 6b                	push   $0x6b
f0118243:	68 7a b1 13 f0       	push   $0xf013b17a
f0118248:	e8 b8 7f fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011824d:	e8 91 4b ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0118252:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118255:	e8 4c bb fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011825a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011825d:	83 ec 0c             	sub    $0xc,%esp
f0118260:	68 00 fc 2f 00       	push   $0x2ffc00
f0118265:	e8 f7 f7 fe ff       	call   f0107a61 <kmalloc>
f011826a:	83 c4 10             	add    $0x10,%esp
f011826d:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118273:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0118279:	89 c1                	mov    %eax,%ecx
f011827b:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0118282:	10 00 00 
f0118285:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011828b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118290:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0118296:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011829c:	ba 00 00 00 00       	mov    $0x0,%edx
f01182a1:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f01182a7:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01182ad:	29 d0                	sub    %edx,%eax
f01182af:	89 c3                	mov    %eax,%ebx
f01182b1:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f01182b8:	10 00 00 
f01182bb:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01182c0:	0f b6 d0             	movzbl %al,%edx
f01182c3:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01182c9:	01 d0                	add    %edx,%eax
f01182cb:	48                   	dec    %eax
f01182cc:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01182d2:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01182d8:	ba 00 00 00 00       	mov    $0x0,%edx
f01182dd:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01182e3:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01182e9:	29 d0                	sub    %edx,%eax
f01182eb:	01 c3                	add    %eax,%ebx
f01182ed:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01182f4:	10 00 00 
f01182f7:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01182fc:	0f b6 c0             	movzbl %al,%eax
f01182ff:	c1 e0 04             	shl    $0x4,%eax
f0118302:	89 c2                	mov    %eax,%edx
f0118304:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011830a:	01 d0                	add    %edx,%eax
f011830c:	48                   	dec    %eax
f011830d:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0118313:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0118319:	ba 00 00 00 00       	mov    $0x0,%edx
f011831e:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0118324:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011832a:	29 d0                	sub    %edx,%eax
f011832c:	01 d8                	add    %ebx,%eax
f011832e:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0118333:	39 c1                	cmp    %eax,%ecx
f0118335:	74 14                	je     f011834b <test_kmalloc+0x854>
f0118337:	83 ec 04             	sub    $0x4,%esp
f011833a:	68 60 b2 13 f0       	push   $0xf013b260
f011833f:	6a 71                	push   $0x71
f0118341:	68 7a b1 13 f0       	push   $0xf013b17a
f0118346:	e8 ba 7e fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011834b:	e8 56 ba fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0118350:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118353:	74 14                	je     f0118369 <test_kmalloc+0x872>
f0118355:	83 ec 04             	sub    $0x4,%esp
f0118358:	68 94 b1 13 f0       	push   $0xf013b194
f011835d:	6a 72                	push   $0x72
f011835f:	68 7a b1 13 f0       	push   $0xf013b17a
f0118364:	e8 9c 7e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118369:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011836c:	e8 72 4a ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0118371:	29 c3                	sub    %eax,%ebx
f0118373:	89 d8                	mov    %ebx,%eax
f0118375:	3d 00 03 00 00       	cmp    $0x300,%eax
f011837a:	74 14                	je     f0118390 <test_kmalloc+0x899>
f011837c:	83 ec 04             	sub    $0x4,%esp
f011837f:	68 fc b1 13 f0       	push   $0xf013b1fc
f0118384:	6a 73                	push   $0x73
f0118386:	68 7a b1 13 f0       	push   $0xf013b17a
f011838b:	e8 75 7e fe ff       	call   f0100205 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0118390:	e8 4e 4a ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0118395:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118398:	e8 09 ba fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011839d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01183a0:	83 ec 0c             	sub    $0xc,%esp
f01183a3:	68 00 fc 5f 00       	push   $0x5ffc00
f01183a8:	e8 b4 f6 fe ff       	call   f0107a61 <kmalloc>
f01183ad:	83 c4 10             	add    $0x10,%esp
f01183b0:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01183b6:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01183bc:	89 c1                	mov    %eax,%ecx
f01183be:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f01183c5:	10 00 00 
f01183c8:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01183ce:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01183d3:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f01183d9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01183df:	ba 00 00 00 00       	mov    $0x0,%edx
f01183e4:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f01183ea:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01183f0:	29 d0                	sub    %edx,%eax
f01183f2:	89 c3                	mov    %eax,%ebx
f01183f4:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f01183fb:	10 00 00 
f01183fe:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0118403:	0f b6 d0             	movzbl %al,%edx
f0118406:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011840c:	01 d0                	add    %edx,%eax
f011840e:	48                   	dec    %eax
f011840f:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0118415:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011841b:	ba 00 00 00 00       	mov    $0x0,%edx
f0118420:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0118426:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011842c:	29 d0                	sub    %edx,%eax
f011842e:	01 c3                	add    %eax,%ebx
f0118430:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0118437:	10 00 00 
f011843a:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011843f:	0f b6 c0             	movzbl %al,%eax
f0118442:	c1 e0 04             	shl    $0x4,%eax
f0118445:	89 c2                	mov    %eax,%edx
f0118447:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011844d:	01 d0                	add    %edx,%eax
f011844f:	48                   	dec    %eax
f0118450:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0118456:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011845c:	ba 00 00 00 00       	mov    $0x0,%edx
f0118461:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0118467:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011846d:	29 d0                	sub    %edx,%eax
f011846f:	01 d8                	add    %ebx,%eax
f0118471:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0118476:	39 c1                	cmp    %eax,%ecx
f0118478:	74 14                	je     f011848e <test_kmalloc+0x997>
f011847a:	83 ec 04             	sub    $0x4,%esp
f011847d:	68 60 b2 13 f0       	push   $0xf013b260
f0118482:	6a 79                	push   $0x79
f0118484:	68 7a b1 13 f0       	push   $0xf013b17a
f0118489:	e8 77 7d fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011848e:	e8 13 b9 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0118493:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118496:	74 14                	je     f01184ac <test_kmalloc+0x9b5>
f0118498:	83 ec 04             	sub    $0x4,%esp
f011849b:	68 94 b1 13 f0       	push   $0xf013b194
f01184a0:	6a 7a                	push   $0x7a
f01184a2:	68 7a b1 13 f0       	push   $0xf013b17a
f01184a7:	e8 59 7d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01184ac:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01184af:	e8 2f 49 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f01184b4:	29 c3                	sub    %eax,%ebx
f01184b6:	89 d8                	mov    %ebx,%eax
f01184b8:	3d 00 06 00 00       	cmp    $0x600,%eax
f01184bd:	74 14                	je     f01184d3 <test_kmalloc+0x9dc>
f01184bf:	83 ec 04             	sub    $0x4,%esp
f01184c2:	68 fc b1 13 f0       	push   $0xf013b1fc
f01184c7:	6a 7b                	push   $0x7b
f01184c9:	68 7a b1 13 f0       	push   $0xf013b17a
f01184ce:	e8 32 7d fe ff       	call   f0100205 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01184d3:	e8 0b 49 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f01184d8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01184db:	e8 c6 b8 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f01184e0:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01184e3:	83 ec 0c             	sub    $0xc,%esp
f01184e6:	68 00 38 00 00       	push   $0x3800
f01184eb:	e8 71 f5 fe ff       	call   f0107a61 <kmalloc>
f01184f0:	83 c4 10             	add    $0x10,%esp
f01184f3:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01184f9:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01184ff:	89 c1                	mov    %eax,%ecx
f0118501:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0118508:	10 00 00 
f011850b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0118511:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118516:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011851c:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0118522:	ba 00 00 00 00       	mov    $0x0,%edx
f0118527:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011852d:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0118533:	29 d0                	sub    %edx,%eax
f0118535:	89 c3                	mov    %eax,%ebx
f0118537:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011853e:	10 00 00 
f0118541:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0118546:	0f b6 d0             	movzbl %al,%edx
f0118549:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011854f:	01 d0                	add    %edx,%eax
f0118551:	48                   	dec    %eax
f0118552:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0118558:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011855e:	ba 00 00 00 00       	mov    $0x0,%edx
f0118563:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0118569:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011856f:	29 d0                	sub    %edx,%eax
f0118571:	01 c3                	add    %eax,%ebx
f0118573:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011857a:	10 00 00 
f011857d:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0118582:	0f b6 c0             	movzbl %al,%eax
f0118585:	c1 e0 04             	shl    $0x4,%eax
f0118588:	89 c2                	mov    %eax,%edx
f011858a:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0118590:	01 d0                	add    %edx,%eax
f0118592:	48                   	dec    %eax
f0118593:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0118599:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011859f:	ba 00 00 00 00       	mov    $0x0,%edx
f01185a4:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f01185aa:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01185b0:	29 d0                	sub    %edx,%eax
f01185b2:	01 d8                	add    %ebx,%eax
f01185b4:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01185b9:	39 c1                	cmp    %eax,%ecx
f01185bb:	74 17                	je     f01185d4 <test_kmalloc+0xadd>
f01185bd:	83 ec 04             	sub    $0x4,%esp
f01185c0:	68 60 b2 13 f0       	push   $0xf013b260
f01185c5:	68 81 00 00 00       	push   $0x81
f01185ca:	68 7a b1 13 f0       	push   $0xf013b17a
f01185cf:	e8 31 7c fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01185d4:	e8 cd b7 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f01185d9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01185dc:	74 17                	je     f01185f5 <test_kmalloc+0xafe>
f01185de:	83 ec 04             	sub    $0x4,%esp
f01185e1:	68 94 b1 13 f0       	push   $0xf013b194
f01185e6:	68 82 00 00 00       	push   $0x82
f01185eb:	68 7a b1 13 f0       	push   $0xf013b17a
f01185f0:	e8 10 7c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01185f5:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01185f8:	e8 e6 47 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f01185fd:	29 c3                	sub    %eax,%ebx
f01185ff:	89 d8                	mov    %ebx,%eax
f0118601:	83 f8 04             	cmp    $0x4,%eax
f0118604:	74 17                	je     f011861d <test_kmalloc+0xb26>
f0118606:	83 ec 04             	sub    $0x4,%esp
f0118609:	68 fc b1 13 f0       	push   $0xf013b1fc
f011860e:	68 83 00 00 00       	push   $0x83
f0118613:	68 7a b1 13 f0       	push   $0xf013b17a
f0118618:	e8 e8 7b fe ff       	call   f0100205 <_panic>

		cprintf("\b\b\b50%");
f011861d:	83 ec 0c             	sub    $0xc,%esp
f0118620:	68 c6 b2 13 f0       	push   $0xf013b2c6
f0118625:	e8 e4 86 fe ff       	call   f0100d0e <cprintf>
f011862a:	83 c4 10             	add    $0x10,%esp
		//Checking read/write on the allocated spaces
		{
			freeFrames = sys_calculate_free_frames() ;
f011862d:	e8 b1 47 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0118632:	89 45 dc             	mov    %eax,-0x24(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0118635:	e8 6c b7 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011863a:	89 45 d8             	mov    %eax,-0x28(%ebp)

			//Write values
			//In 1st 2 MB
			lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f011863d:	c7 85 f8 fe ff ff ff 	movl   $0x1ffbff,-0x108(%ebp)
f0118644:	fb 1f 00 
			byteArr = (char *) ptr_allocations[0];
f0118647:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011864d:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
			byteArr[0] = minByte ;
f0118653:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118659:	8a 55 f3             	mov    -0xd(%ebp),%dl
f011865c:	88 10                	mov    %dl,(%eax)
			byteArr[lastIndexOfByte] = maxByte ;
f011865e:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f0118664:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011866a:	01 c2                	add    %eax,%edx
f011866c:	8a 45 f2             	mov    -0xe(%ebp),%al
f011866f:	88 02                	mov    %al,(%edx)

			//In 2nd 2 MB
			shortArr = (short *) ptr_allocations[1];
f0118671:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0118677:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
			lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f011867d:	c7 85 ec fe ff ff ff 	movl   $0xffdff,-0x114(%ebp)
f0118684:	fd 0f 00 
			shortArr[0] = minShort;
f0118687:	8b 95 f0 fe ff ff    	mov    -0x110(%ebp),%edx
f011868d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118690:	66 89 02             	mov    %ax,(%edx)
			shortArr[lastIndexOfShort] = maxShort;
f0118693:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0118699:	01 c0                	add    %eax,%eax
f011869b:	89 c2                	mov    %eax,%edx
f011869d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01186a3:	01 c2                	add    %eax,%edx
f01186a5:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f01186a9:	66 89 02             	mov    %ax,(%edx)

			//In next 2 KB
			intArr = (int *) ptr_allocations[2];
f01186ac:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01186b2:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
			lastIndexOfInt = (2*kilo)/sizeof(int) - 1;
f01186b8:	c7 85 e4 fe ff ff ff 	movl   $0x1ff,-0x11c(%ebp)
f01186bf:	01 00 00 
			intArr[0] = minInt;
f01186c2:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01186c8:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01186cb:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f01186cd:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01186d3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01186da:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01186e0:	01 c2                	add    %eax,%edx
f01186e2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01186e5:	89 02                	mov    %eax,(%edx)

			//In 7 KB
			structArr = (struct MyStruct *) ptr_allocations[4];
f01186e7:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01186ed:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
			lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f01186f3:	c7 85 dc fe ff ff 7f 	movl   $0x37f,-0x124(%ebp)
f01186fa:	03 00 00 
			structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f01186fd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118703:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118706:	88 10                	mov    %dl,(%eax)
f0118708:	8b 95 e0 fe ff ff    	mov    -0x120(%ebp),%edx
f011870e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118711:	66 89 42 02          	mov    %ax,0x2(%edx)
f0118715:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011871b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f011871e:	89 50 04             	mov    %edx,0x4(%eax)
			structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f0118721:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118727:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011872e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118734:	01 c2                	add    %eax,%edx
f0118736:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118739:	88 02                	mov    %al,(%edx)
f011873b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118741:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118748:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011874e:	01 c2                	add    %eax,%edx
f0118750:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118754:	66 89 42 02          	mov    %ax,0x2(%edx)
f0118758:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011875e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118765:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011876b:	01 c2                	add    %eax,%edx
f011876d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118770:	89 42 04             	mov    %eax,0x4(%edx)

			//In 6 MB
			lastIndexOfByte2 = (6*Mega-kilo)/sizeof(char) - 1;
f0118773:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f011877a:	fb 5f 00 
			byteArr2 = (char *) ptr_allocations[6];
f011877d:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0118783:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
			byteArr2[0] = minByte ;
f0118789:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011878f:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118792:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2 / 2] = maxByte / 2;
f0118794:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011879a:	89 c2                	mov    %eax,%edx
f011879c:	c1 ea 1f             	shr    $0x1f,%edx
f011879f:	01 d0                	add    %edx,%eax
f01187a1:	d1 f8                	sar    %eax
f01187a3:	89 c2                	mov    %eax,%edx
f01187a5:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01187ab:	01 c2                	add    %eax,%edx
f01187ad:	8a 45 f2             	mov    -0xe(%ebp),%al
f01187b0:	88 c1                	mov    %al,%cl
f01187b2:	c0 e9 07             	shr    $0x7,%cl
f01187b5:	01 c8                	add    %ecx,%eax
f01187b7:	d0 f8                	sar    %al
f01187b9:	88 02                	mov    %al,(%edx)
			byteArr2[lastIndexOfByte2] = maxByte ;
f01187bb:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f01187c1:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01187c7:	01 c2                	add    %eax,%edx
f01187c9:	8a 45 f2             	mov    -0xe(%ebp),%al
f01187cc:	88 02                	mov    %al,(%edx)

			//In 14 KB
			shortArr2 = (short *) ptr_allocations[7];
f01187ce:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01187d4:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
			lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f01187da:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f01187e1:	1b 00 00 
			shortArr2[0] = minShort;
f01187e4:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f01187ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01187ed:	66 89 02             	mov    %ax,(%edx)
			shortArr2[lastIndexOfShort2] = maxShort;
f01187f0:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01187f6:	01 c0                	add    %eax,%eax
f01187f8:	89 c2                	mov    %eax,%edx
f01187fa:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118800:	01 c2                	add    %eax,%edx
f0118802:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118806:	66 89 02             	mov    %ax,(%edx)

			//Read values: check that the values are successfully written
			if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0118809:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011880f:	8a 00                	mov    (%eax),%al
f0118811:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0118814:	75 15                	jne    f011882b <test_kmalloc+0xd34>
f0118816:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f011881c:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118822:	01 d0                	add    %edx,%eax
f0118824:	8a 00                	mov    (%eax),%al
f0118826:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0118829:	74 17                	je     f0118842 <test_kmalloc+0xd4b>
f011882b:	83 ec 04             	sub    $0x4,%esp
f011882e:	68 d0 b2 13 f0       	push   $0xf013b2d0
f0118833:	68 b2 00 00 00       	push   $0xb2
f0118838:	68 7a b1 13 f0       	push   $0xf013b17a
f011883d:	e8 c3 79 fe ff       	call   f0100205 <_panic>
			if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0118842:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0118848:	66 8b 00             	mov    (%eax),%ax
f011884b:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f011884f:	75 1b                	jne    f011886c <test_kmalloc+0xd75>
f0118851:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0118857:	01 c0                	add    %eax,%eax
f0118859:	89 c2                	mov    %eax,%edx
f011885b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0118861:	01 d0                	add    %edx,%eax
f0118863:	66 8b 00             	mov    (%eax),%ax
f0118866:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f011886a:	74 17                	je     f0118883 <test_kmalloc+0xd8c>
f011886c:	83 ec 04             	sub    $0x4,%esp
f011886f:	68 d0 b2 13 f0       	push   $0xf013b2d0
f0118874:	68 b3 00 00 00       	push   $0xb3
f0118879:	68 7a b1 13 f0       	push   $0xf013b17a
f011887e:	e8 82 79 fe ff       	call   f0100205 <_panic>
			if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) panic("Wrong allocation: stored values are wrongly changed!");
f0118883:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0118889:	8b 00                	mov    (%eax),%eax
f011888b:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011888e:	75 1c                	jne    f01188ac <test_kmalloc+0xdb5>
f0118890:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0118896:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011889d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01188a3:	01 d0                	add    %edx,%eax
f01188a5:	8b 00                	mov    (%eax),%eax
f01188a7:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01188aa:	74 17                	je     f01188c3 <test_kmalloc+0xdcc>
f01188ac:	83 ec 04             	sub    $0x4,%esp
f01188af:	68 d0 b2 13 f0       	push   $0xf013b2d0
f01188b4:	68 b4 00 00 00       	push   $0xb4
f01188b9:	68 7a b1 13 f0       	push   $0xf013b17a
f01188be:	e8 42 79 fe ff       	call   f0100205 <_panic>

			if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	panic("Wrong allocation: stored values are wrongly changed!");
f01188c3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01188c9:	8a 00                	mov    (%eax),%al
f01188cb:	3a 45 f3             	cmp    -0xd(%ebp),%al
f01188ce:	75 1c                	jne    f01188ec <test_kmalloc+0xdf5>
f01188d0:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01188d6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01188dd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01188e3:	01 d0                	add    %edx,%eax
f01188e5:	8a 00                	mov    (%eax),%al
f01188e7:	3a 45 f2             	cmp    -0xe(%ebp),%al
f01188ea:	74 17                	je     f0118903 <test_kmalloc+0xe0c>
f01188ec:	83 ec 04             	sub    $0x4,%esp
f01188ef:	68 d0 b2 13 f0       	push   $0xf013b2d0
f01188f4:	68 b6 00 00 00       	push   $0xb6
f01188f9:	68 7a b1 13 f0       	push   $0xf013b17a
f01188fe:	e8 02 79 fe ff       	call   f0100205 <_panic>
			if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	panic("Wrong allocation: stored values are wrongly changed!");
f0118903:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118909:	66 8b 40 02          	mov    0x2(%eax),%ax
f011890d:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0118911:	75 1f                	jne    f0118932 <test_kmalloc+0xe3b>
f0118913:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118919:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118920:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118926:	01 d0                	add    %edx,%eax
f0118928:	66 8b 40 02          	mov    0x2(%eax),%ax
f011892c:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0118930:	74 17                	je     f0118949 <test_kmalloc+0xe52>
f0118932:	83 ec 04             	sub    $0x4,%esp
f0118935:	68 d0 b2 13 f0       	push   $0xf013b2d0
f011893a:	68 b7 00 00 00       	push   $0xb7
f011893f:	68 7a b1 13 f0       	push   $0xf013b17a
f0118944:	e8 bc 78 fe ff       	call   f0100205 <_panic>
			if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	panic("Wrong allocation: stored values are wrongly changed!");
f0118949:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011894f:	8b 40 04             	mov    0x4(%eax),%eax
f0118952:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0118955:	75 1d                	jne    f0118974 <test_kmalloc+0xe7d>
f0118957:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011895d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118964:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011896a:	01 d0                	add    %edx,%eax
f011896c:	8b 40 04             	mov    0x4(%eax),%eax
f011896f:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0118972:	74 17                	je     f011898b <test_kmalloc+0xe94>
f0118974:	83 ec 04             	sub    $0x4,%esp
f0118977:	68 d0 b2 13 f0       	push   $0xf013b2d0
f011897c:	68 b8 00 00 00       	push   $0xb8
f0118981:	68 7a b1 13 f0       	push   $0xf013b17a
f0118986:	e8 7a 78 fe ff       	call   f0100205 <_panic>

			if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2/2] != maxByte/2 || byteArr2[lastIndexOfByte2] != maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f011898b:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118991:	8a 00                	mov    (%eax),%al
f0118993:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0118996:	75 40                	jne    f01189d8 <test_kmalloc+0xee1>
f0118998:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011899e:	89 c2                	mov    %eax,%edx
f01189a0:	c1 ea 1f             	shr    $0x1f,%edx
f01189a3:	01 d0                	add    %edx,%eax
f01189a5:	d1 f8                	sar    %eax
f01189a7:	89 c2                	mov    %eax,%edx
f01189a9:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01189af:	01 d0                	add    %edx,%eax
f01189b1:	8a 10                	mov    (%eax),%dl
f01189b3:	8a 45 f2             	mov    -0xe(%ebp),%al
f01189b6:	88 c1                	mov    %al,%cl
f01189b8:	c0 e9 07             	shr    $0x7,%cl
f01189bb:	01 c8                	add    %ecx,%eax
f01189bd:	d0 f8                	sar    %al
f01189bf:	38 c2                	cmp    %al,%dl
f01189c1:	75 15                	jne    f01189d8 <test_kmalloc+0xee1>
f01189c3:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f01189c9:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01189cf:	01 d0                	add    %edx,%eax
f01189d1:	8a 00                	mov    (%eax),%al
f01189d3:	3a 45 f2             	cmp    -0xe(%ebp),%al
f01189d6:	74 17                	je     f01189ef <test_kmalloc+0xef8>
f01189d8:	83 ec 04             	sub    $0x4,%esp
f01189db:	68 d0 b2 13 f0       	push   $0xf013b2d0
f01189e0:	68 ba 00 00 00       	push   $0xba
f01189e5:	68 7a b1 13 f0       	push   $0xf013b17a
f01189ea:	e8 16 78 fe ff       	call   f0100205 <_panic>
			if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f01189ef:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01189f5:	66 8b 00             	mov    (%eax),%ax
f01189f8:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f01189fc:	75 1b                	jne    f0118a19 <test_kmalloc+0xf22>
f01189fe:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0118a04:	01 c0                	add    %eax,%eax
f0118a06:	89 c2                	mov    %eax,%edx
f0118a08:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118a0e:	01 d0                	add    %edx,%eax
f0118a10:	66 8b 00             	mov    (%eax),%ax
f0118a13:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0118a17:	74 17                	je     f0118a30 <test_kmalloc+0xf39>
f0118a19:	83 ec 04             	sub    $0x4,%esp
f0118a1c:	68 d0 b2 13 f0       	push   $0xf013b2d0
f0118a21:	68 bb 00 00 00       	push   $0xbb
f0118a26:	68 7a b1 13 f0       	push   $0xf013b17a
f0118a2b:	e8 d5 77 fe ff       	call   f0100205 <_panic>

			if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118a30:	e8 ae 43 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0118a35:	89 c2                	mov    %eax,%edx
f0118a37:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118a3a:	39 c2                	cmp    %eax,%edx
f0118a3c:	74 17                	je     f0118a55 <test_kmalloc+0xf5e>
f0118a3e:	83 ec 04             	sub    $0x4,%esp
f0118a41:	68 fc b1 13 f0       	push   $0xf013b1fc
f0118a46:	68 bd 00 00 00       	push   $0xbd
f0118a4b:	68 7a b1 13 f0       	push   $0xf013b17a
f0118a50:	e8 b0 77 fe ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118a55:	e8 4c b3 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0118a5a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118a5d:	74 17                	je     f0118a76 <test_kmalloc+0xf7f>
f0118a5f:	83 ec 04             	sub    $0x4,%esp
f0118a62:	68 94 b1 13 f0       	push   $0xf013b194
f0118a67:	68 be 00 00 00       	push   $0xbe
f0118a6c:	68 7a b1 13 f0       	push   $0xf013b17a
f0118a71:	e8 8f 77 fe ff       	call   f0100205 <_panic>
		}

		cprintf("\b\b\b80%");
f0118a76:	83 ec 0c             	sub    $0xc,%esp
f0118a79:	68 05 b3 13 f0       	push   $0xf013b305
f0118a7e:	e8 8b 82 fe ff       	call   f0100d0e <cprintf>
f0118a83:	83 c4 10             	add    $0x10,%esp

		//Insufficient space again
		freeFrames = sys_calculate_free_frames() ;
f0118a86:	e8 58 43 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0118a8b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118a8e:	e8 13 b3 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0118a93:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+4*kilo+4*kilo+8*kilo+3*Mega+6*Mega+16*kilo) ;
f0118a96:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f0118a9d:	10 00 00 
f0118aa0:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0118aa6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118aab:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f0118ab1:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0118ab7:	ba 00 00 00 00       	mov    $0x0,%edx
f0118abc:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f0118ac2:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0118ac8:	29 d0                	sub    %edx,%eax
f0118aca:	89 c1                	mov    %eax,%ecx
f0118acc:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f0118ad3:	10 00 00 
f0118ad6:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0118adb:	0f b6 d0             	movzbl %al,%edx
f0118ade:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0118ae4:	01 d0                	add    %edx,%eax
f0118ae6:	48                   	dec    %eax
f0118ae7:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f0118aed:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0118af3:	ba 00 00 00 00       	mov    $0x0,%edx
f0118af8:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f0118afe:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0118b04:	29 d0                	sub    %edx,%eax
f0118b06:	01 c1                	add    %eax,%ecx
f0118b08:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f0118b0f:	10 00 00 
f0118b12:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0118b17:	0f b6 c0             	movzbl %al,%eax
f0118b1a:	c1 e0 04             	shl    $0x4,%eax
f0118b1d:	89 c2                	mov    %eax,%edx
f0118b1f:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0118b25:	01 d0                	add    %edx,%eax
f0118b27:	48                   	dec    %eax
f0118b28:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f0118b2e:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118b34:	ba 00 00 00 00       	mov    $0x0,%edx
f0118b39:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f0118b3f:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118b45:	29 d0                	sub    %edx,%eax
f0118b47:	01 c8                	add    %ecx,%eax
f0118b49:	ba 00 50 2f 09       	mov    $0x92f5000,%edx
f0118b4e:	29 c2                	sub    %eax,%edx
f0118b50:	89 d0                	mov    %edx,%eax
f0118b52:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f0118b58:	83 ec 0c             	sub    $0xc,%esp
f0118b5b:	ff b5 b0 fe ff ff    	pushl  -0x150(%ebp)
f0118b61:	e8 fb ee fe ff       	call   f0107a61 <kmalloc>
f0118b66:	83 c4 10             	add    $0x10,%esp
f0118b69:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if (ptr_allocations[8] != NULL) panic("Allocating insufficient space: should return NULL");
f0118b6f:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0118b75:	85 c0                	test   %eax,%eax
f0118b77:	74 17                	je     f0118b90 <test_kmalloc+0x1099>
f0118b79:	83 ec 04             	sub    $0x4,%esp
f0118b7c:	68 48 b1 13 f0       	push   $0xf013b148
f0118b81:	68 c8 00 00 00       	push   $0xc8
f0118b86:	68 7a b1 13 f0       	push   $0xf013b17a
f0118b8b:	e8 75 76 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118b90:	e8 11 b2 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0118b95:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118b98:	74 17                	je     f0118bb1 <test_kmalloc+0x10ba>
f0118b9a:	83 ec 04             	sub    $0x4,%esp
f0118b9d:	68 94 b1 13 f0       	push   $0xf013b194
f0118ba2:	68 c9 00 00 00       	push   $0xc9
f0118ba7:	68 7a b1 13 f0       	push   $0xf013b17a
f0118bac:	e8 54 76 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118bb1:	e8 2d 42 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0118bb6:	89 c2                	mov    %eax,%edx
f0118bb8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118bbb:	39 c2                	cmp    %eax,%edx
f0118bbd:	74 17                	je     f0118bd6 <test_kmalloc+0x10df>
f0118bbf:	83 ec 04             	sub    $0x4,%esp
f0118bc2:	68 fc b1 13 f0       	push   $0xf013b1fc
f0118bc7:	68 ca 00 00 00       	push   $0xca
f0118bcc:	68 7a b1 13 f0       	push   $0xf013b17a
f0118bd1:	e8 2f 76 fe ff       	call   f0100205 <_panic>

		cprintf("\b\b\b90%");
f0118bd6:	83 ec 0c             	sub    $0xc,%esp
f0118bd9:	68 0c b3 13 f0       	push   $0xf013b30c
f0118bde:	e8 2b 81 fe ff       	call   f0100d0e <cprintf>
f0118be3:	83 c4 10             	add    $0x10,%esp

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f0118be6:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0118bec:	05 00 40 00 00       	add    $0x4000,%eax
f0118bf1:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0118bf7:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0118bfe:	10 00 00 
f0118c01:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0118c07:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118c0c:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0118c12:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0118c18:	ba 00 00 00 00       	mov    $0x0,%edx
f0118c1d:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0118c23:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0118c29:	29 d0                	sub    %edx,%eax
f0118c2b:	89 c1                	mov    %eax,%ecx
f0118c2d:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0118c34:	10 00 00 
f0118c37:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0118c3c:	0f b6 d0             	movzbl %al,%edx
f0118c3f:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0118c45:	01 d0                	add    %edx,%eax
f0118c47:	48                   	dec    %eax
f0118c48:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0118c4e:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0118c54:	ba 00 00 00 00       	mov    $0x0,%edx
f0118c59:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0118c5f:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0118c65:	29 d0                	sub    %edx,%eax
f0118c67:	01 c1                	add    %eax,%ecx
f0118c69:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0118c70:	10 00 00 
f0118c73:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0118c78:	0f b6 c0             	movzbl %al,%eax
f0118c7b:	c1 e0 04             	shl    $0x4,%eax
f0118c7e:	89 c2                	mov    %eax,%edx
f0118c80:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0118c86:	01 d0                	add    %edx,%eax
f0118c88:	48                   	dec    %eax
f0118c89:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0118c8f:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0118c95:	ba 00 00 00 00       	mov    $0x0,%edx
f0118c9a:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0118ca0:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0118ca6:	29 d0                	sub    %edx,%eax
f0118ca8:	01 c8                	add    %ecx,%eax
f0118caa:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0118caf:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0118cb2:	eb 6a                	jmp    f0118d1e <test_kmalloc+0x1227>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, va, &table);
f0118cb4:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0118cb9:	83 ec 04             	sub    $0x4,%esp
f0118cbc:	8d 95 3c fe ff ff    	lea    -0x1c4(%ebp),%edx
f0118cc2:	52                   	push   %edx
f0118cc3:	ff 75 f4             	pushl  -0xc(%ebp)
f0118cc6:	50                   	push   %eax
f0118cc7:	e8 c3 dd fe ff       	call   f0106a8f <get_page_table>
f0118ccc:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f0118ccf:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0118cd5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0118cd8:	c1 ea 0c             	shr    $0xc,%edx
f0118cdb:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0118ce1:	c1 e2 02             	shl    $0x2,%edx
f0118ce4:	01 d0                	add    %edx,%eax
f0118ce6:	8b 00                	mov    (%eax),%eax
f0118ce8:	25 ff 0f 00 00       	and    $0xfff,%eax
f0118ced:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f0118cf3:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0118cf9:	83 e0 04             	and    $0x4,%eax
f0118cfc:	85 c0                	test   %eax,%eax
f0118cfe:	74 17                	je     f0118d17 <test_kmalloc+0x1220>
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
f0118d00:	83 ec 04             	sub    $0x4,%esp
f0118d03:	68 14 b3 13 f0       	push   $0xf013b314
f0118d08:	68 d7 00 00 00       	push   $0xd7
f0118d0d:	68 7a b1 13 f0       	push   $0xf013b17a
f0118d12:	e8 ee 74 fe ff       	call   f0100205 <_panic>
		cprintf("\b\b\b90%");

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0118d17:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0118d1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118d21:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f0118d27:	72 8b                	jb     f0118cb4 <test_kmalloc+0x11bd>
			uint32 perm = table[PTX(va)] & 0xFFF;
			if ((perm & PERM_USER) == PERM_USER)
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
		}

		cprintf("\b\b\b100%\n");
f0118d29:	83 ec 0c             	sub    $0xc,%esp
f0118d2c:	68 5e b3 13 f0       	push   $0xf013b35e
f0118d31:	e8 d8 7f fe ff       	call   f0100d0e <cprintf>
f0118d36:	83 c4 10             	add    $0x10,%esp

	}

	cprintf("\nCongratulations!! test kmalloc completed successfully.\n");
f0118d39:	83 ec 0c             	sub    $0xc,%esp
f0118d3c:	68 68 b3 13 f0       	push   $0xf013b368
f0118d41:	e8 c8 7f fe ff       	call   f0100d0e <cprintf>
f0118d46:	83 c4 10             	add    $0x10,%esp

	return 1;
f0118d49:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0118d4e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0118d51:	5b                   	pop    %ebx
f0118d52:	5f                   	pop    %edi
f0118d53:	5d                   	pop    %ebp
f0118d54:	c3                   	ret    

f0118d55 <test_kmalloc_nextfit>:

int test_kmalloc_nextfit()
{
f0118d55:	55                   	push   %ebp
f0118d56:	89 e5                	mov    %esp,%ebp
f0118d58:	57                   	push   %edi
f0118d59:	53                   	push   %ebx
f0118d5a:	81 ec 70 04 00 00    	sub    $0x470,%esp
	cprintf("==============================================\n");
f0118d60:	83 ec 0c             	sub    $0xc,%esp
f0118d63:	68 bc b0 13 f0       	push   $0xf013b0bc
f0118d68:	e8 a1 7f fe ff       	call   f0100d0e <cprintf>
f0118d6d:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0118d70:	83 ec 0c             	sub    $0xc,%esp
f0118d73:	68 ec b0 13 f0       	push   $0xf013b0ec
f0118d78:	e8 91 7f fe ff       	call   f0100d0e <cprintf>
f0118d7d:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0118d80:	83 ec 0c             	sub    $0xc,%esp
f0118d83:	68 bc b0 13 f0       	push   $0xf013b0bc
f0118d88:	e8 81 7f fe ff       	call   f0100d0e <cprintf>
f0118d8d:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f0118d90:	8d 95 88 fb ff ff    	lea    -0x478(%ebp),%edx
f0118d96:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f0118d9b:	b8 00 00 00 00       	mov    $0x0,%eax
f0118da0:	89 d7                	mov    %edx,%edi
f0118da2:	f3 ab                	rep stos %eax,%es:(%edi)
	cprintf("This test has THREE cases. A pass message will be displayed after each one.\n");
f0118da4:	83 ec 0c             	sub    $0xc,%esp
f0118da7:	68 a4 b3 13 f0       	push   $0xf013b3a4
f0118dac:	e8 5d 7f fe ff       	call   f0100d0e <cprintf>
f0118db1:	83 c4 10             	add    $0x10,%esp

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f0118db4:	e8 2a 40 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0118db9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f0118dbc:	e8 e5 af fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0118dc1:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f0118dc4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0118dcb:	eb 1f                	jmp    f0118dec <test_kmalloc_nextfit+0x97>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f0118dcd:	83 ec 0c             	sub    $0xc,%esp
f0118dd0:	68 00 00 20 00       	push   $0x200000
f0118dd5:	e8 87 ec fe ff       	call   f0107a61 <kmalloc>
f0118dda:	83 c4 10             	add    $0x10,%esp
f0118ddd:	89 c2                	mov    %eax,%edx
f0118ddf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118de2:	89 94 85 88 fb ff ff 	mov    %edx,-0x478(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f0118de9:	ff 45 f4             	incl   -0xc(%ebp)
f0118dec:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f0118df0:	7e db                	jle    f0118dcd <test_kmalloc_nextfit+0x78>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);
f0118df2:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f0118df9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0118dfc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118e01:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0118e04:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118e07:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e0c:	f7 75 e8             	divl   -0x18(%ebp)
f0118e0f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118e12:	29 d0                	sub    %edx,%eax
f0118e14:	89 c1                	mov    %eax,%ecx
f0118e16:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f0118e1d:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0118e22:	0f b6 d0             	movzbl %al,%edx
f0118e25:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0118e28:	01 d0                	add    %edx,%eax
f0118e2a:	48                   	dec    %eax
f0118e2b:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0118e2e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118e31:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e36:	f7 75 e0             	divl   -0x20(%ebp)
f0118e39:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118e3c:	29 d0                	sub    %edx,%eax
f0118e3e:	01 c1                	add    %eax,%ecx
f0118e40:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f0118e47:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0118e4c:	0f b6 c0             	movzbl %al,%eax
f0118e4f:	c1 e0 04             	shl    $0x4,%eax
f0118e52:	89 c2                	mov    %eax,%edx
f0118e54:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0118e57:	01 d0                	add    %edx,%eax
f0118e59:	48                   	dec    %eax
f0118e5a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0118e5d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0118e60:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e65:	f7 75 d8             	divl   -0x28(%ebp)
f0118e68:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0118e6b:	29 d0                	sub    %edx,%eax
f0118e6d:	01 c8                	add    %ecx,%eax
f0118e6f:	ba 00 b0 1f 00       	mov    $0x1fb000,%edx
f0118e74:	29 c2                	sub    %eax,%edx
f0118e76:	89 d0                	mov    %edx,%eax
f0118e78:	83 ec 0c             	sub    $0xc,%esp
f0118e7b:	50                   	push   %eax
f0118e7c:	e8 e0 eb fe ff       	call   f0107a61 <kmalloc>
f0118e81:	83 c4 10             	add    $0x10,%esp
f0118e84:	89 85 c4 fc ff ff    	mov    %eax,-0x33c(%ebp)


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0118e8a:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f0118e90:	89 c1                	mov    %eax,%ecx
f0118e92:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f0118e99:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0118e9c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118ea1:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0118ea4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0118ea7:	ba 00 00 00 00       	mov    $0x0,%edx
f0118eac:	f7 75 d0             	divl   -0x30(%ebp)
f0118eaf:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0118eb2:	29 d0                	sub    %edx,%eax
f0118eb4:	89 c3                	mov    %eax,%ebx
f0118eb6:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0118ebd:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0118ec2:	0f b6 d0             	movzbl %al,%edx
f0118ec5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0118ec8:	01 d0                	add    %edx,%eax
f0118eca:	48                   	dec    %eax
f0118ecb:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0118ece:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0118ed1:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ed6:	f7 75 c8             	divl   -0x38(%ebp)
f0118ed9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0118edc:	29 d0                	sub    %edx,%eax
f0118ede:	01 c3                	add    %eax,%ebx
f0118ee0:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0118ee7:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0118eec:	0f b6 c0             	movzbl %al,%eax
f0118eef:	c1 e0 04             	shl    $0x4,%eax
f0118ef2:	89 c2                	mov    %eax,%edx
f0118ef4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0118ef7:	01 d0                	add    %edx,%eax
f0118ef9:	48                   	dec    %eax
f0118efa:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0118efd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0118f00:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f05:	f7 75 c0             	divl   -0x40(%ebp)
f0118f08:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0118f0b:	29 d0                	sub    %edx,%eax
f0118f0d:	01 d8                	add    %ebx,%eax
f0118f0f:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0118f14:	39 c1                	cmp    %eax,%ecx
f0118f16:	0f 85 ed 04 00 00    	jne    f0119409 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0118f1c:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f0118f22:	89 c1                	mov    %eax,%ecx
f0118f24:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0118f2b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118f2e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118f33:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0118f36:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118f39:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f3e:	f7 75 b8             	divl   -0x48(%ebp)
f0118f41:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118f44:	29 d0                	sub    %edx,%eax
f0118f46:	89 c3                	mov    %eax,%ebx
f0118f48:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0118f4f:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0118f54:	0f b6 d0             	movzbl %al,%edx
f0118f57:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0118f5a:	01 d0                	add    %edx,%eax
f0118f5c:	48                   	dec    %eax
f0118f5d:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0118f60:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118f63:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f68:	f7 75 b0             	divl   -0x50(%ebp)
f0118f6b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118f6e:	29 d0                	sub    %edx,%eax
f0118f70:	01 c3                	add    %eax,%ebx
f0118f72:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0118f79:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0118f7e:	0f b6 c0             	movzbl %al,%eax
f0118f81:	c1 e0 04             	shl    $0x4,%eax
f0118f84:	89 c2                	mov    %eax,%edx
f0118f86:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118f89:	01 d0                	add    %edx,%eax
f0118f8b:	48                   	dec    %eax
f0118f8c:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0118f8f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118f92:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f97:	f7 75 a8             	divl   -0x58(%ebp)
f0118f9a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118f9d:	29 d0                	sub    %edx,%eax
f0118f9f:	01 d8                	add    %ebx,%eax
f0118fa1:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0118fa6:	39 c1                	cmp    %eax,%ecx
f0118fa8:	0f 85 5b 04 00 00    	jne    f0119409 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0118fae:	8b 85 a8 fb ff ff    	mov    -0x458(%ebp),%eax
f0118fb4:	89 c1                	mov    %eax,%ecx
f0118fb6:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0118fbd:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0118fc0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118fc5:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0118fc8:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0118fcb:	ba 00 00 00 00       	mov    $0x0,%edx
f0118fd0:	f7 75 a0             	divl   -0x60(%ebp)
f0118fd3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0118fd6:	29 d0                	sub    %edx,%eax
f0118fd8:	89 c3                	mov    %eax,%ebx
f0118fda:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0118fe1:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0118fe6:	0f b6 d0             	movzbl %al,%edx
f0118fe9:	8b 45 98             	mov    -0x68(%ebp),%eax
f0118fec:	01 d0                	add    %edx,%eax
f0118fee:	48                   	dec    %eax
f0118fef:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0118ff2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0118ff5:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ffa:	f7 75 98             	divl   -0x68(%ebp)
f0118ffd:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0119000:	29 d0                	sub    %edx,%eax
f0119002:	01 c3                	add    %eax,%ebx
f0119004:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f011900b:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0119010:	0f b6 c0             	movzbl %al,%eax
f0119013:	c1 e0 04             	shl    $0x4,%eax
f0119016:	89 c2                	mov    %eax,%edx
f0119018:	8b 45 90             	mov    -0x70(%ebp),%eax
f011901b:	01 d0                	add    %edx,%eax
f011901d:	48                   	dec    %eax
f011901e:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0119021:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0119024:	ba 00 00 00 00       	mov    $0x0,%edx
f0119029:	f7 75 90             	divl   -0x70(%ebp)
f011902c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011902f:	29 d0                	sub    %edx,%eax
f0119031:	01 d8                	add    %ebx,%eax
f0119033:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0119038:	39 c1                	cmp    %eax,%ecx
f011903a:	0f 85 c9 03 00 00    	jne    f0119409 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0119040:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f0119046:	89 c1                	mov    %eax,%ecx
f0119048:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f011904f:	8b 45 88             	mov    -0x78(%ebp),%eax
f0119052:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119057:	89 45 84             	mov    %eax,-0x7c(%ebp)
f011905a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011905d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119062:	f7 75 88             	divl   -0x78(%ebp)
f0119065:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0119068:	29 d0                	sub    %edx,%eax
f011906a:	89 c3                	mov    %eax,%ebx
f011906c:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0119073:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0119078:	0f b6 d0             	movzbl %al,%edx
f011907b:	8b 45 80             	mov    -0x80(%ebp),%eax
f011907e:	01 d0                	add    %edx,%eax
f0119080:	48                   	dec    %eax
f0119081:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0119087:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011908d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119092:	f7 75 80             	divl   -0x80(%ebp)
f0119095:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011909b:	29 d0                	sub    %edx,%eax
f011909d:	01 c3                	add    %eax,%ebx
f011909f:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f01190a6:	10 00 00 
f01190a9:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01190ae:	0f b6 c0             	movzbl %al,%eax
f01190b1:	c1 e0 04             	shl    $0x4,%eax
f01190b4:	89 c2                	mov    %eax,%edx
f01190b6:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01190bc:	01 d0                	add    %edx,%eax
f01190be:	48                   	dec    %eax
f01190bf:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01190c5:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01190cb:	ba 00 00 00 00       	mov    $0x0,%edx
f01190d0:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01190d6:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01190dc:	29 d0                	sub    %edx,%eax
f01190de:	01 d8                	add    %ebx,%eax
f01190e0:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f01190e5:	39 c1                	cmp    %eax,%ecx
f01190e7:	0f 85 1c 03 00 00    	jne    f0119409 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f01190ed:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f01190f3:	89 c1                	mov    %eax,%ecx
f01190f5:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01190fc:	10 00 00 
f01190ff:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0119105:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011910a:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0119110:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0119116:	ba 00 00 00 00       	mov    $0x0,%edx
f011911b:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0119121:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0119127:	29 d0                	sub    %edx,%eax
f0119129:	89 c3                	mov    %eax,%ebx
f011912b:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0119132:	10 00 00 
f0119135:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011913a:	0f b6 d0             	movzbl %al,%edx
f011913d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0119143:	01 d0                	add    %edx,%eax
f0119145:	48                   	dec    %eax
f0119146:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f011914c:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0119152:	ba 00 00 00 00       	mov    $0x0,%edx
f0119157:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f011915d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0119163:	29 d0                	sub    %edx,%eax
f0119165:	01 c3                	add    %eax,%ebx
f0119167:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f011916e:	10 00 00 
f0119171:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0119176:	0f b6 c0             	movzbl %al,%eax
f0119179:	c1 e0 04             	shl    $0x4,%eax
f011917c:	89 c2                	mov    %eax,%edx
f011917e:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0119184:	01 d0                	add    %edx,%eax
f0119186:	48                   	dec    %eax
f0119187:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f011918d:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0119193:	ba 00 00 00 00       	mov    $0x0,%edx
f0119198:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f011919e:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01191a4:	29 d0                	sub    %edx,%eax
f01191a6:	01 d8                	add    %ebx,%eax
f01191a8:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f01191ad:	39 c1                	cmp    %eax,%ecx
f01191af:	0f 85 54 02 00 00    	jne    f0119409 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f01191b5:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f01191bb:	89 c1                	mov    %eax,%ecx
f01191bd:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01191c4:	10 00 00 
f01191c7:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01191cd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01191d2:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01191d8:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01191de:	ba 00 00 00 00       	mov    $0x0,%edx
f01191e3:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01191e9:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01191ef:	29 d0                	sub    %edx,%eax
f01191f1:	89 c3                	mov    %eax,%ebx
f01191f3:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01191fa:	10 00 00 
f01191fd:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0119202:	0f b6 d0             	movzbl %al,%edx
f0119205:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011920b:	01 d0                	add    %edx,%eax
f011920d:	48                   	dec    %eax
f011920e:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0119214:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011921a:	ba 00 00 00 00       	mov    $0x0,%edx
f011921f:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0119225:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011922b:	29 d0                	sub    %edx,%eax
f011922d:	01 c3                	add    %eax,%ebx
f011922f:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0119236:	10 00 00 
f0119239:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011923e:	0f b6 c0             	movzbl %al,%eax
f0119241:	c1 e0 04             	shl    $0x4,%eax
f0119244:	89 c2                	mov    %eax,%edx
f0119246:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011924c:	01 d0                	add    %edx,%eax
f011924e:	48                   	dec    %eax
f011924f:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0119255:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011925b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119260:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0119266:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011926c:	29 d0                	sub    %edx,%eax
f011926e:	01 d8                	add    %ebx,%eax
f0119270:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f0119275:	39 c1                	cmp    %eax,%ecx
f0119277:	0f 85 8c 01 00 00    	jne    f0119409 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f011927d:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f0119283:	89 c1                	mov    %eax,%ecx
f0119285:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f011928c:	10 00 00 
f011928f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0119295:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011929a:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f01192a0:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01192a6:	ba 00 00 00 00       	mov    $0x0,%edx
f01192ab:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f01192b1:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01192b7:	29 d0                	sub    %edx,%eax
f01192b9:	89 c3                	mov    %eax,%ebx
f01192bb:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f01192c2:	10 00 00 
f01192c5:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01192ca:	0f b6 d0             	movzbl %al,%edx
f01192cd:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01192d3:	01 d0                	add    %edx,%eax
f01192d5:	48                   	dec    %eax
f01192d6:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01192dc:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01192e2:	ba 00 00 00 00       	mov    $0x0,%edx
f01192e7:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01192ed:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01192f3:	29 d0                	sub    %edx,%eax
f01192f5:	01 c3                	add    %eax,%ebx
f01192f7:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01192fe:	10 00 00 
f0119301:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0119306:	0f b6 c0             	movzbl %al,%eax
f0119309:	c1 e0 04             	shl    $0x4,%eax
f011930c:	89 c2                	mov    %eax,%edx
f011930e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0119314:	01 d0                	add    %edx,%eax
f0119316:	48                   	dec    %eax
f0119317:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f011931d:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0119323:	ba 00 00 00 00       	mov    $0x0,%edx
f0119328:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f011932e:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0119334:	29 d0                	sub    %edx,%eax
f0119336:	01 d8                	add    %ebx,%eax
f0119338:	2d 00 c0 df 06       	sub    $0x6dfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011933d:	39 c1                	cmp    %eax,%ecx
f011933f:	0f 85 c4 00 00 00    	jne    f0119409 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
f0119345:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f011934b:	89 c1                	mov    %eax,%ecx
f011934d:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0119354:	10 00 00 
f0119357:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011935d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119362:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0119368:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011936e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119373:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0119379:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011937f:	29 d0                	sub    %edx,%eax
f0119381:	89 c3                	mov    %eax,%ebx
f0119383:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011938a:	10 00 00 
f011938d:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0119392:	0f b6 d0             	movzbl %al,%edx
f0119395:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011939b:	01 d0                	add    %edx,%eax
f011939d:	48                   	dec    %eax
f011939e:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f01193a4:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01193aa:	ba 00 00 00 00       	mov    $0x0,%edx
f01193af:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f01193b5:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01193bb:	29 d0                	sub    %edx,%eax
f01193bd:	01 c3                	add    %eax,%ebx
f01193bf:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f01193c6:	10 00 00 
f01193c9:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01193ce:	0f b6 c0             	movzbl %al,%eax
f01193d1:	c1 e0 04             	shl    $0x4,%eax
f01193d4:	89 c2                	mov    %eax,%edx
f01193d6:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01193dc:	01 d0                	add    %edx,%eax
f01193de:	48                   	dec    %eax
f01193df:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f01193e5:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01193eb:	ba 00 00 00 00       	mov    $0x0,%edx
f01193f0:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f01193f6:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01193fc:	29 d0                	sub    %edx,%eax
f01193fe:	01 d8                	add    %ebx,%eax
f0119400:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f0119405:	39 c1                	cmp    %eax,%ecx
f0119407:	74 17                	je     f0119420 <test_kmalloc_nextfit+0x6cb>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
		panic("Wrong allocation, Check next fitting strategy is working correctly");
f0119409:	83 ec 04             	sub    $0x4,%esp
f011940c:	68 f4 b3 13 f0       	push   $0xf013b3f4
f0119411:	68 03 01 00 00       	push   $0x103
f0119416:	68 7a b1 13 f0       	push   $0xf013b17a
f011941b:	e8 e5 6d fe ff       	call   f0100205 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119420:	e8 81 a9 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0119425:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119428:	74 17                	je     f0119441 <test_kmalloc_nextfit+0x6ec>
f011942a:	83 ec 04             	sub    $0x4,%esp
f011942d:	68 94 b1 13 f0       	push   $0xf013b194
f0119432:	68 05 01 00 00       	push   $0x105
f0119437:	68 7a b1 13 f0       	push   $0xf013b17a
f011943c:	e8 c4 6d fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/(PAGE_SIZE) ) panic("Wrong allocation");
f0119441:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119444:	e8 9a 39 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0119449:	29 c3                	sub    %eax,%ebx
f011944b:	89 d9                	mov    %ebx,%ecx
f011944d:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0119454:	10 00 00 
f0119457:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011945d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119462:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0119468:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011946e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119473:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0119479:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011947f:	29 d0                	sub    %edx,%eax
f0119481:	89 c3                	mov    %eax,%ebx
f0119483:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011948a:	10 00 00 
f011948d:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0119492:	0f b6 d0             	movzbl %al,%edx
f0119495:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011949b:	01 d0                	add    %edx,%eax
f011949d:	48                   	dec    %eax
f011949e:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f01194a4:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01194aa:	ba 00 00 00 00       	mov    $0x0,%edx
f01194af:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f01194b5:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01194bb:	29 d0                	sub    %edx,%eax
f01194bd:	01 c3                	add    %eax,%ebx
f01194bf:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f01194c6:	10 00 00 
f01194c9:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01194ce:	0f b6 c0             	movzbl %al,%eax
f01194d1:	c1 e0 04             	shl    $0x4,%eax
f01194d4:	89 c2                	mov    %eax,%edx
f01194d6:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01194dc:	01 d0                	add    %edx,%eax
f01194de:	48                   	dec    %eax
f01194df:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f01194e5:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01194eb:	ba 00 00 00 00       	mov    $0x0,%edx
f01194f0:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f01194f6:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01194fc:	29 d0                	sub    %edx,%eax
f01194fe:	01 d8                	add    %ebx,%eax
f0119500:	ba 00 b0 ff 09       	mov    $0x9ffb000,%edx
f0119505:	29 c2                	sub    %eax,%edx
f0119507:	89 d0                	mov    %edx,%eax
f0119509:	c1 e8 0c             	shr    $0xc,%eax
f011950c:	39 c1                	cmp    %eax,%ecx
f011950e:	74 17                	je     f0119527 <test_kmalloc_nextfit+0x7d2>
f0119510:	83 ec 04             	sub    $0x4,%esp
f0119513:	68 37 b4 13 f0       	push   $0xf013b437
f0119518:	68 06 01 00 00       	push   $0x106
f011951d:	68 7a b1 13 f0       	push   $0xf013b17a
f0119522:	e8 de 6c fe ff       	call   f0100205 <_panic>

	// Make memory holes.
	freeDiskFrames = pf_calculate_free_frames() ;
f0119527:	e8 7a a8 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011952c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011952f:	e8 af 38 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0119534:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kfree(ptr_allocations[0]);		// Hole 1 = 2 M
f0119537:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f011953d:	83 ec 0c             	sub    $0xc,%esp
f0119540:	50                   	push   %eax
f0119541:	e8 31 e6 fe ff       	call   f0107b77 <kfree>
f0119546:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		// Hole 2 = 4 M
f0119549:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f011954f:	83 ec 0c             	sub    $0xc,%esp
f0119552:	50                   	push   %eax
f0119553:	e8 1f e6 fe ff       	call   f0107b77 <kfree>
f0119558:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f011955b:	8b 85 94 fb ff ff    	mov    -0x46c(%ebp),%eax
f0119561:	83 ec 0c             	sub    $0xc,%esp
f0119564:	50                   	push   %eax
f0119565:	e8 0d e6 fe ff       	call   f0107b77 <kfree>
f011956a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[5]);		// Hole 3 = 2 M
f011956d:	8b 85 9c fb ff ff    	mov    -0x464(%ebp),%eax
f0119573:	83 ec 0c             	sub    $0xc,%esp
f0119576:	50                   	push   %eax
f0119577:	e8 fb e5 fe ff       	call   f0107b77 <kfree>
f011957c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		// Hole 4 = 6 M
f011957f:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f0119585:	83 ec 0c             	sub    $0xc,%esp
f0119588:	50                   	push   %eax
f0119589:	e8 e9 e5 fe ff       	call   f0107b77 <kfree>
f011958e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f0119591:	8b 85 b8 fb ff ff    	mov    -0x448(%ebp),%eax
f0119597:	83 ec 0c             	sub    $0xc,%esp
f011959a:	50                   	push   %eax
f011959b:	e8 d7 e5 fe ff       	call   f0107b77 <kfree>
f01195a0:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f01195a3:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f01195a9:	83 ec 0c             	sub    $0xc,%esp
f01195ac:	50                   	push   %eax
f01195ad:	e8 c5 e5 fe ff       	call   f0107b77 <kfree>
f01195b2:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[20]);		// Hole 5 = 2 M
f01195b5:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f01195bb:	83 ec 0c             	sub    $0xc,%esp
f01195be:	50                   	push   %eax
f01195bf:	e8 b3 e5 fe ff       	call   f0107b77 <kfree>
f01195c4:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[25]);		// Hole 6 = 2 M
f01195c7:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f01195cd:	83 ec 0c             	sub    $0xc,%esp
f01195d0:	50                   	push   %eax
f01195d1:	e8 a1 e5 fe ff       	call   f0107b77 <kfree>
f01195d6:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[79]);		// Hole 7 = 2 M - 4 KB
f01195d9:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f01195df:	83 ec 0c             	sub    $0xc,%esp
f01195e2:	50                   	push   %eax
f01195e3:	e8 8f e5 fe ff       	call   f0107b77 <kfree>
f01195e8:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01195eb:	e8 b6 a7 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f01195f0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01195f3:	74 17                	je     f011960c <test_kmalloc_nextfit+0x8b7>
f01195f5:	83 ec 04             	sub    $0x4,%esp
f01195f8:	68 94 b1 13 f0       	push   $0xf013b194
f01195fd:	68 17 01 00 00       	push   $0x117
f0119602:	68 7a b1 13 f0       	push   $0xf013b17a
f0119607:	e8 f9 6b fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((10*2*Mega) - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011960c:	e8 d2 37 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0119611:	89 c2                	mov    %eax,%edx
f0119613:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119616:	89 d1                	mov    %edx,%ecx
f0119618:	29 c1                	sub    %eax,%ecx
f011961a:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0119621:	10 00 00 
f0119624:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011962a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011962f:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0119635:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011963b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119640:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0119646:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011964c:	29 d0                	sub    %edx,%eax
f011964e:	89 c3                	mov    %eax,%ebx
f0119650:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0119657:	10 00 00 
f011965a:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011965f:	0f b6 d0             	movzbl %al,%edx
f0119662:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0119668:	01 d0                	add    %edx,%eax
f011966a:	48                   	dec    %eax
f011966b:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0119671:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0119677:	ba 00 00 00 00       	mov    $0x0,%edx
f011967c:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0119682:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0119688:	29 d0                	sub    %edx,%eax
f011968a:	01 c3                	add    %eax,%ebx
f011968c:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0119693:	10 00 00 
f0119696:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011969b:	0f b6 c0             	movzbl %al,%eax
f011969e:	c1 e0 04             	shl    $0x4,%eax
f01196a1:	89 c2                	mov    %eax,%edx
f01196a3:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01196a9:	01 d0                	add    %edx,%eax
f01196ab:	48                   	dec    %eax
f01196ac:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f01196b2:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01196b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01196bd:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f01196c3:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01196c9:	29 d0                	sub    %edx,%eax
f01196cb:	01 d8                	add    %ebx,%eax
f01196cd:	ba 00 b0 3f 01       	mov    $0x13fb000,%edx
f01196d2:	29 c2                	sub    %eax,%edx
f01196d4:	89 d0                	mov    %edx,%eax
f01196d6:	c1 e8 0c             	shr    $0xc,%eax
f01196d9:	39 c1                	cmp    %eax,%ecx
f01196db:	74 17                	je     f01196f4 <test_kmalloc_nextfit+0x99f>
f01196dd:	83 ec 04             	sub    $0x4,%esp
f01196e0:	68 48 b4 13 f0       	push   $0xf013b448
f01196e5:	68 18 01 00 00       	push   $0x118
f01196ea:	68 7a b1 13 f0       	push   $0xf013b17a
f01196ef:	e8 11 6b fe ff       	call   f0100205 <_panic>

	// Test next fit
	freeDiskFrames = pf_calculate_free_frames() ;
f01196f4:	e8 ad a6 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f01196f9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01196fc:	e8 e2 36 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0119701:	89 45 f0             	mov    %eax,-0x10(%ebp)
	void* tempAddress = kmalloc(Mega-kilo);		// Use Hole 1 -> Hole 1 = 1 M
f0119704:	83 ec 0c             	sub    $0xc,%esp
f0119707:	68 00 fc 0f 00       	push   $0xffc00
f011970c:	e8 50 e3 fe ff       	call   f0107a61 <kmalloc>
f0119711:	83 c4 10             	add    $0x10,%esp
f0119714:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f011971a:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0119721:	10 00 00 
f0119724:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011972a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011972f:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0119735:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011973b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119740:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0119746:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011974c:	29 d0                	sub    %edx,%eax
f011974e:	89 c1                	mov    %eax,%ecx
f0119750:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0119757:	10 00 00 
f011975a:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011975f:	0f b6 d0             	movzbl %al,%edx
f0119762:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0119768:	01 d0                	add    %edx,%eax
f011976a:	48                   	dec    %eax
f011976b:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0119771:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0119777:	ba 00 00 00 00       	mov    $0x0,%edx
f011977c:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0119782:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0119788:	29 d0                	sub    %edx,%eax
f011978a:	01 c1                	add    %eax,%ecx
f011978c:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0119793:	10 00 00 
f0119796:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011979b:	0f b6 c0             	movzbl %al,%eax
f011979e:	c1 e0 04             	shl    $0x4,%eax
f01197a1:	89 c2                	mov    %eax,%edx
f01197a3:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01197a9:	01 d0                	add    %edx,%eax
f01197ab:	48                   	dec    %eax
f01197ac:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f01197b2:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01197b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01197bd:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f01197c3:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01197c9:	29 d0                	sub    %edx,%eax
f01197cb:	01 c8                	add    %ecx,%eax
f01197cd:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f01197d3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01197d9:	39 c2                	cmp    %eax,%edx
f01197db:	74 17                	je     f01197f4 <test_kmalloc_nextfit+0xa9f>
		panic("Next Fit not working correctly");
f01197dd:	83 ec 04             	sub    $0x4,%esp
f01197e0:	68 88 b4 13 f0       	push   $0xf013b488
f01197e5:	68 1f 01 00 00       	push   $0x11f
f01197ea:	68 7a b1 13 f0       	push   $0xf013b17a
f01197ef:	e8 11 6a fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01197f4:	e8 ad a5 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f01197f9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01197fc:	74 17                	je     f0119815 <test_kmalloc_nextfit+0xac0>
f01197fe:	83 ec 04             	sub    $0x4,%esp
f0119801:	68 94 b1 13 f0       	push   $0xf013b194
f0119806:	68 20 01 00 00       	push   $0x120
f011980b:	68 7a b1 13 f0       	push   $0xf013b17a
f0119810:	e8 f0 69 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119815:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119818:	e8 c6 35 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011981d:	29 c3                	sub    %eax,%ebx
f011981f:	89 d8                	mov    %ebx,%eax
f0119821:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119826:	74 17                	je     f011983f <test_kmalloc_nextfit+0xaea>
f0119828:	83 ec 04             	sub    $0x4,%esp
f011982b:	68 37 b4 13 f0       	push   $0xf013b437
f0119830:	68 21 01 00 00       	push   $0x121
f0119835:	68 7a b1 13 f0       	push   $0xf013b17a
f011983a:	e8 c6 69 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011983f:	e8 62 a5 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0119844:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119847:	e8 97 35 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011984c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo);					// Use Hole 1 -> Hole 1 = 1 M - Kilo -> requires one page only
f011984f:	83 ec 0c             	sub    $0xc,%esp
f0119852:	68 00 04 00 00       	push   $0x400
f0119857:	e8 05 e2 fe ff       	call   f0107a61 <kmalloc>
f011985c:	83 c4 10             	add    $0x10,%esp
f011985f:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00100000)
f0119865:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011986c:	10 00 00 
f011986f:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0119875:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011987a:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0119880:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0119886:	ba 00 00 00 00       	mov    $0x0,%edx
f011988b:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0119891:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0119897:	29 d0                	sub    %edx,%eax
f0119899:	89 c1                	mov    %eax,%ecx
f011989b:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f01198a2:	10 00 00 
f01198a5:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01198aa:	0f b6 d0             	movzbl %al,%edx
f01198ad:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01198b3:	01 d0                	add    %edx,%eax
f01198b5:	48                   	dec    %eax
f01198b6:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f01198bc:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01198c2:	ba 00 00 00 00       	mov    $0x0,%edx
f01198c7:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f01198cd:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01198d3:	29 d0                	sub    %edx,%eax
f01198d5:	01 c1                	add    %eax,%ecx
f01198d7:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f01198de:	10 00 00 
f01198e1:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01198e6:	0f b6 c0             	movzbl %al,%eax
f01198e9:	c1 e0 04             	shl    $0x4,%eax
f01198ec:	89 c2                	mov    %eax,%edx
f01198ee:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01198f4:	01 d0                	add    %edx,%eax
f01198f6:	48                   	dec    %eax
f01198f7:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f01198fd:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0119903:	ba 00 00 00 00       	mov    $0x0,%edx
f0119908:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011990e:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0119914:	29 d0                	sub    %edx,%eax
f0119916:	01 c8                	add    %ecx,%eax
f0119918:	8d 90 00 40 10 f6    	lea    -0x9efc000(%eax),%edx
f011991e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119924:	39 c2                	cmp    %eax,%edx
f0119926:	74 17                	je     f011993f <test_kmalloc_nextfit+0xbea>
		panic("Next Fit not working correctly");
f0119928:	83 ec 04             	sub    $0x4,%esp
f011992b:	68 88 b4 13 f0       	push   $0xf013b488
f0119930:	68 27 01 00 00       	push   $0x127
f0119935:	68 7a b1 13 f0       	push   $0xf013b17a
f011993a:	e8 c6 68 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011993f:	e8 62 a4 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0119944:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119947:	74 17                	je     f0119960 <test_kmalloc_nextfit+0xc0b>
f0119949:	83 ec 04             	sub    $0x4,%esp
f011994c:	68 94 b1 13 f0       	push   $0xf013b194
f0119951:	68 28 01 00 00       	push   $0x128
f0119956:	68 7a b1 13 f0       	push   $0xf013b17a
f011995b:	e8 a5 68 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f0119960:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119963:	e8 7b 34 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0119968:	29 c3                	sub    %eax,%ebx
f011996a:	89 d8                	mov    %ebx,%eax
f011996c:	83 f8 01             	cmp    $0x1,%eax
f011996f:	74 17                	je     f0119988 <test_kmalloc_nextfit+0xc33>
f0119971:	83 ec 04             	sub    $0x4,%esp
f0119974:	68 37 b4 13 f0       	push   $0xf013b437
f0119979:	68 29 01 00 00       	push   $0x129
f011997e:	68 7a b1 13 f0       	push   $0xf013b17a
f0119983:	e8 7d 68 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119988:	e8 19 a4 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011998d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119990:	e8 4e 34 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0119995:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(5*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f0119998:	83 ec 0c             	sub    $0xc,%esp
f011999b:	68 00 00 50 00       	push   $0x500000
f01199a0:	e8 bc e0 fe ff       	call   f0107a61 <kmalloc>
f01199a5:	83 c4 10             	add    $0x10,%esp
f01199a8:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f01199ae:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f01199b5:	10 00 00 
f01199b8:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01199be:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01199c3:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f01199c9:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01199cf:	ba 00 00 00 00       	mov    $0x0,%edx
f01199d4:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f01199da:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01199e0:	29 d0                	sub    %edx,%eax
f01199e2:	89 c1                	mov    %eax,%ecx
f01199e4:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f01199eb:	10 00 00 
f01199ee:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01199f3:	0f b6 d0             	movzbl %al,%edx
f01199f6:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01199fc:	01 d0                	add    %edx,%eax
f01199fe:	48                   	dec    %eax
f01199ff:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f0119a05:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0119a0b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119a10:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f0119a16:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0119a1c:	29 d0                	sub    %edx,%eax
f0119a1e:	01 c1                	add    %eax,%ecx
f0119a20:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f0119a27:	10 00 00 
f0119a2a:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0119a2f:	0f b6 c0             	movzbl %al,%eax
f0119a32:	c1 e0 04             	shl    $0x4,%eax
f0119a35:	89 c2                	mov    %eax,%edx
f0119a37:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0119a3d:	01 d0                	add    %edx,%eax
f0119a3f:	48                   	dec    %eax
f0119a40:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f0119a46:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0119a4c:	ba 00 00 00 00       	mov    $0x0,%edx
f0119a51:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f0119a57:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0119a5d:	29 d0                	sub    %edx,%eax
f0119a5f:	01 c8                	add    %ecx,%eax
f0119a61:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f0119a67:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119a6d:	39 c2                	cmp    %eax,%edx
f0119a6f:	74 17                	je     f0119a88 <test_kmalloc_nextfit+0xd33>
		panic("Next Fit not working correctly");
f0119a71:	83 ec 04             	sub    $0x4,%esp
f0119a74:	68 88 b4 13 f0       	push   $0xf013b488
f0119a79:	68 2f 01 00 00       	push   $0x12f
f0119a7e:	68 7a b1 13 f0       	push   $0xf013b17a
f0119a83:	e8 7d 67 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119a88:	e8 19 a3 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0119a8d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119a90:	74 17                	je     f0119aa9 <test_kmalloc_nextfit+0xd54>
f0119a92:	83 ec 04             	sub    $0x4,%esp
f0119a95:	68 94 b1 13 f0       	push   $0xf013b194
f0119a9a:	68 30 01 00 00       	push   $0x130
f0119a9f:	68 7a b1 13 f0       	push   $0xf013b17a
f0119aa4:	e8 5c 67 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (5*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119aa9:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119aac:	e8 32 33 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0119ab1:	29 c3                	sub    %eax,%ebx
f0119ab3:	89 d8                	mov    %ebx,%eax
f0119ab5:	3d 00 05 00 00       	cmp    $0x500,%eax
f0119aba:	74 17                	je     f0119ad3 <test_kmalloc_nextfit+0xd7e>
f0119abc:	83 ec 04             	sub    $0x4,%esp
f0119abf:	68 37 b4 13 f0       	push   $0xf013b437
f0119ac4:	68 31 01 00 00       	push   $0x131
f0119ac9:	68 7a b1 13 f0       	push   $0xf013b17a
f0119ace:	e8 32 67 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119ad3:	e8 ce a2 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0119ad8:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119adb:	e8 03 33 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0119ae0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(1*Mega); 			   // Use Hole 4 -> Hole 4 = 0 M
f0119ae3:	83 ec 0c             	sub    $0xc,%esp
f0119ae6:	68 00 00 10 00       	push   $0x100000
f0119aeb:	e8 71 df fe ff       	call   f0107a61 <kmalloc>
f0119af0:	83 c4 10             	add    $0x10,%esp
f0119af3:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01900000)
f0119af9:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f0119b00:	10 00 00 
f0119b03:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0119b09:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119b0e:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f0119b14:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0119b1a:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b1f:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f0119b25:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0119b2b:	29 d0                	sub    %edx,%eax
f0119b2d:	89 c1                	mov    %eax,%ecx
f0119b2f:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f0119b36:	10 00 00 
f0119b39:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0119b3e:	0f b6 d0             	movzbl %al,%edx
f0119b41:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0119b47:	01 d0                	add    %edx,%eax
f0119b49:	48                   	dec    %eax
f0119b4a:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f0119b50:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0119b56:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b5b:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f0119b61:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0119b67:	29 d0                	sub    %edx,%eax
f0119b69:	01 c1                	add    %eax,%ecx
f0119b6b:	c7 85 84 fe ff ff 00 	movl   $0x1000,-0x17c(%ebp)
f0119b72:	10 00 00 
f0119b75:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0119b7a:	0f b6 c0             	movzbl %al,%eax
f0119b7d:	c1 e0 04             	shl    $0x4,%eax
f0119b80:	89 c2                	mov    %eax,%edx
f0119b82:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0119b88:	01 d0                	add    %edx,%eax
f0119b8a:	48                   	dec    %eax
f0119b8b:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
f0119b91:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0119b97:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b9c:	f7 b5 84 fe ff ff    	divl   -0x17c(%ebp)
f0119ba2:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0119ba8:	29 d0                	sub    %edx,%eax
f0119baa:	01 c8                	add    %ecx,%eax
f0119bac:	8d 90 00 40 90 f7    	lea    -0x86fc000(%eax),%edx
f0119bb2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119bb8:	39 c2                	cmp    %eax,%edx
f0119bba:	74 17                	je     f0119bd3 <test_kmalloc_nextfit+0xe7e>
		panic("Next Fit not working correctly");
f0119bbc:	83 ec 04             	sub    $0x4,%esp
f0119bbf:	68 88 b4 13 f0       	push   $0xf013b488
f0119bc4:	68 37 01 00 00       	push   $0x137
f0119bc9:	68 7a b1 13 f0       	push   $0xf013b17a
f0119bce:	e8 32 66 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119bd3:	e8 ce a1 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0119bd8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119bdb:	74 17                	je     f0119bf4 <test_kmalloc_nextfit+0xe9f>
f0119bdd:	83 ec 04             	sub    $0x4,%esp
f0119be0:	68 94 b1 13 f0       	push   $0xf013b194
f0119be5:	68 38 01 00 00       	push   $0x138
f0119bea:	68 7a b1 13 f0       	push   $0xf013b17a
f0119bef:	e8 11 66 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119bf4:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119bf7:	e8 e7 31 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0119bfc:	29 c3                	sub    %eax,%ebx
f0119bfe:	89 d8                	mov    %ebx,%eax
f0119c00:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119c05:	74 17                	je     f0119c1e <test_kmalloc_nextfit+0xec9>
f0119c07:	83 ec 04             	sub    $0x4,%esp
f0119c0a:	68 37 b4 13 f0       	push   $0xf013b437
f0119c0f:	68 39 01 00 00       	push   $0x139
f0119c14:	68 7a b1 13 f0       	push   $0xf013b17a
f0119c19:	e8 e7 65 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119c1e:	e8 83 a1 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0119c23:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119c26:	e8 b8 31 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0119c2b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[15]);					// Make a new hole => 2 M
f0119c2e:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f0119c34:	83 ec 0c             	sub    $0xc,%esp
f0119c37:	50                   	push   %eax
f0119c38:	e8 3a df fe ff       	call   f0107b77 <kfree>
f0119c3d:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119c40:	e8 61 a1 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0119c45:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119c48:	74 17                	je     f0119c61 <test_kmalloc_nextfit+0xf0c>
f0119c4a:	83 ec 04             	sub    $0x4,%esp
f0119c4d:	68 94 b1 13 f0       	push   $0xf013b194
f0119c52:	68 3e 01 00 00       	push   $0x13e
f0119c57:	68 7a b1 13 f0       	push   $0xf013b17a
f0119c5c:	e8 a4 65 fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) !=  (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0119c61:	e8 7d 31 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0119c66:	89 c2                	mov    %eax,%edx
f0119c68:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119c6b:	29 c2                	sub    %eax,%edx
f0119c6d:	89 d0                	mov    %edx,%eax
f0119c6f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119c74:	74 17                	je     f0119c8d <test_kmalloc_nextfit+0xf38>
f0119c76:	83 ec 04             	sub    $0x4,%esp
f0119c79:	68 48 b4 13 f0       	push   $0xf013b448
f0119c7e:	68 3f 01 00 00       	push   $0x13f
f0119c83:	68 7a b1 13 f0       	push   $0xf013b17a
f0119c88:	e8 78 65 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119c8d:	e8 14 a1 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0119c92:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119c95:	e8 49 31 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0119c9a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use new Hole = 2 M - 4 kilo
f0119c9d:	83 ec 0c             	sub    $0xc,%esp
f0119ca0:	68 00 04 00 00       	push   $0x400
f0119ca5:	e8 b7 dd fe ff       	call   f0107a61 <kmalloc>
f0119caa:	83 c4 10             	add    $0x10,%esp
f0119cad:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E00000)
f0119cb3:	c7 85 7c fe ff ff 00 	movl   $0x1000,-0x184(%ebp)
f0119cba:	10 00 00 
f0119cbd:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0119cc3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119cc8:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
f0119cce:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0119cd4:	ba 00 00 00 00       	mov    $0x0,%edx
f0119cd9:	f7 b5 7c fe ff ff    	divl   -0x184(%ebp)
f0119cdf:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0119ce5:	29 d0                	sub    %edx,%eax
f0119ce7:	89 c1                	mov    %eax,%ecx
f0119ce9:	c7 85 74 fe ff ff 00 	movl   $0x1000,-0x18c(%ebp)
f0119cf0:	10 00 00 
f0119cf3:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0119cf8:	0f b6 d0             	movzbl %al,%edx
f0119cfb:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0119d01:	01 d0                	add    %edx,%eax
f0119d03:	48                   	dec    %eax
f0119d04:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
f0119d0a:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0119d10:	ba 00 00 00 00       	mov    $0x0,%edx
f0119d15:	f7 b5 74 fe ff ff    	divl   -0x18c(%ebp)
f0119d1b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0119d21:	29 d0                	sub    %edx,%eax
f0119d23:	01 c1                	add    %eax,%ecx
f0119d25:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f0119d2c:	10 00 00 
f0119d2f:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0119d34:	0f b6 c0             	movzbl %al,%eax
f0119d37:	c1 e0 04             	shl    $0x4,%eax
f0119d3a:	89 c2                	mov    %eax,%edx
f0119d3c:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0119d42:	01 d0                	add    %edx,%eax
f0119d44:	48                   	dec    %eax
f0119d45:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f0119d4b:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0119d51:	ba 00 00 00 00       	mov    $0x0,%edx
f0119d56:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f0119d5c:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0119d62:	29 d0                	sub    %edx,%eax
f0119d64:	01 c8                	add    %ecx,%eax
f0119d66:	8d 90 00 40 e0 f7    	lea    -0x81fc000(%eax),%edx
f0119d6c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119d72:	39 c2                	cmp    %eax,%edx
f0119d74:	74 17                	je     f0119d8d <test_kmalloc_nextfit+0x1038>
		panic("Next Fit not working correctly");
f0119d76:	83 ec 04             	sub    $0x4,%esp
f0119d79:	68 88 b4 13 f0       	push   $0xf013b488
f0119d7e:	68 45 01 00 00       	push   $0x145
f0119d83:	68 7a b1 13 f0       	push   $0xf013b17a
f0119d88:	e8 78 64 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119d8d:	e8 14 a0 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0119d92:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119d95:	74 17                	je     f0119dae <test_kmalloc_nextfit+0x1059>
f0119d97:	83 ec 04             	sub    $0x4,%esp
f0119d9a:	68 94 b1 13 f0       	push   $0xf013b194
f0119d9f:	68 46 01 00 00       	push   $0x146
f0119da4:	68 7a b1 13 f0       	push   $0xf013b17a
f0119da9:	e8 57 64 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f0119dae:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119db1:	e8 2d 30 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0119db6:	29 c3                	sub    %eax,%ebx
f0119db8:	89 d8                	mov    %ebx,%eax
f0119dba:	83 f8 01             	cmp    $0x1,%eax
f0119dbd:	74 17                	je     f0119dd6 <test_kmalloc_nextfit+0x1081>
f0119dbf:	83 ec 04             	sub    $0x4,%esp
f0119dc2:	68 37 b4 13 f0       	push   $0xf013b437
f0119dc7:	68 47 01 00 00       	push   $0x147
f0119dcc:	68 7a b1 13 f0       	push   $0xf013b17a
f0119dd1:	e8 2f 64 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119dd6:	e8 cb 9f fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0119ddb:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119dde:	e8 00 30 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0119de3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(Mega + 1016*kilo); 	// Use new Hole = 4 kilo
f0119de6:	83 ec 0c             	sub    $0xc,%esp
f0119de9:	68 00 e0 1f 00       	push   $0x1fe000
f0119dee:	e8 6e dc fe ff       	call   f0107a61 <kmalloc>
f0119df3:	83 c4 10             	add    $0x10,%esp
f0119df6:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E01000)
f0119dfc:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f0119e03:	10 00 00 
f0119e06:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0119e0c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119e11:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f0119e17:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0119e1d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e22:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f0119e28:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0119e2e:	29 d0                	sub    %edx,%eax
f0119e30:	89 c1                	mov    %eax,%ecx
f0119e32:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f0119e39:	10 00 00 
f0119e3c:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0119e41:	0f b6 d0             	movzbl %al,%edx
f0119e44:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0119e4a:	01 d0                	add    %edx,%eax
f0119e4c:	48                   	dec    %eax
f0119e4d:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0119e53:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0119e59:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e5e:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0119e64:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0119e6a:	29 d0                	sub    %edx,%eax
f0119e6c:	01 c1                	add    %eax,%ecx
f0119e6e:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f0119e75:	10 00 00 
f0119e78:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0119e7d:	0f b6 c0             	movzbl %al,%eax
f0119e80:	c1 e0 04             	shl    $0x4,%eax
f0119e83:	89 c2                	mov    %eax,%edx
f0119e85:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0119e8b:	01 d0                	add    %edx,%eax
f0119e8d:	48                   	dec    %eax
f0119e8e:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f0119e94:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0119e9a:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e9f:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f0119ea5:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0119eab:	29 d0                	sub    %edx,%eax
f0119ead:	01 c8                	add    %ecx,%eax
f0119eaf:	8d 90 00 50 e0 f7    	lea    -0x81fb000(%eax),%edx
f0119eb5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119ebb:	39 c2                	cmp    %eax,%edx
f0119ebd:	74 17                	je     f0119ed6 <test_kmalloc_nextfit+0x1181>
		panic("Next Fit not working correctly");
f0119ebf:	83 ec 04             	sub    $0x4,%esp
f0119ec2:	68 88 b4 13 f0       	push   $0xf013b488
f0119ec7:	68 4d 01 00 00       	push   $0x14d
f0119ecc:	68 7a b1 13 f0       	push   $0xf013b17a
f0119ed1:	e8 2f 63 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119ed6:	e8 cb 9e fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0119edb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119ede:	74 17                	je     f0119ef7 <test_kmalloc_nextfit+0x11a2>
f0119ee0:	83 ec 04             	sub    $0x4,%esp
f0119ee3:	68 94 b1 13 f0       	push   $0xf013b194
f0119ee8:	68 4e 01 00 00       	push   $0x14e
f0119eed:	68 7a b1 13 f0       	push   $0xf013b17a
f0119ef2:	e8 0e 63 fe ff       	call   f0100205 <_panic>

	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega+1016*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0119ef7:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119efa:	e8 e4 2e ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0119eff:	29 c3                	sub    %eax,%ebx
f0119f01:	89 d8                	mov    %ebx,%eax
f0119f03:	3d fe 01 00 00       	cmp    $0x1fe,%eax
f0119f08:	74 17                	je     f0119f21 <test_kmalloc_nextfit+0x11cc>
f0119f0a:	83 ec 04             	sub    $0x4,%esp
f0119f0d:	68 37 b4 13 f0       	push   $0xf013b437
f0119f12:	68 50 01 00 00       	push   $0x150
f0119f17:	68 7a b1 13 f0       	push   $0xf013b17a
f0119f1c:	e8 e4 62 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119f21:	e8 80 9e fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0119f26:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119f29:	e8 b5 2e ff ff       	call   f010cde3 <sys_calculate_free_frames>
f0119f2e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 5 -> Hole 5 = 1.5 M
f0119f31:	83 ec 0c             	sub    $0xc,%esp
f0119f34:	68 00 00 08 00       	push   $0x80000
f0119f39:	e8 23 db fe ff       	call   f0107a61 <kmalloc>
f0119f3e:	83 c4 10             	add    $0x10,%esp
f0119f41:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x02800000)
f0119f47:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0119f4e:	10 00 00 
f0119f51:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0119f57:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119f5c:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0119f62:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0119f68:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f6d:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0119f73:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0119f79:	29 d0                	sub    %edx,%eax
f0119f7b:	89 c1                	mov    %eax,%ecx
f0119f7d:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f0119f84:	10 00 00 
f0119f87:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0119f8c:	0f b6 d0             	movzbl %al,%edx
f0119f8f:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0119f95:	01 d0                	add    %edx,%eax
f0119f97:	48                   	dec    %eax
f0119f98:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f0119f9e:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0119fa4:	ba 00 00 00 00       	mov    $0x0,%edx
f0119fa9:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f0119faf:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0119fb5:	29 d0                	sub    %edx,%eax
f0119fb7:	01 c1                	add    %eax,%ecx
f0119fb9:	c7 85 3c fe ff ff 00 	movl   $0x1000,-0x1c4(%ebp)
f0119fc0:	10 00 00 
f0119fc3:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0119fc8:	0f b6 c0             	movzbl %al,%eax
f0119fcb:	c1 e0 04             	shl    $0x4,%eax
f0119fce:	89 c2                	mov    %eax,%edx
f0119fd0:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0119fd6:	01 d0                	add    %edx,%eax
f0119fd8:	48                   	dec    %eax
f0119fd9:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
f0119fdf:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0119fe5:	ba 00 00 00 00       	mov    $0x0,%edx
f0119fea:	f7 b5 3c fe ff ff    	divl   -0x1c4(%ebp)
f0119ff0:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0119ff6:	29 d0                	sub    %edx,%eax
f0119ff8:	01 c8                	add    %ecx,%eax
f0119ffa:	8d 90 00 40 80 f8    	lea    -0x77fc000(%eax),%edx
f011a000:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a006:	39 c2                	cmp    %eax,%edx
f011a008:	74 17                	je     f011a021 <test_kmalloc_nextfit+0x12cc>
		panic("Next Fit not working correctly");
f011a00a:	83 ec 04             	sub    $0x4,%esp
f011a00d:	68 88 b4 13 f0       	push   $0xf013b488
f011a012:	68 56 01 00 00       	push   $0x156
f011a017:	68 7a b1 13 f0       	push   $0xf013b17a
f011a01c:	e8 e4 61 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a021:	e8 80 9d fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011a026:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a029:	74 17                	je     f011a042 <test_kmalloc_nextfit+0x12ed>
f011a02b:	83 ec 04             	sub    $0x4,%esp
f011a02e:	68 94 b1 13 f0       	push   $0xf013b194
f011a033:	68 57 01 00 00       	push   $0x157
f011a038:	68 7a b1 13 f0       	push   $0xf013b17a
f011a03d:	e8 c3 61 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a042:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a045:	e8 99 2d ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011a04a:	29 c3                	sub    %eax,%ebx
f011a04c:	89 d8                	mov    %ebx,%eax
f011a04e:	3d 80 00 00 00       	cmp    $0x80,%eax
f011a053:	74 17                	je     f011a06c <test_kmalloc_nextfit+0x1317>
f011a055:	83 ec 04             	sub    $0x4,%esp
f011a058:	68 37 b4 13 f0       	push   $0xf013b437
f011a05d:	68 58 01 00 00       	push   $0x158
f011a062:	68 7a b1 13 f0       	push   $0xf013b17a
f011a067:	e8 99 61 fe ff       	call   f0100205 <_panic>

	cprintf("\nCASE1: (next fit without looping back) is succeeded...\n") ;
f011a06c:	83 ec 0c             	sub    $0xc,%esp
f011a06f:	68 a8 b4 13 f0       	push   $0xf013b4a8
f011a074:	e8 95 6c fe ff       	call   f0100d0e <cprintf>
f011a079:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit is looping back to check for free space
	freeDiskFrames = pf_calculate_free_frames() ;
f011a07c:	e8 25 9d fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011a081:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a084:	e8 5a 2d ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011a089:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(3*Mega + 512*kilo); 			   // Use Hole 2 -> Hole 2 = 0.5 M
f011a08c:	83 ec 0c             	sub    $0xc,%esp
f011a08f:	68 00 00 38 00       	push   $0x380000
f011a094:	e8 c8 d9 fe ff       	call   f0107a61 <kmalloc>
f011a099:	83 c4 10             	add    $0x10,%esp
f011a09c:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011a0a2:	c7 85 34 fe ff ff 00 	movl   $0x1000,-0x1cc(%ebp)
f011a0a9:	10 00 00 
f011a0ac:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011a0b2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a0b7:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
f011a0bd:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f011a0c3:	ba 00 00 00 00       	mov    $0x0,%edx
f011a0c8:	f7 b5 34 fe ff ff    	divl   -0x1cc(%ebp)
f011a0ce:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f011a0d4:	29 d0                	sub    %edx,%eax
f011a0d6:	89 c1                	mov    %eax,%ecx
f011a0d8:	c7 85 2c fe ff ff 00 	movl   $0x1000,-0x1d4(%ebp)
f011a0df:	10 00 00 
f011a0e2:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011a0e7:	0f b6 d0             	movzbl %al,%edx
f011a0ea:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f011a0f0:	01 d0                	add    %edx,%eax
f011a0f2:	48                   	dec    %eax
f011a0f3:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
f011a0f9:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f011a0ff:	ba 00 00 00 00       	mov    $0x0,%edx
f011a104:	f7 b5 2c fe ff ff    	divl   -0x1d4(%ebp)
f011a10a:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f011a110:	29 d0                	sub    %edx,%eax
f011a112:	01 c1                	add    %eax,%ecx
f011a114:	c7 85 24 fe ff ff 00 	movl   $0x1000,-0x1dc(%ebp)
f011a11b:	10 00 00 
f011a11e:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011a123:	0f b6 c0             	movzbl %al,%eax
f011a126:	c1 e0 04             	shl    $0x4,%eax
f011a129:	89 c2                	mov    %eax,%edx
f011a12b:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f011a131:	01 d0                	add    %edx,%eax
f011a133:	48                   	dec    %eax
f011a134:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
f011a13a:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f011a140:	ba 00 00 00 00       	mov    $0x0,%edx
f011a145:	f7 b5 24 fe ff ff    	divl   -0x1dc(%ebp)
f011a14b:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f011a151:	29 d0                	sub    %edx,%eax
f011a153:	01 c8                	add    %ecx,%eax
f011a155:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011a15b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a161:	39 c2                	cmp    %eax,%edx
f011a163:	74 17                	je     f011a17c <test_kmalloc_nextfit+0x1427>
		panic("Next Fit not working correctly");
f011a165:	83 ec 04             	sub    $0x4,%esp
f011a168:	68 88 b4 13 f0       	push   $0xf013b488
f011a16d:	68 62 01 00 00       	push   $0x162
f011a172:	68 7a b1 13 f0       	push   $0xf013b17a
f011a177:	e8 89 60 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a17c:	e8 25 9c fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011a181:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a184:	74 17                	je     f011a19d <test_kmalloc_nextfit+0x1448>
f011a186:	83 ec 04             	sub    $0x4,%esp
f011a189:	68 94 b1 13 f0       	push   $0xf013b194
f011a18e:	68 63 01 00 00       	push   $0x163
f011a193:	68 7a b1 13 f0       	push   $0xf013b17a
f011a198:	e8 68 60 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (3*Mega+512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a19d:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a1a0:	e8 3e 2c ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011a1a5:	29 c3                	sub    %eax,%ebx
f011a1a7:	89 d8                	mov    %ebx,%eax
f011a1a9:	3d 80 03 00 00       	cmp    $0x380,%eax
f011a1ae:	74 17                	je     f011a1c7 <test_kmalloc_nextfit+0x1472>
f011a1b0:	83 ec 04             	sub    $0x4,%esp
f011a1b3:	68 37 b4 13 f0       	push   $0xf013b437
f011a1b8:	68 64 01 00 00       	push   $0x164
f011a1bd:	68 7a b1 13 f0       	push   $0xf013b17a
f011a1c2:	e8 3e 60 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a1c7:	e8 da 9b fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011a1cc:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a1cf:	e8 0f 2c ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011a1d4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[24]);		// Increase size of Hole 6 to 4 M
f011a1d7:	8b 85 e8 fb ff ff    	mov    -0x418(%ebp),%eax
f011a1dd:	83 ec 0c             	sub    $0xc,%esp
f011a1e0:	50                   	push   %eax
f011a1e1:	e8 91 d9 fe ff       	call   f0107b77 <kfree>
f011a1e6:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a1e9:	e8 b8 9b fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011a1ee:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a1f1:	74 17                	je     f011a20a <test_kmalloc_nextfit+0x14b5>
f011a1f3:	83 ec 04             	sub    $0x4,%esp
f011a1f6:	68 94 b1 13 f0       	push   $0xf013b194
f011a1fb:	68 69 01 00 00       	push   $0x169
f011a200:	68 7a b1 13 f0       	push   $0xf013b17a
f011a205:	e8 fb 5f fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011a20a:	e8 d4 2b ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011a20f:	89 c2                	mov    %eax,%edx
f011a211:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a214:	29 c2                	sub    %eax,%edx
f011a216:	89 d0                	mov    %edx,%eax
f011a218:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a21d:	74 17                	je     f011a236 <test_kmalloc_nextfit+0x14e1>
f011a21f:	83 ec 04             	sub    $0x4,%esp
f011a222:	68 48 b4 13 f0       	push   $0xf013b448
f011a227:	68 6a 01 00 00       	push   $0x16a
f011a22c:	68 7a b1 13 f0       	push   $0xf013b17a
f011a231:	e8 cf 5f fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a236:	e8 6b 9b fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011a23b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a23e:	e8 a0 2b ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011a243:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(4*Mega-kilo);		// Use Hole 6 -> Hole 6 = 0 M
f011a246:	83 ec 0c             	sub    $0xc,%esp
f011a249:	68 00 fc 3f 00       	push   $0x3ffc00
f011a24e:	e8 0e d8 fe ff       	call   f0107a61 <kmalloc>
f011a253:	83 c4 10             	add    $0x10,%esp
f011a256:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03000000)
f011a25c:	c7 85 1c fe ff ff 00 	movl   $0x1000,-0x1e4(%ebp)
f011a263:	10 00 00 
f011a266:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f011a26c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a271:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
f011a277:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f011a27d:	ba 00 00 00 00       	mov    $0x0,%edx
f011a282:	f7 b5 1c fe ff ff    	divl   -0x1e4(%ebp)
f011a288:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f011a28e:	29 d0                	sub    %edx,%eax
f011a290:	89 c1                	mov    %eax,%ecx
f011a292:	c7 85 14 fe ff ff 00 	movl   $0x1000,-0x1ec(%ebp)
f011a299:	10 00 00 
f011a29c:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011a2a1:	0f b6 d0             	movzbl %al,%edx
f011a2a4:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f011a2aa:	01 d0                	add    %edx,%eax
f011a2ac:	48                   	dec    %eax
f011a2ad:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
f011a2b3:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f011a2b9:	ba 00 00 00 00       	mov    $0x0,%edx
f011a2be:	f7 b5 14 fe ff ff    	divl   -0x1ec(%ebp)
f011a2c4:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f011a2ca:	29 d0                	sub    %edx,%eax
f011a2cc:	01 c1                	add    %eax,%ecx
f011a2ce:	c7 85 0c fe ff ff 00 	movl   $0x1000,-0x1f4(%ebp)
f011a2d5:	10 00 00 
f011a2d8:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011a2dd:	0f b6 c0             	movzbl %al,%eax
f011a2e0:	c1 e0 04             	shl    $0x4,%eax
f011a2e3:	89 c2                	mov    %eax,%edx
f011a2e5:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f011a2eb:	01 d0                	add    %edx,%eax
f011a2ed:	48                   	dec    %eax
f011a2ee:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
f011a2f4:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f011a2fa:	ba 00 00 00 00       	mov    $0x0,%edx
f011a2ff:	f7 b5 0c fe ff ff    	divl   -0x1f4(%ebp)
f011a305:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f011a30b:	29 d0                	sub    %edx,%eax
f011a30d:	01 c8                	add    %ecx,%eax
f011a30f:	8d 90 00 40 00 f9    	lea    -0x6ffc000(%eax),%edx
f011a315:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a31b:	39 c2                	cmp    %eax,%edx
f011a31d:	74 17                	je     f011a336 <test_kmalloc_nextfit+0x15e1>
		panic("Next Fit not working correctly");
f011a31f:	83 ec 04             	sub    $0x4,%esp
f011a322:	68 88 b4 13 f0       	push   $0xf013b488
f011a327:	68 70 01 00 00       	push   $0x170
f011a32c:	68 7a b1 13 f0       	push   $0xf013b17a
f011a331:	e8 cf 5e fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a336:	e8 6b 9a fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011a33b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a33e:	74 17                	je     f011a357 <test_kmalloc_nextfit+0x1602>
f011a340:	83 ec 04             	sub    $0x4,%esp
f011a343:	68 94 b1 13 f0       	push   $0xf013b194
f011a348:	68 71 01 00 00       	push   $0x171
f011a34d:	68 7a b1 13 f0       	push   $0xf013b17a
f011a352:	e8 ae 5e fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (4*Mega)/PAGE_SIZE) panic("Wrong allocation");
f011a357:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a35a:	e8 84 2a ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011a35f:	29 c3                	sub    %eax,%ebx
f011a361:	89 d8                	mov    %ebx,%eax
f011a363:	3d 00 04 00 00       	cmp    $0x400,%eax
f011a368:	74 17                	je     f011a381 <test_kmalloc_nextfit+0x162c>
f011a36a:	83 ec 04             	sub    $0x4,%esp
f011a36d:	68 37 b4 13 f0       	push   $0xf013b437
f011a372:	68 72 01 00 00       	push   $0x172
f011a377:	68 7a b1 13 f0       	push   $0xf013b17a
f011a37c:	e8 84 5e fe ff       	call   f0100205 <_panic>

	cprintf("\nCASE2: (next fit WITH looping back) is succeeded...\n") ;
f011a381:	83 ec 0c             	sub    $0xc,%esp
f011a384:	68 e4 b4 13 f0       	push   $0xf013b4e4
f011a389:	e8 80 69 fe ff       	call   f0100d0e <cprintf>
f011a38e:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit returns null in case all holes are not free
	freeDiskFrames = pf_calculate_free_frames() ;
f011a391:	e8 10 9a fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011a396:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a399:	e8 45 2a ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011a39e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(6*Mega); 			   // No Suitable Hole is available
f011a3a1:	83 ec 0c             	sub    $0xc,%esp
f011a3a4:	68 00 00 60 00       	push   $0x600000
f011a3a9:	e8 b3 d6 fe ff       	call   f0107a61 <kmalloc>
f011a3ae:	83 c4 10             	add    $0x10,%esp
f011a3b1:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != 0x0)
f011a3b7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a3bd:	85 c0                	test   %eax,%eax
f011a3bf:	74 17                	je     f011a3d8 <test_kmalloc_nextfit+0x1683>
		panic("Next Fit not working correctly");
f011a3c1:	83 ec 04             	sub    $0x4,%esp
f011a3c4:	68 88 b4 13 f0       	push   $0xf013b488
f011a3c9:	68 7c 01 00 00       	push   $0x17c
f011a3ce:	68 7a b1 13 f0       	push   $0xf013b17a
f011a3d3:	e8 2d 5e fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a3d8:	e8 c9 99 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011a3dd:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a3e0:	74 17                	je     f011a3f9 <test_kmalloc_nextfit+0x16a4>
f011a3e2:	83 ec 04             	sub    $0x4,%esp
f011a3e5:	68 94 b1 13 f0       	push   $0xf013b194
f011a3ea:	68 7d 01 00 00       	push   $0x17d
f011a3ef:	68 7a b1 13 f0       	push   $0xf013b17a
f011a3f4:	e8 0c 5e fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation");
f011a3f9:	e8 e5 29 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011a3fe:	89 c2                	mov    %eax,%edx
f011a400:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a403:	39 c2                	cmp    %eax,%edx
f011a405:	74 17                	je     f011a41e <test_kmalloc_nextfit+0x16c9>
f011a407:	83 ec 04             	sub    $0x4,%esp
f011a40a:	68 37 b4 13 f0       	push   $0xf013b437
f011a40f:	68 7e 01 00 00       	push   $0x17e
f011a414:	68 7a b1 13 f0       	push   $0xf013b17a
f011a419:	e8 e7 5d fe ff       	call   f0100205 <_panic>

	cprintf("\nCASE3: (next fit with insufficient space) is succeeded...\n") ;
f011a41e:	83 ec 0c             	sub    $0xc,%esp
f011a421:	68 1c b5 13 f0       	push   $0xf013b51c
f011a426:	e8 e3 68 fe ff       	call   f0100d0e <cprintf>
f011a42b:	83 c4 10             	add    $0x10,%esp
	/******************************/

	cprintf("Congratulations!! test Next Fit completed successfully.\n");
f011a42e:	83 ec 0c             	sub    $0xc,%esp
f011a431:	68 58 b5 13 f0       	push   $0xf013b558
f011a436:	e8 d3 68 fe ff       	call   f0100d0e <cprintf>
f011a43b:	83 c4 10             	add    $0x10,%esp
	return 1;
f011a43e:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011a443:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011a446:	5b                   	pop    %ebx
f011a447:	5f                   	pop    %edi
f011a448:	5d                   	pop    %ebp
f011a449:	c3                   	ret    

f011a44a <test_kmalloc_bestfit1>:

int test_kmalloc_bestfit1()
{
f011a44a:	55                   	push   %ebp
f011a44b:	89 e5                	mov    %esp,%ebp
f011a44d:	57                   	push   %edi
f011a44e:	53                   	push   %ebx
f011a44f:	81 ec 90 01 00 00    	sub    $0x190,%esp
	cprintf("==============================================\n");
f011a455:	83 ec 0c             	sub    $0xc,%esp
f011a458:	68 bc b0 13 f0       	push   $0xf013b0bc
f011a45d:	e8 ac 68 fe ff       	call   f0100d0e <cprintf>
f011a462:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011a465:	83 ec 0c             	sub    $0xc,%esp
f011a468:	68 ec b0 13 f0       	push   $0xf013b0ec
f011a46d:	e8 9c 68 fe ff       	call   f0100d0e <cprintf>
f011a472:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011a475:	83 ec 0c             	sub    $0xc,%esp
f011a478:	68 bc b0 13 f0       	push   $0xf013b0bc
f011a47d:	e8 8c 68 fe ff       	call   f0100d0e <cprintf>
f011a482:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011a485:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f011a48b:	b9 14 00 00 00       	mov    $0x14,%ecx
f011a490:	b8 00 00 00 00       	mov    $0x0,%eax
f011a495:	89 d7                	mov    %edx,%edi
f011a497:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011a499:	e8 45 29 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011a49e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a4a1:	e8 00 99 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011a4a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(3*Mega-kilo);
f011a4a9:	83 ec 0c             	sub    $0xc,%esp
f011a4ac:	68 00 fc 2f 00       	push   $0x2ffc00
f011a4b1:	e8 ab d5 fe ff       	call   f0107a61 <kmalloc>
f011a4b6:	83 c4 10             	add    $0x10,%esp
f011a4b9:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011a4bf:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011a4c5:	89 c1                	mov    %eax,%ecx
f011a4c7:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011a4ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011a4d1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a4d6:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011a4d9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a4dc:	ba 00 00 00 00       	mov    $0x0,%edx
f011a4e1:	f7 75 ec             	divl   -0x14(%ebp)
f011a4e4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a4e7:	29 d0                	sub    %edx,%eax
f011a4e9:	89 c3                	mov    %eax,%ebx
f011a4eb:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011a4f2:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011a4f7:	0f b6 d0             	movzbl %al,%edx
f011a4fa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011a4fd:	01 d0                	add    %edx,%eax
f011a4ff:	48                   	dec    %eax
f011a500:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011a503:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a506:	ba 00 00 00 00       	mov    $0x0,%edx
f011a50b:	f7 75 e4             	divl   -0x1c(%ebp)
f011a50e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a511:	29 d0                	sub    %edx,%eax
f011a513:	01 c3                	add    %eax,%ebx
f011a515:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011a51c:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011a521:	0f b6 c0             	movzbl %al,%eax
f011a524:	c1 e0 04             	shl    $0x4,%eax
f011a527:	89 c2                	mov    %eax,%edx
f011a529:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011a52c:	01 d0                	add    %edx,%eax
f011a52e:	48                   	dec    %eax
f011a52f:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011a532:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a535:	ba 00 00 00 00       	mov    $0x0,%edx
f011a53a:	f7 75 dc             	divl   -0x24(%ebp)
f011a53d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a540:	29 d0                	sub    %edx,%eax
f011a542:	01 d8                	add    %ebx,%eax
f011a544:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011a549:	39 c1                	cmp    %eax,%ecx
f011a54b:	74 17                	je     f011a564 <test_kmalloc_bestfit1+0x11a>
f011a54d:	83 ec 04             	sub    $0x4,%esp
f011a550:	68 94 b5 13 f0       	push   $0xf013b594
f011a555:	68 98 01 00 00       	push   $0x198
f011a55a:	68 7a b1 13 f0       	push   $0xf013b17a
f011a55f:	e8 a1 5c fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a564:	e8 3d 98 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011a569:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a56c:	74 17                	je     f011a585 <test_kmalloc_bestfit1+0x13b>
f011a56e:	83 ec 04             	sub    $0x4,%esp
f011a571:	68 94 b1 13 f0       	push   $0xf013b194
f011a576:	68 99 01 00 00       	push   $0x199
f011a57b:	68 7a b1 13 f0       	push   $0xf013b17a
f011a580:	e8 80 5c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a585:	e8 59 28 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011a58a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a58d:	29 c2                	sub    %eax,%edx
f011a58f:	89 d0                	mov    %edx,%eax
f011a591:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a596:	74 17                	je     f011a5af <test_kmalloc_bestfit1+0x165>
f011a598:	83 ec 04             	sub    $0x4,%esp
f011a59b:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011a5a0:	68 9a 01 00 00       	push   $0x19a
f011a5a5:	68 7a b1 13 f0       	push   $0xf013b17a
f011a5aa:	e8 56 5c fe ff       	call   f0100205 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011a5af:	e8 2f 28 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011a5b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a5b7:	e8 ea 97 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011a5bc:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(3*Mega-kilo);
f011a5bf:	83 ec 0c             	sub    $0xc,%esp
f011a5c2:	68 00 fc 2f 00       	push   $0x2ffc00
f011a5c7:	e8 95 d4 fe ff       	call   f0107a61 <kmalloc>
f011a5cc:	83 c4 10             	add    $0x10,%esp
f011a5cf:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[1] !=  (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011a5d5:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011a5db:	89 c1                	mov    %eax,%ecx
f011a5dd:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011a5e4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011a5e7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a5ec:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011a5ef:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a5f2:	ba 00 00 00 00       	mov    $0x0,%edx
f011a5f7:	f7 75 d4             	divl   -0x2c(%ebp)
f011a5fa:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a5fd:	29 d0                	sub    %edx,%eax
f011a5ff:	89 c3                	mov    %eax,%ebx
f011a601:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011a608:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011a60d:	0f b6 d0             	movzbl %al,%edx
f011a610:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011a613:	01 d0                	add    %edx,%eax
f011a615:	48                   	dec    %eax
f011a616:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011a619:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a61c:	ba 00 00 00 00       	mov    $0x0,%edx
f011a621:	f7 75 cc             	divl   -0x34(%ebp)
f011a624:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a627:	29 d0                	sub    %edx,%eax
f011a629:	01 c3                	add    %eax,%ebx
f011a62b:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011a632:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011a637:	0f b6 c0             	movzbl %al,%eax
f011a63a:	c1 e0 04             	shl    $0x4,%eax
f011a63d:	89 c2                	mov    %eax,%edx
f011a63f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011a642:	01 d0                	add    %edx,%eax
f011a644:	48                   	dec    %eax
f011a645:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011a648:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a64b:	ba 00 00 00 00       	mov    $0x0,%edx
f011a650:	f7 75 c4             	divl   -0x3c(%ebp)
f011a653:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a656:	29 d0                	sub    %edx,%eax
f011a658:	01 d8                	add    %ebx,%eax
f011a65a:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011a65f:	39 c1                	cmp    %eax,%ecx
f011a661:	74 17                	je     f011a67a <test_kmalloc_bestfit1+0x230>
f011a663:	83 ec 04             	sub    $0x4,%esp
f011a666:	68 94 b5 13 f0       	push   $0xf013b594
f011a66b:	68 a0 01 00 00       	push   $0x1a0
f011a670:	68 7a b1 13 f0       	push   $0xf013b17a
f011a675:	e8 8b 5b fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a67a:	e8 27 97 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011a67f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a682:	74 17                	je     f011a69b <test_kmalloc_bestfit1+0x251>
f011a684:	83 ec 04             	sub    $0x4,%esp
f011a687:	68 94 b1 13 f0       	push   $0xf013b194
f011a68c:	68 a1 01 00 00       	push   $0x1a1
f011a691:	68 7a b1 13 f0       	push   $0xf013b17a
f011a696:	e8 6a 5b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a69b:	e8 43 27 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011a6a0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a6a3:	29 c2                	sub    %eax,%edx
f011a6a5:	89 d0                	mov    %edx,%eax
f011a6a7:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a6ac:	74 17                	je     f011a6c5 <test_kmalloc_bestfit1+0x27b>
f011a6ae:	83 ec 04             	sub    $0x4,%esp
f011a6b1:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011a6b6:	68 a2 01 00 00       	push   $0x1a2
f011a6bb:	68 7a b1 13 f0       	push   $0xf013b17a
f011a6c0:	e8 40 5b fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011a6c5:	e8 19 27 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011a6ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a6cd:	e8 d4 96 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011a6d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(2*Mega-kilo);
f011a6d5:	83 ec 0c             	sub    $0xc,%esp
f011a6d8:	68 00 fc 1f 00       	push   $0x1ffc00
f011a6dd:	e8 7f d3 fe ff       	call   f0107a61 <kmalloc>
f011a6e2:	83 c4 10             	add    $0x10,%esp
f011a6e5:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[2] !=  (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011a6eb:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011a6f1:	89 c1                	mov    %eax,%ecx
f011a6f3:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011a6fa:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011a6fd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a702:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011a705:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a708:	ba 00 00 00 00       	mov    $0x0,%edx
f011a70d:	f7 75 bc             	divl   -0x44(%ebp)
f011a710:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a713:	29 d0                	sub    %edx,%eax
f011a715:	89 c3                	mov    %eax,%ebx
f011a717:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011a71e:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011a723:	0f b6 d0             	movzbl %al,%edx
f011a726:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011a729:	01 d0                	add    %edx,%eax
f011a72b:	48                   	dec    %eax
f011a72c:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011a72f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a732:	ba 00 00 00 00       	mov    $0x0,%edx
f011a737:	f7 75 b4             	divl   -0x4c(%ebp)
f011a73a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a73d:	29 d0                	sub    %edx,%eax
f011a73f:	01 c3                	add    %eax,%ebx
f011a741:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011a748:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011a74d:	0f b6 c0             	movzbl %al,%eax
f011a750:	c1 e0 04             	shl    $0x4,%eax
f011a753:	89 c2                	mov    %eax,%edx
f011a755:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011a758:	01 d0                	add    %edx,%eax
f011a75a:	48                   	dec    %eax
f011a75b:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011a75e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a761:	ba 00 00 00 00       	mov    $0x0,%edx
f011a766:	f7 75 ac             	divl   -0x54(%ebp)
f011a769:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a76c:	29 d0                	sub    %edx,%eax
f011a76e:	01 d8                	add    %ebx,%eax
f011a770:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011a775:	39 c1                	cmp    %eax,%ecx
f011a777:	74 17                	je     f011a790 <test_kmalloc_bestfit1+0x346>
f011a779:	83 ec 04             	sub    $0x4,%esp
f011a77c:	68 94 b5 13 f0       	push   $0xf013b594
f011a781:	68 a8 01 00 00       	push   $0x1a8
f011a786:	68 7a b1 13 f0       	push   $0xf013b17a
f011a78b:	e8 75 5a fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a790:	e8 11 96 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011a795:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a798:	74 17                	je     f011a7b1 <test_kmalloc_bestfit1+0x367>
f011a79a:	83 ec 04             	sub    $0x4,%esp
f011a79d:	68 94 b1 13 f0       	push   $0xf013b194
f011a7a2:	68 a9 01 00 00       	push   $0x1a9
f011a7a7:	68 7a b1 13 f0       	push   $0xf013b17a
f011a7ac:	e8 54 5a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a7b1:	e8 2d 26 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011a7b6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a7b9:	29 c2                	sub    %eax,%edx
f011a7bb:	89 d0                	mov    %edx,%eax
f011a7bd:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a7c2:	74 17                	je     f011a7db <test_kmalloc_bestfit1+0x391>
f011a7c4:	83 ec 04             	sub    $0x4,%esp
f011a7c7:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011a7cc:	68 aa 01 00 00       	push   $0x1aa
f011a7d1:	68 7a b1 13 f0       	push   $0xf013b17a
f011a7d6:	e8 2a 5a fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011a7db:	e8 03 26 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011a7e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a7e3:	e8 be 95 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011a7e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(2*Mega-kilo);
f011a7eb:	83 ec 0c             	sub    $0xc,%esp
f011a7ee:	68 00 fc 1f 00       	push   $0x1ffc00
f011a7f3:	e8 69 d2 fe ff       	call   f0107a61 <kmalloc>
f011a7f8:	83 c4 10             	add    $0x10,%esp
f011a7fb:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011a801:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011a807:	89 c1                	mov    %eax,%ecx
f011a809:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011a810:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011a813:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a818:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011a81b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011a81e:	ba 00 00 00 00       	mov    $0x0,%edx
f011a823:	f7 75 a4             	divl   -0x5c(%ebp)
f011a826:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011a829:	29 d0                	sub    %edx,%eax
f011a82b:	89 c3                	mov    %eax,%ebx
f011a82d:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011a834:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011a839:	0f b6 d0             	movzbl %al,%edx
f011a83c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011a83f:	01 d0                	add    %edx,%eax
f011a841:	48                   	dec    %eax
f011a842:	89 45 98             	mov    %eax,-0x68(%ebp)
f011a845:	8b 45 98             	mov    -0x68(%ebp),%eax
f011a848:	ba 00 00 00 00       	mov    $0x0,%edx
f011a84d:	f7 75 9c             	divl   -0x64(%ebp)
f011a850:	8b 45 98             	mov    -0x68(%ebp),%eax
f011a853:	29 d0                	sub    %edx,%eax
f011a855:	01 c3                	add    %eax,%ebx
f011a857:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011a85e:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011a863:	0f b6 c0             	movzbl %al,%eax
f011a866:	c1 e0 04             	shl    $0x4,%eax
f011a869:	89 c2                	mov    %eax,%edx
f011a86b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011a86e:	01 d0                	add    %edx,%eax
f011a870:	48                   	dec    %eax
f011a871:	89 45 90             	mov    %eax,-0x70(%ebp)
f011a874:	8b 45 90             	mov    -0x70(%ebp),%eax
f011a877:	ba 00 00 00 00       	mov    $0x0,%edx
f011a87c:	f7 75 94             	divl   -0x6c(%ebp)
f011a87f:	8b 45 90             	mov    -0x70(%ebp),%eax
f011a882:	29 d0                	sub    %edx,%eax
f011a884:	01 d8                	add    %ebx,%eax
f011a886:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011a88b:	39 c1                	cmp    %eax,%ecx
f011a88d:	74 17                	je     f011a8a6 <test_kmalloc_bestfit1+0x45c>
f011a88f:	83 ec 04             	sub    $0x4,%esp
f011a892:	68 94 b5 13 f0       	push   $0xf013b594
f011a897:	68 b0 01 00 00       	push   $0x1b0
f011a89c:	68 7a b1 13 f0       	push   $0xf013b17a
f011a8a1:	e8 5f 59 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a8a6:	e8 fb 94 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011a8ab:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a8ae:	74 17                	je     f011a8c7 <test_kmalloc_bestfit1+0x47d>
f011a8b0:	83 ec 04             	sub    $0x4,%esp
f011a8b3:	68 94 b1 13 f0       	push   $0xf013b194
f011a8b8:	68 b1 01 00 00       	push   $0x1b1
f011a8bd:	68 7a b1 13 f0       	push   $0xf013b17a
f011a8c2:	e8 3e 59 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a8c7:	e8 17 25 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011a8cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a8cf:	29 c2                	sub    %eax,%edx
f011a8d1:	89 d0                	mov    %edx,%eax
f011a8d3:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a8d8:	74 17                	je     f011a8f1 <test_kmalloc_bestfit1+0x4a7>
f011a8da:	83 ec 04             	sub    $0x4,%esp
f011a8dd:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011a8e2:	68 b2 01 00 00       	push   $0x1b2
f011a8e7:	68 7a b1 13 f0       	push   $0xf013b17a
f011a8ec:	e8 14 59 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a8f1:	e8 ed 24 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011a8f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a8f9:	e8 a8 94 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011a8fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(1*Mega-kilo);
f011a901:	83 ec 0c             	sub    $0xc,%esp
f011a904:	68 00 fc 0f 00       	push   $0xffc00
f011a909:	e8 53 d1 fe ff       	call   f0107a61 <kmalloc>
f011a90e:	83 c4 10             	add    $0x10,%esp
f011a911:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[4] !=  (ACTUAL_START + 10*Mega)) panic("Wrong start address for the allocated space... ");
f011a917:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011a91d:	89 c1                	mov    %eax,%ecx
f011a91f:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011a926:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011a929:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a92e:	89 45 88             	mov    %eax,-0x78(%ebp)
f011a931:	8b 45 88             	mov    -0x78(%ebp),%eax
f011a934:	ba 00 00 00 00       	mov    $0x0,%edx
f011a939:	f7 75 8c             	divl   -0x74(%ebp)
f011a93c:	8b 45 88             	mov    -0x78(%ebp),%eax
f011a93f:	29 d0                	sub    %edx,%eax
f011a941:	89 c3                	mov    %eax,%ebx
f011a943:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011a94a:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011a94f:	0f b6 d0             	movzbl %al,%edx
f011a952:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011a955:	01 d0                	add    %edx,%eax
f011a957:	48                   	dec    %eax
f011a958:	89 45 80             	mov    %eax,-0x80(%ebp)
f011a95b:	8b 45 80             	mov    -0x80(%ebp),%eax
f011a95e:	ba 00 00 00 00       	mov    $0x0,%edx
f011a963:	f7 75 84             	divl   -0x7c(%ebp)
f011a966:	8b 45 80             	mov    -0x80(%ebp),%eax
f011a969:	29 d0                	sub    %edx,%eax
f011a96b:	01 c3                	add    %eax,%ebx
f011a96d:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011a974:	10 00 00 
f011a977:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011a97c:	0f b6 c0             	movzbl %al,%eax
f011a97f:	c1 e0 04             	shl    $0x4,%eax
f011a982:	89 c2                	mov    %eax,%edx
f011a984:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011a98a:	01 d0                	add    %edx,%eax
f011a98c:	48                   	dec    %eax
f011a98d:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011a993:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011a999:	ba 00 00 00 00       	mov    $0x0,%edx
f011a99e:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011a9a4:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011a9aa:	29 d0                	sub    %edx,%eax
f011a9ac:	01 d8                	add    %ebx,%eax
f011a9ae:	2d 00 c0 5f 09       	sub    $0x95fc000,%eax
f011a9b3:	39 c1                	cmp    %eax,%ecx
f011a9b5:	74 17                	je     f011a9ce <test_kmalloc_bestfit1+0x584>
f011a9b7:	83 ec 04             	sub    $0x4,%esp
f011a9ba:	68 94 b5 13 f0       	push   $0xf013b594
f011a9bf:	68 b8 01 00 00       	push   $0x1b8
f011a9c4:	68 7a b1 13 f0       	push   $0xf013b17a
f011a9c9:	e8 37 58 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a9ce:	e8 d3 93 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011a9d3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a9d6:	74 17                	je     f011a9ef <test_kmalloc_bestfit1+0x5a5>
f011a9d8:	83 ec 04             	sub    $0x4,%esp
f011a9db:	68 94 b1 13 f0       	push   $0xf013b194
f011a9e0:	68 b9 01 00 00       	push   $0x1b9
f011a9e5:	68 7a b1 13 f0       	push   $0xf013b17a
f011a9ea:	e8 16 58 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a9ef:	e8 ef 23 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011a9f4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a9f7:	29 c2                	sub    %eax,%edx
f011a9f9:	89 d0                	mov    %edx,%eax
f011a9fb:	3d 00 01 00 00       	cmp    $0x100,%eax
f011aa00:	74 17                	je     f011aa19 <test_kmalloc_bestfit1+0x5cf>
f011aa02:	83 ec 04             	sub    $0x4,%esp
f011aa05:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011aa0a:	68 ba 01 00 00       	push   $0x1ba
f011aa0f:	68 7a b1 13 f0       	push   $0xf013b17a
f011aa14:	e8 ec 57 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011aa19:	e8 c5 23 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011aa1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011aa21:	e8 80 93 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011aa26:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(1*Mega-kilo);
f011aa29:	83 ec 0c             	sub    $0xc,%esp
f011aa2c:	68 00 fc 0f 00       	push   $0xffc00
f011aa31:	e8 2b d0 fe ff       	call   f0107a61 <kmalloc>
f011aa36:	83 c4 10             	add    $0x10,%esp
f011aa39:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011aa3f:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011aa45:	89 c1                	mov    %eax,%ecx
f011aa47:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011aa4e:	10 00 00 
f011aa51:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011aa57:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011aa5c:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011aa62:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011aa68:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa6d:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011aa73:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011aa79:	29 d0                	sub    %edx,%eax
f011aa7b:	89 c3                	mov    %eax,%ebx
f011aa7d:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011aa84:	10 00 00 
f011aa87:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011aa8c:	0f b6 d0             	movzbl %al,%edx
f011aa8f:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011aa95:	01 d0                	add    %edx,%eax
f011aa97:	48                   	dec    %eax
f011aa98:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011aa9e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011aaa4:	ba 00 00 00 00       	mov    $0x0,%edx
f011aaa9:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011aaaf:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011aab5:	29 d0                	sub    %edx,%eax
f011aab7:	01 c3                	add    %eax,%ebx
f011aab9:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011aac0:	10 00 00 
f011aac3:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011aac8:	0f b6 c0             	movzbl %al,%eax
f011aacb:	c1 e0 04             	shl    $0x4,%eax
f011aace:	89 c2                	mov    %eax,%edx
f011aad0:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011aad6:	01 d0                	add    %edx,%eax
f011aad8:	48                   	dec    %eax
f011aad9:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011aadf:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011aae5:	ba 00 00 00 00       	mov    $0x0,%edx
f011aaea:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011aaf0:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011aaf6:	29 d0                	sub    %edx,%eax
f011aaf8:	01 d8                	add    %ebx,%eax
f011aafa:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011aaff:	39 c1                	cmp    %eax,%ecx
f011ab01:	74 17                	je     f011ab1a <test_kmalloc_bestfit1+0x6d0>
f011ab03:	83 ec 04             	sub    $0x4,%esp
f011ab06:	68 94 b5 13 f0       	push   $0xf013b594
f011ab0b:	68 c0 01 00 00       	push   $0x1c0
f011ab10:	68 7a b1 13 f0       	push   $0xf013b17a
f011ab15:	e8 eb 56 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ab1a:	e8 87 92 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011ab1f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ab22:	74 17                	je     f011ab3b <test_kmalloc_bestfit1+0x6f1>
f011ab24:	83 ec 04             	sub    $0x4,%esp
f011ab27:	68 94 b1 13 f0       	push   $0xf013b194
f011ab2c:	68 c1 01 00 00       	push   $0x1c1
f011ab31:	68 7a b1 13 f0       	push   $0xf013b17a
f011ab36:	e8 ca 56 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ab3b:	e8 a3 22 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011ab40:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ab43:	29 c2                	sub    %eax,%edx
f011ab45:	89 d0                	mov    %edx,%eax
f011ab47:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ab4c:	74 17                	je     f011ab65 <test_kmalloc_bestfit1+0x71b>
f011ab4e:	83 ec 04             	sub    $0x4,%esp
f011ab51:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011ab56:	68 c2 01 00 00       	push   $0x1c2
f011ab5b:	68 7a b1 13 f0       	push   $0xf013b17a
f011ab60:	e8 a0 56 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ab65:	e8 79 22 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011ab6a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ab6d:	e8 34 92 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011ab72:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(1*Mega-kilo);
f011ab75:	83 ec 0c             	sub    $0xc,%esp
f011ab78:	68 00 fc 0f 00       	push   $0xffc00
f011ab7d:	e8 df ce fe ff       	call   f0107a61 <kmalloc>
f011ab82:	83 c4 10             	add    $0x10,%esp
f011ab85:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 12*Mega)) panic("Wrong start address for the allocated space... ");
f011ab8b:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011ab91:	89 c1                	mov    %eax,%ecx
f011ab93:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011ab9a:	10 00 00 
f011ab9d:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011aba3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011aba8:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011abae:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011abb4:	ba 00 00 00 00       	mov    $0x0,%edx
f011abb9:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011abbf:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011abc5:	29 d0                	sub    %edx,%eax
f011abc7:	89 c3                	mov    %eax,%ebx
f011abc9:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011abd0:	10 00 00 
f011abd3:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011abd8:	0f b6 d0             	movzbl %al,%edx
f011abdb:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011abe1:	01 d0                	add    %edx,%eax
f011abe3:	48                   	dec    %eax
f011abe4:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011abea:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011abf0:	ba 00 00 00 00       	mov    $0x0,%edx
f011abf5:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011abfb:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011ac01:	29 d0                	sub    %edx,%eax
f011ac03:	01 c3                	add    %eax,%ebx
f011ac05:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011ac0c:	10 00 00 
f011ac0f:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011ac14:	0f b6 c0             	movzbl %al,%eax
f011ac17:	c1 e0 04             	shl    $0x4,%eax
f011ac1a:	89 c2                	mov    %eax,%edx
f011ac1c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011ac22:	01 d0                	add    %edx,%eax
f011ac24:	48                   	dec    %eax
f011ac25:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011ac2b:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011ac31:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac36:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011ac3c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011ac42:	29 d0                	sub    %edx,%eax
f011ac44:	01 d8                	add    %ebx,%eax
f011ac46:	2d 00 c0 3f 09       	sub    $0x93fc000,%eax
f011ac4b:	39 c1                	cmp    %eax,%ecx
f011ac4d:	74 17                	je     f011ac66 <test_kmalloc_bestfit1+0x81c>
f011ac4f:	83 ec 04             	sub    $0x4,%esp
f011ac52:	68 94 b5 13 f0       	push   $0xf013b594
f011ac57:	68 c8 01 00 00       	push   $0x1c8
f011ac5c:	68 7a b1 13 f0       	push   $0xf013b17a
f011ac61:	e8 9f 55 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ac66:	e8 3b 91 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011ac6b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ac6e:	74 17                	je     f011ac87 <test_kmalloc_bestfit1+0x83d>
f011ac70:	83 ec 04             	sub    $0x4,%esp
f011ac73:	68 94 b1 13 f0       	push   $0xf013b194
f011ac78:	68 c9 01 00 00       	push   $0x1c9
f011ac7d:	68 7a b1 13 f0       	push   $0xf013b17a
f011ac82:	e8 7e 55 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ac87:	e8 57 21 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011ac8c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ac8f:	29 c2                	sub    %eax,%edx
f011ac91:	89 d0                	mov    %edx,%eax
f011ac93:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ac98:	74 17                	je     f011acb1 <test_kmalloc_bestfit1+0x867>
f011ac9a:	83 ec 04             	sub    $0x4,%esp
f011ac9d:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011aca2:	68 ca 01 00 00       	push   $0x1ca
f011aca7:	68 7a b1 13 f0       	push   $0xf013b17a
f011acac:	e8 54 55 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011acb1:	e8 2d 21 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011acb6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011acb9:	e8 e8 90 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011acbe:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(1*Mega-kilo);
f011acc1:	83 ec 0c             	sub    $0xc,%esp
f011acc4:	68 00 fc 0f 00       	push   $0xffc00
f011acc9:	e8 93 cd fe ff       	call   f0107a61 <kmalloc>
f011acce:	83 c4 10             	add    $0x10,%esp
f011acd1:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega)) panic("Wrong start address for the allocated space... ");
f011acd7:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011acdd:	89 c1                	mov    %eax,%ecx
f011acdf:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011ace6:	10 00 00 
f011ace9:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011acef:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011acf4:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011acfa:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011ad00:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad05:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011ad0b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011ad11:	29 d0                	sub    %edx,%eax
f011ad13:	89 c3                	mov    %eax,%ebx
f011ad15:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011ad1c:	10 00 00 
f011ad1f:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011ad24:	0f b6 d0             	movzbl %al,%edx
f011ad27:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011ad2d:	01 d0                	add    %edx,%eax
f011ad2f:	48                   	dec    %eax
f011ad30:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011ad36:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011ad3c:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad41:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011ad47:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011ad4d:	29 d0                	sub    %edx,%eax
f011ad4f:	01 c3                	add    %eax,%ebx
f011ad51:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011ad58:	10 00 00 
f011ad5b:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011ad60:	0f b6 c0             	movzbl %al,%eax
f011ad63:	c1 e0 04             	shl    $0x4,%eax
f011ad66:	89 c2                	mov    %eax,%edx
f011ad68:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011ad6e:	01 d0                	add    %edx,%eax
f011ad70:	48                   	dec    %eax
f011ad71:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011ad77:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011ad7d:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad82:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011ad88:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011ad8e:	29 d0                	sub    %edx,%eax
f011ad90:	01 d8                	add    %ebx,%eax
f011ad92:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f011ad97:	39 c1                	cmp    %eax,%ecx
f011ad99:	74 17                	je     f011adb2 <test_kmalloc_bestfit1+0x968>
f011ad9b:	83 ec 04             	sub    $0x4,%esp
f011ad9e:	68 94 b5 13 f0       	push   $0xf013b594
f011ada3:	68 d0 01 00 00       	push   $0x1d0
f011ada8:	68 7a b1 13 f0       	push   $0xf013b17a
f011adad:	e8 53 54 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011adb2:	e8 ef 8f fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011adb7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011adba:	74 17                	je     f011add3 <test_kmalloc_bestfit1+0x989>
f011adbc:	83 ec 04             	sub    $0x4,%esp
f011adbf:	68 94 b1 13 f0       	push   $0xf013b194
f011adc4:	68 d1 01 00 00       	push   $0x1d1
f011adc9:	68 7a b1 13 f0       	push   $0xf013b17a
f011adce:	e8 32 54 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011add3:	e8 0b 20 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011add8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011addb:	29 c2                	sub    %eax,%edx
f011addd:	89 d0                	mov    %edx,%eax
f011addf:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ade4:	74 17                	je     f011adfd <test_kmalloc_bestfit1+0x9b3>
f011ade6:	83 ec 04             	sub    $0x4,%esp
f011ade9:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011adee:	68 d2 01 00 00       	push   $0x1d2
f011adf3:	68 7a b1 13 f0       	push   $0xf013b17a
f011adf8:	e8 08 54 fe ff       	call   f0100205 <_panic>
	}

	//[2] Free some to create holes
	{
		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011adfd:	e8 e1 1f ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011ae02:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ae05:	e8 9c 8f fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011ae0a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011ae0d:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011ae13:	83 ec 0c             	sub    $0xc,%esp
f011ae16:	50                   	push   %eax
f011ae17:	e8 5b cd fe ff       	call   f0107b77 <kfree>
f011ae1c:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ae1f:	e8 82 8f fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011ae24:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ae27:	74 17                	je     f011ae40 <test_kmalloc_bestfit1+0x9f6>
f011ae29:	83 ec 04             	sub    $0x4,%esp
f011ae2c:	68 94 b1 13 f0       	push   $0xf013b194
f011ae31:	68 db 01 00 00       	push   $0x1db
f011ae36:	68 7a b1 13 f0       	push   $0xf013b17a
f011ae3b:	e8 c5 53 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((3*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011ae40:	e8 9e 1f ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011ae45:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011ae48:	3d 00 03 00 00       	cmp    $0x300,%eax
f011ae4d:	74 17                	je     f011ae66 <test_kmalloc_bestfit1+0xa1c>
f011ae4f:	83 ec 04             	sub    $0x4,%esp
f011ae52:	68 d7 b5 13 f0       	push   $0xf013b5d7
f011ae57:	68 dc 01 00 00       	push   $0x1dc
f011ae5c:	68 7a b1 13 f0       	push   $0xf013b17a
f011ae61:	e8 9f 53 fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011ae66:	e8 78 1f ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011ae6b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ae6e:	e8 33 8f fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011ae73:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011ae76:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011ae7c:	83 ec 0c             	sub    $0xc,%esp
f011ae7f:	50                   	push   %eax
f011ae80:	e8 f2 cc fe ff       	call   f0107b77 <kfree>
f011ae85:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ae88:	e8 19 8f fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011ae8d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ae90:	74 17                	je     f011aea9 <test_kmalloc_bestfit1+0xa5f>
f011ae92:	83 ec 04             	sub    $0x4,%esp
f011ae95:	68 94 b1 13 f0       	push   $0xf013b194
f011ae9a:	68 e2 01 00 00       	push   $0x1e2
f011ae9f:	68 7a b1 13 f0       	push   $0xf013b17a
f011aea4:	e8 5c 53 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((2*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011aea9:	e8 35 1f ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011aeae:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011aeb1:	3d 00 02 00 00       	cmp    $0x200,%eax
f011aeb6:	74 17                	je     f011aecf <test_kmalloc_bestfit1+0xa85>
f011aeb8:	83 ec 04             	sub    $0x4,%esp
f011aebb:	68 d7 b5 13 f0       	push   $0xf013b5d7
f011aec0:	68 e3 01 00 00       	push   $0x1e3
f011aec5:	68 7a b1 13 f0       	push   $0xf013b17a
f011aeca:	e8 36 53 fe ff       	call   f0100205 <_panic>

		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011aecf:	e8 0f 1f ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011aed4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011aed7:	e8 ca 8e fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011aedc:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[5]);
f011aedf:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011aee5:	83 ec 0c             	sub    $0xc,%esp
f011aee8:	50                   	push   %eax
f011aee9:	e8 89 cc fe ff       	call   f0107b77 <kfree>
f011aeee:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aef1:	e8 b0 8e fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011aef6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aef9:	74 17                	je     f011af12 <test_kmalloc_bestfit1+0xac8>
f011aefb:	83 ec 04             	sub    $0x4,%esp
f011aefe:	68 94 b1 13 f0       	push   $0xf013b194
f011af03:	68 e9 01 00 00       	push   $0x1e9
f011af08:	68 7a b1 13 f0       	push   $0xf013b17a
f011af0d:	e8 f3 52 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011af12:	e8 cc 1e ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011af17:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011af1a:	3d 00 01 00 00       	cmp    $0x100,%eax
f011af1f:	74 17                	je     f011af38 <test_kmalloc_bestfit1+0xaee>
f011af21:	83 ec 04             	sub    $0x4,%esp
f011af24:	68 d7 b5 13 f0       	push   $0xf013b5d7
f011af29:	68 ea 01 00 00       	push   $0x1ea
f011af2e:	68 7a b1 13 f0       	push   $0xf013b17a
f011af33:	e8 cd 52 fe ff       	call   f0100205 <_panic>
	}

	//[3] Allocate again [test best fit]
	{
		//Allocate 512 KB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011af38:	e8 a6 1e ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011af3d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011af40:	e8 61 8e fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011af45:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo);
f011af48:	83 ec 0c             	sub    $0xc,%esp
f011af4b:	68 00 00 08 00       	push   $0x80000
f011af50:	e8 0c cb fe ff       	call   f0107a61 <kmalloc>
f011af55:	83 c4 10             	add    $0x10,%esp
f011af58:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
		if ((uint32) ptr_allocations[8] !=  (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011af5e:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011af64:	89 c1                	mov    %eax,%ecx
f011af66:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011af6d:	10 00 00 
f011af70:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011af76:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011af7b:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011af81:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011af87:	ba 00 00 00 00       	mov    $0x0,%edx
f011af8c:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011af92:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011af98:	29 d0                	sub    %edx,%eax
f011af9a:	89 c3                	mov    %eax,%ebx
f011af9c:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011afa3:	10 00 00 
f011afa6:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011afab:	0f b6 d0             	movzbl %al,%edx
f011afae:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011afb4:	01 d0                	add    %edx,%eax
f011afb6:	48                   	dec    %eax
f011afb7:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011afbd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011afc3:	ba 00 00 00 00       	mov    $0x0,%edx
f011afc8:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011afce:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011afd4:	29 d0                	sub    %edx,%eax
f011afd6:	01 c3                	add    %eax,%ebx
f011afd8:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011afdf:	10 00 00 
f011afe2:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011afe7:	0f b6 c0             	movzbl %al,%eax
f011afea:	c1 e0 04             	shl    $0x4,%eax
f011afed:	89 c2                	mov    %eax,%edx
f011afef:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011aff5:	01 d0                	add    %edx,%eax
f011aff7:	48                   	dec    %eax
f011aff8:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011affe:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011b004:	ba 00 00 00 00       	mov    $0x0,%edx
f011b009:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011b00f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011b015:	29 d0                	sub    %edx,%eax
f011b017:	01 d8                	add    %ebx,%eax
f011b019:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011b01e:	39 c1                	cmp    %eax,%ecx
f011b020:	74 17                	je     f011b039 <test_kmalloc_bestfit1+0xbef>
f011b022:	83 ec 04             	sub    $0x4,%esp
f011b025:	68 94 b5 13 f0       	push   $0xf013b594
f011b02a:	68 f3 01 00 00       	push   $0x1f3
f011b02f:	68 7a b1 13 f0       	push   $0xf013b17a
f011b034:	e8 cc 51 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b039:	e8 68 8d fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011b03e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b041:	74 17                	je     f011b05a <test_kmalloc_bestfit1+0xc10>
f011b043:	83 ec 04             	sub    $0x4,%esp
f011b046:	68 94 b1 13 f0       	push   $0xf013b194
f011b04b:	68 f4 01 00 00       	push   $0x1f4
f011b050:	68 7a b1 13 f0       	push   $0xf013b17a
f011b055:	e8 ab 51 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011b05a:	e8 84 1d ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011b05f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b062:	29 c2                	sub    %eax,%edx
f011b064:	89 d0                	mov    %edx,%eax
f011b066:	3d 80 00 00 00       	cmp    $0x80,%eax
f011b06b:	74 17                	je     f011b084 <test_kmalloc_bestfit1+0xc3a>
f011b06d:	83 ec 04             	sub    $0x4,%esp
f011b070:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011b075:	68 f5 01 00 00       	push   $0x1f5
f011b07a:	68 7a b1 13 f0       	push   $0xf013b17a
f011b07f:	e8 81 51 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011b084:	e8 5a 1d ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011b089:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b08c:	e8 15 8d fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011b091:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011b094:	83 ec 0c             	sub    $0xc,%esp
f011b097:	68 00 fc 0f 00       	push   $0xffc00
f011b09c:	e8 c0 c9 fe ff       	call   f0107a61 <kmalloc>
f011b0a1:	83 c4 10             	add    $0x10,%esp
f011b0a4:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		if ((uint32) ptr_allocations[9] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011b0aa:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011b0b0:	89 c1                	mov    %eax,%ecx
f011b0b2:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011b0b9:	10 00 00 
f011b0bc:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011b0c2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b0c7:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011b0cd:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011b0d3:	ba 00 00 00 00       	mov    $0x0,%edx
f011b0d8:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011b0de:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011b0e4:	29 d0                	sub    %edx,%eax
f011b0e6:	89 c3                	mov    %eax,%ebx
f011b0e8:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011b0ef:	10 00 00 
f011b0f2:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011b0f7:	0f b6 d0             	movzbl %al,%edx
f011b0fa:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011b100:	01 d0                	add    %edx,%eax
f011b102:	48                   	dec    %eax
f011b103:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011b109:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011b10f:	ba 00 00 00 00       	mov    $0x0,%edx
f011b114:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011b11a:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011b120:	29 d0                	sub    %edx,%eax
f011b122:	01 c3                	add    %eax,%ebx
f011b124:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011b12b:	10 00 00 
f011b12e:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011b133:	0f b6 c0             	movzbl %al,%eax
f011b136:	c1 e0 04             	shl    $0x4,%eax
f011b139:	89 c2                	mov    %eax,%edx
f011b13b:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011b141:	01 d0                	add    %edx,%eax
f011b143:	48                   	dec    %eax
f011b144:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011b14a:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011b150:	ba 00 00 00 00       	mov    $0x0,%edx
f011b155:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011b15b:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011b161:	29 d0                	sub    %edx,%eax
f011b163:	01 d8                	add    %ebx,%eax
f011b165:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011b16a:	39 c1                	cmp    %eax,%ecx
f011b16c:	74 17                	je     f011b185 <test_kmalloc_bestfit1+0xd3b>
f011b16e:	83 ec 04             	sub    $0x4,%esp
f011b171:	68 94 b5 13 f0       	push   $0xf013b594
f011b176:	68 fb 01 00 00       	push   $0x1fb
f011b17b:	68 7a b1 13 f0       	push   $0xf013b17a
f011b180:	e8 80 50 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b185:	e8 1c 8c fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011b18a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b18d:	74 17                	je     f011b1a6 <test_kmalloc_bestfit1+0xd5c>
f011b18f:	83 ec 04             	sub    $0x4,%esp
f011b192:	68 94 b1 13 f0       	push   $0xf013b194
f011b197:	68 fc 01 00 00       	push   $0x1fc
f011b19c:	68 7a b1 13 f0       	push   $0xf013b17a
f011b1a1:	e8 5f 50 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011b1a6:	e8 38 1c ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011b1ab:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b1ae:	29 c2                	sub    %eax,%edx
f011b1b0:	89 d0                	mov    %edx,%eax
f011b1b2:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b1b7:	74 17                	je     f011b1d0 <test_kmalloc_bestfit1+0xd86>
f011b1b9:	83 ec 04             	sub    $0x4,%esp
f011b1bc:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011b1c1:	68 fd 01 00 00       	push   $0x1fd
f011b1c6:	68 7a b1 13 f0       	push   $0xf013b17a
f011b1cb:	e8 35 50 fe ff       	call   f0100205 <_panic>

		//Allocate 256 KB - should be placed in remaining of 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011b1d0:	e8 0e 1c ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011b1d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b1d8:	e8 c9 8b fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011b1dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011b1e0:	83 ec 0c             	sub    $0xc,%esp
f011b1e3:	68 00 fc 03 00       	push   $0x3fc00
f011b1e8:	e8 74 c8 fe ff       	call   f0107a61 <kmalloc>
f011b1ed:	83 c4 10             	add    $0x10,%esp
f011b1f0:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		if ((uint32) ptr_allocations[10] !=  (ACTUAL_START + 11*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011b1f6:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011b1fc:	89 c1                	mov    %eax,%ecx
f011b1fe:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011b205:	10 00 00 
f011b208:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011b20e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b213:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011b219:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b21f:	ba 00 00 00 00       	mov    $0x0,%edx
f011b224:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011b22a:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b230:	29 d0                	sub    %edx,%eax
f011b232:	89 c3                	mov    %eax,%ebx
f011b234:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011b23b:	10 00 00 
f011b23e:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011b243:	0f b6 d0             	movzbl %al,%edx
f011b246:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011b24c:	01 d0                	add    %edx,%eax
f011b24e:	48                   	dec    %eax
f011b24f:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011b255:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b25b:	ba 00 00 00 00       	mov    $0x0,%edx
f011b260:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011b266:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b26c:	29 d0                	sub    %edx,%eax
f011b26e:	01 c3                	add    %eax,%ebx
f011b270:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011b277:	10 00 00 
f011b27a:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011b27f:	0f b6 c0             	movzbl %al,%eax
f011b282:	c1 e0 04             	shl    $0x4,%eax
f011b285:	89 c2                	mov    %eax,%edx
f011b287:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011b28d:	01 d0                	add    %edx,%eax
f011b28f:	48                   	dec    %eax
f011b290:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011b296:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011b29c:	ba 00 00 00 00       	mov    $0x0,%edx
f011b2a1:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011b2a7:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011b2ad:	29 d0                	sub    %edx,%eax
f011b2af:	01 d8                	add    %ebx,%eax
f011b2b1:	2d 00 c0 47 09       	sub    $0x947c000,%eax
f011b2b6:	39 c1                	cmp    %eax,%ecx
f011b2b8:	74 17                	je     f011b2d1 <test_kmalloc_bestfit1+0xe87>
f011b2ba:	83 ec 04             	sub    $0x4,%esp
f011b2bd:	68 94 b5 13 f0       	push   $0xf013b594
f011b2c2:	68 03 02 00 00       	push   $0x203
f011b2c7:	68 7a b1 13 f0       	push   $0xf013b17a
f011b2cc:	e8 34 4f fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b2d1:	e8 d0 8a fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011b2d6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b2d9:	74 17                	je     f011b2f2 <test_kmalloc_bestfit1+0xea8>
f011b2db:	83 ec 04             	sub    $0x4,%esp
f011b2de:	68 94 b1 13 f0       	push   $0xf013b194
f011b2e3:	68 04 02 00 00       	push   $0x204
f011b2e8:	68 7a b1 13 f0       	push   $0xf013b17a
f011b2ed:	e8 13 4f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011b2f2:	e8 ec 1a ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011b2f7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b2fa:	29 c2                	sub    %eax,%edx
f011b2fc:	89 d0                	mov    %edx,%eax
f011b2fe:	83 f8 40             	cmp    $0x40,%eax
f011b301:	74 17                	je     f011b31a <test_kmalloc_bestfit1+0xed0>
f011b303:	83 ec 04             	sub    $0x4,%esp
f011b306:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011b30b:	68 05 02 00 00       	push   $0x205
f011b310:	68 7a b1 13 f0       	push   $0xf013b17a
f011b315:	e8 eb 4e fe ff       	call   f0100205 <_panic>

		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011b31a:	e8 c4 1a ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011b31f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b322:	e8 7f 8a fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011b327:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega - kilo);
f011b32a:	83 ec 0c             	sub    $0xc,%esp
f011b32d:	68 00 fc 3f 00       	push   $0x3ffc00
f011b332:	e8 2a c7 fe ff       	call   f0107a61 <kmalloc>
f011b337:	83 c4 10             	add    $0x10,%esp
f011b33a:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011b340:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011b346:	89 c1                	mov    %eax,%ecx
f011b348:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011b34f:	10 00 00 
f011b352:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011b358:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b35d:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011b363:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011b369:	ba 00 00 00 00       	mov    $0x0,%edx
f011b36e:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011b374:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011b37a:	29 d0                	sub    %edx,%eax
f011b37c:	89 c3                	mov    %eax,%ebx
f011b37e:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011b385:	10 00 00 
f011b388:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011b38d:	0f b6 d0             	movzbl %al,%edx
f011b390:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011b396:	01 d0                	add    %edx,%eax
f011b398:	48                   	dec    %eax
f011b399:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011b39f:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011b3a5:	ba 00 00 00 00       	mov    $0x0,%edx
f011b3aa:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011b3b0:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011b3b6:	29 d0                	sub    %edx,%eax
f011b3b8:	01 c3                	add    %eax,%ebx
f011b3ba:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011b3c1:	10 00 00 
f011b3c4:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011b3c9:	0f b6 c0             	movzbl %al,%eax
f011b3cc:	c1 e0 04             	shl    $0x4,%eax
f011b3cf:	89 c2                	mov    %eax,%edx
f011b3d1:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011b3d7:	01 d0                	add    %edx,%eax
f011b3d9:	48                   	dec    %eax
f011b3da:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011b3e0:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011b3e6:	ba 00 00 00 00       	mov    $0x0,%edx
f011b3eb:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011b3f1:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011b3f7:	29 d0                	sub    %edx,%eax
f011b3f9:	01 d8                	add    %ebx,%eax
f011b3fb:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011b400:	39 c1                	cmp    %eax,%ecx
f011b402:	74 17                	je     f011b41b <test_kmalloc_bestfit1+0xfd1>
f011b404:	83 ec 04             	sub    $0x4,%esp
f011b407:	68 94 b5 13 f0       	push   $0xf013b594
f011b40c:	68 0b 02 00 00       	push   $0x20b
f011b411:	68 7a b1 13 f0       	push   $0xf013b17a
f011b416:	e8 ea 4d fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b41b:	e8 86 89 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011b420:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b423:	74 17                	je     f011b43c <test_kmalloc_bestfit1+0xff2>
f011b425:	83 ec 04             	sub    $0x4,%esp
f011b428:	68 94 b1 13 f0       	push   $0xf013b194
f011b42d:	68 0c 02 00 00       	push   $0x20c
f011b432:	68 7a b1 13 f0       	push   $0xf013b17a
f011b437:	e8 c9 4d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011b43c:	e8 a2 19 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011b441:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b444:	29 c2                	sub    %eax,%edx
f011b446:	89 d0                	mov    %edx,%eax
f011b448:	3d 00 04 00 00       	cmp    $0x400,%eax
f011b44d:	74 17                	je     f011b466 <test_kmalloc_bestfit1+0x101c>
f011b44f:	83 ec 04             	sub    $0x4,%esp
f011b452:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011b457:	68 0d 02 00 00       	push   $0x20d
f011b45c:	68 7a b1 13 f0       	push   $0xf013b17a
f011b461:	e8 9f 4d fe ff       	call   f0100205 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1M Hole appended to already existing 1M hole in the middle
		freeFrames = sys_calculate_free_frames() ;
f011b466:	e8 78 19 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011b46b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b46e:	e8 33 89 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011b473:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011b476:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011b47c:	83 ec 0c             	sub    $0xc,%esp
f011b47f:	50                   	push   %eax
f011b480:	e8 f2 c6 fe ff       	call   f0107b77 <kfree>
f011b485:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b488:	e8 19 89 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011b48d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b490:	74 17                	je     f011b4a9 <test_kmalloc_bestfit1+0x105f>
f011b492:	83 ec 04             	sub    $0x4,%esp
f011b495:	68 94 b1 13 f0       	push   $0xf013b194
f011b49a:	68 16 02 00 00       	push   $0x216
f011b49f:	68 7a b1 13 f0       	push   $0xf013b17a
f011b4a4:	e8 5c 4d fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011b4a9:	e8 35 19 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011b4ae:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b4b1:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b4b6:	74 17                	je     f011b4cf <test_kmalloc_bestfit1+0x1085>
f011b4b8:	83 ec 04             	sub    $0x4,%esp
f011b4bb:	68 d7 b5 13 f0       	push   $0xf013b5d7
f011b4c0:	68 17 02 00 00       	push   $0x217
f011b4c5:	68 7a b1 13 f0       	push   $0xf013b17a
f011b4ca:	e8 36 4d fe ff       	call   f0100205 <_panic>

		//another 512 KB Hole appended to the hole
		freeFrames = sys_calculate_free_frames() ;
f011b4cf:	e8 0f 19 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011b4d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b4d7:	e8 ca 88 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011b4dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[8]);
f011b4df:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011b4e5:	83 ec 0c             	sub    $0xc,%esp
f011b4e8:	50                   	push   %eax
f011b4e9:	e8 89 c6 fe ff       	call   f0107b77 <kfree>
f011b4ee:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b4f1:	e8 b0 88 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011b4f6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b4f9:	74 17                	je     f011b512 <test_kmalloc_bestfit1+0x10c8>
f011b4fb:	83 ec 04             	sub    $0x4,%esp
f011b4fe:	68 94 b1 13 f0       	push   $0xf013b194
f011b503:	68 1d 02 00 00       	push   $0x21d
f011b508:	68 7a b1 13 f0       	push   $0xf013b17a
f011b50d:	e8 f3 4c fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 128) panic("Wrong free: ");
f011b512:	e8 cc 18 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011b517:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b51a:	3d 80 00 00 00       	cmp    $0x80,%eax
f011b51f:	74 17                	je     f011b538 <test_kmalloc_bestfit1+0x10ee>
f011b521:	83 ec 04             	sub    $0x4,%esp
f011b524:	68 d7 b5 13 f0       	push   $0xf013b5d7
f011b529:	68 1e 02 00 00       	push   $0x21e
f011b52e:	68 7a b1 13 f0       	push   $0xf013b17a
f011b533:	e8 cd 4c fe ff       	call   f0100205 <_panic>
	}

	//[5] Allocate again [test best fit]
	{
		//Allocate 2 MB - should be placed in the contiguous hole (2 MB + 512 KB)
		freeFrames = sys_calculate_free_frames();
f011b538:	e8 a6 18 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011b53d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b540:	e8 61 88 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011b545:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(2*Mega - kilo);
f011b548:	83 ec 0c             	sub    $0xc,%esp
f011b54b:	68 00 fc 1f 00       	push   $0x1ffc00
f011b550:	e8 0c c5 fe ff       	call   f0107a61 <kmalloc>
f011b555:	83 c4 10             	add    $0x10,%esp
f011b558:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 9*Mega)) panic("Wrong start address for the allocated space... ");
f011b55e:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011b564:	89 c1                	mov    %eax,%ecx
f011b566:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011b56d:	10 00 00 
f011b570:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011b576:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b57b:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011b581:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011b587:	ba 00 00 00 00       	mov    $0x0,%edx
f011b58c:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011b592:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011b598:	29 d0                	sub    %edx,%eax
f011b59a:	89 c3                	mov    %eax,%ebx
f011b59c:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011b5a3:	10 00 00 
f011b5a6:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011b5ab:	0f b6 d0             	movzbl %al,%edx
f011b5ae:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011b5b4:	01 d0                	add    %edx,%eax
f011b5b6:	48                   	dec    %eax
f011b5b7:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011b5bd:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b5c3:	ba 00 00 00 00       	mov    $0x0,%edx
f011b5c8:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011b5ce:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b5d4:	29 d0                	sub    %edx,%eax
f011b5d6:	01 c3                	add    %eax,%ebx
f011b5d8:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011b5df:	10 00 00 
f011b5e2:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011b5e7:	0f b6 c0             	movzbl %al,%eax
f011b5ea:	c1 e0 04             	shl    $0x4,%eax
f011b5ed:	89 c2                	mov    %eax,%edx
f011b5ef:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011b5f5:	01 d0                	add    %edx,%eax
f011b5f7:	48                   	dec    %eax
f011b5f8:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011b5fe:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011b604:	ba 00 00 00 00       	mov    $0x0,%edx
f011b609:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011b60f:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011b615:	29 d0                	sub    %edx,%eax
f011b617:	01 d8                	add    %ebx,%eax
f011b619:	2d 00 c0 6f 09       	sub    $0x96fc000,%eax
f011b61e:	39 c1                	cmp    %eax,%ecx
f011b620:	74 17                	je     f011b639 <test_kmalloc_bestfit1+0x11ef>
f011b622:	83 ec 04             	sub    $0x4,%esp
f011b625:	68 94 b5 13 f0       	push   $0xf013b594
f011b62a:	68 27 02 00 00       	push   $0x227
f011b62f:	68 7a b1 13 f0       	push   $0xf013b17a
f011b634:	e8 cc 4b fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b639:	e8 68 87 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011b63e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b641:	74 17                	je     f011b65a <test_kmalloc_bestfit1+0x1210>
f011b643:	83 ec 04             	sub    $0x4,%esp
f011b646:	68 94 b1 13 f0       	push   $0xf013b194
f011b64b:	68 28 02 00 00       	push   $0x228
f011b650:	68 7a b1 13 f0       	push   $0xf013b17a
f011b655:	e8 ab 4b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011b65a:	e8 84 17 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011b65f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b662:	29 c2                	sub    %eax,%edx
f011b664:	89 d0                	mov    %edx,%eax
f011b666:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b66b:	74 17                	je     f011b684 <test_kmalloc_bestfit1+0x123a>
f011b66d:	83 ec 04             	sub    $0x4,%esp
f011b670:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011b675:	68 29 02 00 00       	push   $0x229
f011b67a:	68 7a b1 13 f0       	push   $0xf013b17a
f011b67f:	e8 81 4b fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test BEST FIT allocation (1) completed successfully.\n");
f011b684:	83 ec 0c             	sub    $0xc,%esp
f011b687:	68 e4 b5 13 f0       	push   $0xf013b5e4
f011b68c:	e8 7d 56 fe ff       	call   f0100d0e <cprintf>
f011b691:	83 c4 10             	add    $0x10,%esp

	return 1;
f011b694:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011b699:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011b69c:	5b                   	pop    %ebx
f011b69d:	5f                   	pop    %edi
f011b69e:	5d                   	pop    %ebp
f011b69f:	c3                   	ret    

f011b6a0 <test_kmalloc_bestfit2>:

int test_kmalloc_bestfit2()
{
f011b6a0:	55                   	push   %ebp
f011b6a1:	89 e5                	mov    %esp,%ebp
f011b6a3:	57                   	push   %edi
f011b6a4:	53                   	push   %ebx
f011b6a5:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011b6ab:	83 ec 0c             	sub    $0xc,%esp
f011b6ae:	68 bc b0 13 f0       	push   $0xf013b0bc
f011b6b3:	e8 56 56 fe ff       	call   f0100d0e <cprintf>
f011b6b8:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011b6bb:	83 ec 0c             	sub    $0xc,%esp
f011b6be:	68 ec b0 13 f0       	push   $0xf013b0ec
f011b6c3:	e8 46 56 fe ff       	call   f0100d0e <cprintf>
f011b6c8:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011b6cb:	83 ec 0c             	sub    $0xc,%esp
f011b6ce:	68 bc b0 13 f0       	push   $0xf013b0bc
f011b6d3:	e8 36 56 fe ff       	call   f0100d0e <cprintf>
f011b6d8:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011b6db:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011b6e1:	b9 14 00 00 00       	mov    $0x14,%ecx
f011b6e6:	b8 00 00 00 00       	mov    $0x0,%eax
f011b6eb:	89 d7                	mov    %edx,%edi
f011b6ed:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011b6ef:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011b6f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011b6f9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b6fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011b701:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011b704:	ba 00 00 00 00       	mov    $0x0,%edx
f011b709:	f7 75 f4             	divl   -0xc(%ebp)
f011b70c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011b70f:	29 d0                	sub    %edx,%eax
f011b711:	89 c1                	mov    %eax,%ecx
f011b713:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011b71a:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011b71f:	0f b6 d0             	movzbl %al,%edx
f011b722:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011b725:	01 d0                	add    %edx,%eax
f011b727:	48                   	dec    %eax
f011b728:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011b72b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011b72e:	ba 00 00 00 00       	mov    $0x0,%edx
f011b733:	f7 75 ec             	divl   -0x14(%ebp)
f011b736:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011b739:	29 d0                	sub    %edx,%eax
f011b73b:	01 c1                	add    %eax,%ecx
f011b73d:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011b744:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011b749:	0f b6 c0             	movzbl %al,%eax
f011b74c:	c1 e0 04             	shl    $0x4,%eax
f011b74f:	89 c2                	mov    %eax,%edx
f011b751:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011b754:	01 d0                	add    %edx,%eax
f011b756:	48                   	dec    %eax
f011b757:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011b75a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011b75d:	ba 00 00 00 00       	mov    $0x0,%edx
f011b762:	f7 75 e4             	divl   -0x1c(%ebp)
f011b765:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011b768:	29 d0                	sub    %edx,%eax
f011b76a:	01 c8                	add    %ecx,%eax
f011b76c:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011b771:	29 c2                	sub    %eax,%edx
f011b773:	89 d0                	mov    %edx,%eax
f011b775:	83 ec 0c             	sub    $0xc,%esp
f011b778:	50                   	push   %eax
f011b779:	e8 e3 c2 fe ff       	call   f0107a61 <kmalloc>
f011b77e:	83 c4 10             	add    $0x10,%esp
f011b781:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Kmalloc: Attempt to allocate more than heap size, should return NULL");
f011b787:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011b78d:	85 c0                	test   %eax,%eax
f011b78f:	74 17                	je     f011b7a8 <test_kmalloc_bestfit2+0x108>
f011b791:	83 ec 04             	sub    $0x4,%esp
f011b794:	68 2c b6 13 f0       	push   $0xf013b62c
f011b799:	68 3f 02 00 00       	push   $0x23f
f011b79e:	68 7a b1 13 f0       	push   $0xf013b17a
f011b7a3:	e8 5d 4a fe ff       	call   f0100205 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b7a8:	e8 36 16 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011b7ad:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b7b0:	e8 f1 85 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011b7b5:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011b7b8:	83 ec 0c             	sub    $0xc,%esp
f011b7bb:	68 00 fc 1f 00       	push   $0x1ffc00
f011b7c0:	e8 9c c2 fe ff       	call   f0107a61 <kmalloc>
f011b7c5:	83 c4 10             	add    $0x10,%esp
f011b7c8:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011b7ce:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011b7d4:	89 c1                	mov    %eax,%ecx
f011b7d6:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011b7dd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011b7e0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b7e5:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011b7e8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011b7eb:	ba 00 00 00 00       	mov    $0x0,%edx
f011b7f0:	f7 75 d4             	divl   -0x2c(%ebp)
f011b7f3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011b7f6:	29 d0                	sub    %edx,%eax
f011b7f8:	89 c3                	mov    %eax,%ebx
f011b7fa:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011b801:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011b806:	0f b6 d0             	movzbl %al,%edx
f011b809:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011b80c:	01 d0                	add    %edx,%eax
f011b80e:	48                   	dec    %eax
f011b80f:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011b812:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b815:	ba 00 00 00 00       	mov    $0x0,%edx
f011b81a:	f7 75 cc             	divl   -0x34(%ebp)
f011b81d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b820:	29 d0                	sub    %edx,%eax
f011b822:	01 c3                	add    %eax,%ebx
f011b824:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011b82b:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011b830:	0f b6 c0             	movzbl %al,%eax
f011b833:	c1 e0 04             	shl    $0x4,%eax
f011b836:	89 c2                	mov    %eax,%edx
f011b838:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011b83b:	01 d0                	add    %edx,%eax
f011b83d:	48                   	dec    %eax
f011b83e:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011b841:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b844:	ba 00 00 00 00       	mov    $0x0,%edx
f011b849:	f7 75 c4             	divl   -0x3c(%ebp)
f011b84c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b84f:	29 d0                	sub    %edx,%eax
f011b851:	01 d8                	add    %ebx,%eax
f011b853:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011b858:	39 c1                	cmp    %eax,%ecx
f011b85a:	74 17                	je     f011b873 <test_kmalloc_bestfit2+0x1d3>
f011b85c:	83 ec 04             	sub    $0x4,%esp
f011b85f:	68 94 b5 13 f0       	push   $0xf013b594
f011b864:	68 49 02 00 00       	push   $0x249
f011b869:	68 7a b1 13 f0       	push   $0xf013b17a
f011b86e:	e8 92 49 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b873:	e8 2e 85 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011b878:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b87b:	74 17                	je     f011b894 <test_kmalloc_bestfit2+0x1f4>
f011b87d:	83 ec 04             	sub    $0x4,%esp
f011b880:	68 94 b1 13 f0       	push   $0xf013b194
f011b885:	68 4a 02 00 00       	push   $0x24a
f011b88a:	68 7a b1 13 f0       	push   $0xf013b17a
f011b88f:	e8 71 49 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011b894:	e8 4a 15 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011b899:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b89c:	29 c2                	sub    %eax,%edx
f011b89e:	89 d0                	mov    %edx,%eax
f011b8a0:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b8a5:	74 17                	je     f011b8be <test_kmalloc_bestfit2+0x21e>
f011b8a7:	83 ec 04             	sub    $0x4,%esp
f011b8aa:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011b8af:	68 4b 02 00 00       	push   $0x24b
f011b8b4:	68 7a b1 13 f0       	push   $0xf013b17a
f011b8b9:	e8 47 49 fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b8be:	e8 20 15 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011b8c3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b8c6:	e8 db 84 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011b8cb:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011b8ce:	83 ec 0c             	sub    $0xc,%esp
f011b8d1:	68 00 fc 1f 00       	push   $0x1ffc00
f011b8d6:	e8 86 c1 fe ff       	call   f0107a61 <kmalloc>
f011b8db:	83 c4 10             	add    $0x10,%esp
f011b8de:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011b8e4:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011b8ea:	89 c1                	mov    %eax,%ecx
f011b8ec:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011b8f3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011b8f6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b8fb:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011b8fe:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011b901:	ba 00 00 00 00       	mov    $0x0,%edx
f011b906:	f7 75 bc             	divl   -0x44(%ebp)
f011b909:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011b90c:	29 d0                	sub    %edx,%eax
f011b90e:	89 c3                	mov    %eax,%ebx
f011b910:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011b917:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011b91c:	0f b6 d0             	movzbl %al,%edx
f011b91f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011b922:	01 d0                	add    %edx,%eax
f011b924:	48                   	dec    %eax
f011b925:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011b928:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011b92b:	ba 00 00 00 00       	mov    $0x0,%edx
f011b930:	f7 75 b4             	divl   -0x4c(%ebp)
f011b933:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011b936:	29 d0                	sub    %edx,%eax
f011b938:	01 c3                	add    %eax,%ebx
f011b93a:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011b941:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011b946:	0f b6 c0             	movzbl %al,%eax
f011b949:	c1 e0 04             	shl    $0x4,%eax
f011b94c:	89 c2                	mov    %eax,%edx
f011b94e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011b951:	01 d0                	add    %edx,%eax
f011b953:	48                   	dec    %eax
f011b954:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011b957:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b95a:	ba 00 00 00 00       	mov    $0x0,%edx
f011b95f:	f7 75 ac             	divl   -0x54(%ebp)
f011b962:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b965:	29 d0                	sub    %edx,%eax
f011b967:	01 d8                	add    %ebx,%eax
f011b969:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011b96e:	39 c1                	cmp    %eax,%ecx
f011b970:	74 17                	je     f011b989 <test_kmalloc_bestfit2+0x2e9>
f011b972:	83 ec 04             	sub    $0x4,%esp
f011b975:	68 94 b5 13 f0       	push   $0xf013b594
f011b97a:	68 51 02 00 00       	push   $0x251
f011b97f:	68 7a b1 13 f0       	push   $0xf013b17a
f011b984:	e8 7c 48 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b989:	e8 18 84 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011b98e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b991:	74 17                	je     f011b9aa <test_kmalloc_bestfit2+0x30a>
f011b993:	83 ec 04             	sub    $0x4,%esp
f011b996:	68 94 b1 13 f0       	push   $0xf013b194
f011b99b:	68 52 02 00 00       	push   $0x252
f011b9a0:	68 7a b1 13 f0       	push   $0xf013b17a
f011b9a5:	e8 5b 48 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011b9aa:	e8 34 14 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011b9af:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b9b2:	29 c2                	sub    %eax,%edx
f011b9b4:	89 d0                	mov    %edx,%eax
f011b9b6:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b9bb:	74 17                	je     f011b9d4 <test_kmalloc_bestfit2+0x334>
f011b9bd:	83 ec 04             	sub    $0x4,%esp
f011b9c0:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011b9c5:	68 53 02 00 00       	push   $0x253
f011b9ca:	68 7a b1 13 f0       	push   $0xf013b17a
f011b9cf:	e8 31 48 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011b9d4:	e8 0a 14 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011b9d9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b9dc:	e8 c5 83 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011b9e1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011b9e4:	83 ec 0c             	sub    $0xc,%esp
f011b9e7:	68 00 08 00 00       	push   $0x800
f011b9ec:	e8 70 c0 fe ff       	call   f0107a61 <kmalloc>
f011b9f1:	83 c4 10             	add    $0x10,%esp
f011b9f4:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011b9fa:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011ba00:	89 c1                	mov    %eax,%ecx
f011ba02:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011ba09:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011ba0c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ba11:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011ba14:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ba17:	ba 00 00 00 00       	mov    $0x0,%edx
f011ba1c:	f7 75 a4             	divl   -0x5c(%ebp)
f011ba1f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ba22:	29 d0                	sub    %edx,%eax
f011ba24:	89 c3                	mov    %eax,%ebx
f011ba26:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011ba2d:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011ba32:	0f b6 d0             	movzbl %al,%edx
f011ba35:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011ba38:	01 d0                	add    %edx,%eax
f011ba3a:	48                   	dec    %eax
f011ba3b:	89 45 98             	mov    %eax,-0x68(%ebp)
f011ba3e:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ba41:	ba 00 00 00 00       	mov    $0x0,%edx
f011ba46:	f7 75 9c             	divl   -0x64(%ebp)
f011ba49:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ba4c:	29 d0                	sub    %edx,%eax
f011ba4e:	01 c3                	add    %eax,%ebx
f011ba50:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011ba57:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011ba5c:	0f b6 c0             	movzbl %al,%eax
f011ba5f:	c1 e0 04             	shl    $0x4,%eax
f011ba62:	89 c2                	mov    %eax,%edx
f011ba64:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011ba67:	01 d0                	add    %edx,%eax
f011ba69:	48                   	dec    %eax
f011ba6a:	89 45 90             	mov    %eax,-0x70(%ebp)
f011ba6d:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ba70:	ba 00 00 00 00       	mov    $0x0,%edx
f011ba75:	f7 75 94             	divl   -0x6c(%ebp)
f011ba78:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ba7b:	29 d0                	sub    %edx,%eax
f011ba7d:	01 d8                	add    %ebx,%eax
f011ba7f:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011ba84:	39 c1                	cmp    %eax,%ecx
f011ba86:	74 17                	je     f011ba9f <test_kmalloc_bestfit2+0x3ff>
f011ba88:	83 ec 04             	sub    $0x4,%esp
f011ba8b:	68 94 b5 13 f0       	push   $0xf013b594
f011ba90:	68 59 02 00 00       	push   $0x259
f011ba95:	68 7a b1 13 f0       	push   $0xf013b17a
f011ba9a:	e8 66 47 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ba9f:	e8 02 83 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011baa4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011baa7:	74 17                	je     f011bac0 <test_kmalloc_bestfit2+0x420>
f011baa9:	83 ec 04             	sub    $0x4,%esp
f011baac:	68 94 b1 13 f0       	push   $0xf013b194
f011bab1:	68 5a 02 00 00       	push   $0x25a
f011bab6:	68 7a b1 13 f0       	push   $0xf013b17a
f011babb:	e8 45 47 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011bac0:	e8 1e 13 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011bac5:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bac8:	29 c2                	sub    %eax,%edx
f011baca:	89 d0                	mov    %edx,%eax
f011bacc:	83 f8 01             	cmp    $0x1,%eax
f011bacf:	74 17                	je     f011bae8 <test_kmalloc_bestfit2+0x448>
f011bad1:	83 ec 04             	sub    $0x4,%esp
f011bad4:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011bad9:	68 5b 02 00 00       	push   $0x25b
f011bade:	68 7a b1 13 f0       	push   $0xf013b17a
f011bae3:	e8 1d 47 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011bae8:	e8 f6 12 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011baed:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011baf0:	e8 b1 82 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011baf5:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011baf8:	83 ec 0c             	sub    $0xc,%esp
f011bafb:	68 00 08 00 00       	push   $0x800
f011bb00:	e8 5c bf fe ff       	call   f0107a61 <kmalloc>
f011bb05:	83 c4 10             	add    $0x10,%esp
f011bb08:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011bb0e:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011bb14:	89 c1                	mov    %eax,%ecx
f011bb16:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011bb1d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011bb20:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bb25:	89 45 88             	mov    %eax,-0x78(%ebp)
f011bb28:	8b 45 88             	mov    -0x78(%ebp),%eax
f011bb2b:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb30:	f7 75 8c             	divl   -0x74(%ebp)
f011bb33:	8b 45 88             	mov    -0x78(%ebp),%eax
f011bb36:	29 d0                	sub    %edx,%eax
f011bb38:	89 c3                	mov    %eax,%ebx
f011bb3a:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011bb41:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011bb46:	0f b6 d0             	movzbl %al,%edx
f011bb49:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011bb4c:	01 d0                	add    %edx,%eax
f011bb4e:	48                   	dec    %eax
f011bb4f:	89 45 80             	mov    %eax,-0x80(%ebp)
f011bb52:	8b 45 80             	mov    -0x80(%ebp),%eax
f011bb55:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb5a:	f7 75 84             	divl   -0x7c(%ebp)
f011bb5d:	8b 45 80             	mov    -0x80(%ebp),%eax
f011bb60:	29 d0                	sub    %edx,%eax
f011bb62:	01 c3                	add    %eax,%ebx
f011bb64:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011bb6b:	10 00 00 
f011bb6e:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011bb73:	0f b6 c0             	movzbl %al,%eax
f011bb76:	c1 e0 04             	shl    $0x4,%eax
f011bb79:	89 c2                	mov    %eax,%edx
f011bb7b:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011bb81:	01 d0                	add    %edx,%eax
f011bb83:	48                   	dec    %eax
f011bb84:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011bb8a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011bb90:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb95:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011bb9b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011bba1:	29 d0                	sub    %edx,%eax
f011bba3:	01 d8                	add    %ebx,%eax
f011bba5:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011bbaa:	39 c1                	cmp    %eax,%ecx
f011bbac:	74 17                	je     f011bbc5 <test_kmalloc_bestfit2+0x525>
f011bbae:	83 ec 04             	sub    $0x4,%esp
f011bbb1:	68 94 b5 13 f0       	push   $0xf013b594
f011bbb6:	68 61 02 00 00       	push   $0x261
f011bbbb:	68 7a b1 13 f0       	push   $0xf013b17a
f011bbc0:	e8 40 46 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bbc5:	e8 dc 81 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011bbca:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bbcd:	74 17                	je     f011bbe6 <test_kmalloc_bestfit2+0x546>
f011bbcf:	83 ec 04             	sub    $0x4,%esp
f011bbd2:	68 94 b1 13 f0       	push   $0xf013b194
f011bbd7:	68 62 02 00 00       	push   $0x262
f011bbdc:	68 7a b1 13 f0       	push   $0xf013b17a
f011bbe1:	e8 1f 46 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011bbe6:	e8 f8 11 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011bbeb:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bbee:	29 c2                	sub    %eax,%edx
f011bbf0:	89 d0                	mov    %edx,%eax
f011bbf2:	83 f8 01             	cmp    $0x1,%eax
f011bbf5:	74 17                	je     f011bc0e <test_kmalloc_bestfit2+0x56e>
f011bbf7:	83 ec 04             	sub    $0x4,%esp
f011bbfa:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011bbff:	68 63 02 00 00       	push   $0x263
f011bc04:	68 7a b1 13 f0       	push   $0xf013b17a
f011bc09:	e8 f7 45 fe ff       	call   f0100205 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011bc0e:	e8 d0 11 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011bc13:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bc16:	e8 8b 81 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011bc1b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011bc1e:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011bc24:	83 ec 0c             	sub    $0xc,%esp
f011bc27:	50                   	push   %eax
f011bc28:	e8 4a bf fe ff       	call   f0107b77 <kfree>
f011bc2d:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bc30:	e8 71 81 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011bc35:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bc38:	74 17                	je     f011bc51 <test_kmalloc_bestfit2+0x5b1>
f011bc3a:	83 ec 04             	sub    $0x4,%esp
f011bc3d:	68 94 b1 13 f0       	push   $0xf013b194
f011bc42:	68 69 02 00 00       	push   $0x269
f011bc47:	68 7a b1 13 f0       	push   $0xf013b17a
f011bc4c:	e8 b4 45 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong allocation: ");
f011bc51:	e8 8d 11 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011bc56:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011bc59:	83 f8 01             	cmp    $0x1,%eax
f011bc5c:	74 17                	je     f011bc75 <test_kmalloc_bestfit2+0x5d5>
f011bc5e:	83 ec 04             	sub    $0x4,%esp
f011bc61:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011bc66:	68 6a 02 00 00       	push   $0x26a
f011bc6b:	68 7a b1 13 f0       	push   $0xf013b17a
f011bc70:	e8 90 45 fe ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011bc75:	e8 69 11 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011bc7a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bc7d:	e8 24 81 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011bc82:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011bc85:	83 ec 0c             	sub    $0xc,%esp
f011bc88:	68 00 1c 00 00       	push   $0x1c00
f011bc8d:	e8 cf bd fe ff       	call   f0107a61 <kmalloc>
f011bc92:	83 c4 10             	add    $0x10,%esp
f011bc95:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011bc9b:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011bca1:	89 c1                	mov    %eax,%ecx
f011bca3:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011bcaa:	10 00 00 
f011bcad:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011bcb3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bcb8:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011bcbe:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011bcc4:	ba 00 00 00 00       	mov    $0x0,%edx
f011bcc9:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011bccf:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011bcd5:	29 d0                	sub    %edx,%eax
f011bcd7:	89 c3                	mov    %eax,%ebx
f011bcd9:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011bce0:	10 00 00 
f011bce3:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011bce8:	0f b6 d0             	movzbl %al,%edx
f011bceb:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011bcf1:	01 d0                	add    %edx,%eax
f011bcf3:	48                   	dec    %eax
f011bcf4:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011bcfa:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011bd00:	ba 00 00 00 00       	mov    $0x0,%edx
f011bd05:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011bd0b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011bd11:	29 d0                	sub    %edx,%eax
f011bd13:	01 c3                	add    %eax,%ebx
f011bd15:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011bd1c:	10 00 00 
f011bd1f:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011bd24:	0f b6 c0             	movzbl %al,%eax
f011bd27:	c1 e0 04             	shl    $0x4,%eax
f011bd2a:	89 c2                	mov    %eax,%edx
f011bd2c:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011bd32:	01 d0                	add    %edx,%eax
f011bd34:	48                   	dec    %eax
f011bd35:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011bd3b:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011bd41:	ba 00 00 00 00       	mov    $0x0,%edx
f011bd46:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011bd4c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011bd52:	29 d0                	sub    %edx,%eax
f011bd54:	01 d8                	add    %ebx,%eax
f011bd56:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011bd5b:	39 c1                	cmp    %eax,%ecx
f011bd5d:	74 17                	je     f011bd76 <test_kmalloc_bestfit2+0x6d6>
f011bd5f:	83 ec 04             	sub    $0x4,%esp
f011bd62:	68 94 b5 13 f0       	push   $0xf013b594
f011bd67:	68 70 02 00 00       	push   $0x270
f011bd6c:	68 7a b1 13 f0       	push   $0xf013b17a
f011bd71:	e8 8f 44 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bd76:	e8 2b 80 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011bd7b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bd7e:	74 17                	je     f011bd97 <test_kmalloc_bestfit2+0x6f7>
f011bd80:	83 ec 04             	sub    $0x4,%esp
f011bd83:	68 94 b1 13 f0       	push   $0xf013b194
f011bd88:	68 71 02 00 00       	push   $0x271
f011bd8d:	68 7a b1 13 f0       	push   $0xf013b17a
f011bd92:	e8 6e 44 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation: ");
f011bd97:	e8 47 10 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011bd9c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bd9f:	29 c2                	sub    %eax,%edx
f011bda1:	89 d0                	mov    %edx,%eax
f011bda3:	83 f8 02             	cmp    $0x2,%eax
f011bda6:	74 17                	je     f011bdbf <test_kmalloc_bestfit2+0x71f>
f011bda8:	83 ec 04             	sub    $0x4,%esp
f011bdab:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011bdb0:	68 72 02 00 00       	push   $0x272
f011bdb5:	68 7a b1 13 f0       	push   $0xf013b17a
f011bdba:	e8 46 44 fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011bdbf:	e8 1f 10 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011bdc4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bdc7:	e8 da 7f fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011bdcc:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011bdcf:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011bdd5:	83 ec 0c             	sub    $0xc,%esp
f011bdd8:	50                   	push   %eax
f011bdd9:	e8 99 bd fe ff       	call   f0107b77 <kfree>
f011bdde:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bde1:	e8 c0 7f fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011bde6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bde9:	74 17                	je     f011be02 <test_kmalloc_bestfit2+0x762>
f011bdeb:	83 ec 04             	sub    $0x4,%esp
f011bdee:	68 94 b1 13 f0       	push   $0xf013b194
f011bdf3:	68 78 02 00 00       	push   $0x278
f011bdf8:	68 7a b1 13 f0       	push   $0xf013b17a
f011bdfd:	e8 03 44 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: Extra or less pages are removed from main memory");
f011be02:	e8 dc 0f ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011be07:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011be0a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011be0f:	74 17                	je     f011be28 <test_kmalloc_bestfit2+0x788>
f011be11:	83 ec 04             	sub    $0x4,%esp
f011be14:	68 48 b4 13 f0       	push   $0xf013b448
f011be19:	68 79 02 00 00       	push   $0x279
f011be1e:	68 7a b1 13 f0       	push   $0xf013b17a
f011be23:	e8 dd 43 fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011be28:	e8 b6 0f ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011be2d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011be30:	e8 71 7f fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011be35:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011be38:	83 ec 0c             	sub    $0xc,%esp
f011be3b:	68 00 fc 2f 00       	push   $0x2ffc00
f011be40:	e8 1c bc fe ff       	call   f0107a61 <kmalloc>
f011be45:	83 c4 10             	add    $0x10,%esp
f011be48:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011be4e:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011be54:	89 c1                	mov    %eax,%ecx
f011be56:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011be5d:	10 00 00 
f011be60:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011be66:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011be6b:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011be71:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011be77:	ba 00 00 00 00       	mov    $0x0,%edx
f011be7c:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011be82:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011be88:	29 d0                	sub    %edx,%eax
f011be8a:	89 c3                	mov    %eax,%ebx
f011be8c:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011be93:	10 00 00 
f011be96:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011be9b:	0f b6 d0             	movzbl %al,%edx
f011be9e:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011bea4:	01 d0                	add    %edx,%eax
f011bea6:	48                   	dec    %eax
f011bea7:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011bead:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011beb3:	ba 00 00 00 00       	mov    $0x0,%edx
f011beb8:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011bebe:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011bec4:	29 d0                	sub    %edx,%eax
f011bec6:	01 c3                	add    %eax,%ebx
f011bec8:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011becf:	10 00 00 
f011bed2:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011bed7:	0f b6 c0             	movzbl %al,%eax
f011beda:	c1 e0 04             	shl    $0x4,%eax
f011bedd:	89 c2                	mov    %eax,%edx
f011bedf:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011bee5:	01 d0                	add    %edx,%eax
f011bee7:	48                   	dec    %eax
f011bee8:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011beee:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011bef4:	ba 00 00 00 00       	mov    $0x0,%edx
f011bef9:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011beff:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011bf05:	29 d0                	sub    %edx,%eax
f011bf07:	01 d8                	add    %ebx,%eax
f011bf09:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011bf0e:	39 c1                	cmp    %eax,%ecx
f011bf10:	74 17                	je     f011bf29 <test_kmalloc_bestfit2+0x889>
f011bf12:	83 ec 04             	sub    $0x4,%esp
f011bf15:	68 94 b5 13 f0       	push   $0xf013b594
f011bf1a:	68 7f 02 00 00       	push   $0x27f
f011bf1f:	68 7a b1 13 f0       	push   $0xf013b17a
f011bf24:	e8 dc 42 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bf29:	e8 78 7e fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011bf2e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bf31:	74 17                	je     f011bf4a <test_kmalloc_bestfit2+0x8aa>
f011bf33:	83 ec 04             	sub    $0x4,%esp
f011bf36:	68 94 b1 13 f0       	push   $0xf013b194
f011bf3b:	68 80 02 00 00       	push   $0x280
f011bf40:	68 7a b1 13 f0       	push   $0xf013b17a
f011bf45:	e8 bb 42 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  768) panic("Wrong allocation: ");
f011bf4a:	e8 94 0e ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011bf4f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bf52:	29 c2                	sub    %eax,%edx
f011bf54:	89 d0                	mov    %edx,%eax
f011bf56:	3d 00 03 00 00       	cmp    $0x300,%eax
f011bf5b:	74 17                	je     f011bf74 <test_kmalloc_bestfit2+0x8d4>
f011bf5d:	83 ec 04             	sub    $0x4,%esp
f011bf60:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011bf65:	68 81 02 00 00       	push   $0x281
f011bf6a:	68 7a b1 13 f0       	push   $0xf013b17a
f011bf6f:	e8 91 42 fe ff       	call   f0100205 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011bf74:	e8 6a 0e ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011bf79:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bf7c:	e8 25 7e fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011bf81:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011bf84:	83 ec 0c             	sub    $0xc,%esp
f011bf87:	68 00 18 20 00       	push   $0x201800
f011bf8c:	e8 d0 ba fe ff       	call   f0107a61 <kmalloc>
f011bf91:	83 c4 10             	add    $0x10,%esp
f011bf94:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011bf9a:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011bfa0:	89 c1                	mov    %eax,%ecx
f011bfa2:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011bfa9:	10 00 00 
f011bfac:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011bfb2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bfb7:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011bfbd:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011bfc3:	ba 00 00 00 00       	mov    $0x0,%edx
f011bfc8:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011bfce:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011bfd4:	29 d0                	sub    %edx,%eax
f011bfd6:	89 c3                	mov    %eax,%ebx
f011bfd8:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011bfdf:	10 00 00 
f011bfe2:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011bfe7:	0f b6 d0             	movzbl %al,%edx
f011bfea:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011bff0:	01 d0                	add    %edx,%eax
f011bff2:	48                   	dec    %eax
f011bff3:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011bff9:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011bfff:	ba 00 00 00 00       	mov    $0x0,%edx
f011c004:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011c00a:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c010:	29 d0                	sub    %edx,%eax
f011c012:	01 c3                	add    %eax,%ebx
f011c014:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011c01b:	10 00 00 
f011c01e:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011c023:	0f b6 c0             	movzbl %al,%eax
f011c026:	c1 e0 04             	shl    $0x4,%eax
f011c029:	89 c2                	mov    %eax,%edx
f011c02b:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011c031:	01 d0                	add    %edx,%eax
f011c033:	48                   	dec    %eax
f011c034:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011c03a:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c040:	ba 00 00 00 00       	mov    $0x0,%edx
f011c045:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011c04b:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c051:	29 d0                	sub    %edx,%eax
f011c053:	01 d8                	add    %ebx,%eax
f011c055:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011c05a:	39 c1                	cmp    %eax,%ecx
f011c05c:	74 17                	je     f011c075 <test_kmalloc_bestfit2+0x9d5>
f011c05e:	83 ec 04             	sub    $0x4,%esp
f011c061:	68 94 b5 13 f0       	push   $0xf013b594
f011c066:	68 87 02 00 00       	push   $0x287
f011c06b:	68 7a b1 13 f0       	push   $0xf013b17a
f011c070:	e8 90 41 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c075:	e8 2c 7d fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011c07a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c07d:	74 17                	je     f011c096 <test_kmalloc_bestfit2+0x9f6>
f011c07f:	83 ec 04             	sub    $0x4,%esp
f011c082:	68 94 b1 13 f0       	push   $0xf013b194
f011c087:	68 88 02 00 00       	push   $0x288
f011c08c:	68 7a b1 13 f0       	push   $0xf013b17a
f011c091:	e8 6f 41 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011c096:	e8 48 0d ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011c09b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c09e:	29 c2                	sub    %eax,%edx
f011c0a0:	89 d0                	mov    %edx,%eax
f011c0a2:	3d 02 02 00 00       	cmp    $0x202,%eax
f011c0a7:	74 17                	je     f011c0c0 <test_kmalloc_bestfit2+0xa20>
f011c0a9:	83 ec 04             	sub    $0x4,%esp
f011c0ac:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011c0b1:	68 89 02 00 00       	push   $0x289
f011c0b6:	68 7a b1 13 f0       	push   $0xf013b17a
f011c0bb:	e8 45 41 fe ff       	call   f0100205 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011c0c0:	e8 1e 0d ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011c0c5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c0c8:	e8 d9 7c fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011c0cd:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011c0d0:	83 ec 0c             	sub    $0xc,%esp
f011c0d3:	68 00 fc 4f 00       	push   $0x4ffc00
f011c0d8:	e8 84 b9 fe ff       	call   f0107a61 <kmalloc>
f011c0dd:	83 c4 10             	add    $0x10,%esp
f011c0e0:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011c0e6:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011c0ec:	89 c1                	mov    %eax,%ecx
f011c0ee:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011c0f5:	10 00 00 
f011c0f8:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011c0fe:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c103:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011c109:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c10f:	ba 00 00 00 00       	mov    $0x0,%edx
f011c114:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011c11a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c120:	29 d0                	sub    %edx,%eax
f011c122:	89 c3                	mov    %eax,%ebx
f011c124:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011c12b:	10 00 00 
f011c12e:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011c133:	0f b6 d0             	movzbl %al,%edx
f011c136:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011c13c:	01 d0                	add    %edx,%eax
f011c13e:	48                   	dec    %eax
f011c13f:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011c145:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c14b:	ba 00 00 00 00       	mov    $0x0,%edx
f011c150:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011c156:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c15c:	29 d0                	sub    %edx,%eax
f011c15e:	01 c3                	add    %eax,%ebx
f011c160:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011c167:	10 00 00 
f011c16a:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011c16f:	0f b6 c0             	movzbl %al,%eax
f011c172:	c1 e0 04             	shl    $0x4,%eax
f011c175:	89 c2                	mov    %eax,%edx
f011c177:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011c17d:	01 d0                	add    %edx,%eax
f011c17f:	48                   	dec    %eax
f011c180:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011c186:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c18c:	ba 00 00 00 00       	mov    $0x0,%edx
f011c191:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011c197:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c19d:	29 d0                	sub    %edx,%eax
f011c19f:	01 d8                	add    %ebx,%eax
f011c1a1:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011c1a6:	39 c1                	cmp    %eax,%ecx
f011c1a8:	74 17                	je     f011c1c1 <test_kmalloc_bestfit2+0xb21>
f011c1aa:	83 ec 04             	sub    $0x4,%esp
f011c1ad:	68 94 b5 13 f0       	push   $0xf013b594
f011c1b2:	68 8f 02 00 00       	push   $0x28f
f011c1b7:	68 7a b1 13 f0       	push   $0xf013b17a
f011c1bc:	e8 44 40 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c1c1:	e8 e0 7b fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011c1c6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c1c9:	74 17                	je     f011c1e2 <test_kmalloc_bestfit2+0xb42>
f011c1cb:	83 ec 04             	sub    $0x4,%esp
f011c1ce:	68 94 b1 13 f0       	push   $0xf013b194
f011c1d3:	68 90 02 00 00       	push   $0x290
f011c1d8:	68 7a b1 13 f0       	push   $0xf013b17a
f011c1dd:	e8 23 40 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((5*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011c1e2:	e8 fc 0b ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011c1e7:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c1ea:	29 c2                	sub    %eax,%edx
f011c1ec:	89 d0                	mov    %edx,%eax
f011c1ee:	3d 00 05 00 00       	cmp    $0x500,%eax
f011c1f3:	74 17                	je     f011c20c <test_kmalloc_bestfit2+0xb6c>
f011c1f5:	83 ec 04             	sub    $0x4,%esp
f011c1f8:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011c1fd:	68 91 02 00 00       	push   $0x291
f011c202:	68 7a b1 13 f0       	push   $0xf013b17a
f011c207:	e8 f9 3f fe ff       	call   f0100205 <_panic>

		//2 MB + 8 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c20c:	e8 d2 0b ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011c211:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c214:	e8 8d 7b fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011c219:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f011c21c:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011c222:	83 ec 0c             	sub    $0xc,%esp
f011c225:	50                   	push   %eax
f011c226:	e8 4c b9 fe ff       	call   f0107b77 <kfree>
f011c22b:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c22e:	e8 73 7b fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011c233:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c236:	74 17                	je     f011c24f <test_kmalloc_bestfit2+0xbaf>
f011c238:	83 ec 04             	sub    $0x4,%esp
f011c23b:	68 94 b1 13 f0       	push   $0xf013b194
f011c240:	68 97 02 00 00       	push   $0x297
f011c245:	68 7a b1 13 f0       	push   $0xf013b17a
f011c24a:	e8 b6 3f fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  514) panic("Wrong free: Extra or less pages are removed from main memory");
f011c24f:	e8 8f 0b ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011c254:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011c257:	3d 02 02 00 00       	cmp    $0x202,%eax
f011c25c:	74 17                	je     f011c275 <test_kmalloc_bestfit2+0xbd5>
f011c25e:	83 ec 04             	sub    $0x4,%esp
f011c261:	68 48 b4 13 f0       	push   $0xf013b448
f011c266:	68 98 02 00 00       	push   $0x298
f011c26b:	68 7a b1 13 f0       	push   $0xf013b17a
f011c270:	e8 90 3f fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c275:	e8 69 0b ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011c27a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c27d:	e8 24 7b fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011c282:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011c285:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011c28b:	83 ec 0c             	sub    $0xc,%esp
f011c28e:	50                   	push   %eax
f011c28f:	e8 e3 b8 fe ff       	call   f0107b77 <kfree>
f011c294:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c297:	e8 0a 7b fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011c29c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c29f:	74 17                	je     f011c2b8 <test_kmalloc_bestfit2+0xc18>
f011c2a1:	83 ec 04             	sub    $0x4,%esp
f011c2a4:	68 94 b1 13 f0       	push   $0xf013b194
f011c2a9:	68 9e 02 00 00       	push   $0x29e
f011c2ae:	68 7a b1 13 f0       	push   $0xf013b17a
f011c2b3:	e8 4d 3f fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  512) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c2b8:	e8 26 0b ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011c2bd:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011c2c0:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c2c5:	74 17                	je     f011c2de <test_kmalloc_bestfit2+0xc3e>
f011c2c7:	83 ec 04             	sub    $0x4,%esp
f011c2ca:	68 74 b6 13 f0       	push   $0xf013b674
f011c2cf:	68 9f 02 00 00       	push   $0x29f
f011c2d4:	68 7a b1 13 f0       	push   $0xf013b17a
f011c2d9:	e8 27 3f fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c2de:	e8 00 0b ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011c2e3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c2e6:	e8 bb 7a fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011c2eb:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(2*Mega-kilo);
f011c2ee:	83 ec 0c             	sub    $0xc,%esp
f011c2f1:	68 00 fc 1f 00       	push   $0x1ffc00
f011c2f6:	e8 66 b7 fe ff       	call   f0107a61 <kmalloc>
f011c2fb:	83 c4 10             	add    $0x10,%esp
f011c2fe:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c304:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011c30a:	89 c1                	mov    %eax,%ecx
f011c30c:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011c313:	10 00 00 
f011c316:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011c31c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c321:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011c327:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c32d:	ba 00 00 00 00       	mov    $0x0,%edx
f011c332:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011c338:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c33e:	29 d0                	sub    %edx,%eax
f011c340:	89 c3                	mov    %eax,%ebx
f011c342:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011c349:	10 00 00 
f011c34c:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011c351:	0f b6 d0             	movzbl %al,%edx
f011c354:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011c35a:	01 d0                	add    %edx,%eax
f011c35c:	48                   	dec    %eax
f011c35d:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011c363:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011c369:	ba 00 00 00 00       	mov    $0x0,%edx
f011c36e:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011c374:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011c37a:	29 d0                	sub    %edx,%eax
f011c37c:	01 c3                	add    %eax,%ebx
f011c37e:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011c385:	10 00 00 
f011c388:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011c38d:	0f b6 c0             	movzbl %al,%eax
f011c390:	c1 e0 04             	shl    $0x4,%eax
f011c393:	89 c2                	mov    %eax,%edx
f011c395:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011c39b:	01 d0                	add    %edx,%eax
f011c39d:	48                   	dec    %eax
f011c39e:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011c3a4:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011c3aa:	ba 00 00 00 00       	mov    $0x0,%edx
f011c3af:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011c3b5:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011c3bb:	29 d0                	sub    %edx,%eax
f011c3bd:	01 d8                	add    %ebx,%eax
f011c3bf:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011c3c4:	39 c1                	cmp    %eax,%ecx
f011c3c6:	74 17                	je     f011c3df <test_kmalloc_bestfit2+0xd3f>
f011c3c8:	83 ec 04             	sub    $0x4,%esp
f011c3cb:	68 94 b5 13 f0       	push   $0xf013b594
f011c3d0:	68 a5 02 00 00       	push   $0x2a5
f011c3d5:	68 7a b1 13 f0       	push   $0xf013b17a
f011c3da:	e8 26 3e fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c3df:	e8 c2 79 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011c3e4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c3e7:	74 17                	je     f011c400 <test_kmalloc_bestfit2+0xd60>
f011c3e9:	83 ec 04             	sub    $0x4,%esp
f011c3ec:	68 94 b1 13 f0       	push   $0xf013b194
f011c3f1:	68 a6 02 00 00       	push   $0x2a6
f011c3f6:	68 7a b1 13 f0       	push   $0xf013b17a
f011c3fb:	e8 05 3e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation:");
f011c400:	e8 de 09 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011c405:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c408:	29 c2                	sub    %eax,%edx
f011c40a:	89 d0                	mov    %edx,%eax
f011c40c:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c411:	74 17                	je     f011c42a <test_kmalloc_bestfit2+0xd8a>
f011c413:	83 ec 04             	sub    $0x4,%esp
f011c416:	68 b2 b6 13 f0       	push   $0xf013b6b2
f011c41b:	68 a7 02 00 00       	push   $0x2a7
f011c420:	68 7a b1 13 f0       	push   $0xf013b17a
f011c425:	e8 db 3d fe ff       	call   f0100205 <_panic>

		//6 KB
		freeFrames = sys_calculate_free_frames() ;
f011c42a:	e8 b4 09 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011c42f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c432:	e8 6f 79 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011c437:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[9] = kmalloc(6*kilo);
f011c43a:	83 ec 0c             	sub    $0xc,%esp
f011c43d:	68 00 18 00 00       	push   $0x1800
f011c442:	e8 1a b6 fe ff       	call   f0107a61 <kmalloc>
f011c447:	83 c4 10             	add    $0x10,%esp
f011c44a:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 9*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c450:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011c456:	89 c1                	mov    %eax,%ecx
f011c458:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011c45f:	10 00 00 
f011c462:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011c468:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c46d:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011c473:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011c479:	ba 00 00 00 00       	mov    $0x0,%edx
f011c47e:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011c484:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011c48a:	29 d0                	sub    %edx,%eax
f011c48c:	89 c3                	mov    %eax,%ebx
f011c48e:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011c495:	10 00 00 
f011c498:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011c49d:	0f b6 d0             	movzbl %al,%edx
f011c4a0:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011c4a6:	01 d0                	add    %edx,%eax
f011c4a8:	48                   	dec    %eax
f011c4a9:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011c4af:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c4b5:	ba 00 00 00 00       	mov    $0x0,%edx
f011c4ba:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011c4c0:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c4c6:	29 d0                	sub    %edx,%eax
f011c4c8:	01 c3                	add    %eax,%ebx
f011c4ca:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011c4d1:	10 00 00 
f011c4d4:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011c4d9:	0f b6 c0             	movzbl %al,%eax
f011c4dc:	c1 e0 04             	shl    $0x4,%eax
f011c4df:	89 c2                	mov    %eax,%edx
f011c4e1:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011c4e7:	01 d0                	add    %edx,%eax
f011c4e9:	48                   	dec    %eax
f011c4ea:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011c4f0:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c4f6:	ba 00 00 00 00       	mov    $0x0,%edx
f011c4fb:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011c501:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c507:	29 d0                	sub    %edx,%eax
f011c509:	01 d8                	add    %ebx,%eax
f011c50b:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f011c510:	39 c1                	cmp    %eax,%ecx
f011c512:	74 17                	je     f011c52b <test_kmalloc_bestfit2+0xe8b>
f011c514:	83 ec 04             	sub    $0x4,%esp
f011c517:	68 94 b5 13 f0       	push   $0xf013b594
f011c51c:	68 ad 02 00 00       	push   $0x2ad
f011c521:	68 7a b1 13 f0       	push   $0xf013b17a
f011c526:	e8 da 3c fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c52b:	e8 76 78 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011c530:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c533:	74 17                	je     f011c54c <test_kmalloc_bestfit2+0xeac>
f011c535:	83 ec 04             	sub    $0x4,%esp
f011c538:	68 94 b1 13 f0       	push   $0xf013b194
f011c53d:	68 ae 02 00 00       	push   $0x2ae
f011c542:	68 7a b1 13 f0       	push   $0xf013b17a
f011c547:	e8 b9 3c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation:");
f011c54c:	e8 92 08 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011c551:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c554:	29 c2                	sub    %eax,%edx
f011c556:	89 d0                	mov    %edx,%eax
f011c558:	83 f8 02             	cmp    $0x2,%eax
f011c55b:	74 17                	je     f011c574 <test_kmalloc_bestfit2+0xed4>
f011c55d:	83 ec 04             	sub    $0x4,%esp
f011c560:	68 b2 b6 13 f0       	push   $0xf013b6b2
f011c565:	68 af 02 00 00       	push   $0x2af
f011c56a:	68 7a b1 13 f0       	push   $0xf013b17a
f011c56f:	e8 91 3c fe ff       	call   f0100205 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c574:	e8 6a 08 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011c579:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c57c:	e8 25 78 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011c581:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011c584:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011c58a:	83 ec 0c             	sub    $0xc,%esp
f011c58d:	50                   	push   %eax
f011c58e:	e8 e4 b5 fe ff       	call   f0107b77 <kfree>
f011c593:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c596:	e8 0b 78 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011c59b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c59e:	74 17                	je     f011c5b7 <test_kmalloc_bestfit2+0xf17>
f011c5a0:	83 ec 04             	sub    $0x4,%esp
f011c5a3:	68 94 b1 13 f0       	push   $0xf013b194
f011c5a8:	68 b5 02 00 00       	push   $0x2b5
f011c5ad:	68 7a b1 13 f0       	push   $0xf013b17a
f011c5b2:	e8 4e 3c fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  768) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c5b7:	e8 27 08 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011c5bc:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011c5bf:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c5c4:	74 17                	je     f011c5dd <test_kmalloc_bestfit2+0xf3d>
f011c5c6:	83 ec 04             	sub    $0x4,%esp
f011c5c9:	68 74 b6 13 f0       	push   $0xf013b674
f011c5ce:	68 b6 02 00 00       	push   $0x2b6
f011c5d3:	68 7a b1 13 f0       	push   $0xf013b17a
f011c5d8:	e8 28 3c fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c5dd:	e8 01 08 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011c5e2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c5e5:	e8 bc 77 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011c5ea:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[10] = kmalloc(3*Mega-kilo);
f011c5ed:	83 ec 0c             	sub    $0xc,%esp
f011c5f0:	68 00 fc 2f 00       	push   $0x2ffc00
f011c5f5:	e8 67 b4 fe ff       	call   f0107a61 <kmalloc>
f011c5fa:	83 c4 10             	add    $0x10,%esp
f011c5fd:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c603:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011c609:	89 c1                	mov    %eax,%ecx
f011c60b:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011c612:	10 00 00 
f011c615:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011c61b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c620:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011c626:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011c62c:	ba 00 00 00 00       	mov    $0x0,%edx
f011c631:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011c637:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011c63d:	29 d0                	sub    %edx,%eax
f011c63f:	89 c3                	mov    %eax,%ebx
f011c641:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011c648:	10 00 00 
f011c64b:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011c650:	0f b6 d0             	movzbl %al,%edx
f011c653:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011c659:	01 d0                	add    %edx,%eax
f011c65b:	48                   	dec    %eax
f011c65c:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011c662:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c668:	ba 00 00 00 00       	mov    $0x0,%edx
f011c66d:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011c673:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c679:	29 d0                	sub    %edx,%eax
f011c67b:	01 c3                	add    %eax,%ebx
f011c67d:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011c684:	10 00 00 
f011c687:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011c68c:	0f b6 c0             	movzbl %al,%eax
f011c68f:	c1 e0 04             	shl    $0x4,%eax
f011c692:	89 c2                	mov    %eax,%edx
f011c694:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011c69a:	01 d0                	add    %edx,%eax
f011c69c:	48                   	dec    %eax
f011c69d:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011c6a3:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011c6a9:	ba 00 00 00 00       	mov    $0x0,%edx
f011c6ae:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011c6b4:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011c6ba:	29 d0                	sub    %edx,%eax
f011c6bc:	01 d8                	add    %ebx,%eax
f011c6be:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011c6c3:	39 c1                	cmp    %eax,%ecx
f011c6c5:	74 17                	je     f011c6de <test_kmalloc_bestfit2+0x103e>
f011c6c7:	83 ec 04             	sub    $0x4,%esp
f011c6ca:	68 94 b5 13 f0       	push   $0xf013b594
f011c6cf:	68 bc 02 00 00       	push   $0x2bc
f011c6d4:	68 7a b1 13 f0       	push   $0xf013b17a
f011c6d9:	e8 27 3b fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c6de:	e8 c3 76 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011c6e3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c6e6:	74 17                	je     f011c6ff <test_kmalloc_bestfit2+0x105f>
f011c6e8:	83 ec 04             	sub    $0x4,%esp
f011c6eb:	68 94 b1 13 f0       	push   $0xf013b194
f011c6f0:	68 bd 02 00 00       	push   $0x2bd
f011c6f5:	68 7a b1 13 f0       	push   $0xf013b17a
f011c6fa:	e8 06 3b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((3*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c6ff:	e8 df 06 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011c704:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c707:	29 c2                	sub    %eax,%edx
f011c709:	89 d0                	mov    %edx,%eax
f011c70b:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c710:	74 17                	je     f011c729 <test_kmalloc_bestfit2+0x1089>
f011c712:	83 ec 04             	sub    $0x4,%esp
f011c715:	68 74 b6 13 f0       	push   $0xf013b674
f011c71a:	68 be 02 00 00       	push   $0x2be
f011c71f:	68 7a b1 13 f0       	push   $0xf013b17a
f011c724:	e8 dc 3a fe ff       	call   f0100205 <_panic>

		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f011c729:	e8 b5 06 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011c72e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c731:	e8 70 76 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011c736:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega-kilo);
f011c739:	83 ec 0c             	sub    $0xc,%esp
f011c73c:	68 00 fc 3f 00       	push   $0x3ffc00
f011c741:	e8 1b b3 fe ff       	call   f0107a61 <kmalloc>
f011c746:	83 c4 10             	add    $0x10,%esp
f011c749:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011c74f:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011c755:	89 c1                	mov    %eax,%ecx
f011c757:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011c75e:	10 00 00 
f011c761:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011c767:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c76c:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011c772:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011c778:	ba 00 00 00 00       	mov    $0x0,%edx
f011c77d:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011c783:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011c789:	29 d0                	sub    %edx,%eax
f011c78b:	89 c3                	mov    %eax,%ebx
f011c78d:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011c794:	10 00 00 
f011c797:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011c79c:	0f b6 d0             	movzbl %al,%edx
f011c79f:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011c7a5:	01 d0                	add    %edx,%eax
f011c7a7:	48                   	dec    %eax
f011c7a8:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011c7ae:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011c7b4:	ba 00 00 00 00       	mov    $0x0,%edx
f011c7b9:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011c7bf:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011c7c5:	29 d0                	sub    %edx,%eax
f011c7c7:	01 c3                	add    %eax,%ebx
f011c7c9:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011c7d0:	10 00 00 
f011c7d3:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011c7d8:	0f b6 c0             	movzbl %al,%eax
f011c7db:	c1 e0 04             	shl    $0x4,%eax
f011c7de:	89 c2                	mov    %eax,%edx
f011c7e0:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011c7e6:	01 d0                	add    %edx,%eax
f011c7e8:	48                   	dec    %eax
f011c7e9:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011c7ef:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011c7f5:	ba 00 00 00 00       	mov    $0x0,%edx
f011c7fa:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011c800:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011c806:	29 d0                	sub    %edx,%eax
f011c808:	01 d8                	add    %ebx,%eax
f011c80a:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011c80f:	39 c1                	cmp    %eax,%ecx
f011c811:	74 17                	je     f011c82a <test_kmalloc_bestfit2+0x118a>
f011c813:	83 ec 04             	sub    $0x4,%esp
f011c816:	68 94 b5 13 f0       	push   $0xf013b594
f011c81b:	68 c4 02 00 00       	push   $0x2c4
f011c820:	68 7a b1 13 f0       	push   $0xf013b17a
f011c825:	e8 db 39 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c82a:	e8 77 75 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011c82f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c832:	74 17                	je     f011c84b <test_kmalloc_bestfit2+0x11ab>
f011c834:	83 ec 04             	sub    $0x4,%esp
f011c837:	68 94 b1 13 f0       	push   $0xf013b194
f011c83c:	68 c5 02 00 00       	push   $0x2c5
f011c841:	68 7a b1 13 f0       	push   $0xf013b17a
f011c846:	e8 ba 39 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((4*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c84b:	e8 93 05 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011c850:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c853:	29 c2                	sub    %eax,%edx
f011c855:	89 d0                	mov    %edx,%eax
f011c857:	3d 00 04 00 00       	cmp    $0x400,%eax
f011c85c:	74 17                	je     f011c875 <test_kmalloc_bestfit2+0x11d5>
f011c85e:	83 ec 04             	sub    $0x4,%esp
f011c861:	68 74 b6 13 f0       	push   $0xf013b674
f011c866:	68 c6 02 00 00       	push   $0x2c6
f011c86b:	68 7a b1 13 f0       	push   $0xf013b17a
f011c870:	e8 90 39 fe ff       	call   f0100205 <_panic>
	}

	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[12] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011c875:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011c87c:	10 00 00 
f011c87f:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011c885:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c88a:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011c890:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011c896:	ba 00 00 00 00       	mov    $0x0,%edx
f011c89b:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011c8a1:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011c8a7:	29 d0                	sub    %edx,%eax
f011c8a9:	89 c1                	mov    %eax,%ecx
f011c8ab:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011c8b2:	10 00 00 
f011c8b5:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011c8ba:	0f b6 d0             	movzbl %al,%edx
f011c8bd:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011c8c3:	01 d0                	add    %edx,%eax
f011c8c5:	48                   	dec    %eax
f011c8c6:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011c8cc:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011c8d2:	ba 00 00 00 00       	mov    $0x0,%edx
f011c8d7:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011c8dd:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011c8e3:	29 d0                	sub    %edx,%eax
f011c8e5:	01 c1                	add    %eax,%ecx
f011c8e7:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011c8ee:	10 00 00 
f011c8f1:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011c8f6:	0f b6 c0             	movzbl %al,%eax
f011c8f9:	c1 e0 04             	shl    $0x4,%eax
f011c8fc:	89 c2                	mov    %eax,%edx
f011c8fe:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011c904:	01 d0                	add    %edx,%eax
f011c906:	48                   	dec    %eax
f011c907:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011c90d:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011c913:	ba 00 00 00 00       	mov    $0x0,%edx
f011c918:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011c91e:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011c924:	29 d0                	sub    %edx,%eax
f011c926:	01 c8                	add    %ecx,%eax
f011c928:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011c92d:	29 c2                	sub    %eax,%edx
f011c92f:	89 d0                	mov    %edx,%eax
f011c931:	83 ec 0c             	sub    $0xc,%esp
f011c934:	50                   	push   %eax
f011c935:	e8 27 b1 fe ff       	call   f0107a61 <kmalloc>
f011c93a:	83 c4 10             	add    $0x10,%esp
f011c93d:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if (ptr_allocations[12] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011c943:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011c949:	85 c0                	test   %eax,%eax
f011c94b:	74 17                	je     f011c964 <test_kmalloc_bestfit2+0x12c4>
f011c94d:	83 ec 04             	sub    $0x4,%esp
f011c950:	68 c4 b6 13 f0       	push   $0xf013b6c4
f011c955:	68 ce 02 00 00       	push   $0x2ce
f011c95a:	68 7a b1 13 f0       	push   $0xf013b17a
f011c95f:	e8 a1 38 fe ff       	call   f0100205 <_panic>

		cprintf("Congratulations!! test BEST FIT allocation (2) completed successfully.\n");
f011c964:	83 ec 0c             	sub    $0xc,%esp
f011c967:	68 28 b7 13 f0       	push   $0xf013b728
f011c96c:	e8 9d 43 fe ff       	call   f0100d0e <cprintf>
f011c971:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011c974:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011c979:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011c97c:	5b                   	pop    %ebx
f011c97d:	5f                   	pop    %edi
f011c97e:	5d                   	pop    %ebp
f011c97f:	c3                   	ret    

f011c980 <test_kmalloc_firstfit1>:

int test_kmalloc_firstfit1()
{
f011c980:	55                   	push   %ebp
f011c981:	89 e5                	mov    %esp,%ebp
f011c983:	57                   	push   %edi
f011c984:	53                   	push   %ebx
f011c985:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011c98b:	83 ec 0c             	sub    $0xc,%esp
f011c98e:	68 bc b0 13 f0       	push   $0xf013b0bc
f011c993:	e8 76 43 fe ff       	call   f0100d0e <cprintf>
f011c998:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011c99b:	83 ec 0c             	sub    $0xc,%esp
f011c99e:	68 ec b0 13 f0       	push   $0xf013b0ec
f011c9a3:	e8 66 43 fe ff       	call   f0100d0e <cprintf>
f011c9a8:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011c9ab:	83 ec 0c             	sub    $0xc,%esp
f011c9ae:	68 bc b0 13 f0       	push   $0xf013b0bc
f011c9b3:	e8 56 43 fe ff       	call   f0100d0e <cprintf>
f011c9b8:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011c9bb:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011c9c1:	b9 14 00 00 00       	mov    $0x14,%ecx
f011c9c6:	b8 00 00 00 00       	mov    $0x0,%eax
f011c9cb:	89 d7                	mov    %edx,%edi
f011c9cd:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c9cf:	e8 0f 04 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011c9d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c9d7:	e8 ca 73 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011c9dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(1*Mega-kilo);
f011c9df:	83 ec 0c             	sub    $0xc,%esp
f011c9e2:	68 00 fc 0f 00       	push   $0xffc00
f011c9e7:	e8 75 b0 fe ff       	call   f0107a61 <kmalloc>
f011c9ec:	83 c4 10             	add    $0x10,%esp
f011c9ef:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011c9f5:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011c9fb:	89 c1                	mov    %eax,%ecx
f011c9fd:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011ca04:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011ca07:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ca0c:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011ca0f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011ca12:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca17:	f7 75 ec             	divl   -0x14(%ebp)
f011ca1a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011ca1d:	29 d0                	sub    %edx,%eax
f011ca1f:	89 c3                	mov    %eax,%ebx
f011ca21:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011ca28:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011ca2d:	0f b6 d0             	movzbl %al,%edx
f011ca30:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011ca33:	01 d0                	add    %edx,%eax
f011ca35:	48                   	dec    %eax
f011ca36:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011ca39:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ca3c:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca41:	f7 75 e4             	divl   -0x1c(%ebp)
f011ca44:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ca47:	29 d0                	sub    %edx,%eax
f011ca49:	01 c3                	add    %eax,%ebx
f011ca4b:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011ca52:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011ca57:	0f b6 c0             	movzbl %al,%eax
f011ca5a:	c1 e0 04             	shl    $0x4,%eax
f011ca5d:	89 c2                	mov    %eax,%edx
f011ca5f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011ca62:	01 d0                	add    %edx,%eax
f011ca64:	48                   	dec    %eax
f011ca65:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011ca68:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011ca6b:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca70:	f7 75 dc             	divl   -0x24(%ebp)
f011ca73:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011ca76:	29 d0                	sub    %edx,%eax
f011ca78:	01 d8                	add    %ebx,%eax
f011ca7a:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011ca7f:	39 c1                	cmp    %eax,%ecx
f011ca81:	74 17                	je     f011ca9a <test_kmalloc_firstfit1+0x11a>
f011ca83:	83 ec 04             	sub    $0x4,%esp
f011ca86:	68 94 b5 13 f0       	push   $0xf013b594
f011ca8b:	68 e6 02 00 00       	push   $0x2e6
f011ca90:	68 7a b1 13 f0       	push   $0xf013b17a
f011ca95:	e8 6b 37 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ca9a:	e8 07 73 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011ca9f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011caa2:	74 17                	je     f011cabb <test_kmalloc_firstfit1+0x13b>
f011caa4:	83 ec 04             	sub    $0x4,%esp
f011caa7:	68 94 b1 13 f0       	push   $0xf013b194
f011caac:	68 e7 02 00 00       	push   $0x2e7
f011cab1:	68 7a b1 13 f0       	push   $0xf013b17a
f011cab6:	e8 4a 37 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011cabb:	e8 23 03 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011cac0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cac3:	29 c2                	sub    %eax,%edx
f011cac5:	89 d0                	mov    %edx,%eax
f011cac7:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cacc:	74 17                	je     f011cae5 <test_kmalloc_firstfit1+0x165>
f011cace:	83 ec 04             	sub    $0x4,%esp
f011cad1:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011cad6:	68 e8 02 00 00       	push   $0x2e8
f011cadb:	68 7a b1 13 f0       	push   $0xf013b17a
f011cae0:	e8 20 37 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011cae5:	e8 f9 02 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011caea:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011caed:	e8 b4 72 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011caf2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(1*Mega-kilo);
f011caf5:	83 ec 0c             	sub    $0xc,%esp
f011caf8:	68 00 fc 0f 00       	push   $0xffc00
f011cafd:	e8 5f af fe ff       	call   f0107a61 <kmalloc>
f011cb02:	83 c4 10             	add    $0x10,%esp
f011cb05:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011cb0b:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011cb11:	89 c1                	mov    %eax,%ecx
f011cb13:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011cb1a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011cb1d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cb22:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011cb25:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011cb28:	ba 00 00 00 00       	mov    $0x0,%edx
f011cb2d:	f7 75 d4             	divl   -0x2c(%ebp)
f011cb30:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011cb33:	29 d0                	sub    %edx,%eax
f011cb35:	89 c3                	mov    %eax,%ebx
f011cb37:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011cb3e:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011cb43:	0f b6 d0             	movzbl %al,%edx
f011cb46:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011cb49:	01 d0                	add    %edx,%eax
f011cb4b:	48                   	dec    %eax
f011cb4c:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011cb4f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011cb52:	ba 00 00 00 00       	mov    $0x0,%edx
f011cb57:	f7 75 cc             	divl   -0x34(%ebp)
f011cb5a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011cb5d:	29 d0                	sub    %edx,%eax
f011cb5f:	01 c3                	add    %eax,%ebx
f011cb61:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011cb68:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011cb6d:	0f b6 c0             	movzbl %al,%eax
f011cb70:	c1 e0 04             	shl    $0x4,%eax
f011cb73:	89 c2                	mov    %eax,%edx
f011cb75:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011cb78:	01 d0                	add    %edx,%eax
f011cb7a:	48                   	dec    %eax
f011cb7b:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011cb7e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cb81:	ba 00 00 00 00       	mov    $0x0,%edx
f011cb86:	f7 75 c4             	divl   -0x3c(%ebp)
f011cb89:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cb8c:	29 d0                	sub    %edx,%eax
f011cb8e:	01 d8                	add    %ebx,%eax
f011cb90:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011cb95:	39 c1                	cmp    %eax,%ecx
f011cb97:	74 17                	je     f011cbb0 <test_kmalloc_firstfit1+0x230>
f011cb99:	83 ec 04             	sub    $0x4,%esp
f011cb9c:	68 94 b5 13 f0       	push   $0xf013b594
f011cba1:	68 ee 02 00 00       	push   $0x2ee
f011cba6:	68 7a b1 13 f0       	push   $0xf013b17a
f011cbab:	e8 55 36 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cbb0:	e8 f1 71 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011cbb5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cbb8:	74 17                	je     f011cbd1 <test_kmalloc_firstfit1+0x251>
f011cbba:	83 ec 04             	sub    $0x4,%esp
f011cbbd:	68 94 b1 13 f0       	push   $0xf013b194
f011cbc2:	68 ef 02 00 00       	push   $0x2ef
f011cbc7:	68 7a b1 13 f0       	push   $0xf013b17a
f011cbcc:	e8 34 36 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011cbd1:	e8 0d 02 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011cbd6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cbd9:	29 c2                	sub    %eax,%edx
f011cbdb:	89 d0                	mov    %edx,%eax
f011cbdd:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cbe2:	74 17                	je     f011cbfb <test_kmalloc_firstfit1+0x27b>
f011cbe4:	83 ec 04             	sub    $0x4,%esp
f011cbe7:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011cbec:	68 f0 02 00 00       	push   $0x2f0
f011cbf1:	68 7a b1 13 f0       	push   $0xf013b17a
f011cbf6:	e8 0a 36 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011cbfb:	e8 e3 01 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011cc00:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cc03:	e8 9e 71 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011cc08:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(1*Mega-kilo);
f011cc0b:	83 ec 0c             	sub    $0xc,%esp
f011cc0e:	68 00 fc 0f 00       	push   $0xffc00
f011cc13:	e8 49 ae fe ff       	call   f0107a61 <kmalloc>
f011cc18:	83 c4 10             	add    $0x10,%esp
f011cc1b:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011cc21:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011cc27:	89 c1                	mov    %eax,%ecx
f011cc29:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011cc30:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011cc33:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cc38:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011cc3b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011cc3e:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc43:	f7 75 bc             	divl   -0x44(%ebp)
f011cc46:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011cc49:	29 d0                	sub    %edx,%eax
f011cc4b:	89 c3                	mov    %eax,%ebx
f011cc4d:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011cc54:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011cc59:	0f b6 d0             	movzbl %al,%edx
f011cc5c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011cc5f:	01 d0                	add    %edx,%eax
f011cc61:	48                   	dec    %eax
f011cc62:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011cc65:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011cc68:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc6d:	f7 75 b4             	divl   -0x4c(%ebp)
f011cc70:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011cc73:	29 d0                	sub    %edx,%eax
f011cc75:	01 c3                	add    %eax,%ebx
f011cc77:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011cc7e:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011cc83:	0f b6 c0             	movzbl %al,%eax
f011cc86:	c1 e0 04             	shl    $0x4,%eax
f011cc89:	89 c2                	mov    %eax,%edx
f011cc8b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011cc8e:	01 d0                	add    %edx,%eax
f011cc90:	48                   	dec    %eax
f011cc91:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011cc94:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011cc97:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc9c:	f7 75 ac             	divl   -0x54(%ebp)
f011cc9f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011cca2:	29 d0                	sub    %edx,%eax
f011cca4:	01 d8                	add    %ebx,%eax
f011cca6:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011ccab:	39 c1                	cmp    %eax,%ecx
f011ccad:	74 17                	je     f011ccc6 <test_kmalloc_firstfit1+0x346>
f011ccaf:	83 ec 04             	sub    $0x4,%esp
f011ccb2:	68 94 b5 13 f0       	push   $0xf013b594
f011ccb7:	68 f6 02 00 00       	push   $0x2f6
f011ccbc:	68 7a b1 13 f0       	push   $0xf013b17a
f011ccc1:	e8 3f 35 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ccc6:	e8 db 70 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011cccb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ccce:	74 17                	je     f011cce7 <test_kmalloc_firstfit1+0x367>
f011ccd0:	83 ec 04             	sub    $0x4,%esp
f011ccd3:	68 94 b1 13 f0       	push   $0xf013b194
f011ccd8:	68 f7 02 00 00       	push   $0x2f7
f011ccdd:	68 7a b1 13 f0       	push   $0xf013b17a
f011cce2:	e8 1e 35 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011cce7:	e8 f7 00 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011ccec:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ccef:	29 c2                	sub    %eax,%edx
f011ccf1:	89 d0                	mov    %edx,%eax
f011ccf3:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ccf8:	74 17                	je     f011cd11 <test_kmalloc_firstfit1+0x391>
f011ccfa:	83 ec 04             	sub    $0x4,%esp
f011ccfd:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011cd02:	68 f8 02 00 00       	push   $0x2f8
f011cd07:	68 7a b1 13 f0       	push   $0xf013b17a
f011cd0c:	e8 f4 34 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011cd11:	e8 cd 00 ff ff       	call   f010cde3 <sys_calculate_free_frames>
f011cd16:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cd19:	e8 88 70 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011cd1e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(1*Mega-kilo);
f011cd21:	83 ec 0c             	sub    $0xc,%esp
f011cd24:	68 00 fc 0f 00       	push   $0xffc00
f011cd29:	e8 33 ad fe ff       	call   f0107a61 <kmalloc>
f011cd2e:	83 c4 10             	add    $0x10,%esp
f011cd31:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011cd37:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011cd3d:	89 c1                	mov    %eax,%ecx
f011cd3f:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011cd46:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011cd49:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cd4e:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011cd51:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011cd54:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd59:	f7 75 a4             	divl   -0x5c(%ebp)
f011cd5c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011cd5f:	29 d0                	sub    %edx,%eax
f011cd61:	89 c3                	mov    %eax,%ebx
f011cd63:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011cd6a:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011cd6f:	0f b6 d0             	movzbl %al,%edx
f011cd72:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011cd75:	01 d0                	add    %edx,%eax
f011cd77:	48                   	dec    %eax
f011cd78:	89 45 98             	mov    %eax,-0x68(%ebp)
f011cd7b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011cd7e:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd83:	f7 75 9c             	divl   -0x64(%ebp)
f011cd86:	8b 45 98             	mov    -0x68(%ebp),%eax
f011cd89:	29 d0                	sub    %edx,%eax
f011cd8b:	01 c3                	add    %eax,%ebx
f011cd8d:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011cd94:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011cd99:	0f b6 c0             	movzbl %al,%eax
f011cd9c:	c1 e0 04             	shl    $0x4,%eax
f011cd9f:	89 c2                	mov    %eax,%edx
f011cda1:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011cda4:	01 d0                	add    %edx,%eax
f011cda6:	48                   	dec    %eax
f011cda7:	89 45 90             	mov    %eax,-0x70(%ebp)
f011cdaa:	8b 45 90             	mov    -0x70(%ebp),%eax
f011cdad:	ba 00 00 00 00       	mov    $0x0,%edx
f011cdb2:	f7 75 94             	divl   -0x6c(%ebp)
f011cdb5:	8b 45 90             	mov    -0x70(%ebp),%eax
f011cdb8:	29 d0                	sub    %edx,%eax
f011cdba:	01 d8                	add    %ebx,%eax
f011cdbc:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011cdc1:	39 c1                	cmp    %eax,%ecx
f011cdc3:	74 17                	je     f011cddc <test_kmalloc_firstfit1+0x45c>
f011cdc5:	83 ec 04             	sub    $0x4,%esp
f011cdc8:	68 94 b5 13 f0       	push   $0xf013b594
f011cdcd:	68 fe 02 00 00       	push   $0x2fe
f011cdd2:	68 7a b1 13 f0       	push   $0xf013b17a
f011cdd7:	e8 29 34 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cddc:	e8 c5 6f fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011cde1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cde4:	74 17                	je     f011cdfd <test_kmalloc_firstfit1+0x47d>
f011cde6:	83 ec 04             	sub    $0x4,%esp
f011cde9:	68 94 b1 13 f0       	push   $0xf013b194
f011cdee:	68 ff 02 00 00       	push   $0x2ff
f011cdf3:	68 7a b1 13 f0       	push   $0xf013b17a
f011cdf8:	e8 08 34 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011cdfd:	e8 e1 ff fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011ce02:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ce05:	29 c2                	sub    %eax,%edx
f011ce07:	89 d0                	mov    %edx,%eax
f011ce09:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ce0e:	74 17                	je     f011ce27 <test_kmalloc_firstfit1+0x4a7>
f011ce10:	83 ec 04             	sub    $0x4,%esp
f011ce13:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011ce18:	68 00 03 00 00       	push   $0x300
f011ce1d:	68 7a b1 13 f0       	push   $0xf013b17a
f011ce22:	e8 de 33 fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011ce27:	e8 b7 ff fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011ce2c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ce2f:	e8 72 6f fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011ce34:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(2*Mega-kilo);
f011ce37:	83 ec 0c             	sub    $0xc,%esp
f011ce3a:	68 00 fc 1f 00       	push   $0x1ffc00
f011ce3f:	e8 1d ac fe ff       	call   f0107a61 <kmalloc>
f011ce44:	83 c4 10             	add    $0x10,%esp
f011ce47:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011ce4d:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011ce53:	89 c1                	mov    %eax,%ecx
f011ce55:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011ce5c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011ce5f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ce64:	89 45 88             	mov    %eax,-0x78(%ebp)
f011ce67:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ce6a:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce6f:	f7 75 8c             	divl   -0x74(%ebp)
f011ce72:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ce75:	29 d0                	sub    %edx,%eax
f011ce77:	89 c3                	mov    %eax,%ebx
f011ce79:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011ce80:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011ce85:	0f b6 d0             	movzbl %al,%edx
f011ce88:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011ce8b:	01 d0                	add    %edx,%eax
f011ce8d:	48                   	dec    %eax
f011ce8e:	89 45 80             	mov    %eax,-0x80(%ebp)
f011ce91:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ce94:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce99:	f7 75 84             	divl   -0x7c(%ebp)
f011ce9c:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ce9f:	29 d0                	sub    %edx,%eax
f011cea1:	01 c3                	add    %eax,%ebx
f011cea3:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011ceaa:	10 00 00 
f011cead:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011ceb2:	0f b6 c0             	movzbl %al,%eax
f011ceb5:	c1 e0 04             	shl    $0x4,%eax
f011ceb8:	89 c2                	mov    %eax,%edx
f011ceba:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011cec0:	01 d0                	add    %edx,%eax
f011cec2:	48                   	dec    %eax
f011cec3:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011cec9:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011cecf:	ba 00 00 00 00       	mov    $0x0,%edx
f011ced4:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011ceda:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011cee0:	29 d0                	sub    %edx,%eax
f011cee2:	01 d8                	add    %ebx,%eax
f011cee4:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011cee9:	39 c1                	cmp    %eax,%ecx
f011ceeb:	74 17                	je     f011cf04 <test_kmalloc_firstfit1+0x584>
f011ceed:	83 ec 04             	sub    $0x4,%esp
f011cef0:	68 94 b5 13 f0       	push   $0xf013b594
f011cef5:	68 06 03 00 00       	push   $0x306
f011cefa:	68 7a b1 13 f0       	push   $0xf013b17a
f011ceff:	e8 01 33 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cf04:	e8 9d 6e fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011cf09:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cf0c:	74 17                	je     f011cf25 <test_kmalloc_firstfit1+0x5a5>
f011cf0e:	83 ec 04             	sub    $0x4,%esp
f011cf11:	68 94 b1 13 f0       	push   $0xf013b194
f011cf16:	68 07 03 00 00       	push   $0x307
f011cf1b:	68 7a b1 13 f0       	push   $0xf013b17a
f011cf20:	e8 e0 32 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011cf25:	e8 b9 fe fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011cf2a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cf2d:	29 c2                	sub    %eax,%edx
f011cf2f:	89 d0                	mov    %edx,%eax
f011cf31:	3d 00 02 00 00       	cmp    $0x200,%eax
f011cf36:	74 17                	je     f011cf4f <test_kmalloc_firstfit1+0x5cf>
f011cf38:	83 ec 04             	sub    $0x4,%esp
f011cf3b:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011cf40:	68 08 03 00 00       	push   $0x308
f011cf45:	68 7a b1 13 f0       	push   $0xf013b17a
f011cf4a:	e8 b6 32 fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011cf4f:	e8 8f fe fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011cf54:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cf57:	e8 4a 6e fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011cf5c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(2*Mega-kilo);
f011cf5f:	83 ec 0c             	sub    $0xc,%esp
f011cf62:	68 00 fc 1f 00       	push   $0x1ffc00
f011cf67:	e8 f5 aa fe ff       	call   f0107a61 <kmalloc>
f011cf6c:	83 c4 10             	add    $0x10,%esp
f011cf6f:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011cf75:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011cf7b:	89 c1                	mov    %eax,%ecx
f011cf7d:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011cf84:	10 00 00 
f011cf87:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011cf8d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cf92:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011cf98:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011cf9e:	ba 00 00 00 00       	mov    $0x0,%edx
f011cfa3:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011cfa9:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011cfaf:	29 d0                	sub    %edx,%eax
f011cfb1:	89 c3                	mov    %eax,%ebx
f011cfb3:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011cfba:	10 00 00 
f011cfbd:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011cfc2:	0f b6 d0             	movzbl %al,%edx
f011cfc5:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011cfcb:	01 d0                	add    %edx,%eax
f011cfcd:	48                   	dec    %eax
f011cfce:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011cfd4:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011cfda:	ba 00 00 00 00       	mov    $0x0,%edx
f011cfdf:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011cfe5:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011cfeb:	29 d0                	sub    %edx,%eax
f011cfed:	01 c3                	add    %eax,%ebx
f011cfef:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011cff6:	10 00 00 
f011cff9:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011cffe:	0f b6 c0             	movzbl %al,%eax
f011d001:	c1 e0 04             	shl    $0x4,%eax
f011d004:	89 c2                	mov    %eax,%edx
f011d006:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011d00c:	01 d0                	add    %edx,%eax
f011d00e:	48                   	dec    %eax
f011d00f:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011d015:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d01b:	ba 00 00 00 00       	mov    $0x0,%edx
f011d020:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011d026:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d02c:	29 d0                	sub    %edx,%eax
f011d02e:	01 d8                	add    %ebx,%eax
f011d030:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011d035:	39 c1                	cmp    %eax,%ecx
f011d037:	74 17                	je     f011d050 <test_kmalloc_firstfit1+0x6d0>
f011d039:	83 ec 04             	sub    $0x4,%esp
f011d03c:	68 94 b5 13 f0       	push   $0xf013b594
f011d041:	68 0e 03 00 00       	push   $0x30e
f011d046:	68 7a b1 13 f0       	push   $0xf013b17a
f011d04b:	e8 b5 31 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d050:	e8 51 6d fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011d055:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d058:	74 17                	je     f011d071 <test_kmalloc_firstfit1+0x6f1>
f011d05a:	83 ec 04             	sub    $0x4,%esp
f011d05d:	68 94 b1 13 f0       	push   $0xf013b194
f011d062:	68 0f 03 00 00       	push   $0x30f
f011d067:	68 7a b1 13 f0       	push   $0xf013b17a
f011d06c:	e8 94 31 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d071:	e8 6d fd fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011d076:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d079:	29 c2                	sub    %eax,%edx
f011d07b:	89 d0                	mov    %edx,%eax
f011d07d:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d082:	74 17                	je     f011d09b <test_kmalloc_firstfit1+0x71b>
f011d084:	83 ec 04             	sub    $0x4,%esp
f011d087:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011d08c:	68 10 03 00 00       	push   $0x310
f011d091:	68 7a b1 13 f0       	push   $0xf013b17a
f011d096:	e8 6a 31 fe ff       	call   f0100205 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011d09b:	e8 43 fd fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011d0a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d0a3:	e8 fe 6c fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011d0a8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011d0ab:	83 ec 0c             	sub    $0xc,%esp
f011d0ae:	68 00 fc 2f 00       	push   $0x2ffc00
f011d0b3:	e8 a9 a9 fe ff       	call   f0107a61 <kmalloc>
f011d0b8:	83 c4 10             	add    $0x10,%esp
f011d0bb:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011d0c1:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011d0c7:	89 c1                	mov    %eax,%ecx
f011d0c9:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011d0d0:	10 00 00 
f011d0d3:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011d0d9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d0de:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011d0e4:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d0ea:	ba 00 00 00 00       	mov    $0x0,%edx
f011d0ef:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011d0f5:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d0fb:	29 d0                	sub    %edx,%eax
f011d0fd:	89 c3                	mov    %eax,%ebx
f011d0ff:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011d106:	10 00 00 
f011d109:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011d10e:	0f b6 d0             	movzbl %al,%edx
f011d111:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011d117:	01 d0                	add    %edx,%eax
f011d119:	48                   	dec    %eax
f011d11a:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011d120:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d126:	ba 00 00 00 00       	mov    $0x0,%edx
f011d12b:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011d131:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d137:	29 d0                	sub    %edx,%eax
f011d139:	01 c3                	add    %eax,%ebx
f011d13b:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011d142:	10 00 00 
f011d145:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011d14a:	0f b6 c0             	movzbl %al,%eax
f011d14d:	c1 e0 04             	shl    $0x4,%eax
f011d150:	89 c2                	mov    %eax,%edx
f011d152:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011d158:	01 d0                	add    %edx,%eax
f011d15a:	48                   	dec    %eax
f011d15b:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011d161:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d167:	ba 00 00 00 00       	mov    $0x0,%edx
f011d16c:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011d172:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d178:	29 d0                	sub    %edx,%eax
f011d17a:	01 d8                	add    %ebx,%eax
f011d17c:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011d181:	39 c1                	cmp    %eax,%ecx
f011d183:	74 17                	je     f011d19c <test_kmalloc_firstfit1+0x81c>
f011d185:	83 ec 04             	sub    $0x4,%esp
f011d188:	68 94 b5 13 f0       	push   $0xf013b594
f011d18d:	68 16 03 00 00       	push   $0x316
f011d192:	68 7a b1 13 f0       	push   $0xf013b17a
f011d197:	e8 69 30 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d19c:	e8 05 6c fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011d1a1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d1a4:	74 17                	je     f011d1bd <test_kmalloc_firstfit1+0x83d>
f011d1a6:	83 ec 04             	sub    $0x4,%esp
f011d1a9:	68 94 b1 13 f0       	push   $0xf013b194
f011d1ae:	68 17 03 00 00       	push   $0x317
f011d1b3:	68 7a b1 13 f0       	push   $0xf013b17a
f011d1b8:	e8 48 30 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011d1bd:	e8 21 fc fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011d1c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d1c5:	29 c2                	sub    %eax,%edx
f011d1c7:	89 d0                	mov    %edx,%eax
f011d1c9:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d1ce:	74 17                	je     f011d1e7 <test_kmalloc_firstfit1+0x867>
f011d1d0:	83 ec 04             	sub    $0x4,%esp
f011d1d3:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011d1d8:	68 18 03 00 00       	push   $0x318
f011d1dd:	68 7a b1 13 f0       	push   $0xf013b17a
f011d1e2:	e8 1e 30 fe ff       	call   f0100205 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011d1e7:	e8 f7 fb fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011d1ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d1ef:	e8 b2 6b fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011d1f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(3*Mega-kilo);
f011d1f7:	83 ec 0c             	sub    $0xc,%esp
f011d1fa:	68 00 fc 2f 00       	push   $0x2ffc00
f011d1ff:	e8 5d a8 fe ff       	call   f0107a61 <kmalloc>
f011d204:	83 c4 10             	add    $0x10,%esp
f011d207:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011d20d:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011d213:	89 c1                	mov    %eax,%ecx
f011d215:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011d21c:	10 00 00 
f011d21f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011d225:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d22a:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011d230:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d236:	ba 00 00 00 00       	mov    $0x0,%edx
f011d23b:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011d241:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d247:	29 d0                	sub    %edx,%eax
f011d249:	89 c3                	mov    %eax,%ebx
f011d24b:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011d252:	10 00 00 
f011d255:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011d25a:	0f b6 d0             	movzbl %al,%edx
f011d25d:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011d263:	01 d0                	add    %edx,%eax
f011d265:	48                   	dec    %eax
f011d266:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011d26c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d272:	ba 00 00 00 00       	mov    $0x0,%edx
f011d277:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011d27d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d283:	29 d0                	sub    %edx,%eax
f011d285:	01 c3                	add    %eax,%ebx
f011d287:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011d28e:	10 00 00 
f011d291:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011d296:	0f b6 c0             	movzbl %al,%eax
f011d299:	c1 e0 04             	shl    $0x4,%eax
f011d29c:	89 c2                	mov    %eax,%edx
f011d29e:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011d2a4:	01 d0                	add    %edx,%eax
f011d2a6:	48                   	dec    %eax
f011d2a7:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011d2ad:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d2b3:	ba 00 00 00 00       	mov    $0x0,%edx
f011d2b8:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011d2be:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d2c4:	29 d0                	sub    %edx,%eax
f011d2c6:	01 d8                	add    %ebx,%eax
f011d2c8:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011d2cd:	39 c1                	cmp    %eax,%ecx
f011d2cf:	74 17                	je     f011d2e8 <test_kmalloc_firstfit1+0x968>
f011d2d1:	83 ec 04             	sub    $0x4,%esp
f011d2d4:	68 94 b5 13 f0       	push   $0xf013b594
f011d2d9:	68 1e 03 00 00       	push   $0x31e
f011d2de:	68 7a b1 13 f0       	push   $0xf013b17a
f011d2e3:	e8 1d 2f fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d2e8:	e8 b9 6a fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011d2ed:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d2f0:	74 17                	je     f011d309 <test_kmalloc_firstfit1+0x989>
f011d2f2:	83 ec 04             	sub    $0x4,%esp
f011d2f5:	68 94 b1 13 f0       	push   $0xf013b194
f011d2fa:	68 1f 03 00 00       	push   $0x31f
f011d2ff:	68 7a b1 13 f0       	push   $0xf013b17a
f011d304:	e8 fc 2e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011d309:	e8 d5 fa fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011d30e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d311:	29 c2                	sub    %eax,%edx
f011d313:	89 d0                	mov    %edx,%eax
f011d315:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d31a:	74 17                	je     f011d333 <test_kmalloc_firstfit1+0x9b3>
f011d31c:	83 ec 04             	sub    $0x4,%esp
f011d31f:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011d324:	68 20 03 00 00       	push   $0x320
f011d329:	68 7a b1 13 f0       	push   $0xf013b17a
f011d32e:	e8 d2 2e fe ff       	call   f0100205 <_panic>
	}

	//[2] Free some to create holes
	{
		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d333:	e8 ab fa fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011d338:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d33b:	e8 66 6a fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011d340:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011d343:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011d349:	83 ec 0c             	sub    $0xc,%esp
f011d34c:	50                   	push   %eax
f011d34d:	e8 25 a8 fe ff       	call   f0107b77 <kfree>
f011d352:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d355:	e8 4c 6a fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011d35a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d35d:	74 17                	je     f011d376 <test_kmalloc_firstfit1+0x9f6>
f011d35f:	83 ec 04             	sub    $0x4,%esp
f011d362:	68 94 b1 13 f0       	push   $0xf013b194
f011d367:	68 29 03 00 00       	push   $0x329
f011d36c:	68 7a b1 13 f0       	push   $0xf013b17a
f011d371:	e8 8f 2e fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d376:	e8 68 fa fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011d37b:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d37e:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d383:	74 17                	je     f011d39c <test_kmalloc_firstfit1+0xa1c>
f011d385:	83 ec 04             	sub    $0x4,%esp
f011d388:	68 d7 b5 13 f0       	push   $0xf013b5d7
f011d38d:	68 2a 03 00 00       	push   $0x32a
f011d392:	68 7a b1 13 f0       	push   $0xf013b17a
f011d397:	e8 69 2e fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d39c:	e8 42 fa fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011d3a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d3a4:	e8 fd 69 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011d3a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011d3ac:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011d3b2:	83 ec 0c             	sub    $0xc,%esp
f011d3b5:	50                   	push   %eax
f011d3b6:	e8 bc a7 fe ff       	call   f0107b77 <kfree>
f011d3bb:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d3be:	e8 e3 69 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011d3c3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d3c6:	74 17                	je     f011d3df <test_kmalloc_firstfit1+0xa5f>
f011d3c8:	83 ec 04             	sub    $0x4,%esp
f011d3cb:	68 94 b1 13 f0       	push   $0xf013b194
f011d3d0:	68 30 03 00 00       	push   $0x330
f011d3d5:	68 7a b1 13 f0       	push   $0xf013b17a
f011d3da:	e8 26 2e fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011d3df:	e8 ff f9 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011d3e4:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d3e7:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d3ec:	74 17                	je     f011d405 <test_kmalloc_firstfit1+0xa85>
f011d3ee:	83 ec 04             	sub    $0x4,%esp
f011d3f1:	68 d7 b5 13 f0       	push   $0xf013b5d7
f011d3f6:	68 31 03 00 00       	push   $0x331
f011d3fb:	68 7a b1 13 f0       	push   $0xf013b17a
f011d400:	e8 00 2e fe ff       	call   f0100205 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d405:	e8 d9 f9 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011d40a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d40d:	e8 94 69 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011d412:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[6]);
f011d415:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011d41b:	83 ec 0c             	sub    $0xc,%esp
f011d41e:	50                   	push   %eax
f011d41f:	e8 53 a7 fe ff       	call   f0107b77 <kfree>
f011d424:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d427:	e8 7a 69 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011d42c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d42f:	74 17                	je     f011d448 <test_kmalloc_firstfit1+0xac8>
f011d431:	83 ec 04             	sub    $0x4,%esp
f011d434:	68 94 b1 13 f0       	push   $0xf013b194
f011d439:	68 37 03 00 00       	push   $0x337
f011d43e:	68 7a b1 13 f0       	push   $0xf013b17a
f011d443:	e8 bd 2d fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011d448:	e8 96 f9 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011d44d:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d450:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d455:	74 17                	je     f011d46e <test_kmalloc_firstfit1+0xaee>
f011d457:	83 ec 04             	sub    $0x4,%esp
f011d45a:	68 d7 b5 13 f0       	push   $0xf013b5d7
f011d45f:	68 38 03 00 00       	push   $0x338
f011d464:	68 7a b1 13 f0       	push   $0xf013b17a
f011d469:	e8 97 2d fe ff       	call   f0100205 <_panic>
	}

	//[3] Allocate again [test first fit]
	{
		//Allocate 512 KB - should be placed in 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011d46e:	e8 70 f9 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011d473:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d476:	e8 2b 69 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011d47b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo - kilo);
f011d47e:	83 ec 0c             	sub    $0xc,%esp
f011d481:	68 00 fc 07 00       	push   $0x7fc00
f011d486:	e8 d6 a5 fe ff       	call   f0107a61 <kmalloc>
f011d48b:	83 c4 10             	add    $0x10,%esp
f011d48e:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011d494:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011d49a:	89 c1                	mov    %eax,%ecx
f011d49c:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011d4a3:	10 00 00 
f011d4a6:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011d4ac:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d4b1:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011d4b7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d4bd:	ba 00 00 00 00       	mov    $0x0,%edx
f011d4c2:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011d4c8:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d4ce:	29 d0                	sub    %edx,%eax
f011d4d0:	89 c3                	mov    %eax,%ebx
f011d4d2:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011d4d9:	10 00 00 
f011d4dc:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011d4e1:	0f b6 d0             	movzbl %al,%edx
f011d4e4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011d4ea:	01 d0                	add    %edx,%eax
f011d4ec:	48                   	dec    %eax
f011d4ed:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011d4f3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d4f9:	ba 00 00 00 00       	mov    $0x0,%edx
f011d4fe:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011d504:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d50a:	29 d0                	sub    %edx,%eax
f011d50c:	01 c3                	add    %eax,%ebx
f011d50e:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011d515:	10 00 00 
f011d518:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011d51d:	0f b6 c0             	movzbl %al,%eax
f011d520:	c1 e0 04             	shl    $0x4,%eax
f011d523:	89 c2                	mov    %eax,%edx
f011d525:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011d52b:	01 d0                	add    %edx,%eax
f011d52d:	48                   	dec    %eax
f011d52e:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011d534:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d53a:	ba 00 00 00 00       	mov    $0x0,%edx
f011d53f:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011d545:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d54b:	29 d0                	sub    %edx,%eax
f011d54d:	01 d8                	add    %ebx,%eax
f011d54f:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011d554:	39 c1                	cmp    %eax,%ecx
f011d556:	74 17                	je     f011d56f <test_kmalloc_firstfit1+0xbef>
f011d558:	83 ec 04             	sub    $0x4,%esp
f011d55b:	68 94 b5 13 f0       	push   $0xf013b594
f011d560:	68 41 03 00 00       	push   $0x341
f011d565:	68 7a b1 13 f0       	push   $0xf013b17a
f011d56a:	e8 96 2c fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d56f:	e8 32 68 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011d574:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d577:	74 17                	je     f011d590 <test_kmalloc_firstfit1+0xc10>
f011d579:	83 ec 04             	sub    $0x4,%esp
f011d57c:	68 94 b1 13 f0       	push   $0xf013b194
f011d581:	68 42 03 00 00       	push   $0x342
f011d586:	68 7a b1 13 f0       	push   $0xf013b17a
f011d58b:	e8 75 2c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011d590:	e8 4e f8 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011d595:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d598:	29 c2                	sub    %eax,%edx
f011d59a:	89 d0                	mov    %edx,%eax
f011d59c:	3d 80 00 00 00       	cmp    $0x80,%eax
f011d5a1:	74 17                	je     f011d5ba <test_kmalloc_firstfit1+0xc3a>
f011d5a3:	83 ec 04             	sub    $0x4,%esp
f011d5a6:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011d5ab:	68 43 03 00 00       	push   $0x343
f011d5b0:	68 7a b1 13 f0       	push   $0xf013b17a
f011d5b5:	e8 4b 2c fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011d5ba:	e8 24 f8 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011d5bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d5c2:	e8 df 67 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011d5c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011d5ca:	83 ec 0c             	sub    $0xc,%esp
f011d5cd:	68 00 fc 0f 00       	push   $0xffc00
f011d5d2:	e8 8a a4 fe ff       	call   f0107a61 <kmalloc>
f011d5d7:	83 c4 10             	add    $0x10,%esp
f011d5da:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011d5e0:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011d5e6:	89 c1                	mov    %eax,%ecx
f011d5e8:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011d5ef:	10 00 00 
f011d5f2:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011d5f8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d5fd:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011d603:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d609:	ba 00 00 00 00       	mov    $0x0,%edx
f011d60e:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011d614:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d61a:	29 d0                	sub    %edx,%eax
f011d61c:	89 c3                	mov    %eax,%ebx
f011d61e:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011d625:	10 00 00 
f011d628:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011d62d:	0f b6 d0             	movzbl %al,%edx
f011d630:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011d636:	01 d0                	add    %edx,%eax
f011d638:	48                   	dec    %eax
f011d639:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011d63f:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011d645:	ba 00 00 00 00       	mov    $0x0,%edx
f011d64a:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011d650:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011d656:	29 d0                	sub    %edx,%eax
f011d658:	01 c3                	add    %eax,%ebx
f011d65a:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011d661:	10 00 00 
f011d664:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011d669:	0f b6 c0             	movzbl %al,%eax
f011d66c:	c1 e0 04             	shl    $0x4,%eax
f011d66f:	89 c2                	mov    %eax,%edx
f011d671:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011d677:	01 d0                	add    %edx,%eax
f011d679:	48                   	dec    %eax
f011d67a:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011d680:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011d686:	ba 00 00 00 00       	mov    $0x0,%edx
f011d68b:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011d691:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011d697:	29 d0                	sub    %edx,%eax
f011d699:	01 d8                	add    %ebx,%eax
f011d69b:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011d6a0:	39 c1                	cmp    %eax,%ecx
f011d6a2:	74 17                	je     f011d6bb <test_kmalloc_firstfit1+0xd3b>
f011d6a4:	83 ec 04             	sub    $0x4,%esp
f011d6a7:	68 94 b5 13 f0       	push   $0xf013b594
f011d6ac:	68 49 03 00 00       	push   $0x349
f011d6b1:	68 7a b1 13 f0       	push   $0xf013b17a
f011d6b6:	e8 4a 2b fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d6bb:	e8 e6 66 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011d6c0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d6c3:	74 17                	je     f011d6dc <test_kmalloc_firstfit1+0xd5c>
f011d6c5:	83 ec 04             	sub    $0x4,%esp
f011d6c8:	68 94 b1 13 f0       	push   $0xf013b194
f011d6cd:	68 4a 03 00 00       	push   $0x34a
f011d6d2:	68 7a b1 13 f0       	push   $0xf013b17a
f011d6d7:	e8 29 2b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d6dc:	e8 02 f7 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011d6e1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d6e4:	29 c2                	sub    %eax,%edx
f011d6e6:	89 d0                	mov    %edx,%eax
f011d6e8:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d6ed:	74 17                	je     f011d706 <test_kmalloc_firstfit1+0xd86>
f011d6ef:	83 ec 04             	sub    $0x4,%esp
f011d6f2:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011d6f7:	68 4b 03 00 00       	push   $0x34b
f011d6fc:	68 7a b1 13 f0       	push   $0xf013b17a
f011d701:	e8 ff 2a fe ff       	call   f0100205 <_panic>


		//Allocate 256 KB - should be placed in remaining of 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011d706:	e8 d8 f6 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011d70b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d70e:	e8 93 66 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011d713:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011d716:	83 ec 0c             	sub    $0xc,%esp
f011d719:	68 00 fc 03 00       	push   $0x3fc00
f011d71e:	e8 3e a3 fe ff       	call   f0107a61 <kmalloc>
f011d723:	83 c4 10             	add    $0x10,%esp
f011d726:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 1*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011d72c:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011d732:	89 c1                	mov    %eax,%ecx
f011d734:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011d73b:	10 00 00 
f011d73e:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011d744:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d749:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011d74f:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d755:	ba 00 00 00 00       	mov    $0x0,%edx
f011d75a:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011d760:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d766:	29 d0                	sub    %edx,%eax
f011d768:	89 c3                	mov    %eax,%ebx
f011d76a:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011d771:	10 00 00 
f011d774:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011d779:	0f b6 d0             	movzbl %al,%edx
f011d77c:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011d782:	01 d0                	add    %edx,%eax
f011d784:	48                   	dec    %eax
f011d785:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011d78b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d791:	ba 00 00 00 00       	mov    $0x0,%edx
f011d796:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011d79c:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d7a2:	29 d0                	sub    %edx,%eax
f011d7a4:	01 c3                	add    %eax,%ebx
f011d7a6:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011d7ad:	10 00 00 
f011d7b0:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011d7b5:	0f b6 c0             	movzbl %al,%eax
f011d7b8:	c1 e0 04             	shl    $0x4,%eax
f011d7bb:	89 c2                	mov    %eax,%edx
f011d7bd:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011d7c3:	01 d0                	add    %edx,%eax
f011d7c5:	48                   	dec    %eax
f011d7c6:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011d7cc:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011d7d2:	ba 00 00 00 00       	mov    $0x0,%edx
f011d7d7:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011d7dd:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011d7e3:	29 d0                	sub    %edx,%eax
f011d7e5:	01 d8                	add    %ebx,%eax
f011d7e7:	2d 00 c0 e7 09       	sub    $0x9e7c000,%eax
f011d7ec:	39 c1                	cmp    %eax,%ecx
f011d7ee:	74 17                	je     f011d807 <test_kmalloc_firstfit1+0xe87>
f011d7f0:	83 ec 04             	sub    $0x4,%esp
f011d7f3:	68 94 b5 13 f0       	push   $0xf013b594
f011d7f8:	68 52 03 00 00       	push   $0x352
f011d7fd:	68 7a b1 13 f0       	push   $0xf013b17a
f011d802:	e8 fe 29 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d807:	e8 9a 65 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011d80c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d80f:	74 17                	je     f011d828 <test_kmalloc_firstfit1+0xea8>
f011d811:	83 ec 04             	sub    $0x4,%esp
f011d814:	68 94 b1 13 f0       	push   $0xf013b194
f011d819:	68 53 03 00 00       	push   $0x353
f011d81e:	68 7a b1 13 f0       	push   $0xf013b17a
f011d823:	e8 dd 29 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011d828:	e8 b6 f5 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011d82d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d830:	29 c2                	sub    %eax,%edx
f011d832:	89 d0                	mov    %edx,%eax
f011d834:	83 f8 40             	cmp    $0x40,%eax
f011d837:	74 17                	je     f011d850 <test_kmalloc_firstfit1+0xed0>
f011d839:	83 ec 04             	sub    $0x4,%esp
f011d83c:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011d841:	68 54 03 00 00       	push   $0x354
f011d846:	68 7a b1 13 f0       	push   $0xf013b17a
f011d84b:	e8 b5 29 fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011d850:	e8 8e f5 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011d855:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d858:	e8 49 65 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011d85d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(2*Mega);
f011d860:	83 ec 0c             	sub    $0xc,%esp
f011d863:	68 00 00 20 00       	push   $0x200000
f011d868:	e8 f4 a1 fe ff       	call   f0107a61 <kmalloc>
f011d86d:	83 c4 10             	add    $0x10,%esp
f011d870:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011d876:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011d87c:	89 c1                	mov    %eax,%ecx
f011d87e:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011d885:	10 00 00 
f011d888:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011d88e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d893:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011d899:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011d89f:	ba 00 00 00 00       	mov    $0x0,%edx
f011d8a4:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011d8aa:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011d8b0:	29 d0                	sub    %edx,%eax
f011d8b2:	89 c3                	mov    %eax,%ebx
f011d8b4:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011d8bb:	10 00 00 
f011d8be:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011d8c3:	0f b6 d0             	movzbl %al,%edx
f011d8c6:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011d8cc:	01 d0                	add    %edx,%eax
f011d8ce:	48                   	dec    %eax
f011d8cf:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011d8d5:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011d8db:	ba 00 00 00 00       	mov    $0x0,%edx
f011d8e0:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011d8e6:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011d8ec:	29 d0                	sub    %edx,%eax
f011d8ee:	01 c3                	add    %eax,%ebx
f011d8f0:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011d8f7:	10 00 00 
f011d8fa:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011d8ff:	0f b6 c0             	movzbl %al,%eax
f011d902:	c1 e0 04             	shl    $0x4,%eax
f011d905:	89 c2                	mov    %eax,%edx
f011d907:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011d90d:	01 d0                	add    %edx,%eax
f011d90f:	48                   	dec    %eax
f011d910:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011d916:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011d91c:	ba 00 00 00 00       	mov    $0x0,%edx
f011d921:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011d927:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011d92d:	29 d0                	sub    %edx,%eax
f011d92f:	01 d8                	add    %ebx,%eax
f011d931:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011d936:	39 c1                	cmp    %eax,%ecx
f011d938:	74 17                	je     f011d951 <test_kmalloc_firstfit1+0xfd1>
f011d93a:	83 ec 04             	sub    $0x4,%esp
f011d93d:	68 94 b5 13 f0       	push   $0xf013b594
f011d942:	68 5a 03 00 00       	push   $0x35a
f011d947:	68 7a b1 13 f0       	push   $0xf013b17a
f011d94c:	e8 b4 28 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d951:	e8 8d f4 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011d956:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d959:	29 c2                	sub    %eax,%edx
f011d95b:	89 d0                	mov    %edx,%eax
f011d95d:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d962:	74 17                	je     f011d97b <test_kmalloc_firstfit1+0xffb>
f011d964:	83 ec 04             	sub    $0x4,%esp
f011d967:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011d96c:	68 5b 03 00 00       	push   $0x35b
f011d971:	68 7a b1 13 f0       	push   $0xf013b17a
f011d976:	e8 8a 28 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d97b:	e8 26 64 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011d980:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d983:	74 17                	je     f011d99c <test_kmalloc_firstfit1+0x101c>
f011d985:	83 ec 04             	sub    $0x4,%esp
f011d988:	68 94 b1 13 f0       	push   $0xf013b194
f011d98d:	68 5c 03 00 00       	push   $0x35c
f011d992:	68 7a b1 13 f0       	push   $0xf013b17a
f011d997:	e8 69 28 fe ff       	call   f0100205 <_panic>


		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011d99c:	e8 42 f4 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011d9a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d9a4:	e8 fd 63 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011d9a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(4*Mega - kilo);
f011d9ac:	83 ec 0c             	sub    $0xc,%esp
f011d9af:	68 00 fc 3f 00       	push   $0x3ffc00
f011d9b4:	e8 a8 a0 fe ff       	call   f0107a61 <kmalloc>
f011d9b9:	83 c4 10             	add    $0x10,%esp
f011d9bc:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011d9c2:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011d9c8:	89 c1                	mov    %eax,%ecx
f011d9ca:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011d9d1:	10 00 00 
f011d9d4:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011d9da:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d9df:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011d9e5:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011d9eb:	ba 00 00 00 00       	mov    $0x0,%edx
f011d9f0:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011d9f6:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011d9fc:	29 d0                	sub    %edx,%eax
f011d9fe:	89 c3                	mov    %eax,%ebx
f011da00:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011da07:	10 00 00 
f011da0a:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011da0f:	0f b6 d0             	movzbl %al,%edx
f011da12:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011da18:	01 d0                	add    %edx,%eax
f011da1a:	48                   	dec    %eax
f011da1b:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011da21:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011da27:	ba 00 00 00 00       	mov    $0x0,%edx
f011da2c:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011da32:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011da38:	29 d0                	sub    %edx,%eax
f011da3a:	01 c3                	add    %eax,%ebx
f011da3c:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011da43:	10 00 00 
f011da46:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011da4b:	0f b6 c0             	movzbl %al,%eax
f011da4e:	c1 e0 04             	shl    $0x4,%eax
f011da51:	89 c2                	mov    %eax,%edx
f011da53:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011da59:	01 d0                	add    %edx,%eax
f011da5b:	48                   	dec    %eax
f011da5c:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011da62:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011da68:	ba 00 00 00 00       	mov    $0x0,%edx
f011da6d:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011da73:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011da79:	29 d0                	sub    %edx,%eax
f011da7b:	01 d8                	add    %ebx,%eax
f011da7d:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011da82:	39 c1                	cmp    %eax,%ecx
f011da84:	74 17                	je     f011da9d <test_kmalloc_firstfit1+0x111d>
f011da86:	83 ec 04             	sub    $0x4,%esp
f011da89:	68 94 b5 13 f0       	push   $0xf013b594
f011da8e:	68 63 03 00 00       	push   $0x363
f011da93:	68 7a b1 13 f0       	push   $0xf013b17a
f011da98:	e8 68 27 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011da9d:	e8 04 63 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011daa2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011daa5:	74 17                	je     f011dabe <test_kmalloc_firstfit1+0x113e>
f011daa7:	83 ec 04             	sub    $0x4,%esp
f011daaa:	68 94 b1 13 f0       	push   $0xf013b194
f011daaf:	68 64 03 00 00       	push   $0x364
f011dab4:	68 7a b1 13 f0       	push   $0xf013b17a
f011dab9:	e8 47 27 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011dabe:	e8 20 f3 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011dac3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011dac6:	29 c2                	sub    %eax,%edx
f011dac8:	89 d0                	mov    %edx,%eax
f011daca:	3d 00 04 00 00       	cmp    $0x400,%eax
f011dacf:	74 17                	je     f011dae8 <test_kmalloc_firstfit1+0x1168>
f011dad1:	83 ec 04             	sub    $0x4,%esp
f011dad4:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011dad9:	68 65 03 00 00       	push   $0x365
f011dade:	68 7a b1 13 f0       	push   $0xf013b17a
f011dae3:	e8 1d 27 fe ff       	call   f0100205 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1 MB Hole appended to previous 256 KB hole
		freeFrames = sys_calculate_free_frames() ;
f011dae8:	e8 f6 f2 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011daed:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011daf0:	e8 b1 62 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011daf5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[2]);
f011daf8:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011dafe:	83 ec 0c             	sub    $0xc,%esp
f011db01:	50                   	push   %eax
f011db02:	e8 70 a0 fe ff       	call   f0107b77 <kfree>
f011db07:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011db0a:	e8 97 62 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011db0f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011db12:	74 17                	je     f011db2b <test_kmalloc_firstfit1+0x11ab>
f011db14:	83 ec 04             	sub    $0x4,%esp
f011db17:	68 94 b1 13 f0       	push   $0xf013b194
f011db1c:	68 6e 03 00 00       	push   $0x36e
f011db21:	68 7a b1 13 f0       	push   $0xf013b17a
f011db26:	e8 da 26 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011db2b:	e8 b3 f2 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011db30:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011db33:	3d 00 01 00 00       	cmp    $0x100,%eax
f011db38:	74 17                	je     f011db51 <test_kmalloc_firstfit1+0x11d1>
f011db3a:	83 ec 04             	sub    $0x4,%esp
f011db3d:	68 d7 b5 13 f0       	push   $0xf013b5d7
f011db42:	68 6f 03 00 00       	push   $0x36f
f011db47:	68 7a b1 13 f0       	push   $0xf013b17a
f011db4c:	e8 b4 26 fe ff       	call   f0100205 <_panic>

		//Next 1 MB Hole appended also
		freeFrames = sys_calculate_free_frames() ;
f011db51:	e8 8d f2 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011db56:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011db59:	e8 48 62 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011db5e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011db61:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011db67:	83 ec 0c             	sub    $0xc,%esp
f011db6a:	50                   	push   %eax
f011db6b:	e8 07 a0 fe ff       	call   f0107b77 <kfree>
f011db70:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011db73:	e8 2e 62 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011db78:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011db7b:	74 17                	je     f011db94 <test_kmalloc_firstfit1+0x1214>
f011db7d:	83 ec 04             	sub    $0x4,%esp
f011db80:	68 94 b1 13 f0       	push   $0xf013b194
f011db85:	68 75 03 00 00       	push   $0x375
f011db8a:	68 7a b1 13 f0       	push   $0xf013b17a
f011db8f:	e8 71 26 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011db94:	e8 4a f2 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011db99:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011db9c:	3d 00 01 00 00       	cmp    $0x100,%eax
f011dba1:	74 17                	je     f011dbba <test_kmalloc_firstfit1+0x123a>
f011dba3:	83 ec 04             	sub    $0x4,%esp
f011dba6:	68 d7 b5 13 f0       	push   $0xf013b5d7
f011dbab:	68 76 03 00 00       	push   $0x376
f011dbb0:	68 7a b1 13 f0       	push   $0xf013b17a
f011dbb5:	e8 4b 26 fe ff       	call   f0100205 <_panic>

	//[5] Allocate again [test first fit]
	{
		//[FIRST FIT Case]
		//Allocate 1 MB - should be placed in the contiguous hole (256 KB + 2 MB)
		freeFrames = sys_calculate_free_frames() ;
f011dbba:	e8 24 f2 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011dbbf:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dbc2:	e8 df 61 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011dbc7:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[13] = kmalloc(1*Mega);
f011dbca:	83 ec 0c             	sub    $0xc,%esp
f011dbcd:	68 00 00 10 00       	push   $0x100000
f011dbd2:	e8 8a 9e fe ff       	call   f0107a61 <kmalloc>
f011dbd7:	83 c4 10             	add    $0x10,%esp
f011dbda:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 1*Mega + 768*kilo)) panic("Wrong start address for the allocated space... ");
f011dbe0:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011dbe6:	89 c1                	mov    %eax,%ecx
f011dbe8:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011dbef:	10 00 00 
f011dbf2:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011dbf8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dbfd:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011dc03:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011dc09:	ba 00 00 00 00       	mov    $0x0,%edx
f011dc0e:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011dc14:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011dc1a:	29 d0                	sub    %edx,%eax
f011dc1c:	89 c3                	mov    %eax,%ebx
f011dc1e:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011dc25:	10 00 00 
f011dc28:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011dc2d:	0f b6 d0             	movzbl %al,%edx
f011dc30:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011dc36:	01 d0                	add    %edx,%eax
f011dc38:	48                   	dec    %eax
f011dc39:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011dc3f:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011dc45:	ba 00 00 00 00       	mov    $0x0,%edx
f011dc4a:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011dc50:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011dc56:	29 d0                	sub    %edx,%eax
f011dc58:	01 c3                	add    %eax,%ebx
f011dc5a:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011dc61:	10 00 00 
f011dc64:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011dc69:	0f b6 c0             	movzbl %al,%eax
f011dc6c:	c1 e0 04             	shl    $0x4,%eax
f011dc6f:	89 c2                	mov    %eax,%edx
f011dc71:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011dc77:	01 d0                	add    %edx,%eax
f011dc79:	48                   	dec    %eax
f011dc7a:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011dc80:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011dc86:	ba 00 00 00 00       	mov    $0x0,%edx
f011dc8b:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011dc91:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011dc97:	29 d0                	sub    %edx,%eax
f011dc99:	01 d8                	add    %ebx,%eax
f011dc9b:	2d 00 c0 e3 09       	sub    $0x9e3c000,%eax
f011dca0:	39 c1                	cmp    %eax,%ecx
f011dca2:	74 17                	je     f011dcbb <test_kmalloc_firstfit1+0x133b>
f011dca4:	83 ec 04             	sub    $0x4,%esp
f011dca7:	68 94 b5 13 f0       	push   $0xf013b594
f011dcac:	68 80 03 00 00       	push   $0x380
f011dcb1:	68 7a b1 13 f0       	push   $0xf013b17a
f011dcb6:	e8 4a 25 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dcbb:	e8 e6 60 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011dcc0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011dcc3:	74 17                	je     f011dcdc <test_kmalloc_firstfit1+0x135c>
f011dcc5:	83 ec 04             	sub    $0x4,%esp
f011dcc8:	68 94 b1 13 f0       	push   $0xf013b194
f011dccd:	68 81 03 00 00       	push   $0x381
f011dcd2:	68 7a b1 13 f0       	push   $0xf013b17a
f011dcd7:	e8 29 25 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011dcdc:	e8 02 f1 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011dce1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011dce4:	29 c2                	sub    %eax,%edx
f011dce6:	89 d0                	mov    %edx,%eax
f011dce8:	3d 00 01 00 00       	cmp    $0x100,%eax
f011dced:	74 17                	je     f011dd06 <test_kmalloc_firstfit1+0x1386>
f011dcef:	83 ec 04             	sub    $0x4,%esp
f011dcf2:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011dcf7:	68 82 03 00 00       	push   $0x382
f011dcfc:	68 7a b1 13 f0       	push   $0xf013b17a
f011dd01:	e8 ff 24 fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test FIRST FIT allocation (1) completed successfully.\n");
f011dd06:	83 ec 0c             	sub    $0xc,%esp
f011dd09:	68 70 b7 13 f0       	push   $0xf013b770
f011dd0e:	e8 fb 2f fe ff       	call   f0100d0e <cprintf>
f011dd13:	83 c4 10             	add    $0x10,%esp

	return 1;
f011dd16:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011dd1b:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011dd1e:	5b                   	pop    %ebx
f011dd1f:	5f                   	pop    %edi
f011dd20:	5d                   	pop    %ebp
f011dd21:	c3                   	ret    

f011dd22 <test_kmalloc_firstfit2>:

int test_kmalloc_firstfit2()
{
f011dd22:	55                   	push   %ebp
f011dd23:	89 e5                	mov    %esp,%ebp
f011dd25:	57                   	push   %edi
f011dd26:	53                   	push   %ebx
f011dd27:	81 ec 60 01 00 00    	sub    $0x160,%esp
	cprintf("==============================================\n");
f011dd2d:	83 ec 0c             	sub    $0xc,%esp
f011dd30:	68 bc b0 13 f0       	push   $0xf013b0bc
f011dd35:	e8 d4 2f fe ff       	call   f0100d0e <cprintf>
f011dd3a:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011dd3d:	83 ec 0c             	sub    $0xc,%esp
f011dd40:	68 ec b0 13 f0       	push   $0xf013b0ec
f011dd45:	e8 c4 2f fe ff       	call   f0100d0e <cprintf>
f011dd4a:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011dd4d:	83 ec 0c             	sub    $0xc,%esp
f011dd50:	68 bc b0 13 f0       	push   $0xf013b0bc
f011dd55:	e8 b4 2f fe ff       	call   f0100d0e <cprintf>
f011dd5a:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011dd5d:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f011dd63:	b9 14 00 00 00       	mov    $0x14,%ecx
f011dd68:	b8 00 00 00 00       	mov    $0x0,%eax
f011dd6d:	89 d7                	mov    %edx,%edi
f011dd6f:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011dd71:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011dd78:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011dd7b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dd80:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011dd83:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011dd86:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd8b:	f7 75 f4             	divl   -0xc(%ebp)
f011dd8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011dd91:	29 d0                	sub    %edx,%eax
f011dd93:	89 c1                	mov    %eax,%ecx
f011dd95:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011dd9c:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011dda1:	0f b6 d0             	movzbl %al,%edx
f011dda4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011dda7:	01 d0                	add    %edx,%eax
f011dda9:	48                   	dec    %eax
f011ddaa:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011ddad:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011ddb0:	ba 00 00 00 00       	mov    $0x0,%edx
f011ddb5:	f7 75 ec             	divl   -0x14(%ebp)
f011ddb8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011ddbb:	29 d0                	sub    %edx,%eax
f011ddbd:	01 c1                	add    %eax,%ecx
f011ddbf:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011ddc6:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011ddcb:	0f b6 c0             	movzbl %al,%eax
f011ddce:	c1 e0 04             	shl    $0x4,%eax
f011ddd1:	89 c2                	mov    %eax,%edx
f011ddd3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011ddd6:	01 d0                	add    %edx,%eax
f011ddd8:	48                   	dec    %eax
f011ddd9:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011dddc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011dddf:	ba 00 00 00 00       	mov    $0x0,%edx
f011dde4:	f7 75 e4             	divl   -0x1c(%ebp)
f011dde7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ddea:	29 d0                	sub    %edx,%eax
f011ddec:	01 c8                	add    %ecx,%eax
f011ddee:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011ddf3:	29 c2                	sub    %eax,%edx
f011ddf5:	89 d0                	mov    %edx,%eax
f011ddf7:	83 ec 0c             	sub    $0xc,%esp
f011ddfa:	50                   	push   %eax
f011ddfb:	e8 61 9c fe ff       	call   f0107a61 <kmalloc>
f011de00:	83 c4 10             	add    $0x10,%esp
f011de03:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if (ptr_allocations[0] != NULL) panic("kmalloc: Attempt to allocate more than heap size, should return NULL");
f011de09:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011de0f:	85 c0                	test   %eax,%eax
f011de11:	74 17                	je     f011de2a <test_kmalloc_firstfit2+0x108>
f011de13:	83 ec 04             	sub    $0x4,%esp
f011de16:	68 bc b7 13 f0       	push   $0xf013b7bc
f011de1b:	68 97 03 00 00       	push   $0x397
f011de20:	68 7a b1 13 f0       	push   $0xf013b17a
f011de25:	e8 db 23 fe ff       	call   f0100205 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011de2a:	e8 b4 ef fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011de2f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011de32:	e8 6f 5f fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011de37:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011de3a:	83 ec 0c             	sub    $0xc,%esp
f011de3d:	68 00 fc 1f 00       	push   $0x1ffc00
f011de42:	e8 1a 9c fe ff       	call   f0107a61 <kmalloc>
f011de47:	83 c4 10             	add    $0x10,%esp
f011de4a:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011de50:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011de56:	89 c1                	mov    %eax,%ecx
f011de58:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011de5f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011de62:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011de67:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011de6a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011de6d:	ba 00 00 00 00       	mov    $0x0,%edx
f011de72:	f7 75 d4             	divl   -0x2c(%ebp)
f011de75:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011de78:	29 d0                	sub    %edx,%eax
f011de7a:	89 c3                	mov    %eax,%ebx
f011de7c:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011de83:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011de88:	0f b6 d0             	movzbl %al,%edx
f011de8b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011de8e:	01 d0                	add    %edx,%eax
f011de90:	48                   	dec    %eax
f011de91:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011de94:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011de97:	ba 00 00 00 00       	mov    $0x0,%edx
f011de9c:	f7 75 cc             	divl   -0x34(%ebp)
f011de9f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011dea2:	29 d0                	sub    %edx,%eax
f011dea4:	01 c3                	add    %eax,%ebx
f011dea6:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011dead:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011deb2:	0f b6 c0             	movzbl %al,%eax
f011deb5:	c1 e0 04             	shl    $0x4,%eax
f011deb8:	89 c2                	mov    %eax,%edx
f011deba:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011debd:	01 d0                	add    %edx,%eax
f011debf:	48                   	dec    %eax
f011dec0:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011dec3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011dec6:	ba 00 00 00 00       	mov    $0x0,%edx
f011decb:	f7 75 c4             	divl   -0x3c(%ebp)
f011dece:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011ded1:	29 d0                	sub    %edx,%eax
f011ded3:	01 d8                	add    %ebx,%eax
f011ded5:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011deda:	39 c1                	cmp    %eax,%ecx
f011dedc:	74 17                	je     f011def5 <test_kmalloc_firstfit2+0x1d3>
f011dede:	83 ec 04             	sub    $0x4,%esp
f011dee1:	68 94 b5 13 f0       	push   $0xf013b594
f011dee6:	68 a1 03 00 00       	push   $0x3a1
f011deeb:	68 7a b1 13 f0       	push   $0xf013b17a
f011def0:	e8 10 23 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011def5:	e8 ac 5e fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011defa:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011defd:	74 17                	je     f011df16 <test_kmalloc_firstfit2+0x1f4>
f011deff:	83 ec 04             	sub    $0x4,%esp
f011df02:	68 94 b1 13 f0       	push   $0xf013b194
f011df07:	68 a2 03 00 00       	push   $0x3a2
f011df0c:	68 7a b1 13 f0       	push   $0xf013b17a
f011df11:	e8 ef 22 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011df16:	e8 c8 ee fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011df1b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011df1e:	29 c2                	sub    %eax,%edx
f011df20:	89 d0                	mov    %edx,%eax
f011df22:	3d 00 02 00 00       	cmp    $0x200,%eax
f011df27:	74 17                	je     f011df40 <test_kmalloc_firstfit2+0x21e>
f011df29:	83 ec 04             	sub    $0x4,%esp
f011df2c:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011df31:	68 a3 03 00 00       	push   $0x3a3
f011df36:	68 7a b1 13 f0       	push   $0xf013b17a
f011df3b:	e8 c5 22 fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011df40:	e8 9e ee fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011df45:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011df48:	e8 59 5e fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011df4d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011df50:	83 ec 0c             	sub    $0xc,%esp
f011df53:	68 00 fc 1f 00       	push   $0x1ffc00
f011df58:	e8 04 9b fe ff       	call   f0107a61 <kmalloc>
f011df5d:	83 c4 10             	add    $0x10,%esp
f011df60:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011df66:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011df6c:	89 c1                	mov    %eax,%ecx
f011df6e:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011df75:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011df78:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011df7d:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011df80:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011df83:	ba 00 00 00 00       	mov    $0x0,%edx
f011df88:	f7 75 bc             	divl   -0x44(%ebp)
f011df8b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011df8e:	29 d0                	sub    %edx,%eax
f011df90:	89 c3                	mov    %eax,%ebx
f011df92:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011df99:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011df9e:	0f b6 d0             	movzbl %al,%edx
f011dfa1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011dfa4:	01 d0                	add    %edx,%eax
f011dfa6:	48                   	dec    %eax
f011dfa7:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011dfaa:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011dfad:	ba 00 00 00 00       	mov    $0x0,%edx
f011dfb2:	f7 75 b4             	divl   -0x4c(%ebp)
f011dfb5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011dfb8:	29 d0                	sub    %edx,%eax
f011dfba:	01 c3                	add    %eax,%ebx
f011dfbc:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011dfc3:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011dfc8:	0f b6 c0             	movzbl %al,%eax
f011dfcb:	c1 e0 04             	shl    $0x4,%eax
f011dfce:	89 c2                	mov    %eax,%edx
f011dfd0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011dfd3:	01 d0                	add    %edx,%eax
f011dfd5:	48                   	dec    %eax
f011dfd6:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011dfd9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011dfdc:	ba 00 00 00 00       	mov    $0x0,%edx
f011dfe1:	f7 75 ac             	divl   -0x54(%ebp)
f011dfe4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011dfe7:	29 d0                	sub    %edx,%eax
f011dfe9:	01 d8                	add    %ebx,%eax
f011dfeb:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011dff0:	39 c1                	cmp    %eax,%ecx
f011dff2:	74 17                	je     f011e00b <test_kmalloc_firstfit2+0x2e9>
f011dff4:	83 ec 04             	sub    $0x4,%esp
f011dff7:	68 94 b5 13 f0       	push   $0xf013b594
f011dffc:	68 a9 03 00 00       	push   $0x3a9
f011e001:	68 7a b1 13 f0       	push   $0xf013b17a
f011e006:	e8 fa 21 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e00b:	e8 96 5d fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011e010:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e013:	74 17                	je     f011e02c <test_kmalloc_firstfit2+0x30a>
f011e015:	83 ec 04             	sub    $0x4,%esp
f011e018:	68 94 b1 13 f0       	push   $0xf013b194
f011e01d:	68 aa 03 00 00       	push   $0x3aa
f011e022:	68 7a b1 13 f0       	push   $0xf013b17a
f011e027:	e8 d9 21 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011e02c:	e8 b2 ed fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011e031:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e034:	29 c2                	sub    %eax,%edx
f011e036:	89 d0                	mov    %edx,%eax
f011e038:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e03d:	74 17                	je     f011e056 <test_kmalloc_firstfit2+0x334>
f011e03f:	83 ec 04             	sub    $0x4,%esp
f011e042:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011e047:	68 ab 03 00 00       	push   $0x3ab
f011e04c:	68 7a b1 13 f0       	push   $0xf013b17a
f011e051:	e8 af 21 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011e056:	e8 88 ed fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011e05b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e05e:	e8 43 5d fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011e063:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011e066:	83 ec 0c             	sub    $0xc,%esp
f011e069:	68 00 08 00 00       	push   $0x800
f011e06e:	e8 ee 99 fe ff       	call   f0107a61 <kmalloc>
f011e073:	83 c4 10             	add    $0x10,%esp
f011e076:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] < (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011e07c:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011e082:	89 c1                	mov    %eax,%ecx
f011e084:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011e08b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011e08e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e093:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011e096:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e099:	ba 00 00 00 00       	mov    $0x0,%edx
f011e09e:	f7 75 a4             	divl   -0x5c(%ebp)
f011e0a1:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e0a4:	29 d0                	sub    %edx,%eax
f011e0a6:	89 c3                	mov    %eax,%ebx
f011e0a8:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011e0af:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011e0b4:	0f b6 d0             	movzbl %al,%edx
f011e0b7:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011e0ba:	01 d0                	add    %edx,%eax
f011e0bc:	48                   	dec    %eax
f011e0bd:	89 45 98             	mov    %eax,-0x68(%ebp)
f011e0c0:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e0c3:	ba 00 00 00 00       	mov    $0x0,%edx
f011e0c8:	f7 75 9c             	divl   -0x64(%ebp)
f011e0cb:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e0ce:	29 d0                	sub    %edx,%eax
f011e0d0:	01 c3                	add    %eax,%ebx
f011e0d2:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011e0d9:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011e0de:	0f b6 c0             	movzbl %al,%eax
f011e0e1:	c1 e0 04             	shl    $0x4,%eax
f011e0e4:	89 c2                	mov    %eax,%edx
f011e0e6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011e0e9:	01 d0                	add    %edx,%eax
f011e0eb:	48                   	dec    %eax
f011e0ec:	89 45 90             	mov    %eax,-0x70(%ebp)
f011e0ef:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e0f2:	ba 00 00 00 00       	mov    $0x0,%edx
f011e0f7:	f7 75 94             	divl   -0x6c(%ebp)
f011e0fa:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e0fd:	29 d0                	sub    %edx,%eax
f011e0ff:	01 d8                	add    %ebx,%eax
f011e101:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011e106:	39 c1                	cmp    %eax,%ecx
f011e108:	73 17                	jae    f011e121 <test_kmalloc_firstfit2+0x3ff>
f011e10a:	83 ec 04             	sub    $0x4,%esp
f011e10d:	68 94 b5 13 f0       	push   $0xf013b594
f011e112:	68 b1 03 00 00       	push   $0x3b1
f011e117:	68 7a b1 13 f0       	push   $0xf013b17a
f011e11c:	e8 e4 20 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e121:	e8 80 5c fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011e126:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e129:	74 17                	je     f011e142 <test_kmalloc_firstfit2+0x420>
f011e12b:	83 ec 04             	sub    $0x4,%esp
f011e12e:	68 94 b1 13 f0       	push   $0xf013b194
f011e133:	68 b2 03 00 00       	push   $0x3b2
f011e138:	68 7a b1 13 f0       	push   $0xf013b17a
f011e13d:	e8 c3 20 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011e142:	e8 9c ec fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011e147:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e14a:	29 c2                	sub    %eax,%edx
f011e14c:	89 d0                	mov    %edx,%eax
f011e14e:	83 f8 01             	cmp    $0x1,%eax
f011e151:	74 17                	je     f011e16a <test_kmalloc_firstfit2+0x448>
f011e153:	83 ec 04             	sub    $0x4,%esp
f011e156:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011e15b:	68 b3 03 00 00       	push   $0x3b3
f011e160:	68 7a b1 13 f0       	push   $0xf013b17a
f011e165:	e8 9b 20 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011e16a:	e8 74 ec fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011e16f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e172:	e8 2f 5c fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011e177:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011e17a:	83 ec 0c             	sub    $0xc,%esp
f011e17d:	68 00 08 00 00       	push   $0x800
f011e182:	e8 da 98 fe ff       	call   f0107a61 <kmalloc>
f011e187:	83 c4 10             	add    $0x10,%esp
f011e18a:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011e190:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011e196:	89 c1                	mov    %eax,%ecx
f011e198:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011e19f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011e1a2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e1a7:	89 45 88             	mov    %eax,-0x78(%ebp)
f011e1aa:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e1ad:	ba 00 00 00 00       	mov    $0x0,%edx
f011e1b2:	f7 75 8c             	divl   -0x74(%ebp)
f011e1b5:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e1b8:	29 d0                	sub    %edx,%eax
f011e1ba:	89 c3                	mov    %eax,%ebx
f011e1bc:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011e1c3:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011e1c8:	0f b6 d0             	movzbl %al,%edx
f011e1cb:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011e1ce:	01 d0                	add    %edx,%eax
f011e1d0:	48                   	dec    %eax
f011e1d1:	89 45 80             	mov    %eax,-0x80(%ebp)
f011e1d4:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e1d7:	ba 00 00 00 00       	mov    $0x0,%edx
f011e1dc:	f7 75 84             	divl   -0x7c(%ebp)
f011e1df:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e1e2:	29 d0                	sub    %edx,%eax
f011e1e4:	01 c3                	add    %eax,%ebx
f011e1e6:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011e1ed:	10 00 00 
f011e1f0:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011e1f5:	0f b6 c0             	movzbl %al,%eax
f011e1f8:	c1 e0 04             	shl    $0x4,%eax
f011e1fb:	89 c2                	mov    %eax,%edx
f011e1fd:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011e203:	01 d0                	add    %edx,%eax
f011e205:	48                   	dec    %eax
f011e206:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011e20c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e212:	ba 00 00 00 00       	mov    $0x0,%edx
f011e217:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011e21d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e223:	29 d0                	sub    %edx,%eax
f011e225:	01 d8                	add    %ebx,%eax
f011e227:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011e22c:	39 c1                	cmp    %eax,%ecx
f011e22e:	74 17                	je     f011e247 <test_kmalloc_firstfit2+0x525>
f011e230:	83 ec 04             	sub    $0x4,%esp
f011e233:	68 94 b5 13 f0       	push   $0xf013b594
f011e238:	68 b9 03 00 00       	push   $0x3b9
f011e23d:	68 7a b1 13 f0       	push   $0xf013b17a
f011e242:	e8 be 1f fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e247:	e8 5a 5b fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011e24c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e24f:	74 17                	je     f011e268 <test_kmalloc_firstfit2+0x546>
f011e251:	83 ec 04             	sub    $0x4,%esp
f011e254:	68 94 b1 13 f0       	push   $0xf013b194
f011e259:	68 ba 03 00 00       	push   $0x3ba
f011e25e:	68 7a b1 13 f0       	push   $0xf013b17a
f011e263:	e8 9d 1f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011e268:	e8 76 eb fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011e26d:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e270:	29 c2                	sub    %eax,%edx
f011e272:	89 d0                	mov    %edx,%eax
f011e274:	83 f8 01             	cmp    $0x1,%eax
f011e277:	74 17                	je     f011e290 <test_kmalloc_firstfit2+0x56e>
f011e279:	83 ec 04             	sub    $0x4,%esp
f011e27c:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011e281:	68 bb 03 00 00       	push   $0x3bb
f011e286:	68 7a b1 13 f0       	push   $0xf013b17a
f011e28b:	e8 75 1f fe ff       	call   f0100205 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011e290:	e8 4e eb fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011e295:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e298:	e8 09 5b fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011e29d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011e2a0:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011e2a6:	83 ec 0c             	sub    $0xc,%esp
f011e2a9:	50                   	push   %eax
f011e2aa:	e8 c8 98 fe ff       	call   f0107b77 <kfree>
f011e2af:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e2b2:	e8 ef 5a fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011e2b7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e2ba:	74 17                	je     f011e2d3 <test_kmalloc_firstfit2+0x5b1>
f011e2bc:	83 ec 04             	sub    $0x4,%esp
f011e2bf:	68 94 b1 13 f0       	push   $0xf013b194
f011e2c4:	68 c1 03 00 00       	push   $0x3c1
f011e2c9:	68 7a b1 13 f0       	push   $0xf013b17a
f011e2ce:	e8 32 1f fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong free: ");
f011e2d3:	e8 0b eb fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011e2d8:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011e2db:	83 f8 01             	cmp    $0x1,%eax
f011e2de:	74 17                	je     f011e2f7 <test_kmalloc_firstfit2+0x5d5>
f011e2e0:	83 ec 04             	sub    $0x4,%esp
f011e2e3:	68 d7 b5 13 f0       	push   $0xf013b5d7
f011e2e8:	68 c2 03 00 00       	push   $0x3c2
f011e2ed:	68 7a b1 13 f0       	push   $0xf013b17a
f011e2f2:	e8 0e 1f fe ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011e2f7:	e8 e7 ea fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011e2fc:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e2ff:	e8 a2 5a fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011e304:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011e307:	83 ec 0c             	sub    $0xc,%esp
f011e30a:	68 00 1c 00 00       	push   $0x1c00
f011e30f:	e8 4d 97 fe ff       	call   f0107a61 <kmalloc>
f011e314:	83 c4 10             	add    $0x10,%esp
f011e317:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011e31d:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011e323:	89 c1                	mov    %eax,%ecx
f011e325:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011e32c:	10 00 00 
f011e32f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011e335:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e33a:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011e340:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e346:	ba 00 00 00 00       	mov    $0x0,%edx
f011e34b:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011e351:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e357:	29 d0                	sub    %edx,%eax
f011e359:	89 c3                	mov    %eax,%ebx
f011e35b:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011e362:	10 00 00 
f011e365:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011e36a:	0f b6 d0             	movzbl %al,%edx
f011e36d:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011e373:	01 d0                	add    %edx,%eax
f011e375:	48                   	dec    %eax
f011e376:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011e37c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e382:	ba 00 00 00 00       	mov    $0x0,%edx
f011e387:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011e38d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e393:	29 d0                	sub    %edx,%eax
f011e395:	01 c3                	add    %eax,%ebx
f011e397:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011e39e:	10 00 00 
f011e3a1:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011e3a6:	0f b6 c0             	movzbl %al,%eax
f011e3a9:	c1 e0 04             	shl    $0x4,%eax
f011e3ac:	89 c2                	mov    %eax,%edx
f011e3ae:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011e3b4:	01 d0                	add    %edx,%eax
f011e3b6:	48                   	dec    %eax
f011e3b7:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011e3bd:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e3c3:	ba 00 00 00 00       	mov    $0x0,%edx
f011e3c8:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011e3ce:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e3d4:	29 d0                	sub    %edx,%eax
f011e3d6:	01 d8                	add    %ebx,%eax
f011e3d8:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011e3dd:	39 c1                	cmp    %eax,%ecx
f011e3df:	74 17                	je     f011e3f8 <test_kmalloc_firstfit2+0x6d6>
f011e3e1:	83 ec 04             	sub    $0x4,%esp
f011e3e4:	68 94 b5 13 f0       	push   $0xf013b594
f011e3e9:	68 c8 03 00 00       	push   $0x3c8
f011e3ee:	68 7a b1 13 f0       	push   $0xf013b17a
f011e3f3:	e8 0d 1e fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e3f8:	e8 a9 59 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011e3fd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e400:	74 17                	je     f011e419 <test_kmalloc_firstfit2+0x6f7>
f011e402:	83 ec 04             	sub    $0x4,%esp
f011e405:	68 94 b1 13 f0       	push   $0xf013b194
f011e40a:	68 c9 03 00 00       	push   $0x3c9
f011e40f:	68 7a b1 13 f0       	push   $0xf013b17a
f011e414:	e8 ec 1d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: ");
f011e419:	e8 c5 e9 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011e41e:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e421:	29 c2                	sub    %eax,%edx
f011e423:	89 d0                	mov    %edx,%eax
f011e425:	83 f8 02             	cmp    $0x2,%eax
f011e428:	74 17                	je     f011e441 <test_kmalloc_firstfit2+0x71f>
f011e42a:	83 ec 04             	sub    $0x4,%esp
f011e42d:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011e432:	68 ca 03 00 00       	push   $0x3ca
f011e437:	68 7a b1 13 f0       	push   $0xf013b17a
f011e43c:	e8 c4 1d fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011e441:	e8 9d e9 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011e446:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e449:	e8 58 59 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011e44e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011e451:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011e457:	83 ec 0c             	sub    $0xc,%esp
f011e45a:	50                   	push   %eax
f011e45b:	e8 17 97 fe ff       	call   f0107b77 <kfree>
f011e460:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e463:	e8 3e 59 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011e468:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e46b:	74 17                	je     f011e484 <test_kmalloc_firstfit2+0x762>
f011e46d:	83 ec 04             	sub    $0x4,%esp
f011e470:	68 94 b1 13 f0       	push   $0xf013b194
f011e475:	68 d0 03 00 00       	push   $0x3d0
f011e47a:	68 7a b1 13 f0       	push   $0xf013b17a
f011e47f:	e8 81 1d fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011e484:	e8 5a e9 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011e489:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011e48c:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e491:	74 17                	je     f011e4aa <test_kmalloc_firstfit2+0x788>
f011e493:	83 ec 04             	sub    $0x4,%esp
f011e496:	68 d7 b5 13 f0       	push   $0xf013b5d7
f011e49b:	68 d1 03 00 00       	push   $0x3d1
f011e4a0:	68 7a b1 13 f0       	push   $0xf013b17a
f011e4a5:	e8 5b 1d fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011e4aa:	e8 34 e9 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011e4af:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e4b2:	e8 ef 58 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011e4b7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011e4ba:	83 ec 0c             	sub    $0xc,%esp
f011e4bd:	68 00 fc 2f 00       	push   $0x2ffc00
f011e4c2:	e8 9a 95 fe ff       	call   f0107a61 <kmalloc>
f011e4c7:	83 c4 10             	add    $0x10,%esp
f011e4ca:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011e4d0:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011e4d6:	89 c1                	mov    %eax,%ecx
f011e4d8:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011e4df:	10 00 00 
f011e4e2:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011e4e8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e4ed:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011e4f3:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e4f9:	ba 00 00 00 00       	mov    $0x0,%edx
f011e4fe:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011e504:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e50a:	29 d0                	sub    %edx,%eax
f011e50c:	89 c3                	mov    %eax,%ebx
f011e50e:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011e515:	10 00 00 
f011e518:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011e51d:	0f b6 d0             	movzbl %al,%edx
f011e520:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011e526:	01 d0                	add    %edx,%eax
f011e528:	48                   	dec    %eax
f011e529:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011e52f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e535:	ba 00 00 00 00       	mov    $0x0,%edx
f011e53a:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011e540:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e546:	29 d0                	sub    %edx,%eax
f011e548:	01 c3                	add    %eax,%ebx
f011e54a:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011e551:	10 00 00 
f011e554:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011e559:	0f b6 c0             	movzbl %al,%eax
f011e55c:	c1 e0 04             	shl    $0x4,%eax
f011e55f:	89 c2                	mov    %eax,%edx
f011e561:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011e567:	01 d0                	add    %edx,%eax
f011e569:	48                   	dec    %eax
f011e56a:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011e570:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e576:	ba 00 00 00 00       	mov    $0x0,%edx
f011e57b:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011e581:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e587:	29 d0                	sub    %edx,%eax
f011e589:	01 d8                	add    %ebx,%eax
f011e58b:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011e590:	39 c1                	cmp    %eax,%ecx
f011e592:	74 17                	je     f011e5ab <test_kmalloc_firstfit2+0x889>
f011e594:	83 ec 04             	sub    $0x4,%esp
f011e597:	68 94 b5 13 f0       	push   $0xf013b594
f011e59c:	68 d7 03 00 00       	push   $0x3d7
f011e5a1:	68 7a b1 13 f0       	push   $0xf013b17a
f011e5a6:	e8 5a 1c fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e5ab:	e8 f6 57 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011e5b0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e5b3:	74 17                	je     f011e5cc <test_kmalloc_firstfit2+0x8aa>
f011e5b5:	83 ec 04             	sub    $0x4,%esp
f011e5b8:	68 94 b1 13 f0       	push   $0xf013b194
f011e5bd:	68 d8 03 00 00       	push   $0x3d8
f011e5c2:	68 7a b1 13 f0       	push   $0xf013b17a
f011e5c7:	e8 39 1c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e5cc:	e8 12 e8 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011e5d1:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e5d4:	29 c2                	sub    %eax,%edx
f011e5d6:	89 d0                	mov    %edx,%eax
f011e5d8:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e5dd:	74 17                	je     f011e5f6 <test_kmalloc_firstfit2+0x8d4>
f011e5df:	83 ec 04             	sub    $0x4,%esp
f011e5e2:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011e5e7:	68 d9 03 00 00       	push   $0x3d9
f011e5ec:	68 7a b1 13 f0       	push   $0xf013b17a
f011e5f1:	e8 0f 1c fe ff       	call   f0100205 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011e5f6:	e8 e8 e7 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011e5fb:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e5fe:	e8 a3 57 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011e603:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011e606:	83 ec 0c             	sub    $0xc,%esp
f011e609:	68 00 18 20 00       	push   $0x201800
f011e60e:	e8 4e 94 fe ff       	call   f0107a61 <kmalloc>
f011e613:	83 c4 10             	add    $0x10,%esp
f011e616:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011e61c:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011e622:	89 c1                	mov    %eax,%ecx
f011e624:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011e62b:	10 00 00 
f011e62e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011e634:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e639:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011e63f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e645:	ba 00 00 00 00       	mov    $0x0,%edx
f011e64a:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011e650:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e656:	29 d0                	sub    %edx,%eax
f011e658:	89 c3                	mov    %eax,%ebx
f011e65a:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011e661:	10 00 00 
f011e664:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011e669:	0f b6 d0             	movzbl %al,%edx
f011e66c:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011e672:	01 d0                	add    %edx,%eax
f011e674:	48                   	dec    %eax
f011e675:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011e67b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011e681:	ba 00 00 00 00       	mov    $0x0,%edx
f011e686:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011e68c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011e692:	29 d0                	sub    %edx,%eax
f011e694:	01 c3                	add    %eax,%ebx
f011e696:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011e69d:	10 00 00 
f011e6a0:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011e6a5:	0f b6 c0             	movzbl %al,%eax
f011e6a8:	c1 e0 04             	shl    $0x4,%eax
f011e6ab:	89 c2                	mov    %eax,%edx
f011e6ad:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011e6b3:	01 d0                	add    %edx,%eax
f011e6b5:	48                   	dec    %eax
f011e6b6:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011e6bc:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011e6c2:	ba 00 00 00 00       	mov    $0x0,%edx
f011e6c7:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011e6cd:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011e6d3:	29 d0                	sub    %edx,%eax
f011e6d5:	01 d8                	add    %ebx,%eax
f011e6d7:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011e6dc:	39 c1                	cmp    %eax,%ecx
f011e6de:	74 17                	je     f011e6f7 <test_kmalloc_firstfit2+0x9d5>
f011e6e0:	83 ec 04             	sub    $0x4,%esp
f011e6e3:	68 94 b5 13 f0       	push   $0xf013b594
f011e6e8:	68 df 03 00 00       	push   $0x3df
f011e6ed:	68 7a b1 13 f0       	push   $0xf013b17a
f011e6f2:	e8 0e 1b fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e6f7:	e8 aa 56 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011e6fc:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e6ff:	74 17                	je     f011e718 <test_kmalloc_firstfit2+0x9f6>
f011e701:	83 ec 04             	sub    $0x4,%esp
f011e704:	68 94 b1 13 f0       	push   $0xf013b194
f011e709:	68 e0 03 00 00       	push   $0x3e0
f011e70e:	68 7a b1 13 f0       	push   $0xf013b17a
f011e713:	e8 ed 1a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011e718:	e8 c6 e6 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011e71d:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e720:	29 c2                	sub    %eax,%edx
f011e722:	89 d0                	mov    %edx,%eax
f011e724:	3d 02 02 00 00       	cmp    $0x202,%eax
f011e729:	74 17                	je     f011e742 <test_kmalloc_firstfit2+0xa20>
f011e72b:	83 ec 04             	sub    $0x4,%esp
f011e72e:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011e733:	68 e1 03 00 00       	push   $0x3e1
f011e738:	68 7a b1 13 f0       	push   $0xf013b17a
f011e73d:	e8 c3 1a fe ff       	call   f0100205 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011e742:	e8 9c e6 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011e747:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e74a:	e8 57 56 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011e74f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011e752:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011e758:	83 ec 0c             	sub    $0xc,%esp
f011e75b:	50                   	push   %eax
f011e75c:	e8 16 94 fe ff       	call   f0107b77 <kfree>
f011e761:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e764:	e8 3d 56 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011e769:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e76c:	74 17                	je     f011e785 <test_kmalloc_firstfit2+0xa63>
f011e76e:	83 ec 04             	sub    $0x4,%esp
f011e771:	68 94 b1 13 f0       	push   $0xf013b194
f011e776:	68 e7 03 00 00       	push   $0x3e7
f011e77b:	68 7a b1 13 f0       	push   $0xf013b17a
f011e780:	e8 80 1a fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011e785:	e8 59 e6 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011e78a:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011e78d:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e792:	74 17                	je     f011e7ab <test_kmalloc_firstfit2+0xa89>
f011e794:	83 ec 04             	sub    $0x4,%esp
f011e797:	68 d7 b5 13 f0       	push   $0xf013b5d7
f011e79c:	68 e8 03 00 00       	push   $0x3e8
f011e7a1:	68 7a b1 13 f0       	push   $0xf013b17a
f011e7a6:	e8 5a 1a fe ff       	call   f0100205 <_panic>

		//2 MB Hole [Resulting Hole = 2 MB + 2 MB + 4 KB = 4 MB + 4 KB]
		freeFrames = sys_calculate_free_frames() ;
f011e7ab:	e8 33 e6 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011e7b0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e7b3:	e8 ee 55 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011e7b8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011e7bb:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011e7c1:	83 ec 0c             	sub    $0xc,%esp
f011e7c4:	50                   	push   %eax
f011e7c5:	e8 ad 93 fe ff       	call   f0107b77 <kfree>
f011e7ca:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011e7cd:	e8 11 e6 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011e7d2:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011e7d5:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e7da:	74 17                	je     f011e7f3 <test_kmalloc_firstfit2+0xad1>
f011e7dc:	83 ec 04             	sub    $0x4,%esp
f011e7df:	68 d7 b5 13 f0       	push   $0xf013b5d7
f011e7e4:	68 ee 03 00 00       	push   $0x3ee
f011e7e9:	68 7a b1 13 f0       	push   $0xf013b17a
f011e7ee:	e8 12 1a fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e7f3:	e8 ae 55 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011e7f8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e7fb:	74 17                	je     f011e814 <test_kmalloc_firstfit2+0xaf2>
f011e7fd:	83 ec 04             	sub    $0x4,%esp
f011e800:	68 94 b1 13 f0       	push   $0xf013b194
f011e805:	68 ef 03 00 00       	push   $0x3ef
f011e80a:	68 7a b1 13 f0       	push   $0xf013b17a
f011e80f:	e8 f1 19 fe ff       	call   f0100205 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011e814:	e8 ca e5 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011e819:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e81c:	e8 85 55 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011e821:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011e824:	83 ec 0c             	sub    $0xc,%esp
f011e827:	68 00 fc 4f 00       	push   $0x4ffc00
f011e82c:	e8 30 92 fe ff       	call   f0107a61 <kmalloc>
f011e831:	83 c4 10             	add    $0x10,%esp
f011e834:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011e83a:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011e840:	89 c1                	mov    %eax,%ecx
f011e842:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011e849:	10 00 00 
f011e84c:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011e852:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e857:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011e85d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011e863:	ba 00 00 00 00       	mov    $0x0,%edx
f011e868:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011e86e:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011e874:	29 d0                	sub    %edx,%eax
f011e876:	89 c3                	mov    %eax,%ebx
f011e878:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011e87f:	10 00 00 
f011e882:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011e887:	0f b6 d0             	movzbl %al,%edx
f011e88a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011e890:	01 d0                	add    %edx,%eax
f011e892:	48                   	dec    %eax
f011e893:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011e899:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011e89f:	ba 00 00 00 00       	mov    $0x0,%edx
f011e8a4:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011e8aa:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011e8b0:	29 d0                	sub    %edx,%eax
f011e8b2:	01 c3                	add    %eax,%ebx
f011e8b4:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011e8bb:	10 00 00 
f011e8be:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011e8c3:	0f b6 c0             	movzbl %al,%eax
f011e8c6:	c1 e0 04             	shl    $0x4,%eax
f011e8c9:	89 c2                	mov    %eax,%edx
f011e8cb:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011e8d1:	01 d0                	add    %edx,%eax
f011e8d3:	48                   	dec    %eax
f011e8d4:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011e8da:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011e8e0:	ba 00 00 00 00       	mov    $0x0,%edx
f011e8e5:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011e8eb:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011e8f1:	29 d0                	sub    %edx,%eax
f011e8f3:	01 d8                	add    %ebx,%eax
f011e8f5:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011e8fa:	39 c1                	cmp    %eax,%ecx
f011e8fc:	74 17                	je     f011e915 <test_kmalloc_firstfit2+0xbf3>
f011e8fe:	83 ec 04             	sub    $0x4,%esp
f011e901:	68 94 b5 13 f0       	push   $0xf013b594
f011e906:	68 f5 03 00 00       	push   $0x3f5
f011e90b:	68 7a b1 13 f0       	push   $0xf013b17a
f011e910:	e8 f0 18 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e915:	e8 8c 54 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011e91a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e91d:	74 17                	je     f011e936 <test_kmalloc_firstfit2+0xc14>
f011e91f:	83 ec 04             	sub    $0x4,%esp
f011e922:	68 94 b1 13 f0       	push   $0xf013b194
f011e927:	68 f6 03 00 00       	push   $0x3f6
f011e92c:	68 7a b1 13 f0       	push   $0xf013b17a
f011e931:	e8 cf 18 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   5*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e936:	e8 a8 e4 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011e93b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e93e:	29 c2                	sub    %eax,%edx
f011e940:	89 d0                	mov    %edx,%eax
f011e942:	3d 00 05 00 00       	cmp    $0x500,%eax
f011e947:	74 17                	je     f011e960 <test_kmalloc_firstfit2+0xc3e>
f011e949:	83 ec 04             	sub    $0x4,%esp
f011e94c:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011e951:	68 f7 03 00 00       	push   $0x3f7
f011e956:	68 7a b1 13 f0       	push   $0xf013b17a
f011e95b:	e8 a5 18 fe ff       	call   f0100205 <_panic>
//		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
//		if ((sys_calculate_free_frames() - freeFrames) != 514) panic("Wrong free: ");

		//[FIRST FIT Case]
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011e960:	e8 7e e4 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011e965:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e968:	e8 39 54 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011e96d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega-kilo);
f011e970:	83 ec 0c             	sub    $0xc,%esp
f011e973:	68 00 fc 2f 00       	push   $0x2ffc00
f011e978:	e8 e4 90 fe ff       	call   f0107a61 <kmalloc>
f011e97d:	83 c4 10             	add    $0x10,%esp
f011e980:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011e986:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011e98c:	89 c1                	mov    %eax,%ecx
f011e98e:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011e995:	10 00 00 
f011e998:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011e99e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e9a3:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011e9a9:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011e9af:	ba 00 00 00 00       	mov    $0x0,%edx
f011e9b4:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011e9ba:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011e9c0:	29 d0                	sub    %edx,%eax
f011e9c2:	89 c3                	mov    %eax,%ebx
f011e9c4:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011e9cb:	10 00 00 
f011e9ce:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011e9d3:	0f b6 d0             	movzbl %al,%edx
f011e9d6:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011e9dc:	01 d0                	add    %edx,%eax
f011e9de:	48                   	dec    %eax
f011e9df:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011e9e5:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011e9eb:	ba 00 00 00 00       	mov    $0x0,%edx
f011e9f0:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011e9f6:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011e9fc:	29 d0                	sub    %edx,%eax
f011e9fe:	01 c3                	add    %eax,%ebx
f011ea00:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011ea07:	10 00 00 
f011ea0a:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011ea0f:	0f b6 c0             	movzbl %al,%eax
f011ea12:	c1 e0 04             	shl    $0x4,%eax
f011ea15:	89 c2                	mov    %eax,%edx
f011ea17:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011ea1d:	01 d0                	add    %edx,%eax
f011ea1f:	48                   	dec    %eax
f011ea20:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011ea26:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011ea2c:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea31:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011ea37:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011ea3d:	29 d0                	sub    %edx,%eax
f011ea3f:	01 d8                	add    %ebx,%eax
f011ea41:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011ea46:	39 c1                	cmp    %eax,%ecx
f011ea48:	74 17                	je     f011ea61 <test_kmalloc_firstfit2+0xd3f>
f011ea4a:	83 ec 04             	sub    $0x4,%esp
f011ea4d:	68 94 b5 13 f0       	push   $0xf013b594
f011ea52:	68 05 04 00 00       	push   $0x405
f011ea57:	68 7a b1 13 f0       	push   $0xf013b17a
f011ea5c:	e8 a4 17 fe ff       	call   f0100205 <_panic>
		if((freeDiskFrames - pf_calculate_free_frames()) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ea61:	e8 40 53 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011ea66:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ea69:	74 17                	je     f011ea82 <test_kmalloc_firstfit2+0xd60>
f011ea6b:	83 ec 04             	sub    $0x4,%esp
f011ea6e:	68 94 b1 13 f0       	push   $0xf013b194
f011ea73:	68 06 04 00 00       	push   $0x406
f011ea78:	68 7a b1 13 f0       	push   $0xf013b17a
f011ea7d:	e8 83 17 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011ea82:	e8 5c e3 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011ea87:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011ea8a:	29 c2                	sub    %eax,%edx
f011ea8c:	89 d0                	mov    %edx,%eax
f011ea8e:	3d 00 03 00 00       	cmp    $0x300,%eax
f011ea93:	74 17                	je     f011eaac <test_kmalloc_firstfit2+0xd8a>
f011ea95:	83 ec 04             	sub    $0x4,%esp
f011ea98:	68 c4 b5 13 f0       	push   $0xf013b5c4
f011ea9d:	68 07 04 00 00       	push   $0x407
f011eaa2:	68 7a b1 13 f0       	push   $0xf013b17a
f011eaa7:	e8 59 17 fe ff       	call   f0100205 <_panic>
	}
	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[9] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011eaac:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011eab3:	10 00 00 
f011eab6:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011eabc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011eac1:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011eac7:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011eacd:	ba 00 00 00 00       	mov    $0x0,%edx
f011ead2:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011ead8:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011eade:	29 d0                	sub    %edx,%eax
f011eae0:	89 c1                	mov    %eax,%ecx
f011eae2:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011eae9:	10 00 00 
f011eaec:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011eaf1:	0f b6 d0             	movzbl %al,%edx
f011eaf4:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011eafa:	01 d0                	add    %edx,%eax
f011eafc:	48                   	dec    %eax
f011eafd:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011eb03:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011eb09:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb0e:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011eb14:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011eb1a:	29 d0                	sub    %edx,%eax
f011eb1c:	01 c1                	add    %eax,%ecx
f011eb1e:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011eb25:	10 00 00 
f011eb28:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011eb2d:	0f b6 c0             	movzbl %al,%eax
f011eb30:	c1 e0 04             	shl    $0x4,%eax
f011eb33:	89 c2                	mov    %eax,%edx
f011eb35:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011eb3b:	01 d0                	add    %edx,%eax
f011eb3d:	48                   	dec    %eax
f011eb3e:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011eb44:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011eb4a:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb4f:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011eb55:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011eb5b:	29 d0                	sub    %edx,%eax
f011eb5d:	01 c8                	add    %ecx,%eax
f011eb5f:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011eb64:	29 c2                	sub    %eax,%edx
f011eb66:	89 d0                	mov    %edx,%eax
f011eb68:	83 ec 0c             	sub    $0xc,%esp
f011eb6b:	50                   	push   %eax
f011eb6c:	e8 f0 8e fe ff       	call   f0107a61 <kmalloc>
f011eb71:	83 c4 10             	add    $0x10,%esp
f011eb74:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if (ptr_allocations[9] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011eb7a:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011eb80:	85 c0                	test   %eax,%eax
f011eb82:	74 17                	je     f011eb9b <test_kmalloc_firstfit2+0xe79>
f011eb84:	83 ec 04             	sub    $0x4,%esp
f011eb87:	68 c4 b6 13 f0       	push   $0xf013b6c4
f011eb8c:	68 0d 04 00 00       	push   $0x40d
f011eb91:	68 7a b1 13 f0       	push   $0xf013b17a
f011eb96:	e8 6a 16 fe ff       	call   f0100205 <_panic>

		cprintf("Congratulations!! test FIRST FIT allocation (2) completed successfully.\n");
f011eb9b:	83 ec 0c             	sub    $0xc,%esp
f011eb9e:	68 04 b8 13 f0       	push   $0xf013b804
f011eba3:	e8 66 21 fe ff       	call   f0100d0e <cprintf>
f011eba8:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011ebab:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011ebb0:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011ebb3:	5b                   	pop    %ebx
f011ebb4:	5f                   	pop    %edi
f011ebb5:	5d                   	pop    %ebp
f011ebb6:	c3                   	ret    

f011ebb7 <test_kmalloc_worstfit>:

int test_kmalloc_worstfit()
{
f011ebb7:	55                   	push   %ebp
f011ebb8:	89 e5                	mov    %esp,%ebp
f011ebba:	57                   	push   %edi
f011ebbb:	53                   	push   %ebx
f011ebbc:	81 ec 50 04 00 00    	sub    $0x450,%esp
	cprintf("==============================================\n");
f011ebc2:	83 ec 0c             	sub    $0xc,%esp
f011ebc5:	68 bc b0 13 f0       	push   $0xf013b0bc
f011ebca:	e8 3f 21 fe ff       	call   f0100d0e <cprintf>
f011ebcf:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011ebd2:	83 ec 0c             	sub    $0xc,%esp
f011ebd5:	68 ec b0 13 f0       	push   $0xf013b0ec
f011ebda:	e8 2f 21 fe ff       	call   f0100d0e <cprintf>
f011ebdf:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011ebe2:	83 ec 0c             	sub    $0xc,%esp
f011ebe5:	68 bc b0 13 f0       	push   $0xf013b0bc
f011ebea:	e8 1f 21 fe ff       	call   f0100d0e <cprintf>
f011ebef:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f011ebf2:	8d 95 b4 fb ff ff    	lea    -0x44c(%ebp),%edx
f011ebf8:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f011ebfd:	b8 00 00 00 00       	mov    $0x0,%eax
f011ec02:	89 d7                	mov    %edx,%edi
f011ec04:	f3 ab                	rep stos %eax,%es:(%edi)

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f011ec06:	e8 d8 e1 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011ec0b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f011ec0e:	e8 93 51 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011ec13:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int count = 0;
f011ec16:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	int i;
	for(i = 0; i< 79 ;i++)
f011ec1d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011ec24:	eb 1f                	jmp    f011ec45 <test_kmalloc_worstfit+0x8e>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f011ec26:	83 ec 0c             	sub    $0xc,%esp
f011ec29:	68 00 00 20 00       	push   $0x200000
f011ec2e:	e8 2e 8e fe ff       	call   f0107a61 <kmalloc>
f011ec33:	83 c4 10             	add    $0x10,%esp
f011ec36:	89 c2                	mov    %eax,%edx
f011ec38:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011ec3b:	89 94 85 b4 fb ff ff 	mov    %edx,-0x44c(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int count = 0;
	int i;
	for(i = 0; i< 79 ;i++)
f011ec42:	ff 45 f4             	incl   -0xc(%ebp)
f011ec45:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f011ec49:	7e db                	jle    f011ec26 <test_kmalloc_worstfit+0x6f>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
f011ec4b:	83 ec 0c             	sub    $0xc,%esp
f011ec4e:	68 00 b0 1f 00       	push   $0x1fb000
f011ec53:	e8 09 8e fe ff       	call   f0107a61 <kmalloc>
f011ec58:	83 c4 10             	add    $0x10,%esp
f011ec5b:	89 85 f0 fc ff ff    	mov    %eax,-0x310(%ebp)

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011ec61:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011ec67:	89 c1                	mov    %eax,%ecx
f011ec69:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011ec70:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011ec73:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ec78:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011ec7b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ec7e:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec83:	f7 75 e4             	divl   -0x1c(%ebp)
f011ec86:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ec89:	29 d0                	sub    %edx,%eax
f011ec8b:	89 c3                	mov    %eax,%ebx
f011ec8d:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011ec94:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011ec99:	0f b6 d0             	movzbl %al,%edx
f011ec9c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011ec9f:	01 d0                	add    %edx,%eax
f011eca1:	48                   	dec    %eax
f011eca2:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011eca5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011eca8:	ba 00 00 00 00       	mov    $0x0,%edx
f011ecad:	f7 75 dc             	divl   -0x24(%ebp)
f011ecb0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011ecb3:	29 d0                	sub    %edx,%eax
f011ecb5:	01 c3                	add    %eax,%ebx
f011ecb7:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011ecbe:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011ecc3:	0f b6 c0             	movzbl %al,%eax
f011ecc6:	c1 e0 04             	shl    $0x4,%eax
f011ecc9:	89 c2                	mov    %eax,%edx
f011eccb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011ecce:	01 d0                	add    %edx,%eax
f011ecd0:	48                   	dec    %eax
f011ecd1:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011ecd4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ecd7:	ba 00 00 00 00       	mov    $0x0,%edx
f011ecdc:	f7 75 d4             	divl   -0x2c(%ebp)
f011ecdf:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ece2:	29 d0                	sub    %edx,%eax
f011ece4:	01 d8                	add    %ebx,%eax
f011ece6:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011eceb:	39 c1                	cmp    %eax,%ecx
f011eced:	0f 85 c0 04 00 00    	jne    f011f1b3 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011ecf3:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011ecf9:	89 c1                	mov    %eax,%ecx
f011ecfb:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011ed02:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011ed05:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ed0a:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011ed0d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011ed10:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed15:	f7 75 cc             	divl   -0x34(%ebp)
f011ed18:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011ed1b:	29 d0                	sub    %edx,%eax
f011ed1d:	89 c3                	mov    %eax,%ebx
f011ed1f:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011ed26:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011ed2b:	0f b6 d0             	movzbl %al,%edx
f011ed2e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011ed31:	01 d0                	add    %edx,%eax
f011ed33:	48                   	dec    %eax
f011ed34:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011ed37:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011ed3a:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed3f:	f7 75 c4             	divl   -0x3c(%ebp)
f011ed42:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011ed45:	29 d0                	sub    %edx,%eax
f011ed47:	01 c3                	add    %eax,%ebx
f011ed49:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011ed50:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011ed55:	0f b6 c0             	movzbl %al,%eax
f011ed58:	c1 e0 04             	shl    $0x4,%eax
f011ed5b:	89 c2                	mov    %eax,%edx
f011ed5d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011ed60:	01 d0                	add    %edx,%eax
f011ed62:	48                   	dec    %eax
f011ed63:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011ed66:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011ed69:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed6e:	f7 75 bc             	divl   -0x44(%ebp)
f011ed71:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011ed74:	29 d0                	sub    %edx,%eax
f011ed76:	01 d8                	add    %ebx,%eax
f011ed78:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011ed7d:	39 c1                	cmp    %eax,%ecx
f011ed7f:	0f 85 2e 04 00 00    	jne    f011f1b3 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011ed85:	8b 85 d4 fb ff ff    	mov    -0x42c(%ebp),%eax
f011ed8b:	89 c1                	mov    %eax,%ecx
f011ed8d:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011ed94:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011ed97:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ed9c:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011ed9f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011eda2:	ba 00 00 00 00       	mov    $0x0,%edx
f011eda7:	f7 75 b4             	divl   -0x4c(%ebp)
f011edaa:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011edad:	29 d0                	sub    %edx,%eax
f011edaf:	89 c3                	mov    %eax,%ebx
f011edb1:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011edb8:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011edbd:	0f b6 d0             	movzbl %al,%edx
f011edc0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011edc3:	01 d0                	add    %edx,%eax
f011edc5:	48                   	dec    %eax
f011edc6:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011edc9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011edcc:	ba 00 00 00 00       	mov    $0x0,%edx
f011edd1:	f7 75 ac             	divl   -0x54(%ebp)
f011edd4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011edd7:	29 d0                	sub    %edx,%eax
f011edd9:	01 c3                	add    %eax,%ebx
f011eddb:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011ede2:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011ede7:	0f b6 c0             	movzbl %al,%eax
f011edea:	c1 e0 04             	shl    $0x4,%eax
f011eded:	89 c2                	mov    %eax,%edx
f011edef:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011edf2:	01 d0                	add    %edx,%eax
f011edf4:	48                   	dec    %eax
f011edf5:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011edf8:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011edfb:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee00:	f7 75 a4             	divl   -0x5c(%ebp)
f011ee03:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ee06:	29 d0                	sub    %edx,%eax
f011ee08:	01 d8                	add    %ebx,%eax
f011ee0a:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011ee0f:	39 c1                	cmp    %eax,%ecx
f011ee11:	0f 85 9c 03 00 00    	jne    f011f1b3 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011ee17:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011ee1d:	89 c1                	mov    %eax,%ecx
f011ee1f:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011ee26:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011ee29:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ee2e:	89 45 98             	mov    %eax,-0x68(%ebp)
f011ee31:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ee34:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee39:	f7 75 9c             	divl   -0x64(%ebp)
f011ee3c:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ee3f:	29 d0                	sub    %edx,%eax
f011ee41:	89 c3                	mov    %eax,%ebx
f011ee43:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011ee4a:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011ee4f:	0f b6 d0             	movzbl %al,%edx
f011ee52:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011ee55:	01 d0                	add    %edx,%eax
f011ee57:	48                   	dec    %eax
f011ee58:	89 45 90             	mov    %eax,-0x70(%ebp)
f011ee5b:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ee5e:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee63:	f7 75 94             	divl   -0x6c(%ebp)
f011ee66:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ee69:	29 d0                	sub    %edx,%eax
f011ee6b:	01 c3                	add    %eax,%ebx
f011ee6d:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011ee74:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011ee79:	0f b6 c0             	movzbl %al,%eax
f011ee7c:	c1 e0 04             	shl    $0x4,%eax
f011ee7f:	89 c2                	mov    %eax,%edx
f011ee81:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011ee84:	01 d0                	add    %edx,%eax
f011ee86:	48                   	dec    %eax
f011ee87:	89 45 88             	mov    %eax,-0x78(%ebp)
f011ee8a:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ee8d:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee92:	f7 75 8c             	divl   -0x74(%ebp)
f011ee95:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ee98:	29 d0                	sub    %edx,%eax
f011ee9a:	01 d8                	add    %ebx,%eax
f011ee9c:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011eea1:	39 c1                	cmp    %eax,%ecx
f011eea3:	0f 85 0a 03 00 00    	jne    f011f1b3 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011eea9:	8b 85 f0 fb ff ff    	mov    -0x410(%ebp),%eax
f011eeaf:	89 c1                	mov    %eax,%ecx
f011eeb1:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011eeb8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011eebb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011eec0:	89 45 80             	mov    %eax,-0x80(%ebp)
f011eec3:	8b 45 80             	mov    -0x80(%ebp),%eax
f011eec6:	ba 00 00 00 00       	mov    $0x0,%edx
f011eecb:	f7 75 84             	divl   -0x7c(%ebp)
f011eece:	8b 45 80             	mov    -0x80(%ebp),%eax
f011eed1:	29 d0                	sub    %edx,%eax
f011eed3:	89 c3                	mov    %eax,%ebx
f011eed5:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011eedc:	10 00 00 
f011eedf:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011eee4:	0f b6 d0             	movzbl %al,%edx
f011eee7:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011eeed:	01 d0                	add    %edx,%eax
f011eeef:	48                   	dec    %eax
f011eef0:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011eef6:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011eefc:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef01:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011ef07:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ef0d:	29 d0                	sub    %edx,%eax
f011ef0f:	01 c3                	add    %eax,%ebx
f011ef11:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011ef18:	10 00 00 
f011ef1b:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011ef20:	0f b6 c0             	movzbl %al,%eax
f011ef23:	c1 e0 04             	shl    $0x4,%eax
f011ef26:	89 c2                	mov    %eax,%edx
f011ef28:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011ef2e:	01 d0                	add    %edx,%eax
f011ef30:	48                   	dec    %eax
f011ef31:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011ef37:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ef3d:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef42:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011ef48:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ef4e:	29 d0                	sub    %edx,%eax
f011ef50:	01 d8                	add    %ebx,%eax
f011ef52:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011ef57:	39 c1                	cmp    %eax,%ecx
f011ef59:	0f 85 54 02 00 00    	jne    f011f1b3 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011ef5f:	8b 85 04 fc ff ff    	mov    -0x3fc(%ebp),%eax
f011ef65:	89 c1                	mov    %eax,%ecx
f011ef67:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011ef6e:	10 00 00 
f011ef71:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011ef77:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ef7c:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011ef82:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011ef88:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef8d:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011ef93:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011ef99:	29 d0                	sub    %edx,%eax
f011ef9b:	89 c3                	mov    %eax,%ebx
f011ef9d:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011efa4:	10 00 00 
f011efa7:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011efac:	0f b6 d0             	movzbl %al,%edx
f011efaf:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011efb5:	01 d0                	add    %edx,%eax
f011efb7:	48                   	dec    %eax
f011efb8:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011efbe:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011efc4:	ba 00 00 00 00       	mov    $0x0,%edx
f011efc9:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011efcf:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011efd5:	29 d0                	sub    %edx,%eax
f011efd7:	01 c3                	add    %eax,%ebx
f011efd9:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011efe0:	10 00 00 
f011efe3:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011efe8:	0f b6 c0             	movzbl %al,%eax
f011efeb:	c1 e0 04             	shl    $0x4,%eax
f011efee:	89 c2                	mov    %eax,%edx
f011eff0:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011eff6:	01 d0                	add    %edx,%eax
f011eff8:	48                   	dec    %eax
f011eff9:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011efff:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011f005:	ba 00 00 00 00       	mov    $0x0,%edx
f011f00a:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011f010:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011f016:	29 d0                	sub    %edx,%eax
f011f018:	01 d8                	add    %ebx,%eax
f011f01a:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011f01f:	39 c1                	cmp    %eax,%ecx
f011f021:	0f 85 8c 01 00 00    	jne    f011f1b3 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011f027:	8b 85 7c fc ff ff    	mov    -0x384(%ebp),%eax
f011f02d:	89 c1                	mov    %eax,%ecx
f011f02f:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011f036:	10 00 00 
f011f039:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011f03f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f044:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011f04a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011f050:	ba 00 00 00 00       	mov    $0x0,%edx
f011f055:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011f05b:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011f061:	29 d0                	sub    %edx,%eax
f011f063:	89 c3                	mov    %eax,%ebx
f011f065:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011f06c:	10 00 00 
f011f06f:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011f074:	0f b6 d0             	movzbl %al,%edx
f011f077:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011f07d:	01 d0                	add    %edx,%eax
f011f07f:	48                   	dec    %eax
f011f080:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011f086:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011f08c:	ba 00 00 00 00       	mov    $0x0,%edx
f011f091:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011f097:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011f09d:	29 d0                	sub    %edx,%eax
f011f09f:	01 c3                	add    %eax,%ebx
f011f0a1:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011f0a8:	10 00 00 
f011f0ab:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011f0b0:	0f b6 c0             	movzbl %al,%eax
f011f0b3:	c1 e0 04             	shl    $0x4,%eax
f011f0b6:	89 c2                	mov    %eax,%edx
f011f0b8:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011f0be:	01 d0                	add    %edx,%eax
f011f0c0:	48                   	dec    %eax
f011f0c1:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011f0c7:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011f0cd:	ba 00 00 00 00       	mov    $0x0,%edx
f011f0d2:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011f0d8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011f0de:	29 d0                	sub    %edx,%eax
f011f0e0:	01 d8                	add    %ebx,%eax
f011f0e2:	2d 00 c0 bf 03       	sub    $0x3bfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011f0e7:	39 c1                	cmp    %eax,%ecx
f011f0e9:	0f 85 c4 00 00 00    	jne    f011f1b3 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
f011f0ef:	8b 85 f0 fc ff ff    	mov    -0x310(%ebp),%eax
f011f0f5:	89 c1                	mov    %eax,%ecx
f011f0f7:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011f0fe:	10 00 00 
f011f101:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011f107:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f10c:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011f112:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011f118:	ba 00 00 00 00       	mov    $0x0,%edx
f011f11d:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011f123:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011f129:	29 d0                	sub    %edx,%eax
f011f12b:	89 c3                	mov    %eax,%ebx
f011f12d:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011f134:	10 00 00 
f011f137:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011f13c:	0f b6 d0             	movzbl %al,%edx
f011f13f:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011f145:	01 d0                	add    %edx,%eax
f011f147:	48                   	dec    %eax
f011f148:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011f14e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011f154:	ba 00 00 00 00       	mov    $0x0,%edx
f011f159:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011f15f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011f165:	29 d0                	sub    %edx,%eax
f011f167:	01 c3                	add    %eax,%ebx
f011f169:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011f170:	10 00 00 
f011f173:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011f178:	0f b6 c0             	movzbl %al,%eax
f011f17b:	c1 e0 04             	shl    $0x4,%eax
f011f17e:	89 c2                	mov    %eax,%edx
f011f180:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011f186:	01 d0                	add    %edx,%eax
f011f188:	48                   	dec    %eax
f011f189:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011f18f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011f195:	ba 00 00 00 00       	mov    $0x0,%edx
f011f19a:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011f1a0:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011f1a6:	29 d0                	sub    %edx,%eax
f011f1a8:	01 d8                	add    %ebx,%eax
f011f1aa:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011f1af:	39 c1                	cmp    %eax,%ecx
f011f1b1:	74 17                	je     f011f1ca <test_kmalloc_worstfit+0x613>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
		panic("Wrong allocation, Check worst fitting strategy is working correctly");
f011f1b3:	83 ec 04             	sub    $0x4,%esp
f011f1b6:	68 50 b8 13 f0       	push   $0xf013b850
f011f1bb:	68 31 04 00 00       	push   $0x431
f011f1c0:	68 7a b1 13 f0       	push   $0xf013b17a
f011f1c5:	e8 3b 10 fe ff       	call   f0100205 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f1ca:	e8 d7 4b fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011f1cf:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f1d2:	74 17                	je     f011f1eb <test_kmalloc_worstfit+0x634>
f011f1d4:	83 ec 04             	sub    $0x4,%esp
f011f1d7:	68 94 b1 13 f0       	push   $0xf013b194
f011f1dc:	68 33 04 00 00       	push   $0x433
f011f1e1:	68 7a b1 13 f0       	push   $0xf013b17a
f011f1e6:	e8 1a 10 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE)/(PAGE_SIZE) ) panic("Wrong allocation");
f011f1eb:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f1ee:	e8 f0 db fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011f1f3:	29 c3                	sub    %eax,%ebx
f011f1f5:	89 d8                	mov    %ebx,%eax
f011f1f7:	3d fb 9f 00 00       	cmp    $0x9ffb,%eax
f011f1fc:	74 17                	je     f011f215 <test_kmalloc_worstfit+0x65e>
f011f1fe:	83 ec 04             	sub    $0x4,%esp
f011f201:	68 37 b4 13 f0       	push   $0xf013b437
f011f206:	68 34 04 00 00       	push   $0x434
f011f20b:	68 7a b1 13 f0       	push   $0xf013b17a
f011f210:	e8 f0 0f fe ff       	call   f0100205 <_panic>

	//make memory holes
	freeFrames = sys_calculate_free_frames() ;
f011f215:	e8 c9 db fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011f21a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames() ;
f011f21d:	e8 84 4b fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011f222:	89 45 ec             	mov    %eax,-0x14(%ebp)

	kfree(ptr_allocations[0]);		//Hole 1 = 2 M
f011f225:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011f22b:	83 ec 0c             	sub    $0xc,%esp
f011f22e:	50                   	push   %eax
f011f22f:	e8 43 89 fe ff       	call   f0107b77 <kfree>
f011f234:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		//Hole 2 = 4 M
f011f237:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011f23d:	83 ec 0c             	sub    $0xc,%esp
f011f240:	50                   	push   %eax
f011f241:	e8 31 89 fe ff       	call   f0107b77 <kfree>
f011f246:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f011f249:	8b 85 c0 fb ff ff    	mov    -0x440(%ebp),%eax
f011f24f:	83 ec 0c             	sub    $0xc,%esp
f011f252:	50                   	push   %eax
f011f253:	e8 1f 89 fe ff       	call   f0107b77 <kfree>
f011f258:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		//Hole 3 = 6 M
f011f25b:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011f261:	83 ec 0c             	sub    $0xc,%esp
f011f264:	50                   	push   %eax
f011f265:	e8 0d 89 fe ff       	call   f0107b77 <kfree>
f011f26a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f011f26d:	8b 85 e4 fb ff ff    	mov    -0x41c(%ebp),%eax
f011f273:	83 ec 0c             	sub    $0xc,%esp
f011f276:	50                   	push   %eax
f011f277:	e8 fb 88 fe ff       	call   f0107b77 <kfree>
f011f27c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011f27f:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
f011f285:	83 ec 0c             	sub    $0xc,%esp
f011f288:	50                   	push   %eax
f011f289:	e8 e9 88 fe ff       	call   f0107b77 <kfree>
f011f28e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[30]);		//Hole 4 = 10 M
f011f291:	8b 85 2c fc ff ff    	mov    -0x3d4(%ebp),%eax
f011f297:	83 ec 0c             	sub    $0xc,%esp
f011f29a:	50                   	push   %eax
f011f29b:	e8 d7 88 fe ff       	call   f0107b77 <kfree>
f011f2a0:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[31]);
f011f2a3:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f011f2a9:	83 ec 0c             	sub    $0xc,%esp
f011f2ac:	50                   	push   %eax
f011f2ad:	e8 c5 88 fe ff       	call   f0107b77 <kfree>
f011f2b2:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[32]);
f011f2b5:	8b 85 34 fc ff ff    	mov    -0x3cc(%ebp),%eax
f011f2bb:	83 ec 0c             	sub    $0xc,%esp
f011f2be:	50                   	push   %eax
f011f2bf:	e8 b3 88 fe ff       	call   f0107b77 <kfree>
f011f2c4:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[33]);
f011f2c7:	8b 85 38 fc ff ff    	mov    -0x3c8(%ebp),%eax
f011f2cd:	83 ec 0c             	sub    $0xc,%esp
f011f2d0:	50                   	push   %eax
f011f2d1:	e8 a1 88 fe ff       	call   f0107b77 <kfree>
f011f2d6:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[34]);
f011f2d9:	8b 85 3c fc ff ff    	mov    -0x3c4(%ebp),%eax
f011f2df:	83 ec 0c             	sub    $0xc,%esp
f011f2e2:	50                   	push   %eax
f011f2e3:	e8 8f 88 fe ff       	call   f0107b77 <kfree>
f011f2e8:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[70]); 	//Hole 5 = 8 M
f011f2eb:	8b 85 cc fc ff ff    	mov    -0x334(%ebp),%eax
f011f2f1:	83 ec 0c             	sub    $0xc,%esp
f011f2f4:	50                   	push   %eax
f011f2f5:	e8 7d 88 fe ff       	call   f0107b77 <kfree>
f011f2fa:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[71]);
f011f2fd:	8b 85 d0 fc ff ff    	mov    -0x330(%ebp),%eax
f011f303:	83 ec 0c             	sub    $0xc,%esp
f011f306:	50                   	push   %eax
f011f307:	e8 6b 88 fe ff       	call   f0107b77 <kfree>
f011f30c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[72]);
f011f30f:	8b 85 d4 fc ff ff    	mov    -0x32c(%ebp),%eax
f011f315:	83 ec 0c             	sub    $0xc,%esp
f011f318:	50                   	push   %eax
f011f319:	e8 59 88 fe ff       	call   f0107b77 <kfree>
f011f31e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[73]);
f011f321:	8b 85 d8 fc ff ff    	mov    -0x328(%ebp),%eax
f011f327:	83 ec 0c             	sub    $0xc,%esp
f011f32a:	50                   	push   %eax
f011f32b:	e8 47 88 fe ff       	call   f0107b77 <kfree>
f011f330:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f333:	e8 6e 4a fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011f338:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f33b:	74 17                	je     f011f354 <test_kmalloc_worstfit+0x79d>
f011f33d:	83 ec 04             	sub    $0x4,%esp
f011f340:	68 94 b1 13 f0       	push   $0xf013b194
f011f345:	68 4a 04 00 00       	push   $0x44a
f011f34a:	68 7a b1 13 f0       	push   $0xf013b17a
f011f34f:	e8 b1 0e fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((15*2*Mega))/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011f354:	e8 8a da fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011f359:	89 c2                	mov    %eax,%edx
f011f35b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011f35e:	29 c2                	sub    %eax,%edx
f011f360:	89 d0                	mov    %edx,%eax
f011f362:	3d 00 1e 00 00       	cmp    $0x1e00,%eax
f011f367:	74 17                	je     f011f380 <test_kmalloc_worstfit+0x7c9>
f011f369:	83 ec 04             	sub    $0x4,%esp
f011f36c:	68 48 b4 13 f0       	push   $0xf013b448
f011f371:	68 4b 04 00 00       	push   $0x44b
f011f376:	68 7a b1 13 f0       	push   $0xf013b17a
f011f37b:	e8 85 0e fe ff       	call   f0100205 <_panic>

	// Test worst fit
	freeFrames = sys_calculate_free_frames() ;
f011f380:	e8 5e da fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011f385:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f388:	e8 19 4a fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011f38d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* tempAddress = kmalloc(Mega);		//Use Hole 4 -> Hole 4 = 9 M
f011f390:	83 ec 0c             	sub    $0xc,%esp
f011f393:	68 00 00 10 00       	push   $0x100000
f011f398:	e8 c4 86 fe ff       	call   f0107a61 <kmalloc>
f011f39d:	83 c4 10             	add    $0x10,%esp
f011f3a0:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03C00000)
f011f3a6:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011f3ad:	10 00 00 
f011f3b0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011f3b6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f3bb:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011f3c1:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011f3c7:	ba 00 00 00 00       	mov    $0x0,%edx
f011f3cc:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011f3d2:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011f3d8:	29 d0                	sub    %edx,%eax
f011f3da:	89 c1                	mov    %eax,%ecx
f011f3dc:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f011f3e3:	10 00 00 
f011f3e6:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011f3eb:	0f b6 d0             	movzbl %al,%edx
f011f3ee:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011f3f4:	01 d0                	add    %edx,%eax
f011f3f6:	48                   	dec    %eax
f011f3f7:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011f3fd:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f403:	ba 00 00 00 00       	mov    $0x0,%edx
f011f408:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011f40e:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f414:	29 d0                	sub    %edx,%eax
f011f416:	01 c1                	add    %eax,%ecx
f011f418:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f011f41f:	10 00 00 
f011f422:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011f427:	0f b6 c0             	movzbl %al,%eax
f011f42a:	c1 e0 04             	shl    $0x4,%eax
f011f42d:	89 c2                	mov    %eax,%edx
f011f42f:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011f435:	01 d0                	add    %edx,%eax
f011f437:	48                   	dec    %eax
f011f438:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011f43e:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011f444:	ba 00 00 00 00       	mov    $0x0,%edx
f011f449:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011f44f:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011f455:	29 d0                	sub    %edx,%eax
f011f457:	01 c8                	add    %ecx,%eax
f011f459:	8d 90 00 40 c0 f9    	lea    -0x63fc000(%eax),%edx
f011f45f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f465:	39 c2                	cmp    %eax,%edx
f011f467:	74 17                	je     f011f480 <test_kmalloc_worstfit+0x8c9>
		panic("Worst Fit not working correctly");
f011f469:	83 ec 04             	sub    $0x4,%esp
f011f46c:	68 94 b8 13 f0       	push   $0xf013b894
f011f471:	68 52 04 00 00       	push   $0x452
f011f476:	68 7a b1 13 f0       	push   $0xf013b17a
f011f47b:	e8 85 0d fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f480:	e8 21 49 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011f485:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f488:	74 17                	je     f011f4a1 <test_kmalloc_worstfit+0x8ea>
f011f48a:	83 ec 04             	sub    $0x4,%esp
f011f48d:	68 94 b1 13 f0       	push   $0xf013b194
f011f492:	68 53 04 00 00       	push   $0x453
f011f497:	68 7a b1 13 f0       	push   $0xf013b17a
f011f49c:	e8 64 0d fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  1*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f4a1:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f4a4:	e8 3a d9 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011f4a9:	29 c3                	sub    %eax,%ebx
f011f4ab:	89 d8                	mov    %ebx,%eax
f011f4ad:	3d 00 01 00 00       	cmp    $0x100,%eax
f011f4b2:	74 17                	je     f011f4cb <test_kmalloc_worstfit+0x914>
f011f4b4:	83 ec 04             	sub    $0x4,%esp
f011f4b7:	68 b2 b6 13 f0       	push   $0xf013b6b2
f011f4bc:	68 54 04 00 00       	push   $0x454
f011f4c1:	68 7a b1 13 f0       	push   $0xf013b17a
f011f4c6:	e8 3a 0d fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f4cb:	ff 45 e8             	incl   -0x18(%ebp)
f011f4ce:	83 ec 08             	sub    $0x8,%esp
f011f4d1:	ff 75 e8             	pushl  -0x18(%ebp)
f011f4d4:	68 b4 b8 13 f0       	push   $0xf013b8b4
f011f4d9:	e8 30 18 fe ff       	call   f0100d0e <cprintf>
f011f4de:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f4e1:	e8 fd d8 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011f4e6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f4e9:	e8 b8 48 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011f4ee:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4 * Mega);			//Use Hole 4 -> Hole 4 = 5 M
f011f4f1:	83 ec 0c             	sub    $0xc,%esp
f011f4f4:	68 00 00 40 00       	push   $0x400000
f011f4f9:	e8 63 85 fe ff       	call   f0107a61 <kmalloc>
f011f4fe:	83 c4 10             	add    $0x10,%esp
f011f501:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03D00000)
f011f507:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011f50e:	10 00 00 
f011f511:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011f517:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f51c:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011f522:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f528:	ba 00 00 00 00       	mov    $0x0,%edx
f011f52d:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011f533:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f539:	29 d0                	sub    %edx,%eax
f011f53b:	89 c1                	mov    %eax,%ecx
f011f53d:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011f544:	10 00 00 
f011f547:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011f54c:	0f b6 d0             	movzbl %al,%edx
f011f54f:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011f555:	01 d0                	add    %edx,%eax
f011f557:	48                   	dec    %eax
f011f558:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011f55e:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f564:	ba 00 00 00 00       	mov    $0x0,%edx
f011f569:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011f56f:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f575:	29 d0                	sub    %edx,%eax
f011f577:	01 c1                	add    %eax,%ecx
f011f579:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f011f580:	10 00 00 
f011f583:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011f588:	0f b6 c0             	movzbl %al,%eax
f011f58b:	c1 e0 04             	shl    $0x4,%eax
f011f58e:	89 c2                	mov    %eax,%edx
f011f590:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011f596:	01 d0                	add    %edx,%eax
f011f598:	48                   	dec    %eax
f011f599:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f011f59f:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f5a5:	ba 00 00 00 00       	mov    $0x0,%edx
f011f5aa:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f011f5b0:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f5b6:	29 d0                	sub    %edx,%eax
f011f5b8:	01 c8                	add    %ecx,%eax
f011f5ba:	8d 90 00 40 d0 f9    	lea    -0x62fc000(%eax),%edx
f011f5c0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f5c6:	39 c2                	cmp    %eax,%edx
f011f5c8:	74 17                	je     f011f5e1 <test_kmalloc_worstfit+0xa2a>
		panic("Worst Fit not working correctly");
f011f5ca:	83 ec 04             	sub    $0x4,%esp
f011f5cd:	68 94 b8 13 f0       	push   $0xf013b894
f011f5d2:	68 5b 04 00 00       	push   $0x45b
f011f5d7:	68 7a b1 13 f0       	push   $0xf013b17a
f011f5dc:	e8 24 0c fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f5e1:	e8 c0 47 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011f5e6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f5e9:	74 17                	je     f011f602 <test_kmalloc_worstfit+0xa4b>
f011f5eb:	83 ec 04             	sub    $0x4,%esp
f011f5ee:	68 94 b1 13 f0       	push   $0xf013b194
f011f5f3:	68 5c 04 00 00       	push   $0x45c
f011f5f8:	68 7a b1 13 f0       	push   $0xf013b17a
f011f5fd:	e8 03 0c fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f602:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f605:	e8 d9 d7 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011f60a:	29 c3                	sub    %eax,%ebx
f011f60c:	89 d8                	mov    %ebx,%eax
f011f60e:	3d 00 04 00 00       	cmp    $0x400,%eax
f011f613:	74 17                	je     f011f62c <test_kmalloc_worstfit+0xa75>
f011f615:	83 ec 04             	sub    $0x4,%esp
f011f618:	68 b2 b6 13 f0       	push   $0xf013b6b2
f011f61d:	68 5d 04 00 00       	push   $0x45d
f011f622:	68 7a b1 13 f0       	push   $0xf013b17a
f011f627:	e8 d9 0b fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f62c:	ff 45 e8             	incl   -0x18(%ebp)
f011f62f:	83 ec 08             	sub    $0x8,%esp
f011f632:	ff 75 e8             	pushl  -0x18(%ebp)
f011f635:	68 b4 b8 13 f0       	push   $0xf013b8b4
f011f63a:	e8 cf 16 fe ff       	call   f0100d0e <cprintf>
f011f63f:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f642:	e8 9c d7 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011f647:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f64a:	e8 57 47 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011f64f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(6*Mega); 			   //Use Hole 5 -> Hole 5 = 2 M
f011f652:	83 ec 0c             	sub    $0xc,%esp
f011f655:	68 00 00 60 00       	push   $0x600000
f011f65a:	e8 02 84 fe ff       	call   f0107a61 <kmalloc>
f011f65f:	83 c4 10             	add    $0x10,%esp
f011f662:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x08C00000)
f011f668:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f011f66f:	10 00 00 
f011f672:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011f678:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f67d:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011f683:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011f689:	ba 00 00 00 00       	mov    $0x0,%edx
f011f68e:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f011f694:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011f69a:	29 d0                	sub    %edx,%eax
f011f69c:	89 c1                	mov    %eax,%ecx
f011f69e:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f011f6a5:	10 00 00 
f011f6a8:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011f6ad:	0f b6 d0             	movzbl %al,%edx
f011f6b0:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011f6b6:	01 d0                	add    %edx,%eax
f011f6b8:	48                   	dec    %eax
f011f6b9:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011f6bf:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011f6c5:	ba 00 00 00 00       	mov    $0x0,%edx
f011f6ca:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011f6d0:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011f6d6:	29 d0                	sub    %edx,%eax
f011f6d8:	01 c1                	add    %eax,%ecx
f011f6da:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f011f6e1:	10 00 00 
f011f6e4:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011f6e9:	0f b6 c0             	movzbl %al,%eax
f011f6ec:	c1 e0 04             	shl    $0x4,%eax
f011f6ef:	89 c2                	mov    %eax,%edx
f011f6f1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011f6f7:	01 d0                	add    %edx,%eax
f011f6f9:	48                   	dec    %eax
f011f6fa:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f011f700:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011f706:	ba 00 00 00 00       	mov    $0x0,%edx
f011f70b:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f011f711:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011f717:	29 d0                	sub    %edx,%eax
f011f719:	01 c8                	add    %ecx,%eax
f011f71b:	8d 90 00 40 c0 fe    	lea    -0x13fc000(%eax),%edx
f011f721:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f727:	39 c2                	cmp    %eax,%edx
f011f729:	74 17                	je     f011f742 <test_kmalloc_worstfit+0xb8b>
		panic("Worst Fit not working correctly");
f011f72b:	83 ec 04             	sub    $0x4,%esp
f011f72e:	68 94 b8 13 f0       	push   $0xf013b894
f011f733:	68 64 04 00 00       	push   $0x464
f011f738:	68 7a b1 13 f0       	push   $0xf013b17a
f011f73d:	e8 c3 0a fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f742:	e8 5f 46 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011f747:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f74a:	74 17                	je     f011f763 <test_kmalloc_worstfit+0xbac>
f011f74c:	83 ec 04             	sub    $0x4,%esp
f011f74f:	68 94 b1 13 f0       	push   $0xf013b194
f011f754:	68 65 04 00 00       	push   $0x465
f011f759:	68 7a b1 13 f0       	push   $0xf013b17a
f011f75e:	e8 a2 0a fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  6*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f763:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f766:	e8 78 d6 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011f76b:	29 c3                	sub    %eax,%ebx
f011f76d:	89 d8                	mov    %ebx,%eax
f011f76f:	3d 00 06 00 00       	cmp    $0x600,%eax
f011f774:	74 17                	je     f011f78d <test_kmalloc_worstfit+0xbd6>
f011f776:	83 ec 04             	sub    $0x4,%esp
f011f779:	68 b2 b6 13 f0       	push   $0xf013b6b2
f011f77e:	68 66 04 00 00       	push   $0x466
f011f783:	68 7a b1 13 f0       	push   $0xf013b17a
f011f788:	e8 78 0a fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f78d:	ff 45 e8             	incl   -0x18(%ebp)
f011f790:	83 ec 08             	sub    $0x8,%esp
f011f793:	ff 75 e8             	pushl  -0x18(%ebp)
f011f796:	68 b4 b8 13 f0       	push   $0xf013b8b4
f011f79b:	e8 6e 15 fe ff       	call   f0100d0e <cprintf>
f011f7a0:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f7a3:	e8 3b d6 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011f7a8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f7ab:	e8 f6 45 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011f7b0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(5*Mega); 			   //Use Hole 3 -> Hole 3 = 1 M
f011f7b3:	83 ec 0c             	sub    $0xc,%esp
f011f7b6:	68 00 00 50 00       	push   $0x500000
f011f7bb:	e8 a1 82 fe ff       	call   f0107a61 <kmalloc>
f011f7c0:	83 c4 10             	add    $0x10,%esp
f011f7c3:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f011f7c9:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f011f7d0:	10 00 00 
f011f7d3:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011f7d9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f7de:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f011f7e4:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011f7ea:	ba 00 00 00 00       	mov    $0x0,%edx
f011f7ef:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f011f7f5:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011f7fb:	29 d0                	sub    %edx,%eax
f011f7fd:	89 c1                	mov    %eax,%ecx
f011f7ff:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f011f806:	10 00 00 
f011f809:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011f80e:	0f b6 d0             	movzbl %al,%edx
f011f811:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011f817:	01 d0                	add    %edx,%eax
f011f819:	48                   	dec    %eax
f011f81a:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f011f820:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011f826:	ba 00 00 00 00       	mov    $0x0,%edx
f011f82b:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f011f831:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011f837:	29 d0                	sub    %edx,%eax
f011f839:	01 c1                	add    %eax,%ecx
f011f83b:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f011f842:	10 00 00 
f011f845:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011f84a:	0f b6 c0             	movzbl %al,%eax
f011f84d:	c1 e0 04             	shl    $0x4,%eax
f011f850:	89 c2                	mov    %eax,%edx
f011f852:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011f858:	01 d0                	add    %edx,%eax
f011f85a:	48                   	dec    %eax
f011f85b:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f011f861:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011f867:	ba 00 00 00 00       	mov    $0x0,%edx
f011f86c:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f011f872:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011f878:	29 d0                	sub    %edx,%eax
f011f87a:	01 c8                	add    %ecx,%eax
f011f87c:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f011f882:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f888:	39 c2                	cmp    %eax,%edx
f011f88a:	74 17                	je     f011f8a3 <test_kmalloc_worstfit+0xcec>
		panic("Worst Fit not working correctly");
f011f88c:	83 ec 04             	sub    $0x4,%esp
f011f88f:	68 94 b8 13 f0       	push   $0xf013b894
f011f894:	68 6d 04 00 00       	push   $0x46d
f011f899:	68 7a b1 13 f0       	push   $0xf013b17a
f011f89e:	e8 62 09 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f8a3:	e8 fe 44 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011f8a8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f8ab:	74 17                	je     f011f8c4 <test_kmalloc_worstfit+0xd0d>
f011f8ad:	83 ec 04             	sub    $0x4,%esp
f011f8b0:	68 94 b1 13 f0       	push   $0xf013b194
f011f8b5:	68 6e 04 00 00       	push   $0x46e
f011f8ba:	68 7a b1 13 f0       	push   $0xf013b17a
f011f8bf:	e8 41 09 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  5*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f8c4:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f8c7:	e8 17 d5 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011f8cc:	29 c3                	sub    %eax,%ebx
f011f8ce:	89 d8                	mov    %ebx,%eax
f011f8d0:	3d 00 05 00 00       	cmp    $0x500,%eax
f011f8d5:	74 17                	je     f011f8ee <test_kmalloc_worstfit+0xd37>
f011f8d7:	83 ec 04             	sub    $0x4,%esp
f011f8da:	68 b2 b6 13 f0       	push   $0xf013b6b2
f011f8df:	68 6f 04 00 00       	push   $0x46f
f011f8e4:	68 7a b1 13 f0       	push   $0xf013b17a
f011f8e9:	e8 17 09 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f8ee:	ff 45 e8             	incl   -0x18(%ebp)
f011f8f1:	83 ec 08             	sub    $0x8,%esp
f011f8f4:	ff 75 e8             	pushl  -0x18(%ebp)
f011f8f7:	68 b4 b8 13 f0       	push   $0xf013b8b4
f011f8fc:	e8 0d 14 fe ff       	call   f0100d0e <cprintf>
f011f901:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f904:	e8 da d4 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011f909:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f90c:	e8 95 44 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011f911:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f011f914:	83 ec 0c             	sub    $0xc,%esp
f011f917:	68 00 00 40 00       	push   $0x400000
f011f91c:	e8 40 81 fe ff       	call   f0107a61 <kmalloc>
f011f921:	83 c4 10             	add    $0x10,%esp
f011f924:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x04100000)
f011f92a:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f011f931:	10 00 00 
f011f934:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011f93a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f93f:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f011f945:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011f94b:	ba 00 00 00 00       	mov    $0x0,%edx
f011f950:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f011f956:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011f95c:	29 d0                	sub    %edx,%eax
f011f95e:	89 c1                	mov    %eax,%ecx
f011f960:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f011f967:	10 00 00 
f011f96a:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011f96f:	0f b6 d0             	movzbl %al,%edx
f011f972:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011f978:	01 d0                	add    %edx,%eax
f011f97a:	48                   	dec    %eax
f011f97b:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f011f981:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011f987:	ba 00 00 00 00       	mov    $0x0,%edx
f011f98c:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f011f992:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011f998:	29 d0                	sub    %edx,%eax
f011f99a:	01 c1                	add    %eax,%ecx
f011f99c:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f011f9a3:	10 00 00 
f011f9a6:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011f9ab:	0f b6 c0             	movzbl %al,%eax
f011f9ae:	c1 e0 04             	shl    $0x4,%eax
f011f9b1:	89 c2                	mov    %eax,%edx
f011f9b3:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011f9b9:	01 d0                	add    %edx,%eax
f011f9bb:	48                   	dec    %eax
f011f9bc:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f011f9c2:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011f9c8:	ba 00 00 00 00       	mov    $0x0,%edx
f011f9cd:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f011f9d3:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011f9d9:	29 d0                	sub    %edx,%eax
f011f9db:	01 c8                	add    %ecx,%eax
f011f9dd:	8d 90 00 40 10 fa    	lea    -0x5efc000(%eax),%edx
f011f9e3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f9e9:	39 c2                	cmp    %eax,%edx
f011f9eb:	74 17                	je     f011fa04 <test_kmalloc_worstfit+0xe4d>
		panic("Worst Fit not working correctly");
f011f9ed:	83 ec 04             	sub    $0x4,%esp
f011f9f0:	68 94 b8 13 f0       	push   $0xf013b894
f011f9f5:	68 76 04 00 00       	push   $0x476
f011f9fa:	68 7a b1 13 f0       	push   $0xf013b17a
f011f9ff:	e8 01 08 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fa04:	e8 9d 43 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011fa09:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fa0c:	74 17                	je     f011fa25 <test_kmalloc_worstfit+0xe6e>
f011fa0e:	83 ec 04             	sub    $0x4,%esp
f011fa11:	68 94 b1 13 f0       	push   $0xf013b194
f011fa16:	68 77 04 00 00       	push   $0x477
f011fa1b:	68 7a b1 13 f0       	push   $0xf013b17a
f011fa20:	e8 e0 07 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011fa25:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fa28:	e8 b6 d3 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011fa2d:	29 c3                	sub    %eax,%ebx
f011fa2f:	89 d8                	mov    %ebx,%eax
f011fa31:	3d 00 04 00 00       	cmp    $0x400,%eax
f011fa36:	74 17                	je     f011fa4f <test_kmalloc_worstfit+0xe98>
f011fa38:	83 ec 04             	sub    $0x4,%esp
f011fa3b:	68 b2 b6 13 f0       	push   $0xf013b6b2
f011fa40:	68 78 04 00 00       	push   $0x478
f011fa45:	68 7a b1 13 f0       	push   $0xf013b17a
f011fa4a:	e8 b6 07 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fa4f:	ff 45 e8             	incl   -0x18(%ebp)
f011fa52:	83 ec 08             	sub    $0x8,%esp
f011fa55:	ff 75 e8             	pushl  -0x18(%ebp)
f011fa58:	68 b4 b8 13 f0       	push   $0xf013b8b4
f011fa5d:	e8 ac 12 fe ff       	call   f0100d0e <cprintf>
f011fa62:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fa65:	e8 79 d3 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011fa6a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fa6d:	e8 34 43 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011fa72:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2 * Mega); 			// Use Hole 2 -> Hole 2 = 2 M
f011fa75:	83 ec 0c             	sub    $0xc,%esp
f011fa78:	68 00 00 20 00       	push   $0x200000
f011fa7d:	e8 df 7f fe ff       	call   f0107a61 <kmalloc>
f011fa82:	83 c4 10             	add    $0x10,%esp
f011fa85:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011fa8b:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f011fa92:	10 00 00 
f011fa95:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011fa9b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011faa0:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f011faa6:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011faac:	ba 00 00 00 00       	mov    $0x0,%edx
f011fab1:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f011fab7:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011fabd:	29 d0                	sub    %edx,%eax
f011fabf:	89 c1                	mov    %eax,%ecx
f011fac1:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f011fac8:	10 00 00 
f011facb:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011fad0:	0f b6 d0             	movzbl %al,%edx
f011fad3:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011fad9:	01 d0                	add    %edx,%eax
f011fadb:	48                   	dec    %eax
f011fadc:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f011fae2:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011fae8:	ba 00 00 00 00       	mov    $0x0,%edx
f011faed:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f011faf3:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011faf9:	29 d0                	sub    %edx,%eax
f011fafb:	01 c1                	add    %eax,%ecx
f011fafd:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f011fb04:	10 00 00 
f011fb07:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011fb0c:	0f b6 c0             	movzbl %al,%eax
f011fb0f:	c1 e0 04             	shl    $0x4,%eax
f011fb12:	89 c2                	mov    %eax,%edx
f011fb14:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011fb1a:	01 d0                	add    %edx,%eax
f011fb1c:	48                   	dec    %eax
f011fb1d:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f011fb23:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011fb29:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb2e:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f011fb34:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011fb3a:	29 d0                	sub    %edx,%eax
f011fb3c:	01 c8                	add    %ecx,%eax
f011fb3e:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011fb44:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fb4a:	39 c2                	cmp    %eax,%edx
f011fb4c:	74 17                	je     f011fb65 <test_kmalloc_worstfit+0xfae>
		panic("Worst Fit not working correctly");
f011fb4e:	83 ec 04             	sub    $0x4,%esp
f011fb51:	68 94 b8 13 f0       	push   $0xf013b894
f011fb56:	68 7f 04 00 00       	push   $0x47f
f011fb5b:	68 7a b1 13 f0       	push   $0xf013b17a
f011fb60:	e8 a0 06 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fb65:	e8 3c 42 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011fb6a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fb6d:	74 17                	je     f011fb86 <test_kmalloc_worstfit+0xfcf>
f011fb6f:	83 ec 04             	sub    $0x4,%esp
f011fb72:	68 94 b1 13 f0       	push   $0xf013b194
f011fb77:	68 80 04 00 00       	push   $0x480
f011fb7c:	68 7a b1 13 f0       	push   $0xf013b17a
f011fb81:	e8 7f 06 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  2*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011fb86:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fb89:	e8 55 d2 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011fb8e:	29 c3                	sub    %eax,%ebx
f011fb90:	89 d8                	mov    %ebx,%eax
f011fb92:	3d 00 02 00 00       	cmp    $0x200,%eax
f011fb97:	74 17                	je     f011fbb0 <test_kmalloc_worstfit+0xff9>
f011fb99:	83 ec 04             	sub    $0x4,%esp
f011fb9c:	68 b2 b6 13 f0       	push   $0xf013b6b2
f011fba1:	68 81 04 00 00       	push   $0x481
f011fba6:	68 7a b1 13 f0       	push   $0xf013b17a
f011fbab:	e8 55 06 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fbb0:	ff 45 e8             	incl   -0x18(%ebp)
f011fbb3:	83 ec 08             	sub    $0x8,%esp
f011fbb6:	ff 75 e8             	pushl  -0x18(%ebp)
f011fbb9:	68 b4 b8 13 f0       	push   $0xf013b8b4
f011fbbe:	e8 4b 11 fe ff       	call   f0100d0e <cprintf>
f011fbc3:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fbc6:	e8 18 d2 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011fbcb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fbce:	e8 d3 41 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011fbd3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(1*Mega + 512*kilo);    // Use Hole 1 -> Hole 1 = 0.5 M
f011fbd6:	83 ec 0c             	sub    $0xc,%esp
f011fbd9:	68 00 00 18 00       	push   $0x180000
f011fbde:	e8 7e 7e fe ff       	call   f0107a61 <kmalloc>
f011fbe3:	83 c4 10             	add    $0x10,%esp
f011fbe6:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f011fbec:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f011fbf3:	10 00 00 
f011fbf6:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011fbfc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fc01:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f011fc07:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011fc0d:	ba 00 00 00 00       	mov    $0x0,%edx
f011fc12:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f011fc18:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011fc1e:	29 d0                	sub    %edx,%eax
f011fc20:	89 c1                	mov    %eax,%ecx
f011fc22:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f011fc29:	10 00 00 
f011fc2c:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011fc31:	0f b6 d0             	movzbl %al,%edx
f011fc34:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011fc3a:	01 d0                	add    %edx,%eax
f011fc3c:	48                   	dec    %eax
f011fc3d:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f011fc43:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011fc49:	ba 00 00 00 00       	mov    $0x0,%edx
f011fc4e:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f011fc54:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011fc5a:	29 d0                	sub    %edx,%eax
f011fc5c:	01 c1                	add    %eax,%ecx
f011fc5e:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f011fc65:	10 00 00 
f011fc68:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011fc6d:	0f b6 c0             	movzbl %al,%eax
f011fc70:	c1 e0 04             	shl    $0x4,%eax
f011fc73:	89 c2                	mov    %eax,%edx
f011fc75:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011fc7b:	01 d0                	add    %edx,%eax
f011fc7d:	48                   	dec    %eax
f011fc7e:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f011fc84:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011fc8a:	ba 00 00 00 00       	mov    $0x0,%edx
f011fc8f:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f011fc95:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011fc9b:	29 d0                	sub    %edx,%eax
f011fc9d:	01 c8                	add    %ecx,%eax
f011fc9f:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f011fca5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fcab:	39 c2                	cmp    %eax,%edx
f011fcad:	74 17                	je     f011fcc6 <test_kmalloc_worstfit+0x110f>
		panic("Worst Fit not working correctly");
f011fcaf:	83 ec 04             	sub    $0x4,%esp
f011fcb2:	68 94 b8 13 f0       	push   $0xf013b894
f011fcb7:	68 88 04 00 00       	push   $0x488
f011fcbc:	68 7a b1 13 f0       	push   $0xf013b17a
f011fcc1:	e8 3f 05 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fcc6:	e8 db 40 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011fccb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fcce:	74 17                	je     f011fce7 <test_kmalloc_worstfit+0x1130>
f011fcd0:	83 ec 04             	sub    $0x4,%esp
f011fcd3:	68 94 b1 13 f0       	push   $0xf013b194
f011fcd8:	68 89 04 00 00       	push   $0x489
f011fcdd:	68 7a b1 13 f0       	push   $0xf013b17a
f011fce2:	e8 1e 05 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (1*Mega + 512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011fce7:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fcea:	e8 f4 d0 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011fcef:	29 c3                	sub    %eax,%ebx
f011fcf1:	89 d8                	mov    %ebx,%eax
f011fcf3:	3d 80 01 00 00       	cmp    $0x180,%eax
f011fcf8:	74 17                	je     f011fd11 <test_kmalloc_worstfit+0x115a>
f011fcfa:	83 ec 04             	sub    $0x4,%esp
f011fcfd:	68 b2 b6 13 f0       	push   $0xf013b6b2
f011fd02:	68 8a 04 00 00       	push   $0x48a
f011fd07:	68 7a b1 13 f0       	push   $0xf013b17a
f011fd0c:	e8 f4 04 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fd11:	ff 45 e8             	incl   -0x18(%ebp)
f011fd14:	83 ec 08             	sub    $0x8,%esp
f011fd17:	ff 75 e8             	pushl  -0x18(%ebp)
f011fd1a:	68 b4 b8 13 f0       	push   $0xf013b8b4
f011fd1f:	e8 ea 0f fe ff       	call   f0100d0e <cprintf>
f011fd24:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fd27:	e8 b7 d0 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011fd2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fd2f:	e8 72 40 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011fd34:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 2 -> Hole 2 = 1.5 M
f011fd37:	83 ec 0c             	sub    $0xc,%esp
f011fd3a:	68 00 00 08 00       	push   $0x80000
f011fd3f:	e8 1d 7d fe ff       	call   f0107a61 <kmalloc>
f011fd44:	83 c4 10             	add    $0x10,%esp
f011fd47:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00600000)
f011fd4d:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f011fd54:	10 00 00 
f011fd57:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011fd5d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fd62:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f011fd68:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011fd6e:	ba 00 00 00 00       	mov    $0x0,%edx
f011fd73:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f011fd79:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011fd7f:	29 d0                	sub    %edx,%eax
f011fd81:	89 c1                	mov    %eax,%ecx
f011fd83:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f011fd8a:	10 00 00 
f011fd8d:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011fd92:	0f b6 d0             	movzbl %al,%edx
f011fd95:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011fd9b:	01 d0                	add    %edx,%eax
f011fd9d:	48                   	dec    %eax
f011fd9e:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f011fda4:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011fdaa:	ba 00 00 00 00       	mov    $0x0,%edx
f011fdaf:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f011fdb5:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011fdbb:	29 d0                	sub    %edx,%eax
f011fdbd:	01 c1                	add    %eax,%ecx
f011fdbf:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f011fdc6:	10 00 00 
f011fdc9:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011fdce:	0f b6 c0             	movzbl %al,%eax
f011fdd1:	c1 e0 04             	shl    $0x4,%eax
f011fdd4:	89 c2                	mov    %eax,%edx
f011fdd6:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011fddc:	01 d0                	add    %edx,%eax
f011fdde:	48                   	dec    %eax
f011fddf:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f011fde5:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011fdeb:	ba 00 00 00 00       	mov    $0x0,%edx
f011fdf0:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f011fdf6:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011fdfc:	29 d0                	sub    %edx,%eax
f011fdfe:	01 c8                	add    %ecx,%eax
f011fe00:	8d 90 00 40 60 f6    	lea    -0x99fc000(%eax),%edx
f011fe06:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fe0c:	39 c2                	cmp    %eax,%edx
f011fe0e:	74 17                	je     f011fe27 <test_kmalloc_worstfit+0x1270>
		panic("Worst Fit not working correctly");
f011fe10:	83 ec 04             	sub    $0x4,%esp
f011fe13:	68 94 b8 13 f0       	push   $0xf013b894
f011fe18:	68 91 04 00 00       	push   $0x491
f011fe1d:	68 7a b1 13 f0       	push   $0xf013b17a
f011fe22:	e8 de 03 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fe27:	e8 7a 3f fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011fe2c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fe2f:	74 17                	je     f011fe48 <test_kmalloc_worstfit+0x1291>
f011fe31:	83 ec 04             	sub    $0x4,%esp
f011fe34:	68 94 b1 13 f0       	push   $0xf013b194
f011fe39:	68 92 04 00 00       	push   $0x492
f011fe3e:	68 7a b1 13 f0       	push   $0xf013b17a
f011fe43:	e8 bd 03 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011fe48:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fe4b:	e8 93 cf fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011fe50:	29 c3                	sub    %eax,%ebx
f011fe52:	89 d8                	mov    %ebx,%eax
f011fe54:	3d 80 00 00 00       	cmp    $0x80,%eax
f011fe59:	74 17                	je     f011fe72 <test_kmalloc_worstfit+0x12bb>
f011fe5b:	83 ec 04             	sub    $0x4,%esp
f011fe5e:	68 b2 b6 13 f0       	push   $0xf013b6b2
f011fe63:	68 93 04 00 00       	push   $0x493
f011fe68:	68 7a b1 13 f0       	push   $0xf013b17a
f011fe6d:	e8 93 03 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fe72:	ff 45 e8             	incl   -0x18(%ebp)
f011fe75:	83 ec 08             	sub    $0x8,%esp
f011fe78:	ff 75 e8             	pushl  -0x18(%ebp)
f011fe7b:	68 b4 b8 13 f0       	push   $0xf013b8b4
f011fe80:	e8 89 0e fe ff       	call   f0100d0e <cprintf>
f011fe85:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fe88:	e8 56 cf fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011fe8d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fe90:	e8 11 3f fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011fe95:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use Hole 5 -> Hole 5 = 2 M - K
f011fe98:	83 ec 0c             	sub    $0xc,%esp
f011fe9b:	68 00 04 00 00       	push   $0x400
f011fea0:	e8 bc 7b fe ff       	call   f0107a61 <kmalloc>
f011fea5:	83 c4 10             	add    $0x10,%esp
f011fea8:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09200000)
f011feae:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f011feb5:	10 00 00 
f011feb8:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011febe:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fec3:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f011fec9:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011fecf:	ba 00 00 00 00       	mov    $0x0,%edx
f011fed4:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f011feda:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011fee0:	29 d0                	sub    %edx,%eax
f011fee2:	89 c1                	mov    %eax,%ecx
f011fee4:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f011feeb:	10 00 00 
f011feee:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011fef3:	0f b6 d0             	movzbl %al,%edx
f011fef6:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011fefc:	01 d0                	add    %edx,%eax
f011fefe:	48                   	dec    %eax
f011feff:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f011ff05:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011ff0b:	ba 00 00 00 00       	mov    $0x0,%edx
f011ff10:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f011ff16:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011ff1c:	29 d0                	sub    %edx,%eax
f011ff1e:	01 c1                	add    %eax,%ecx
f011ff20:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f011ff27:	10 00 00 
f011ff2a:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f011ff2f:	0f b6 c0             	movzbl %al,%eax
f011ff32:	c1 e0 04             	shl    $0x4,%eax
f011ff35:	89 c2                	mov    %eax,%edx
f011ff37:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011ff3d:	01 d0                	add    %edx,%eax
f011ff3f:	48                   	dec    %eax
f011ff40:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f011ff46:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011ff4c:	ba 00 00 00 00       	mov    $0x0,%edx
f011ff51:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f011ff57:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011ff5d:	29 d0                	sub    %edx,%eax
f011ff5f:	01 c8                	add    %ecx,%eax
f011ff61:	8d 90 00 40 20 ff    	lea    -0xdfc000(%eax),%edx
f011ff67:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ff6d:	39 c2                	cmp    %eax,%edx
f011ff6f:	74 17                	je     f011ff88 <test_kmalloc_worstfit+0x13d1>
		panic("Worst Fit not working correctly");
f011ff71:	83 ec 04             	sub    $0x4,%esp
f011ff74:	68 94 b8 13 f0       	push   $0xf013b894
f011ff79:	68 9a 04 00 00       	push   $0x49a
f011ff7e:	68 7a b1 13 f0       	push   $0xf013b17a
f011ff83:	e8 7d 02 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ff88:	e8 19 3e fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011ff8d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ff90:	74 17                	je     f011ffa9 <test_kmalloc_worstfit+0x13f2>
f011ff92:	83 ec 04             	sub    $0x4,%esp
f011ff95:	68 94 b1 13 f0       	push   $0xf013b194
f011ff9a:	68 9b 04 00 00       	push   $0x49b
f011ff9f:	68 7a b1 13 f0       	push   $0xf013b17a
f011ffa4:	e8 5c 02 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011ffa9:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ffac:	e8 32 ce fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011ffb1:	29 c3                	sub    %eax,%ebx
f011ffb3:	89 d8                	mov    %ebx,%eax
f011ffb5:	83 f8 01             	cmp    $0x1,%eax
f011ffb8:	74 17                	je     f011ffd1 <test_kmalloc_worstfit+0x141a>
f011ffba:	83 ec 04             	sub    $0x4,%esp
f011ffbd:	68 b2 b6 13 f0       	push   $0xf013b6b2
f011ffc2:	68 9c 04 00 00       	push   $0x49c
f011ffc7:	68 7a b1 13 f0       	push   $0xf013b17a
f011ffcc:	e8 34 02 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ffd1:	ff 45 e8             	incl   -0x18(%ebp)
f011ffd4:	83 ec 08             	sub    $0x8,%esp
f011ffd7:	ff 75 e8             	pushl  -0x18(%ebp)
f011ffda:	68 b4 b8 13 f0       	push   $0xf013b8b4
f011ffdf:	e8 2a 0d fe ff       	call   f0100d0e <cprintf>
f011ffe4:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ffe7:	e8 f7 cd fe ff       	call   f010cde3 <sys_calculate_free_frames>
f011ffec:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ffef:	e8 b2 3d fe ff       	call   f0103da6 <pf_calculate_free_frames>
f011fff4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2*Mega - 4*kilo); 		// Use Hole 5 -> Hole 5 = 0
f011fff7:	83 ec 0c             	sub    $0xc,%esp
f011fffa:	68 00 f0 1f 00       	push   $0x1ff000
f011ffff:	e8 5d 7a fe ff       	call   f0107a61 <kmalloc>
f0120004:	83 c4 10             	add    $0x10,%esp
f0120007:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09201000)
f012000d:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f0120014:	10 00 00 
f0120017:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012001d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120022:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f0120028:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012002e:	ba 00 00 00 00       	mov    $0x0,%edx
f0120033:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f0120039:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012003f:	29 d0                	sub    %edx,%eax
f0120041:	89 c1                	mov    %eax,%ecx
f0120043:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f012004a:	10 00 00 
f012004d:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0120052:	0f b6 d0             	movzbl %al,%edx
f0120055:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012005b:	01 d0                	add    %edx,%eax
f012005d:	48                   	dec    %eax
f012005e:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f0120064:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012006a:	ba 00 00 00 00       	mov    $0x0,%edx
f012006f:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f0120075:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012007b:	29 d0                	sub    %edx,%eax
f012007d:	01 c1                	add    %eax,%ecx
f012007f:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f0120086:	10 00 00 
f0120089:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012008e:	0f b6 c0             	movzbl %al,%eax
f0120091:	c1 e0 04             	shl    $0x4,%eax
f0120094:	89 c2                	mov    %eax,%edx
f0120096:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f012009c:	01 d0                	add    %edx,%eax
f012009e:	48                   	dec    %eax
f012009f:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f01200a5:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f01200ab:	ba 00 00 00 00       	mov    $0x0,%edx
f01200b0:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f01200b6:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f01200bc:	29 d0                	sub    %edx,%eax
f01200be:	01 c8                	add    %ecx,%eax
f01200c0:	8d 90 00 50 20 ff    	lea    -0xdfb000(%eax),%edx
f01200c6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01200cc:	39 c2                	cmp    %eax,%edx
f01200ce:	74 17                	je     f01200e7 <test_kmalloc_worstfit+0x1530>
		panic("Worst Fit not working correctly");
f01200d0:	83 ec 04             	sub    $0x4,%esp
f01200d3:	68 94 b8 13 f0       	push   $0xf013b894
f01200d8:	68 a3 04 00 00       	push   $0x4a3
f01200dd:	68 7a b1 13 f0       	push   $0xf013b17a
f01200e2:	e8 1e 01 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01200e7:	e8 ba 3c fe ff       	call   f0103da6 <pf_calculate_free_frames>
f01200ec:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01200ef:	74 17                	je     f0120108 <test_kmalloc_worstfit+0x1551>
f01200f1:	83 ec 04             	sub    $0x4,%esp
f01200f4:	68 94 b1 13 f0       	push   $0xf013b194
f01200f9:	68 a4 04 00 00       	push   $0x4a4
f01200fe:	68 7a b1 13 f0       	push   $0xf013b17a
f0120103:	e8 fd 00 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (2*Mega - 4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f0120108:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f012010b:	e8 d3 cc fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0120110:	29 c3                	sub    %eax,%ebx
f0120112:	89 d8                	mov    %ebx,%eax
f0120114:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f0120119:	74 17                	je     f0120132 <test_kmalloc_worstfit+0x157b>
f012011b:	83 ec 04             	sub    $0x4,%esp
f012011e:	68 b2 b6 13 f0       	push   $0xf013b6b2
f0120123:	68 a5 04 00 00       	push   $0x4a5
f0120128:	68 7a b1 13 f0       	push   $0xf013b17a
f012012d:	e8 d3 00 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f0120132:	ff 45 e8             	incl   -0x18(%ebp)
f0120135:	83 ec 08             	sub    $0x8,%esp
f0120138:	ff 75 e8             	pushl  -0x18(%ebp)
f012013b:	68 b4 b8 13 f0       	push   $0xf013b8b4
f0120140:	e8 c9 0b fe ff       	call   f0100d0e <cprintf>
f0120145:	83 c4 10             	add    $0x10,%esp

	// Check that worst fit returns null in case all holes are not free
	freeFrames = sys_calculate_free_frames() ;
f0120148:	e8 96 cc fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012014d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f0120150:	e8 51 3c fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0120155:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 		//No Suitable hole
f0120158:	83 ec 0c             	sub    $0xc,%esp
f012015b:	68 00 00 40 00       	push   $0x400000
f0120160:	e8 fc 78 fe ff       	call   f0107a61 <kmalloc>
f0120165:	83 c4 10             	add    $0x10,%esp
f0120168:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != 0x0)
f012016e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0120174:	85 c0                	test   %eax,%eax
f0120176:	74 17                	je     f012018f <test_kmalloc_worstfit+0x15d8>
		panic("Worst Fit not working correctly");
f0120178:	83 ec 04             	sub    $0x4,%esp
f012017b:	68 94 b8 13 f0       	push   $0xf013b894
f0120180:	68 ad 04 00 00       	push   $0x4ad
f0120185:	68 7a b1 13 f0       	push   $0xf013b17a
f012018a:	e8 76 00 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012018f:	e8 12 3c fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0120194:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0120197:	74 17                	je     f01201b0 <test_kmalloc_worstfit+0x15f9>
f0120199:	83 ec 04             	sub    $0x4,%esp
f012019c:	68 94 b1 13 f0       	push   $0xf013b194
f01201a1:	68 ae 04 00 00       	push   $0x4ae
f01201a6:	68 7a b1 13 f0       	push   $0xf013b17a
f01201ab:	e8 55 00 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  0) panic("Wrong allocation:");
f01201b0:	e8 2e cc fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01201b5:	89 c2                	mov    %eax,%edx
f01201b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01201ba:	39 c2                	cmp    %eax,%edx
f01201bc:	74 17                	je     f01201d5 <test_kmalloc_worstfit+0x161e>
f01201be:	83 ec 04             	sub    $0x4,%esp
f01201c1:	68 b2 b6 13 f0       	push   $0xf013b6b2
f01201c6:	68 af 04 00 00       	push   $0x4af
f01201cb:	68 7a b1 13 f0       	push   $0xf013b17a
f01201d0:	e8 30 00 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f01201d5:	ff 45 e8             	incl   -0x18(%ebp)
f01201d8:	83 ec 08             	sub    $0x8,%esp
f01201db:	ff 75 e8             	pushl  -0x18(%ebp)
f01201de:	68 b4 b8 13 f0       	push   $0xf013b8b4
f01201e3:	e8 26 0b fe ff       	call   f0100d0e <cprintf>
f01201e8:	83 c4 10             	add    $0x10,%esp

	cprintf("Congratulations!! test Worst Fit completed successfully.\n");
f01201eb:	83 ec 0c             	sub    $0xc,%esp
f01201ee:	68 c8 b8 13 f0       	push   $0xf013b8c8
f01201f3:	e8 16 0b fe ff       	call   f0100d0e <cprintf>
f01201f8:	83 c4 10             	add    $0x10,%esp


	return 1;
f01201fb:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0120200:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0120203:	5b                   	pop    %ebx
f0120204:	5f                   	pop    %edi
f0120205:	5d                   	pop    %ebp
f0120206:	c3                   	ret    

f0120207 <test_kfree>:

int test_kfree()
{
f0120207:	55                   	push   %ebp
f0120208:	89 e5                	mov    %esp,%ebp
f012020a:	57                   	push   %edi
f012020b:	53                   	push   %ebx
f012020c:	81 ec c0 02 00 00    	sub    $0x2c0,%esp
	cprintf("==============================================\n");
f0120212:	83 ec 0c             	sub    $0xc,%esp
f0120215:	68 bc b0 13 f0       	push   $0xf013b0bc
f012021a:	e8 ef 0a fe ff       	call   f0100d0e <cprintf>
f012021f:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0120222:	83 ec 0c             	sub    $0xc,%esp
f0120225:	68 ec b0 13 f0       	push   $0xf013b0ec
f012022a:	e8 df 0a fe ff       	call   f0100d0e <cprintf>
f012022f:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0120232:	83 ec 0c             	sub    $0xc,%esp
f0120235:	68 bc b0 13 f0       	push   $0xf013b0bc
f012023a:	e8 cf 0a fe ff       	call   f0100d0e <cprintf>
f012023f:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0120242:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0120246:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f012024a:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0120250:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0120256:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f012025d:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0120264:	e8 7a cb fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0120269:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012026c:	8d 95 e8 fd ff ff    	lea    -0x218(%ebp),%edx
f0120272:	b9 14 00 00 00       	mov    $0x14,%ecx
f0120277:	b8 00 00 00 00       	mov    $0x0,%eax
f012027c:	89 d7                	mov    %edx,%edi
f012027e:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0120280:	8d 95 98 fd ff ff    	lea    -0x268(%ebp),%edx
f0120286:	b9 14 00 00 00       	mov    $0x14,%ecx
f012028b:	b8 00 00 00 00       	mov    $0x0,%eax
f0120290:	89 d7                	mov    %edx,%edi
f0120292:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0120294:	8d 95 48 fd ff ff    	lea    -0x2b8(%ebp),%edx
f012029a:	b9 14 00 00 00       	mov    $0x14,%ecx
f012029f:	b8 00 00 00 00       	mov    $0x0,%eax
f01202a4:	89 d7                	mov    %edx,%edi
f01202a6:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01202a8:	e8 36 cb fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01202ad:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01202b0:	e8 f1 3a fe ff       	call   f0103da6 <pf_calculate_free_frames>
f01202b5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01202b8:	83 ec 0c             	sub    $0xc,%esp
f01202bb:	68 00 fc 1f 00       	push   $0x1ffc00
f01202c0:	e8 9c 77 fe ff       	call   f0107a61 <kmalloc>
f01202c5:	83 c4 10             	add    $0x10,%esp
f01202c8:	89 85 48 fd ff ff    	mov    %eax,-0x2b8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01202ce:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f01202d4:	89 c1                	mov    %eax,%ecx
f01202d6:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f01202dd:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01202e0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01202e5:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f01202e8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01202eb:	ba 00 00 00 00       	mov    $0x0,%edx
f01202f0:	f7 75 c8             	divl   -0x38(%ebp)
f01202f3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01202f6:	29 d0                	sub    %edx,%eax
f01202f8:	89 c3                	mov    %eax,%ebx
f01202fa:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0120301:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0120306:	0f b6 d0             	movzbl %al,%edx
f0120309:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012030c:	01 d0                	add    %edx,%eax
f012030e:	48                   	dec    %eax
f012030f:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0120312:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0120315:	ba 00 00 00 00       	mov    $0x0,%edx
f012031a:	f7 75 c0             	divl   -0x40(%ebp)
f012031d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0120320:	29 d0                	sub    %edx,%eax
f0120322:	01 c3                	add    %eax,%ebx
f0120324:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f012032b:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0120330:	0f b6 c0             	movzbl %al,%eax
f0120333:	c1 e0 04             	shl    $0x4,%eax
f0120336:	89 c2                	mov    %eax,%edx
f0120338:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012033b:	01 d0                	add    %edx,%eax
f012033d:	48                   	dec    %eax
f012033e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0120341:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0120344:	ba 00 00 00 00       	mov    $0x0,%edx
f0120349:	f7 75 b8             	divl   -0x48(%ebp)
f012034c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012034f:	29 d0                	sub    %edx,%eax
f0120351:	01 d8                	add    %ebx,%eax
f0120353:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0120358:	39 c1                	cmp    %eax,%ecx
f012035a:	74 17                	je     f0120373 <test_kfree+0x16c>
f012035c:	83 ec 04             	sub    $0x4,%esp
f012035f:	68 60 b2 13 f0       	push   $0xf013b260
f0120364:	68 d7 04 00 00       	push   $0x4d7
f0120369:	68 7a b1 13 f0       	push   $0xf013b17a
f012036e:	e8 92 fe fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120373:	e8 2e 3a fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0120378:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012037b:	74 17                	je     f0120394 <test_kfree+0x18d>
f012037d:	83 ec 04             	sub    $0x4,%esp
f0120380:	68 94 b1 13 f0       	push   $0xf013b194
f0120385:	68 d8 04 00 00       	push   $0x4d8
f012038a:	68 7a b1 13 f0       	push   $0xf013b17a
f012038f:	e8 71 fe fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120394:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120397:	e8 47 ca fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012039c:	29 c3                	sub    %eax,%ebx
f012039e:	89 d8                	mov    %ebx,%eax
f01203a0:	3d 00 02 00 00       	cmp    $0x200,%eax
f01203a5:	74 17                	je     f01203be <test_kfree+0x1b7>
f01203a7:	83 ec 04             	sub    $0x4,%esp
f01203aa:	68 fc b1 13 f0       	push   $0xf013b1fc
f01203af:	68 d9 04 00 00       	push   $0x4d9
f01203b4:	68 7a b1 13 f0       	push   $0xf013b17a
f01203b9:	e8 47 fe fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f01203be:	c7 85 e8 fd ff ff ff 	movl   $0x1ffbff,-0x218(%ebp)
f01203c5:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01203c8:	e8 16 ca fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01203cd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01203d0:	e8 d1 39 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f01203d5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01203d8:	83 ec 0c             	sub    $0xc,%esp
f01203db:	68 00 fc 1f 00       	push   $0x1ffc00
f01203e0:	e8 7c 76 fe ff       	call   f0107a61 <kmalloc>
f01203e5:	83 c4 10             	add    $0x10,%esp
f01203e8:	89 85 4c fd ff ff    	mov    %eax,-0x2b4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01203ee:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f01203f4:	89 c1                	mov    %eax,%ecx
f01203f6:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01203fd:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0120400:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120405:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0120408:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012040b:	ba 00 00 00 00       	mov    $0x0,%edx
f0120410:	f7 75 b0             	divl   -0x50(%ebp)
f0120413:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0120416:	29 d0                	sub    %edx,%eax
f0120418:	89 c3                	mov    %eax,%ebx
f012041a:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0120421:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0120426:	0f b6 d0             	movzbl %al,%edx
f0120429:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012042c:	01 d0                	add    %edx,%eax
f012042e:	48                   	dec    %eax
f012042f:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0120432:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0120435:	ba 00 00 00 00       	mov    $0x0,%edx
f012043a:	f7 75 a8             	divl   -0x58(%ebp)
f012043d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0120440:	29 d0                	sub    %edx,%eax
f0120442:	01 c3                	add    %eax,%ebx
f0120444:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f012044b:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0120450:	0f b6 c0             	movzbl %al,%eax
f0120453:	c1 e0 04             	shl    $0x4,%eax
f0120456:	89 c2                	mov    %eax,%edx
f0120458:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012045b:	01 d0                	add    %edx,%eax
f012045d:	48                   	dec    %eax
f012045e:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0120461:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0120464:	ba 00 00 00 00       	mov    $0x0,%edx
f0120469:	f7 75 a0             	divl   -0x60(%ebp)
f012046c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012046f:	29 d0                	sub    %edx,%eax
f0120471:	01 d8                	add    %ebx,%eax
f0120473:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0120478:	39 c1                	cmp    %eax,%ecx
f012047a:	74 17                	je     f0120493 <test_kfree+0x28c>
f012047c:	83 ec 04             	sub    $0x4,%esp
f012047f:	68 60 b2 13 f0       	push   $0xf013b260
f0120484:	68 e0 04 00 00       	push   $0x4e0
f0120489:	68 7a b1 13 f0       	push   $0xf013b17a
f012048e:	e8 72 fd fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120493:	e8 0e 39 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0120498:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012049b:	74 17                	je     f01204b4 <test_kfree+0x2ad>
f012049d:	83 ec 04             	sub    $0x4,%esp
f01204a0:	68 94 b1 13 f0       	push   $0xf013b194
f01204a5:	68 e1 04 00 00       	push   $0x4e1
f01204aa:	68 7a b1 13 f0       	push   $0xf013b17a
f01204af:	e8 51 fd fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01204b4:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01204b7:	e8 27 c9 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01204bc:	29 c3                	sub    %eax,%ebx
f01204be:	89 d8                	mov    %ebx,%eax
f01204c0:	3d 00 02 00 00       	cmp    $0x200,%eax
f01204c5:	74 17                	je     f01204de <test_kfree+0x2d7>
f01204c7:	83 ec 04             	sub    $0x4,%esp
f01204ca:	68 fc b1 13 f0       	push   $0xf013b1fc
f01204cf:	68 e2 04 00 00       	push   $0x4e2
f01204d4:	68 7a b1 13 f0       	push   $0xf013b17a
f01204d9:	e8 27 fd fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01204de:	c7 85 ec fd ff ff ff 	movl   $0x1ffbff,-0x214(%ebp)
f01204e5:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01204e8:	e8 f6 c8 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01204ed:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01204f0:	e8 b1 38 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f01204f5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01204f8:	83 ec 0c             	sub    $0xc,%esp
f01204fb:	68 00 08 00 00       	push   $0x800
f0120500:	e8 5c 75 fe ff       	call   f0107a61 <kmalloc>
f0120505:	83 c4 10             	add    $0x10,%esp
f0120508:	89 85 50 fd ff ff    	mov    %eax,-0x2b0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012050e:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f0120514:	89 c1                	mov    %eax,%ecx
f0120516:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f012051d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120520:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120525:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0120528:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012052b:	ba 00 00 00 00       	mov    $0x0,%edx
f0120530:	f7 75 98             	divl   -0x68(%ebp)
f0120533:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0120536:	29 d0                	sub    %edx,%eax
f0120538:	89 c3                	mov    %eax,%ebx
f012053a:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0120541:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0120546:	0f b6 d0             	movzbl %al,%edx
f0120549:	8b 45 90             	mov    -0x70(%ebp),%eax
f012054c:	01 d0                	add    %edx,%eax
f012054e:	48                   	dec    %eax
f012054f:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0120552:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0120555:	ba 00 00 00 00       	mov    $0x0,%edx
f012055a:	f7 75 90             	divl   -0x70(%ebp)
f012055d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0120560:	29 d0                	sub    %edx,%eax
f0120562:	01 c3                	add    %eax,%ebx
f0120564:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f012056b:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0120570:	0f b6 c0             	movzbl %al,%eax
f0120573:	c1 e0 04             	shl    $0x4,%eax
f0120576:	89 c2                	mov    %eax,%edx
f0120578:	8b 45 88             	mov    -0x78(%ebp),%eax
f012057b:	01 d0                	add    %edx,%eax
f012057d:	48                   	dec    %eax
f012057e:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0120581:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0120584:	ba 00 00 00 00       	mov    $0x0,%edx
f0120589:	f7 75 88             	divl   -0x78(%ebp)
f012058c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012058f:	29 d0                	sub    %edx,%eax
f0120591:	01 d8                	add    %ebx,%eax
f0120593:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0120598:	39 c1                	cmp    %eax,%ecx
f012059a:	74 17                	je     f01205b3 <test_kfree+0x3ac>
f012059c:	83 ec 04             	sub    $0x4,%esp
f012059f:	68 60 b2 13 f0       	push   $0xf013b260
f01205a4:	68 e9 04 00 00       	push   $0x4e9
f01205a9:	68 7a b1 13 f0       	push   $0xf013b17a
f01205ae:	e8 52 fc fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01205b3:	e8 ee 37 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f01205b8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01205bb:	74 17                	je     f01205d4 <test_kfree+0x3cd>
f01205bd:	83 ec 04             	sub    $0x4,%esp
f01205c0:	68 94 b1 13 f0       	push   $0xf013b194
f01205c5:	68 ea 04 00 00       	push   $0x4ea
f01205ca:	68 7a b1 13 f0       	push   $0xf013b17a
f01205cf:	e8 31 fc fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01205d4:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01205d7:	e8 07 c8 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01205dc:	29 c3                	sub    %eax,%ebx
f01205de:	89 d8                	mov    %ebx,%eax
f01205e0:	83 f8 01             	cmp    $0x1,%eax
f01205e3:	74 17                	je     f01205fc <test_kfree+0x3f5>
f01205e5:	83 ec 04             	sub    $0x4,%esp
f01205e8:	68 fc b1 13 f0       	push   $0xf013b1fc
f01205ed:	68 eb 04 00 00       	push   $0x4eb
f01205f2:	68 7a b1 13 f0       	push   $0xf013b17a
f01205f7:	e8 09 fc fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01205fc:	c7 85 f0 fd ff ff ff 	movl   $0x7ff,-0x210(%ebp)
f0120603:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0120606:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f012060c:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012060f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120616:	eb 0e                	jmp    f0120626 <test_kfree+0x41f>
		{
			ptr[i] = 2 ;
f0120618:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012061b:	8b 45 80             	mov    -0x80(%ebp),%eax
f012061e:	01 d0                	add    %edx,%eax
f0120620:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0120623:	ff 45 f4             	incl   -0xc(%ebp)
f0120626:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012062c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012062f:	7f e7                	jg     f0120618 <test_kfree+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0120631:	e8 ad c7 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0120636:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120639:	e8 68 37 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f012063e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0120641:	83 ec 0c             	sub    $0xc,%esp
f0120644:	68 00 08 00 00       	push   $0x800
f0120649:	e8 13 74 fe ff       	call   f0107a61 <kmalloc>
f012064e:	83 c4 10             	add    $0x10,%esp
f0120651:	89 85 54 fd ff ff    	mov    %eax,-0x2ac(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120657:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f012065d:	89 c1                	mov    %eax,%ecx
f012065f:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0120666:	10 00 00 
f0120669:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012066f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120674:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012067a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0120680:	ba 00 00 00 00       	mov    $0x0,%edx
f0120685:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012068b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0120691:	29 d0                	sub    %edx,%eax
f0120693:	89 c3                	mov    %eax,%ebx
f0120695:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012069c:	10 00 00 
f012069f:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01206a4:	0f b6 d0             	movzbl %al,%edx
f01206a7:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01206ad:	01 d0                	add    %edx,%eax
f01206af:	48                   	dec    %eax
f01206b0:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01206b6:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01206bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01206c1:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01206c7:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01206cd:	29 d0                	sub    %edx,%eax
f01206cf:	01 c3                	add    %eax,%ebx
f01206d1:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01206d8:	10 00 00 
f01206db:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01206e0:	0f b6 c0             	movzbl %al,%eax
f01206e3:	c1 e0 04             	shl    $0x4,%eax
f01206e6:	89 c2                	mov    %eax,%edx
f01206e8:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01206ee:	01 d0                	add    %edx,%eax
f01206f0:	48                   	dec    %eax
f01206f1:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01206f7:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01206fd:	ba 00 00 00 00       	mov    $0x0,%edx
f0120702:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0120708:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012070e:	29 d0                	sub    %edx,%eax
f0120710:	01 d8                	add    %ebx,%eax
f0120712:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0120717:	39 c1                	cmp    %eax,%ecx
f0120719:	74 17                	je     f0120732 <test_kfree+0x52b>
f012071b:	83 ec 04             	sub    $0x4,%esp
f012071e:	68 60 b2 13 f0       	push   $0xf013b260
f0120723:	68 f7 04 00 00       	push   $0x4f7
f0120728:	68 7a b1 13 f0       	push   $0xf013b17a
f012072d:	e8 d3 fa fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120732:	e8 6f 36 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0120737:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012073a:	74 17                	je     f0120753 <test_kfree+0x54c>
f012073c:	83 ec 04             	sub    $0x4,%esp
f012073f:	68 94 b1 13 f0       	push   $0xf013b194
f0120744:	68 f8 04 00 00       	push   $0x4f8
f0120749:	68 7a b1 13 f0       	push   $0xf013b17a
f012074e:	e8 b2 fa fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120753:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120756:	e8 88 c6 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012075b:	29 c3                	sub    %eax,%ebx
f012075d:	89 d8                	mov    %ebx,%eax
f012075f:	83 f8 01             	cmp    $0x1,%eax
f0120762:	74 17                	je     f012077b <test_kfree+0x574>
f0120764:	83 ec 04             	sub    $0x4,%esp
f0120767:	68 fc b1 13 f0       	push   $0xf013b1fc
f012076c:	68 f9 04 00 00       	push   $0x4f9
f0120771:	68 7a b1 13 f0       	push   $0xf013b17a
f0120776:	e8 8a fa fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012077b:	c7 85 f4 fd ff ff ff 	movl   $0x7ff,-0x20c(%ebp)
f0120782:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0120785:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f012078b:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012078e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120795:	eb 0e                	jmp    f01207a5 <test_kfree+0x59e>
		{
			ptr[i] = 3 ;
f0120797:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012079a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012079d:	01 d0                	add    %edx,%eax
f012079f:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01207a2:	ff 45 f4             	incl   -0xc(%ebp)
f01207a5:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f01207ab:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01207ae:	7f e7                	jg     f0120797 <test_kfree+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01207b0:	e8 2e c6 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01207b5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01207b8:	e8 e9 35 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f01207bd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01207c0:	83 ec 0c             	sub    $0xc,%esp
f01207c3:	68 00 1c 00 00       	push   $0x1c00
f01207c8:	e8 94 72 fe ff       	call   f0107a61 <kmalloc>
f01207cd:	83 c4 10             	add    $0x10,%esp
f01207d0:	89 85 58 fd ff ff    	mov    %eax,-0x2a8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01207d6:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f01207dc:	89 c1                	mov    %eax,%ecx
f01207de:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01207e5:	10 00 00 
f01207e8:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01207ee:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01207f3:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01207f9:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01207ff:	ba 00 00 00 00       	mov    $0x0,%edx
f0120804:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012080a:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0120810:	29 d0                	sub    %edx,%eax
f0120812:	89 c3                	mov    %eax,%ebx
f0120814:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012081b:	10 00 00 
f012081e:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0120823:	0f b6 d0             	movzbl %al,%edx
f0120826:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012082c:	01 d0                	add    %edx,%eax
f012082e:	48                   	dec    %eax
f012082f:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0120835:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012083b:	ba 00 00 00 00       	mov    $0x0,%edx
f0120840:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0120846:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012084c:	29 d0                	sub    %edx,%eax
f012084e:	01 c3                	add    %eax,%ebx
f0120850:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0120857:	10 00 00 
f012085a:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012085f:	0f b6 c0             	movzbl %al,%eax
f0120862:	c1 e0 04             	shl    $0x4,%eax
f0120865:	89 c2                	mov    %eax,%edx
f0120867:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012086d:	01 d0                	add    %edx,%eax
f012086f:	48                   	dec    %eax
f0120870:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0120876:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012087c:	ba 00 00 00 00       	mov    $0x0,%edx
f0120881:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0120887:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012088d:	29 d0                	sub    %edx,%eax
f012088f:	01 d8                	add    %ebx,%eax
f0120891:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0120896:	39 c1                	cmp    %eax,%ecx
f0120898:	74 17                	je     f01208b1 <test_kfree+0x6aa>
f012089a:	83 ec 04             	sub    $0x4,%esp
f012089d:	68 60 b2 13 f0       	push   $0xf013b260
f01208a2:	68 05 05 00 00       	push   $0x505
f01208a7:	68 7a b1 13 f0       	push   $0xf013b17a
f01208ac:	e8 54 f9 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01208b1:	e8 f0 34 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f01208b6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01208b9:	74 17                	je     f01208d2 <test_kfree+0x6cb>
f01208bb:	83 ec 04             	sub    $0x4,%esp
f01208be:	68 94 b1 13 f0       	push   $0xf013b194
f01208c3:	68 06 05 00 00       	push   $0x506
f01208c8:	68 7a b1 13 f0       	push   $0xf013b17a
f01208cd:	e8 33 f9 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01208d2:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01208d5:	e8 09 c5 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01208da:	29 c3                	sub    %eax,%ebx
f01208dc:	89 d8                	mov    %ebx,%eax
f01208de:	83 f8 02             	cmp    $0x2,%eax
f01208e1:	74 17                	je     f01208fa <test_kfree+0x6f3>
f01208e3:	83 ec 04             	sub    $0x4,%esp
f01208e6:	68 fc b1 13 f0       	push   $0xf013b1fc
f01208eb:	68 07 05 00 00       	push   $0x507
f01208f0:	68 7a b1 13 f0       	push   $0xf013b17a
f01208f5:	e8 0b f9 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01208fa:	c7 85 f8 fd ff ff ff 	movl   $0x1bff,-0x208(%ebp)
f0120901:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0120904:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f012090a:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012090d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120914:	eb 0e                	jmp    f0120924 <test_kfree+0x71d>
		{
			ptr[i] = 4 ;
f0120916:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120919:	8b 45 80             	mov    -0x80(%ebp),%eax
f012091c:	01 d0                	add    %edx,%eax
f012091e:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0120921:	ff 45 f4             	incl   -0xc(%ebp)
f0120924:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012092a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012092d:	7f e7                	jg     f0120916 <test_kfree+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012092f:	e8 af c4 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0120934:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120937:	e8 6a 34 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f012093c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012093f:	83 ec 0c             	sub    $0xc,%esp
f0120942:	68 00 fc 2f 00       	push   $0x2ffc00
f0120947:	e8 15 71 fe ff       	call   f0107a61 <kmalloc>
f012094c:	83 c4 10             	add    $0x10,%esp
f012094f:	89 85 5c fd ff ff    	mov    %eax,-0x2a4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120955:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f012095b:	89 c1                	mov    %eax,%ecx
f012095d:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0120964:	10 00 00 
f0120967:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012096d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120972:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0120978:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012097e:	ba 00 00 00 00       	mov    $0x0,%edx
f0120983:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0120989:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012098f:	29 d0                	sub    %edx,%eax
f0120991:	89 c3                	mov    %eax,%ebx
f0120993:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012099a:	10 00 00 
f012099d:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01209a2:	0f b6 d0             	movzbl %al,%edx
f01209a5:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01209ab:	01 d0                	add    %edx,%eax
f01209ad:	48                   	dec    %eax
f01209ae:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f01209b4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01209ba:	ba 00 00 00 00       	mov    $0x0,%edx
f01209bf:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f01209c5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01209cb:	29 d0                	sub    %edx,%eax
f01209cd:	01 c3                	add    %eax,%ebx
f01209cf:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f01209d6:	10 00 00 
f01209d9:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01209de:	0f b6 c0             	movzbl %al,%eax
f01209e1:	c1 e0 04             	shl    $0x4,%eax
f01209e4:	89 c2                	mov    %eax,%edx
f01209e6:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01209ec:	01 d0                	add    %edx,%eax
f01209ee:	48                   	dec    %eax
f01209ef:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01209f5:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01209fb:	ba 00 00 00 00       	mov    $0x0,%edx
f0120a00:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0120a06:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0120a0c:	29 d0                	sub    %edx,%eax
f0120a0e:	01 d8                	add    %ebx,%eax
f0120a10:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0120a15:	39 c1                	cmp    %eax,%ecx
f0120a17:	74 17                	je     f0120a30 <test_kfree+0x829>
f0120a19:	83 ec 04             	sub    $0x4,%esp
f0120a1c:	68 60 b2 13 f0       	push   $0xf013b260
f0120a21:	68 13 05 00 00       	push   $0x513
f0120a26:	68 7a b1 13 f0       	push   $0xf013b17a
f0120a2b:	e8 d5 f7 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120a30:	e8 71 33 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0120a35:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120a38:	74 17                	je     f0120a51 <test_kfree+0x84a>
f0120a3a:	83 ec 04             	sub    $0x4,%esp
f0120a3d:	68 94 b1 13 f0       	push   $0xf013b194
f0120a42:	68 14 05 00 00       	push   $0x514
f0120a47:	68 7a b1 13 f0       	push   $0xf013b17a
f0120a4c:	e8 b4 f7 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120a51:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120a54:	e8 8a c3 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0120a59:	29 c3                	sub    %eax,%ebx
f0120a5b:	89 d8                	mov    %ebx,%eax
f0120a5d:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120a62:	74 17                	je     f0120a7b <test_kfree+0x874>
f0120a64:	83 ec 04             	sub    $0x4,%esp
f0120a67:	68 fc b1 13 f0       	push   $0xf013b1fc
f0120a6c:	68 15 05 00 00       	push   $0x515
f0120a71:	68 7a b1 13 f0       	push   $0xf013b17a
f0120a76:	e8 8a f7 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0120a7b:	c7 85 fc fd ff ff ff 	movl   $0x2ffbff,-0x204(%ebp)
f0120a82:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0120a85:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0120a8b:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0120a8e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120a95:	eb 0e                	jmp    f0120aa5 <test_kfree+0x89e>
		{
			ptr[i] = 5 ;
f0120a97:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120a9a:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120a9d:	01 d0                	add    %edx,%eax
f0120a9f:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0120aa2:	ff 45 f4             	incl   -0xc(%ebp)
f0120aa5:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0120aab:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120aae:	7f e7                	jg     f0120a97 <test_kfree+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0120ab0:	e8 2e c3 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0120ab5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120ab8:	e8 e9 32 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0120abd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0120ac0:	83 ec 0c             	sub    $0xc,%esp
f0120ac3:	68 00 fc 5f 00       	push   $0x5ffc00
f0120ac8:	e8 94 6f fe ff       	call   f0107a61 <kmalloc>
f0120acd:	83 c4 10             	add    $0x10,%esp
f0120ad0:	89 85 60 fd ff ff    	mov    %eax,-0x2a0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120ad6:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f0120adc:	89 c1                	mov    %eax,%ecx
f0120ade:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0120ae5:	10 00 00 
f0120ae8:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0120aee:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120af3:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0120af9:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0120aff:	ba 00 00 00 00       	mov    $0x0,%edx
f0120b04:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0120b0a:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0120b10:	29 d0                	sub    %edx,%eax
f0120b12:	89 c3                	mov    %eax,%ebx
f0120b14:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0120b1b:	10 00 00 
f0120b1e:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0120b23:	0f b6 d0             	movzbl %al,%edx
f0120b26:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0120b2c:	01 d0                	add    %edx,%eax
f0120b2e:	48                   	dec    %eax
f0120b2f:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0120b35:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0120b3b:	ba 00 00 00 00       	mov    $0x0,%edx
f0120b40:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0120b46:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0120b4c:	29 d0                	sub    %edx,%eax
f0120b4e:	01 c3                	add    %eax,%ebx
f0120b50:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0120b57:	10 00 00 
f0120b5a:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0120b5f:	0f b6 c0             	movzbl %al,%eax
f0120b62:	c1 e0 04             	shl    $0x4,%eax
f0120b65:	89 c2                	mov    %eax,%edx
f0120b67:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0120b6d:	01 d0                	add    %edx,%eax
f0120b6f:	48                   	dec    %eax
f0120b70:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0120b76:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0120b7c:	ba 00 00 00 00       	mov    $0x0,%edx
f0120b81:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0120b87:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0120b8d:	29 d0                	sub    %edx,%eax
f0120b8f:	01 d8                	add    %ebx,%eax
f0120b91:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0120b96:	39 c1                	cmp    %eax,%ecx
f0120b98:	74 17                	je     f0120bb1 <test_kfree+0x9aa>
f0120b9a:	83 ec 04             	sub    $0x4,%esp
f0120b9d:	68 60 b2 13 f0       	push   $0xf013b260
f0120ba2:	68 21 05 00 00       	push   $0x521
f0120ba7:	68 7a b1 13 f0       	push   $0xf013b17a
f0120bac:	e8 54 f6 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120bb1:	e8 f0 31 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0120bb6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120bb9:	74 17                	je     f0120bd2 <test_kfree+0x9cb>
f0120bbb:	83 ec 04             	sub    $0x4,%esp
f0120bbe:	68 94 b1 13 f0       	push   $0xf013b194
f0120bc3:	68 22 05 00 00       	push   $0x522
f0120bc8:	68 7a b1 13 f0       	push   $0xf013b17a
f0120bcd:	e8 33 f6 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120bd2:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120bd5:	e8 09 c2 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0120bda:	29 c3                	sub    %eax,%ebx
f0120bdc:	89 d8                	mov    %ebx,%eax
f0120bde:	3d 00 06 00 00       	cmp    $0x600,%eax
f0120be3:	74 17                	je     f0120bfc <test_kfree+0x9f5>
f0120be5:	83 ec 04             	sub    $0x4,%esp
f0120be8:	68 fc b1 13 f0       	push   $0xf013b1fc
f0120bed:	68 23 05 00 00       	push   $0x523
f0120bf2:	68 7a b1 13 f0       	push   $0xf013b17a
f0120bf7:	e8 09 f6 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0120bfc:	c7 85 00 fe ff ff ff 	movl   $0x5ffbff,-0x200(%ebp)
f0120c03:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0120c06:	e8 d8 c1 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0120c0b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120c0e:	e8 93 31 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0120c13:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0120c16:	83 ec 0c             	sub    $0xc,%esp
f0120c19:	68 00 38 00 00       	push   $0x3800
f0120c1e:	e8 3e 6e fe ff       	call   f0107a61 <kmalloc>
f0120c23:	83 c4 10             	add    $0x10,%esp
f0120c26:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120c2c:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0120c32:	89 c1                	mov    %eax,%ecx
f0120c34:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0120c3b:	10 00 00 
f0120c3e:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0120c44:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120c49:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0120c4f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0120c55:	ba 00 00 00 00       	mov    $0x0,%edx
f0120c5a:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0120c60:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0120c66:	29 d0                	sub    %edx,%eax
f0120c68:	89 c3                	mov    %eax,%ebx
f0120c6a:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0120c71:	10 00 00 
f0120c74:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0120c79:	0f b6 d0             	movzbl %al,%edx
f0120c7c:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0120c82:	01 d0                	add    %edx,%eax
f0120c84:	48                   	dec    %eax
f0120c85:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0120c8b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0120c91:	ba 00 00 00 00       	mov    $0x0,%edx
f0120c96:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0120c9c:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0120ca2:	29 d0                	sub    %edx,%eax
f0120ca4:	01 c3                	add    %eax,%ebx
f0120ca6:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0120cad:	10 00 00 
f0120cb0:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0120cb5:	0f b6 c0             	movzbl %al,%eax
f0120cb8:	c1 e0 04             	shl    $0x4,%eax
f0120cbb:	89 c2                	mov    %eax,%edx
f0120cbd:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0120cc3:	01 d0                	add    %edx,%eax
f0120cc5:	48                   	dec    %eax
f0120cc6:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0120ccc:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0120cd2:	ba 00 00 00 00       	mov    $0x0,%edx
f0120cd7:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0120cdd:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0120ce3:	29 d0                	sub    %edx,%eax
f0120ce5:	01 d8                	add    %ebx,%eax
f0120ce7:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0120cec:	39 c1                	cmp    %eax,%ecx
f0120cee:	74 17                	je     f0120d07 <test_kfree+0xb00>
f0120cf0:	83 ec 04             	sub    $0x4,%esp
f0120cf3:	68 60 b2 13 f0       	push   $0xf013b260
f0120cf8:	68 2a 05 00 00       	push   $0x52a
f0120cfd:	68 7a b1 13 f0       	push   $0xf013b17a
f0120d02:	e8 fe f4 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120d07:	e8 9a 30 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0120d0c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120d0f:	74 17                	je     f0120d28 <test_kfree+0xb21>
f0120d11:	83 ec 04             	sub    $0x4,%esp
f0120d14:	68 94 b1 13 f0       	push   $0xf013b194
f0120d19:	68 2b 05 00 00       	push   $0x52b
f0120d1e:	68 7a b1 13 f0       	push   $0xf013b17a
f0120d23:	e8 dd f4 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120d28:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120d2b:	e8 b3 c0 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0120d30:	29 c3                	sub    %eax,%ebx
f0120d32:	89 d8                	mov    %ebx,%eax
f0120d34:	83 f8 04             	cmp    $0x4,%eax
f0120d37:	74 17                	je     f0120d50 <test_kfree+0xb49>
f0120d39:	83 ec 04             	sub    $0x4,%esp
f0120d3c:	68 fc b1 13 f0       	push   $0xf013b1fc
f0120d41:	68 2c 05 00 00       	push   $0x52c
f0120d46:	68 7a b1 13 f0       	push   $0xf013b17a
f0120d4b:	e8 b5 f4 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0120d50:	c7 85 04 fe ff ff ff 	movl   $0x37ff,-0x1fc(%ebp)
f0120d57:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0120d5a:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0120d60:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0120d63:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120d6a:	eb 0e                	jmp    f0120d7a <test_kfree+0xb73>
		{
			ptr[i] = 7 ;
f0120d6c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120d6f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120d72:	01 d0                	add    %edx,%eax
f0120d74:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0120d77:	ff 45 f4             	incl   -0xc(%ebp)
f0120d7a:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f0120d80:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120d83:	7f e7                	jg     f0120d6c <test_kfree+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0120d85:	e8 59 c0 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0120d8a:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0120d90:	e8 11 30 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0120d95:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f0120d9b:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f0120da1:	83 ec 0c             	sub    $0xc,%esp
f0120da4:	50                   	push   %eax
f0120da5:	e8 cd 6d fe ff       	call   f0107b77 <kfree>
f0120daa:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120dad:	e8 f4 2f fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0120db2:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0120db8:	74 17                	je     f0120dd1 <test_kfree+0xbca>
f0120dba:	83 ec 04             	sub    $0x4,%esp
f0120dbd:	68 94 b1 13 f0       	push   $0xf013b194
f0120dc2:	68 3b 05 00 00       	push   $0x53b
f0120dc7:	68 7a b1 13 f0       	push   $0xf013b17a
f0120dcc:	e8 34 f4 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0120dd1:	e8 0d c0 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0120dd6:	89 c2                	mov    %eax,%edx
f0120dd8:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120dde:	29 c2                	sub    %eax,%edx
f0120de0:	89 d0                	mov    %edx,%eax
f0120de2:	3d 00 02 00 00       	cmp    $0x200,%eax
f0120de7:	74 17                	je     f0120e00 <test_kfree+0xbf9>
f0120de9:	83 ec 04             	sub    $0x4,%esp
f0120dec:	68 04 b9 13 f0       	push   $0xf013b904
f0120df1:	68 3c 05 00 00       	push   $0x53c
f0120df6:	68 7a b1 13 f0       	push   $0xf013b17a
f0120dfb:	e8 05 f4 fd ff       	call   f0100205 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0120e00:	e8 de bf fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0120e05:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120e0b:	e8 96 2f fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0120e10:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f0120e16:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f0120e1c:	83 ec 0c             	sub    $0xc,%esp
f0120e1f:	50                   	push   %eax
f0120e20:	e8 52 6d fe ff       	call   f0107b77 <kfree>
f0120e25:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120e28:	e8 79 2f fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0120e2d:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0120e33:	74 17                	je     f0120e4c <test_kfree+0xc45>
f0120e35:	83 ec 04             	sub    $0x4,%esp
f0120e38:	68 94 b1 13 f0       	push   $0xf013b194
f0120e3d:	68 42 05 00 00       	push   $0x542
f0120e42:	68 7a b1 13 f0       	push   $0xf013b17a
f0120e47:	e8 b9 f3 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0120e4c:	e8 92 bf fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0120e51:	89 c2                	mov    %eax,%edx
f0120e53:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120e59:	29 c2                	sub    %eax,%edx
f0120e5b:	89 d0                	mov    %edx,%eax
f0120e5d:	83 f8 01             	cmp    $0x1,%eax
f0120e60:	74 17                	je     f0120e79 <test_kfree+0xc72>
f0120e62:	83 ec 04             	sub    $0x4,%esp
f0120e65:	68 04 b9 13 f0       	push   $0xf013b904
f0120e6a:	68 43 05 00 00       	push   $0x543
f0120e6f:	68 7a b1 13 f0       	push   $0xf013b17a
f0120e74:	e8 8c f3 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0120e79:	e8 65 bf fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0120e7e:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120e84:	e8 1d 2f fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0120e89:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f0120e8f:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f0120e95:	83 ec 0c             	sub    $0xc,%esp
f0120e98:	50                   	push   %eax
f0120e99:	e8 d9 6c fe ff       	call   f0107b77 <kfree>
f0120e9e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120ea1:	e8 00 2f fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0120ea6:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0120eac:	74 17                	je     f0120ec5 <test_kfree+0xcbe>
f0120eae:	83 ec 04             	sub    $0x4,%esp
f0120eb1:	68 94 b1 13 f0       	push   $0xf013b194
f0120eb6:	68 49 05 00 00       	push   $0x549
f0120ebb:	68 7a b1 13 f0       	push   $0xf013b17a
f0120ec0:	e8 40 f3 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0120ec5:	e8 19 bf fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0120eca:	89 c2                	mov    %eax,%edx
f0120ecc:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120ed2:	29 c2                	sub    %eax,%edx
f0120ed4:	89 d0                	mov    %edx,%eax
f0120ed6:	3d 00 02 00 00       	cmp    $0x200,%eax
f0120edb:	74 17                	je     f0120ef4 <test_kfree+0xced>
f0120edd:	83 ec 04             	sub    $0x4,%esp
f0120ee0:	68 04 b9 13 f0       	push   $0xf013b904
f0120ee5:	68 4a 05 00 00       	push   $0x54a
f0120eea:	68 7a b1 13 f0       	push   $0xf013b17a
f0120eef:	e8 11 f3 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0120ef4:	e8 ea be fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0120ef9:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120eff:	e8 a2 2e fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0120f04:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0120f0a:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f0120f10:	83 ec 0c             	sub    $0xc,%esp
f0120f13:	50                   	push   %eax
f0120f14:	e8 5e 6c fe ff       	call   f0107b77 <kfree>
f0120f19:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120f1c:	e8 85 2e fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0120f21:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0120f27:	74 17                	je     f0120f40 <test_kfree+0xd39>
f0120f29:	83 ec 04             	sub    $0x4,%esp
f0120f2c:	68 94 b1 13 f0       	push   $0xf013b194
f0120f31:	68 50 05 00 00       	push   $0x550
f0120f36:	68 7a b1 13 f0       	push   $0xf013b17a
f0120f3b:	e8 c5 f2 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0120f40:	e8 9e be fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0120f45:	89 c2                	mov    %eax,%edx
f0120f47:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120f4d:	29 c2                	sub    %eax,%edx
f0120f4f:	89 d0                	mov    %edx,%eax
f0120f51:	3d 00 06 00 00       	cmp    $0x600,%eax
f0120f56:	74 17                	je     f0120f6f <test_kfree+0xd68>
f0120f58:	83 ec 04             	sub    $0x4,%esp
f0120f5b:	68 04 b9 13 f0       	push   $0xf013b904
f0120f60:	68 51 05 00 00       	push   $0x551
f0120f65:	68 7a b1 13 f0       	push   $0xf013b17a
f0120f6a:	e8 96 f2 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0120f6f:	83 ec 0c             	sub    $0xc,%esp
f0120f72:	68 3c b9 13 f0       	push   $0xf013b93c
f0120f77:	e8 92 fd fd ff       	call   f0100d0e <cprintf>
f0120f7c:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f0120f7f:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0120f85:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0120f88:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120f8f:	eb 1e                	jmp    f0120faf <test_kfree+0xda8>
		{
			sums[3] += ptr[i] ;
f0120f91:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f0120f97:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120f9a:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120f9d:	01 c8                	add    %ecx,%eax
f0120f9f:	8a 00                	mov    (%eax),%al
f0120fa1:	0f be c0             	movsbl %al,%eax
f0120fa4:	01 d0                	add    %edx,%eax
f0120fa6:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0120fac:	ff 45 f4             	incl   -0xc(%ebp)
f0120faf:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120fb5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120fb8:	7f d7                	jg     f0120f91 <test_kfree+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0120fba:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f0120fc0:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120fc6:	89 c1                	mov    %eax,%ecx
f0120fc8:	01 c9                	add    %ecx,%ecx
f0120fca:	01 c8                	add    %ecx,%eax
f0120fcc:	39 c2                	cmp    %eax,%edx
f0120fce:	74 17                	je     f0120fe7 <test_kfree+0xde0>
f0120fd0:	83 ec 04             	sub    $0x4,%esp
f0120fd3:	68 60 b9 13 f0       	push   $0xf013b960
f0120fd8:	68 5e 05 00 00       	push   $0x55e
f0120fdd:	68 7a b1 13 f0       	push   $0xf013b17a
f0120fe2:	e8 1e f2 fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0120fe7:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0120fed:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0120ff0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120ff7:	eb 1e                	jmp    f0121017 <test_kfree+0xe10>
		{
			sums[4] += ptr[i] ;
f0120ff9:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f0120fff:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0121002:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121005:	01 c8                	add    %ecx,%eax
f0121007:	8a 00                	mov    (%eax),%al
f0121009:	0f be c0             	movsbl %al,%eax
f012100c:	01 d0                	add    %edx,%eax
f012100e:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0121014:	ff 45 f4             	incl   -0xc(%ebp)
f0121017:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012101d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121020:	7f d7                	jg     f0120ff9 <test_kfree+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0121022:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f0121028:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012102e:	c1 e2 02             	shl    $0x2,%edx
f0121031:	39 d0                	cmp    %edx,%eax
f0121033:	74 17                	je     f012104c <test_kfree+0xe45>
f0121035:	83 ec 04             	sub    $0x4,%esp
f0121038:	68 60 b9 13 f0       	push   $0xf013b960
f012103d:	68 66 05 00 00       	push   $0x566
f0121042:	68 7a b1 13 f0       	push   $0xf013b17a
f0121047:	e8 b9 f1 fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f012104c:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0121052:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0121055:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012105c:	eb 1e                	jmp    f012107c <test_kfree+0xe75>
		{
			sums[5] += ptr[i] ;
f012105e:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f0121064:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0121067:	8b 45 80             	mov    -0x80(%ebp),%eax
f012106a:	01 c8                	add    %ecx,%eax
f012106c:	8a 00                	mov    (%eax),%al
f012106e:	0f be c0             	movsbl %al,%eax
f0121071:	01 d0                	add    %edx,%eax
f0121073:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0121079:	ff 45 f4             	incl   -0xc(%ebp)
f012107c:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0121082:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121085:	7f d7                	jg     f012105e <test_kfree+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0121087:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f012108d:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f0121093:	89 d0                	mov    %edx,%eax
f0121095:	c1 e0 02             	shl    $0x2,%eax
f0121098:	01 d0                	add    %edx,%eax
f012109a:	39 c1                	cmp    %eax,%ecx
f012109c:	74 17                	je     f01210b5 <test_kfree+0xeae>
f012109e:	83 ec 04             	sub    $0x4,%esp
f01210a1:	68 60 b9 13 f0       	push   $0xf013b960
f01210a6:	68 6e 05 00 00       	push   $0x56e
f01210ab:	68 7a b1 13 f0       	push   $0xf013b17a
f01210b0:	e8 50 f1 fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f01210b5:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f01210bb:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01210be:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01210c5:	eb 1e                	jmp    f01210e5 <test_kfree+0xede>
		{
			sums[7] += ptr[i] ;
f01210c7:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f01210cd:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01210d0:	8b 45 80             	mov    -0x80(%ebp),%eax
f01210d3:	01 c8                	add    %ecx,%eax
f01210d5:	8a 00                	mov    (%eax),%al
f01210d7:	0f be c0             	movsbl %al,%eax
f01210da:	01 d0                	add    %edx,%eax
f01210dc:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01210e2:	ff 45 f4             	incl   -0xc(%ebp)
f01210e5:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f01210eb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01210ee:	7f d7                	jg     f01210c7 <test_kfree+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f01210f0:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f01210f6:	8b 95 04 fe ff ff    	mov    -0x1fc(%ebp),%edx
f01210fc:	89 d0                	mov    %edx,%eax
f01210fe:	01 c0                	add    %eax,%eax
f0121100:	01 d0                	add    %edx,%eax
f0121102:	01 c0                	add    %eax,%eax
f0121104:	01 d0                	add    %edx,%eax
f0121106:	39 c1                	cmp    %eax,%ecx
f0121108:	74 17                	je     f0121121 <test_kfree+0xf1a>
f012110a:	83 ec 04             	sub    $0x4,%esp
f012110d:	68 60 b9 13 f0       	push   $0xf013b960
f0121112:	68 76 05 00 00       	push   $0x576
f0121117:	68 7a b1 13 f0       	push   $0xf013b17a
f012111c:	e8 e4 f0 fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b30%");
f0121121:	83 ec 0c             	sub    $0xc,%esp
f0121124:	68 93 b9 13 f0       	push   $0xf013b993
f0121129:	e8 e0 fb fd ff       	call   f0100d0e <cprintf>
f012112e:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0121131:	e8 ad bc fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0121136:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121139:	e8 68 2c fe ff       	call   f0103da6 <pf_calculate_free_frames>
f012113e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0121141:	83 ec 0c             	sub    $0xc,%esp
f0121144:	68 00 50 00 00       	push   $0x5000
f0121149:	e8 13 69 fe ff       	call   f0107a61 <kmalloc>
f012114e:	83 c4 10             	add    $0x10,%esp
f0121151:	89 85 68 fd ff ff    	mov    %eax,-0x298(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121157:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f012115d:	89 c1                	mov    %eax,%ecx
f012115f:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0121166:	10 00 00 
f0121169:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012116f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121174:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012117a:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0121180:	ba 00 00 00 00       	mov    $0x0,%edx
f0121185:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012118b:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0121191:	29 d0                	sub    %edx,%eax
f0121193:	89 c3                	mov    %eax,%ebx
f0121195:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f012119c:	10 00 00 
f012119f:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01211a4:	0f b6 d0             	movzbl %al,%edx
f01211a7:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01211ad:	01 d0                	add    %edx,%eax
f01211af:	48                   	dec    %eax
f01211b0:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f01211b6:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01211bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01211c1:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f01211c7:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01211cd:	29 d0                	sub    %edx,%eax
f01211cf:	01 c3                	add    %eax,%ebx
f01211d1:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f01211d8:	10 00 00 
f01211db:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01211e0:	0f b6 c0             	movzbl %al,%eax
f01211e3:	c1 e0 04             	shl    $0x4,%eax
f01211e6:	89 c2                	mov    %eax,%edx
f01211e8:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01211ee:	01 d0                	add    %edx,%eax
f01211f0:	48                   	dec    %eax
f01211f1:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f01211f7:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01211fd:	ba 00 00 00 00       	mov    $0x0,%edx
f0121202:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0121208:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012120e:	29 d0                	sub    %edx,%eax
f0121210:	01 d8                	add    %ebx,%eax
f0121212:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0121217:	39 c1                	cmp    %eax,%ecx
f0121219:	74 17                	je     f0121232 <test_kfree+0x102b>
f012121b:	83 ec 04             	sub    $0x4,%esp
f012121e:	68 60 b2 13 f0       	push   $0xf013b260
f0121223:	68 80 05 00 00       	push   $0x580
f0121228:	68 7a b1 13 f0       	push   $0xf013b17a
f012122d:	e8 d3 ef fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121232:	e8 6f 2b fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0121237:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012123a:	74 17                	je     f0121253 <test_kfree+0x104c>
f012123c:	83 ec 04             	sub    $0x4,%esp
f012123f:	68 94 b1 13 f0       	push   $0xf013b194
f0121244:	68 81 05 00 00       	push   $0x581
f0121249:	68 7a b1 13 f0       	push   $0xf013b17a
f012124e:	e8 b2 ef fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121253:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121256:	e8 88 bb fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012125b:	29 c3                	sub    %eax,%ebx
f012125d:	89 d8                	mov    %ebx,%eax
f012125f:	83 f8 05             	cmp    $0x5,%eax
f0121262:	74 17                	je     f012127b <test_kfree+0x1074>
f0121264:	83 ec 04             	sub    $0x4,%esp
f0121267:	68 fc b1 13 f0       	push   $0xf013b1fc
f012126c:	68 82 05 00 00       	push   $0x582
f0121271:	68 7a b1 13 f0       	push   $0xf013b17a
f0121276:	e8 8a ef fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f012127b:	c7 85 08 fe ff ff ff 	movl   $0x4fff,-0x1f8(%ebp)
f0121282:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0121285:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f012128b:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f012128e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121295:	eb 0e                	jmp    f01212a5 <test_kfree+0x109e>
		{
			ptr[i] = 8 ;
f0121297:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012129a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012129d:	01 d0                	add    %edx,%eax
f012129f:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f01212a2:	ff 45 f4             	incl   -0xc(%ebp)
f01212a5:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f01212ab:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01212ae:	7f e7                	jg     f0121297 <test_kfree+0x1090>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f01212b0:	e8 2e bb fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01212b5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01212b8:	e8 e9 2a fe ff       	call   f0103da6 <pf_calculate_free_frames>
f01212bd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f01212c0:	83 ec 0c             	sub    $0xc,%esp
f01212c3:	68 00 00 10 00       	push   $0x100000
f01212c8:	e8 94 67 fe ff       	call   f0107a61 <kmalloc>
f01212cd:	83 c4 10             	add    $0x10,%esp
f01212d0:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01212d6:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f01212dc:	89 c1                	mov    %eax,%ecx
f01212de:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f01212e5:	10 00 00 
f01212e8:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01212ee:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01212f3:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f01212f9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01212ff:	ba 00 00 00 00       	mov    $0x0,%edx
f0121304:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f012130a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0121310:	29 d0                	sub    %edx,%eax
f0121312:	89 c3                	mov    %eax,%ebx
f0121314:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f012131b:	10 00 00 
f012131e:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0121323:	0f b6 d0             	movzbl %al,%edx
f0121326:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012132c:	01 d0                	add    %edx,%eax
f012132e:	48                   	dec    %eax
f012132f:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0121335:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012133b:	ba 00 00 00 00       	mov    $0x0,%edx
f0121340:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0121346:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012134c:	29 d0                	sub    %edx,%eax
f012134e:	01 c3                	add    %eax,%ebx
f0121350:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0121357:	10 00 00 
f012135a:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012135f:	0f b6 c0             	movzbl %al,%eax
f0121362:	c1 e0 04             	shl    $0x4,%eax
f0121365:	89 c2                	mov    %eax,%edx
f0121367:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012136d:	01 d0                	add    %edx,%eax
f012136f:	48                   	dec    %eax
f0121370:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0121376:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012137c:	ba 00 00 00 00       	mov    $0x0,%edx
f0121381:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0121387:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012138d:	29 d0                	sub    %edx,%eax
f012138f:	01 d8                	add    %ebx,%eax
f0121391:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0121396:	39 c1                	cmp    %eax,%ecx
f0121398:	74 17                	je     f01213b1 <test_kfree+0x11aa>
f012139a:	83 ec 04             	sub    $0x4,%esp
f012139d:	68 60 b2 13 f0       	push   $0xf013b260
f01213a2:	68 8e 05 00 00       	push   $0x58e
f01213a7:	68 7a b1 13 f0       	push   $0xf013b17a
f01213ac:	e8 54 ee fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01213b1:	e8 f0 29 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f01213b6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01213b9:	74 17                	je     f01213d2 <test_kfree+0x11cb>
f01213bb:	83 ec 04             	sub    $0x4,%esp
f01213be:	68 94 b1 13 f0       	push   $0xf013b194
f01213c3:	68 8f 05 00 00       	push   $0x58f
f01213c8:	68 7a b1 13 f0       	push   $0xf013b17a
f01213cd:	e8 33 ee fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f01213d2:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01213d5:	e8 09 ba fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01213da:	29 c3                	sub    %eax,%ebx
f01213dc:	89 d8                	mov    %ebx,%eax
f01213de:	3d 00 01 00 00       	cmp    $0x100,%eax
f01213e3:	74 17                	je     f01213fc <test_kfree+0x11f5>
f01213e5:	83 ec 04             	sub    $0x4,%esp
f01213e8:	68 fc b1 13 f0       	push   $0xf013b1fc
f01213ed:	68 90 05 00 00       	push   $0x590
f01213f2:	68 7a b1 13 f0       	push   $0xf013b17a
f01213f7:	e8 09 ee fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f01213fc:	c7 85 0c fe ff ff ff 	movl   $0xfffff,-0x1f4(%ebp)
f0121403:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0121406:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012140c:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f012140f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121416:	eb 0e                	jmp    f0121426 <test_kfree+0x121f>
		{
			ptr[i] = 9 ;
f0121418:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012141b:	8b 45 80             	mov    -0x80(%ebp),%eax
f012141e:	01 d0                	add    %edx,%eax
f0121420:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0121423:	ff 45 f4             	incl   -0xc(%ebp)
f0121426:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012142c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012142f:	7f e7                	jg     f0121418 <test_kfree+0x1211>
		{
			ptr[i] = 9 ;
		}

		if (isKHeapPlacementStrategyNEXTFIT())
f0121431:	e8 ac 66 ff ff       	call   f0117ae2 <isKHeapPlacementStrategyNEXTFIT>
f0121436:	84 c0                	test   %al,%al
f0121438:	0f 84 ac 06 00 00    	je     f0121aea <test_kfree+0x18e3>
		{
			//Allocate Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f012143e:	e8 a0 b9 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0121443:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121446:	e8 5b 29 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f012144b:	89 45 cc             	mov    %eax,-0x34(%ebp)
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f012144e:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0121455:	10 00 00 
f0121458:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012145e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121463:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0121469:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012146f:	ba 00 00 00 00       	mov    $0x0,%edx
f0121474:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012147a:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0121480:	29 d0                	sub    %edx,%eax
f0121482:	89 c1                	mov    %eax,%ecx
f0121484:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012148b:	10 00 00 
f012148e:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0121493:	0f b6 d0             	movzbl %al,%edx
f0121496:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012149c:	01 d0                	add    %edx,%eax
f012149e:	48                   	dec    %eax
f012149f:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f01214a5:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01214ab:	ba 00 00 00 00       	mov    $0x0,%edx
f01214b0:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f01214b6:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01214bc:	29 d0                	sub    %edx,%eax
f01214be:	01 c1                	add    %eax,%ecx
f01214c0:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f01214c7:	10 00 00 
f01214ca:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01214cf:	0f b6 c0             	movzbl %al,%eax
f01214d2:	c1 e0 04             	shl    $0x4,%eax
f01214d5:	89 c2                	mov    %eax,%edx
f01214d7:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01214dd:	01 d0                	add    %edx,%eax
f01214df:	48                   	dec    %eax
f01214e0:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f01214e6:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01214ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01214f1:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f01214f7:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01214fd:	29 d0                	sub    %edx,%eax
f01214ff:	01 c8                	add    %ecx,%eax
f0121501:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0121506:	29 c2                	sub    %eax,%edx
f0121508:	89 d0                	mov    %edx,%eax
f012150a:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
			ptr_allocations[10] = kmalloc(reqAllocatedSpace);
f0121510:	83 ec 0c             	sub    $0xc,%esp
f0121513:	ff b5 b4 fe ff ff    	pushl  -0x14c(%ebp)
f0121519:	e8 43 65 fe ff       	call   f0107a61 <kmalloc>
f012151e:	83 c4 10             	add    $0x10,%esp
f0121521:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
			if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121527:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f012152d:	89 c1                	mov    %eax,%ecx
f012152f:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f0121536:	10 00 00 
f0121539:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012153f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121544:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f012154a:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0121550:	ba 00 00 00 00       	mov    $0x0,%edx
f0121555:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f012155b:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0121561:	29 d0                	sub    %edx,%eax
f0121563:	89 c3                	mov    %eax,%ebx
f0121565:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f012156c:	10 00 00 
f012156f:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0121574:	0f b6 d0             	movzbl %al,%edx
f0121577:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012157d:	01 d0                	add    %edx,%eax
f012157f:	48                   	dec    %eax
f0121580:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0121586:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012158c:	ba 00 00 00 00       	mov    $0x0,%edx
f0121591:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0121597:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012159d:	29 d0                	sub    %edx,%eax
f012159f:	01 c3                	add    %eax,%ebx
f01215a1:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f01215a8:	10 00 00 
f01215ab:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01215b0:	0f b6 c0             	movzbl %al,%eax
f01215b3:	c1 e0 04             	shl    $0x4,%eax
f01215b6:	89 c2                	mov    %eax,%edx
f01215b8:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01215be:	01 d0                	add    %edx,%eax
f01215c0:	48                   	dec    %eax
f01215c1:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f01215c7:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01215cd:	ba 00 00 00 00       	mov    $0x0,%edx
f01215d2:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f01215d8:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01215de:	29 d0                	sub    %edx,%eax
f01215e0:	01 d8                	add    %ebx,%eax
f01215e2:	2d 00 f0 1e 09       	sub    $0x91ef000,%eax
f01215e7:	39 c1                	cmp    %eax,%ecx
f01215e9:	74 17                	je     f0121602 <test_kfree+0x13fb>
f01215eb:	83 ec 04             	sub    $0x4,%esp
f01215ee:	68 60 b2 13 f0       	push   $0xf013b260
f01215f3:	68 9f 05 00 00       	push   $0x59f
f01215f8:	68 7a b1 13 f0       	push   $0xf013b17a
f01215fd:	e8 03 ec fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121602:	e8 9f 27 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0121607:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012160a:	74 17                	je     f0121623 <test_kfree+0x141c>
f012160c:	83 ec 04             	sub    $0x4,%esp
f012160f:	68 94 b1 13 f0       	push   $0xf013b194
f0121614:	68 a0 05 00 00       	push   $0x5a0
f0121619:	68 7a b1 13 f0       	push   $0xf013b17a
f012161e:	e8 e2 eb fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121623:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121626:	e8 b8 b7 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012162b:	29 c3                	sub    %eax,%ebx
f012162d:	89 da                	mov    %ebx,%edx
f012162f:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0121635:	c1 e8 0c             	shr    $0xc,%eax
f0121638:	39 c2                	cmp    %eax,%edx
f012163a:	74 17                	je     f0121653 <test_kfree+0x144c>
f012163c:	83 ec 04             	sub    $0x4,%esp
f012163f:	68 fc b1 13 f0       	push   $0xf013b1fc
f0121644:	68 a1 05 00 00       	push   $0x5a1
f0121649:	68 7a b1 13 f0       	push   $0xf013b17a
f012164e:	e8 b2 eb fd ff       	call   f0100205 <_panic>
			lastIndices[10] = (reqAllocatedSpace)/sizeof(char) - 1;
f0121653:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0121659:	48                   	dec    %eax
f012165a:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
			ptr = (char*)ptr_allocations[10];
f0121660:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0121666:	89 45 80             	mov    %eax,-0x80(%ebp)
//				ptr[i] = 10;
//			}

			//Allocate in merged freed space FROM the beginning
			//3 MB
			freeFrames = sys_calculate_free_frames() ;
f0121669:	e8 75 b7 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012166e:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121671:	e8 30 27 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0121676:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[11] = kmalloc(3*Mega);
f0121679:	83 ec 0c             	sub    $0xc,%esp
f012167c:	68 00 00 30 00       	push   $0x300000
f0121681:	e8 db 63 fe ff       	call   f0107a61 <kmalloc>
f0121686:	83 c4 10             	add    $0x10,%esp
f0121689:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012168f:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0121695:	89 c1                	mov    %eax,%ecx
f0121697:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f012169e:	10 00 00 
f01216a1:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01216a7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01216ac:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f01216b2:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01216b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01216bd:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f01216c3:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01216c9:	29 d0                	sub    %edx,%eax
f01216cb:	89 c3                	mov    %eax,%ebx
f01216cd:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f01216d4:	10 00 00 
f01216d7:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01216dc:	0f b6 d0             	movzbl %al,%edx
f01216df:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01216e5:	01 d0                	add    %edx,%eax
f01216e7:	48                   	dec    %eax
f01216e8:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f01216ee:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f01216f4:	ba 00 00 00 00       	mov    $0x0,%edx
f01216f9:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f01216ff:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0121705:	29 d0                	sub    %edx,%eax
f0121707:	01 c3                	add    %eax,%ebx
f0121709:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f0121710:	10 00 00 
f0121713:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0121718:	0f b6 c0             	movzbl %al,%eax
f012171b:	c1 e0 04             	shl    $0x4,%eax
f012171e:	89 c2                	mov    %eax,%edx
f0121720:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0121726:	01 d0                	add    %edx,%eax
f0121728:	48                   	dec    %eax
f0121729:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f012172f:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0121735:	ba 00 00 00 00       	mov    $0x0,%edx
f012173a:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f0121740:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0121746:	29 d0                	sub    %edx,%eax
f0121748:	01 d8                	add    %ebx,%eax
f012174a:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012174f:	39 c1                	cmp    %eax,%ecx
f0121751:	74 17                	je     f012176a <test_kfree+0x1563>
f0121753:	83 ec 04             	sub    $0x4,%esp
f0121756:	68 60 b2 13 f0       	push   $0xf013b260
f012175b:	68 ae 05 00 00       	push   $0x5ae
f0121760:	68 7a b1 13 f0       	push   $0xf013b17a
f0121765:	e8 9b ea fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012176a:	e8 37 26 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f012176f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121772:	74 17                	je     f012178b <test_kfree+0x1584>
f0121774:	83 ec 04             	sub    $0x4,%esp
f0121777:	68 94 b1 13 f0       	push   $0xf013b194
f012177c:	68 af 05 00 00       	push   $0x5af
f0121781:	68 7a b1 13 f0       	push   $0xf013b17a
f0121786:	e8 7a ea fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012178b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012178e:	e8 50 b6 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0121793:	29 c3                	sub    %eax,%ebx
f0121795:	89 d8                	mov    %ebx,%eax
f0121797:	3d 00 03 00 00       	cmp    $0x300,%eax
f012179c:	74 17                	je     f01217b5 <test_kfree+0x15ae>
f012179e:	83 ec 04             	sub    $0x4,%esp
f01217a1:	68 fc b1 13 f0       	push   $0xf013b1fc
f01217a6:	68 b0 05 00 00       	push   $0x5b0
f01217ab:	68 7a b1 13 f0       	push   $0xf013b17a
f01217b0:	e8 50 ea fd ff       	call   f0100205 <_panic>
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
f01217b5:	c7 85 14 fe ff ff ff 	movl   $0x2fffff,-0x1ec(%ebp)
f01217bc:	ff 2f 00 
			ptr = (char*)ptr_allocations[11];
f01217bf:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f01217c5:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[11]; ++i)
f01217c8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01217cf:	eb 0e                	jmp    f01217df <test_kfree+0x15d8>
			{
				ptr[i] = 8 ;
f01217d1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01217d4:	8b 45 80             	mov    -0x80(%ebp),%eax
f01217d7:	01 d0                	add    %edx,%eax
f01217d9:	c6 00 08             	movb   $0x8,(%eax)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[11];
			for (i = 0; i < lastIndices[11]; ++i)
f01217dc:	ff 45 f4             	incl   -0xc(%ebp)
f01217df:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f01217e5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01217e8:	7f e7                	jg     f01217d1 <test_kfree+0x15ca>
			{
				ptr[i] = 8 ;
			}

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f01217ea:	e8 f4 b5 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01217ef:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01217f2:	e8 af 25 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f01217f7:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[12] = kmalloc(2*kilo);
f01217fa:	83 ec 0c             	sub    $0xc,%esp
f01217fd:	68 00 08 00 00       	push   $0x800
f0121802:	e8 5a 62 fe ff       	call   f0107a61 <kmalloc>
f0121807:	83 c4 10             	add    $0x10,%esp
f012180a:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121810:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0121816:	89 c1                	mov    %eax,%ecx
f0121818:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f012181f:	10 00 00 
f0121822:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0121828:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012182d:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f0121833:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0121839:	ba 00 00 00 00       	mov    $0x0,%edx
f012183e:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f0121844:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012184a:	29 d0                	sub    %edx,%eax
f012184c:	89 c3                	mov    %eax,%ebx
f012184e:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0121855:	10 00 00 
f0121858:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012185d:	0f b6 d0             	movzbl %al,%edx
f0121860:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0121866:	01 d0                	add    %edx,%eax
f0121868:	48                   	dec    %eax
f0121869:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f012186f:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0121875:	ba 00 00 00 00       	mov    $0x0,%edx
f012187a:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0121880:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0121886:	29 d0                	sub    %edx,%eax
f0121888:	01 c3                	add    %eax,%ebx
f012188a:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f0121891:	10 00 00 
f0121894:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0121899:	0f b6 c0             	movzbl %al,%eax
f012189c:	c1 e0 04             	shl    $0x4,%eax
f012189f:	89 c2                	mov    %eax,%edx
f01218a1:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01218a7:	01 d0                	add    %edx,%eax
f01218a9:	48                   	dec    %eax
f01218aa:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f01218b0:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01218b6:	ba 00 00 00 00       	mov    $0x0,%edx
f01218bb:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f01218c1:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01218c7:	29 d0                	sub    %edx,%eax
f01218c9:	01 d8                	add    %ebx,%eax
f01218cb:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f01218d0:	39 c1                	cmp    %eax,%ecx
f01218d2:	74 17                	je     f01218eb <test_kfree+0x16e4>
f01218d4:	83 ec 04             	sub    $0x4,%esp
f01218d7:	68 60 b2 13 f0       	push   $0xf013b260
f01218dc:	68 bc 05 00 00       	push   $0x5bc
f01218e1:	68 7a b1 13 f0       	push   $0xf013b17a
f01218e6:	e8 1a e9 fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01218eb:	e8 b6 24 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f01218f0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01218f3:	74 17                	je     f012190c <test_kfree+0x1705>
f01218f5:	83 ec 04             	sub    $0x4,%esp
f01218f8:	68 94 b1 13 f0       	push   $0xf013b194
f01218fd:	68 bd 05 00 00       	push   $0x5bd
f0121902:	68 7a b1 13 f0       	push   $0xf013b17a
f0121907:	e8 f9 e8 fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012190c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012190f:	e8 cf b4 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0121914:	29 c3                	sub    %eax,%ebx
f0121916:	89 d8                	mov    %ebx,%eax
f0121918:	83 f8 01             	cmp    $0x1,%eax
f012191b:	74 17                	je     f0121934 <test_kfree+0x172d>
f012191d:	83 ec 04             	sub    $0x4,%esp
f0121920:	68 fc b1 13 f0       	push   $0xf013b1fc
f0121925:	68 be 05 00 00       	push   $0x5be
f012192a:	68 7a b1 13 f0       	push   $0xf013b17a
f012192f:	e8 d1 e8 fd ff       	call   f0100205 <_panic>
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
f0121934:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f012193b:	07 00 00 
			ptr = (char*)ptr_allocations[12];
f012193e:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0121944:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[12]; ++i)
f0121947:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012194e:	eb 0e                	jmp    f012195e <test_kfree+0x1757>
			{
				ptr[i] = 9 ;
f0121950:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121953:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121956:	01 d0                	add    %edx,%eax
f0121958:	c6 00 09             	movb   $0x9,(%eax)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[12];
			for (i = 0; i < lastIndices[12]; ++i)
f012195b:	ff 45 f4             	incl   -0xc(%ebp)
f012195e:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0121964:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121967:	7f e7                	jg     f0121950 <test_kfree+0x1749>
			{
				ptr[i] = 9 ;
			}

			//1 MB
			freeFrames = sys_calculate_free_frames() ;
f0121969:	e8 75 b4 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012196e:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121971:	e8 30 24 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0121976:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[13] = kmalloc(1*Mega);
f0121979:	83 ec 0c             	sub    $0xc,%esp
f012197c:	68 00 00 10 00       	push   $0x100000
f0121981:	e8 db 60 fe ff       	call   f0107a61 <kmalloc>
f0121986:	83 c4 10             	add    $0x10,%esp
f0121989:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012198f:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0121995:	89 c1                	mov    %eax,%ecx
f0121997:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f012199e:	10 00 00 
f01219a1:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01219a7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01219ac:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f01219b2:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01219b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01219bd:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f01219c3:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01219c9:	29 d0                	sub    %edx,%eax
f01219cb:	89 c3                	mov    %eax,%ebx
f01219cd:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f01219d4:	10 00 00 
f01219d7:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01219dc:	0f b6 d0             	movzbl %al,%edx
f01219df:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01219e5:	01 d0                	add    %edx,%eax
f01219e7:	48                   	dec    %eax
f01219e8:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f01219ee:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01219f4:	ba 00 00 00 00       	mov    $0x0,%edx
f01219f9:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f01219ff:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0121a05:	29 d0                	sub    %edx,%eax
f0121a07:	01 c3                	add    %eax,%ebx
f0121a09:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f0121a10:	10 00 00 
f0121a13:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0121a18:	0f b6 c0             	movzbl %al,%eax
f0121a1b:	c1 e0 04             	shl    $0x4,%eax
f0121a1e:	89 c2                	mov    %eax,%edx
f0121a20:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0121a26:	01 d0                	add    %edx,%eax
f0121a28:	48                   	dec    %eax
f0121a29:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f0121a2f:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0121a35:	ba 00 00 00 00       	mov    $0x0,%edx
f0121a3a:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f0121a40:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0121a46:	29 d0                	sub    %edx,%eax
f0121a48:	01 d8                	add    %ebx,%eax
f0121a4a:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f0121a4f:	39 c1                	cmp    %eax,%ecx
f0121a51:	74 17                	je     f0121a6a <test_kfree+0x1863>
f0121a53:	83 ec 04             	sub    $0x4,%esp
f0121a56:	68 60 b2 13 f0       	push   $0xf013b260
f0121a5b:	68 ca 05 00 00       	push   $0x5ca
f0121a60:	68 7a b1 13 f0       	push   $0xf013b17a
f0121a65:	e8 9b e7 fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121a6a:	e8 37 23 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0121a6f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121a72:	74 17                	je     f0121a8b <test_kfree+0x1884>
f0121a74:	83 ec 04             	sub    $0x4,%esp
f0121a77:	68 94 b1 13 f0       	push   $0xf013b194
f0121a7c:	68 cb 05 00 00       	push   $0x5cb
f0121a81:	68 7a b1 13 f0       	push   $0xf013b17a
f0121a86:	e8 7a e7 fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121a8b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121a8e:	e8 50 b3 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0121a93:	29 c3                	sub    %eax,%ebx
f0121a95:	89 d8                	mov    %ebx,%eax
f0121a97:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121a9c:	74 17                	je     f0121ab5 <test_kfree+0x18ae>
f0121a9e:	83 ec 04             	sub    $0x4,%esp
f0121aa1:	68 fc b1 13 f0       	push   $0xf013b1fc
f0121aa6:	68 cc 05 00 00       	push   $0x5cc
f0121aab:	68 7a b1 13 f0       	push   $0xf013b17a
f0121ab0:	e8 50 e7 fd ff       	call   f0100205 <_panic>
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
f0121ab5:	c7 85 1c fe ff ff ff 	movl   $0xfffff,-0x1e4(%ebp)
f0121abc:	ff 0f 00 
			ptr = (char*)ptr_allocations[13];
f0121abf:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0121ac5:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[13]; ++i)
f0121ac8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121acf:	eb 0e                	jmp    f0121adf <test_kfree+0x18d8>
			{
				ptr[i] = 10 ;
f0121ad1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121ad4:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121ad7:	01 d0                	add    %edx,%eax
f0121ad9:	c6 00 0a             	movb   $0xa,(%eax)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[13];
			for (i = 0; i < lastIndices[13]; ++i)
f0121adc:	ff 45 f4             	incl   -0xc(%ebp)
f0121adf:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0121ae5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121ae8:	7f e7                	jg     f0121ad1 <test_kfree+0x18ca>
			{
				ptr[i] = 10 ;
			}
		}
	}
	cprintf("\b\b\b45%");
f0121aea:	83 ec 0c             	sub    $0xc,%esp
f0121aed:	68 9a b9 13 f0       	push   $0xf013b99a
f0121af2:	e8 17 f2 fd ff       	call   f0100d0e <cprintf>
f0121af7:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0121afa:	e8 e4 b2 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0121aff:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121b02:	e8 9f 22 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0121b07:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0121b0a:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0121b10:	83 ec 0c             	sub    $0xc,%esp
f0121b13:	50                   	push   %eax
f0121b14:	e8 5e 60 fe ff       	call   f0107b77 <kfree>
f0121b19:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121b1c:	e8 85 22 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0121b21:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121b24:	74 17                	je     f0121b3d <test_kfree+0x1936>
f0121b26:	83 ec 04             	sub    $0x4,%esp
f0121b29:	68 94 b1 13 f0       	push   $0xf013b194
f0121b2e:	68 dd 05 00 00       	push   $0x5dd
f0121b33:	68 7a b1 13 f0       	push   $0xf013b17a
f0121b38:	e8 c8 e6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0121b3d:	e8 a1 b2 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0121b42:	89 c2                	mov    %eax,%edx
f0121b44:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121b47:	29 c2                	sub    %eax,%edx
f0121b49:	89 d0                	mov    %edx,%eax
f0121b4b:	83 f8 02             	cmp    $0x2,%eax
f0121b4e:	74 17                	je     f0121b67 <test_kfree+0x1960>
f0121b50:	83 ec 04             	sub    $0x4,%esp
f0121b53:	68 04 b9 13 f0       	push   $0xf013b904
f0121b58:	68 de 05 00 00       	push   $0x5de
f0121b5d:	68 7a b1 13 f0       	push   $0xf013b17a
f0121b62:	e8 9e e6 fd ff       	call   f0100205 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0121b67:	e8 77 b2 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0121b6c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121b6f:	e8 32 22 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0121b74:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0121b77:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0121b7d:	83 ec 0c             	sub    $0xc,%esp
f0121b80:	50                   	push   %eax
f0121b81:	e8 f1 5f fe ff       	call   f0107b77 <kfree>
f0121b86:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121b89:	e8 18 22 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0121b8e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121b91:	74 17                	je     f0121baa <test_kfree+0x19a3>
f0121b93:	83 ec 04             	sub    $0x4,%esp
f0121b96:	68 94 b1 13 f0       	push   $0xf013b194
f0121b9b:	68 e4 05 00 00       	push   $0x5e4
f0121ba0:	68 7a b1 13 f0       	push   $0xf013b17a
f0121ba5:	e8 5b e6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121baa:	e8 34 b2 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0121baf:	89 c2                	mov    %eax,%edx
f0121bb1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121bb4:	29 c2                	sub    %eax,%edx
f0121bb6:	89 d0                	mov    %edx,%eax
f0121bb8:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121bbd:	74 17                	je     f0121bd6 <test_kfree+0x19cf>
f0121bbf:	83 ec 04             	sub    $0x4,%esp
f0121bc2:	68 04 b9 13 f0       	push   $0xf013b904
f0121bc7:	68 e5 05 00 00       	push   $0x5e5
f0121bcc:	68 7a b1 13 f0       	push   $0xf013b17a
f0121bd1:	e8 2f e6 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121bd6:	e8 08 b2 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0121bdb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121bde:	e8 c3 21 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0121be3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0121be6:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0121bec:	83 ec 0c             	sub    $0xc,%esp
f0121bef:	50                   	push   %eax
f0121bf0:	e8 82 5f fe ff       	call   f0107b77 <kfree>
f0121bf5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121bf8:	e8 a9 21 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0121bfd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121c00:	74 17                	je     f0121c19 <test_kfree+0x1a12>
f0121c02:	83 ec 04             	sub    $0x4,%esp
f0121c05:	68 94 b1 13 f0       	push   $0xf013b194
f0121c0a:	68 eb 05 00 00       	push   $0x5eb
f0121c0f:	68 7a b1 13 f0       	push   $0xf013b17a
f0121c14:	e8 ec e5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0121c19:	e8 c5 b1 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0121c1e:	89 c2                	mov    %eax,%edx
f0121c20:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121c23:	29 c2                	sub    %eax,%edx
f0121c25:	89 d0                	mov    %edx,%eax
f0121c27:	83 f8 01             	cmp    $0x1,%eax
f0121c2a:	74 17                	je     f0121c43 <test_kfree+0x1a3c>
f0121c2c:	83 ec 04             	sub    $0x4,%esp
f0121c2f:	68 04 b9 13 f0       	push   $0xf013b904
f0121c34:	68 ec 05 00 00       	push   $0x5ec
f0121c39:	68 7a b1 13 f0       	push   $0xf013b17a
f0121c3e:	e8 c2 e5 fd ff       	call   f0100205 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0121c43:	e8 9b b1 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0121c48:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121c4b:	e8 56 21 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0121c50:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0121c53:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0121c59:	83 ec 0c             	sub    $0xc,%esp
f0121c5c:	50                   	push   %eax
f0121c5d:	e8 15 5f fe ff       	call   f0107b77 <kfree>
f0121c62:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121c65:	e8 3c 21 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0121c6a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121c6d:	74 17                	je     f0121c86 <test_kfree+0x1a7f>
f0121c6f:	83 ec 04             	sub    $0x4,%esp
f0121c72:	68 94 b1 13 f0       	push   $0xf013b194
f0121c77:	68 f2 05 00 00       	push   $0x5f2
f0121c7c:	68 7a b1 13 f0       	push   $0xf013b17a
f0121c81:	e8 7f e5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0121c86:	e8 58 b1 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0121c8b:	89 c2                	mov    %eax,%edx
f0121c8d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121c90:	29 c2                	sub    %eax,%edx
f0121c92:	89 d0                	mov    %edx,%eax
f0121c94:	83 f8 04             	cmp    $0x4,%eax
f0121c97:	74 17                	je     f0121cb0 <test_kfree+0x1aa9>
f0121c99:	83 ec 04             	sub    $0x4,%esp
f0121c9c:	68 04 b9 13 f0       	push   $0xf013b904
f0121ca1:	68 f3 05 00 00       	push   $0x5f3
f0121ca6:	68 7a b1 13 f0       	push   $0xf013b17a
f0121cab:	e8 55 e5 fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0121cb0:	e8 2e b1 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0121cb5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121cb8:	e8 e9 20 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0121cbd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0121cc0:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0121cc6:	83 ec 0c             	sub    $0xc,%esp
f0121cc9:	50                   	push   %eax
f0121cca:	e8 a8 5e fe ff       	call   f0107b77 <kfree>
f0121ccf:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121cd2:	e8 cf 20 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0121cd7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121cda:	74 17                	je     f0121cf3 <test_kfree+0x1aec>
f0121cdc:	83 ec 04             	sub    $0x4,%esp
f0121cdf:	68 94 b1 13 f0       	push   $0xf013b194
f0121ce4:	68 f9 05 00 00       	push   $0x5f9
f0121ce9:	68 7a b1 13 f0       	push   $0xf013b17a
f0121cee:	e8 12 e5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f0121cf3:	e8 eb b0 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0121cf8:	89 c2                	mov    %eax,%edx
f0121cfa:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121cfd:	29 c2                	sub    %eax,%edx
f0121cff:	89 d0                	mov    %edx,%eax
f0121d01:	83 f8 05             	cmp    $0x5,%eax
f0121d04:	74 17                	je     f0121d1d <test_kfree+0x1b16>
f0121d06:	83 ec 04             	sub    $0x4,%esp
f0121d09:	68 04 b9 13 f0       	push   $0xf013b904
f0121d0e:	68 fa 05 00 00       	push   $0x5fa
f0121d13:	68 7a b1 13 f0       	push   $0xf013b17a
f0121d18:	e8 e8 e4 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0121d1d:	e8 c1 b0 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0121d22:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121d25:	e8 7c 20 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0121d2a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0121d2d:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0121d33:	83 ec 0c             	sub    $0xc,%esp
f0121d36:	50                   	push   %eax
f0121d37:	e8 3b 5e fe ff       	call   f0107b77 <kfree>
f0121d3c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121d3f:	e8 62 20 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0121d44:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121d47:	74 17                	je     f0121d60 <test_kfree+0x1b59>
f0121d49:	83 ec 04             	sub    $0x4,%esp
f0121d4c:	68 94 b1 13 f0       	push   $0xf013b194
f0121d51:	68 00 06 00 00       	push   $0x600
f0121d56:	68 7a b1 13 f0       	push   $0xf013b17a
f0121d5b:	e8 a5 e4 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0121d60:	e8 7e b0 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0121d65:	89 c2                	mov    %eax,%edx
f0121d67:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121d6a:	29 c2                	sub    %eax,%edx
f0121d6c:	89 d0                	mov    %edx,%eax
f0121d6e:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121d73:	74 17                	je     f0121d8c <test_kfree+0x1b85>
f0121d75:	83 ec 04             	sub    $0x4,%esp
f0121d78:	68 04 b9 13 f0       	push   $0xf013b904
f0121d7d:	68 01 06 00 00       	push   $0x601
f0121d82:	68 7a b1 13 f0       	push   $0xf013b17a
f0121d87:	e8 79 e4 fd ff       	call   f0100205 <_panic>

		if (isKHeapPlacementStrategyNEXTFIT())
f0121d8c:	e8 51 5d ff ff       	call   f0117ae2 <isKHeapPlacementStrategyNEXTFIT>
f0121d91:	84 c0                	test   %al,%al
f0121d93:	0f 84 80 02 00 00    	je     f0122019 <test_kfree+0x1e12>
		{
			//cprintf("FREE in NEXT FIT\n");
			//kfree Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f0121d99:	e8 45 b0 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0121d9e:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121da1:	e8 00 20 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0121da6:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[10]);
f0121da9:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0121daf:	83 ec 0c             	sub    $0xc,%esp
f0121db2:	50                   	push   %eax
f0121db3:	e8 bf 5d fe ff       	call   f0107b77 <kfree>
f0121db8:	83 c4 10             	add    $0x10,%esp
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f0121dbb:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f0121dc2:	10 00 00 
f0121dc5:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0121dcb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121dd0:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f0121dd6:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0121ddc:	ba 00 00 00 00       	mov    $0x0,%edx
f0121de1:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f0121de7:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0121ded:	29 d0                	sub    %edx,%eax
f0121def:	89 c1                	mov    %eax,%ecx
f0121df1:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f0121df8:	10 00 00 
f0121dfb:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0121e00:	0f b6 d0             	movzbl %al,%edx
f0121e03:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0121e09:	01 d0                	add    %edx,%eax
f0121e0b:	48                   	dec    %eax
f0121e0c:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f0121e12:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0121e18:	ba 00 00 00 00       	mov    $0x0,%edx
f0121e1d:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f0121e23:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0121e29:	29 d0                	sub    %edx,%eax
f0121e2b:	01 c1                	add    %eax,%ecx
f0121e2d:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f0121e34:	10 00 00 
f0121e37:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0121e3c:	0f b6 c0             	movzbl %al,%eax
f0121e3f:	c1 e0 04             	shl    $0x4,%eax
f0121e42:	89 c2                	mov    %eax,%edx
f0121e44:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0121e4a:	01 d0                	add    %edx,%eax
f0121e4c:	48                   	dec    %eax
f0121e4d:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f0121e53:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0121e59:	ba 00 00 00 00       	mov    $0x0,%edx
f0121e5e:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f0121e64:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0121e6a:	29 d0                	sub    %edx,%eax
f0121e6c:	01 c8                	add    %ecx,%eax
f0121e6e:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0121e73:	29 c2                	sub    %eax,%edx
f0121e75:	89 d0                	mov    %edx,%eax
f0121e77:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121e7d:	e8 24 1f fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0121e82:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121e85:	74 17                	je     f0121e9e <test_kfree+0x1c97>
f0121e87:	83 ec 04             	sub    $0x4,%esp
f0121e8a:	68 94 b1 13 f0       	push   $0xf013b194
f0121e8f:	68 0b 06 00 00       	push   $0x60b
f0121e94:	68 7a b1 13 f0       	push   $0xf013b17a
f0121e99:	e8 67 e3 fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong kfree: pages in memory are not freed correctly");
f0121e9e:	e8 40 af fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0121ea3:	89 c2                	mov    %eax,%edx
f0121ea5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121ea8:	29 c2                	sub    %eax,%edx
f0121eaa:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0121eb0:	c1 e8 0c             	shr    $0xc,%eax
f0121eb3:	39 c2                	cmp    %eax,%edx
f0121eb5:	74 17                	je     f0121ece <test_kfree+0x1cc7>
f0121eb7:	83 ec 04             	sub    $0x4,%esp
f0121eba:	68 04 b9 13 f0       	push   $0xf013b904
f0121ebf:	68 0c 06 00 00       	push   $0x60c
f0121ec4:	68 7a b1 13 f0       	push   $0xf013b17a
f0121ec9:	e8 37 e3 fd ff       	call   f0100205 <_panic>

			//kfree 3 MB
			freeFrames = sys_calculate_free_frames() ;
f0121ece:	e8 10 af fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0121ed3:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121ed6:	e8 cb 1e fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0121edb:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[11]);
f0121ede:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0121ee4:	83 ec 0c             	sub    $0xc,%esp
f0121ee7:	50                   	push   %eax
f0121ee8:	e8 8a 5c fe ff       	call   f0107b77 <kfree>
f0121eed:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121ef0:	e8 b1 1e fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0121ef5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121ef8:	74 17                	je     f0121f11 <test_kfree+0x1d0a>
f0121efa:	83 ec 04             	sub    $0x4,%esp
f0121efd:	68 94 b1 13 f0       	push   $0xf013b194
f0121f02:	68 12 06 00 00       	push   $0x612
f0121f07:	68 7a b1 13 f0       	push   $0xf013b17a
f0121f0c:	e8 f4 e2 fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121f11:	e8 cd ae fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0121f16:	89 c2                	mov    %eax,%edx
f0121f18:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121f1b:	29 c2                	sub    %eax,%edx
f0121f1d:	89 d0                	mov    %edx,%eax
f0121f1f:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121f24:	74 17                	je     f0121f3d <test_kfree+0x1d36>
f0121f26:	83 ec 04             	sub    $0x4,%esp
f0121f29:	68 04 b9 13 f0       	push   $0xf013b904
f0121f2e:	68 13 06 00 00       	push   $0x613
f0121f33:	68 7a b1 13 f0       	push   $0xf013b17a
f0121f38:	e8 c8 e2 fd ff       	call   f0100205 <_panic>

			//kfree 2 KB
			freeFrames = sys_calculate_free_frames() ;
f0121f3d:	e8 a1 ae fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0121f42:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121f45:	e8 5c 1e fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0121f4a:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[12]);
f0121f4d:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0121f53:	83 ec 0c             	sub    $0xc,%esp
f0121f56:	50                   	push   %eax
f0121f57:	e8 1b 5c fe ff       	call   f0107b77 <kfree>
f0121f5c:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121f5f:	e8 42 1e fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0121f64:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121f67:	74 17                	je     f0121f80 <test_kfree+0x1d79>
f0121f69:	83 ec 04             	sub    $0x4,%esp
f0121f6c:	68 94 b1 13 f0       	push   $0xf013b194
f0121f71:	68 19 06 00 00       	push   $0x619
f0121f76:	68 7a b1 13 f0       	push   $0xf013b17a
f0121f7b:	e8 85 e2 fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0121f80:	e8 5e ae fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0121f85:	89 c2                	mov    %eax,%edx
f0121f87:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121f8a:	29 c2                	sub    %eax,%edx
f0121f8c:	89 d0                	mov    %edx,%eax
f0121f8e:	83 f8 01             	cmp    $0x1,%eax
f0121f91:	74 17                	je     f0121faa <test_kfree+0x1da3>
f0121f93:	83 ec 04             	sub    $0x4,%esp
f0121f96:	68 04 b9 13 f0       	push   $0xf013b904
f0121f9b:	68 1a 06 00 00       	push   $0x61a
f0121fa0:	68 7a b1 13 f0       	push   $0xf013b17a
f0121fa5:	e8 5b e2 fd ff       	call   f0100205 <_panic>

			//kfree 1 MB
			freeFrames = sys_calculate_free_frames() ;
f0121faa:	e8 34 ae fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0121faf:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121fb2:	e8 ef 1d fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0121fb7:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[13]);
f0121fba:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0121fc0:	83 ec 0c             	sub    $0xc,%esp
f0121fc3:	50                   	push   %eax
f0121fc4:	e8 ae 5b fe ff       	call   f0107b77 <kfree>
f0121fc9:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121fcc:	e8 d5 1d fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0121fd1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121fd4:	74 17                	je     f0121fed <test_kfree+0x1de6>
f0121fd6:	83 ec 04             	sub    $0x4,%esp
f0121fd9:	68 94 b1 13 f0       	push   $0xf013b194
f0121fde:	68 20 06 00 00       	push   $0x620
f0121fe3:	68 7a b1 13 f0       	push   $0xf013b17a
f0121fe8:	e8 18 e2 fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121fed:	e8 f1 ad fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0121ff2:	89 c2                	mov    %eax,%edx
f0121ff4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121ff7:	29 c2                	sub    %eax,%edx
f0121ff9:	89 d0                	mov    %edx,%eax
f0121ffb:	3d 00 01 00 00       	cmp    $0x100,%eax
f0122000:	74 17                	je     f0122019 <test_kfree+0x1e12>
f0122002:	83 ec 04             	sub    $0x4,%esp
f0122005:	68 04 b9 13 f0       	push   $0xf013b904
f012200a:	68 21 06 00 00       	push   $0x621
f012200f:	68 7a b1 13 f0       	push   $0xf013b17a
f0122014:	e8 ec e1 fd ff       	call   f0100205 <_panic>

		}
		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0122019:	e8 c5 ad fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012201e:	89 c2                	mov    %eax,%edx
f0122020:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0122023:	39 c2                	cmp    %eax,%edx
f0122025:	74 17                	je     f012203e <test_kfree+0x1e37>
f0122027:	83 ec 04             	sub    $0x4,%esp
f012202a:	68 a4 b9 13 f0       	push   $0xf013b9a4
f012202f:	68 24 06 00 00       	push   $0x624
f0122034:	68 7a b1 13 f0       	push   $0xf013b17a
f0122039:	e8 c7 e1 fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b60%");
f012203e:	83 ec 0c             	sub    $0xc,%esp
f0122041:	68 d8 b9 13 f0       	push   $0xf013b9d8
f0122046:	e8 c3 ec fd ff       	call   f0100d0e <cprintf>
f012204b:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012204e:	83 ec 0c             	sub    $0xc,%esp
f0122051:	6a 03                	push   $0x3
f0122053:	e8 2b b2 fe ff       	call   f010d283 <sys_bypassPageFault>
f0122058:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f012205b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122062:	e9 82 00 00 00       	jmp    f01220e9 <test_kfree+0x1ee2>
		{
			ptr = (char *) ptr_allocations[i];
f0122067:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012206a:	8b 84 85 48 fd ff ff 	mov    -0x2b8(%ebp,%eax,4),%eax
f0122071:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0122074:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122077:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f012207a:	e8 f2 b1 fe ff       	call   f010d271 <sys_rcr2>
f012207f:	89 c2                	mov    %eax,%edx
f0122081:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122084:	39 c2                	cmp    %eax,%edx
f0122086:	74 17                	je     f012209f <test_kfree+0x1e98>
f0122088:	83 ec 04             	sub    $0x4,%esp
f012208b:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0122090:	68 33 06 00 00       	push   $0x633
f0122095:	68 7a b1 13 f0       	push   $0xf013b17a
f012209a:	e8 66 e1 fd ff       	call   f0100205 <_panic>
			ptr[lastIndices[i]] = 10;
f012209f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01220a2:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f01220a9:	89 c2                	mov    %eax,%edx
f01220ab:	8b 45 80             	mov    -0x80(%ebp),%eax
f01220ae:	01 d0                	add    %edx,%eax
f01220b0:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01220b3:	e8 b9 b1 fe ff       	call   f010d271 <sys_rcr2>
f01220b8:	89 c2                	mov    %eax,%edx
f01220ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01220bd:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f01220c4:	89 c1                	mov    %eax,%ecx
f01220c6:	8b 45 80             	mov    -0x80(%ebp),%eax
f01220c9:	01 c8                	add    %ecx,%eax
f01220cb:	39 c2                	cmp    %eax,%edx
f01220cd:	74 17                	je     f01220e6 <test_kfree+0x1edf>
f01220cf:	83 ec 04             	sub    $0x4,%esp
f01220d2:	68 e0 b9 13 f0       	push   $0xf013b9e0
f01220d7:	68 35 06 00 00       	push   $0x635
f01220dc:	68 7a b1 13 f0       	push   $0xf013b17a
f01220e1:	e8 1f e1 fd ff       	call   f0100205 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f01220e6:	ff 45 f4             	incl   -0xc(%ebp)
f01220e9:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f01220ed:	0f 8e 74 ff ff ff    	jle    f0122067 <test_kfree+0x1e60>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01220f3:	83 ec 0c             	sub    $0xc,%esp
f01220f6:	6a 00                	push   $0x0
f01220f8:	e8 86 b1 fe ff       	call   f010d283 <sys_bypassPageFault>
f01220fd:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0122100:	83 ec 0c             	sub    $0xc,%esp
f0122103:	68 25 ba 13 f0       	push   $0xf013ba25
f0122108:	e8 01 ec fd ff       	call   f0100d0e <cprintf>
f012210d:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122110:	e8 ce ac fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0122115:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122118:	e8 89 1c fe ff       	call   f0103da6 <pf_calculate_free_frames>
f012211d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0122120:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f0122126:	83 ec 0c             	sub    $0xc,%esp
f0122129:	50                   	push   %eax
f012212a:	e8 48 5a fe ff       	call   f0107b77 <kfree>
f012212f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122132:	e8 6f 1c fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0122137:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012213a:	74 17                	je     f0122153 <test_kfree+0x1f4c>
f012213c:	83 ec 04             	sub    $0x4,%esp
f012213f:	68 94 b1 13 f0       	push   $0xf013b194
f0122144:	68 43 06 00 00       	push   $0x643
f0122149:	68 7a b1 13 f0       	push   $0xf013b17a
f012214e:	e8 b2 e0 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122153:	e8 8b ac fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0122158:	89 c2                	mov    %eax,%edx
f012215a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012215d:	39 c2                	cmp    %eax,%edx
f012215f:	74 17                	je     f0122178 <test_kfree+0x1f71>
f0122161:	83 ec 04             	sub    $0x4,%esp
f0122164:	68 2c ba 13 f0       	push   $0xf013ba2c
f0122169:	68 44 06 00 00       	push   $0x644
f012216e:	68 7a b1 13 f0       	push   $0xf013b17a
f0122173:	e8 8d e0 fd ff       	call   f0100205 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122178:	e8 66 ac fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012217d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122180:	e8 21 1c fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0122185:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0122188:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f012218e:	83 ec 0c             	sub    $0xc,%esp
f0122191:	50                   	push   %eax
f0122192:	e8 e0 59 fe ff       	call   f0107b77 <kfree>
f0122197:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012219a:	e8 07 1c fe ff       	call   f0103da6 <pf_calculate_free_frames>
f012219f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01221a2:	74 17                	je     f01221bb <test_kfree+0x1fb4>
f01221a4:	83 ec 04             	sub    $0x4,%esp
f01221a7:	68 94 b1 13 f0       	push   $0xf013b194
f01221ac:	68 4a 06 00 00       	push   $0x64a
f01221b1:	68 7a b1 13 f0       	push   $0xf013b17a
f01221b6:	e8 4a e0 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01221bb:	e8 23 ac fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01221c0:	89 c2                	mov    %eax,%edx
f01221c2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01221c5:	39 c2                	cmp    %eax,%edx
f01221c7:	74 17                	je     f01221e0 <test_kfree+0x1fd9>
f01221c9:	83 ec 04             	sub    $0x4,%esp
f01221cc:	68 2c ba 13 f0       	push   $0xf013ba2c
f01221d1:	68 4b 06 00 00       	push   $0x64b
f01221d6:	68 7a b1 13 f0       	push   $0xf013b17a
f01221db:	e8 25 e0 fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01221e0:	e8 fe ab fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01221e5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01221e8:	e8 b9 1b fe ff       	call   f0103da6 <pf_calculate_free_frames>
f01221ed:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01221f0:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f01221f6:	83 ec 0c             	sub    $0xc,%esp
f01221f9:	50                   	push   %eax
f01221fa:	e8 78 59 fe ff       	call   f0107b77 <kfree>
f01221ff:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122202:	e8 9f 1b fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0122207:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012220a:	74 17                	je     f0122223 <test_kfree+0x201c>
f012220c:	83 ec 04             	sub    $0x4,%esp
f012220f:	68 94 b1 13 f0       	push   $0xf013b194
f0122214:	68 51 06 00 00       	push   $0x651
f0122219:	68 7a b1 13 f0       	push   $0xf013b17a
f012221e:	e8 e2 df fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122223:	e8 bb ab fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0122228:	89 c2                	mov    %eax,%edx
f012222a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012222d:	39 c2                	cmp    %eax,%edx
f012222f:	74 17                	je     f0122248 <test_kfree+0x2041>
f0122231:	83 ec 04             	sub    $0x4,%esp
f0122234:	68 2c ba 13 f0       	push   $0xf013ba2c
f0122239:	68 52 06 00 00       	push   $0x652
f012223e:	68 7a b1 13 f0       	push   $0xf013b17a
f0122243:	e8 bd df fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0122248:	e8 96 ab fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012224d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122250:	e8 51 1b fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0122255:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0122258:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012225e:	83 ec 0c             	sub    $0xc,%esp
f0122261:	50                   	push   %eax
f0122262:	e8 10 59 fe ff       	call   f0107b77 <kfree>
f0122267:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012226a:	e8 37 1b fe ff       	call   f0103da6 <pf_calculate_free_frames>
f012226f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122272:	74 17                	je     f012228b <test_kfree+0x2084>
f0122274:	83 ec 04             	sub    $0x4,%esp
f0122277:	68 94 b1 13 f0       	push   $0xf013b194
f012227c:	68 58 06 00 00       	push   $0x658
f0122281:	68 7a b1 13 f0       	push   $0xf013b17a
f0122286:	e8 7a df fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012228b:	e8 53 ab fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0122290:	89 c2                	mov    %eax,%edx
f0122292:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122295:	39 c2                	cmp    %eax,%edx
f0122297:	74 17                	je     f01222b0 <test_kfree+0x20a9>
f0122299:	83 ec 04             	sub    $0x4,%esp
f012229c:	68 2c ba 13 f0       	push   $0xf013ba2c
f01222a1:	68 59 06 00 00       	push   $0x659
f01222a6:	68 7a b1 13 f0       	push   $0xf013b17a
f01222ab:	e8 55 df fd ff       	call   f0100205 <_panic>

	}
	cprintf("\b\b\b85%");
f01222b0:	83 ec 0c             	sub    $0xc,%esp
f01222b3:	68 73 ba 13 f0       	push   $0xf013ba73
f01222b8:	e8 51 ea fd ff       	call   f0100d0e <cprintf>
f01222bd:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01222c0:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f01222c7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01222ce:	eb 48                	jmp    f0122318 <test_kfree+0x2111>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f01222d0:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01222d3:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f01222d8:	83 ec 04             	sub    $0x4,%esp
f01222db:	8d 8d 44 fd ff ff    	lea    -0x2bc(%ebp),%ecx
f01222e1:	51                   	push   %ecx
f01222e2:	52                   	push   %edx
f01222e3:	50                   	push   %eax
f01222e4:	e8 a6 47 fe ff       	call   f0106a8f <get_page_table>
f01222e9:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01222ec:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f01222f2:	85 c0                	test   %eax,%eax
f01222f4:	75 17                	jne    f012230d <test_kfree+0x2106>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f01222f6:	83 ec 04             	sub    $0x4,%esp
f01222f9:	68 7c ba 13 f0       	push   $0xf013ba7c
f01222fe:	68 67 06 00 00       	push   $0x667
f0122303:	68 7a b1 13 f0       	push   $0xf013b17a
f0122308:	e8 f8 de fd ff       	call   f0100205 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f012230d:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0122314:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0122318:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012231c:	78 b2                	js     f01222d0 <test_kfree+0x20c9>
f012231e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0122322:	7f 09                	jg     f012232d <test_kfree+0x2126>
f0122324:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f012232b:	76 a3                	jbe    f01222d0 <test_kfree+0x20c9>
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f012232d:	83 ec 0c             	sub    $0xc,%esp
f0122330:	68 5e b3 13 f0       	push   $0xf013b35e
f0122335:	e8 d4 e9 fd ff       	call   f0100d0e <cprintf>
f012233a:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f012233d:	83 ec 0c             	sub    $0xc,%esp
f0122340:	68 e4 ba 13 f0       	push   $0xf013bae4
f0122345:	e8 c4 e9 fd ff       	call   f0100d0e <cprintf>
f012234a:	83 c4 10             	add    $0x10,%esp

	return 1;
f012234d:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0122352:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0122355:	5b                   	pop    %ebx
f0122356:	5f                   	pop    %edi
f0122357:	5d                   	pop    %ebp
f0122358:	c3                   	ret    

f0122359 <test_kfree_bestfirstfit>:

int test_kfree_bestfirstfit()
{
f0122359:	55                   	push   %ebp
f012235a:	89 e5                	mov    %esp,%ebp
f012235c:	57                   	push   %edi
f012235d:	53                   	push   %ebx
f012235e:	81 ec 40 02 00 00    	sub    $0x240,%esp
	cprintf("==============================================\n");
f0122364:	83 ec 0c             	sub    $0xc,%esp
f0122367:	68 bc b0 13 f0       	push   $0xf013b0bc
f012236c:	e8 9d e9 fd ff       	call   f0100d0e <cprintf>
f0122371:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0122374:	83 ec 0c             	sub    $0xc,%esp
f0122377:	68 ec b0 13 f0       	push   $0xf013b0ec
f012237c:	e8 8d e9 fd ff       	call   f0100d0e <cprintf>
f0122381:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0122384:	83 ec 0c             	sub    $0xc,%esp
f0122387:	68 bc b0 13 f0       	push   $0xf013b0bc
f012238c:	e8 7d e9 fd ff       	call   f0100d0e <cprintf>
f0122391:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0122394:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0122398:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f012239c:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f01223a2:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f01223a8:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f01223af:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01223b6:	e8 28 aa fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01223bb:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01223be:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f01223c4:	b9 14 00 00 00       	mov    $0x14,%ecx
f01223c9:	b8 00 00 00 00       	mov    $0x0,%eax
f01223ce:	89 d7                	mov    %edx,%edi
f01223d0:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f01223d2:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f01223d8:	b9 14 00 00 00       	mov    $0x14,%ecx
f01223dd:	b8 00 00 00 00       	mov    $0x0,%eax
f01223e2:	89 d7                	mov    %edx,%edi
f01223e4:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01223e6:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f01223ec:	b9 14 00 00 00       	mov    $0x14,%ecx
f01223f1:	b8 00 00 00 00       	mov    $0x0,%eax
f01223f6:	89 d7                	mov    %edx,%edi
f01223f8:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01223fa:	e8 e4 a9 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01223ff:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122402:	e8 9f 19 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0122407:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f012240a:	83 ec 0c             	sub    $0xc,%esp
f012240d:	68 00 fc 1f 00       	push   $0x1ffc00
f0122412:	e8 4a 56 fe ff       	call   f0107a61 <kmalloc>
f0122417:	83 c4 10             	add    $0x10,%esp
f012241a:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122420:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0122426:	89 c1                	mov    %eax,%ecx
f0122428:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f012242f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0122432:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122437:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f012243a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012243d:	ba 00 00 00 00       	mov    $0x0,%edx
f0122442:	f7 75 c8             	divl   -0x38(%ebp)
f0122445:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0122448:	29 d0                	sub    %edx,%eax
f012244a:	89 c3                	mov    %eax,%ebx
f012244c:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0122453:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0122458:	0f b6 d0             	movzbl %al,%edx
f012245b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012245e:	01 d0                	add    %edx,%eax
f0122460:	48                   	dec    %eax
f0122461:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0122464:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0122467:	ba 00 00 00 00       	mov    $0x0,%edx
f012246c:	f7 75 c0             	divl   -0x40(%ebp)
f012246f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0122472:	29 d0                	sub    %edx,%eax
f0122474:	01 c3                	add    %eax,%ebx
f0122476:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f012247d:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0122482:	0f b6 c0             	movzbl %al,%eax
f0122485:	c1 e0 04             	shl    $0x4,%eax
f0122488:	89 c2                	mov    %eax,%edx
f012248a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012248d:	01 d0                	add    %edx,%eax
f012248f:	48                   	dec    %eax
f0122490:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0122493:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0122496:	ba 00 00 00 00       	mov    $0x0,%edx
f012249b:	f7 75 b8             	divl   -0x48(%ebp)
f012249e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01224a1:	29 d0                	sub    %edx,%eax
f01224a3:	01 d8                	add    %ebx,%eax
f01224a5:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01224aa:	39 c1                	cmp    %eax,%ecx
f01224ac:	74 17                	je     f01224c5 <test_kfree_bestfirstfit+0x16c>
f01224ae:	83 ec 04             	sub    $0x4,%esp
f01224b1:	68 60 b2 13 f0       	push   $0xf013b260
f01224b6:	68 95 06 00 00       	push   $0x695
f01224bb:	68 7a b1 13 f0       	push   $0xf013b17a
f01224c0:	e8 40 dd fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01224c5:	e8 dc 18 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f01224ca:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01224cd:	74 17                	je     f01224e6 <test_kfree_bestfirstfit+0x18d>
f01224cf:	83 ec 04             	sub    $0x4,%esp
f01224d2:	68 94 b1 13 f0       	push   $0xf013b194
f01224d7:	68 96 06 00 00       	push   $0x696
f01224dc:	68 7a b1 13 f0       	push   $0xf013b17a
f01224e1:	e8 1f dd fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01224e6:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01224e9:	e8 f5 a8 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01224ee:	29 c3                	sub    %eax,%ebx
f01224f0:	89 d8                	mov    %ebx,%eax
f01224f2:	3d 00 02 00 00       	cmp    $0x200,%eax
f01224f7:	74 17                	je     f0122510 <test_kfree_bestfirstfit+0x1b7>
f01224f9:	83 ec 04             	sub    $0x4,%esp
f01224fc:	68 fc b1 13 f0       	push   $0xf013b1fc
f0122501:	68 97 06 00 00       	push   $0x697
f0122506:	68 7a b1 13 f0       	push   $0xf013b17a
f012250b:	e8 f5 dc fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0122510:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f0122517:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012251a:	e8 c4 a8 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012251f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122522:	e8 7f 18 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0122527:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012252a:	83 ec 0c             	sub    $0xc,%esp
f012252d:	68 00 fc 1f 00       	push   $0x1ffc00
f0122532:	e8 2a 55 fe ff       	call   f0107a61 <kmalloc>
f0122537:	83 c4 10             	add    $0x10,%esp
f012253a:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122540:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0122546:	89 c1                	mov    %eax,%ecx
f0122548:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f012254f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0122552:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122557:	89 45 ac             	mov    %eax,-0x54(%ebp)
f012255a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012255d:	ba 00 00 00 00       	mov    $0x0,%edx
f0122562:	f7 75 b0             	divl   -0x50(%ebp)
f0122565:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0122568:	29 d0                	sub    %edx,%eax
f012256a:	89 c3                	mov    %eax,%ebx
f012256c:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0122573:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0122578:	0f b6 d0             	movzbl %al,%edx
f012257b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012257e:	01 d0                	add    %edx,%eax
f0122580:	48                   	dec    %eax
f0122581:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0122584:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0122587:	ba 00 00 00 00       	mov    $0x0,%edx
f012258c:	f7 75 a8             	divl   -0x58(%ebp)
f012258f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0122592:	29 d0                	sub    %edx,%eax
f0122594:	01 c3                	add    %eax,%ebx
f0122596:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f012259d:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01225a2:	0f b6 c0             	movzbl %al,%eax
f01225a5:	c1 e0 04             	shl    $0x4,%eax
f01225a8:	89 c2                	mov    %eax,%edx
f01225aa:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01225ad:	01 d0                	add    %edx,%eax
f01225af:	48                   	dec    %eax
f01225b0:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01225b3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01225b6:	ba 00 00 00 00       	mov    $0x0,%edx
f01225bb:	f7 75 a0             	divl   -0x60(%ebp)
f01225be:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01225c1:	29 d0                	sub    %edx,%eax
f01225c3:	01 d8                	add    %ebx,%eax
f01225c5:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01225ca:	39 c1                	cmp    %eax,%ecx
f01225cc:	74 17                	je     f01225e5 <test_kfree_bestfirstfit+0x28c>
f01225ce:	83 ec 04             	sub    $0x4,%esp
f01225d1:	68 60 b2 13 f0       	push   $0xf013b260
f01225d6:	68 9e 06 00 00       	push   $0x69e
f01225db:	68 7a b1 13 f0       	push   $0xf013b17a
f01225e0:	e8 20 dc fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01225e5:	e8 bc 17 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f01225ea:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01225ed:	74 17                	je     f0122606 <test_kfree_bestfirstfit+0x2ad>
f01225ef:	83 ec 04             	sub    $0x4,%esp
f01225f2:	68 94 b1 13 f0       	push   $0xf013b194
f01225f7:	68 9f 06 00 00       	push   $0x69f
f01225fc:	68 7a b1 13 f0       	push   $0xf013b17a
f0122601:	e8 ff db fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122606:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122609:	e8 d5 a7 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012260e:	29 c3                	sub    %eax,%ebx
f0122610:	89 d8                	mov    %ebx,%eax
f0122612:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122617:	74 17                	je     f0122630 <test_kfree_bestfirstfit+0x2d7>
f0122619:	83 ec 04             	sub    $0x4,%esp
f012261c:	68 fc b1 13 f0       	push   $0xf013b1fc
f0122621:	68 a0 06 00 00       	push   $0x6a0
f0122626:	68 7a b1 13 f0       	push   $0xf013b17a
f012262b:	e8 d5 db fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0122630:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f0122637:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012263a:	e8 a4 a7 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012263f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122642:	e8 5f 17 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0122647:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012264a:	83 ec 0c             	sub    $0xc,%esp
f012264d:	68 00 08 00 00       	push   $0x800
f0122652:	e8 0a 54 fe ff       	call   f0107a61 <kmalloc>
f0122657:	83 c4 10             	add    $0x10,%esp
f012265a:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122660:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0122666:	89 c1                	mov    %eax,%ecx
f0122668:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f012266f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122672:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122677:	89 45 94             	mov    %eax,-0x6c(%ebp)
f012267a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012267d:	ba 00 00 00 00       	mov    $0x0,%edx
f0122682:	f7 75 98             	divl   -0x68(%ebp)
f0122685:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0122688:	29 d0                	sub    %edx,%eax
f012268a:	89 c3                	mov    %eax,%ebx
f012268c:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0122693:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0122698:	0f b6 d0             	movzbl %al,%edx
f012269b:	8b 45 90             	mov    -0x70(%ebp),%eax
f012269e:	01 d0                	add    %edx,%eax
f01226a0:	48                   	dec    %eax
f01226a1:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01226a4:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01226a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01226ac:	f7 75 90             	divl   -0x70(%ebp)
f01226af:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01226b2:	29 d0                	sub    %edx,%eax
f01226b4:	01 c3                	add    %eax,%ebx
f01226b6:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01226bd:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01226c2:	0f b6 c0             	movzbl %al,%eax
f01226c5:	c1 e0 04             	shl    $0x4,%eax
f01226c8:	89 c2                	mov    %eax,%edx
f01226ca:	8b 45 88             	mov    -0x78(%ebp),%eax
f01226cd:	01 d0                	add    %edx,%eax
f01226cf:	48                   	dec    %eax
f01226d0:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01226d3:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01226d6:	ba 00 00 00 00       	mov    $0x0,%edx
f01226db:	f7 75 88             	divl   -0x78(%ebp)
f01226de:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01226e1:	29 d0                	sub    %edx,%eax
f01226e3:	01 d8                	add    %ebx,%eax
f01226e5:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01226ea:	39 c1                	cmp    %eax,%ecx
f01226ec:	74 17                	je     f0122705 <test_kfree_bestfirstfit+0x3ac>
f01226ee:	83 ec 04             	sub    $0x4,%esp
f01226f1:	68 60 b2 13 f0       	push   $0xf013b260
f01226f6:	68 a7 06 00 00       	push   $0x6a7
f01226fb:	68 7a b1 13 f0       	push   $0xf013b17a
f0122700:	e8 00 db fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122705:	e8 9c 16 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f012270a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012270d:	74 17                	je     f0122726 <test_kfree_bestfirstfit+0x3cd>
f012270f:	83 ec 04             	sub    $0x4,%esp
f0122712:	68 94 b1 13 f0       	push   $0xf013b194
f0122717:	68 a8 06 00 00       	push   $0x6a8
f012271c:	68 7a b1 13 f0       	push   $0xf013b17a
f0122721:	e8 df da fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122726:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122729:	e8 b5 a6 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012272e:	29 c3                	sub    %eax,%ebx
f0122730:	89 d8                	mov    %ebx,%eax
f0122732:	83 f8 01             	cmp    $0x1,%eax
f0122735:	74 17                	je     f012274e <test_kfree_bestfirstfit+0x3f5>
f0122737:	83 ec 04             	sub    $0x4,%esp
f012273a:	68 fc b1 13 f0       	push   $0xf013b1fc
f012273f:	68 a9 06 00 00       	push   $0x6a9
f0122744:	68 7a b1 13 f0       	push   $0xf013b17a
f0122749:	e8 b7 da fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f012274e:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f0122755:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0122758:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f012275e:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0122761:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122768:	eb 0e                	jmp    f0122778 <test_kfree_bestfirstfit+0x41f>
		{
			ptr[i] = 2 ;
f012276a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012276d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122770:	01 d0                	add    %edx,%eax
f0122772:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0122775:	ff 45 f4             	incl   -0xc(%ebp)
f0122778:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012277e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122781:	7f e7                	jg     f012276a <test_kfree_bestfirstfit+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122783:	e8 5b a6 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0122788:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012278b:	e8 16 16 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0122790:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0122793:	83 ec 0c             	sub    $0xc,%esp
f0122796:	68 00 08 00 00       	push   $0x800
f012279b:	e8 c1 52 fe ff       	call   f0107a61 <kmalloc>
f01227a0:	83 c4 10             	add    $0x10,%esp
f01227a3:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01227a9:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01227af:	89 c1                	mov    %eax,%ecx
f01227b1:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01227b8:	10 00 00 
f01227bb:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01227c1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01227c6:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f01227cc:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01227d2:	ba 00 00 00 00       	mov    $0x0,%edx
f01227d7:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f01227dd:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01227e3:	29 d0                	sub    %edx,%eax
f01227e5:	89 c3                	mov    %eax,%ebx
f01227e7:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f01227ee:	10 00 00 
f01227f1:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01227f6:	0f b6 d0             	movzbl %al,%edx
f01227f9:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01227ff:	01 d0                	add    %edx,%eax
f0122801:	48                   	dec    %eax
f0122802:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0122808:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012280e:	ba 00 00 00 00       	mov    $0x0,%edx
f0122813:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0122819:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012281f:	29 d0                	sub    %edx,%eax
f0122821:	01 c3                	add    %eax,%ebx
f0122823:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012282a:	10 00 00 
f012282d:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0122832:	0f b6 c0             	movzbl %al,%eax
f0122835:	c1 e0 04             	shl    $0x4,%eax
f0122838:	89 c2                	mov    %eax,%edx
f012283a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0122840:	01 d0                	add    %edx,%eax
f0122842:	48                   	dec    %eax
f0122843:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0122849:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012284f:	ba 00 00 00 00       	mov    $0x0,%edx
f0122854:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012285a:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0122860:	29 d0                	sub    %edx,%eax
f0122862:	01 d8                	add    %ebx,%eax
f0122864:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0122869:	39 c1                	cmp    %eax,%ecx
f012286b:	74 17                	je     f0122884 <test_kfree_bestfirstfit+0x52b>
f012286d:	83 ec 04             	sub    $0x4,%esp
f0122870:	68 60 b2 13 f0       	push   $0xf013b260
f0122875:	68 b5 06 00 00       	push   $0x6b5
f012287a:	68 7a b1 13 f0       	push   $0xf013b17a
f012287f:	e8 81 d9 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122884:	e8 1d 15 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0122889:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012288c:	74 17                	je     f01228a5 <test_kfree_bestfirstfit+0x54c>
f012288e:	83 ec 04             	sub    $0x4,%esp
f0122891:	68 94 b1 13 f0       	push   $0xf013b194
f0122896:	68 b6 06 00 00       	push   $0x6b6
f012289b:	68 7a b1 13 f0       	push   $0xf013b17a
f01228a0:	e8 60 d9 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01228a5:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01228a8:	e8 36 a5 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01228ad:	29 c3                	sub    %eax,%ebx
f01228af:	89 d8                	mov    %ebx,%eax
f01228b1:	83 f8 01             	cmp    $0x1,%eax
f01228b4:	74 17                	je     f01228cd <test_kfree_bestfirstfit+0x574>
f01228b6:	83 ec 04             	sub    $0x4,%esp
f01228b9:	68 fc b1 13 f0       	push   $0xf013b1fc
f01228be:	68 b7 06 00 00       	push   $0x6b7
f01228c3:	68 7a b1 13 f0       	push   $0xf013b17a
f01228c8:	e8 38 d9 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f01228cd:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f01228d4:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01228d7:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01228dd:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01228e0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01228e7:	eb 0e                	jmp    f01228f7 <test_kfree_bestfirstfit+0x59e>
		{
			ptr[i] = 3 ;
f01228e9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01228ec:	8b 45 80             	mov    -0x80(%ebp),%eax
f01228ef:	01 d0                	add    %edx,%eax
f01228f1:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01228f4:	ff 45 f4             	incl   -0xc(%ebp)
f01228f7:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01228fd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122900:	7f e7                	jg     f01228e9 <test_kfree_bestfirstfit+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0122902:	e8 dc a4 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0122907:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012290a:	e8 97 14 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f012290f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0122912:	83 ec 0c             	sub    $0xc,%esp
f0122915:	68 00 1c 00 00       	push   $0x1c00
f012291a:	e8 42 51 fe ff       	call   f0107a61 <kmalloc>
f012291f:	83 c4 10             	add    $0x10,%esp
f0122922:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122928:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f012292e:	89 c1                	mov    %eax,%ecx
f0122930:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0122937:	10 00 00 
f012293a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0122940:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122945:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012294b:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0122951:	ba 00 00 00 00       	mov    $0x0,%edx
f0122956:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012295c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0122962:	29 d0                	sub    %edx,%eax
f0122964:	89 c3                	mov    %eax,%ebx
f0122966:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012296d:	10 00 00 
f0122970:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0122975:	0f b6 d0             	movzbl %al,%edx
f0122978:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012297e:	01 d0                	add    %edx,%eax
f0122980:	48                   	dec    %eax
f0122981:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0122987:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012298d:	ba 00 00 00 00       	mov    $0x0,%edx
f0122992:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0122998:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012299e:	29 d0                	sub    %edx,%eax
f01229a0:	01 c3                	add    %eax,%ebx
f01229a2:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f01229a9:	10 00 00 
f01229ac:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01229b1:	0f b6 c0             	movzbl %al,%eax
f01229b4:	c1 e0 04             	shl    $0x4,%eax
f01229b7:	89 c2                	mov    %eax,%edx
f01229b9:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01229bf:	01 d0                	add    %edx,%eax
f01229c1:	48                   	dec    %eax
f01229c2:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f01229c8:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01229ce:	ba 00 00 00 00       	mov    $0x0,%edx
f01229d3:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f01229d9:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01229df:	29 d0                	sub    %edx,%eax
f01229e1:	01 d8                	add    %ebx,%eax
f01229e3:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01229e8:	39 c1                	cmp    %eax,%ecx
f01229ea:	74 17                	je     f0122a03 <test_kfree_bestfirstfit+0x6aa>
f01229ec:	83 ec 04             	sub    $0x4,%esp
f01229ef:	68 60 b2 13 f0       	push   $0xf013b260
f01229f4:	68 c3 06 00 00       	push   $0x6c3
f01229f9:	68 7a b1 13 f0       	push   $0xf013b17a
f01229fe:	e8 02 d8 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122a03:	e8 9e 13 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0122a08:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122a0b:	74 17                	je     f0122a24 <test_kfree_bestfirstfit+0x6cb>
f0122a0d:	83 ec 04             	sub    $0x4,%esp
f0122a10:	68 94 b1 13 f0       	push   $0xf013b194
f0122a15:	68 c4 06 00 00       	push   $0x6c4
f0122a1a:	68 7a b1 13 f0       	push   $0xf013b17a
f0122a1f:	e8 e1 d7 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122a24:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122a27:	e8 b7 a3 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0122a2c:	29 c3                	sub    %eax,%ebx
f0122a2e:	89 d8                	mov    %ebx,%eax
f0122a30:	83 f8 02             	cmp    $0x2,%eax
f0122a33:	74 17                	je     f0122a4c <test_kfree_bestfirstfit+0x6f3>
f0122a35:	83 ec 04             	sub    $0x4,%esp
f0122a38:	68 fc b1 13 f0       	push   $0xf013b1fc
f0122a3d:	68 c5 06 00 00       	push   $0x6c5
f0122a42:	68 7a b1 13 f0       	push   $0xf013b17a
f0122a47:	e8 b9 d7 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0122a4c:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f0122a53:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0122a56:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0122a5c:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0122a5f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122a66:	eb 0e                	jmp    f0122a76 <test_kfree_bestfirstfit+0x71d>
		{
			ptr[i] = 4 ;
f0122a68:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122a6b:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122a6e:	01 d0                	add    %edx,%eax
f0122a70:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0122a73:	ff 45 f4             	incl   -0xc(%ebp)
f0122a76:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0122a7c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122a7f:	7f e7                	jg     f0122a68 <test_kfree_bestfirstfit+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122a81:	e8 5d a3 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0122a86:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122a89:	e8 18 13 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0122a8e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0122a91:	83 ec 0c             	sub    $0xc,%esp
f0122a94:	68 00 fc 2f 00       	push   $0x2ffc00
f0122a99:	e8 c3 4f fe ff       	call   f0107a61 <kmalloc>
f0122a9e:	83 c4 10             	add    $0x10,%esp
f0122aa1:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122aa7:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0122aad:	89 c1                	mov    %eax,%ecx
f0122aaf:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0122ab6:	10 00 00 
f0122ab9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0122abf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122ac4:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0122aca:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0122ad0:	ba 00 00 00 00       	mov    $0x0,%edx
f0122ad5:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0122adb:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0122ae1:	29 d0                	sub    %edx,%eax
f0122ae3:	89 c3                	mov    %eax,%ebx
f0122ae5:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0122aec:	10 00 00 
f0122aef:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0122af4:	0f b6 d0             	movzbl %al,%edx
f0122af7:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0122afd:	01 d0                	add    %edx,%eax
f0122aff:	48                   	dec    %eax
f0122b00:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0122b06:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0122b0c:	ba 00 00 00 00       	mov    $0x0,%edx
f0122b11:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0122b17:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0122b1d:	29 d0                	sub    %edx,%eax
f0122b1f:	01 c3                	add    %eax,%ebx
f0122b21:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0122b28:	10 00 00 
f0122b2b:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0122b30:	0f b6 c0             	movzbl %al,%eax
f0122b33:	c1 e0 04             	shl    $0x4,%eax
f0122b36:	89 c2                	mov    %eax,%edx
f0122b38:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0122b3e:	01 d0                	add    %edx,%eax
f0122b40:	48                   	dec    %eax
f0122b41:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0122b47:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0122b4d:	ba 00 00 00 00       	mov    $0x0,%edx
f0122b52:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0122b58:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0122b5e:	29 d0                	sub    %edx,%eax
f0122b60:	01 d8                	add    %ebx,%eax
f0122b62:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0122b67:	39 c1                	cmp    %eax,%ecx
f0122b69:	74 17                	je     f0122b82 <test_kfree_bestfirstfit+0x829>
f0122b6b:	83 ec 04             	sub    $0x4,%esp
f0122b6e:	68 60 b2 13 f0       	push   $0xf013b260
f0122b73:	68 d1 06 00 00       	push   $0x6d1
f0122b78:	68 7a b1 13 f0       	push   $0xf013b17a
f0122b7d:	e8 83 d6 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122b82:	e8 1f 12 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0122b87:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122b8a:	74 17                	je     f0122ba3 <test_kfree_bestfirstfit+0x84a>
f0122b8c:	83 ec 04             	sub    $0x4,%esp
f0122b8f:	68 94 b1 13 f0       	push   $0xf013b194
f0122b94:	68 d2 06 00 00       	push   $0x6d2
f0122b99:	68 7a b1 13 f0       	push   $0xf013b17a
f0122b9e:	e8 62 d6 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122ba3:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122ba6:	e8 38 a2 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0122bab:	29 c3                	sub    %eax,%ebx
f0122bad:	89 d8                	mov    %ebx,%eax
f0122baf:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122bb4:	74 17                	je     f0122bcd <test_kfree_bestfirstfit+0x874>
f0122bb6:	83 ec 04             	sub    $0x4,%esp
f0122bb9:	68 fc b1 13 f0       	push   $0xf013b1fc
f0122bbe:	68 d3 06 00 00       	push   $0x6d3
f0122bc3:	68 7a b1 13 f0       	push   $0xf013b17a
f0122bc8:	e8 38 d6 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0122bcd:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f0122bd4:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0122bd7:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0122bdd:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0122be0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122be7:	eb 0e                	jmp    f0122bf7 <test_kfree_bestfirstfit+0x89e>
		{
			ptr[i] = 5 ;
f0122be9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122bec:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122bef:	01 d0                	add    %edx,%eax
f0122bf1:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0122bf4:	ff 45 f4             	incl   -0xc(%ebp)
f0122bf7:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0122bfd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122c00:	7f e7                	jg     f0122be9 <test_kfree_bestfirstfit+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0122c02:	e8 dc a1 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0122c07:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122c0a:	e8 97 11 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0122c0f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0122c12:	83 ec 0c             	sub    $0xc,%esp
f0122c15:	68 00 fc 5f 00       	push   $0x5ffc00
f0122c1a:	e8 42 4e fe ff       	call   f0107a61 <kmalloc>
f0122c1f:	83 c4 10             	add    $0x10,%esp
f0122c22:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122c28:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0122c2e:	89 c1                	mov    %eax,%ecx
f0122c30:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0122c37:	10 00 00 
f0122c3a:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0122c40:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122c45:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0122c4b:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0122c51:	ba 00 00 00 00       	mov    $0x0,%edx
f0122c56:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0122c5c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0122c62:	29 d0                	sub    %edx,%eax
f0122c64:	89 c3                	mov    %eax,%ebx
f0122c66:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0122c6d:	10 00 00 
f0122c70:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0122c75:	0f b6 d0             	movzbl %al,%edx
f0122c78:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0122c7e:	01 d0                	add    %edx,%eax
f0122c80:	48                   	dec    %eax
f0122c81:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0122c87:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0122c8d:	ba 00 00 00 00       	mov    $0x0,%edx
f0122c92:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0122c98:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0122c9e:	29 d0                	sub    %edx,%eax
f0122ca0:	01 c3                	add    %eax,%ebx
f0122ca2:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0122ca9:	10 00 00 
f0122cac:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0122cb1:	0f b6 c0             	movzbl %al,%eax
f0122cb4:	c1 e0 04             	shl    $0x4,%eax
f0122cb7:	89 c2                	mov    %eax,%edx
f0122cb9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0122cbf:	01 d0                	add    %edx,%eax
f0122cc1:	48                   	dec    %eax
f0122cc2:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0122cc8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0122cce:	ba 00 00 00 00       	mov    $0x0,%edx
f0122cd3:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0122cd9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0122cdf:	29 d0                	sub    %edx,%eax
f0122ce1:	01 d8                	add    %ebx,%eax
f0122ce3:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0122ce8:	39 c1                	cmp    %eax,%ecx
f0122cea:	74 17                	je     f0122d03 <test_kfree_bestfirstfit+0x9aa>
f0122cec:	83 ec 04             	sub    $0x4,%esp
f0122cef:	68 60 b2 13 f0       	push   $0xf013b260
f0122cf4:	68 df 06 00 00       	push   $0x6df
f0122cf9:	68 7a b1 13 f0       	push   $0xf013b17a
f0122cfe:	e8 02 d5 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122d03:	e8 9e 10 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0122d08:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122d0b:	74 17                	je     f0122d24 <test_kfree_bestfirstfit+0x9cb>
f0122d0d:	83 ec 04             	sub    $0x4,%esp
f0122d10:	68 94 b1 13 f0       	push   $0xf013b194
f0122d15:	68 e0 06 00 00       	push   $0x6e0
f0122d1a:	68 7a b1 13 f0       	push   $0xf013b17a
f0122d1f:	e8 e1 d4 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122d24:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122d27:	e8 b7 a0 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0122d2c:	29 c3                	sub    %eax,%ebx
f0122d2e:	89 d8                	mov    %ebx,%eax
f0122d30:	3d 00 06 00 00       	cmp    $0x600,%eax
f0122d35:	74 17                	je     f0122d4e <test_kfree_bestfirstfit+0x9f5>
f0122d37:	83 ec 04             	sub    $0x4,%esp
f0122d3a:	68 fc b1 13 f0       	push   $0xf013b1fc
f0122d3f:	68 e1 06 00 00       	push   $0x6e1
f0122d44:	68 7a b1 13 f0       	push   $0xf013b17a
f0122d49:	e8 b7 d4 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0122d4e:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f0122d55:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0122d58:	e8 86 a0 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0122d5d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122d60:	e8 41 10 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0122d65:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0122d68:	83 ec 0c             	sub    $0xc,%esp
f0122d6b:	68 00 38 00 00       	push   $0x3800
f0122d70:	e8 ec 4c fe ff       	call   f0107a61 <kmalloc>
f0122d75:	83 c4 10             	add    $0x10,%esp
f0122d78:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122d7e:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0122d84:	89 c1                	mov    %eax,%ecx
f0122d86:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0122d8d:	10 00 00 
f0122d90:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0122d96:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122d9b:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0122da1:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0122da7:	ba 00 00 00 00       	mov    $0x0,%edx
f0122dac:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0122db2:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0122db8:	29 d0                	sub    %edx,%eax
f0122dba:	89 c3                	mov    %eax,%ebx
f0122dbc:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0122dc3:	10 00 00 
f0122dc6:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0122dcb:	0f b6 d0             	movzbl %al,%edx
f0122dce:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0122dd4:	01 d0                	add    %edx,%eax
f0122dd6:	48                   	dec    %eax
f0122dd7:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0122ddd:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0122de3:	ba 00 00 00 00       	mov    $0x0,%edx
f0122de8:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0122dee:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0122df4:	29 d0                	sub    %edx,%eax
f0122df6:	01 c3                	add    %eax,%ebx
f0122df8:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0122dff:	10 00 00 
f0122e02:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0122e07:	0f b6 c0             	movzbl %al,%eax
f0122e0a:	c1 e0 04             	shl    $0x4,%eax
f0122e0d:	89 c2                	mov    %eax,%edx
f0122e0f:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0122e15:	01 d0                	add    %edx,%eax
f0122e17:	48                   	dec    %eax
f0122e18:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0122e1e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0122e24:	ba 00 00 00 00       	mov    $0x0,%edx
f0122e29:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0122e2f:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0122e35:	29 d0                	sub    %edx,%eax
f0122e37:	01 d8                	add    %ebx,%eax
f0122e39:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0122e3e:	39 c1                	cmp    %eax,%ecx
f0122e40:	74 17                	je     f0122e59 <test_kfree_bestfirstfit+0xb00>
f0122e42:	83 ec 04             	sub    $0x4,%esp
f0122e45:	68 60 b2 13 f0       	push   $0xf013b260
f0122e4a:	68 e8 06 00 00       	push   $0x6e8
f0122e4f:	68 7a b1 13 f0       	push   $0xf013b17a
f0122e54:	e8 ac d3 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122e59:	e8 48 0f fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0122e5e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122e61:	74 17                	je     f0122e7a <test_kfree_bestfirstfit+0xb21>
f0122e63:	83 ec 04             	sub    $0x4,%esp
f0122e66:	68 94 b1 13 f0       	push   $0xf013b194
f0122e6b:	68 e9 06 00 00       	push   $0x6e9
f0122e70:	68 7a b1 13 f0       	push   $0xf013b17a
f0122e75:	e8 8b d3 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122e7a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122e7d:	e8 61 9f fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0122e82:	29 c3                	sub    %eax,%ebx
f0122e84:	89 d8                	mov    %ebx,%eax
f0122e86:	83 f8 04             	cmp    $0x4,%eax
f0122e89:	74 17                	je     f0122ea2 <test_kfree_bestfirstfit+0xb49>
f0122e8b:	83 ec 04             	sub    $0x4,%esp
f0122e8e:	68 fc b1 13 f0       	push   $0xf013b1fc
f0122e93:	68 ea 06 00 00       	push   $0x6ea
f0122e98:	68 7a b1 13 f0       	push   $0xf013b17a
f0122e9d:	e8 63 d3 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0122ea2:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f0122ea9:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0122eac:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0122eb2:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0122eb5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122ebc:	eb 0e                	jmp    f0122ecc <test_kfree_bestfirstfit+0xb73>
		{
			ptr[i] = 7 ;
f0122ebe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122ec1:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122ec4:	01 d0                	add    %edx,%eax
f0122ec6:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0122ec9:	ff 45 f4             	incl   -0xc(%ebp)
f0122ecc:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0122ed2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122ed5:	7f e7                	jg     f0122ebe <test_kfree_bestfirstfit+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0122ed7:	e8 07 9f fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0122edc:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0122ee2:	e8 bf 0e fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0122ee7:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f0122eed:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0122ef3:	83 ec 0c             	sub    $0xc,%esp
f0122ef6:	50                   	push   %eax
f0122ef7:	e8 7b 4c fe ff       	call   f0107b77 <kfree>
f0122efc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122eff:	e8 a2 0e fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0122f04:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0122f0a:	74 17                	je     f0122f23 <test_kfree_bestfirstfit+0xbca>
f0122f0c:	83 ec 04             	sub    $0x4,%esp
f0122f0f:	68 94 b1 13 f0       	push   $0xf013b194
f0122f14:	68 f9 06 00 00       	push   $0x6f9
f0122f19:	68 7a b1 13 f0       	push   $0xf013b17a
f0122f1e:	e8 e2 d2 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0122f23:	e8 bb 9e fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0122f28:	89 c2                	mov    %eax,%edx
f0122f2a:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0122f30:	29 c2                	sub    %eax,%edx
f0122f32:	89 d0                	mov    %edx,%eax
f0122f34:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122f39:	74 17                	je     f0122f52 <test_kfree_bestfirstfit+0xbf9>
f0122f3b:	83 ec 04             	sub    $0x4,%esp
f0122f3e:	68 04 b9 13 f0       	push   $0xf013b904
f0122f43:	68 fa 06 00 00       	push   $0x6fa
f0122f48:	68 7a b1 13 f0       	push   $0xf013b17a
f0122f4d:	e8 b3 d2 fd ff       	call   f0100205 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122f52:	e8 8c 9e fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0122f57:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122f5d:	e8 44 0e fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0122f62:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f0122f68:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0122f6e:	83 ec 0c             	sub    $0xc,%esp
f0122f71:	50                   	push   %eax
f0122f72:	e8 00 4c fe ff       	call   f0107b77 <kfree>
f0122f77:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122f7a:	e8 27 0e fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0122f7f:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0122f85:	74 17                	je     f0122f9e <test_kfree_bestfirstfit+0xc45>
f0122f87:	83 ec 04             	sub    $0x4,%esp
f0122f8a:	68 94 b1 13 f0       	push   $0xf013b194
f0122f8f:	68 00 07 00 00       	push   $0x700
f0122f94:	68 7a b1 13 f0       	push   $0xf013b17a
f0122f99:	e8 67 d2 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0122f9e:	e8 40 9e fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0122fa3:	89 c2                	mov    %eax,%edx
f0122fa5:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0122fab:	29 c2                	sub    %eax,%edx
f0122fad:	89 d0                	mov    %edx,%eax
f0122faf:	83 f8 01             	cmp    $0x1,%eax
f0122fb2:	74 17                	je     f0122fcb <test_kfree_bestfirstfit+0xc72>
f0122fb4:	83 ec 04             	sub    $0x4,%esp
f0122fb7:	68 04 b9 13 f0       	push   $0xf013b904
f0122fbc:	68 01 07 00 00       	push   $0x701
f0122fc1:	68 7a b1 13 f0       	push   $0xf013b17a
f0122fc6:	e8 3a d2 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122fcb:	e8 13 9e fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0122fd0:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122fd6:	e8 cb 0d fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0122fdb:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f0122fe1:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0122fe7:	83 ec 0c             	sub    $0xc,%esp
f0122fea:	50                   	push   %eax
f0122feb:	e8 87 4b fe ff       	call   f0107b77 <kfree>
f0122ff0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122ff3:	e8 ae 0d fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0122ff8:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0122ffe:	74 17                	je     f0123017 <test_kfree_bestfirstfit+0xcbe>
f0123000:	83 ec 04             	sub    $0x4,%esp
f0123003:	68 94 b1 13 f0       	push   $0xf013b194
f0123008:	68 07 07 00 00       	push   $0x707
f012300d:	68 7a b1 13 f0       	push   $0xf013b17a
f0123012:	e8 ee d1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0123017:	e8 c7 9d fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012301c:	89 c2                	mov    %eax,%edx
f012301e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0123024:	29 c2                	sub    %eax,%edx
f0123026:	89 d0                	mov    %edx,%eax
f0123028:	3d 00 02 00 00       	cmp    $0x200,%eax
f012302d:	74 17                	je     f0123046 <test_kfree_bestfirstfit+0xced>
f012302f:	83 ec 04             	sub    $0x4,%esp
f0123032:	68 04 b9 13 f0       	push   $0xf013b904
f0123037:	68 08 07 00 00       	push   $0x708
f012303c:	68 7a b1 13 f0       	push   $0xf013b17a
f0123041:	e8 bf d1 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0123046:	e8 98 9d fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012304b:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123051:	e8 50 0d fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0123056:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f012305c:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0123062:	83 ec 0c             	sub    $0xc,%esp
f0123065:	50                   	push   %eax
f0123066:	e8 0c 4b fe ff       	call   f0107b77 <kfree>
f012306b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012306e:	e8 33 0d fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0123073:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0123079:	74 17                	je     f0123092 <test_kfree_bestfirstfit+0xd39>
f012307b:	83 ec 04             	sub    $0x4,%esp
f012307e:	68 94 b1 13 f0       	push   $0xf013b194
f0123083:	68 0e 07 00 00       	push   $0x70e
f0123088:	68 7a b1 13 f0       	push   $0xf013b17a
f012308d:	e8 73 d1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0123092:	e8 4c 9d fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0123097:	89 c2                	mov    %eax,%edx
f0123099:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012309f:	29 c2                	sub    %eax,%edx
f01230a1:	89 d0                	mov    %edx,%eax
f01230a3:	3d 00 06 00 00       	cmp    $0x600,%eax
f01230a8:	74 17                	je     f01230c1 <test_kfree_bestfirstfit+0xd68>
f01230aa:	83 ec 04             	sub    $0x4,%esp
f01230ad:	68 04 b9 13 f0       	push   $0xf013b904
f01230b2:	68 0f 07 00 00       	push   $0x70f
f01230b7:	68 7a b1 13 f0       	push   $0xf013b17a
f01230bc:	e8 44 d1 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f01230c1:	83 ec 0c             	sub    $0xc,%esp
f01230c4:	68 3c b9 13 f0       	push   $0xf013b93c
f01230c9:	e8 40 dc fd ff       	call   f0100d0e <cprintf>
f01230ce:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f01230d1:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01230d7:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01230da:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01230e1:	eb 1e                	jmp    f0123101 <test_kfree_bestfirstfit+0xda8>
		{
			sums[3] += ptr[i] ;
f01230e3:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f01230e9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01230ec:	8b 45 80             	mov    -0x80(%ebp),%eax
f01230ef:	01 c8                	add    %ecx,%eax
f01230f1:	8a 00                	mov    (%eax),%al
f01230f3:	0f be c0             	movsbl %al,%eax
f01230f6:	01 d0                	add    %edx,%eax
f01230f8:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01230fe:	ff 45 f4             	incl   -0xc(%ebp)
f0123101:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0123107:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012310a:	7f d7                	jg     f01230e3 <test_kfree_bestfirstfit+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f012310c:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0123112:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0123118:	89 c1                	mov    %eax,%ecx
f012311a:	01 c9                	add    %ecx,%ecx
f012311c:	01 c8                	add    %ecx,%eax
f012311e:	39 c2                	cmp    %eax,%edx
f0123120:	74 17                	je     f0123139 <test_kfree_bestfirstfit+0xde0>
f0123122:	83 ec 04             	sub    $0x4,%esp
f0123125:	68 60 b9 13 f0       	push   $0xf013b960
f012312a:	68 1c 07 00 00       	push   $0x71c
f012312f:	68 7a b1 13 f0       	push   $0xf013b17a
f0123134:	e8 cc d0 fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0123139:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f012313f:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0123142:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123149:	eb 1e                	jmp    f0123169 <test_kfree_bestfirstfit+0xe10>
		{
			sums[4] += ptr[i] ;
f012314b:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f0123151:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0123154:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123157:	01 c8                	add    %ecx,%eax
f0123159:	8a 00                	mov    (%eax),%al
f012315b:	0f be c0             	movsbl %al,%eax
f012315e:	01 d0                	add    %edx,%eax
f0123160:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0123166:	ff 45 f4             	incl   -0xc(%ebp)
f0123169:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012316f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0123172:	7f d7                	jg     f012314b <test_kfree_bestfirstfit+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0123174:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012317a:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0123180:	c1 e2 02             	shl    $0x2,%edx
f0123183:	39 d0                	cmp    %edx,%eax
f0123185:	74 17                	je     f012319e <test_kfree_bestfirstfit+0xe45>
f0123187:	83 ec 04             	sub    $0x4,%esp
f012318a:	68 60 b9 13 f0       	push   $0xf013b960
f012318f:	68 24 07 00 00       	push   $0x724
f0123194:	68 7a b1 13 f0       	push   $0xf013b17a
f0123199:	e8 67 d0 fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f012319e:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01231a4:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01231a7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01231ae:	eb 1e                	jmp    f01231ce <test_kfree_bestfirstfit+0xe75>
		{
			sums[5] += ptr[i] ;
f01231b0:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f01231b6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01231b9:	8b 45 80             	mov    -0x80(%ebp),%eax
f01231bc:	01 c8                	add    %ecx,%eax
f01231be:	8a 00                	mov    (%eax),%al
f01231c0:	0f be c0             	movsbl %al,%eax
f01231c3:	01 d0                	add    %edx,%eax
f01231c5:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01231cb:	ff 45 f4             	incl   -0xc(%ebp)
f01231ce:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01231d4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01231d7:	7f d7                	jg     f01231b0 <test_kfree_bestfirstfit+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f01231d9:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f01231df:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f01231e5:	89 d0                	mov    %edx,%eax
f01231e7:	c1 e0 02             	shl    $0x2,%eax
f01231ea:	01 d0                	add    %edx,%eax
f01231ec:	39 c1                	cmp    %eax,%ecx
f01231ee:	74 17                	je     f0123207 <test_kfree_bestfirstfit+0xeae>
f01231f0:	83 ec 04             	sub    $0x4,%esp
f01231f3:	68 60 b9 13 f0       	push   $0xf013b960
f01231f8:	68 2c 07 00 00       	push   $0x72c
f01231fd:	68 7a b1 13 f0       	push   $0xf013b17a
f0123202:	e8 fe cf fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0123207:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f012320d:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0123210:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123217:	eb 1e                	jmp    f0123237 <test_kfree_bestfirstfit+0xede>
		{
			sums[7] += ptr[i] ;
f0123219:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f012321f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0123222:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123225:	01 c8                	add    %ecx,%eax
f0123227:	8a 00                	mov    (%eax),%al
f0123229:	0f be c0             	movsbl %al,%eax
f012322c:	01 d0                	add    %edx,%eax
f012322e:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0123234:	ff 45 f4             	incl   -0xc(%ebp)
f0123237:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012323d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0123240:	7f d7                	jg     f0123219 <test_kfree_bestfirstfit+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0123242:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f0123248:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f012324e:	89 d0                	mov    %edx,%eax
f0123250:	01 c0                	add    %eax,%eax
f0123252:	01 d0                	add    %edx,%eax
f0123254:	01 c0                	add    %eax,%eax
f0123256:	01 d0                	add    %edx,%eax
f0123258:	39 c1                	cmp    %eax,%ecx
f012325a:	74 17                	je     f0123273 <test_kfree_bestfirstfit+0xf1a>
f012325c:	83 ec 04             	sub    $0x4,%esp
f012325f:	68 60 b9 13 f0       	push   $0xf013b960
f0123264:	68 34 07 00 00       	push   $0x734
f0123269:	68 7a b1 13 f0       	push   $0xf013b17a
f012326e:	e8 92 cf fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b30%");
f0123273:	83 ec 0c             	sub    $0xc,%esp
f0123276:	68 93 b9 13 f0       	push   $0xf013b993
f012327b:	e8 8e da fd ff       	call   f0100d0e <cprintf>
f0123280:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//Allocate in merged freed space
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0123283:	e8 5b 9b fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0123288:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012328b:	e8 16 0b fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0123290:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega);
f0123293:	83 ec 0c             	sub    $0xc,%esp
f0123296:	68 00 00 30 00       	push   $0x300000
f012329b:	e8 c1 47 fe ff       	call   f0107a61 <kmalloc>
f01232a0:	83 c4 10             	add    $0x10,%esp
f01232a3:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01232a9:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01232af:	89 c1                	mov    %eax,%ecx
f01232b1:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f01232b8:	10 00 00 
f01232bb:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01232c1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01232c6:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f01232cc:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01232d2:	ba 00 00 00 00       	mov    $0x0,%edx
f01232d7:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f01232dd:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01232e3:	29 d0                	sub    %edx,%eax
f01232e5:	89 c3                	mov    %eax,%ebx
f01232e7:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f01232ee:	10 00 00 
f01232f1:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01232f6:	0f b6 d0             	movzbl %al,%edx
f01232f9:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01232ff:	01 d0                	add    %edx,%eax
f0123301:	48                   	dec    %eax
f0123302:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0123308:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012330e:	ba 00 00 00 00       	mov    $0x0,%edx
f0123313:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0123319:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012331f:	29 d0                	sub    %edx,%eax
f0123321:	01 c3                	add    %eax,%ebx
f0123323:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f012332a:	10 00 00 
f012332d:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0123332:	0f b6 c0             	movzbl %al,%eax
f0123335:	c1 e0 04             	shl    $0x4,%eax
f0123338:	89 c2                	mov    %eax,%edx
f012333a:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0123340:	01 d0                	add    %edx,%eax
f0123342:	48                   	dec    %eax
f0123343:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0123349:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012334f:	ba 00 00 00 00       	mov    $0x0,%edx
f0123354:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f012335a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0123360:	29 d0                	sub    %edx,%eax
f0123362:	01 d8                	add    %ebx,%eax
f0123364:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0123369:	39 c1                	cmp    %eax,%ecx
f012336b:	74 17                	je     f0123384 <test_kfree_bestfirstfit+0x102b>
f012336d:	83 ec 04             	sub    $0x4,%esp
f0123370:	68 60 b2 13 f0       	push   $0xf013b260
f0123375:	68 3f 07 00 00       	push   $0x73f
f012337a:	68 7a b1 13 f0       	push   $0xf013b17a
f012337f:	e8 81 ce fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123384:	e8 1d 0a fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0123389:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012338c:	74 17                	je     f01233a5 <test_kfree_bestfirstfit+0x104c>
f012338e:	83 ec 04             	sub    $0x4,%esp
f0123391:	68 94 b1 13 f0       	push   $0xf013b194
f0123396:	68 40 07 00 00       	push   $0x740
f012339b:	68 7a b1 13 f0       	push   $0xf013b17a
f01233a0:	e8 60 ce fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01233a5:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01233a8:	e8 36 9a fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01233ad:	29 c3                	sub    %eax,%ebx
f01233af:	89 d8                	mov    %ebx,%eax
f01233b1:	3d 00 03 00 00       	cmp    $0x300,%eax
f01233b6:	74 17                	je     f01233cf <test_kfree_bestfirstfit+0x1076>
f01233b8:	83 ec 04             	sub    $0x4,%esp
f01233bb:	68 fc b1 13 f0       	push   $0xf013b1fc
f01233c0:	68 41 07 00 00       	push   $0x741
f01233c5:	68 7a b1 13 f0       	push   $0xf013b17a
f01233ca:	e8 36 ce fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
f01233cf:	c7 85 88 fe ff ff ff 	movl   $0x2fffff,-0x178(%ebp)
f01233d6:	ff 2f 00 
		ptr = (char*)ptr_allocations[8];
f01233d9:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01233df:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f01233e2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01233e9:	eb 0e                	jmp    f01233f9 <test_kfree_bestfirstfit+0x10a0>
		{
			ptr[i] = 8 ;
f01233eb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01233ee:	8b 45 80             	mov    -0x80(%ebp),%eax
f01233f1:	01 d0                	add    %edx,%eax
f01233f3:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f01233f6:	ff 45 f4             	incl   -0xc(%ebp)
f01233f9:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01233ff:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0123402:	7f e7                	jg     f01233eb <test_kfree_bestfirstfit+0x1092>
		{
			ptr[i] = 8 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123404:	e8 da 99 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0123409:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012340c:	e8 95 09 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0123411:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(2*kilo);
f0123414:	83 ec 0c             	sub    $0xc,%esp
f0123417:	68 00 08 00 00       	push   $0x800
f012341c:	e8 40 46 fe ff       	call   f0107a61 <kmalloc>
f0123421:	83 c4 10             	add    $0x10,%esp
f0123424:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012342a:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0123430:	89 c1                	mov    %eax,%ecx
f0123432:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0123439:	10 00 00 
f012343c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0123442:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123447:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f012344d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0123453:	ba 00 00 00 00       	mov    $0x0,%edx
f0123458:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f012345e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0123464:	29 d0                	sub    %edx,%eax
f0123466:	89 c3                	mov    %eax,%ebx
f0123468:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f012346f:	10 00 00 
f0123472:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0123477:	0f b6 d0             	movzbl %al,%edx
f012347a:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0123480:	01 d0                	add    %edx,%eax
f0123482:	48                   	dec    %eax
f0123483:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0123489:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012348f:	ba 00 00 00 00       	mov    $0x0,%edx
f0123494:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f012349a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01234a0:	29 d0                	sub    %edx,%eax
f01234a2:	01 c3                	add    %eax,%ebx
f01234a4:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f01234ab:	10 00 00 
f01234ae:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01234b3:	0f b6 c0             	movzbl %al,%eax
f01234b6:	c1 e0 04             	shl    $0x4,%eax
f01234b9:	89 c2                	mov    %eax,%edx
f01234bb:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01234c1:	01 d0                	add    %edx,%eax
f01234c3:	48                   	dec    %eax
f01234c4:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f01234ca:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01234d0:	ba 00 00 00 00       	mov    $0x0,%edx
f01234d5:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f01234db:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01234e1:	29 d0                	sub    %edx,%eax
f01234e3:	01 d8                	add    %ebx,%eax
f01234e5:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f01234ea:	39 c1                	cmp    %eax,%ecx
f01234ec:	74 17                	je     f0123505 <test_kfree_bestfirstfit+0x11ac>
f01234ee:	83 ec 04             	sub    $0x4,%esp
f01234f1:	68 60 b2 13 f0       	push   $0xf013b260
f01234f6:	68 4d 07 00 00       	push   $0x74d
f01234fb:	68 7a b1 13 f0       	push   $0xf013b17a
f0123500:	e8 00 cd fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123505:	e8 9c 08 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f012350a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012350d:	74 17                	je     f0123526 <test_kfree_bestfirstfit+0x11cd>
f012350f:	83 ec 04             	sub    $0x4,%esp
f0123512:	68 94 b1 13 f0       	push   $0xf013b194
f0123517:	68 4e 07 00 00       	push   $0x74e
f012351c:	68 7a b1 13 f0       	push   $0xf013b17a
f0123521:	e8 df cc fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123526:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0123529:	e8 b5 98 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012352e:	29 c3                	sub    %eax,%ebx
f0123530:	89 d8                	mov    %ebx,%eax
f0123532:	83 f8 01             	cmp    $0x1,%eax
f0123535:	74 17                	je     f012354e <test_kfree_bestfirstfit+0x11f5>
f0123537:	83 ec 04             	sub    $0x4,%esp
f012353a:	68 fc b1 13 f0       	push   $0xf013b1fc
f012353f:	68 4f 07 00 00       	push   $0x74f
f0123544:	68 7a b1 13 f0       	push   $0xf013b17a
f0123549:	e8 b7 cc fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
f012354e:	c7 85 8c fe ff ff ff 	movl   $0x7ff,-0x174(%ebp)
f0123555:	07 00 00 
		ptr = (char*)ptr_allocations[9];
f0123558:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f012355e:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0123561:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123568:	eb 0e                	jmp    f0123578 <test_kfree_bestfirstfit+0x121f>
		{
			ptr[i] = 9 ;
f012356a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012356d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123570:	01 d0                	add    %edx,%eax
f0123572:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0123575:	ff 45 f4             	incl   -0xc(%ebp)
f0123578:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012357e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0123581:	7f e7                	jg     f012356a <test_kfree_bestfirstfit+0x1211>
		{
			ptr[i] = 9 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0123583:	e8 5b 98 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0123588:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012358b:	e8 16 08 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0123590:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(1*Mega);
f0123593:	83 ec 0c             	sub    $0xc,%esp
f0123596:	68 00 00 10 00       	push   $0x100000
f012359b:	e8 c1 44 fe ff       	call   f0107a61 <kmalloc>
f01235a0:	83 c4 10             	add    $0x10,%esp
f01235a3:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01235a9:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01235af:	89 c1                	mov    %eax,%ecx
f01235b1:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f01235b8:	10 00 00 
f01235bb:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01235c1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01235c6:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f01235cc:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01235d2:	ba 00 00 00 00       	mov    $0x0,%edx
f01235d7:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f01235dd:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01235e3:	29 d0                	sub    %edx,%eax
f01235e5:	89 c3                	mov    %eax,%ebx
f01235e7:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f01235ee:	10 00 00 
f01235f1:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01235f6:	0f b6 d0             	movzbl %al,%edx
f01235f9:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01235ff:	01 d0                	add    %edx,%eax
f0123601:	48                   	dec    %eax
f0123602:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0123608:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012360e:	ba 00 00 00 00       	mov    $0x0,%edx
f0123613:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0123619:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012361f:	29 d0                	sub    %edx,%eax
f0123621:	01 c3                	add    %eax,%ebx
f0123623:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012362a:	10 00 00 
f012362d:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0123632:	0f b6 c0             	movzbl %al,%eax
f0123635:	c1 e0 04             	shl    $0x4,%eax
f0123638:	89 c2                	mov    %eax,%edx
f012363a:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0123640:	01 d0                	add    %edx,%eax
f0123642:	48                   	dec    %eax
f0123643:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0123649:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012364f:	ba 00 00 00 00       	mov    $0x0,%edx
f0123654:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012365a:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0123660:	29 d0                	sub    %edx,%eax
f0123662:	01 d8                	add    %ebx,%eax
f0123664:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f0123669:	39 c1                	cmp    %eax,%ecx
f012366b:	74 17                	je     f0123684 <test_kfree_bestfirstfit+0x132b>
f012366d:	83 ec 04             	sub    $0x4,%esp
f0123670:	68 60 b2 13 f0       	push   $0xf013b260
f0123675:	68 5b 07 00 00       	push   $0x75b
f012367a:	68 7a b1 13 f0       	push   $0xf013b17a
f012367f:	e8 81 cb fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123684:	e8 1d 07 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0123689:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012368c:	74 17                	je     f01236a5 <test_kfree_bestfirstfit+0x134c>
f012368e:	83 ec 04             	sub    $0x4,%esp
f0123691:	68 94 b1 13 f0       	push   $0xf013b194
f0123696:	68 5c 07 00 00       	push   $0x75c
f012369b:	68 7a b1 13 f0       	push   $0xf013b17a
f01236a0:	e8 60 cb fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f01236a5:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01236a8:	e8 36 97 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01236ad:	29 c3                	sub    %eax,%ebx
f01236af:	89 d8                	mov    %ebx,%eax
f01236b1:	3d 00 01 00 00       	cmp    $0x100,%eax
f01236b6:	74 17                	je     f01236cf <test_kfree_bestfirstfit+0x1376>
f01236b8:	83 ec 04             	sub    $0x4,%esp
f01236bb:	68 fc b1 13 f0       	push   $0xf013b1fc
f01236c0:	68 5d 07 00 00       	push   $0x75d
f01236c5:	68 7a b1 13 f0       	push   $0xf013b17a
f01236ca:	e8 36 cb fd ff       	call   f0100205 <_panic>
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
f01236cf:	c7 85 90 fe ff ff ff 	movl   $0xfffff,-0x170(%ebp)
f01236d6:	ff 0f 00 
		ptr = (char*)ptr_allocations[10];
f01236d9:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01236df:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f01236e2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01236e9:	eb 0e                	jmp    f01236f9 <test_kfree_bestfirstfit+0x13a0>
		{
			ptr[i] = 10 ;
f01236eb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01236ee:	8b 45 80             	mov    -0x80(%ebp),%eax
f01236f1:	01 d0                	add    %edx,%eax
f01236f3:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f01236f6:	ff 45 f4             	incl   -0xc(%ebp)
f01236f9:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01236ff:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0123702:	7f e7                	jg     f01236eb <test_kfree_bestfirstfit+0x1392>
		{
			ptr[i] = 10 ;
		}
	}
	cprintf("\b\b\b45%");
f0123704:	83 ec 0c             	sub    $0xc,%esp
f0123707:	68 9a b9 13 f0       	push   $0xf013b99a
f012370c:	e8 fd d5 fd ff       	call   f0100d0e <cprintf>
f0123711:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0123714:	e8 ca 96 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0123719:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012371c:	e8 85 06 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0123721:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0123724:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f012372a:	83 ec 0c             	sub    $0xc,%esp
f012372d:	50                   	push   %eax
f012372e:	e8 44 44 fe ff       	call   f0107b77 <kfree>
f0123733:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123736:	e8 6b 06 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f012373b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012373e:	74 17                	je     f0123757 <test_kfree_bestfirstfit+0x13fe>
f0123740:	83 ec 04             	sub    $0x4,%esp
f0123743:	68 94 b1 13 f0       	push   $0xf013b194
f0123748:	68 6d 07 00 00       	push   $0x76d
f012374d:	68 7a b1 13 f0       	push   $0xf013b17a
f0123752:	e8 ae ca fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0123757:	e8 87 96 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012375c:	89 c2                	mov    %eax,%edx
f012375e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123761:	29 c2                	sub    %eax,%edx
f0123763:	89 d0                	mov    %edx,%eax
f0123765:	83 f8 02             	cmp    $0x2,%eax
f0123768:	74 17                	je     f0123781 <test_kfree_bestfirstfit+0x1428>
f012376a:	83 ec 04             	sub    $0x4,%esp
f012376d:	68 04 b9 13 f0       	push   $0xf013b904
f0123772:	68 6e 07 00 00       	push   $0x76e
f0123777:	68 7a b1 13 f0       	push   $0xf013b17a
f012377c:	e8 84 ca fd ff       	call   f0100205 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0123781:	e8 5d 96 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0123786:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123789:	e8 18 06 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f012378e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0123791:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0123797:	83 ec 0c             	sub    $0xc,%esp
f012379a:	50                   	push   %eax
f012379b:	e8 d7 43 fe ff       	call   f0107b77 <kfree>
f01237a0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01237a3:	e8 fe 05 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f01237a8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01237ab:	74 17                	je     f01237c4 <test_kfree_bestfirstfit+0x146b>
f01237ad:	83 ec 04             	sub    $0x4,%esp
f01237b0:	68 94 b1 13 f0       	push   $0xf013b194
f01237b5:	68 74 07 00 00       	push   $0x774
f01237ba:	68 7a b1 13 f0       	push   $0xf013b17a
f01237bf:	e8 41 ca fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01237c4:	e8 1a 96 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01237c9:	89 c2                	mov    %eax,%edx
f01237cb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01237ce:	29 c2                	sub    %eax,%edx
f01237d0:	89 d0                	mov    %edx,%eax
f01237d2:	3d 00 03 00 00       	cmp    $0x300,%eax
f01237d7:	74 17                	je     f01237f0 <test_kfree_bestfirstfit+0x1497>
f01237d9:	83 ec 04             	sub    $0x4,%esp
f01237dc:	68 04 b9 13 f0       	push   $0xf013b904
f01237e1:	68 75 07 00 00       	push   $0x775
f01237e6:	68 7a b1 13 f0       	push   $0xf013b17a
f01237eb:	e8 15 ca fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01237f0:	e8 ee 95 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01237f5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01237f8:	e8 a9 05 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f01237fd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0123800:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0123806:	83 ec 0c             	sub    $0xc,%esp
f0123809:	50                   	push   %eax
f012380a:	e8 68 43 fe ff       	call   f0107b77 <kfree>
f012380f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123812:	e8 8f 05 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0123817:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012381a:	74 17                	je     f0123833 <test_kfree_bestfirstfit+0x14da>
f012381c:	83 ec 04             	sub    $0x4,%esp
f012381f:	68 94 b1 13 f0       	push   $0xf013b194
f0123824:	68 7b 07 00 00       	push   $0x77b
f0123829:	68 7a b1 13 f0       	push   $0xf013b17a
f012382e:	e8 d2 c9 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0123833:	e8 ab 95 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0123838:	89 c2                	mov    %eax,%edx
f012383a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012383d:	29 c2                	sub    %eax,%edx
f012383f:	89 d0                	mov    %edx,%eax
f0123841:	83 f8 01             	cmp    $0x1,%eax
f0123844:	74 17                	je     f012385d <test_kfree_bestfirstfit+0x1504>
f0123846:	83 ec 04             	sub    $0x4,%esp
f0123849:	68 04 b9 13 f0       	push   $0xf013b904
f012384e:	68 7c 07 00 00       	push   $0x77c
f0123853:	68 7a b1 13 f0       	push   $0xf013b17a
f0123858:	e8 a8 c9 fd ff       	call   f0100205 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f012385d:	e8 81 95 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0123862:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123865:	e8 3c 05 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f012386a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f012386d:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0123873:	83 ec 0c             	sub    $0xc,%esp
f0123876:	50                   	push   %eax
f0123877:	e8 fb 42 fe ff       	call   f0107b77 <kfree>
f012387c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012387f:	e8 22 05 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0123884:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123887:	74 17                	je     f01238a0 <test_kfree_bestfirstfit+0x1547>
f0123889:	83 ec 04             	sub    $0x4,%esp
f012388c:	68 94 b1 13 f0       	push   $0xf013b194
f0123891:	68 82 07 00 00       	push   $0x782
f0123896:	68 7a b1 13 f0       	push   $0xf013b17a
f012389b:	e8 65 c9 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f01238a0:	e8 3e 95 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01238a5:	89 c2                	mov    %eax,%edx
f01238a7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01238aa:	29 c2                	sub    %eax,%edx
f01238ac:	89 d0                	mov    %edx,%eax
f01238ae:	83 f8 04             	cmp    $0x4,%eax
f01238b1:	74 17                	je     f01238ca <test_kfree_bestfirstfit+0x1571>
f01238b3:	83 ec 04             	sub    $0x4,%esp
f01238b6:	68 04 b9 13 f0       	push   $0xf013b904
f01238bb:	68 83 07 00 00       	push   $0x783
f01238c0:	68 7a b1 13 f0       	push   $0xf013b17a
f01238c5:	e8 3b c9 fd ff       	call   f0100205 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f01238ca:	e8 14 95 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01238cf:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01238d2:	e8 cf 04 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f01238d7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01238da:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01238e0:	83 ec 0c             	sub    $0xc,%esp
f01238e3:	50                   	push   %eax
f01238e4:	e8 8e 42 fe ff       	call   f0107b77 <kfree>
f01238e9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01238ec:	e8 b5 04 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f01238f1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01238f4:	74 17                	je     f012390d <test_kfree_bestfirstfit+0x15b4>
f01238f6:	83 ec 04             	sub    $0x4,%esp
f01238f9:	68 94 b1 13 f0       	push   $0xf013b194
f01238fe:	68 89 07 00 00       	push   $0x789
f0123903:	68 7a b1 13 f0       	push   $0xf013b17a
f0123908:	e8 f8 c8 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012390d:	e8 d1 94 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0123912:	89 c2                	mov    %eax,%edx
f0123914:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123917:	29 c2                	sub    %eax,%edx
f0123919:	89 d0                	mov    %edx,%eax
f012391b:	3d 00 03 00 00       	cmp    $0x300,%eax
f0123920:	74 17                	je     f0123939 <test_kfree_bestfirstfit+0x15e0>
f0123922:	83 ec 04             	sub    $0x4,%esp
f0123925:	68 04 b9 13 f0       	push   $0xf013b904
f012392a:	68 8a 07 00 00       	push   $0x78a
f012392f:	68 7a b1 13 f0       	push   $0xf013b17a
f0123934:	e8 cc c8 fd ff       	call   f0100205 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123939:	e8 a5 94 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012393e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123941:	e8 60 04 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0123946:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0123949:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f012394f:	83 ec 0c             	sub    $0xc,%esp
f0123952:	50                   	push   %eax
f0123953:	e8 1f 42 fe ff       	call   f0107b77 <kfree>
f0123958:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012395b:	e8 46 04 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0123960:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123963:	74 17                	je     f012397c <test_kfree_bestfirstfit+0x1623>
f0123965:	83 ec 04             	sub    $0x4,%esp
f0123968:	68 94 b1 13 f0       	push   $0xf013b194
f012396d:	68 90 07 00 00       	push   $0x790
f0123972:	68 7a b1 13 f0       	push   $0xf013b17a
f0123977:	e8 89 c8 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f012397c:	e8 62 94 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0123981:	89 c2                	mov    %eax,%edx
f0123983:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123986:	29 c2                	sub    %eax,%edx
f0123988:	89 d0                	mov    %edx,%eax
f012398a:	83 f8 01             	cmp    $0x1,%eax
f012398d:	74 17                	je     f01239a6 <test_kfree_bestfirstfit+0x164d>
f012398f:	83 ec 04             	sub    $0x4,%esp
f0123992:	68 04 b9 13 f0       	push   $0xf013b904
f0123997:	68 91 07 00 00       	push   $0x791
f012399c:	68 7a b1 13 f0       	push   $0xf013b17a
f01239a1:	e8 5f c8 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01239a6:	e8 38 94 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01239ab:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01239ae:	e8 f3 03 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f01239b3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[10]);
f01239b6:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01239bc:	83 ec 0c             	sub    $0xc,%esp
f01239bf:	50                   	push   %eax
f01239c0:	e8 b2 41 fe ff       	call   f0107b77 <kfree>
f01239c5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01239c8:	e8 d9 03 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f01239cd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01239d0:	74 17                	je     f01239e9 <test_kfree_bestfirstfit+0x1690>
f01239d2:	83 ec 04             	sub    $0x4,%esp
f01239d5:	68 94 b1 13 f0       	push   $0xf013b194
f01239da:	68 97 07 00 00       	push   $0x797
f01239df:	68 7a b1 13 f0       	push   $0xf013b17a
f01239e4:	e8 1c c8 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01239e9:	e8 f5 93 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01239ee:	89 c2                	mov    %eax,%edx
f01239f0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01239f3:	29 c2                	sub    %eax,%edx
f01239f5:	89 d0                	mov    %edx,%eax
f01239f7:	3d 00 01 00 00       	cmp    $0x100,%eax
f01239fc:	74 17                	je     f0123a15 <test_kfree_bestfirstfit+0x16bc>
f01239fe:	83 ec 04             	sub    $0x4,%esp
f0123a01:	68 04 b9 13 f0       	push   $0xf013b904
f0123a06:	68 98 07 00 00       	push   $0x798
f0123a0b:	68 7a b1 13 f0       	push   $0xf013b17a
f0123a10:	e8 f0 c7 fd ff       	call   f0100205 <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0123a15:	e8 c9 93 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0123a1a:	89 c2                	mov    %eax,%edx
f0123a1c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0123a1f:	39 c2                	cmp    %eax,%edx
f0123a21:	74 17                	je     f0123a3a <test_kfree_bestfirstfit+0x16e1>
f0123a23:	83 ec 04             	sub    $0x4,%esp
f0123a26:	68 a4 b9 13 f0       	push   $0xf013b9a4
f0123a2b:	68 9a 07 00 00       	push   $0x79a
f0123a30:	68 7a b1 13 f0       	push   $0xf013b17a
f0123a35:	e8 cb c7 fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b60%");
f0123a3a:	83 ec 0c             	sub    $0xc,%esp
f0123a3d:	68 d8 b9 13 f0       	push   $0xf013b9d8
f0123a42:	e8 c7 d2 fd ff       	call   f0100d0e <cprintf>
f0123a47:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0123a4a:	83 ec 0c             	sub    $0xc,%esp
f0123a4d:	6a 03                	push   $0x3
f0123a4f:	e8 2f 98 fe ff       	call   f010d283 <sys_bypassPageFault>
f0123a54:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0123a57:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123a5e:	e9 82 00 00 00       	jmp    f0123ae5 <test_kfree_bestfirstfit+0x178c>
		{
			ptr = (char *) ptr_allocations[i];
f0123a63:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123a66:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f0123a6d:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0123a70:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123a73:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0123a76:	e8 f6 97 fe ff       	call   f010d271 <sys_rcr2>
f0123a7b:	89 c2                	mov    %eax,%edx
f0123a7d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123a80:	39 c2                	cmp    %eax,%edx
f0123a82:	74 17                	je     f0123a9b <test_kfree_bestfirstfit+0x1742>
f0123a84:	83 ec 04             	sub    $0x4,%esp
f0123a87:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0123a8c:	68 a9 07 00 00       	push   $0x7a9
f0123a91:	68 7a b1 13 f0       	push   $0xf013b17a
f0123a96:	e8 6a c7 fd ff       	call   f0100205 <_panic>
			ptr[lastIndices[i]] = 10;
f0123a9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123a9e:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0123aa5:	89 c2                	mov    %eax,%edx
f0123aa7:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123aaa:	01 d0                	add    %edx,%eax
f0123aac:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0123aaf:	e8 bd 97 fe ff       	call   f010d271 <sys_rcr2>
f0123ab4:	89 c2                	mov    %eax,%edx
f0123ab6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123ab9:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0123ac0:	89 c1                	mov    %eax,%ecx
f0123ac2:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123ac5:	01 c8                	add    %ecx,%eax
f0123ac7:	39 c2                	cmp    %eax,%edx
f0123ac9:	74 17                	je     f0123ae2 <test_kfree_bestfirstfit+0x1789>
f0123acb:	83 ec 04             	sub    $0x4,%esp
f0123ace:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0123ad3:	68 ab 07 00 00       	push   $0x7ab
f0123ad8:	68 7a b1 13 f0       	push   $0xf013b17a
f0123add:	e8 23 c7 fd ff       	call   f0100205 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0123ae2:	ff 45 f4             	incl   -0xc(%ebp)
f0123ae5:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0123ae9:	0f 8e 74 ff ff ff    	jle    f0123a63 <test_kfree_bestfirstfit+0x170a>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0123aef:	83 ec 0c             	sub    $0xc,%esp
f0123af2:	6a 00                	push   $0x0
f0123af4:	e8 8a 97 fe ff       	call   f010d283 <sys_bypassPageFault>
f0123af9:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0123afc:	83 ec 0c             	sub    $0xc,%esp
f0123aff:	68 25 ba 13 f0       	push   $0xf013ba25
f0123b04:	e8 05 d2 fd ff       	call   f0100d0e <cprintf>
f0123b09:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123b0c:	e8 d2 92 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0123b11:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123b14:	e8 8d 02 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0123b19:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0123b1c:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0123b22:	83 ec 0c             	sub    $0xc,%esp
f0123b25:	50                   	push   %eax
f0123b26:	e8 4c 40 fe ff       	call   f0107b77 <kfree>
f0123b2b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123b2e:	e8 73 02 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0123b33:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123b36:	74 17                	je     f0123b4f <test_kfree_bestfirstfit+0x17f6>
f0123b38:	83 ec 04             	sub    $0x4,%esp
f0123b3b:	68 94 b1 13 f0       	push   $0xf013b194
f0123b40:	68 b9 07 00 00       	push   $0x7b9
f0123b45:	68 7a b1 13 f0       	push   $0xf013b17a
f0123b4a:	e8 b6 c6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123b4f:	e8 8f 92 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0123b54:	89 c2                	mov    %eax,%edx
f0123b56:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123b59:	39 c2                	cmp    %eax,%edx
f0123b5b:	74 17                	je     f0123b74 <test_kfree_bestfirstfit+0x181b>
f0123b5d:	83 ec 04             	sub    $0x4,%esp
f0123b60:	68 2c ba 13 f0       	push   $0xf013ba2c
f0123b65:	68 ba 07 00 00       	push   $0x7ba
f0123b6a:	68 7a b1 13 f0       	push   $0xf013b17a
f0123b6f:	e8 91 c6 fd ff       	call   f0100205 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123b74:	e8 6a 92 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0123b79:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123b7c:	e8 25 02 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0123b81:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0123b84:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0123b8a:	83 ec 0c             	sub    $0xc,%esp
f0123b8d:	50                   	push   %eax
f0123b8e:	e8 e4 3f fe ff       	call   f0107b77 <kfree>
f0123b93:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123b96:	e8 0b 02 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0123b9b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123b9e:	74 17                	je     f0123bb7 <test_kfree_bestfirstfit+0x185e>
f0123ba0:	83 ec 04             	sub    $0x4,%esp
f0123ba3:	68 94 b1 13 f0       	push   $0xf013b194
f0123ba8:	68 c0 07 00 00       	push   $0x7c0
f0123bad:	68 7a b1 13 f0       	push   $0xf013b17a
f0123bb2:	e8 4e c6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123bb7:	e8 27 92 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0123bbc:	89 c2                	mov    %eax,%edx
f0123bbe:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123bc1:	39 c2                	cmp    %eax,%edx
f0123bc3:	74 17                	je     f0123bdc <test_kfree_bestfirstfit+0x1883>
f0123bc5:	83 ec 04             	sub    $0x4,%esp
f0123bc8:	68 2c ba 13 f0       	push   $0xf013ba2c
f0123bcd:	68 c1 07 00 00       	push   $0x7c1
f0123bd2:	68 7a b1 13 f0       	push   $0xf013b17a
f0123bd7:	e8 29 c6 fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0123bdc:	e8 02 92 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0123be1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123be4:	e8 bd 01 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0123be9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0123bec:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0123bf2:	83 ec 0c             	sub    $0xc,%esp
f0123bf5:	50                   	push   %eax
f0123bf6:	e8 7c 3f fe ff       	call   f0107b77 <kfree>
f0123bfb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123bfe:	e8 a3 01 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0123c03:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123c06:	74 17                	je     f0123c1f <test_kfree_bestfirstfit+0x18c6>
f0123c08:	83 ec 04             	sub    $0x4,%esp
f0123c0b:	68 94 b1 13 f0       	push   $0xf013b194
f0123c10:	68 c7 07 00 00       	push   $0x7c7
f0123c15:	68 7a b1 13 f0       	push   $0xf013b17a
f0123c1a:	e8 e6 c5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123c1f:	e8 bf 91 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0123c24:	89 c2                	mov    %eax,%edx
f0123c26:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123c29:	39 c2                	cmp    %eax,%edx
f0123c2b:	74 17                	je     f0123c44 <test_kfree_bestfirstfit+0x18eb>
f0123c2d:	83 ec 04             	sub    $0x4,%esp
f0123c30:	68 2c ba 13 f0       	push   $0xf013ba2c
f0123c35:	68 c8 07 00 00       	push   $0x7c8
f0123c3a:	68 7a b1 13 f0       	push   $0xf013b17a
f0123c3f:	e8 c1 c5 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0123c44:	e8 9a 91 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0123c49:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123c4c:	e8 55 01 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0123c51:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0123c54:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0123c5a:	83 ec 0c             	sub    $0xc,%esp
f0123c5d:	50                   	push   %eax
f0123c5e:	e8 14 3f fe ff       	call   f0107b77 <kfree>
f0123c63:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123c66:	e8 3b 01 fe ff       	call   f0103da6 <pf_calculate_free_frames>
f0123c6b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123c6e:	74 17                	je     f0123c87 <test_kfree_bestfirstfit+0x192e>
f0123c70:	83 ec 04             	sub    $0x4,%esp
f0123c73:	68 94 b1 13 f0       	push   $0xf013b194
f0123c78:	68 ce 07 00 00       	push   $0x7ce
f0123c7d:	68 7a b1 13 f0       	push   $0xf013b17a
f0123c82:	e8 7e c5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123c87:	e8 57 91 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0123c8c:	89 c2                	mov    %eax,%edx
f0123c8e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123c91:	39 c2                	cmp    %eax,%edx
f0123c93:	74 17                	je     f0123cac <test_kfree_bestfirstfit+0x1953>
f0123c95:	83 ec 04             	sub    $0x4,%esp
f0123c98:	68 2c ba 13 f0       	push   $0xf013ba2c
f0123c9d:	68 cf 07 00 00       	push   $0x7cf
f0123ca2:	68 7a b1 13 f0       	push   $0xf013b17a
f0123ca7:	e8 59 c5 fd ff       	call   f0100205 <_panic>

	}
	cprintf("\b\b\b85%");
f0123cac:	83 ec 0c             	sub    $0xc,%esp
f0123caf:	68 73 ba 13 f0       	push   $0xf013ba73
f0123cb4:	e8 55 d0 fd ff       	call   f0100d0e <cprintf>
f0123cb9:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0123cbc:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0123cc3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0123cca:	eb 48                	jmp    f0123d14 <test_kfree_bestfirstfit+0x19bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0123ccc:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0123ccf:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0123cd4:	83 ec 04             	sub    $0x4,%esp
f0123cd7:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f0123cdd:	51                   	push   %ecx
f0123cde:	52                   	push   %edx
f0123cdf:	50                   	push   %eax
f0123ce0:	e8 aa 2d fe ff       	call   f0106a8f <get_page_table>
f0123ce5:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0123ce8:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0123cee:	85 c0                	test   %eax,%eax
f0123cf0:	75 17                	jne    f0123d09 <test_kfree_bestfirstfit+0x19b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0123cf2:	83 ec 04             	sub    $0x4,%esp
f0123cf5:	68 7c ba 13 f0       	push   $0xf013ba7c
f0123cfa:	68 dd 07 00 00       	push   $0x7dd
f0123cff:	68 7a b1 13 f0       	push   $0xf013b17a
f0123d04:	e8 fc c4 fd ff       	call   f0100205 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0123d09:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0123d10:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0123d14:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123d18:	78 b2                	js     f0123ccc <test_kfree_bestfirstfit+0x1973>
f0123d1a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123d1e:	7f 09                	jg     f0123d29 <test_kfree_bestfirstfit+0x19d0>
f0123d20:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0123d27:	76 a3                	jbe    f0123ccc <test_kfree_bestfirstfit+0x1973>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f0123d29:	83 ec 0c             	sub    $0xc,%esp
f0123d2c:	68 5e b3 13 f0       	push   $0xf013b35e
f0123d31:	e8 d8 cf fd ff       	call   f0100d0e <cprintf>
f0123d36:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0123d39:	83 ec 0c             	sub    $0xc,%esp
f0123d3c:	68 e4 ba 13 f0       	push   $0xf013bae4
f0123d41:	e8 c8 cf fd ff       	call   f0100d0e <cprintf>
f0123d46:	83 c4 10             	add    $0x10,%esp

	return 1;
f0123d49:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0123d4e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0123d51:	5b                   	pop    %ebx
f0123d52:	5f                   	pop    %edi
f0123d53:	5d                   	pop    %ebp
f0123d54:	c3                   	ret    

f0123d55 <test_kheap_phys_addr>:

int test_kheap_phys_addr()
{
f0123d55:	55                   	push   %ebp
f0123d56:	89 e5                	mov    %esp,%ebp
f0123d58:	57                   	push   %edi
f0123d59:	56                   	push   %esi
f0123d5a:	53                   	push   %ebx
f0123d5b:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
	cprintf("==============================================\n");
f0123d61:	83 ec 0c             	sub    $0xc,%esp
f0123d64:	68 bc b0 13 f0       	push   $0xf013b0bc
f0123d69:	e8 a0 cf fd ff       	call   f0100d0e <cprintf>
f0123d6e:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0123d71:	83 ec 0c             	sub    $0xc,%esp
f0123d74:	68 ec b0 13 f0       	push   $0xf013b0ec
f0123d79:	e8 90 cf fd ff       	call   f0100d0e <cprintf>
f0123d7e:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0123d81:	83 ec 0c             	sub    $0xc,%esp
f0123d84:	68 bc b0 13 f0       	push   $0xf013b0bc
f0123d89:	e8 80 cf fd ff       	call   f0100d0e <cprintf>
f0123d8e:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0123d91:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f0123d95:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f0123d99:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f0123d9f:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f0123da5:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f0123dac:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0123db3:	e8 2b 90 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0123db8:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0123dbb:	8d 95 c4 fd ff ff    	lea    -0x23c(%ebp),%edx
f0123dc1:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123dc6:	b8 00 00 00 00       	mov    $0x0,%eax
f0123dcb:	89 d7                	mov    %edx,%edi
f0123dcd:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0123dcf:	8d 95 74 fd ff ff    	lea    -0x28c(%ebp),%edx
f0123dd5:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123dda:	b8 00 00 00 00       	mov    $0x0,%eax
f0123ddf:	89 d7                	mov    %edx,%edi
f0123de1:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0123de3:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0123de9:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123dee:	b8 00 00 00 00       	mov    $0x0,%eax
f0123df3:	89 d7                	mov    %edx,%edi
f0123df5:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123df7:	e8 e7 8f fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0123dfc:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123dff:	e8 a2 ff fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0123e04:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0123e07:	83 ec 0c             	sub    $0xc,%esp
f0123e0a:	68 00 fc 1f 00       	push   $0x1ffc00
f0123e0f:	e8 4d 3c fe ff       	call   f0107a61 <kmalloc>
f0123e14:	83 c4 10             	add    $0x10,%esp
f0123e17:	89 85 24 fd ff ff    	mov    %eax,-0x2dc(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123e1d:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0123e23:	89 c1                	mov    %eax,%ecx
f0123e25:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0123e2c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0123e2f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123e34:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0123e37:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0123e3a:	ba 00 00 00 00       	mov    $0x0,%edx
f0123e3f:	f7 75 a0             	divl   -0x60(%ebp)
f0123e42:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0123e45:	29 d0                	sub    %edx,%eax
f0123e47:	89 c3                	mov    %eax,%ebx
f0123e49:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0123e50:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0123e55:	0f b6 d0             	movzbl %al,%edx
f0123e58:	8b 45 98             	mov    -0x68(%ebp),%eax
f0123e5b:	01 d0                	add    %edx,%eax
f0123e5d:	48                   	dec    %eax
f0123e5e:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0123e61:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0123e64:	ba 00 00 00 00       	mov    $0x0,%edx
f0123e69:	f7 75 98             	divl   -0x68(%ebp)
f0123e6c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0123e6f:	29 d0                	sub    %edx,%eax
f0123e71:	01 c3                	add    %eax,%ebx
f0123e73:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0123e7a:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0123e7f:	0f b6 c0             	movzbl %al,%eax
f0123e82:	c1 e0 04             	shl    $0x4,%eax
f0123e85:	89 c2                	mov    %eax,%edx
f0123e87:	8b 45 90             	mov    -0x70(%ebp),%eax
f0123e8a:	01 d0                	add    %edx,%eax
f0123e8c:	48                   	dec    %eax
f0123e8d:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0123e90:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0123e93:	ba 00 00 00 00       	mov    $0x0,%edx
f0123e98:	f7 75 90             	divl   -0x70(%ebp)
f0123e9b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0123e9e:	29 d0                	sub    %edx,%eax
f0123ea0:	01 d8                	add    %ebx,%eax
f0123ea2:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0123ea7:	39 c1                	cmp    %eax,%ecx
f0123ea9:	74 17                	je     f0123ec2 <test_kheap_phys_addr+0x16d>
f0123eab:	83 ec 04             	sub    $0x4,%esp
f0123eae:	68 60 b2 13 f0       	push   $0xf013b260
f0123eb3:	68 0a 08 00 00       	push   $0x80a
f0123eb8:	68 7a b1 13 f0       	push   $0xf013b17a
f0123ebd:	e8 43 c3 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123ec2:	e8 df fe fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0123ec7:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123eca:	74 17                	je     f0123ee3 <test_kheap_phys_addr+0x18e>
f0123ecc:	83 ec 04             	sub    $0x4,%esp
f0123ecf:	68 94 b1 13 f0       	push   $0xf013b194
f0123ed4:	68 0b 08 00 00       	push   $0x80b
f0123ed9:	68 7a b1 13 f0       	push   $0xf013b17a
f0123ede:	e8 22 c3 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123ee3:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123ee6:	e8 f8 8e fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0123eeb:	29 c3                	sub    %eax,%ebx
f0123eed:	89 d8                	mov    %ebx,%eax
f0123eef:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123ef4:	74 17                	je     f0123f0d <test_kheap_phys_addr+0x1b8>
f0123ef6:	83 ec 04             	sub    $0x4,%esp
f0123ef9:	68 fc b1 13 f0       	push   $0xf013b1fc
f0123efe:	68 0c 08 00 00       	push   $0x80c
f0123f03:	68 7a b1 13 f0       	push   $0xf013b17a
f0123f08:	e8 f8 c2 fd ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123f0d:	e8 d1 8e fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0123f12:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123f15:	e8 8c fe fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0123f1a:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0123f1d:	83 ec 0c             	sub    $0xc,%esp
f0123f20:	68 00 fc 1f 00       	push   $0x1ffc00
f0123f25:	e8 37 3b fe ff       	call   f0107a61 <kmalloc>
f0123f2a:	83 c4 10             	add    $0x10,%esp
f0123f2d:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123f33:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0123f39:	89 c1                	mov    %eax,%ecx
f0123f3b:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0123f42:	8b 45 88             	mov    -0x78(%ebp),%eax
f0123f45:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123f4a:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0123f4d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0123f50:	ba 00 00 00 00       	mov    $0x0,%edx
f0123f55:	f7 75 88             	divl   -0x78(%ebp)
f0123f58:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0123f5b:	29 d0                	sub    %edx,%eax
f0123f5d:	89 c3                	mov    %eax,%ebx
f0123f5f:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0123f66:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0123f6b:	0f b6 d0             	movzbl %al,%edx
f0123f6e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123f71:	01 d0                	add    %edx,%eax
f0123f73:	48                   	dec    %eax
f0123f74:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0123f7a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0123f80:	ba 00 00 00 00       	mov    $0x0,%edx
f0123f85:	f7 75 80             	divl   -0x80(%ebp)
f0123f88:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0123f8e:	29 d0                	sub    %edx,%eax
f0123f90:	01 c3                	add    %eax,%ebx
f0123f92:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0123f99:	10 00 00 
f0123f9c:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0123fa1:	0f b6 c0             	movzbl %al,%eax
f0123fa4:	c1 e0 04             	shl    $0x4,%eax
f0123fa7:	89 c2                	mov    %eax,%edx
f0123fa9:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0123faf:	01 d0                	add    %edx,%eax
f0123fb1:	48                   	dec    %eax
f0123fb2:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0123fb8:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0123fbe:	ba 00 00 00 00       	mov    $0x0,%edx
f0123fc3:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0123fc9:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0123fcf:	29 d0                	sub    %edx,%eax
f0123fd1:	01 d8                	add    %ebx,%eax
f0123fd3:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0123fd8:	39 c1                	cmp    %eax,%ecx
f0123fda:	74 17                	je     f0123ff3 <test_kheap_phys_addr+0x29e>
f0123fdc:	83 ec 04             	sub    $0x4,%esp
f0123fdf:	68 60 b2 13 f0       	push   $0xf013b260
f0123fe4:	68 12 08 00 00       	push   $0x812
f0123fe9:	68 7a b1 13 f0       	push   $0xf013b17a
f0123fee:	e8 12 c2 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123ff3:	e8 ae fd fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0123ff8:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123ffb:	74 17                	je     f0124014 <test_kheap_phys_addr+0x2bf>
f0123ffd:	83 ec 04             	sub    $0x4,%esp
f0124000:	68 94 b1 13 f0       	push   $0xf013b194
f0124005:	68 13 08 00 00       	push   $0x813
f012400a:	68 7a b1 13 f0       	push   $0xf013b17a
f012400f:	e8 f1 c1 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124014:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0124017:	e8 c7 8d fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012401c:	29 c3                	sub    %eax,%ebx
f012401e:	89 d8                	mov    %ebx,%eax
f0124020:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124025:	74 17                	je     f012403e <test_kheap_phys_addr+0x2e9>
f0124027:	83 ec 04             	sub    $0x4,%esp
f012402a:	68 fc b1 13 f0       	push   $0xf013b1fc
f012402f:	68 14 08 00 00       	push   $0x814
f0124034:	68 7a b1 13 f0       	push   $0xf013b17a
f0124039:	e8 c7 c1 fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012403e:	e8 a0 8d fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0124043:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124046:	e8 5b fd fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012404b:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012404e:	83 ec 0c             	sub    $0xc,%esp
f0124051:	68 00 08 00 00       	push   $0x800
f0124056:	e8 06 3a fe ff       	call   f0107a61 <kmalloc>
f012405b:	83 c4 10             	add    $0x10,%esp
f012405e:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124064:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f012406a:	89 c1                	mov    %eax,%ecx
f012406c:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0124073:	10 00 00 
f0124076:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012407c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124081:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0124087:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012408d:	ba 00 00 00 00       	mov    $0x0,%edx
f0124092:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0124098:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012409e:	29 d0                	sub    %edx,%eax
f01240a0:	89 c3                	mov    %eax,%ebx
f01240a2:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01240a9:	10 00 00 
f01240ac:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01240b1:	0f b6 d0             	movzbl %al,%edx
f01240b4:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01240ba:	01 d0                	add    %edx,%eax
f01240bc:	48                   	dec    %eax
f01240bd:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01240c3:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01240c9:	ba 00 00 00 00       	mov    $0x0,%edx
f01240ce:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01240d4:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01240da:	29 d0                	sub    %edx,%eax
f01240dc:	01 c3                	add    %eax,%ebx
f01240de:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01240e5:	10 00 00 
f01240e8:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01240ed:	0f b6 c0             	movzbl %al,%eax
f01240f0:	c1 e0 04             	shl    $0x4,%eax
f01240f3:	89 c2                	mov    %eax,%edx
f01240f5:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01240fb:	01 d0                	add    %edx,%eax
f01240fd:	48                   	dec    %eax
f01240fe:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0124104:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012410a:	ba 00 00 00 00       	mov    $0x0,%edx
f012410f:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0124115:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012411b:	29 d0                	sub    %edx,%eax
f012411d:	01 d8                	add    %ebx,%eax
f012411f:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0124124:	39 c1                	cmp    %eax,%ecx
f0124126:	74 17                	je     f012413f <test_kheap_phys_addr+0x3ea>
f0124128:	83 ec 04             	sub    $0x4,%esp
f012412b:	68 60 b2 13 f0       	push   $0xf013b260
f0124130:	68 1a 08 00 00       	push   $0x81a
f0124135:	68 7a b1 13 f0       	push   $0xf013b17a
f012413a:	e8 c6 c0 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012413f:	e8 62 fc fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0124144:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0124147:	74 17                	je     f0124160 <test_kheap_phys_addr+0x40b>
f0124149:	83 ec 04             	sub    $0x4,%esp
f012414c:	68 94 b1 13 f0       	push   $0xf013b194
f0124151:	68 1b 08 00 00       	push   $0x81b
f0124156:	68 7a b1 13 f0       	push   $0xf013b17a
f012415b:	e8 a5 c0 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124160:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0124163:	e8 7b 8c fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0124168:	29 c3                	sub    %eax,%ebx
f012416a:	89 d8                	mov    %ebx,%eax
f012416c:	83 f8 01             	cmp    $0x1,%eax
f012416f:	74 17                	je     f0124188 <test_kheap_phys_addr+0x433>
f0124171:	83 ec 04             	sub    $0x4,%esp
f0124174:	68 fc b1 13 f0       	push   $0xf013b1fc
f0124179:	68 1c 08 00 00       	push   $0x81c
f012417e:	68 7a b1 13 f0       	push   $0xf013b17a
f0124183:	e8 7d c0 fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0124188:	e8 56 8c fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012418d:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124190:	e8 11 fc fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0124195:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0124198:	83 ec 0c             	sub    $0xc,%esp
f012419b:	68 00 08 00 00       	push   $0x800
f01241a0:	e8 bc 38 fe ff       	call   f0107a61 <kmalloc>
f01241a5:	83 c4 10             	add    $0x10,%esp
f01241a8:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01241ae:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f01241b4:	89 c1                	mov    %eax,%ecx
f01241b6:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01241bd:	10 00 00 
f01241c0:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01241c6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01241cb:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01241d1:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01241d7:	ba 00 00 00 00       	mov    $0x0,%edx
f01241dc:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01241e2:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01241e8:	29 d0                	sub    %edx,%eax
f01241ea:	89 c3                	mov    %eax,%ebx
f01241ec:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01241f3:	10 00 00 
f01241f6:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01241fb:	0f b6 d0             	movzbl %al,%edx
f01241fe:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0124204:	01 d0                	add    %edx,%eax
f0124206:	48                   	dec    %eax
f0124207:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f012420d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0124213:	ba 00 00 00 00       	mov    $0x0,%edx
f0124218:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f012421e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0124224:	29 d0                	sub    %edx,%eax
f0124226:	01 c3                	add    %eax,%ebx
f0124228:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f012422f:	10 00 00 
f0124232:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0124237:	0f b6 c0             	movzbl %al,%eax
f012423a:	c1 e0 04             	shl    $0x4,%eax
f012423d:	89 c2                	mov    %eax,%edx
f012423f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0124245:	01 d0                	add    %edx,%eax
f0124247:	48                   	dec    %eax
f0124248:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f012424e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0124254:	ba 00 00 00 00       	mov    $0x0,%edx
f0124259:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f012425f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0124265:	29 d0                	sub    %edx,%eax
f0124267:	01 d8                	add    %ebx,%eax
f0124269:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012426e:	39 c1                	cmp    %eax,%ecx
f0124270:	74 17                	je     f0124289 <test_kheap_phys_addr+0x534>
f0124272:	83 ec 04             	sub    $0x4,%esp
f0124275:	68 60 b2 13 f0       	push   $0xf013b260
f012427a:	68 22 08 00 00       	push   $0x822
f012427f:	68 7a b1 13 f0       	push   $0xf013b17a
f0124284:	e8 7c bf fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124289:	e8 18 fb fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012428e:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0124291:	74 17                	je     f01242aa <test_kheap_phys_addr+0x555>
f0124293:	83 ec 04             	sub    $0x4,%esp
f0124296:	68 94 b1 13 f0       	push   $0xf013b194
f012429b:	68 23 08 00 00       	push   $0x823
f01242a0:	68 7a b1 13 f0       	push   $0xf013b17a
f01242a5:	e8 5b bf fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01242aa:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01242ad:	e8 31 8b fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01242b2:	29 c3                	sub    %eax,%ebx
f01242b4:	89 d8                	mov    %ebx,%eax
f01242b6:	83 f8 01             	cmp    $0x1,%eax
f01242b9:	74 17                	je     f01242d2 <test_kheap_phys_addr+0x57d>
f01242bb:	83 ec 04             	sub    $0x4,%esp
f01242be:	68 fc b1 13 f0       	push   $0xf013b1fc
f01242c3:	68 24 08 00 00       	push   $0x824
f01242c8:	68 7a b1 13 f0       	push   $0xf013b17a
f01242cd:	e8 33 bf fd ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01242d2:	e8 0c 8b fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01242d7:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01242da:	e8 c7 fa fd ff       	call   f0103da6 <pf_calculate_free_frames>
f01242df:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01242e2:	83 ec 0c             	sub    $0xc,%esp
f01242e5:	68 00 1c 00 00       	push   $0x1c00
f01242ea:	e8 72 37 fe ff       	call   f0107a61 <kmalloc>
f01242ef:	83 c4 10             	add    $0x10,%esp
f01242f2:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01242f8:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f01242fe:	89 c1                	mov    %eax,%ecx
f0124300:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0124307:	10 00 00 
f012430a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0124310:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124315:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f012431b:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0124321:	ba 00 00 00 00       	mov    $0x0,%edx
f0124326:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f012432c:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0124332:	29 d0                	sub    %edx,%eax
f0124334:	89 c3                	mov    %eax,%ebx
f0124336:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f012433d:	10 00 00 
f0124340:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0124345:	0f b6 d0             	movzbl %al,%edx
f0124348:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012434e:	01 d0                	add    %edx,%eax
f0124350:	48                   	dec    %eax
f0124351:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0124357:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012435d:	ba 00 00 00 00       	mov    $0x0,%edx
f0124362:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0124368:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012436e:	29 d0                	sub    %edx,%eax
f0124370:	01 c3                	add    %eax,%ebx
f0124372:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0124379:	10 00 00 
f012437c:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0124381:	0f b6 c0             	movzbl %al,%eax
f0124384:	c1 e0 04             	shl    $0x4,%eax
f0124387:	89 c2                	mov    %eax,%edx
f0124389:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012438f:	01 d0                	add    %edx,%eax
f0124391:	48                   	dec    %eax
f0124392:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0124398:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012439e:	ba 00 00 00 00       	mov    $0x0,%edx
f01243a3:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f01243a9:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01243af:	29 d0                	sub    %edx,%eax
f01243b1:	01 d8                	add    %ebx,%eax
f01243b3:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01243b8:	39 c1                	cmp    %eax,%ecx
f01243ba:	74 17                	je     f01243d3 <test_kheap_phys_addr+0x67e>
f01243bc:	83 ec 04             	sub    $0x4,%esp
f01243bf:	68 60 b2 13 f0       	push   $0xf013b260
f01243c4:	68 2a 08 00 00       	push   $0x82a
f01243c9:	68 7a b1 13 f0       	push   $0xf013b17a
f01243ce:	e8 32 be fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01243d3:	e8 ce f9 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f01243d8:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01243db:	74 17                	je     f01243f4 <test_kheap_phys_addr+0x69f>
f01243dd:	83 ec 04             	sub    $0x4,%esp
f01243e0:	68 94 b1 13 f0       	push   $0xf013b194
f01243e5:	68 2b 08 00 00       	push   $0x82b
f01243ea:	68 7a b1 13 f0       	push   $0xf013b17a
f01243ef:	e8 11 be fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01243f4:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01243f7:	e8 e7 89 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01243fc:	29 c3                	sub    %eax,%ebx
f01243fe:	89 d8                	mov    %ebx,%eax
f0124400:	83 f8 02             	cmp    $0x2,%eax
f0124403:	74 17                	je     f012441c <test_kheap_phys_addr+0x6c7>
f0124405:	83 ec 04             	sub    $0x4,%esp
f0124408:	68 fc b1 13 f0       	push   $0xf013b1fc
f012440d:	68 2c 08 00 00       	push   $0x82c
f0124412:	68 7a b1 13 f0       	push   $0xf013b17a
f0124417:	e8 e9 bd fd ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012441c:	e8 c2 89 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0124421:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124424:	e8 7d f9 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0124429:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012442c:	83 ec 0c             	sub    $0xc,%esp
f012442f:	68 00 fc 2f 00       	push   $0x2ffc00
f0124434:	e8 28 36 fe ff       	call   f0107a61 <kmalloc>
f0124439:	83 c4 10             	add    $0x10,%esp
f012443c:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124442:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f0124448:	89 c1                	mov    %eax,%ecx
f012444a:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0124451:	10 00 00 
f0124454:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012445a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012445f:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0124465:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012446b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124470:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0124476:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012447c:	29 d0                	sub    %edx,%eax
f012447e:	89 c3                	mov    %eax,%ebx
f0124480:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0124487:	10 00 00 
f012448a:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012448f:	0f b6 d0             	movzbl %al,%edx
f0124492:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124498:	01 d0                	add    %edx,%eax
f012449a:	48                   	dec    %eax
f012449b:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f01244a1:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01244a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01244ac:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f01244b2:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01244b8:	29 d0                	sub    %edx,%eax
f01244ba:	01 c3                	add    %eax,%ebx
f01244bc:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f01244c3:	10 00 00 
f01244c6:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01244cb:	0f b6 c0             	movzbl %al,%eax
f01244ce:	c1 e0 04             	shl    $0x4,%eax
f01244d1:	89 c2                	mov    %eax,%edx
f01244d3:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01244d9:	01 d0                	add    %edx,%eax
f01244db:	48                   	dec    %eax
f01244dc:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f01244e2:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01244e8:	ba 00 00 00 00       	mov    $0x0,%edx
f01244ed:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f01244f3:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01244f9:	29 d0                	sub    %edx,%eax
f01244fb:	01 d8                	add    %ebx,%eax
f01244fd:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0124502:	39 c1                	cmp    %eax,%ecx
f0124504:	74 17                	je     f012451d <test_kheap_phys_addr+0x7c8>
f0124506:	83 ec 04             	sub    $0x4,%esp
f0124509:	68 60 b2 13 f0       	push   $0xf013b260
f012450e:	68 32 08 00 00       	push   $0x832
f0124513:	68 7a b1 13 f0       	push   $0xf013b17a
f0124518:	e8 e8 bc fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012451d:	e8 84 f8 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0124522:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0124525:	74 17                	je     f012453e <test_kheap_phys_addr+0x7e9>
f0124527:	83 ec 04             	sub    $0x4,%esp
f012452a:	68 94 b1 13 f0       	push   $0xf013b194
f012452f:	68 33 08 00 00       	push   $0x833
f0124534:	68 7a b1 13 f0       	push   $0xf013b17a
f0124539:	e8 c7 bc fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012453e:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0124541:	e8 9d 88 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0124546:	29 c3                	sub    %eax,%ebx
f0124548:	89 d8                	mov    %ebx,%eax
f012454a:	3d 00 03 00 00       	cmp    $0x300,%eax
f012454f:	74 17                	je     f0124568 <test_kheap_phys_addr+0x813>
f0124551:	83 ec 04             	sub    $0x4,%esp
f0124554:	68 fc b1 13 f0       	push   $0xf013b1fc
f0124559:	68 34 08 00 00       	push   $0x834
f012455e:	68 7a b1 13 f0       	push   $0xf013b17a
f0124563:	e8 9d bc fd ff       	call   f0100205 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0124568:	e8 76 88 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012456d:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124570:	e8 31 f8 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0124575:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0124578:	83 ec 0c             	sub    $0xc,%esp
f012457b:	68 00 fc 5f 00       	push   $0x5ffc00
f0124580:	e8 dc 34 fe ff       	call   f0107a61 <kmalloc>
f0124585:	83 c4 10             	add    $0x10,%esp
f0124588:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012458e:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0124594:	89 c1                	mov    %eax,%ecx
f0124596:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f012459d:	10 00 00 
f01245a0:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01245a6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01245ab:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f01245b1:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01245b7:	ba 00 00 00 00       	mov    $0x0,%edx
f01245bc:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01245c2:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01245c8:	29 d0                	sub    %edx,%eax
f01245ca:	89 c3                	mov    %eax,%ebx
f01245cc:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f01245d3:	10 00 00 
f01245d6:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01245db:	0f b6 d0             	movzbl %al,%edx
f01245de:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01245e4:	01 d0                	add    %edx,%eax
f01245e6:	48                   	dec    %eax
f01245e7:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f01245ed:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01245f3:	ba 00 00 00 00       	mov    $0x0,%edx
f01245f8:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f01245fe:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0124604:	29 d0                	sub    %edx,%eax
f0124606:	01 c3                	add    %eax,%ebx
f0124608:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f012460f:	10 00 00 
f0124612:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0124617:	0f b6 c0             	movzbl %al,%eax
f012461a:	c1 e0 04             	shl    $0x4,%eax
f012461d:	89 c2                	mov    %eax,%edx
f012461f:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0124625:	01 d0                	add    %edx,%eax
f0124627:	48                   	dec    %eax
f0124628:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f012462e:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0124634:	ba 00 00 00 00       	mov    $0x0,%edx
f0124639:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f012463f:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0124645:	29 d0                	sub    %edx,%eax
f0124647:	01 d8                	add    %ebx,%eax
f0124649:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012464e:	39 c1                	cmp    %eax,%ecx
f0124650:	74 17                	je     f0124669 <test_kheap_phys_addr+0x914>
f0124652:	83 ec 04             	sub    $0x4,%esp
f0124655:	68 60 b2 13 f0       	push   $0xf013b260
f012465a:	68 3a 08 00 00       	push   $0x83a
f012465f:	68 7a b1 13 f0       	push   $0xf013b17a
f0124664:	e8 9c bb fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124669:	e8 38 f7 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012466e:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0124671:	74 17                	je     f012468a <test_kheap_phys_addr+0x935>
f0124673:	83 ec 04             	sub    $0x4,%esp
f0124676:	68 94 b1 13 f0       	push   $0xf013b194
f012467b:	68 3b 08 00 00       	push   $0x83b
f0124680:	68 7a b1 13 f0       	push   $0xf013b17a
f0124685:	e8 7b bb fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012468a:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f012468d:	e8 51 87 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0124692:	29 c3                	sub    %eax,%ebx
f0124694:	89 d8                	mov    %ebx,%eax
f0124696:	3d 00 06 00 00       	cmp    $0x600,%eax
f012469b:	74 17                	je     f01246b4 <test_kheap_phys_addr+0x95f>
f012469d:	83 ec 04             	sub    $0x4,%esp
f01246a0:	68 fc b1 13 f0       	push   $0xf013b1fc
f01246a5:	68 3c 08 00 00       	push   $0x83c
f01246aa:	68 7a b1 13 f0       	push   $0xf013b17a
f01246af:	e8 51 bb fd ff       	call   f0100205 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01246b4:	e8 2a 87 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01246b9:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01246bc:	e8 e5 f6 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f01246c1:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01246c4:	83 ec 0c             	sub    $0xc,%esp
f01246c7:	68 00 38 00 00       	push   $0x3800
f01246cc:	e8 90 33 fe ff       	call   f0107a61 <kmalloc>
f01246d1:	83 c4 10             	add    $0x10,%esp
f01246d4:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01246da:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f01246e0:	89 c1                	mov    %eax,%ecx
f01246e2:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f01246e9:	10 00 00 
f01246ec:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01246f2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01246f7:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f01246fd:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0124703:	ba 00 00 00 00       	mov    $0x0,%edx
f0124708:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f012470e:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0124714:	29 d0                	sub    %edx,%eax
f0124716:	89 c3                	mov    %eax,%ebx
f0124718:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f012471f:	10 00 00 
f0124722:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0124727:	0f b6 d0             	movzbl %al,%edx
f012472a:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0124730:	01 d0                	add    %edx,%eax
f0124732:	48                   	dec    %eax
f0124733:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0124739:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012473f:	ba 00 00 00 00       	mov    $0x0,%edx
f0124744:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f012474a:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0124750:	29 d0                	sub    %edx,%eax
f0124752:	01 c3                	add    %eax,%ebx
f0124754:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f012475b:	10 00 00 
f012475e:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0124763:	0f b6 c0             	movzbl %al,%eax
f0124766:	c1 e0 04             	shl    $0x4,%eax
f0124769:	89 c2                	mov    %eax,%edx
f012476b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0124771:	01 d0                	add    %edx,%eax
f0124773:	48                   	dec    %eax
f0124774:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f012477a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0124780:	ba 00 00 00 00       	mov    $0x0,%edx
f0124785:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f012478b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0124791:	29 d0                	sub    %edx,%eax
f0124793:	01 d8                	add    %ebx,%eax
f0124795:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012479a:	39 c1                	cmp    %eax,%ecx
f012479c:	74 17                	je     f01247b5 <test_kheap_phys_addr+0xa60>
f012479e:	83 ec 04             	sub    $0x4,%esp
f01247a1:	68 60 b2 13 f0       	push   $0xf013b260
f01247a6:	68 42 08 00 00       	push   $0x842
f01247ab:	68 7a b1 13 f0       	push   $0xf013b17a
f01247b0:	e8 50 ba fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01247b5:	e8 ec f5 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f01247ba:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01247bd:	74 17                	je     f01247d6 <test_kheap_phys_addr+0xa81>
f01247bf:	83 ec 04             	sub    $0x4,%esp
f01247c2:	68 94 b1 13 f0       	push   $0xf013b194
f01247c7:	68 43 08 00 00       	push   $0x843
f01247cc:	68 7a b1 13 f0       	push   $0xf013b17a
f01247d1:	e8 2f ba fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01247d6:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01247d9:	e8 05 86 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01247de:	29 c3                	sub    %eax,%ebx
f01247e0:	89 d8                	mov    %ebx,%eax
f01247e2:	83 f8 04             	cmp    $0x4,%eax
f01247e5:	74 17                	je     f01247fe <test_kheap_phys_addr+0xaa9>
f01247e7:	83 ec 04             	sub    $0x4,%esp
f01247ea:	68 fc b1 13 f0       	push   $0xf013b1fc
f01247ef:	68 44 08 00 00       	push   $0x844
f01247f4:	68 7a b1 13 f0       	push   $0xf013b17a
f01247f9:	e8 07 ba fd ff       	call   f0100205 <_panic>
	}

	//test kheap_physical_address after kmalloc only [40%]
	{
f01247fe:	89 e0                	mov    %esp,%eax
f0124800:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0124802:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0124809:	10 00 00 
f012480c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0124812:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124817:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f012481d:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0124823:	ba 00 00 00 00       	mov    $0x0,%edx
f0124828:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f012482e:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0124834:	29 d0                	sub    %edx,%eax
f0124836:	89 c1                	mov    %eax,%ecx
f0124838:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f012483f:	10 00 00 
f0124842:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0124847:	0f b6 d0             	movzbl %al,%edx
f012484a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0124850:	01 d0                	add    %edx,%eax
f0124852:	48                   	dec    %eax
f0124853:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f0124859:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012485f:	ba 00 00 00 00       	mov    $0x0,%edx
f0124864:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f012486a:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0124870:	29 d0                	sub    %edx,%eax
f0124872:	01 c1                	add    %eax,%ecx
f0124874:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f012487b:	10 00 00 
f012487e:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0124883:	0f b6 c0             	movzbl %al,%eax
f0124886:	c1 e0 04             	shl    $0x4,%eax
f0124889:	89 c2                	mov    %eax,%edx
f012488b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0124891:	01 d0                	add    %edx,%eax
f0124893:	48                   	dec    %eax
f0124894:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f012489a:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01248a0:	ba 00 00 00 00       	mov    $0x0,%edx
f01248a5:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f01248ab:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01248b1:	29 d0                	sub    %edx,%eax
f01248b3:	01 c8                	add    %ecx,%eax
f01248b5:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01248ba:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f01248c0:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f01248c7:	10 00 00 
f01248ca:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01248d0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01248d5:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f01248db:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01248e1:	ba 00 00 00 00       	mov    $0x0,%edx
f01248e6:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f01248ec:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01248f2:	29 d0                	sub    %edx,%eax
f01248f4:	89 c1                	mov    %eax,%ecx
f01248f6:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f01248fd:	10 00 00 
f0124900:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0124905:	0f b6 d0             	movzbl %al,%edx
f0124908:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012490e:	01 d0                	add    %edx,%eax
f0124910:	48                   	dec    %eax
f0124911:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0124917:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012491d:	ba 00 00 00 00       	mov    $0x0,%edx
f0124922:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0124928:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012492e:	29 d0                	sub    %edx,%eax
f0124930:	01 c1                	add    %eax,%ecx
f0124932:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0124939:	10 00 00 
f012493c:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0124941:	0f b6 c0             	movzbl %al,%eax
f0124944:	c1 e0 04             	shl    $0x4,%eax
f0124947:	89 c2                	mov    %eax,%edx
f0124949:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012494f:	01 d0                	add    %edx,%eax
f0124951:	48                   	dec    %eax
f0124952:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0124958:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012495e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124963:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0124969:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012496f:	29 d0                	sub    %edx,%eax
f0124971:	01 c8                	add    %ecx,%eax
f0124973:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0124978:	c1 e8 0c             	shr    $0xc,%eax
f012497b:	89 c2                	mov    %eax,%edx
f012497d:	4a                   	dec    %edx
f012497e:	89 95 ac fe ff ff    	mov    %edx,-0x154(%ebp)
f0124984:	c1 e0 02             	shl    $0x2,%eax
f0124987:	8d 50 03             	lea    0x3(%eax),%edx
f012498a:	b8 10 00 00 00       	mov    $0x10,%eax
f012498f:	48                   	dec    %eax
f0124990:	01 d0                	add    %edx,%eax
f0124992:	bf 10 00 00 00       	mov    $0x10,%edi
f0124997:	ba 00 00 00 00       	mov    $0x0,%edx
f012499c:	f7 f7                	div    %edi
f012499e:	6b c0 10             	imul   $0x10,%eax,%eax
f01249a1:	29 c4                	sub    %eax,%esp
f01249a3:	89 e0                	mov    %esp,%eax
f01249a5:	83 c0 03             	add    $0x3,%eax
f01249a8:	c1 e8 02             	shr    $0x2,%eax
f01249ab:	c1 e0 02             	shl    $0x2,%eax
f01249ae:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		i = 0;
f01249b4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f01249bb:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f01249c2:	10 00 00 
f01249c5:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01249cb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01249d0:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f01249d6:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01249dc:	ba 00 00 00 00       	mov    $0x0,%edx
f01249e1:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f01249e7:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01249ed:	29 d0                	sub    %edx,%eax
f01249ef:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01249f4:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01249f7:	eb 29                	jmp    f0124a22 <test_kheap_phys_addr+0xccd>
		{
			allPAs[i++] = kheap_physical_address(va);
f01249f9:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f01249fc:	8d 43 01             	lea    0x1(%ebx),%eax
f01249ff:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0124a02:	83 ec 0c             	sub    $0xc,%esp
f0124a05:	ff 75 e0             	pushl  -0x20(%ebp)
f0124a08:	e8 be 32 fe ff       	call   f0107ccb <kheap_physical_address>
f0124a0d:	83 c4 10             	add    $0x10,%esp
f0124a10:	89 c2                	mov    %eax,%edx
f0124a12:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0124a18:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0124a1b:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
f0124a22:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124a25:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f0124a2b:	72 cc                	jb     f01249f9 <test_kheap_phys_addr+0xca4>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0124a2d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124a30:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		i = 0;
f0124a36:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124a3d:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0124a44:	10 00 00 
f0124a47:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0124a4d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124a52:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0124a58:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0124a5e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124a63:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0124a69:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0124a6f:	29 d0                	sub    %edx,%eax
f0124a71:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124a76:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0124a79:	e9 ab 00 00 00       	jmp    f0124b29 <test_kheap_phys_addr+0xdd4>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0124a7e:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0124a83:	83 ec 04             	sub    $0x4,%esp
f0124a86:	8d 95 20 fd ff ff    	lea    -0x2e0(%ebp),%edx
f0124a8c:	52                   	push   %edx
f0124a8d:	ff 75 e0             	pushl  -0x20(%ebp)
f0124a90:	50                   	push   %eax
f0124a91:	e8 f9 1f fe ff       	call   f0106a8f <get_page_table>
f0124a96:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0124a99:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f0124a9f:	85 c0                	test   %eax,%eax
f0124aa1:	75 17                	jne    f0124aba <test_kheap_phys_addr+0xd65>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0124aa3:	83 ec 04             	sub    $0x4,%esp
f0124aa6:	68 1c bb 13 f0       	push   $0xf013bb1c
f0124aab:	68 59 08 00 00       	push   $0x859
f0124ab0:	68 7a b1 13 f0       	push   $0xf013b17a
f0124ab5:	e8 4b b7 fd ff       	call   f0100205 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0124aba:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124abd:	c1 e8 0c             	shr    $0xc,%eax
f0124ac0:	25 ff 03 00 00       	and    $0x3ff,%eax
f0124ac5:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0124ac8:	eb 4b                	jmp    f0124b15 <test_kheap_phys_addr+0xdc0>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0124aca:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f0124ad0:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0124ad3:	c1 e2 02             	shl    $0x2,%edx
f0124ad6:	01 d0                	add    %edx,%eax
f0124ad8:	8b 00                	mov    (%eax),%eax
f0124ada:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0124adf:	89 c1                	mov    %eax,%ecx
f0124ae1:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0124ae7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0124aea:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124aed:	39 c1                	cmp    %eax,%ecx
f0124aef:	74 17                	je     f0124b08 <test_kheap_phys_addr+0xdb3>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0124af1:	83 ec 04             	sub    $0x4,%esp
f0124af4:	68 75 bb 13 f0       	push   $0xf013bb75
f0124af9:	68 60 08 00 00       	push   $0x860
f0124afe:	68 7a b1 13 f0       	push   $0xf013b17a
f0124b03:	e8 fd b6 fd ff       	call   f0100205 <_panic>
				}
				va+=PAGE_SIZE;
f0124b08:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0124b0f:	ff 45 dc             	incl   -0x24(%ebp)
f0124b12:	ff 45 e4             	incl   -0x1c(%ebp)
f0124b15:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124b18:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f0124b1e:	7d 09                	jge    f0124b29 <test_kheap_phys_addr+0xdd4>
f0124b20:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f0124b27:	7e a1                	jle    f0124aca <test_kheap_phys_addr+0xd75>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124b29:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124b2c:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f0124b32:	0f 82 46 ff ff ff    	jb     f0124a7e <test_kheap_phys_addr+0xd29>
f0124b38:	89 f4                	mov    %esi,%esp
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_physical_address: current evaluation = 40%");
f0124b3a:	83 ec 0c             	sub    $0xc,%esp
f0124b3d:	68 94 bb 13 f0       	push   $0xf013bb94
f0124b42:	e8 c7 c1 fd ff       	call   f0100d0e <cprintf>
f0124b47:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0124b4a:	e8 94 82 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0124b4f:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0124b55:	e8 4c f2 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0124b5a:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[0]);
f0124b60:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0124b66:	83 ec 0c             	sub    $0xc,%esp
f0124b69:	50                   	push   %eax
f0124b6a:	e8 08 30 fe ff       	call   f0107b77 <kfree>
f0124b6f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124b72:	e8 2f f2 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0124b77:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0124b7d:	74 17                	je     f0124b96 <test_kheap_phys_addr+0xe41>
f0124b7f:	83 ec 04             	sub    $0x4,%esp
f0124b82:	68 94 b1 13 f0       	push   $0xf013b194
f0124b87:	68 6e 08 00 00       	push   $0x86e
f0124b8c:	68 7a b1 13 f0       	push   $0xf013b17a
f0124b91:	e8 6f b6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0124b96:	e8 48 82 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0124b9b:	89 c2                	mov    %eax,%edx
f0124b9d:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0124ba3:	29 c2                	sub    %eax,%edx
f0124ba5:	89 d0                	mov    %edx,%eax
f0124ba7:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124bac:	74 17                	je     f0124bc5 <test_kheap_phys_addr+0xe70>
f0124bae:	83 ec 04             	sub    $0x4,%esp
f0124bb1:	68 04 b9 13 f0       	push   $0xf013b904
f0124bb6:	68 6f 08 00 00       	push   $0x86f
f0124bbb:	68 7a b1 13 f0       	push   $0xf013b17a
f0124bc0:	e8 40 b6 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124bc5:	e8 19 82 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0124bca:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124bd0:	e8 d1 f1 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0124bd5:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[1]);
f0124bdb:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0124be1:	83 ec 0c             	sub    $0xc,%esp
f0124be4:	50                   	push   %eax
f0124be5:	e8 8d 2f fe ff       	call   f0107b77 <kfree>
f0124bea:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124bed:	e8 b4 f1 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0124bf2:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0124bf8:	74 17                	je     f0124c11 <test_kheap_phys_addr+0xebc>
f0124bfa:	83 ec 04             	sub    $0x4,%esp
f0124bfd:	68 94 b1 13 f0       	push   $0xf013b194
f0124c02:	68 75 08 00 00       	push   $0x875
f0124c07:	68 7a b1 13 f0       	push   $0xf013b17a
f0124c0c:	e8 f4 b5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0124c11:	e8 cd 81 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0124c16:	89 c2                	mov    %eax,%edx
f0124c18:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0124c1e:	29 c2                	sub    %eax,%edx
f0124c20:	89 d0                	mov    %edx,%eax
f0124c22:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124c27:	74 17                	je     f0124c40 <test_kheap_phys_addr+0xeeb>
f0124c29:	83 ec 04             	sub    $0x4,%esp
f0124c2c:	68 04 b9 13 f0       	push   $0xf013b904
f0124c31:	68 76 08 00 00       	push   $0x876
f0124c36:	68 7a b1 13 f0       	push   $0xf013b17a
f0124c3b:	e8 c5 b5 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0124c40:	e8 9e 81 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0124c45:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124c4b:	e8 56 f1 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0124c50:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[6]);
f0124c56:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0124c5c:	83 ec 0c             	sub    $0xc,%esp
f0124c5f:	50                   	push   %eax
f0124c60:	e8 12 2f fe ff       	call   f0107b77 <kfree>
f0124c65:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124c68:	e8 39 f1 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0124c6d:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0124c73:	74 17                	je     f0124c8c <test_kheap_phys_addr+0xf37>
f0124c75:	83 ec 04             	sub    $0x4,%esp
f0124c78:	68 94 b1 13 f0       	push   $0xf013b194
f0124c7d:	68 7c 08 00 00       	push   $0x87c
f0124c82:	68 7a b1 13 f0       	push   $0xf013b17a
f0124c87:	e8 79 b5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0124c8c:	e8 52 81 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0124c91:	89 c2                	mov    %eax,%edx
f0124c93:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0124c99:	29 c2                	sub    %eax,%edx
f0124c9b:	89 d0                	mov    %edx,%eax
f0124c9d:	3d 00 06 00 00       	cmp    $0x600,%eax
f0124ca2:	74 17                	je     f0124cbb <test_kheap_phys_addr+0xf66>
f0124ca4:	83 ec 04             	sub    $0x4,%esp
f0124ca7:	68 04 b9 13 f0       	push   $0xf013b904
f0124cac:	68 7d 08 00 00       	push   $0x87d
f0124cb1:	68 7a b1 13 f0       	push   $0xf013b17a
f0124cb6:	e8 4a b5 fd ff       	call   f0100205 <_panic>
	}


	//test kheap_physical_address after kmalloc and kfree [40%]
	{
f0124cbb:	89 e0                	mov    %esp,%eax
f0124cbd:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0124cbf:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f0124cc6:	10 00 00 
f0124cc9:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0124ccf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124cd4:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f0124cda:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0124ce0:	ba 00 00 00 00       	mov    $0x0,%edx
f0124ce5:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f0124ceb:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0124cf1:	29 d0                	sub    %edx,%eax
f0124cf3:	89 c1                	mov    %eax,%ecx
f0124cf5:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f0124cfc:	10 00 00 
f0124cff:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0124d04:	0f b6 d0             	movzbl %al,%edx
f0124d07:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0124d0d:	01 d0                	add    %edx,%eax
f0124d0f:	48                   	dec    %eax
f0124d10:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f0124d16:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0124d1c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d21:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f0124d27:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0124d2d:	29 d0                	sub    %edx,%eax
f0124d2f:	01 c1                	add    %eax,%ecx
f0124d31:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0124d38:	10 00 00 
f0124d3b:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0124d40:	0f b6 c0             	movzbl %al,%eax
f0124d43:	c1 e0 04             	shl    $0x4,%eax
f0124d46:	89 c2                	mov    %eax,%edx
f0124d48:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0124d4e:	01 d0                	add    %edx,%eax
f0124d50:	48                   	dec    %eax
f0124d51:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0124d57:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0124d5d:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d62:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0124d68:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0124d6e:	29 d0                	sub    %edx,%eax
f0124d70:	01 c8                	add    %ecx,%eax
f0124d72:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0124d77:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0124d7d:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f0124d84:	10 00 00 
f0124d87:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0124d8d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124d92:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f0124d98:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0124d9e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124da3:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f0124da9:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0124daf:	29 d0                	sub    %edx,%eax
f0124db1:	89 c1                	mov    %eax,%ecx
f0124db3:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f0124dba:	10 00 00 
f0124dbd:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0124dc2:	0f b6 d0             	movzbl %al,%edx
f0124dc5:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0124dcb:	01 d0                	add    %edx,%eax
f0124dcd:	48                   	dec    %eax
f0124dce:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f0124dd4:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0124dda:	ba 00 00 00 00       	mov    $0x0,%edx
f0124ddf:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f0124de5:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0124deb:	29 d0                	sub    %edx,%eax
f0124ded:	01 c1                	add    %eax,%ecx
f0124def:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f0124df6:	10 00 00 
f0124df9:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0124dfe:	0f b6 c0             	movzbl %al,%eax
f0124e01:	c1 e0 04             	shl    $0x4,%eax
f0124e04:	89 c2                	mov    %eax,%edx
f0124e06:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0124e0c:	01 d0                	add    %edx,%eax
f0124e0e:	48                   	dec    %eax
f0124e0f:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0124e15:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0124e1b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124e20:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0124e26:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0124e2c:	29 d0                	sub    %edx,%eax
f0124e2e:	01 c8                	add    %ecx,%eax
f0124e30:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0124e35:	c1 e8 0c             	shr    $0xc,%eax
f0124e38:	89 c2                	mov    %eax,%edx
f0124e3a:	4a                   	dec    %edx
f0124e3b:	89 95 54 fe ff ff    	mov    %edx,-0x1ac(%ebp)
f0124e41:	c1 e0 02             	shl    $0x2,%eax
f0124e44:	8d 50 03             	lea    0x3(%eax),%edx
f0124e47:	b8 10 00 00 00       	mov    $0x10,%eax
f0124e4c:	48                   	dec    %eax
f0124e4d:	01 d0                	add    %edx,%eax
f0124e4f:	bf 10 00 00 00       	mov    $0x10,%edi
f0124e54:	ba 00 00 00 00       	mov    $0x0,%edx
f0124e59:	f7 f7                	div    %edi
f0124e5b:	6b c0 10             	imul   $0x10,%eax,%eax
f0124e5e:	29 c4                	sub    %eax,%esp
f0124e60:	89 e0                	mov    %esp,%eax
f0124e62:	83 c0 03             	add    $0x3,%eax
f0124e65:	c1 e8 02             	shr    $0x2,%eax
f0124e68:	c1 e0 02             	shl    $0x2,%eax
f0124e6b:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		i = 0;
f0124e71:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0124e78:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0124e7f:	10 00 00 
f0124e82:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0124e88:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124e8d:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0124e93:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0124e99:	ba 00 00 00 00       	mov    $0x0,%edx
f0124e9e:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0124ea4:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0124eaa:	29 d0                	sub    %edx,%eax
f0124eac:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124eb1:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124eb4:	eb 29                	jmp    f0124edf <test_kheap_phys_addr+0x118a>
		{
			allPAs[i++] = kheap_physical_address(va);
f0124eb6:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0124eb9:	8d 43 01             	lea    0x1(%ebx),%eax
f0124ebc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0124ebf:	83 ec 0c             	sub    $0xc,%esp
f0124ec2:	ff 75 d8             	pushl  -0x28(%ebp)
f0124ec5:	e8 01 2e fe ff       	call   f0107ccb <kheap_physical_address>
f0124eca:	83 c4 10             	add    $0x10,%esp
f0124ecd:	89 c2                	mov    %eax,%edx
f0124ecf:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0124ed5:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0124ed8:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
f0124edf:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124ee2:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f0124ee8:	72 cc                	jb     f0124eb6 <test_kheap_phys_addr+0x1161>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0124eea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124eed:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		i = 0;
f0124ef3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124efa:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f0124f01:	10 00 00 
f0124f04:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0124f0a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124f0f:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f0124f15:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0124f1b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124f20:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f0124f26:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0124f2c:	29 d0                	sub    %edx,%eax
f0124f2e:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124f33:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124f36:	e9 ab 00 00 00       	jmp    f0124fe6 <test_kheap_phys_addr+0x1291>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0124f3b:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0124f40:	83 ec 04             	sub    $0x4,%esp
f0124f43:	8d 95 1c fd ff ff    	lea    -0x2e4(%ebp),%edx
f0124f49:	52                   	push   %edx
f0124f4a:	ff 75 d8             	pushl  -0x28(%ebp)
f0124f4d:	50                   	push   %eax
f0124f4e:	e8 3c 1b fe ff       	call   f0106a8f <get_page_table>
f0124f53:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0124f56:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f0124f5c:	85 c0                	test   %eax,%eax
f0124f5e:	75 17                	jne    f0124f77 <test_kheap_phys_addr+0x1222>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0124f60:	83 ec 04             	sub    $0x4,%esp
f0124f63:	68 1c bb 13 f0       	push   $0xf013bb1c
f0124f68:	68 93 08 00 00       	push   $0x893
f0124f6d:	68 7a b1 13 f0       	push   $0xf013b17a
f0124f72:	e8 8e b2 fd ff       	call   f0100205 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0124f77:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124f7a:	c1 e8 0c             	shr    $0xc,%eax
f0124f7d:	25 ff 03 00 00       	and    $0x3ff,%eax
f0124f82:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0124f85:	eb 4b                	jmp    f0124fd2 <test_kheap_phys_addr+0x127d>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0124f87:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f0124f8d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0124f90:	c1 e2 02             	shl    $0x2,%edx
f0124f93:	01 d0                	add    %edx,%eax
f0124f95:	8b 00                	mov    (%eax),%eax
f0124f97:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0124f9c:	89 c1                	mov    %eax,%ecx
f0124f9e:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0124fa4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0124fa7:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124faa:	39 c1                	cmp    %eax,%ecx
f0124fac:	74 17                	je     f0124fc5 <test_kheap_phys_addr+0x1270>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0124fae:	83 ec 04             	sub    $0x4,%esp
f0124fb1:	68 75 bb 13 f0       	push   $0xf013bb75
f0124fb6:	68 9a 08 00 00       	push   $0x89a
f0124fbb:	68 7a b1 13 f0       	push   $0xf013b17a
f0124fc0:	e8 40 b2 fd ff       	call   f0100205 <_panic>
				}
				va += PAGE_SIZE;
f0124fc5:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0124fcc:	ff 45 d4             	incl   -0x2c(%ebp)
f0124fcf:	ff 45 e4             	incl   -0x1c(%ebp)
f0124fd2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124fd5:	3b 85 44 fe ff ff    	cmp    -0x1bc(%ebp),%eax
f0124fdb:	7d 09                	jge    f0124fe6 <test_kheap_phys_addr+0x1291>
f0124fdd:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f0124fe4:	7e a1                	jle    f0124f87 <test_kheap_phys_addr+0x1232>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124fe6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124fe9:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f0124fef:	0f 82 46 ff ff ff    	jb     f0124f3b <test_kheap_phys_addr+0x11e6>
f0124ff5:	89 f4                	mov    %esi,%esp
				va += PAGE_SIZE;
			}
		}
	}

	cprintf("\b\b\b80%");
f0124ff7:	83 ec 0c             	sub    $0xc,%esp
f0124ffa:	68 05 b3 13 f0       	push   $0xf013b305
f0124fff:	e8 0a bd fd ff       	call   f0100d0e <cprintf>
f0125004:	83 c4 10             	add    $0x10,%esp

	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f0125007:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f012500e:	10 00 00 
f0125011:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0125017:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012501c:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f0125022:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0125028:	ba 00 00 00 00       	mov    $0x0,%edx
f012502d:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f0125033:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0125039:	29 d0                	sub    %edx,%eax
f012503b:	89 c1                	mov    %eax,%ecx
f012503d:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f0125044:	10 00 00 
f0125047:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012504c:	0f b6 d0             	movzbl %al,%edx
f012504f:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0125055:	01 d0                	add    %edx,%eax
f0125057:	48                   	dec    %eax
f0125058:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f012505e:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0125064:	ba 00 00 00 00       	mov    $0x0,%edx
f0125069:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f012506f:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0125075:	29 d0                	sub    %edx,%eax
f0125077:	01 c1                	add    %eax,%ecx
f0125079:	c7 85 28 fe ff ff 00 	movl   $0x1000,-0x1d8(%ebp)
f0125080:	10 00 00 
f0125083:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0125088:	0f b6 c0             	movzbl %al,%eax
f012508b:	c1 e0 04             	shl    $0x4,%eax
f012508e:	89 c2                	mov    %eax,%edx
f0125090:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0125096:	01 d0                	add    %edx,%eax
f0125098:	48                   	dec    %eax
f0125099:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
f012509f:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f01250a5:	ba 00 00 00 00       	mov    $0x0,%edx
f01250aa:	f7 b5 28 fe ff ff    	divl   -0x1d8(%ebp)
f01250b0:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f01250b6:	29 d0                	sub    %edx,%eax
f01250b8:	01 c8                	add    %ecx,%eax
f01250ba:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
f01250bf:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
		i = 0;
f01250c5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f01250cc:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01250d2:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01250d5:	eb 0a                	jmp    f01250e1 <test_kheap_phys_addr+0x138c>
		{
			i++;
f01250d7:	ff 45 e4             	incl   -0x1c(%ebp)
	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f01250da:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f01250e1:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f01250e8:	76 ed                	jbe    f01250d7 <test_kheap_phys_addr+0x1382>
		{
			i++;
		}
		int ii = i ;
f01250ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01250ed:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
		i = 0;
f01250f3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f01250fa:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0125100:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0125103:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f012510a:	e9 cc 00 00 00       	jmp    f01251db <test_kheap_phys_addr+0x1486>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
f012510f:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0125112:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0125117:	83 ec 04             	sub    $0x4,%esp
f012511a:	8d 8d 18 fd ff ff    	lea    -0x2e8(%ebp),%ecx
f0125120:	51                   	push   %ecx
f0125121:	52                   	push   %edx
f0125122:	50                   	push   %eax
f0125123:	e8 67 19 fe ff       	call   f0106a8f <get_page_table>
f0125128:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f012512b:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f0125131:	85 c0                	test   %eax,%eax
f0125133:	75 17                	jne    f012514c <test_kheap_phys_addr+0x13f7>
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0125135:	83 ec 04             	sub    $0x4,%esp
f0125138:	68 1c bb 13 f0       	push   $0xf013bb1c
f012513d:	68 b6 08 00 00       	push   $0x8b6
f0125142:	68 7a b1 13 f0       	push   $0xf013b17a
f0125147:	e8 b9 b0 fd ff       	call   f0100205 <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f012514c:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0125153:	eb 67                	jmp    f01251bc <test_kheap_phys_addr+0x1467>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f0125155:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0125158:	c1 e0 0c             	shl    $0xc,%eax
f012515b:	89 c2                	mov    %eax,%edx
f012515d:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0125163:	01 d0                	add    %edx,%eax
f0125165:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f012516b:	83 ec 0c             	sub    $0xc,%esp
f012516e:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f0125174:	e8 52 2b fe ff       	call   f0107ccb <kheap_physical_address>
f0125179:	83 c4 10             	add    $0x10,%esp
f012517c:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%ebp)
				if ((ptr_table[j] & 0xFFFFF000) != supposed_kheap_phys_add)
f0125182:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f0125188:	8b 55 cc             	mov    -0x34(%ebp),%edx
f012518b:	c1 e2 02             	shl    $0x2,%edx
f012518e:	01 d0                	add    %edx,%eax
f0125190:	8b 00                	mov    (%eax),%eax
f0125192:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0125197:	3b 85 14 fe ff ff    	cmp    -0x1ec(%ebp),%eax
f012519d:	74 17                	je     f01251b6 <test_kheap_phys_addr+0x1461>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f012519f:	83 ec 04             	sub    $0x4,%esp
f01251a2:	68 75 bb 13 f0       	push   $0xf013bb75
f01251a7:	68 c0 08 00 00       	push   $0x8c0
f01251ac:	68 7a b1 13 f0       	push   $0xf013b17a
f01251b1:	e8 4f b0 fd ff       	call   f0100205 <_panic>
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
			if (ptr_table == NULL)
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f01251b6:	ff 45 cc             	incl   -0x34(%ebp)
f01251b9:	ff 45 e4             	incl   -0x1c(%ebp)
f01251bc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01251bf:	3b 85 1c fe ff ff    	cmp    -0x1e4(%ebp),%eax
f01251c5:	7d 09                	jge    f01251d0 <test_kheap_phys_addr+0x147b>
f01251c7:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f01251ce:	7e 85                	jle    f0125155 <test_kheap_phys_addr+0x1400>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f01251d0:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f01251d7:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f01251db:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f01251df:	0f 88 2a ff ff ff    	js     f012510f <test_kheap_phys_addr+0x13ba>
f01251e5:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f01251e9:	7f 0d                	jg     f01251f8 <test_kheap_phys_addr+0x14a3>
f01251eb:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f01251f2:	0f 86 17 ff ff ff    	jbe    f012510f <test_kheap_phys_addr+0x13ba>
				}
			}
		}
	}

	cprintf("\b\b\b100%\n");
f01251f8:	83 ec 0c             	sub    $0xc,%esp
f01251fb:	68 5e b3 13 f0       	push   $0xf013b35e
f0125200:	e8 09 bb fd ff       	call   f0100d0e <cprintf>
f0125205:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_physical_address completed successfully.\n");
f0125208:	83 ec 0c             	sub    $0xc,%esp
f012520b:	68 c8 bb 13 f0       	push   $0xf013bbc8
f0125210:	e8 f9 ba fd ff       	call   f0100d0e <cprintf>
f0125215:	83 c4 10             	add    $0x10,%esp

	return 1;
f0125218:	b8 01 00 00 00       	mov    $0x1,%eax

}
f012521d:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0125220:	5b                   	pop    %ebx
f0125221:	5e                   	pop    %esi
f0125222:	5f                   	pop    %edi
f0125223:	5d                   	pop    %ebp
f0125224:	c3                   	ret    

f0125225 <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f0125225:	55                   	push   %ebp
f0125226:	89 e5                	mov    %esp,%ebp
f0125228:	57                   	push   %edi
f0125229:	56                   	push   %esi
f012522a:	53                   	push   %ebx
f012522b:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
f0125231:	89 e0                	mov    %esp,%eax
f0125233:	89 c6                	mov    %eax,%esi
	cprintf("==============================================\n");
f0125235:	83 ec 0c             	sub    $0xc,%esp
f0125238:	68 bc b0 13 f0       	push   $0xf013b0bc
f012523d:	e8 cc ba fd ff       	call   f0100d0e <cprintf>
f0125242:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0125245:	83 ec 0c             	sub    $0xc,%esp
f0125248:	68 ec b0 13 f0       	push   $0xf013b0ec
f012524d:	e8 bc ba fd ff       	call   f0100d0e <cprintf>
f0125252:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0125255:	83 ec 0c             	sub    $0xc,%esp
f0125258:	68 bc b0 13 f0       	push   $0xf013b0bc
f012525d:	e8 ac ba fd ff       	call   f0100d0e <cprintf>
f0125262:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0125265:	c6 45 d3 80          	movb   $0x80,-0x2d(%ebp)
	char maxByte = 0x7F;
f0125269:	c6 45 d2 7f          	movb   $0x7f,-0x2e(%ebp)
	short minShort = 1<<15 ;
f012526d:	66 c7 45 d0 00 80    	movw   $0x8000,-0x30(%ebp)
	short maxShort = 0x7FFF;
f0125273:	66 c7 45 ce ff 7f    	movw   $0x7fff,-0x32(%ebp)
	int minInt = 1<<31 ;
f0125279:	c7 45 c8 00 00 00 80 	movl   $0x80000000,-0x38(%ebp)
	int maxInt = 0x7FFFFFFF;
f0125280:	c7 45 c4 ff ff ff 7f 	movl   $0x7fffffff,-0x3c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0125287:	e8 57 7b fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012528c:	89 45 c0             	mov    %eax,-0x40(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012528f:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0125295:	b9 14 00 00 00       	mov    $0x14,%ecx
f012529a:	b8 00 00 00 00       	mov    $0x0,%eax
f012529f:	89 d7                	mov    %edx,%edi
f01252a1:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f01252a3:	8d 95 78 fd ff ff    	lea    -0x288(%ebp),%edx
f01252a9:	b9 14 00 00 00       	mov    $0x14,%ecx
f01252ae:	b8 00 00 00 00       	mov    $0x0,%eax
f01252b3:	89 d7                	mov    %edx,%edi
f01252b5:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01252b7:	8d 95 28 fd ff ff    	lea    -0x2d8(%ebp),%edx
f01252bd:	b9 14 00 00 00       	mov    $0x14,%ecx
f01252c2:	b8 00 00 00 00       	mov    $0x0,%eax
f01252c7:	89 d7                	mov    %edx,%edi
f01252c9:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01252cb:	e8 13 7b fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01252d0:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01252d3:	e8 ce ea fd ff       	call   f0103da6 <pf_calculate_free_frames>
f01252d8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01252db:	83 ec 0c             	sub    $0xc,%esp
f01252de:	68 00 fc 1f 00       	push   $0x1ffc00
f01252e3:	e8 79 27 fe ff       	call   f0107a61 <kmalloc>
f01252e8:	83 c4 10             	add    $0x10,%esp
f01252eb:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01252f1:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f01252f7:	89 c1                	mov    %eax,%ecx
f01252f9:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0125300:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0125303:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125308:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012530b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012530e:	ba 00 00 00 00       	mov    $0x0,%edx
f0125313:	f7 75 b4             	divl   -0x4c(%ebp)
f0125316:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0125319:	29 d0                	sub    %edx,%eax
f012531b:	89 c3                	mov    %eax,%ebx
f012531d:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0125324:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0125329:	0f b6 d0             	movzbl %al,%edx
f012532c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012532f:	01 d0                	add    %edx,%eax
f0125331:	48                   	dec    %eax
f0125332:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0125335:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0125338:	ba 00 00 00 00       	mov    $0x0,%edx
f012533d:	f7 75 ac             	divl   -0x54(%ebp)
f0125340:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0125343:	29 d0                	sub    %edx,%eax
f0125345:	01 c3                	add    %eax,%ebx
f0125347:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012534e:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0125353:	0f b6 c0             	movzbl %al,%eax
f0125356:	c1 e0 04             	shl    $0x4,%eax
f0125359:	89 c2                	mov    %eax,%edx
f012535b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012535e:	01 d0                	add    %edx,%eax
f0125360:	48                   	dec    %eax
f0125361:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0125364:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0125367:	ba 00 00 00 00       	mov    $0x0,%edx
f012536c:	f7 75 a4             	divl   -0x5c(%ebp)
f012536f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0125372:	29 d0                	sub    %edx,%eax
f0125374:	01 d8                	add    %ebx,%eax
f0125376:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012537b:	39 c1                	cmp    %eax,%ecx
f012537d:	74 17                	je     f0125396 <test_kheap_virt_addr+0x171>
f012537f:	83 ec 04             	sub    $0x4,%esp
f0125382:	68 60 b2 13 f0       	push   $0xf013b260
f0125387:	68 ed 08 00 00       	push   $0x8ed
f012538c:	68 7a b1 13 f0       	push   $0xf013b17a
f0125391:	e8 6f ae fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125396:	e8 0b ea fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012539b:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012539e:	74 17                	je     f01253b7 <test_kheap_virt_addr+0x192>
f01253a0:	83 ec 04             	sub    $0x4,%esp
f01253a3:	68 94 b1 13 f0       	push   $0xf013b194
f01253a8:	68 ee 08 00 00       	push   $0x8ee
f01253ad:	68 7a b1 13 f0       	push   $0xf013b17a
f01253b2:	e8 4e ae fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01253b7:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01253ba:	e8 24 7a fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01253bf:	29 c3                	sub    %eax,%ebx
f01253c1:	89 d8                	mov    %ebx,%eax
f01253c3:	3d 00 02 00 00       	cmp    $0x200,%eax
f01253c8:	74 17                	je     f01253e1 <test_kheap_virt_addr+0x1bc>
f01253ca:	83 ec 04             	sub    $0x4,%esp
f01253cd:	68 fc b1 13 f0       	push   $0xf013b1fc
f01253d2:	68 ef 08 00 00       	push   $0x8ef
f01253d7:	68 7a b1 13 f0       	push   $0xf013b17a
f01253dc:	e8 24 ae fd ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01253e1:	e8 fd 79 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01253e6:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01253e9:	e8 b8 e9 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f01253ee:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01253f1:	83 ec 0c             	sub    $0xc,%esp
f01253f4:	68 00 fc 1f 00       	push   $0x1ffc00
f01253f9:	e8 63 26 fe ff       	call   f0107a61 <kmalloc>
f01253fe:	83 c4 10             	add    $0x10,%esp
f0125401:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125407:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f012540d:	89 c1                	mov    %eax,%ecx
f012540f:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0125416:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0125419:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012541e:	89 45 98             	mov    %eax,-0x68(%ebp)
f0125421:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125424:	ba 00 00 00 00       	mov    $0x0,%edx
f0125429:	f7 75 9c             	divl   -0x64(%ebp)
f012542c:	8b 45 98             	mov    -0x68(%ebp),%eax
f012542f:	29 d0                	sub    %edx,%eax
f0125431:	89 c3                	mov    %eax,%ebx
f0125433:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012543a:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012543f:	0f b6 d0             	movzbl %al,%edx
f0125442:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0125445:	01 d0                	add    %edx,%eax
f0125447:	48                   	dec    %eax
f0125448:	89 45 90             	mov    %eax,-0x70(%ebp)
f012544b:	8b 45 90             	mov    -0x70(%ebp),%eax
f012544e:	ba 00 00 00 00       	mov    $0x0,%edx
f0125453:	f7 75 94             	divl   -0x6c(%ebp)
f0125456:	8b 45 90             	mov    -0x70(%ebp),%eax
f0125459:	29 d0                	sub    %edx,%eax
f012545b:	01 c3                	add    %eax,%ebx
f012545d:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0125464:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0125469:	0f b6 c0             	movzbl %al,%eax
f012546c:	c1 e0 04             	shl    $0x4,%eax
f012546f:	89 c2                	mov    %eax,%edx
f0125471:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0125474:	01 d0                	add    %edx,%eax
f0125476:	48                   	dec    %eax
f0125477:	89 45 88             	mov    %eax,-0x78(%ebp)
f012547a:	8b 45 88             	mov    -0x78(%ebp),%eax
f012547d:	ba 00 00 00 00       	mov    $0x0,%edx
f0125482:	f7 75 8c             	divl   -0x74(%ebp)
f0125485:	8b 45 88             	mov    -0x78(%ebp),%eax
f0125488:	29 d0                	sub    %edx,%eax
f012548a:	01 d8                	add    %ebx,%eax
f012548c:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0125491:	39 c1                	cmp    %eax,%ecx
f0125493:	74 17                	je     f01254ac <test_kheap_virt_addr+0x287>
f0125495:	83 ec 04             	sub    $0x4,%esp
f0125498:	68 60 b2 13 f0       	push   $0xf013b260
f012549d:	68 f5 08 00 00       	push   $0x8f5
f01254a2:	68 7a b1 13 f0       	push   $0xf013b17a
f01254a7:	e8 59 ad fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01254ac:	e8 f5 e8 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f01254b1:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01254b4:	74 17                	je     f01254cd <test_kheap_virt_addr+0x2a8>
f01254b6:	83 ec 04             	sub    $0x4,%esp
f01254b9:	68 94 b1 13 f0       	push   $0xf013b194
f01254be:	68 f6 08 00 00       	push   $0x8f6
f01254c3:	68 7a b1 13 f0       	push   $0xf013b17a
f01254c8:	e8 38 ad fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01254cd:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01254d0:	e8 0e 79 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01254d5:	29 c3                	sub    %eax,%ebx
f01254d7:	89 d8                	mov    %ebx,%eax
f01254d9:	3d 00 02 00 00       	cmp    $0x200,%eax
f01254de:	74 17                	je     f01254f7 <test_kheap_virt_addr+0x2d2>
f01254e0:	83 ec 04             	sub    $0x4,%esp
f01254e3:	68 fc b1 13 f0       	push   $0xf013b1fc
f01254e8:	68 f7 08 00 00       	push   $0x8f7
f01254ed:	68 7a b1 13 f0       	push   $0xf013b17a
f01254f2:	e8 0e ad fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01254f7:	e8 e7 78 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01254fc:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01254ff:	e8 a2 e8 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0125504:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0125507:	83 ec 0c             	sub    $0xc,%esp
f012550a:	68 00 08 00 00       	push   $0x800
f012550f:	e8 4d 25 fe ff       	call   f0107a61 <kmalloc>
f0125514:	83 c4 10             	add    $0x10,%esp
f0125517:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012551d:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f0125523:	89 c1                	mov    %eax,%ecx
f0125525:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012552c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012552f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125534:	89 45 80             	mov    %eax,-0x80(%ebp)
f0125537:	8b 45 80             	mov    -0x80(%ebp),%eax
f012553a:	ba 00 00 00 00       	mov    $0x0,%edx
f012553f:	f7 75 84             	divl   -0x7c(%ebp)
f0125542:	8b 45 80             	mov    -0x80(%ebp),%eax
f0125545:	29 d0                	sub    %edx,%eax
f0125547:	89 c3                	mov    %eax,%ebx
f0125549:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0125550:	10 00 00 
f0125553:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0125558:	0f b6 d0             	movzbl %al,%edx
f012555b:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0125561:	01 d0                	add    %edx,%eax
f0125563:	48                   	dec    %eax
f0125564:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012556a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0125570:	ba 00 00 00 00       	mov    $0x0,%edx
f0125575:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012557b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0125581:	29 d0                	sub    %edx,%eax
f0125583:	01 c3                	add    %eax,%ebx
f0125585:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012558c:	10 00 00 
f012558f:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0125594:	0f b6 c0             	movzbl %al,%eax
f0125597:	c1 e0 04             	shl    $0x4,%eax
f012559a:	89 c2                	mov    %eax,%edx
f012559c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01255a2:	01 d0                	add    %edx,%eax
f01255a4:	48                   	dec    %eax
f01255a5:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01255ab:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01255b1:	ba 00 00 00 00       	mov    $0x0,%edx
f01255b6:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01255bc:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01255c2:	29 d0                	sub    %edx,%eax
f01255c4:	01 d8                	add    %ebx,%eax
f01255c6:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01255cb:	39 c1                	cmp    %eax,%ecx
f01255cd:	74 17                	je     f01255e6 <test_kheap_virt_addr+0x3c1>
f01255cf:	83 ec 04             	sub    $0x4,%esp
f01255d2:	68 60 b2 13 f0       	push   $0xf013b260
f01255d7:	68 fd 08 00 00       	push   $0x8fd
f01255dc:	68 7a b1 13 f0       	push   $0xf013b17a
f01255e1:	e8 1f ac fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01255e6:	e8 bb e7 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f01255eb:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01255ee:	74 17                	je     f0125607 <test_kheap_virt_addr+0x3e2>
f01255f0:	83 ec 04             	sub    $0x4,%esp
f01255f3:	68 94 b1 13 f0       	push   $0xf013b194
f01255f8:	68 fe 08 00 00       	push   $0x8fe
f01255fd:	68 7a b1 13 f0       	push   $0xf013b17a
f0125602:	e8 fe ab fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125607:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012560a:	e8 d4 77 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012560f:	29 c3                	sub    %eax,%ebx
f0125611:	89 d8                	mov    %ebx,%eax
f0125613:	83 f8 01             	cmp    $0x1,%eax
f0125616:	74 17                	je     f012562f <test_kheap_virt_addr+0x40a>
f0125618:	83 ec 04             	sub    $0x4,%esp
f012561b:	68 fc b1 13 f0       	push   $0xf013b1fc
f0125620:	68 ff 08 00 00       	push   $0x8ff
f0125625:	68 7a b1 13 f0       	push   $0xf013b17a
f012562a:	e8 d6 ab fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012562f:	e8 af 77 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0125634:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125637:	e8 6a e7 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012563c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012563f:	83 ec 0c             	sub    $0xc,%esp
f0125642:	68 00 08 00 00       	push   $0x800
f0125647:	e8 15 24 fe ff       	call   f0107a61 <kmalloc>
f012564c:	83 c4 10             	add    $0x10,%esp
f012564f:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125655:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f012565b:	89 c1                	mov    %eax,%ecx
f012565d:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0125664:	10 00 00 
f0125667:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012566d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125672:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0125678:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012567e:	ba 00 00 00 00       	mov    $0x0,%edx
f0125683:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0125689:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012568f:	29 d0                	sub    %edx,%eax
f0125691:	89 c3                	mov    %eax,%ebx
f0125693:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012569a:	10 00 00 
f012569d:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01256a2:	0f b6 d0             	movzbl %al,%edx
f01256a5:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01256ab:	01 d0                	add    %edx,%eax
f01256ad:	48                   	dec    %eax
f01256ae:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01256b4:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01256ba:	ba 00 00 00 00       	mov    $0x0,%edx
f01256bf:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01256c5:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01256cb:	29 d0                	sub    %edx,%eax
f01256cd:	01 c3                	add    %eax,%ebx
f01256cf:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f01256d6:	10 00 00 
f01256d9:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01256de:	0f b6 c0             	movzbl %al,%eax
f01256e1:	c1 e0 04             	shl    $0x4,%eax
f01256e4:	89 c2                	mov    %eax,%edx
f01256e6:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01256ec:	01 d0                	add    %edx,%eax
f01256ee:	48                   	dec    %eax
f01256ef:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f01256f5:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01256fb:	ba 00 00 00 00       	mov    $0x0,%edx
f0125700:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0125706:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012570c:	29 d0                	sub    %edx,%eax
f012570e:	01 d8                	add    %ebx,%eax
f0125710:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0125715:	39 c1                	cmp    %eax,%ecx
f0125717:	74 17                	je     f0125730 <test_kheap_virt_addr+0x50b>
f0125719:	83 ec 04             	sub    $0x4,%esp
f012571c:	68 60 b2 13 f0       	push   $0xf013b260
f0125721:	68 05 09 00 00       	push   $0x905
f0125726:	68 7a b1 13 f0       	push   $0xf013b17a
f012572b:	e8 d5 aa fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125730:	e8 71 e6 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0125735:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125738:	74 17                	je     f0125751 <test_kheap_virt_addr+0x52c>
f012573a:	83 ec 04             	sub    $0x4,%esp
f012573d:	68 94 b1 13 f0       	push   $0xf013b194
f0125742:	68 06 09 00 00       	push   $0x906
f0125747:	68 7a b1 13 f0       	push   $0xf013b17a
f012574c:	e8 b4 aa fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125751:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125754:	e8 8a 76 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0125759:	29 c3                	sub    %eax,%ebx
f012575b:	89 d8                	mov    %ebx,%eax
f012575d:	83 f8 01             	cmp    $0x1,%eax
f0125760:	74 17                	je     f0125779 <test_kheap_virt_addr+0x554>
f0125762:	83 ec 04             	sub    $0x4,%esp
f0125765:	68 fc b1 13 f0       	push   $0xf013b1fc
f012576a:	68 07 09 00 00       	push   $0x907
f012576f:	68 7a b1 13 f0       	push   $0xf013b17a
f0125774:	e8 8c aa fd ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0125779:	e8 65 76 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012577e:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125781:	e8 20 e6 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0125786:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0125789:	83 ec 0c             	sub    $0xc,%esp
f012578c:	68 00 1c 00 00       	push   $0x1c00
f0125791:	e8 cb 22 fe ff       	call   f0107a61 <kmalloc>
f0125796:	83 c4 10             	add    $0x10,%esp
f0125799:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012579f:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f01257a5:	89 c1                	mov    %eax,%ecx
f01257a7:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f01257ae:	10 00 00 
f01257b1:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01257b7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01257bc:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f01257c2:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01257c8:	ba 00 00 00 00       	mov    $0x0,%edx
f01257cd:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f01257d3:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01257d9:	29 d0                	sub    %edx,%eax
f01257db:	89 c3                	mov    %eax,%ebx
f01257dd:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f01257e4:	10 00 00 
f01257e7:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01257ec:	0f b6 d0             	movzbl %al,%edx
f01257ef:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01257f5:	01 d0                	add    %edx,%eax
f01257f7:	48                   	dec    %eax
f01257f8:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f01257fe:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0125804:	ba 00 00 00 00       	mov    $0x0,%edx
f0125809:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012580f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0125815:	29 d0                	sub    %edx,%eax
f0125817:	01 c3                	add    %eax,%ebx
f0125819:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0125820:	10 00 00 
f0125823:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0125828:	0f b6 c0             	movzbl %al,%eax
f012582b:	c1 e0 04             	shl    $0x4,%eax
f012582e:	89 c2                	mov    %eax,%edx
f0125830:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0125836:	01 d0                	add    %edx,%eax
f0125838:	48                   	dec    %eax
f0125839:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012583f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0125845:	ba 00 00 00 00       	mov    $0x0,%edx
f012584a:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0125850:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0125856:	29 d0                	sub    %edx,%eax
f0125858:	01 d8                	add    %ebx,%eax
f012585a:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012585f:	39 c1                	cmp    %eax,%ecx
f0125861:	74 17                	je     f012587a <test_kheap_virt_addr+0x655>
f0125863:	83 ec 04             	sub    $0x4,%esp
f0125866:	68 60 b2 13 f0       	push   $0xf013b260
f012586b:	68 0d 09 00 00       	push   $0x90d
f0125870:	68 7a b1 13 f0       	push   $0xf013b17a
f0125875:	e8 8b a9 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012587a:	e8 27 e5 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012587f:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125882:	74 17                	je     f012589b <test_kheap_virt_addr+0x676>
f0125884:	83 ec 04             	sub    $0x4,%esp
f0125887:	68 94 b1 13 f0       	push   $0xf013b194
f012588c:	68 0e 09 00 00       	push   $0x90e
f0125891:	68 7a b1 13 f0       	push   $0xf013b17a
f0125896:	e8 6a a9 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012589b:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012589e:	e8 40 75 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01258a3:	29 c3                	sub    %eax,%ebx
f01258a5:	89 d8                	mov    %ebx,%eax
f01258a7:	83 f8 02             	cmp    $0x2,%eax
f01258aa:	74 17                	je     f01258c3 <test_kheap_virt_addr+0x69e>
f01258ac:	83 ec 04             	sub    $0x4,%esp
f01258af:	68 fc b1 13 f0       	push   $0xf013b1fc
f01258b4:	68 0f 09 00 00       	push   $0x90f
f01258b9:	68 7a b1 13 f0       	push   $0xf013b17a
f01258be:	e8 42 a9 fd ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01258c3:	e8 1b 75 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01258c8:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01258cb:	e8 d6 e4 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f01258d0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01258d3:	83 ec 0c             	sub    $0xc,%esp
f01258d6:	68 00 fc 2f 00       	push   $0x2ffc00
f01258db:	e8 81 21 fe ff       	call   f0107a61 <kmalloc>
f01258e0:	83 c4 10             	add    $0x10,%esp
f01258e3:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01258e9:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f01258ef:	89 c1                	mov    %eax,%ecx
f01258f1:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f01258f8:	10 00 00 
f01258fb:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0125901:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125906:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012590c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0125912:	ba 00 00 00 00       	mov    $0x0,%edx
f0125917:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012591d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0125923:	29 d0                	sub    %edx,%eax
f0125925:	89 c3                	mov    %eax,%ebx
f0125927:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012592e:	10 00 00 
f0125931:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0125936:	0f b6 d0             	movzbl %al,%edx
f0125939:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012593f:	01 d0                	add    %edx,%eax
f0125941:	48                   	dec    %eax
f0125942:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0125948:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012594e:	ba 00 00 00 00       	mov    $0x0,%edx
f0125953:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0125959:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012595f:	29 d0                	sub    %edx,%eax
f0125961:	01 c3                	add    %eax,%ebx
f0125963:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012596a:	10 00 00 
f012596d:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0125972:	0f b6 c0             	movzbl %al,%eax
f0125975:	c1 e0 04             	shl    $0x4,%eax
f0125978:	89 c2                	mov    %eax,%edx
f012597a:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0125980:	01 d0                	add    %edx,%eax
f0125982:	48                   	dec    %eax
f0125983:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0125989:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012598f:	ba 00 00 00 00       	mov    $0x0,%edx
f0125994:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012599a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01259a0:	29 d0                	sub    %edx,%eax
f01259a2:	01 d8                	add    %ebx,%eax
f01259a4:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01259a9:	39 c1                	cmp    %eax,%ecx
f01259ab:	74 17                	je     f01259c4 <test_kheap_virt_addr+0x79f>
f01259ad:	83 ec 04             	sub    $0x4,%esp
f01259b0:	68 60 b2 13 f0       	push   $0xf013b260
f01259b5:	68 15 09 00 00       	push   $0x915
f01259ba:	68 7a b1 13 f0       	push   $0xf013b17a
f01259bf:	e8 41 a8 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01259c4:	e8 dd e3 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f01259c9:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01259cc:	74 17                	je     f01259e5 <test_kheap_virt_addr+0x7c0>
f01259ce:	83 ec 04             	sub    $0x4,%esp
f01259d1:	68 94 b1 13 f0       	push   $0xf013b194
f01259d6:	68 16 09 00 00       	push   $0x916
f01259db:	68 7a b1 13 f0       	push   $0xf013b17a
f01259e0:	e8 20 a8 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01259e5:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01259e8:	e8 f6 73 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01259ed:	29 c3                	sub    %eax,%ebx
f01259ef:	89 d8                	mov    %ebx,%eax
f01259f1:	3d 00 03 00 00       	cmp    $0x300,%eax
f01259f6:	74 17                	je     f0125a0f <test_kheap_virt_addr+0x7ea>
f01259f8:	83 ec 04             	sub    $0x4,%esp
f01259fb:	68 fc b1 13 f0       	push   $0xf013b1fc
f0125a00:	68 17 09 00 00       	push   $0x917
f0125a05:	68 7a b1 13 f0       	push   $0xf013b17a
f0125a0a:	e8 f6 a7 fd ff       	call   f0100205 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0125a0f:	e8 cf 73 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0125a14:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125a17:	e8 8a e3 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0125a1c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0125a1f:	83 ec 0c             	sub    $0xc,%esp
f0125a22:	68 00 fc 5f 00       	push   $0x5ffc00
f0125a27:	e8 35 20 fe ff       	call   f0107a61 <kmalloc>
f0125a2c:	83 c4 10             	add    $0x10,%esp
f0125a2f:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125a35:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0125a3b:	89 c1                	mov    %eax,%ecx
f0125a3d:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0125a44:	10 00 00 
f0125a47:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0125a4d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125a52:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0125a58:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125a5e:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a63:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0125a69:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125a6f:	29 d0                	sub    %edx,%eax
f0125a71:	89 c3                	mov    %eax,%ebx
f0125a73:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0125a7a:	10 00 00 
f0125a7d:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0125a82:	0f b6 d0             	movzbl %al,%edx
f0125a85:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0125a8b:	01 d0                	add    %edx,%eax
f0125a8d:	48                   	dec    %eax
f0125a8e:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0125a94:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0125a9a:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a9f:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0125aa5:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0125aab:	29 d0                	sub    %edx,%eax
f0125aad:	01 c3                	add    %eax,%ebx
f0125aaf:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0125ab6:	10 00 00 
f0125ab9:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0125abe:	0f b6 c0             	movzbl %al,%eax
f0125ac1:	c1 e0 04             	shl    $0x4,%eax
f0125ac4:	89 c2                	mov    %eax,%edx
f0125ac6:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0125acc:	01 d0                	add    %edx,%eax
f0125ace:	48                   	dec    %eax
f0125acf:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0125ad5:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0125adb:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ae0:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0125ae6:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0125aec:	29 d0                	sub    %edx,%eax
f0125aee:	01 d8                	add    %ebx,%eax
f0125af0:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0125af5:	39 c1                	cmp    %eax,%ecx
f0125af7:	74 17                	je     f0125b10 <test_kheap_virt_addr+0x8eb>
f0125af9:	83 ec 04             	sub    $0x4,%esp
f0125afc:	68 60 b2 13 f0       	push   $0xf013b260
f0125b01:	68 1d 09 00 00       	push   $0x91d
f0125b06:	68 7a b1 13 f0       	push   $0xf013b17a
f0125b0b:	e8 f5 a6 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125b10:	e8 91 e2 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0125b15:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125b18:	74 17                	je     f0125b31 <test_kheap_virt_addr+0x90c>
f0125b1a:	83 ec 04             	sub    $0x4,%esp
f0125b1d:	68 94 b1 13 f0       	push   $0xf013b194
f0125b22:	68 1e 09 00 00       	push   $0x91e
f0125b27:	68 7a b1 13 f0       	push   $0xf013b17a
f0125b2c:	e8 d4 a6 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125b31:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125b34:	e8 aa 72 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0125b39:	29 c3                	sub    %eax,%ebx
f0125b3b:	89 d8                	mov    %ebx,%eax
f0125b3d:	3d 00 06 00 00       	cmp    $0x600,%eax
f0125b42:	74 17                	je     f0125b5b <test_kheap_virt_addr+0x936>
f0125b44:	83 ec 04             	sub    $0x4,%esp
f0125b47:	68 fc b1 13 f0       	push   $0xf013b1fc
f0125b4c:	68 1f 09 00 00       	push   $0x91f
f0125b51:	68 7a b1 13 f0       	push   $0xf013b17a
f0125b56:	e8 aa a6 fd ff       	call   f0100205 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0125b5b:	e8 83 72 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0125b60:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125b63:	e8 3e e2 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0125b68:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0125b6b:	83 ec 0c             	sub    $0xc,%esp
f0125b6e:	68 00 38 00 00       	push   $0x3800
f0125b73:	e8 e9 1e fe ff       	call   f0107a61 <kmalloc>
f0125b78:	83 c4 10             	add    $0x10,%esp
f0125b7b:	89 85 44 fd ff ff    	mov    %eax,-0x2bc(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125b81:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f0125b87:	89 c1                	mov    %eax,%ecx
f0125b89:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0125b90:	10 00 00 
f0125b93:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0125b99:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125b9e:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0125ba4:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0125baa:	ba 00 00 00 00       	mov    $0x0,%edx
f0125baf:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0125bb5:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0125bbb:	29 d0                	sub    %edx,%eax
f0125bbd:	89 c3                	mov    %eax,%ebx
f0125bbf:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f0125bc6:	10 00 00 
f0125bc9:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0125bce:	0f b6 d0             	movzbl %al,%edx
f0125bd1:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0125bd7:	01 d0                	add    %edx,%eax
f0125bd9:	48                   	dec    %eax
f0125bda:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f0125be0:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0125be6:	ba 00 00 00 00       	mov    $0x0,%edx
f0125beb:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f0125bf1:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0125bf7:	29 d0                	sub    %edx,%eax
f0125bf9:	01 c3                	add    %eax,%ebx
f0125bfb:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0125c02:	10 00 00 
f0125c05:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0125c0a:	0f b6 c0             	movzbl %al,%eax
f0125c0d:	c1 e0 04             	shl    $0x4,%eax
f0125c10:	89 c2                	mov    %eax,%edx
f0125c12:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0125c18:	01 d0                	add    %edx,%eax
f0125c1a:	48                   	dec    %eax
f0125c1b:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0125c21:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0125c27:	ba 00 00 00 00       	mov    $0x0,%edx
f0125c2c:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0125c32:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0125c38:	29 d0                	sub    %edx,%eax
f0125c3a:	01 d8                	add    %ebx,%eax
f0125c3c:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0125c41:	39 c1                	cmp    %eax,%ecx
f0125c43:	74 17                	je     f0125c5c <test_kheap_virt_addr+0xa37>
f0125c45:	83 ec 04             	sub    $0x4,%esp
f0125c48:	68 60 b2 13 f0       	push   $0xf013b260
f0125c4d:	68 25 09 00 00       	push   $0x925
f0125c52:	68 7a b1 13 f0       	push   $0xf013b17a
f0125c57:	e8 a9 a5 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125c5c:	e8 45 e1 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0125c61:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125c64:	74 17                	je     f0125c7d <test_kheap_virt_addr+0xa58>
f0125c66:	83 ec 04             	sub    $0x4,%esp
f0125c69:	68 94 b1 13 f0       	push   $0xf013b194
f0125c6e:	68 26 09 00 00       	push   $0x926
f0125c73:	68 7a b1 13 f0       	push   $0xf013b17a
f0125c78:	e8 88 a5 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125c7d:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125c80:	e8 5e 71 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0125c85:	29 c3                	sub    %eax,%ebx
f0125c87:	89 d8                	mov    %ebx,%eax
f0125c89:	83 f8 04             	cmp    $0x4,%eax
f0125c8c:	74 17                	je     f0125ca5 <test_kheap_virt_addr+0xa80>
f0125c8e:	83 ec 04             	sub    $0x4,%esp
f0125c91:	68 fc b1 13 f0       	push   $0xf013b1fc
f0125c96:	68 27 09 00 00       	push   $0x927
f0125c9b:	68 7a b1 13 f0       	push   $0xf013b17a
f0125ca0:	e8 60 a5 fd ff       	call   f0100205 <_panic>
	}

	uint32 allPAs[(13*Mega + 32*kilo+ (INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE] ;
f0125ca5:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0125cac:	10 00 00 
f0125caf:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0125cb5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125cba:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0125cc0:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0125cc6:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ccb:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0125cd1:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0125cd7:	29 d0                	sub    %edx,%eax
f0125cd9:	89 c1                	mov    %eax,%ecx
f0125cdb:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0125ce2:	10 00 00 
f0125ce5:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0125cea:	0f b6 d0             	movzbl %al,%edx
f0125ced:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0125cf3:	01 d0                	add    %edx,%eax
f0125cf5:	48                   	dec    %eax
f0125cf6:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0125cfc:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0125d02:	ba 00 00 00 00       	mov    $0x0,%edx
f0125d07:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0125d0d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0125d13:	29 d0                	sub    %edx,%eax
f0125d15:	01 c1                	add    %eax,%ecx
f0125d17:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0125d1e:	10 00 00 
f0125d21:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0125d26:	0f b6 c0             	movzbl %al,%eax
f0125d29:	c1 e0 04             	shl    $0x4,%eax
f0125d2c:	89 c2                	mov    %eax,%edx
f0125d2e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0125d34:	01 d0                	add    %edx,%eax
f0125d36:	48                   	dec    %eax
f0125d37:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0125d3d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0125d43:	ba 00 00 00 00       	mov    $0x0,%edx
f0125d48:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0125d4e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0125d54:	29 d0                	sub    %edx,%eax
f0125d56:	01 c1                	add    %eax,%ecx
f0125d58:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0125d5f:	10 00 00 
f0125d62:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0125d68:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125d6d:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0125d73:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0125d79:	ba 00 00 00 00       	mov    $0x0,%edx
f0125d7e:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0125d84:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0125d8a:	29 d0                	sub    %edx,%eax
f0125d8c:	29 c1                	sub    %eax,%ecx
f0125d8e:	89 c8                	mov    %ecx,%eax
f0125d90:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0125d95:	c1 e8 0c             	shr    $0xc,%eax
f0125d98:	89 c2                	mov    %eax,%edx
f0125d9a:	4a                   	dec    %edx
f0125d9b:	89 95 d4 fe ff ff    	mov    %edx,-0x12c(%ebp)
f0125da1:	c1 e0 02             	shl    $0x2,%eax
f0125da4:	8d 50 03             	lea    0x3(%eax),%edx
f0125da7:	b8 10 00 00 00       	mov    $0x10,%eax
f0125dac:	48                   	dec    %eax
f0125dad:	01 d0                	add    %edx,%eax
f0125daf:	bf 10 00 00 00       	mov    $0x10,%edi
f0125db4:	ba 00 00 00 00       	mov    $0x0,%edx
f0125db9:	f7 f7                	div    %edi
f0125dbb:	6b c0 10             	imul   $0x10,%eax,%eax
f0125dbe:	29 c4                	sub    %eax,%esp
f0125dc0:	89 e0                	mov    %esp,%eax
f0125dc2:	83 c0 03             	add    $0x3,%eax
f0125dc5:	c1 e8 02             	shr    $0x2,%eax
f0125dc8:	c1 e0 02             	shl    $0x2,%eax
f0125dcb:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
	int numOfFrames = (13*Mega + 32*kilo+(INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE ;
f0125dd1:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0125dd8:	10 00 00 
f0125ddb:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0125de1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125de6:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0125dec:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0125df2:	ba 00 00 00 00       	mov    $0x0,%edx
f0125df7:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0125dfd:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0125e03:	29 d0                	sub    %edx,%eax
f0125e05:	89 c1                	mov    %eax,%ecx
f0125e07:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0125e0e:	10 00 00 
f0125e11:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0125e16:	0f b6 d0             	movzbl %al,%edx
f0125e19:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0125e1f:	01 d0                	add    %edx,%eax
f0125e21:	48                   	dec    %eax
f0125e22:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0125e28:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0125e2e:	ba 00 00 00 00       	mov    $0x0,%edx
f0125e33:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0125e39:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0125e3f:	29 d0                	sub    %edx,%eax
f0125e41:	01 c1                	add    %eax,%ecx
f0125e43:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0125e4a:	10 00 00 
f0125e4d:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0125e52:	0f b6 c0             	movzbl %al,%eax
f0125e55:	c1 e0 04             	shl    $0x4,%eax
f0125e58:	89 c2                	mov    %eax,%edx
f0125e5a:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0125e60:	01 d0                	add    %edx,%eax
f0125e62:	48                   	dec    %eax
f0125e63:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0125e69:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0125e6f:	ba 00 00 00 00       	mov    $0x0,%edx
f0125e74:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0125e7a:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0125e80:	29 d0                	sub    %edx,%eax
f0125e82:	01 c1                	add    %eax,%ecx
f0125e84:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0125e8b:	10 00 00 
f0125e8e:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0125e94:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125e99:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0125e9f:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0125ea5:	ba 00 00 00 00       	mov    $0x0,%edx
f0125eaa:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0125eb0:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0125eb6:	29 d0                	sub    %edx,%eax
f0125eb8:	29 c1                	sub    %eax,%ecx
f0125eba:	89 c8                	mov    %ecx,%eax
f0125ebc:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0125ec1:	c1 e8 0c             	shr    $0xc,%eax
f0125ec4:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)

	//test kheap_virtual_address after kmalloc only [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0125eca:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0125ed1:	10 00 00 
f0125ed4:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0125eda:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125edf:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0125ee5:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0125eeb:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ef0:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0125ef6:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0125efc:	29 d0                	sub    %edx,%eax
f0125efe:	89 c1                	mov    %eax,%ecx
f0125f00:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0125f07:	10 00 00 
f0125f0a:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0125f0f:	0f b6 d0             	movzbl %al,%edx
f0125f12:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0125f18:	01 d0                	add    %edx,%eax
f0125f1a:	48                   	dec    %eax
f0125f1b:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0125f21:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0125f27:	ba 00 00 00 00       	mov    $0x0,%edx
f0125f2c:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0125f32:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0125f38:	29 d0                	sub    %edx,%eax
f0125f3a:	01 c1                	add    %eax,%ecx
f0125f3c:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0125f43:	10 00 00 
f0125f46:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0125f4b:	0f b6 c0             	movzbl %al,%eax
f0125f4e:	c1 e0 04             	shl    $0x4,%eax
f0125f51:	89 c2                	mov    %eax,%edx
f0125f53:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0125f59:	01 d0                	add    %edx,%eax
f0125f5b:	48                   	dec    %eax
f0125f5c:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0125f62:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0125f68:	ba 00 00 00 00       	mov    $0x0,%edx
f0125f6d:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0125f73:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0125f79:	29 d0                	sub    %edx,%eax
f0125f7b:	01 c8                	add    %ecx,%eax
f0125f7d:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0125f82:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int i = 0;
f0125f88:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0125f8f:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f0125f96:	10 00 00 
f0125f99:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0125f9f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125fa4:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f0125faa:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0125fb0:	ba 00 00 00 00       	mov    $0x0,%edx
f0125fb5:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f0125fbb:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0125fc1:	29 d0                	sub    %edx,%eax
f0125fc3:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0125fc8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0125fcb:	e9 21 01 00 00       	jmp    f01260f1 <test_kheap_virt_addr+0xecc>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0125fd0:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0125fd5:	83 ec 04             	sub    $0x4,%esp
f0125fd8:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0125fde:	52                   	push   %edx
f0125fdf:	ff 75 e4             	pushl  -0x1c(%ebp)
f0125fe2:	50                   	push   %eax
f0125fe3:	e8 a7 0a fe ff       	call   f0106a8f <get_page_table>
f0125fe8:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0125feb:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0125ff1:	85 c0                	test   %eax,%eax
f0125ff3:	75 17                	jne    f012600c <test_kheap_virt_addr+0xde7>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0125ff5:	83 ec 04             	sub    $0x4,%esp
f0125ff8:	68 1c bb 13 f0       	push   $0xf013bb1c
f0125ffd:	68 38 09 00 00       	push   $0x938
f0126002:	68 7a b1 13 f0       	push   $0xf013b17a
f0126007:	e8 f9 a1 fd ff       	call   f0100205 <_panic>

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f012600c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012600f:	c1 e8 0c             	shr    $0xc,%eax
f0126012:	25 ff 03 00 00       	and    $0x3ff,%eax
f0126017:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012601a:	e9 ba 00 00 00       	jmp    f01260d9 <test_kheap_virt_addr+0xeb4>
			{
				allPAs[i] = (ptr_table[j] & 0xFFFFF000);
f012601f:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0126025:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0126028:	c1 e2 02             	shl    $0x2,%edx
f012602b:	01 d0                	add    %edx,%eax
f012602d:	8b 00                	mov    (%eax),%eax
f012602f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0126034:	89 c1                	mov    %eax,%ecx
f0126036:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012603c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012603f:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0126042:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0126048:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012604b:	8b 04 90             	mov    (%eax,%edx,4),%eax
f012604e:	83 ec 0c             	sub    $0xc,%esp
f0126051:	50                   	push   %eax
f0126052:	e8 55 1c fe ff       	call   f0107cac <kheap_virtual_address>
f0126057:	83 c4 10             	add    $0x10,%esp
f012605a:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
				//cprintf("va to check = %x\n", va);
				if (retrievedVA != (va))
f0126060:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0126066:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0126069:	74 61                	je     f01260cc <test_kheap_virt_addr+0xea7>
				{
					cprintf("\nretrievedVA = %x, Actual VA = %x, table entry = %x, khep_pa = %x\n",retrievedVA, va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
f012606b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0126071:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0126074:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0126077:	8b 95 24 fd ff ff    	mov    -0x2dc(%ebp),%edx
f012607d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f0126080:	c1 e1 02             	shl    $0x2,%ecx
f0126083:	01 ca                	add    %ecx,%edx
f0126085:	8b 12                	mov    (%edx),%edx
f0126087:	89 d1                	mov    %edx,%ecx
f0126089:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
f012608f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0126092:	c1 e2 0c             	shl    $0xc,%edx
f0126095:	89 d3                	mov    %edx,%ebx
f0126097:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f012609a:	01 da                	add    %ebx,%edx
f012609c:	83 ec 0c             	sub    $0xc,%esp
f012609f:	50                   	push   %eax
f01260a0:	51                   	push   %ecx
f01260a1:	52                   	push   %edx
f01260a2:	ff b5 84 fe ff ff    	pushl  -0x17c(%ebp)
f01260a8:	68 10 bc 13 f0       	push   $0xf013bc10
f01260ad:	e8 5c ac fd ff       	call   f0100d0e <cprintf>
f01260b2:	83 c4 20             	add    $0x20,%esp
					panic("Wrong kheap_virtual_address");
f01260b5:	83 ec 04             	sub    $0x4,%esp
f01260b8:	68 53 bc 13 f0       	push   $0xf013bc53
f01260bd:	68 42 09 00 00       	push   $0x942
f01260c2:	68 7a b1 13 f0       	push   $0xf013b17a
f01260c7:	e8 39 a1 fd ff       	call   f0100205 <_panic>
				}
				va+=PAGE_SIZE;
f01260cc:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f01260d3:	ff 45 dc             	incl   -0x24(%ebp)
f01260d6:	ff 45 e0             	incl   -0x20(%ebp)
f01260d9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01260dc:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f01260e2:	7d 0d                	jge    f01260f1 <test_kheap_virt_addr+0xecc>
f01260e4:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f01260eb:	0f 8e 2e ff ff ff    	jle    f012601f <test_kheap_virt_addr+0xdfa>
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01260f1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01260f4:	3b 85 90 fe ff ff    	cmp    -0x170(%ebp),%eax
f01260fa:	0f 82 d0 fe ff ff    	jb     f0125fd0 <test_kheap_virt_addr+0xdab>
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_virtual_address: current evaluation = 40%");
f0126100:	83 ec 0c             	sub    $0xc,%esp
f0126103:	68 70 bc 13 f0       	push   $0xf013bc70
f0126108:	e8 01 ac fd ff       	call   f0100d0e <cprintf>
f012610d:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0126110:	e8 ce 6c fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0126115:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012611b:	e8 86 dc fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0126120:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[0]);
f0126126:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f012612c:	83 ec 0c             	sub    $0xc,%esp
f012612f:	50                   	push   %eax
f0126130:	e8 42 1a fe ff       	call   f0107b77 <kfree>
f0126135:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126138:	e8 69 dc fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012613d:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0126143:	74 17                	je     f012615c <test_kheap_virt_addr+0xf37>
f0126145:	83 ec 04             	sub    $0x4,%esp
f0126148:	68 94 b1 13 f0       	push   $0xf013b194
f012614d:	68 50 09 00 00       	push   $0x950
f0126152:	68 7a b1 13 f0       	push   $0xf013b17a
f0126157:	e8 a9 a0 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012615c:	e8 82 6c fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0126161:	89 c2                	mov    %eax,%edx
f0126163:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0126169:	29 c2                	sub    %eax,%edx
f012616b:	89 d0                	mov    %edx,%eax
f012616d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126172:	74 17                	je     f012618b <test_kheap_virt_addr+0xf66>
f0126174:	83 ec 04             	sub    $0x4,%esp
f0126177:	68 04 b9 13 f0       	push   $0xf013b904
f012617c:	68 51 09 00 00       	push   $0x951
f0126181:	68 7a b1 13 f0       	push   $0xf013b17a
f0126186:	e8 7a a0 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012618b:	e8 53 6c fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0126190:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126196:	e8 0b dc fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012619b:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[1]);
f01261a1:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f01261a7:	83 ec 0c             	sub    $0xc,%esp
f01261aa:	50                   	push   %eax
f01261ab:	e8 c7 19 fe ff       	call   f0107b77 <kfree>
f01261b0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01261b3:	e8 ee db fd ff       	call   f0103da6 <pf_calculate_free_frames>
f01261b8:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f01261be:	74 17                	je     f01261d7 <test_kheap_virt_addr+0xfb2>
f01261c0:	83 ec 04             	sub    $0x4,%esp
f01261c3:	68 94 b1 13 f0       	push   $0xf013b194
f01261c8:	68 57 09 00 00       	push   $0x957
f01261cd:	68 7a b1 13 f0       	push   $0xf013b17a
f01261d2:	e8 2e a0 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01261d7:	e8 07 6c fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01261dc:	89 c2                	mov    %eax,%edx
f01261de:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01261e4:	29 c2                	sub    %eax,%edx
f01261e6:	89 d0                	mov    %edx,%eax
f01261e8:	3d 00 02 00 00       	cmp    $0x200,%eax
f01261ed:	74 17                	je     f0126206 <test_kheap_virt_addr+0xfe1>
f01261ef:	83 ec 04             	sub    $0x4,%esp
f01261f2:	68 04 b9 13 f0       	push   $0xf013b904
f01261f7:	68 58 09 00 00       	push   $0x958
f01261fc:	68 7a b1 13 f0       	push   $0xf013b17a
f0126201:	e8 ff 9f fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0126206:	e8 d8 6b fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012620b:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126211:	e8 90 db fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0126216:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[6]);
f012621c:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0126222:	83 ec 0c             	sub    $0xc,%esp
f0126225:	50                   	push   %eax
f0126226:	e8 4c 19 fe ff       	call   f0107b77 <kfree>
f012622b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012622e:	e8 73 db fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0126233:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0126239:	74 17                	je     f0126252 <test_kheap_virt_addr+0x102d>
f012623b:	83 ec 04             	sub    $0x4,%esp
f012623e:	68 94 b1 13 f0       	push   $0xf013b194
f0126243:	68 5e 09 00 00       	push   $0x95e
f0126248:	68 7a b1 13 f0       	push   $0xf013b17a
f012624d:	e8 b3 9f fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0126252:	e8 8c 6b fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0126257:	89 c2                	mov    %eax,%edx
f0126259:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012625f:	29 c2                	sub    %eax,%edx
f0126261:	89 d0                	mov    %edx,%eax
f0126263:	3d 00 06 00 00       	cmp    $0x600,%eax
f0126268:	74 17                	je     f0126281 <test_kheap_virt_addr+0x105c>
f012626a:	83 ec 04             	sub    $0x4,%esp
f012626d:	68 04 b9 13 f0       	push   $0xf013b904
f0126272:	68 5f 09 00 00       	push   $0x95f
f0126277:	68 7a b1 13 f0       	push   $0xf013b17a
f012627c:	e8 84 9f fd ff       	call   f0100205 <_panic>


	//test kheap_virtual_address after kmalloc and kfree [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0126281:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0126288:	10 00 00 
f012628b:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0126291:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126296:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f012629c:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01262a2:	ba 00 00 00 00       	mov    $0x0,%edx
f01262a7:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f01262ad:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01262b3:	29 d0                	sub    %edx,%eax
f01262b5:	89 c1                	mov    %eax,%ecx
f01262b7:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f01262be:	10 00 00 
f01262c1:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01262c6:	0f b6 d0             	movzbl %al,%edx
f01262c9:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01262cf:	01 d0                	add    %edx,%eax
f01262d1:	48                   	dec    %eax
f01262d2:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f01262d8:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01262de:	ba 00 00 00 00       	mov    $0x0,%edx
f01262e3:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f01262e9:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01262ef:	29 d0                	sub    %edx,%eax
f01262f1:	01 c1                	add    %eax,%ecx
f01262f3:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f01262fa:	10 00 00 
f01262fd:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0126302:	0f b6 c0             	movzbl %al,%eax
f0126305:	c1 e0 04             	shl    $0x4,%eax
f0126308:	89 c2                	mov    %eax,%edx
f012630a:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0126310:	01 d0                	add    %edx,%eax
f0126312:	48                   	dec    %eax
f0126313:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f0126319:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012631f:	ba 00 00 00 00       	mov    $0x0,%edx
f0126324:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f012632a:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0126330:	29 d0                	sub    %edx,%eax
f0126332:	01 c8                	add    %ecx,%eax
f0126334:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0126339:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		int i = 0;
f012633f:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
f0126346:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f012634d:	10 00 00 
f0126350:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0126356:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012635b:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0126361:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0126367:	ba 00 00 00 00       	mov    $0x0,%edx
f012636c:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0126372:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0126378:	29 d0                	sub    %edx,%eax
f012637a:	89 c1                	mov    %eax,%ecx
f012637c:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f0126383:	10 00 00 
f0126386:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012638b:	0f b6 d0             	movzbl %al,%edx
f012638e:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0126394:	01 d0                	add    %edx,%eax
f0126396:	48                   	dec    %eax
f0126397:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f012639d:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01263a3:	ba 00 00 00 00       	mov    $0x0,%edx
f01263a8:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f01263ae:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01263b4:	29 d0                	sub    %edx,%eax
f01263b6:	01 c1                	add    %eax,%ecx
f01263b8:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f01263bf:	10 00 00 
f01263c2:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01263c7:	0f b6 c0             	movzbl %al,%eax
f01263ca:	c1 e0 04             	shl    $0x4,%eax
f01263cd:	89 c2                	mov    %eax,%edx
f01263cf:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01263d5:	01 d0                	add    %edx,%eax
f01263d7:	48                   	dec    %eax
f01263d8:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f01263de:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01263e4:	ba 00 00 00 00       	mov    $0x0,%edx
f01263e9:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f01263ef:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01263f5:	29 d0                	sub    %edx,%eax
f01263f7:	01 c1                	add    %eax,%ecx
f01263f9:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f0126400:	10 00 00 
f0126403:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0126409:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012640e:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f0126414:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012641a:	ba 00 00 00 00       	mov    $0x0,%edx
f012641f:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f0126425:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012642b:	29 d0                	sub    %edx,%eax
f012642d:	29 c1                	sub    %eax,%ecx
f012642f:	89 c8                	mov    %ecx,%eax
f0126431:	05 00 40 00 00       	add    $0x4000,%eax
f0126436:	c1 e8 0c             	shr    $0xc,%eax
f0126439:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f012643f:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0126445:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0126448:	eb 41                	jmp    f012648b <test_kheap_virt_addr+0x1266>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f012644a:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0126450:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0126453:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0126456:	83 ec 0c             	sub    $0xc,%esp
f0126459:	50                   	push   %eax
f012645a:	e8 4d 18 fe ff       	call   f0107cac <kheap_virtual_address>
f012645f:	83 c4 10             	add    $0x10,%esp
f0126462:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if (retrievedVA != 0)
f0126468:	83 bd 38 fe ff ff 00 	cmpl   $0x0,-0x1c8(%ebp)
f012646f:	74 17                	je     f0126488 <test_kheap_virt_addr+0x1263>
			{
				panic("Wrong kheap_virtual_address");
f0126471:	83 ec 04             	sub    $0x4,%esp
f0126474:	68 53 bc 13 f0       	push   $0xf013bc53
f0126479:	68 70 09 00 00       	push   $0x970
f012647e:	68 7a b1 13 f0       	push   $0xf013b17a
f0126483:	e8 7d 9d fd ff       	call   f0100205 <_panic>
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0126488:	ff 45 d8             	incl   -0x28(%ebp)
f012648b:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0126491:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f0126497:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012649a:	39 c2                	cmp    %eax,%edx
f012649c:	77 ac                	ja     f012644a <test_kheap_virt_addr+0x1225>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f012649e:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01264a4:	05 00 04 00 00       	add    $0x400,%eax
f01264a9:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01264ac:	e9 83 00 00 00       	jmp    f0126534 <test_kheap_virt_addr+0x130f>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01264b1:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01264b7:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01264ba:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01264bd:	83 ec 0c             	sub    $0xc,%esp
f01264c0:	50                   	push   %eax
f01264c1:	e8 e6 17 fe ff       	call   f0107cac <kheap_virtual_address>
f01264c6:	83 c4 10             	add    $0x10,%esp
f01264c9:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f01264cf:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f01264d6:	10 00 00 
f01264d9:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f01264df:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01264e4:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f01264ea:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01264f0:	ba 00 00 00 00       	mov    $0x0,%edx
f01264f5:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f01264fb:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0126501:	29 d0                	sub    %edx,%eax
f0126503:	89 c2                	mov    %eax,%edx
f0126505:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0126508:	c1 e0 0c             	shl    $0xc,%eax
f012650b:	01 d0                	add    %edx,%eax
f012650d:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0126512:	3b 85 34 fe ff ff    	cmp    -0x1cc(%ebp),%eax
f0126518:	74 17                	je     f0126531 <test_kheap_virt_addr+0x130c>
			{
				panic("Wrong kheap_virtual_address");
f012651a:	83 ec 04             	sub    $0x4,%esp
f012651d:	68 53 bc 13 f0       	push   $0xf013bc53
f0126522:	68 7a 09 00 00       	push   $0x97a
f0126527:	68 7a b1 13 f0       	push   $0xf013b17a
f012652c:	e8 d4 9c fd ff       	call   f0100205 <_panic>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0126531:	ff 45 d8             	incl   -0x28(%ebp)
f0126534:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012653a:	8d 90 04 07 00 00    	lea    0x704(%eax),%edx
f0126540:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0126543:	39 c2                	cmp    %eax,%edx
f0126545:	0f 87 66 ff ff ff    	ja     f01264b1 <test_kheap_virt_addr+0x128c>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f012654b:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0126551:	05 04 07 00 00       	add    $0x704,%eax
f0126556:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0126559:	eb 41                	jmp    f012659c <test_kheap_virt_addr+0x1377>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f012655b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0126561:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0126564:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0126567:	83 ec 0c             	sub    $0xc,%esp
f012656a:	50                   	push   %eax
f012656b:	e8 3c 17 fe ff       	call   f0107cac <kheap_virtual_address>
f0126570:	83 c4 10             	add    $0x10,%esp
f0126573:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
			if (retrievedVA != 0)
f0126579:	83 bd 28 fe ff ff 00 	cmpl   $0x0,-0x1d8(%ebp)
f0126580:	74 17                	je     f0126599 <test_kheap_virt_addr+0x1374>
			{
				panic("Wrong kheap_virtual_address");
f0126582:	83 ec 04             	sub    $0x4,%esp
f0126585:	68 53 bc 13 f0       	push   $0xf013bc53
f012658a:	68 83 09 00 00       	push   $0x983
f012658f:	68 7a b1 13 f0       	push   $0xf013b17a
f0126594:	e8 6c 9c fd ff       	call   f0100205 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0126599:	ff 45 d8             	incl   -0x28(%ebp)
f012659c:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01265a2:	8d 90 04 0d 00 00    	lea    0xd04(%eax),%edx
f01265a8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01265ab:	39 c2                	cmp    %eax,%edx
f01265ad:	77 ac                	ja     f012655b <test_kheap_virt_addr+0x1336>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f01265af:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01265b5:	05 04 0d 00 00       	add    $0xd04,%eax
f01265ba:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01265bd:	e9 83 00 00 00       	jmp    f0126645 <test_kheap_virt_addr+0x1420>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01265c2:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01265c8:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01265cb:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01265ce:	83 ec 0c             	sub    $0xc,%esp
f01265d1:	50                   	push   %eax
f01265d2:	e8 d5 16 fe ff       	call   f0107cac <kheap_virtual_address>
f01265d7:	83 c4 10             	add    $0x10,%esp
f01265da:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f01265e0:	c7 85 20 fe ff ff 00 	movl   $0x1000,-0x1e0(%ebp)
f01265e7:	10 00 00 
f01265ea:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01265f0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01265f5:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
f01265fb:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0126601:	ba 00 00 00 00       	mov    $0x0,%edx
f0126606:	f7 b5 20 fe ff ff    	divl   -0x1e0(%ebp)
f012660c:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0126612:	29 d0                	sub    %edx,%eax
f0126614:	89 c2                	mov    %eax,%edx
f0126616:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0126619:	c1 e0 0c             	shl    $0xc,%eax
f012661c:	01 d0                	add    %edx,%eax
f012661e:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0126623:	3b 85 24 fe ff ff    	cmp    -0x1dc(%ebp),%eax
f0126629:	74 17                	je     f0126642 <test_kheap_virt_addr+0x141d>
			{
				panic("Wrong kheap_virtual_address");
f012662b:	83 ec 04             	sub    $0x4,%esp
f012662e:	68 53 bc 13 f0       	push   $0xf013bc53
f0126633:	68 8c 09 00 00       	push   $0x98c
f0126638:	68 7a b1 13 f0       	push   $0xf013b17a
f012663d:	e8 c3 9b fd ff       	call   f0100205 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0126642:	ff 45 d8             	incl   -0x28(%ebp)
f0126645:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012664b:	8d 90 08 0d 00 00    	lea    0xd08(%eax),%edx
f0126651:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0126654:	39 c2                	cmp    %eax,%edx
f0126656:	0f 87 66 ff ff ff    	ja     f01265c2 <test_kheap_virt_addr+0x139d>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b80%");
f012665c:	83 ec 0c             	sub    $0xc,%esp
f012665f:	68 05 b3 13 f0       	push   $0xf013b305
f0126664:	e8 a5 a6 fd ff       	call   f0100d0e <cprintf>
f0126669:	83 c4 10             	add    $0x10,%esp

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f012666c:	c7 45 d4 00 00 10 00 	movl   $0x100000,-0x2c(%ebp)
f0126673:	eb 54                	jmp    f01266c9 <test_kheap_virt_addr+0x14a4>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f0126675:	83 ec 0c             	sub    $0xc,%esp
f0126678:	ff 75 d4             	pushl  -0x2c(%ebp)
f012667b:	e8 2c 16 fe ff       	call   f0107cac <kheap_virtual_address>
f0126680:	83 c4 10             	add    $0x10,%esp
f0126683:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
			if (retrievedVA != 0)
f0126689:	83 bd 18 fe ff ff 00 	cmpl   $0x0,-0x1e8(%ebp)
f0126690:	74 30                	je     f01266c2 <test_kheap_virt_addr+0x149d>
			{
				cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f0126692:	83 ec 04             	sub    $0x4,%esp
f0126695:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f012669b:	ff 75 d4             	pushl  -0x2c(%ebp)
f012669e:	68 a1 bc 13 f0       	push   $0xf013bca1
f01266a3:	e8 66 a6 fd ff       	call   f0100d0e <cprintf>
f01266a8:	83 c4 10             	add    $0x10,%esp
				panic("Wrong kheap_virtual_address");
f01266ab:	83 ec 04             	sub    $0x4,%esp
f01266ae:	68 53 bc 13 f0       	push   $0xf013bc53
f01266b3:	68 9c 09 00 00       	push   $0x99c
f01266b8:	68 7a b1 13 f0       	push   $0xf013b17a
f01266bd:	e8 43 9b fd ff       	call   f0100205 <_panic>
	cprintf("\b\b\b80%");

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f01266c2:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f01266c9:	b8 bc 28 86 00       	mov    $0x8628bc,%eax
f01266ce:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
f01266d1:	72 a2                	jb     f0126675 <test_kheap_virt_addr+0x1450>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f01266d3:	83 ec 0c             	sub    $0xc,%esp
f01266d6:	68 5e b3 13 f0       	push   $0xf013b35e
f01266db:	e8 2e a6 fd ff       	call   f0100d0e <cprintf>
f01266e0:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_virtual_address completed successfully.\n");
f01266e3:	83 ec 0c             	sub    $0xc,%esp
f01266e6:	68 c0 bc 13 f0       	push   $0xf013bcc0
f01266eb:	e8 1e a6 fd ff       	call   f0100d0e <cprintf>
f01266f0:	83 c4 10             	add    $0x10,%esp

	return 1;
f01266f3:	b8 01 00 00 00       	mov    $0x1,%eax
f01266f8:	89 f4                	mov    %esi,%esp

}
f01266fa:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01266fd:	5b                   	pop    %ebx
f01266fe:	5e                   	pop    %esi
f01266ff:	5f                   	pop    %edi
f0126700:	5d                   	pop    %ebp
f0126701:	c3                   	ret    

f0126702 <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f0126702:	55                   	push   %ebp
f0126703:	89 e5                	mov    %esp,%ebp
f0126705:	57                   	push   %edi
f0126706:	56                   	push   %esi
f0126707:	53                   	push   %ebx
f0126708:	81 ec ac 00 00 00    	sub    $0xac,%esp
	if (firstCall)
f012670e:	a0 23 2d 19 f0       	mov    0xf0192d23,%al
f0126713:	84 c0                	test   %al,%al
f0126715:	74 56                	je     f012676d <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f0126717:	c6 05 23 2d 19 f0 00 	movb   $0x0,0xf0192d23
		initFreeFrames = sys_calculate_free_frames() ;
f012671e:	e8 c0 66 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0126723:	a3 b8 28 86 f0       	mov    %eax,0xf08628b8
		initFreeDiskFrames = pf_calculate_free_frames() ;
f0126728:	e8 79 d6 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012672d:	a3 b4 28 86 f0       	mov    %eax,0xf08628b4
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f0126732:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f0126738:	bb 1d be 13 f0       	mov    $0xf013be1d,%ebx
f012673d:	ba 11 00 00 00       	mov    $0x11,%edx
f0126742:	89 c7                	mov    %eax,%edi
f0126744:	89 de                	mov    %ebx,%esi
f0126746:	89 d1                	mov    %edx,%ecx
f0126748:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f012674a:	8d 95 65 ff ff ff    	lea    -0x9b(%ebp),%edx
f0126750:	b9 53 00 00 00       	mov    $0x53,%ecx
f0126755:	b0 00                	mov    $0x0,%al
f0126757:	89 d7                	mov    %edx,%edi
f0126759:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f012675b:	83 ec 0c             	sub    $0xc,%esp
f012675e:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f0126764:	50                   	push   %eax
f0126765:	e8 06 a6 fd ff       	call   f0100d70 <execute_command>
f012676a:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f012676d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f0126774:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f012677b:	a1 f0 26 86 f0       	mov    0xf08626f0,%eax
f0126780:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0126783:	eb 2d                	jmp    f01267b2 <test_three_creation_functions+0xb0>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f0126785:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0126788:	05 5c 05 00 00       	add    $0x55c,%eax
f012678d:	83 ec 08             	sub    $0x8,%esp
f0126790:	68 07 bd 13 f0       	push   $0xf013bd07
f0126795:	50                   	push   %eax
f0126796:	e8 79 af 00 00       	call   f0131714 <strcmp>
f012679b:	83 c4 10             	add    $0x10,%esp
f012679e:	85 c0                	test   %eax,%eax
f01267a0:	75 08                	jne    f01267aa <test_three_creation_functions+0xa8>
			{
				e = ptr_env ;
f01267a2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01267a5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f01267a8:	eb 2f                	jmp    f01267d9 <test_three_creation_functions+0xd7>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01267aa:	a1 f8 26 86 f0       	mov    0xf08626f8,%eax
f01267af:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01267b2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01267b6:	74 08                	je     f01267c0 <test_three_creation_functions+0xbe>
f01267b8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01267bb:	8b 40 44             	mov    0x44(%eax),%eax
f01267be:	eb 05                	jmp    f01267c5 <test_three_creation_functions+0xc3>
f01267c0:	b8 00 00 00 00       	mov    $0x0,%eax
f01267c5:	a3 f8 26 86 f0       	mov    %eax,0xf08626f8
f01267ca:	a1 f8 26 86 f0       	mov    0xf08626f8,%eax
f01267cf:	85 c0                	test   %eax,%eax
f01267d1:	75 b2                	jne    f0126785 <test_three_creation_functions+0x83>
f01267d3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01267d7:	75 ac                	jne    f0126785 <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f01267d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01267dc:	8b 80 34 05 00 00    	mov    0x534(%eax),%eax
f01267e2:	85 c0                	test   %eax,%eax
f01267e4:	74 17                	je     f01267fd <test_three_creation_functions+0xfb>
			panic("Page fault is occur while not expected to. Review the three creation functions");
f01267e6:	83 ec 04             	sub    $0x4,%esp
f01267e9:	68 10 bd 13 f0       	push   $0xf013bd10
f01267ee:	68 c6 09 00 00       	push   $0x9c6
f01267f3:	68 7a b1 13 f0       	push   $0xf013b17a
f01267f8:	e8 08 9a fd ff       	call   f0100205 <_panic>

		int pagesInWS = env_page_ws_get_size(e);
f01267fd:	83 ec 0c             	sub    $0xc,%esp
f0126800:	ff 75 e4             	pushl  -0x1c(%ebp)
f0126803:	e8 cc 17 fe ff       	call   f0107fd4 <env_page_ws_get_size>
f0126808:	83 c4 10             	add    $0x10,%esp
f012680b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int curFreeFrames = sys_calculate_free_frames() ;
f012680e:	e8 d0 65 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0126813:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f0126816:	e8 8b d5 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012681b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012681e:	a1 b4 28 86 f0       	mov    0xf08628b4,%eax
f0126823:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f0126826:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0126829:	74 17                	je     f0126842 <test_three_creation_functions+0x140>
f012682b:	83 ec 04             	sub    $0x4,%esp
f012682e:	68 94 b1 13 f0       	push   $0xf013b194
f0126833:	68 cc 09 00 00       	push   $0x9cc
f0126838:	68 7a b1 13 f0       	push   $0xf013b17a
f012683d:	e8 c3 99 fd ff       	call   f0100205 <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126842:	a1 b8 28 86 f0       	mov    0xf08628b8,%eax
f0126847:	2b 45 d8             	sub    -0x28(%ebp),%eax
f012684a:	8b 55 dc             	mov    -0x24(%ebp),%edx
f012684d:	83 c2 15             	add    $0x15,%edx
f0126850:	39 d0                	cmp    %edx,%eax
f0126852:	74 17                	je     f012686b <test_three_creation_functions+0x169>
f0126854:	83 ec 04             	sub    $0x4,%esp
f0126857:	68 fc b1 13 f0       	push   $0xf013b1fc
f012685c:	68 ce 09 00 00       	push   $0x9ce
f0126861:	68 7a b1 13 f0       	push   $0xf013b17a
f0126866:	e8 9a 99 fd ff       	call   f0100205 <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f012686b:	83 ec 0c             	sub    $0xc,%esp
f012686e:	68 00 10 00 00       	push   $0x1000
f0126873:	e8 e9 11 fe ff       	call   f0107a61 <kmalloc>
f0126878:	83 c4 10             	add    $0x10,%esp
f012687b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f012687e:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0126885:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0126888:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012688d:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0126890:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126893:	ba 00 00 00 00       	mov    $0x0,%edx
f0126898:	f7 75 cc             	divl   -0x34(%ebp)
f012689b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012689e:	29 d0                	sub    %edx,%eax
f01268a0:	89 c1                	mov    %eax,%ecx
f01268a2:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f01268a9:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01268ae:	0f b6 d0             	movzbl %al,%edx
f01268b1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01268b4:	01 d0                	add    %edx,%eax
f01268b6:	48                   	dec    %eax
f01268b7:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01268ba:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01268bd:	ba 00 00 00 00       	mov    $0x0,%edx
f01268c2:	f7 75 c4             	divl   -0x3c(%ebp)
f01268c5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01268c8:	29 d0                	sub    %edx,%eax
f01268ca:	01 c1                	add    %eax,%ecx
f01268cc:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f01268d3:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01268d8:	0f b6 c0             	movzbl %al,%eax
f01268db:	c1 e0 04             	shl    $0x4,%eax
f01268de:	89 c2                	mov    %eax,%edx
f01268e0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01268e3:	01 d0                	add    %edx,%eax
f01268e5:	48                   	dec    %eax
f01268e6:	89 45 b8             	mov    %eax,-0x48(%ebp)
f01268e9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01268ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01268f1:	f7 75 bc             	divl   -0x44(%ebp)
f01268f4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01268f7:	29 d0                	sub    %edx,%eax
f01268f9:	01 c8                	add    %ecx,%eax
f01268fb:	8d 90 00 90 01 f6    	lea    -0x9fe7000(%eax),%edx
f0126901:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126904:	39 c2                	cmp    %eax,%edx
f0126906:	74 17                	je     f012691f <test_three_creation_functions+0x21d>
f0126908:	83 ec 04             	sub    $0x4,%esp
f012690b:	68 60 bd 13 f0       	push   $0xf013bd60
f0126910:	68 d2 09 00 00       	push   $0x9d2
f0126915:	68 7a b1 13 f0       	push   $0xf013b17a
f012691a:	e8 e6 98 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nCongratulations!! test the 3 creation functions is completed successfully.\n");
f012691f:	83 ec 0c             	sub    $0xc,%esp
f0126922:	68 d0 bd 13 f0       	push   $0xf013bdd0
f0126927:	e8 e2 a3 fd ff       	call   f0100d0e <cprintf>
f012692c:	83 c4 10             	add    $0x10,%esp

	return 1;
f012692f:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0126934:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0126937:	5b                   	pop    %ebx
f0126938:	5e                   	pop    %esi
f0126939:	5f                   	pop    %edi
f012693a:	5d                   	pop    %ebp
f012693b:	c3                   	ret    

f012693c <test_kfreeall>:


extern void kfreeall() ;

int test_kfreeall()
{
f012693c:	55                   	push   %ebp
f012693d:	89 e5                	mov    %esp,%ebp
f012693f:	57                   	push   %edi
f0126940:	53                   	push   %ebx
f0126941:	81 ec 40 02 00 00    	sub    $0x240,%esp
	char minByte = 1<<7;
f0126947:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f012694b:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f012694f:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0126955:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f012695b:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0126962:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0126969:	e8 75 64 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012696e:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0126971:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f0126977:	b9 14 00 00 00       	mov    $0x14,%ecx
f012697c:	b8 00 00 00 00       	mov    $0x0,%eax
f0126981:	89 d7                	mov    %edx,%edi
f0126983:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0126985:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f012698b:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126990:	b8 00 00 00 00       	mov    $0x0,%eax
f0126995:	89 d7                	mov    %edx,%edi
f0126997:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0126999:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f012699f:	b9 14 00 00 00       	mov    $0x14,%ecx
f01269a4:	b8 00 00 00 00       	mov    $0x0,%eax
f01269a9:	89 d7                	mov    %edx,%edi
f01269ab:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01269ad:	e8 31 64 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01269b2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01269b5:	e8 ec d3 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f01269ba:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01269bd:	83 ec 0c             	sub    $0xc,%esp
f01269c0:	68 00 fc 1f 00       	push   $0x1ffc00
f01269c5:	e8 97 10 fe ff       	call   f0107a61 <kmalloc>
f01269ca:	83 c4 10             	add    $0x10,%esp
f01269cd:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01269d3:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f01269d9:	89 c1                	mov    %eax,%ecx
f01269db:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f01269e2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01269e5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01269ea:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f01269ed:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01269f0:	ba 00 00 00 00       	mov    $0x0,%edx
f01269f5:	f7 75 c8             	divl   -0x38(%ebp)
f01269f8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01269fb:	29 d0                	sub    %edx,%eax
f01269fd:	89 c3                	mov    %eax,%ebx
f01269ff:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0126a06:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0126a0b:	0f b6 d0             	movzbl %al,%edx
f0126a0e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126a11:	01 d0                	add    %edx,%eax
f0126a13:	48                   	dec    %eax
f0126a14:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0126a17:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0126a1a:	ba 00 00 00 00       	mov    $0x0,%edx
f0126a1f:	f7 75 c0             	divl   -0x40(%ebp)
f0126a22:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0126a25:	29 d0                	sub    %edx,%eax
f0126a27:	01 c3                	add    %eax,%ebx
f0126a29:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0126a30:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0126a35:	0f b6 c0             	movzbl %al,%eax
f0126a38:	c1 e0 04             	shl    $0x4,%eax
f0126a3b:	89 c2                	mov    %eax,%edx
f0126a3d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126a40:	01 d0                	add    %edx,%eax
f0126a42:	48                   	dec    %eax
f0126a43:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0126a46:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0126a49:	ba 00 00 00 00       	mov    $0x0,%edx
f0126a4e:	f7 75 b8             	divl   -0x48(%ebp)
f0126a51:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0126a54:	29 d0                	sub    %edx,%eax
f0126a56:	01 d8                	add    %ebx,%eax
f0126a58:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0126a5d:	39 c1                	cmp    %eax,%ecx
f0126a5f:	74 17                	je     f0126a78 <test_kfreeall+0x13c>
f0126a61:	83 ec 04             	sub    $0x4,%esp
f0126a64:	68 60 b2 13 f0       	push   $0xf013b260
f0126a69:	68 f9 09 00 00       	push   $0x9f9
f0126a6e:	68 7a b1 13 f0       	push   $0xf013b17a
f0126a73:	e8 8d 97 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126a78:	e8 29 d3 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0126a7d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126a80:	74 17                	je     f0126a99 <test_kfreeall+0x15d>
f0126a82:	83 ec 04             	sub    $0x4,%esp
f0126a85:	68 94 b1 13 f0       	push   $0xf013b194
f0126a8a:	68 fa 09 00 00       	push   $0x9fa
f0126a8f:	68 7a b1 13 f0       	push   $0xf013b17a
f0126a94:	e8 6c 97 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126a99:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126a9c:	e8 42 63 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0126aa1:	29 c3                	sub    %eax,%ebx
f0126aa3:	89 d8                	mov    %ebx,%eax
f0126aa5:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126aaa:	74 17                	je     f0126ac3 <test_kfreeall+0x187>
f0126aac:	83 ec 04             	sub    $0x4,%esp
f0126aaf:	68 fc b1 13 f0       	push   $0xf013b1fc
f0126ab4:	68 fb 09 00 00       	push   $0x9fb
f0126ab9:	68 7a b1 13 f0       	push   $0xf013b17a
f0126abe:	e8 42 97 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0126ac3:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f0126aca:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126acd:	e8 11 63 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0126ad2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126ad5:	e8 cc d2 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0126ada:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0126add:	83 ec 0c             	sub    $0xc,%esp
f0126ae0:	68 00 fc 1f 00       	push   $0x1ffc00
f0126ae5:	e8 77 0f fe ff       	call   f0107a61 <kmalloc>
f0126aea:	83 c4 10             	add    $0x10,%esp
f0126aed:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126af3:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0126af9:	89 c1                	mov    %eax,%ecx
f0126afb:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0126b02:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0126b05:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126b0a:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0126b0d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0126b10:	ba 00 00 00 00       	mov    $0x0,%edx
f0126b15:	f7 75 b0             	divl   -0x50(%ebp)
f0126b18:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0126b1b:	29 d0                	sub    %edx,%eax
f0126b1d:	89 c3                	mov    %eax,%ebx
f0126b1f:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0126b26:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0126b2b:	0f b6 d0             	movzbl %al,%edx
f0126b2e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0126b31:	01 d0                	add    %edx,%eax
f0126b33:	48                   	dec    %eax
f0126b34:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0126b37:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126b3a:	ba 00 00 00 00       	mov    $0x0,%edx
f0126b3f:	f7 75 a8             	divl   -0x58(%ebp)
f0126b42:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126b45:	29 d0                	sub    %edx,%eax
f0126b47:	01 c3                	add    %eax,%ebx
f0126b49:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0126b50:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0126b55:	0f b6 c0             	movzbl %al,%eax
f0126b58:	c1 e0 04             	shl    $0x4,%eax
f0126b5b:	89 c2                	mov    %eax,%edx
f0126b5d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0126b60:	01 d0                	add    %edx,%eax
f0126b62:	48                   	dec    %eax
f0126b63:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0126b66:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0126b69:	ba 00 00 00 00       	mov    $0x0,%edx
f0126b6e:	f7 75 a0             	divl   -0x60(%ebp)
f0126b71:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0126b74:	29 d0                	sub    %edx,%eax
f0126b76:	01 d8                	add    %ebx,%eax
f0126b78:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0126b7d:	39 c1                	cmp    %eax,%ecx
f0126b7f:	74 17                	je     f0126b98 <test_kfreeall+0x25c>
f0126b81:	83 ec 04             	sub    $0x4,%esp
f0126b84:	68 60 b2 13 f0       	push   $0xf013b260
f0126b89:	68 02 0a 00 00       	push   $0xa02
f0126b8e:	68 7a b1 13 f0       	push   $0xf013b17a
f0126b93:	e8 6d 96 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126b98:	e8 09 d2 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0126b9d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126ba0:	74 17                	je     f0126bb9 <test_kfreeall+0x27d>
f0126ba2:	83 ec 04             	sub    $0x4,%esp
f0126ba5:	68 94 b1 13 f0       	push   $0xf013b194
f0126baa:	68 03 0a 00 00       	push   $0xa03
f0126baf:	68 7a b1 13 f0       	push   $0xf013b17a
f0126bb4:	e8 4c 96 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126bb9:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126bbc:	e8 22 62 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0126bc1:	29 c3                	sub    %eax,%ebx
f0126bc3:	89 d8                	mov    %ebx,%eax
f0126bc5:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126bca:	74 17                	je     f0126be3 <test_kfreeall+0x2a7>
f0126bcc:	83 ec 04             	sub    $0x4,%esp
f0126bcf:	68 fc b1 13 f0       	push   $0xf013b1fc
f0126bd4:	68 04 0a 00 00       	push   $0xa04
f0126bd9:	68 7a b1 13 f0       	push   $0xf013b17a
f0126bde:	e8 22 96 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0126be3:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f0126bea:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0126bed:	e8 f1 61 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0126bf2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126bf5:	e8 ac d1 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0126bfa:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0126bfd:	83 ec 0c             	sub    $0xc,%esp
f0126c00:	68 00 08 00 00       	push   $0x800
f0126c05:	e8 57 0e fe ff       	call   f0107a61 <kmalloc>
f0126c0a:	83 c4 10             	add    $0x10,%esp
f0126c0d:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126c13:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0126c19:	89 c1                	mov    %eax,%ecx
f0126c1b:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0126c22:	8b 45 98             	mov    -0x68(%ebp),%eax
f0126c25:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126c2a:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0126c2d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0126c30:	ba 00 00 00 00       	mov    $0x0,%edx
f0126c35:	f7 75 98             	divl   -0x68(%ebp)
f0126c38:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0126c3b:	29 d0                	sub    %edx,%eax
f0126c3d:	89 c3                	mov    %eax,%ebx
f0126c3f:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0126c46:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0126c4b:	0f b6 d0             	movzbl %al,%edx
f0126c4e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0126c51:	01 d0                	add    %edx,%eax
f0126c53:	48                   	dec    %eax
f0126c54:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0126c57:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0126c5a:	ba 00 00 00 00       	mov    $0x0,%edx
f0126c5f:	f7 75 90             	divl   -0x70(%ebp)
f0126c62:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0126c65:	29 d0                	sub    %edx,%eax
f0126c67:	01 c3                	add    %eax,%ebx
f0126c69:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0126c70:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0126c75:	0f b6 c0             	movzbl %al,%eax
f0126c78:	c1 e0 04             	shl    $0x4,%eax
f0126c7b:	89 c2                	mov    %eax,%edx
f0126c7d:	8b 45 88             	mov    -0x78(%ebp),%eax
f0126c80:	01 d0                	add    %edx,%eax
f0126c82:	48                   	dec    %eax
f0126c83:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0126c86:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0126c89:	ba 00 00 00 00       	mov    $0x0,%edx
f0126c8e:	f7 75 88             	divl   -0x78(%ebp)
f0126c91:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0126c94:	29 d0                	sub    %edx,%eax
f0126c96:	01 d8                	add    %ebx,%eax
f0126c98:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0126c9d:	39 c1                	cmp    %eax,%ecx
f0126c9f:	74 17                	je     f0126cb8 <test_kfreeall+0x37c>
f0126ca1:	83 ec 04             	sub    $0x4,%esp
f0126ca4:	68 60 b2 13 f0       	push   $0xf013b260
f0126ca9:	68 0b 0a 00 00       	push   $0xa0b
f0126cae:	68 7a b1 13 f0       	push   $0xf013b17a
f0126cb3:	e8 4d 95 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126cb8:	e8 e9 d0 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0126cbd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126cc0:	74 17                	je     f0126cd9 <test_kfreeall+0x39d>
f0126cc2:	83 ec 04             	sub    $0x4,%esp
f0126cc5:	68 94 b1 13 f0       	push   $0xf013b194
f0126cca:	68 0c 0a 00 00       	push   $0xa0c
f0126ccf:	68 7a b1 13 f0       	push   $0xf013b17a
f0126cd4:	e8 2c 95 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126cd9:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126cdc:	e8 02 61 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0126ce1:	29 c3                	sub    %eax,%ebx
f0126ce3:	89 d8                	mov    %ebx,%eax
f0126ce5:	83 f8 01             	cmp    $0x1,%eax
f0126ce8:	74 17                	je     f0126d01 <test_kfreeall+0x3c5>
f0126cea:	83 ec 04             	sub    $0x4,%esp
f0126ced:	68 fc b1 13 f0       	push   $0xf013b1fc
f0126cf2:	68 0d 0a 00 00       	push   $0xa0d
f0126cf7:	68 7a b1 13 f0       	push   $0xf013b17a
f0126cfc:	e8 04 95 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0126d01:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f0126d08:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0126d0b:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0126d11:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0126d14:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126d1b:	eb 0e                	jmp    f0126d2b <test_kfreeall+0x3ef>
		{
			ptr[i] = 2 ;
f0126d1d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126d20:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126d23:	01 d0                	add    %edx,%eax
f0126d25:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0126d28:	ff 45 f4             	incl   -0xc(%ebp)
f0126d2b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0126d31:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126d34:	7f e7                	jg     f0126d1d <test_kfreeall+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0126d36:	e8 a8 60 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0126d3b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126d3e:	e8 63 d0 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0126d43:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0126d46:	83 ec 0c             	sub    $0xc,%esp
f0126d49:	68 00 08 00 00       	push   $0x800
f0126d4e:	e8 0e 0d fe ff       	call   f0107a61 <kmalloc>
f0126d53:	83 c4 10             	add    $0x10,%esp
f0126d56:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126d5c:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0126d62:	89 c1                	mov    %eax,%ecx
f0126d64:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0126d6b:	10 00 00 
f0126d6e:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0126d74:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126d79:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0126d7f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0126d85:	ba 00 00 00 00       	mov    $0x0,%edx
f0126d8a:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0126d90:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0126d96:	29 d0                	sub    %edx,%eax
f0126d98:	89 c3                	mov    %eax,%ebx
f0126d9a:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0126da1:	10 00 00 
f0126da4:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0126da9:	0f b6 d0             	movzbl %al,%edx
f0126dac:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0126db2:	01 d0                	add    %edx,%eax
f0126db4:	48                   	dec    %eax
f0126db5:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0126dbb:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0126dc1:	ba 00 00 00 00       	mov    $0x0,%edx
f0126dc6:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0126dcc:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0126dd2:	29 d0                	sub    %edx,%eax
f0126dd4:	01 c3                	add    %eax,%ebx
f0126dd6:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0126ddd:	10 00 00 
f0126de0:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0126de5:	0f b6 c0             	movzbl %al,%eax
f0126de8:	c1 e0 04             	shl    $0x4,%eax
f0126deb:	89 c2                	mov    %eax,%edx
f0126ded:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0126df3:	01 d0                	add    %edx,%eax
f0126df5:	48                   	dec    %eax
f0126df6:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0126dfc:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0126e02:	ba 00 00 00 00       	mov    $0x0,%edx
f0126e07:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0126e0d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0126e13:	29 d0                	sub    %edx,%eax
f0126e15:	01 d8                	add    %ebx,%eax
f0126e17:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0126e1c:	39 c1                	cmp    %eax,%ecx
f0126e1e:	74 17                	je     f0126e37 <test_kfreeall+0x4fb>
f0126e20:	83 ec 04             	sub    $0x4,%esp
f0126e23:	68 60 b2 13 f0       	push   $0xf013b260
f0126e28:	68 19 0a 00 00       	push   $0xa19
f0126e2d:	68 7a b1 13 f0       	push   $0xf013b17a
f0126e32:	e8 ce 93 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126e37:	e8 6a cf fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0126e3c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126e3f:	74 17                	je     f0126e58 <test_kfreeall+0x51c>
f0126e41:	83 ec 04             	sub    $0x4,%esp
f0126e44:	68 94 b1 13 f0       	push   $0xf013b194
f0126e49:	68 1a 0a 00 00       	push   $0xa1a
f0126e4e:	68 7a b1 13 f0       	push   $0xf013b17a
f0126e53:	e8 ad 93 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126e58:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126e5b:	e8 83 5f fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0126e60:	29 c3                	sub    %eax,%ebx
f0126e62:	89 d8                	mov    %ebx,%eax
f0126e64:	83 f8 01             	cmp    $0x1,%eax
f0126e67:	74 17                	je     f0126e80 <test_kfreeall+0x544>
f0126e69:	83 ec 04             	sub    $0x4,%esp
f0126e6c:	68 fc b1 13 f0       	push   $0xf013b1fc
f0126e71:	68 1b 0a 00 00       	push   $0xa1b
f0126e76:	68 7a b1 13 f0       	push   $0xf013b17a
f0126e7b:	e8 85 93 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0126e80:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f0126e87:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0126e8a:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0126e90:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0126e93:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126e9a:	eb 0e                	jmp    f0126eaa <test_kfreeall+0x56e>
		{
			ptr[i] = 3 ;
f0126e9c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126e9f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126ea2:	01 d0                	add    %edx,%eax
f0126ea4:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0126ea7:	ff 45 f4             	incl   -0xc(%ebp)
f0126eaa:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0126eb0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126eb3:	7f e7                	jg     f0126e9c <test_kfreeall+0x560>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0126eb5:	e8 29 5f fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0126eba:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126ebd:	e8 e4 ce fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0126ec2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0126ec5:	83 ec 0c             	sub    $0xc,%esp
f0126ec8:	68 00 1c 00 00       	push   $0x1c00
f0126ecd:	e8 8f 0b fe ff       	call   f0107a61 <kmalloc>
f0126ed2:	83 c4 10             	add    $0x10,%esp
f0126ed5:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126edb:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0126ee1:	89 c1                	mov    %eax,%ecx
f0126ee3:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0126eea:	10 00 00 
f0126eed:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0126ef3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126ef8:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0126efe:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0126f04:	ba 00 00 00 00       	mov    $0x0,%edx
f0126f09:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0126f0f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0126f15:	29 d0                	sub    %edx,%eax
f0126f17:	89 c3                	mov    %eax,%ebx
f0126f19:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0126f20:	10 00 00 
f0126f23:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0126f28:	0f b6 d0             	movzbl %al,%edx
f0126f2b:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0126f31:	01 d0                	add    %edx,%eax
f0126f33:	48                   	dec    %eax
f0126f34:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0126f3a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0126f40:	ba 00 00 00 00       	mov    $0x0,%edx
f0126f45:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0126f4b:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0126f51:	29 d0                	sub    %edx,%eax
f0126f53:	01 c3                	add    %eax,%ebx
f0126f55:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0126f5c:	10 00 00 
f0126f5f:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0126f64:	0f b6 c0             	movzbl %al,%eax
f0126f67:	c1 e0 04             	shl    $0x4,%eax
f0126f6a:	89 c2                	mov    %eax,%edx
f0126f6c:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0126f72:	01 d0                	add    %edx,%eax
f0126f74:	48                   	dec    %eax
f0126f75:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0126f7b:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0126f81:	ba 00 00 00 00       	mov    $0x0,%edx
f0126f86:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0126f8c:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0126f92:	29 d0                	sub    %edx,%eax
f0126f94:	01 d8                	add    %ebx,%eax
f0126f96:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0126f9b:	39 c1                	cmp    %eax,%ecx
f0126f9d:	74 17                	je     f0126fb6 <test_kfreeall+0x67a>
f0126f9f:	83 ec 04             	sub    $0x4,%esp
f0126fa2:	68 60 b2 13 f0       	push   $0xf013b260
f0126fa7:	68 27 0a 00 00       	push   $0xa27
f0126fac:	68 7a b1 13 f0       	push   $0xf013b17a
f0126fb1:	e8 4f 92 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126fb6:	e8 eb cd fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0126fbb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126fbe:	74 17                	je     f0126fd7 <test_kfreeall+0x69b>
f0126fc0:	83 ec 04             	sub    $0x4,%esp
f0126fc3:	68 94 b1 13 f0       	push   $0xf013b194
f0126fc8:	68 28 0a 00 00       	push   $0xa28
f0126fcd:	68 7a b1 13 f0       	push   $0xf013b17a
f0126fd2:	e8 2e 92 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126fd7:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126fda:	e8 04 5e fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0126fdf:	29 c3                	sub    %eax,%ebx
f0126fe1:	89 d8                	mov    %ebx,%eax
f0126fe3:	83 f8 02             	cmp    $0x2,%eax
f0126fe6:	74 17                	je     f0126fff <test_kfreeall+0x6c3>
f0126fe8:	83 ec 04             	sub    $0x4,%esp
f0126feb:	68 fc b1 13 f0       	push   $0xf013b1fc
f0126ff0:	68 29 0a 00 00       	push   $0xa29
f0126ff5:	68 7a b1 13 f0       	push   $0xf013b17a
f0126ffa:	e8 06 92 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0126fff:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f0127006:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0127009:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f012700f:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0127012:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127019:	eb 0e                	jmp    f0127029 <test_kfreeall+0x6ed>
		{
			ptr[i] = 4 ;
f012701b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012701e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127021:	01 d0                	add    %edx,%eax
f0127023:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0127026:	ff 45 f4             	incl   -0xc(%ebp)
f0127029:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012702f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127032:	7f e7                	jg     f012701b <test_kfreeall+0x6df>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0127034:	e8 aa 5d fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0127039:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012703c:	e8 65 cd fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0127041:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0127044:	83 ec 0c             	sub    $0xc,%esp
f0127047:	68 00 fc 2f 00       	push   $0x2ffc00
f012704c:	e8 10 0a fe ff       	call   f0107a61 <kmalloc>
f0127051:	83 c4 10             	add    $0x10,%esp
f0127054:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012705a:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0127060:	89 c1                	mov    %eax,%ecx
f0127062:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0127069:	10 00 00 
f012706c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0127072:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127077:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012707d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0127083:	ba 00 00 00 00       	mov    $0x0,%edx
f0127088:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012708e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0127094:	29 d0                	sub    %edx,%eax
f0127096:	89 c3                	mov    %eax,%ebx
f0127098:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012709f:	10 00 00 
f01270a2:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01270a7:	0f b6 d0             	movzbl %al,%edx
f01270aa:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01270b0:	01 d0                	add    %edx,%eax
f01270b2:	48                   	dec    %eax
f01270b3:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f01270b9:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01270bf:	ba 00 00 00 00       	mov    $0x0,%edx
f01270c4:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f01270ca:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01270d0:	29 d0                	sub    %edx,%eax
f01270d2:	01 c3                	add    %eax,%ebx
f01270d4:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f01270db:	10 00 00 
f01270de:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01270e3:	0f b6 c0             	movzbl %al,%eax
f01270e6:	c1 e0 04             	shl    $0x4,%eax
f01270e9:	89 c2                	mov    %eax,%edx
f01270eb:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01270f1:	01 d0                	add    %edx,%eax
f01270f3:	48                   	dec    %eax
f01270f4:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01270fa:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0127100:	ba 00 00 00 00       	mov    $0x0,%edx
f0127105:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012710b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0127111:	29 d0                	sub    %edx,%eax
f0127113:	01 d8                	add    %ebx,%eax
f0127115:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012711a:	39 c1                	cmp    %eax,%ecx
f012711c:	74 17                	je     f0127135 <test_kfreeall+0x7f9>
f012711e:	83 ec 04             	sub    $0x4,%esp
f0127121:	68 60 b2 13 f0       	push   $0xf013b260
f0127126:	68 35 0a 00 00       	push   $0xa35
f012712b:	68 7a b1 13 f0       	push   $0xf013b17a
f0127130:	e8 d0 90 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127135:	e8 6c cc fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012713a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012713d:	74 17                	je     f0127156 <test_kfreeall+0x81a>
f012713f:	83 ec 04             	sub    $0x4,%esp
f0127142:	68 94 b1 13 f0       	push   $0xf013b194
f0127147:	68 36 0a 00 00       	push   $0xa36
f012714c:	68 7a b1 13 f0       	push   $0xf013b17a
f0127151:	e8 af 90 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127156:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127159:	e8 85 5c fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012715e:	29 c3                	sub    %eax,%ebx
f0127160:	89 d8                	mov    %ebx,%eax
f0127162:	3d 00 03 00 00       	cmp    $0x300,%eax
f0127167:	74 17                	je     f0127180 <test_kfreeall+0x844>
f0127169:	83 ec 04             	sub    $0x4,%esp
f012716c:	68 fc b1 13 f0       	push   $0xf013b1fc
f0127171:	68 37 0a 00 00       	push   $0xa37
f0127176:	68 7a b1 13 f0       	push   $0xf013b17a
f012717b:	e8 85 90 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0127180:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f0127187:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f012718a:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0127190:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0127193:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012719a:	eb 0e                	jmp    f01271aa <test_kfreeall+0x86e>
		{
			ptr[i] = 5 ;
f012719c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012719f:	8b 45 80             	mov    -0x80(%ebp),%eax
f01271a2:	01 d0                	add    %edx,%eax
f01271a4:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01271a7:	ff 45 f4             	incl   -0xc(%ebp)
f01271aa:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01271b0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01271b3:	7f e7                	jg     f012719c <test_kfreeall+0x860>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01271b5:	e8 29 5c fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01271ba:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01271bd:	e8 e4 cb fd ff       	call   f0103da6 <pf_calculate_free_frames>
f01271c2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01271c5:	83 ec 0c             	sub    $0xc,%esp
f01271c8:	68 00 fc 5f 00       	push   $0x5ffc00
f01271cd:	e8 8f 08 fe ff       	call   f0107a61 <kmalloc>
f01271d2:	83 c4 10             	add    $0x10,%esp
f01271d5:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01271db:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f01271e1:	89 c1                	mov    %eax,%ecx
f01271e3:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01271ea:	10 00 00 
f01271ed:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01271f3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01271f8:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01271fe:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0127204:	ba 00 00 00 00       	mov    $0x0,%edx
f0127209:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012720f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0127215:	29 d0                	sub    %edx,%eax
f0127217:	89 c3                	mov    %eax,%ebx
f0127219:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0127220:	10 00 00 
f0127223:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0127228:	0f b6 d0             	movzbl %al,%edx
f012722b:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0127231:	01 d0                	add    %edx,%eax
f0127233:	48                   	dec    %eax
f0127234:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012723a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0127240:	ba 00 00 00 00       	mov    $0x0,%edx
f0127245:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012724b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0127251:	29 d0                	sub    %edx,%eax
f0127253:	01 c3                	add    %eax,%ebx
f0127255:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012725c:	10 00 00 
f012725f:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0127264:	0f b6 c0             	movzbl %al,%eax
f0127267:	c1 e0 04             	shl    $0x4,%eax
f012726a:	89 c2                	mov    %eax,%edx
f012726c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0127272:	01 d0                	add    %edx,%eax
f0127274:	48                   	dec    %eax
f0127275:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012727b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0127281:	ba 00 00 00 00       	mov    $0x0,%edx
f0127286:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012728c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0127292:	29 d0                	sub    %edx,%eax
f0127294:	01 d8                	add    %ebx,%eax
f0127296:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012729b:	39 c1                	cmp    %eax,%ecx
f012729d:	74 17                	je     f01272b6 <test_kfreeall+0x97a>
f012729f:	83 ec 04             	sub    $0x4,%esp
f01272a2:	68 60 b2 13 f0       	push   $0xf013b260
f01272a7:	68 43 0a 00 00       	push   $0xa43
f01272ac:	68 7a b1 13 f0       	push   $0xf013b17a
f01272b1:	e8 4f 8f fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01272b6:	e8 eb ca fd ff       	call   f0103da6 <pf_calculate_free_frames>
f01272bb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01272be:	74 17                	je     f01272d7 <test_kfreeall+0x99b>
f01272c0:	83 ec 04             	sub    $0x4,%esp
f01272c3:	68 94 b1 13 f0       	push   $0xf013b194
f01272c8:	68 44 0a 00 00       	push   $0xa44
f01272cd:	68 7a b1 13 f0       	push   $0xf013b17a
f01272d2:	e8 2e 8f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01272d7:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01272da:	e8 04 5b fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01272df:	29 c3                	sub    %eax,%ebx
f01272e1:	89 d8                	mov    %ebx,%eax
f01272e3:	3d 00 06 00 00       	cmp    $0x600,%eax
f01272e8:	74 17                	je     f0127301 <test_kfreeall+0x9c5>
f01272ea:	83 ec 04             	sub    $0x4,%esp
f01272ed:	68 fc b1 13 f0       	push   $0xf013b1fc
f01272f2:	68 45 0a 00 00       	push   $0xa45
f01272f7:	68 7a b1 13 f0       	push   $0xf013b17a
f01272fc:	e8 04 8f fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0127301:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f0127308:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012730b:	e8 d3 5a fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0127310:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127313:	e8 8e ca fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0127318:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012731b:	83 ec 0c             	sub    $0xc,%esp
f012731e:	68 00 38 00 00       	push   $0x3800
f0127323:	e8 39 07 fe ff       	call   f0107a61 <kmalloc>
f0127328:	83 c4 10             	add    $0x10,%esp
f012732b:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127331:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0127337:	89 c1                	mov    %eax,%ecx
f0127339:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0127340:	10 00 00 
f0127343:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0127349:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012734e:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0127354:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012735a:	ba 00 00 00 00       	mov    $0x0,%edx
f012735f:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0127365:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012736b:	29 d0                	sub    %edx,%eax
f012736d:	89 c3                	mov    %eax,%ebx
f012736f:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0127376:	10 00 00 
f0127379:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012737e:	0f b6 d0             	movzbl %al,%edx
f0127381:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0127387:	01 d0                	add    %edx,%eax
f0127389:	48                   	dec    %eax
f012738a:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0127390:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0127396:	ba 00 00 00 00       	mov    $0x0,%edx
f012739b:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f01273a1:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01273a7:	29 d0                	sub    %edx,%eax
f01273a9:	01 c3                	add    %eax,%ebx
f01273ab:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f01273b2:	10 00 00 
f01273b5:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01273ba:	0f b6 c0             	movzbl %al,%eax
f01273bd:	c1 e0 04             	shl    $0x4,%eax
f01273c0:	89 c2                	mov    %eax,%edx
f01273c2:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01273c8:	01 d0                	add    %edx,%eax
f01273ca:	48                   	dec    %eax
f01273cb:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f01273d1:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01273d7:	ba 00 00 00 00       	mov    $0x0,%edx
f01273dc:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f01273e2:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01273e8:	29 d0                	sub    %edx,%eax
f01273ea:	01 d8                	add    %ebx,%eax
f01273ec:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01273f1:	39 c1                	cmp    %eax,%ecx
f01273f3:	74 17                	je     f012740c <test_kfreeall+0xad0>
f01273f5:	83 ec 04             	sub    $0x4,%esp
f01273f8:	68 60 b2 13 f0       	push   $0xf013b260
f01273fd:	68 4c 0a 00 00       	push   $0xa4c
f0127402:	68 7a b1 13 f0       	push   $0xf013b17a
f0127407:	e8 f9 8d fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012740c:	e8 95 c9 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0127411:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127414:	74 17                	je     f012742d <test_kfreeall+0xaf1>
f0127416:	83 ec 04             	sub    $0x4,%esp
f0127419:	68 94 b1 13 f0       	push   $0xf013b194
f012741e:	68 4d 0a 00 00       	push   $0xa4d
f0127423:	68 7a b1 13 f0       	push   $0xf013b17a
f0127428:	e8 d8 8d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012742d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127430:	e8 ae 59 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0127435:	29 c3                	sub    %eax,%ebx
f0127437:	89 d8                	mov    %ebx,%eax
f0127439:	83 f8 04             	cmp    $0x4,%eax
f012743c:	74 17                	je     f0127455 <test_kfreeall+0xb19>
f012743e:	83 ec 04             	sub    $0x4,%esp
f0127441:	68 fc b1 13 f0       	push   $0xf013b1fc
f0127446:	68 4e 0a 00 00       	push   $0xa4e
f012744b:	68 7a b1 13 f0       	push   $0xf013b17a
f0127450:	e8 b0 8d fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0127455:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f012745c:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f012745f:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0127465:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0127468:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012746f:	eb 0e                	jmp    f012747f <test_kfreeall+0xb43>
		{
			ptr[i] = 7 ;
f0127471:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127474:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127477:	01 d0                	add    %edx,%eax
f0127479:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012747c:	ff 45 f4             	incl   -0xc(%ebp)
f012747f:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0127485:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127488:	7f e7                	jg     f0127471 <test_kfreeall+0xb35>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f012748a:	e8 54 59 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012748f:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0127495:	e8 0c c9 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012749a:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f01274a0:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f01274a6:	83 ec 0c             	sub    $0xc,%esp
f01274a9:	50                   	push   %eax
f01274aa:	e8 c8 06 fe ff       	call   f0107b77 <kfree>
f01274af:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01274b2:	e8 ef c8 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f01274b7:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01274bd:	74 17                	je     f01274d6 <test_kfreeall+0xb9a>
f01274bf:	83 ec 04             	sub    $0x4,%esp
f01274c2:	68 94 b1 13 f0       	push   $0xf013b194
f01274c7:	68 5d 0a 00 00       	push   $0xa5d
f01274cc:	68 7a b1 13 f0       	push   $0xf013b17a
f01274d1:	e8 2f 8d fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01274d6:	e8 08 59 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01274db:	89 c2                	mov    %eax,%edx
f01274dd:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01274e3:	29 c2                	sub    %eax,%edx
f01274e5:	89 d0                	mov    %edx,%eax
f01274e7:	3d 00 02 00 00       	cmp    $0x200,%eax
f01274ec:	74 17                	je     f0127505 <test_kfreeall+0xbc9>
f01274ee:	83 ec 04             	sub    $0x4,%esp
f01274f1:	68 04 b9 13 f0       	push   $0xf013b904
f01274f6:	68 5e 0a 00 00       	push   $0xa5e
f01274fb:	68 7a b1 13 f0       	push   $0xf013b17a
f0127500:	e8 00 8d fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127505:	e8 d9 58 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012750a:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127510:	e8 91 c8 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0127515:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f012751b:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0127521:	83 ec 0c             	sub    $0xc,%esp
f0127524:	50                   	push   %eax
f0127525:	e8 4d 06 fe ff       	call   f0107b77 <kfree>
f012752a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012752d:	e8 74 c8 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0127532:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0127538:	74 17                	je     f0127551 <test_kfreeall+0xc15>
f012753a:	83 ec 04             	sub    $0x4,%esp
f012753d:	68 94 b1 13 f0       	push   $0xf013b194
f0127542:	68 64 0a 00 00       	push   $0xa64
f0127547:	68 7a b1 13 f0       	push   $0xf013b17a
f012754c:	e8 b4 8c fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0127551:	e8 8d 58 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0127556:	89 c2                	mov    %eax,%edx
f0127558:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012755e:	29 c2                	sub    %eax,%edx
f0127560:	89 d0                	mov    %edx,%eax
f0127562:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127567:	74 17                	je     f0127580 <test_kfreeall+0xc44>
f0127569:	83 ec 04             	sub    $0x4,%esp
f012756c:	68 04 b9 13 f0       	push   $0xf013b904
f0127571:	68 65 0a 00 00       	push   $0xa65
f0127576:	68 7a b1 13 f0       	push   $0xf013b17a
f012757b:	e8 85 8c fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0127580:	e8 5e 58 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0127585:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012758b:	e8 16 c8 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0127590:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0127596:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f012759c:	83 ec 0c             	sub    $0xc,%esp
f012759f:	50                   	push   %eax
f01275a0:	e8 d2 05 fe ff       	call   f0107b77 <kfree>
f01275a5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01275a8:	e8 f9 c7 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f01275ad:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01275b3:	74 17                	je     f01275cc <test_kfreeall+0xc90>
f01275b5:	83 ec 04             	sub    $0x4,%esp
f01275b8:	68 94 b1 13 f0       	push   $0xf013b194
f01275bd:	68 6b 0a 00 00       	push   $0xa6b
f01275c2:	68 7a b1 13 f0       	push   $0xf013b17a
f01275c7:	e8 39 8c fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01275cc:	e8 12 58 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01275d1:	89 c2                	mov    %eax,%edx
f01275d3:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01275d9:	29 c2                	sub    %eax,%edx
f01275db:	89 d0                	mov    %edx,%eax
f01275dd:	3d 00 06 00 00       	cmp    $0x600,%eax
f01275e2:	74 17                	je     f01275fb <test_kfreeall+0xcbf>
f01275e4:	83 ec 04             	sub    $0x4,%esp
f01275e7:	68 04 b9 13 f0       	push   $0xf013b904
f01275ec:	68 6c 0a 00 00       	push   $0xa6c
f01275f1:	68 7a b1 13 f0       	push   $0xf013b17a
f01275f6:	e8 0a 8c fd ff       	call   f0100205 <_panic>


	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f01275fb:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0127601:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0127604:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012760b:	eb 1e                	jmp    f012762b <test_kfreeall+0xcef>
		{
			sums[2] += ptr[i] ;
f012760d:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f0127613:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0127616:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127619:	01 c8                	add    %ecx,%eax
f012761b:	8a 00                	mov    (%eax),%al
f012761d:	0f be c0             	movsbl %al,%eax
f0127620:	01 d0                	add    %edx,%eax
f0127622:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0127628:	ff 45 f4             	incl   -0xc(%ebp)
f012762b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0127631:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127634:	7f d7                	jg     f012760d <test_kfreeall+0xcd1>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0127636:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f012763c:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0127642:	01 c0                	add    %eax,%eax
f0127644:	39 c2                	cmp    %eax,%edx
f0127646:	74 17                	je     f012765f <test_kfreeall+0xd23>
f0127648:	83 ec 04             	sub    $0x4,%esp
f012764b:	68 60 b9 13 f0       	push   $0xf013b960
f0127650:	68 78 0a 00 00       	push   $0xa78
f0127655:	68 7a b1 13 f0       	push   $0xf013b17a
f012765a:	e8 a6 8b fd ff       	call   f0100205 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f012765f:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0127665:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0127668:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012766f:	eb 1e                	jmp    f012768f <test_kfreeall+0xd53>
		{
			sums[3] += ptr[i] ;
f0127671:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0127677:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012767a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012767d:	01 c8                	add    %ecx,%eax
f012767f:	8a 00                	mov    (%eax),%al
f0127681:	0f be c0             	movsbl %al,%eax
f0127684:	01 d0                	add    %edx,%eax
f0127686:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012768c:	ff 45 f4             	incl   -0xc(%ebp)
f012768f:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0127695:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127698:	7f d7                	jg     f0127671 <test_kfreeall+0xd35>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f012769a:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f01276a0:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01276a6:	89 c1                	mov    %eax,%ecx
f01276a8:	01 c9                	add    %ecx,%ecx
f01276aa:	01 c8                	add    %ecx,%eax
f01276ac:	39 c2                	cmp    %eax,%edx
f01276ae:	74 17                	je     f01276c7 <test_kfreeall+0xd8b>
f01276b0:	83 ec 04             	sub    $0x4,%esp
f01276b3:	68 60 b9 13 f0       	push   $0xf013b960
f01276b8:	68 80 0a 00 00       	push   $0xa80
f01276bd:	68 7a b1 13 f0       	push   $0xf013b17a
f01276c2:	e8 3e 8b fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f01276c7:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01276cd:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01276d0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01276d7:	eb 1e                	jmp    f01276f7 <test_kfreeall+0xdbb>
		{
			sums[4] += ptr[i] ;
f01276d9:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f01276df:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01276e2:	8b 45 80             	mov    -0x80(%ebp),%eax
f01276e5:	01 c8                	add    %ecx,%eax
f01276e7:	8a 00                	mov    (%eax),%al
f01276e9:	0f be c0             	movsbl %al,%eax
f01276ec:	01 d0                	add    %edx,%eax
f01276ee:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01276f4:	ff 45 f4             	incl   -0xc(%ebp)
f01276f7:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01276fd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127700:	7f d7                	jg     f01276d9 <test_kfreeall+0xd9d>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0127702:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0127708:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f012770e:	c1 e2 02             	shl    $0x2,%edx
f0127711:	39 d0                	cmp    %edx,%eax
f0127713:	74 17                	je     f012772c <test_kfreeall+0xdf0>
f0127715:	83 ec 04             	sub    $0x4,%esp
f0127718:	68 60 b9 13 f0       	push   $0xf013b960
f012771d:	68 88 0a 00 00       	push   $0xa88
f0127722:	68 7a b1 13 f0       	push   $0xf013b17a
f0127727:	e8 d9 8a fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f012772c:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0127732:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0127735:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012773c:	eb 1e                	jmp    f012775c <test_kfreeall+0xe20>
		{
			sums[5] += ptr[i] ;
f012773e:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f0127744:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0127747:	8b 45 80             	mov    -0x80(%ebp),%eax
f012774a:	01 c8                	add    %ecx,%eax
f012774c:	8a 00                	mov    (%eax),%al
f012774e:	0f be c0             	movsbl %al,%eax
f0127751:	01 d0                	add    %edx,%eax
f0127753:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0127759:	ff 45 f4             	incl   -0xc(%ebp)
f012775c:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0127762:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127765:	7f d7                	jg     f012773e <test_kfreeall+0xe02>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0127767:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f012776d:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0127773:	89 d0                	mov    %edx,%eax
f0127775:	c1 e0 02             	shl    $0x2,%eax
f0127778:	01 d0                	add    %edx,%eax
f012777a:	39 c1                	cmp    %eax,%ecx
f012777c:	74 17                	je     f0127795 <test_kfreeall+0xe59>
f012777e:	83 ec 04             	sub    $0x4,%esp
f0127781:	68 60 b9 13 f0       	push   $0xf013b960
f0127786:	68 90 0a 00 00       	push   $0xa90
f012778b:	68 7a b1 13 f0       	push   $0xf013b17a
f0127790:	e8 70 8a fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0127795:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f012779b:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012779e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01277a5:	eb 1e                	jmp    f01277c5 <test_kfreeall+0xe89>
		{
			sums[7] += ptr[i] ;
f01277a7:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f01277ad:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01277b0:	8b 45 80             	mov    -0x80(%ebp),%eax
f01277b3:	01 c8                	add    %ecx,%eax
f01277b5:	8a 00                	mov    (%eax),%al
f01277b7:	0f be c0             	movsbl %al,%eax
f01277ba:	01 d0                	add    %edx,%eax
f01277bc:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01277c2:	ff 45 f4             	incl   -0xc(%ebp)
f01277c5:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01277cb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01277ce:	7f d7                	jg     f01277a7 <test_kfreeall+0xe6b>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f01277d0:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f01277d6:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f01277dc:	89 d0                	mov    %edx,%eax
f01277de:	01 c0                	add    %eax,%eax
f01277e0:	01 d0                	add    %edx,%eax
f01277e2:	01 c0                	add    %eax,%eax
f01277e4:	01 d0                	add    %edx,%eax
f01277e6:	39 c1                	cmp    %eax,%ecx
f01277e8:	74 17                	je     f0127801 <test_kfreeall+0xec5>
f01277ea:	83 ec 04             	sub    $0x4,%esp
f01277ed:	68 60 b9 13 f0       	push   $0xf013b960
f01277f2:	68 98 0a 00 00       	push   $0xa98
f01277f7:	68 7a b1 13 f0       	push   $0xf013b17a
f01277fc:	e8 04 8a fd ff       	call   f0100205 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0127801:	e8 dd 55 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0127806:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127809:	e8 98 c5 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012780e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0127811:	83 ec 0c             	sub    $0xc,%esp
f0127814:	68 00 50 00 00       	push   $0x5000
f0127819:	e8 43 02 fe ff       	call   f0107a61 <kmalloc>
f012781e:	83 c4 10             	add    $0x10,%esp
f0127821:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127827:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f012782d:	89 c1                	mov    %eax,%ecx
f012782f:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0127836:	10 00 00 
f0127839:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012783f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127844:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012784a:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0127850:	ba 00 00 00 00       	mov    $0x0,%edx
f0127855:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012785b:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0127861:	29 d0                	sub    %edx,%eax
f0127863:	89 c3                	mov    %eax,%ebx
f0127865:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f012786c:	10 00 00 
f012786f:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0127874:	0f b6 d0             	movzbl %al,%edx
f0127877:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012787d:	01 d0                	add    %edx,%eax
f012787f:	48                   	dec    %eax
f0127880:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0127886:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012788c:	ba 00 00 00 00       	mov    $0x0,%edx
f0127891:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0127897:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012789d:	29 d0                	sub    %edx,%eax
f012789f:	01 c3                	add    %eax,%ebx
f01278a1:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f01278a8:	10 00 00 
f01278ab:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01278b0:	0f b6 c0             	movzbl %al,%eax
f01278b3:	c1 e0 04             	shl    $0x4,%eax
f01278b6:	89 c2                	mov    %eax,%edx
f01278b8:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01278be:	01 d0                	add    %edx,%eax
f01278c0:	48                   	dec    %eax
f01278c1:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f01278c7:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01278cd:	ba 00 00 00 00       	mov    $0x0,%edx
f01278d2:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f01278d8:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01278de:	29 d0                	sub    %edx,%eax
f01278e0:	01 d8                	add    %ebx,%eax
f01278e2:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01278e7:	39 c1                	cmp    %eax,%ecx
f01278e9:	74 17                	je     f0127902 <test_kfreeall+0xfc6>
f01278eb:	83 ec 04             	sub    $0x4,%esp
f01278ee:	68 60 b2 13 f0       	push   $0xf013b260
f01278f3:	68 a1 0a 00 00       	push   $0xaa1
f01278f8:	68 7a b1 13 f0       	push   $0xf013b17a
f01278fd:	e8 03 89 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127902:	e8 9f c4 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0127907:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012790a:	74 17                	je     f0127923 <test_kfreeall+0xfe7>
f012790c:	83 ec 04             	sub    $0x4,%esp
f012790f:	68 94 b1 13 f0       	push   $0xf013b194
f0127914:	68 a2 0a 00 00       	push   $0xaa2
f0127919:	68 7a b1 13 f0       	push   $0xf013b17a
f012791e:	e8 e2 88 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127923:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127926:	e8 b8 54 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012792b:	29 c3                	sub    %eax,%ebx
f012792d:	89 d8                	mov    %ebx,%eax
f012792f:	83 f8 05             	cmp    $0x5,%eax
f0127932:	74 17                	je     f012794b <test_kfreeall+0x100f>
f0127934:	83 ec 04             	sub    $0x4,%esp
f0127937:	68 fc b1 13 f0       	push   $0xf013b1fc
f012793c:	68 a3 0a 00 00       	push   $0xaa3
f0127941:	68 7a b1 13 f0       	push   $0xf013b17a
f0127946:	e8 ba 88 fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f012794b:	c7 85 88 fe ff ff ff 	movl   $0x4fff,-0x178(%ebp)
f0127952:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0127955:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f012795b:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f012795e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127965:	eb 0e                	jmp    f0127975 <test_kfreeall+0x1039>
		{
			ptr[i] = 8 ;
f0127967:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012796a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012796d:	01 d0                	add    %edx,%eax
f012796f:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0127972:	ff 45 f4             	incl   -0xc(%ebp)
f0127975:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012797b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012797e:	7f e7                	jg     f0127967 <test_kfreeall+0x102b>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0127980:	e8 5e 54 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0127985:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127988:	e8 19 c4 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012798d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0127990:	83 ec 0c             	sub    $0xc,%esp
f0127993:	68 00 00 10 00       	push   $0x100000
f0127998:	e8 c4 00 fe ff       	call   f0107a61 <kmalloc>
f012799d:	83 c4 10             	add    $0x10,%esp
f01279a0:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01279a6:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01279ac:	89 c1                	mov    %eax,%ecx
f01279ae:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f01279b5:	10 00 00 
f01279b8:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01279be:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01279c3:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f01279c9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01279cf:	ba 00 00 00 00       	mov    $0x0,%edx
f01279d4:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f01279da:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01279e0:	29 d0                	sub    %edx,%eax
f01279e2:	89 c3                	mov    %eax,%ebx
f01279e4:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f01279eb:	10 00 00 
f01279ee:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01279f3:	0f b6 d0             	movzbl %al,%edx
f01279f6:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01279fc:	01 d0                	add    %edx,%eax
f01279fe:	48                   	dec    %eax
f01279ff:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0127a05:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0127a0b:	ba 00 00 00 00       	mov    $0x0,%edx
f0127a10:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0127a16:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0127a1c:	29 d0                	sub    %edx,%eax
f0127a1e:	01 c3                	add    %eax,%ebx
f0127a20:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0127a27:	10 00 00 
f0127a2a:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0127a2f:	0f b6 c0             	movzbl %al,%eax
f0127a32:	c1 e0 04             	shl    $0x4,%eax
f0127a35:	89 c2                	mov    %eax,%edx
f0127a37:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0127a3d:	01 d0                	add    %edx,%eax
f0127a3f:	48                   	dec    %eax
f0127a40:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0127a46:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0127a4c:	ba 00 00 00 00       	mov    $0x0,%edx
f0127a51:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0127a57:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0127a5d:	29 d0                	sub    %edx,%eax
f0127a5f:	01 d8                	add    %ebx,%eax
f0127a61:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0127a66:	39 c1                	cmp    %eax,%ecx
f0127a68:	74 17                	je     f0127a81 <test_kfreeall+0x1145>
f0127a6a:	83 ec 04             	sub    $0x4,%esp
f0127a6d:	68 60 b2 13 f0       	push   $0xf013b260
f0127a72:	68 af 0a 00 00       	push   $0xaaf
f0127a77:	68 7a b1 13 f0       	push   $0xf013b17a
f0127a7c:	e8 84 87 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127a81:	e8 20 c3 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0127a86:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127a89:	74 17                	je     f0127aa2 <test_kfreeall+0x1166>
f0127a8b:	83 ec 04             	sub    $0x4,%esp
f0127a8e:	68 94 b1 13 f0       	push   $0xf013b194
f0127a93:	68 b0 0a 00 00       	push   $0xab0
f0127a98:	68 7a b1 13 f0       	push   $0xf013b17a
f0127a9d:	e8 63 87 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127aa2:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127aa5:	e8 39 53 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0127aaa:	29 c3                	sub    %eax,%ebx
f0127aac:	89 d8                	mov    %ebx,%eax
f0127aae:	3d 00 01 00 00       	cmp    $0x100,%eax
f0127ab3:	74 17                	je     f0127acc <test_kfreeall+0x1190>
f0127ab5:	83 ec 04             	sub    $0x4,%esp
f0127ab8:	68 fc b1 13 f0       	push   $0xf013b1fc
f0127abd:	68 b1 0a 00 00       	push   $0xab1
f0127ac2:	68 7a b1 13 f0       	push   $0xf013b17a
f0127ac7:	e8 39 87 fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0127acc:	c7 85 8c fe ff ff ff 	movl   $0xfffff,-0x174(%ebp)
f0127ad3:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0127ad6:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0127adc:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0127adf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127ae6:	eb 0e                	jmp    f0127af6 <test_kfreeall+0x11ba>
		{
			ptr[i] = 9 ;
f0127ae8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127aeb:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127aee:	01 d0                	add    %edx,%eax
f0127af0:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0127af3:	ff 45 f4             	incl   -0xc(%ebp)
f0127af6:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0127afc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127aff:	7f e7                	jg     f0127ae8 <test_kfreeall+0x11ac>
		}
	}

	//kfree entire kernel heap
	{
		freeFrames = sys_calculate_free_frames() ;
f0127b01:	e8 dd 52 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0127b06:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127b09:	e8 98 c2 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0127b0e:	89 45 cc             	mov    %eax,-0x34(%ebp)

		kfreeall();
f0127b11:	e8 d7 01 fe ff       	call   f0107ced <kfreeall>

		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127b16:	e8 8b c2 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0127b1b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127b1e:	74 17                	je     f0127b37 <test_kfreeall+0x11fb>
f0127b20:	83 ec 04             	sub    $0x4,%esp
f0127b23:	68 94 b1 13 f0       	push   $0xf013b194
f0127b28:	68 c1 0a 00 00       	push   $0xac1
f0127b2d:	68 7a b1 13 f0       	push   $0xf013b17a
f0127b32:	e8 ce 86 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE+ 2 + 3*Mega/4096 + 1 + 1 + 4 + 5 + 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0127b37:	e8 a7 52 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0127b3c:	89 c2                	mov    %eax,%edx
f0127b3e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127b41:	89 d1                	mov    %edx,%ecx
f0127b43:	29 c1                	sub    %eax,%ecx
f0127b45:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0127b4c:	10 00 00 
f0127b4f:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0127b55:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127b5a:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0127b60:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0127b66:	ba 00 00 00 00       	mov    $0x0,%edx
f0127b6b:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0127b71:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0127b77:	29 d0                	sub    %edx,%eax
f0127b79:	89 c3                	mov    %eax,%ebx
f0127b7b:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0127b82:	10 00 00 
f0127b85:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0127b8a:	0f b6 d0             	movzbl %al,%edx
f0127b8d:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0127b93:	01 d0                	add    %edx,%eax
f0127b95:	48                   	dec    %eax
f0127b96:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0127b9c:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0127ba2:	ba 00 00 00 00       	mov    $0x0,%edx
f0127ba7:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0127bad:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0127bb3:	29 d0                	sub    %edx,%eax
f0127bb5:	01 c3                	add    %eax,%ebx
f0127bb7:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0127bbe:	10 00 00 
f0127bc1:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0127bc6:	0f b6 c0             	movzbl %al,%eax
f0127bc9:	c1 e0 04             	shl    $0x4,%eax
f0127bcc:	89 c2                	mov    %eax,%edx
f0127bce:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0127bd4:	01 d0                	add    %edx,%eax
f0127bd6:	48                   	dec    %eax
f0127bd7:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0127bdd:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0127be3:	ba 00 00 00 00       	mov    $0x0,%edx
f0127be8:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0127bee:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0127bf4:	29 d0                	sub    %edx,%eax
f0127bf6:	01 d8                	add    %ebx,%eax
f0127bf8:	05 00 40 00 00       	add    $0x4000,%eax
f0127bfd:	c1 e8 0c             	shr    $0xc,%eax
f0127c00:	05 0d 04 00 00       	add    $0x40d,%eax
f0127c05:	39 c1                	cmp    %eax,%ecx
f0127c07:	74 17                	je     f0127c20 <test_kfreeall+0x12e4>
f0127c09:	83 ec 04             	sub    $0x4,%esp
f0127c0c:	68 04 b9 13 f0       	push   $0xf013b904
f0127c11:	68 c2 0a 00 00       	push   $0xac2
f0127c16:	68 7a b1 13 f0       	push   $0xf013b17a
f0127c1b:	e8 e5 85 fd ff       	call   f0100205 <_panic>

	//Check memory access after kfreeall
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0127c20:	83 ec 0c             	sub    $0xc,%esp
f0127c23:	6a 03                	push   $0x3
f0127c25:	e8 59 56 fe ff       	call   f010d283 <sys_bypassPageFault>
f0127c2a:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0127c2d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127c34:	e9 82 00 00 00       	jmp    f0127cbb <test_kfreeall+0x137f>
		{
			ptr = (char *) ptr_allocations[i];
f0127c39:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127c3c:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f0127c43:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0127c46:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127c49:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0127c4c:	e8 20 56 fe ff       	call   f010d271 <sys_rcr2>
f0127c51:	89 c2                	mov    %eax,%edx
f0127c53:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127c56:	39 c2                	cmp    %eax,%edx
f0127c58:	74 17                	je     f0127c71 <test_kfreeall+0x1335>
f0127c5a:	83 ec 04             	sub    $0x4,%esp
f0127c5d:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0127c62:	68 d0 0a 00 00       	push   $0xad0
f0127c67:	68 7a b1 13 f0       	push   $0xf013b17a
f0127c6c:	e8 94 85 fd ff       	call   f0100205 <_panic>
			ptr[lastIndices[i]] = 10;
f0127c71:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127c74:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0127c7b:	89 c2                	mov    %eax,%edx
f0127c7d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127c80:	01 d0                	add    %edx,%eax
f0127c82:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0127c85:	e8 e7 55 fe ff       	call   f010d271 <sys_rcr2>
f0127c8a:	89 c2                	mov    %eax,%edx
f0127c8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127c8f:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0127c96:	89 c1                	mov    %eax,%ecx
f0127c98:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127c9b:	01 c8                	add    %ecx,%eax
f0127c9d:	39 c2                	cmp    %eax,%edx
f0127c9f:	74 17                	je     f0127cb8 <test_kfreeall+0x137c>
f0127ca1:	83 ec 04             	sub    $0x4,%esp
f0127ca4:	68 e0 b9 13 f0       	push   $0xf013b9e0
f0127ca9:	68 d2 0a 00 00       	push   $0xad2
f0127cae:	68 7a b1 13 f0       	push   $0xf013b17a
f0127cb3:	e8 4d 85 fd ff       	call   f0100205 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0127cb8:	ff 45 f4             	incl   -0xc(%ebp)
f0127cbb:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0127cbf:	0f 8e 74 ff ff ff    	jle    f0127c39 <test_kfreeall+0x12fd>
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}
		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0127cc5:	83 ec 0c             	sub    $0xc,%esp
f0127cc8:	6a 00                	push   $0x0
f0127cca:	e8 b4 55 fe ff       	call   f010d283 <sys_bypassPageFault>
f0127ccf:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfreeall
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0127cd2:	e8 0c 51 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0127cd7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127cda:	e8 c7 c0 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0127cdf:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(4*Mega);
f0127ce2:	83 ec 0c             	sub    $0xc,%esp
f0127ce5:	68 00 00 40 00       	push   $0x400000
f0127cea:	e8 72 fd fd ff       	call   f0107a61 <kmalloc>
f0127cef:	83 c4 10             	add    $0x10,%esp
f0127cf2:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (KERNEL_HEAP_START)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f0127cf8:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0127cfe:	3d 00 00 00 f6       	cmp    $0xf6000000,%eax
f0127d03:	74 17                	je     f0127d1c <test_kfreeall+0x13e0>
f0127d05:	83 ec 04             	sub    $0x4,%esp
f0127d08:	68 84 be 13 f0       	push   $0xf013be84
f0127d0d:	68 de 0a 00 00       	push   $0xade
f0127d12:	68 7a b1 13 f0       	push   $0xf013b17a
f0127d17:	e8 e9 84 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127d1c:	e8 85 c0 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0127d21:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127d24:	74 17                	je     f0127d3d <test_kfreeall+0x1401>
f0127d26:	83 ec 04             	sub    $0x4,%esp
f0127d29:	68 94 b1 13 f0       	push   $0xf013b194
f0127d2e:	68 df 0a 00 00       	push   $0xadf
f0127d33:	68 7a b1 13 f0       	push   $0xf013b17a
f0127d38:	e8 c8 84 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127d3d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127d40:	e8 9e 50 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0127d45:	29 c3                	sub    %eax,%ebx
f0127d47:	89 d8                	mov    %ebx,%eax
f0127d49:	3d 00 04 00 00       	cmp    $0x400,%eax
f0127d4e:	74 17                	je     f0127d67 <test_kfreeall+0x142b>
f0127d50:	83 ec 04             	sub    $0x4,%esp
f0127d53:	68 fc b1 13 f0       	push   $0xf013b1fc
f0127d58:	68 e0 0a 00 00       	push   $0xae0
f0127d5d:	68 7a b1 13 f0       	push   $0xf013b17a
f0127d62:	e8 9e 84 fd ff       	call   f0100205 <_panic>

		//12 KB
		freeFrames = sys_calculate_free_frames() ;
f0127d67:	e8 77 50 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0127d6c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127d6f:	e8 32 c0 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0127d74:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[11] = kmalloc(12*kilo);
f0127d77:	83 ec 0c             	sub    $0xc,%esp
f0127d7a:	68 00 30 00 00       	push   $0x3000
f0127d7f:	e8 dd fc fd ff       	call   f0107a61 <kmalloc>
f0127d84:	83 c4 10             	add    $0x10,%esp
f0127d87:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		if ((uint32) ptr_allocations[11] != (KERNEL_HEAP_START + 4*Mega)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f0127d8d:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0127d93:	3d 00 00 40 f6       	cmp    $0xf6400000,%eax
f0127d98:	74 17                	je     f0127db1 <test_kfreeall+0x1475>
f0127d9a:	83 ec 04             	sub    $0x4,%esp
f0127d9d:	68 84 be 13 f0       	push   $0xf013be84
f0127da2:	68 e6 0a 00 00       	push   $0xae6
f0127da7:	68 7a b1 13 f0       	push   $0xf013b17a
f0127dac:	e8 54 84 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127db1:	e8 f0 bf fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0127db6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127db9:	74 17                	je     f0127dd2 <test_kfreeall+0x1496>
f0127dbb:	83 ec 04             	sub    $0x4,%esp
f0127dbe:	68 94 b1 13 f0       	push   $0xf013b194
f0127dc3:	68 e7 0a 00 00       	push   $0xae7
f0127dc8:	68 7a b1 13 f0       	push   $0xf013b17a
f0127dcd:	e8 33 84 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 3) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127dd2:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127dd5:	e8 09 50 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0127dda:	29 c3                	sub    %eax,%ebx
f0127ddc:	89 d8                	mov    %ebx,%eax
f0127dde:	83 f8 03             	cmp    $0x3,%eax
f0127de1:	74 17                	je     f0127dfa <test_kfreeall+0x14be>
f0127de3:	83 ec 04             	sub    $0x4,%esp
f0127de6:	68 fc b1 13 f0       	push   $0xf013b1fc
f0127deb:	68 e8 0a 00 00       	push   $0xae8
f0127df0:	68 7a b1 13 f0       	push   $0xf013b17a
f0127df5:	e8 0b 84 fd ff       	call   f0100205 <_panic>
	}

	//kfree one of the newly allocated space
	{
		//kfree 12 KB
		freeFrames = sys_calculate_free_frames() ;
f0127dfa:	e8 e4 4f fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0127dff:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127e02:	e8 9f bf fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0127e07:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[11]);
f0127e0a:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0127e10:	83 ec 0c             	sub    $0xc,%esp
f0127e13:	50                   	push   %eax
f0127e14:	e8 5e fd fd ff       	call   f0107b77 <kfree>
f0127e19:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127e1c:	e8 85 bf fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0127e21:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127e24:	74 17                	je     f0127e3d <test_kfreeall+0x1501>
f0127e26:	83 ec 04             	sub    $0x4,%esp
f0127e29:	68 94 b1 13 f0       	push   $0xf013b194
f0127e2e:	68 f2 0a 00 00       	push   $0xaf2
f0127e33:	68 7a b1 13 f0       	push   $0xf013b17a
f0127e38:	e8 c8 83 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127e3d:	e8 a1 4f fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0127e42:	89 c2                	mov    %eax,%edx
f0127e44:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127e47:	29 c2                	sub    %eax,%edx
f0127e49:	89 d0                	mov    %edx,%eax
f0127e4b:	83 f8 03             	cmp    $0x3,%eax
f0127e4e:	74 17                	je     f0127e67 <test_kfreeall+0x152b>
f0127e50:	83 ec 04             	sub    $0x4,%esp
f0127e53:	68 2c ba 13 f0       	push   $0xf013ba2c
f0127e58:	68 f3 0a 00 00       	push   $0xaf3
f0127e5d:	68 7a b1 13 f0       	push   $0xf013b17a
f0127e62:	e8 9e 83 fd ff       	call   f0100205 <_panic>
	}

	//kfree non-exist item
	{
		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127e67:	e8 77 4f fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0127e6c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127e6f:	e8 32 bf fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0127e74:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0127e77:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0127e7d:	83 ec 0c             	sub    $0xc,%esp
f0127e80:	50                   	push   %eax
f0127e81:	e8 f1 fc fd ff       	call   f0107b77 <kfree>
f0127e86:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127e89:	e8 18 bf fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0127e8e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127e91:	74 17                	je     f0127eaa <test_kfreeall+0x156e>
f0127e93:	83 ec 04             	sub    $0x4,%esp
f0127e96:	68 94 b1 13 f0       	push   $0xf013b194
f0127e9b:	68 fc 0a 00 00       	push   $0xafc
f0127ea0:	68 7a b1 13 f0       	push   $0xf013b17a
f0127ea5:	e8 5b 83 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127eaa:	e8 34 4f fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0127eaf:	89 c2                	mov    %eax,%edx
f0127eb1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127eb4:	39 c2                	cmp    %eax,%edx
f0127eb6:	74 17                	je     f0127ecf <test_kfreeall+0x1593>
f0127eb8:	83 ec 04             	sub    $0x4,%esp
f0127ebb:	68 2c ba 13 f0       	push   $0xf013ba2c
f0127ec0:	68 fd 0a 00 00       	push   $0xafd
f0127ec5:	68 7a b1 13 f0       	push   $0xf013b17a
f0127eca:	e8 36 83 fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0127ecf:	e8 0f 4f fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0127ed4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127ed7:	e8 ca be fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0127edc:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0127edf:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0127ee5:	83 ec 0c             	sub    $0xc,%esp
f0127ee8:	50                   	push   %eax
f0127ee9:	e8 89 fc fd ff       	call   f0107b77 <kfree>
f0127eee:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127ef1:	e8 b0 be fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0127ef6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127ef9:	74 17                	je     f0127f12 <test_kfreeall+0x15d6>
f0127efb:	83 ec 04             	sub    $0x4,%esp
f0127efe:	68 94 b1 13 f0       	push   $0xf013b194
f0127f03:	68 03 0b 00 00       	push   $0xb03
f0127f08:	68 7a b1 13 f0       	push   $0xf013b17a
f0127f0d:	e8 f3 82 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127f12:	e8 cc 4e fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0127f17:	89 c2                	mov    %eax,%edx
f0127f19:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127f1c:	39 c2                	cmp    %eax,%edx
f0127f1e:	74 17                	je     f0127f37 <test_kfreeall+0x15fb>
f0127f20:	83 ec 04             	sub    $0x4,%esp
f0127f23:	68 2c ba 13 f0       	push   $0xf013ba2c
f0127f28:	68 04 0b 00 00       	push   $0xb04
f0127f2d:	68 7a b1 13 f0       	push   $0xf013b17a
f0127f32:	e8 ce 82 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0127f37:	e8 a7 4e fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0127f3c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127f3f:	e8 62 be fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0127f44:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0127f47:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0127f4d:	83 ec 0c             	sub    $0xc,%esp
f0127f50:	50                   	push   %eax
f0127f51:	e8 21 fc fd ff       	call   f0107b77 <kfree>
f0127f56:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127f59:	e8 48 be fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0127f5e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127f61:	74 17                	je     f0127f7a <test_kfreeall+0x163e>
f0127f63:	83 ec 04             	sub    $0x4,%esp
f0127f66:	68 94 b1 13 f0       	push   $0xf013b194
f0127f6b:	68 0a 0b 00 00       	push   $0xb0a
f0127f70:	68 7a b1 13 f0       	push   $0xf013b17a
f0127f75:	e8 8b 82 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127f7a:	e8 64 4e fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0127f7f:	89 c2                	mov    %eax,%edx
f0127f81:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127f84:	39 c2                	cmp    %eax,%edx
f0127f86:	74 17                	je     f0127f9f <test_kfreeall+0x1663>
f0127f88:	83 ec 04             	sub    $0x4,%esp
f0127f8b:	68 2c ba 13 f0       	push   $0xf013ba2c
f0127f90:	68 0b 0b 00 00       	push   $0xb0b
f0127f95:	68 7a b1 13 f0       	push   $0xf013b17a
f0127f9a:	e8 66 82 fd ff       	call   f0100205 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0127f9f:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0127fa6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0127fad:	eb 48                	jmp    f0127ff7 <test_kfreeall+0x16bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0127faf:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0127fb2:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0127fb7:	83 ec 04             	sub    $0x4,%esp
f0127fba:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f0127fc0:	51                   	push   %ecx
f0127fc1:	52                   	push   %edx
f0127fc2:	50                   	push   %eax
f0127fc3:	e8 c7 ea fd ff       	call   f0106a8f <get_page_table>
f0127fc8:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0127fcb:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0127fd1:	85 c0                	test   %eax,%eax
f0127fd3:	75 17                	jne    f0127fec <test_kfreeall+0x16b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0127fd5:	83 ec 04             	sub    $0x4,%esp
f0127fd8:	68 7c ba 13 f0       	push   $0xf013ba7c
f0127fdd:	68 18 0b 00 00       	push   $0xb18
f0127fe2:	68 7a b1 13 f0       	push   $0xf013b17a
f0127fe7:	e8 19 82 fd ff       	call   f0100205 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0127fec:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0127ff3:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0127ff7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0127ffb:	78 b2                	js     f0127faf <test_kfreeall+0x1673>
f0127ffd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0128001:	7f 09                	jg     f012800c <test_kfreeall+0x16d0>
f0128003:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f012800a:	76 a3                	jbe    f0127faf <test_kfreeall+0x1673>
			}
		}
	}


	cprintf("\nCongratulations!! your modification is run successfully.\n");
f012800c:	83 ec 0c             	sub    $0xc,%esp
f012800f:	68 d8 be 13 f0       	push   $0xf013bed8
f0128014:	e8 f5 8c fd ff       	call   f0100d0e <cprintf>
f0128019:	83 c4 10             	add    $0x10,%esp

	return 1;
f012801c:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0128021:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0128024:	5b                   	pop    %ebx
f0128025:	5f                   	pop    %edi
f0128026:	5d                   	pop    %ebp
f0128027:	c3                   	ret    

f0128028 <test_kexpand>:


extern void kexpand(uint32 newSize) ;

int test_kexpand()
{
f0128028:	55                   	push   %ebp
f0128029:	89 e5                	mov    %esp,%ebp
f012802b:	57                   	push   %edi
f012802c:	53                   	push   %ebx
f012802d:	81 ec 90 01 00 00    	sub    $0x190,%esp
	char minByte = 1<<7;
f0128033:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0128037:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f012803b:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0128041:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0128047:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f012804e:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0128055:	e8 89 4d fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012805a:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012805d:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f0128063:	b9 14 00 00 00       	mov    $0x14,%ecx
f0128068:	b8 00 00 00 00       	mov    $0x0,%eax
f012806d:	89 d7                	mov    %edx,%edi
f012806f:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f0128071:	8d 95 6c fe ff ff    	lea    -0x194(%ebp),%edx
f0128077:	b9 14 00 00 00       	mov    $0x14,%ecx
f012807c:	b8 00 00 00 00       	mov    $0x0,%eax
f0128081:	89 d7                	mov    %edx,%edi
f0128083:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0128085:	e8 59 4d fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012808a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012808d:	e8 14 bd fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0128092:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0128095:	83 ec 0c             	sub    $0xc,%esp
f0128098:	68 00 fc 1f 00       	push   $0x1ffc00
f012809d:	e8 bf f9 fd ff       	call   f0107a61 <kmalloc>
f01280a2:	83 c4 10             	add    $0x10,%esp
f01280a5:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01280ab:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01280b1:	89 c1                	mov    %eax,%ecx
f01280b3:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f01280ba:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01280bd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01280c2:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01280c5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01280c8:	ba 00 00 00 00       	mov    $0x0,%edx
f01280cd:	f7 75 d4             	divl   -0x2c(%ebp)
f01280d0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01280d3:	29 d0                	sub    %edx,%eax
f01280d5:	89 c3                	mov    %eax,%ebx
f01280d7:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f01280de:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01280e3:	0f b6 d0             	movzbl %al,%edx
f01280e6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01280e9:	01 d0                	add    %edx,%eax
f01280eb:	48                   	dec    %eax
f01280ec:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01280ef:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01280f2:	ba 00 00 00 00       	mov    $0x0,%edx
f01280f7:	f7 75 cc             	divl   -0x34(%ebp)
f01280fa:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01280fd:	29 d0                	sub    %edx,%eax
f01280ff:	01 c3                	add    %eax,%ebx
f0128101:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0128108:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012810d:	0f b6 c0             	movzbl %al,%eax
f0128110:	c1 e0 04             	shl    $0x4,%eax
f0128113:	89 c2                	mov    %eax,%edx
f0128115:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0128118:	01 d0                	add    %edx,%eax
f012811a:	48                   	dec    %eax
f012811b:	89 45 c0             	mov    %eax,-0x40(%ebp)
f012811e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0128121:	ba 00 00 00 00       	mov    $0x0,%edx
f0128126:	f7 75 c4             	divl   -0x3c(%ebp)
f0128129:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012812c:	29 d0                	sub    %edx,%eax
f012812e:	01 d8                	add    %ebx,%eax
f0128130:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0128135:	39 c1                	cmp    %eax,%ecx
f0128137:	74 17                	je     f0128150 <test_kexpand+0x128>
f0128139:	83 ec 04             	sub    $0x4,%esp
f012813c:	68 60 b2 13 f0       	push   $0xf013b260
f0128141:	68 43 0b 00 00       	push   $0xb43
f0128146:	68 7a b1 13 f0       	push   $0xf013b17a
f012814b:	e8 b5 80 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128150:	e8 51 bc fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0128155:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128158:	74 17                	je     f0128171 <test_kexpand+0x149>
f012815a:	83 ec 04             	sub    $0x4,%esp
f012815d:	68 94 b1 13 f0       	push   $0xf013b194
f0128162:	68 44 0b 00 00       	push   $0xb44
f0128167:	68 7a b1 13 f0       	push   $0xf013b17a
f012816c:	e8 94 80 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128171:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128174:	e8 6a 4c fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0128179:	29 c3                	sub    %eax,%ebx
f012817b:	89 d8                	mov    %ebx,%eax
f012817d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128182:	74 17                	je     f012819b <test_kexpand+0x173>
f0128184:	83 ec 04             	sub    $0x4,%esp
f0128187:	68 fc b1 13 f0       	push   $0xf013b1fc
f012818c:	68 45 0b 00 00       	push   $0xb45
f0128191:	68 7a b1 13 f0       	push   $0xf013b17a
f0128196:	e8 6a 80 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f012819b:	c7 85 bc fe ff ff ff 	movl   $0x1ffbff,-0x144(%ebp)
f01281a2:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01281a5:	e8 39 4c fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01281aa:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01281ad:	e8 f4 bb fd ff       	call   f0103da6 <pf_calculate_free_frames>
f01281b2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01281b5:	83 ec 0c             	sub    $0xc,%esp
f01281b8:	68 00 fc 1f 00       	push   $0x1ffc00
f01281bd:	e8 9f f8 fd ff       	call   f0107a61 <kmalloc>
f01281c2:	83 c4 10             	add    $0x10,%esp
f01281c5:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01281cb:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01281d1:	89 c1                	mov    %eax,%ecx
f01281d3:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f01281da:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01281dd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01281e2:	89 45 b8             	mov    %eax,-0x48(%ebp)
f01281e5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01281e8:	ba 00 00 00 00       	mov    $0x0,%edx
f01281ed:	f7 75 bc             	divl   -0x44(%ebp)
f01281f0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01281f3:	29 d0                	sub    %edx,%eax
f01281f5:	89 c3                	mov    %eax,%ebx
f01281f7:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f01281fe:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0128203:	0f b6 d0             	movzbl %al,%edx
f0128206:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0128209:	01 d0                	add    %edx,%eax
f012820b:	48                   	dec    %eax
f012820c:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012820f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0128212:	ba 00 00 00 00       	mov    $0x0,%edx
f0128217:	f7 75 b4             	divl   -0x4c(%ebp)
f012821a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012821d:	29 d0                	sub    %edx,%eax
f012821f:	01 c3                	add    %eax,%ebx
f0128221:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0128228:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012822d:	0f b6 c0             	movzbl %al,%eax
f0128230:	c1 e0 04             	shl    $0x4,%eax
f0128233:	89 c2                	mov    %eax,%edx
f0128235:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0128238:	01 d0                	add    %edx,%eax
f012823a:	48                   	dec    %eax
f012823b:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012823e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0128241:	ba 00 00 00 00       	mov    $0x0,%edx
f0128246:	f7 75 ac             	divl   -0x54(%ebp)
f0128249:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012824c:	29 d0                	sub    %edx,%eax
f012824e:	01 d8                	add    %ebx,%eax
f0128250:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0128255:	39 c1                	cmp    %eax,%ecx
f0128257:	74 17                	je     f0128270 <test_kexpand+0x248>
f0128259:	83 ec 04             	sub    $0x4,%esp
f012825c:	68 60 b2 13 f0       	push   $0xf013b260
f0128261:	68 4c 0b 00 00       	push   $0xb4c
f0128266:	68 7a b1 13 f0       	push   $0xf013b17a
f012826b:	e8 95 7f fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128270:	e8 31 bb fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0128275:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128278:	74 17                	je     f0128291 <test_kexpand+0x269>
f012827a:	83 ec 04             	sub    $0x4,%esp
f012827d:	68 94 b1 13 f0       	push   $0xf013b194
f0128282:	68 4d 0b 00 00       	push   $0xb4d
f0128287:	68 7a b1 13 f0       	push   $0xf013b17a
f012828c:	e8 74 7f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128291:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128294:	e8 4a 4b fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0128299:	29 c3                	sub    %eax,%ebx
f012829b:	89 d8                	mov    %ebx,%eax
f012829d:	3d 00 02 00 00       	cmp    $0x200,%eax
f01282a2:	74 17                	je     f01282bb <test_kexpand+0x293>
f01282a4:	83 ec 04             	sub    $0x4,%esp
f01282a7:	68 fc b1 13 f0       	push   $0xf013b1fc
f01282ac:	68 4e 0b 00 00       	push   $0xb4e
f01282b1:	68 7a b1 13 f0       	push   $0xf013b17a
f01282b6:	e8 4a 7f fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01282bb:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f01282c2:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01282c5:	e8 19 4b fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01282ca:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01282cd:	e8 d4 ba fd ff       	call   f0103da6 <pf_calculate_free_frames>
f01282d2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01282d5:	83 ec 0c             	sub    $0xc,%esp
f01282d8:	68 00 08 00 00       	push   $0x800
f01282dd:	e8 7f f7 fd ff       	call   f0107a61 <kmalloc>
f01282e2:	83 c4 10             	add    $0x10,%esp
f01282e5:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01282eb:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01282f1:	89 c1                	mov    %eax,%ecx
f01282f3:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01282fa:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01282fd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128302:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0128305:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0128308:	ba 00 00 00 00       	mov    $0x0,%edx
f012830d:	f7 75 a4             	divl   -0x5c(%ebp)
f0128310:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0128313:	29 d0                	sub    %edx,%eax
f0128315:	89 c3                	mov    %eax,%ebx
f0128317:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012831e:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0128323:	0f b6 d0             	movzbl %al,%edx
f0128326:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128329:	01 d0                	add    %edx,%eax
f012832b:	48                   	dec    %eax
f012832c:	89 45 98             	mov    %eax,-0x68(%ebp)
f012832f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0128332:	ba 00 00 00 00       	mov    $0x0,%edx
f0128337:	f7 75 9c             	divl   -0x64(%ebp)
f012833a:	8b 45 98             	mov    -0x68(%ebp),%eax
f012833d:	29 d0                	sub    %edx,%eax
f012833f:	01 c3                	add    %eax,%ebx
f0128341:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0128348:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012834d:	0f b6 c0             	movzbl %al,%eax
f0128350:	c1 e0 04             	shl    $0x4,%eax
f0128353:	89 c2                	mov    %eax,%edx
f0128355:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0128358:	01 d0                	add    %edx,%eax
f012835a:	48                   	dec    %eax
f012835b:	89 45 90             	mov    %eax,-0x70(%ebp)
f012835e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0128361:	ba 00 00 00 00       	mov    $0x0,%edx
f0128366:	f7 75 94             	divl   -0x6c(%ebp)
f0128369:	8b 45 90             	mov    -0x70(%ebp),%eax
f012836c:	29 d0                	sub    %edx,%eax
f012836e:	01 d8                	add    %ebx,%eax
f0128370:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0128375:	39 c1                	cmp    %eax,%ecx
f0128377:	74 17                	je     f0128390 <test_kexpand+0x368>
f0128379:	83 ec 04             	sub    $0x4,%esp
f012837c:	68 60 b2 13 f0       	push   $0xf013b260
f0128381:	68 55 0b 00 00       	push   $0xb55
f0128386:	68 7a b1 13 f0       	push   $0xf013b17a
f012838b:	e8 75 7e fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128390:	e8 11 ba fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0128395:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128398:	74 17                	je     f01283b1 <test_kexpand+0x389>
f012839a:	83 ec 04             	sub    $0x4,%esp
f012839d:	68 94 b1 13 f0       	push   $0xf013b194
f01283a2:	68 56 0b 00 00       	push   $0xb56
f01283a7:	68 7a b1 13 f0       	push   $0xf013b17a
f01283ac:	e8 54 7e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01283b1:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01283b4:	e8 2a 4a fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01283b9:	29 c3                	sub    %eax,%ebx
f01283bb:	89 d8                	mov    %ebx,%eax
f01283bd:	83 f8 01             	cmp    $0x1,%eax
f01283c0:	74 17                	je     f01283d9 <test_kexpand+0x3b1>
f01283c2:	83 ec 04             	sub    $0x4,%esp
f01283c5:	68 fc b1 13 f0       	push   $0xf013b1fc
f01283ca:	68 57 0b 00 00       	push   $0xb57
f01283cf:	68 7a b1 13 f0       	push   $0xf013b17a
f01283d4:	e8 2c 7e fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01283d9:	c7 85 c4 fe ff ff ff 	movl   $0x7ff,-0x13c(%ebp)
f01283e0:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01283e3:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01283e9:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01283ec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01283f3:	eb 0e                	jmp    f0128403 <test_kexpand+0x3db>
		{
			ptr[i] = 2 ;
f01283f5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01283f8:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01283fb:	01 d0                	add    %edx,%eax
f01283fd:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0128400:	ff 45 f4             	incl   -0xc(%ebp)
f0128403:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0128409:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012840c:	7f e7                	jg     f01283f5 <test_kexpand+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012840e:	e8 d0 49 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0128413:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128416:	e8 8b b9 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012841b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012841e:	83 ec 0c             	sub    $0xc,%esp
f0128421:	68 00 08 00 00       	push   $0x800
f0128426:	e8 36 f6 fd ff       	call   f0107a61 <kmalloc>
f012842b:	83 c4 10             	add    $0x10,%esp
f012842e:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128434:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012843a:	89 c1                	mov    %eax,%ecx
f012843c:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0128443:	8b 45 88             	mov    -0x78(%ebp),%eax
f0128446:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012844b:	89 45 84             	mov    %eax,-0x7c(%ebp)
f012844e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0128451:	ba 00 00 00 00       	mov    $0x0,%edx
f0128456:	f7 75 88             	divl   -0x78(%ebp)
f0128459:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012845c:	29 d0                	sub    %edx,%eax
f012845e:	89 c3                	mov    %eax,%ebx
f0128460:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0128467:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012846c:	0f b6 d0             	movzbl %al,%edx
f012846f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0128472:	01 d0                	add    %edx,%eax
f0128474:	48                   	dec    %eax
f0128475:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f012847b:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0128481:	ba 00 00 00 00       	mov    $0x0,%edx
f0128486:	f7 75 80             	divl   -0x80(%ebp)
f0128489:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012848f:	29 d0                	sub    %edx,%eax
f0128491:	01 c3                	add    %eax,%ebx
f0128493:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f012849a:	10 00 00 
f012849d:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01284a2:	0f b6 c0             	movzbl %al,%eax
f01284a5:	c1 e0 04             	shl    $0x4,%eax
f01284a8:	89 c2                	mov    %eax,%edx
f01284aa:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01284b0:	01 d0                	add    %edx,%eax
f01284b2:	48                   	dec    %eax
f01284b3:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01284b9:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01284bf:	ba 00 00 00 00       	mov    $0x0,%edx
f01284c4:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01284ca:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01284d0:	29 d0                	sub    %edx,%eax
f01284d2:	01 d8                	add    %ebx,%eax
f01284d4:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01284d9:	39 c1                	cmp    %eax,%ecx
f01284db:	74 17                	je     f01284f4 <test_kexpand+0x4cc>
f01284dd:	83 ec 04             	sub    $0x4,%esp
f01284e0:	68 60 b2 13 f0       	push   $0xf013b260
f01284e5:	68 63 0b 00 00       	push   $0xb63
f01284ea:	68 7a b1 13 f0       	push   $0xf013b17a
f01284ef:	e8 11 7d fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01284f4:	e8 ad b8 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f01284f9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01284fc:	74 17                	je     f0128515 <test_kexpand+0x4ed>
f01284fe:	83 ec 04             	sub    $0x4,%esp
f0128501:	68 94 b1 13 f0       	push   $0xf013b194
f0128506:	68 64 0b 00 00       	push   $0xb64
f012850b:	68 7a b1 13 f0       	push   $0xf013b17a
f0128510:	e8 f0 7c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128515:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128518:	e8 c6 48 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012851d:	29 c3                	sub    %eax,%ebx
f012851f:	89 d8                	mov    %ebx,%eax
f0128521:	83 f8 01             	cmp    $0x1,%eax
f0128524:	74 17                	je     f012853d <test_kexpand+0x515>
f0128526:	83 ec 04             	sub    $0x4,%esp
f0128529:	68 fc b1 13 f0       	push   $0xf013b1fc
f012852e:	68 65 0b 00 00       	push   $0xb65
f0128533:	68 7a b1 13 f0       	push   $0xf013b17a
f0128538:	e8 c8 7c fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012853d:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f0128544:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0128547:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012854d:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0128550:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128557:	eb 0e                	jmp    f0128567 <test_kexpand+0x53f>
		{
			ptr[i] = 3 ;
f0128559:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012855c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012855f:	01 d0                	add    %edx,%eax
f0128561:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0128564:	ff 45 f4             	incl   -0xc(%ebp)
f0128567:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012856d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128570:	7f e7                	jg     f0128559 <test_kexpand+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0128572:	e8 6c 48 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0128577:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012857a:	e8 27 b8 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012857f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0128582:	83 ec 0c             	sub    $0xc,%esp
f0128585:	68 00 1c 00 00       	push   $0x1c00
f012858a:	e8 d2 f4 fd ff       	call   f0107a61 <kmalloc>
f012858f:	83 c4 10             	add    $0x10,%esp
f0128592:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128598:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012859e:	89 c1                	mov    %eax,%ecx
f01285a0:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01285a7:	10 00 00 
f01285aa:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01285b0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01285b5:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01285bb:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01285c1:	ba 00 00 00 00       	mov    $0x0,%edx
f01285c6:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01285cc:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01285d2:	29 d0                	sub    %edx,%eax
f01285d4:	89 c3                	mov    %eax,%ebx
f01285d6:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01285dd:	10 00 00 
f01285e0:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01285e5:	0f b6 d0             	movzbl %al,%edx
f01285e8:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01285ee:	01 d0                	add    %edx,%eax
f01285f0:	48                   	dec    %eax
f01285f1:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01285f7:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01285fd:	ba 00 00 00 00       	mov    $0x0,%edx
f0128602:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0128608:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012860e:	29 d0                	sub    %edx,%eax
f0128610:	01 c3                	add    %eax,%ebx
f0128612:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0128619:	10 00 00 
f012861c:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0128621:	0f b6 c0             	movzbl %al,%eax
f0128624:	c1 e0 04             	shl    $0x4,%eax
f0128627:	89 c2                	mov    %eax,%edx
f0128629:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012862f:	01 d0                	add    %edx,%eax
f0128631:	48                   	dec    %eax
f0128632:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0128638:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012863e:	ba 00 00 00 00       	mov    $0x0,%edx
f0128643:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0128649:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012864f:	29 d0                	sub    %edx,%eax
f0128651:	01 d8                	add    %ebx,%eax
f0128653:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0128658:	39 c1                	cmp    %eax,%ecx
f012865a:	74 17                	je     f0128673 <test_kexpand+0x64b>
f012865c:	83 ec 04             	sub    $0x4,%esp
f012865f:	68 60 b2 13 f0       	push   $0xf013b260
f0128664:	68 71 0b 00 00       	push   $0xb71
f0128669:	68 7a b1 13 f0       	push   $0xf013b17a
f012866e:	e8 92 7b fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128673:	e8 2e b7 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0128678:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012867b:	74 17                	je     f0128694 <test_kexpand+0x66c>
f012867d:	83 ec 04             	sub    $0x4,%esp
f0128680:	68 94 b1 13 f0       	push   $0xf013b194
f0128685:	68 72 0b 00 00       	push   $0xb72
f012868a:	68 7a b1 13 f0       	push   $0xf013b17a
f012868f:	e8 71 7b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128694:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128697:	e8 47 47 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012869c:	29 c3                	sub    %eax,%ebx
f012869e:	89 d8                	mov    %ebx,%eax
f01286a0:	83 f8 02             	cmp    $0x2,%eax
f01286a3:	74 17                	je     f01286bc <test_kexpand+0x694>
f01286a5:	83 ec 04             	sub    $0x4,%esp
f01286a8:	68 fc b1 13 f0       	push   $0xf013b1fc
f01286ad:	68 73 0b 00 00       	push   $0xb73
f01286b2:	68 7a b1 13 f0       	push   $0xf013b17a
f01286b7:	e8 49 7b fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01286bc:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f01286c3:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01286c6:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01286cc:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01286cf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01286d6:	eb 0e                	jmp    f01286e6 <test_kexpand+0x6be>
		{
			ptr[i] = 4 ;
f01286d8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01286db:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01286de:	01 d0                	add    %edx,%eax
f01286e0:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01286e3:	ff 45 f4             	incl   -0xc(%ebp)
f01286e6:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01286ec:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01286ef:	7f e7                	jg     f01286d8 <test_kexpand+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01286f1:	e8 ed 46 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01286f6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01286f9:	e8 a8 b6 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f01286fe:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0128701:	83 ec 0c             	sub    $0xc,%esp
f0128704:	68 00 fc 2f 00       	push   $0x2ffc00
f0128709:	e8 53 f3 fd ff       	call   f0107a61 <kmalloc>
f012870e:	83 c4 10             	add    $0x10,%esp
f0128711:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128717:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012871d:	89 c1                	mov    %eax,%ecx
f012871f:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0128726:	10 00 00 
f0128729:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012872f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128734:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f012873a:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128740:	ba 00 00 00 00       	mov    $0x0,%edx
f0128745:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f012874b:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128751:	29 d0                	sub    %edx,%eax
f0128753:	89 c3                	mov    %eax,%ebx
f0128755:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f012875c:	10 00 00 
f012875f:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0128764:	0f b6 d0             	movzbl %al,%edx
f0128767:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012876d:	01 d0                	add    %edx,%eax
f012876f:	48                   	dec    %eax
f0128770:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0128776:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012877c:	ba 00 00 00 00       	mov    $0x0,%edx
f0128781:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0128787:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012878d:	29 d0                	sub    %edx,%eax
f012878f:	01 c3                	add    %eax,%ebx
f0128791:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0128798:	10 00 00 
f012879b:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01287a0:	0f b6 c0             	movzbl %al,%eax
f01287a3:	c1 e0 04             	shl    $0x4,%eax
f01287a6:	89 c2                	mov    %eax,%edx
f01287a8:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01287ae:	01 d0                	add    %edx,%eax
f01287b0:	48                   	dec    %eax
f01287b1:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01287b7:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01287bd:	ba 00 00 00 00       	mov    $0x0,%edx
f01287c2:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01287c8:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01287ce:	29 d0                	sub    %edx,%eax
f01287d0:	01 d8                	add    %ebx,%eax
f01287d2:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01287d7:	39 c1                	cmp    %eax,%ecx
f01287d9:	74 17                	je     f01287f2 <test_kexpand+0x7ca>
f01287db:	83 ec 04             	sub    $0x4,%esp
f01287de:	68 60 b2 13 f0       	push   $0xf013b260
f01287e3:	68 7f 0b 00 00       	push   $0xb7f
f01287e8:	68 7a b1 13 f0       	push   $0xf013b17a
f01287ed:	e8 13 7a fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01287f2:	e8 af b5 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f01287f7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01287fa:	74 17                	je     f0128813 <test_kexpand+0x7eb>
f01287fc:	83 ec 04             	sub    $0x4,%esp
f01287ff:	68 94 b1 13 f0       	push   $0xf013b194
f0128804:	68 80 0b 00 00       	push   $0xb80
f0128809:	68 7a b1 13 f0       	push   $0xf013b17a
f012880e:	e8 f2 79 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128813:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128816:	e8 c8 45 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012881b:	29 c3                	sub    %eax,%ebx
f012881d:	89 d8                	mov    %ebx,%eax
f012881f:	3d 00 03 00 00       	cmp    $0x300,%eax
f0128824:	74 17                	je     f012883d <test_kexpand+0x815>
f0128826:	83 ec 04             	sub    $0x4,%esp
f0128829:	68 fc b1 13 f0       	push   $0xf013b1fc
f012882e:	68 81 0b 00 00       	push   $0xb81
f0128833:	68 7a b1 13 f0       	push   $0xf013b17a
f0128838:	e8 c8 79 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f012883d:	c7 85 d0 fe ff ff ff 	movl   $0x2ffbff,-0x130(%ebp)
f0128844:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0128847:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012884d:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0128850:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128857:	eb 0e                	jmp    f0128867 <test_kexpand+0x83f>
		{
			ptr[i] = 5 ;
f0128859:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012885c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012885f:	01 d0                	add    %edx,%eax
f0128861:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0128864:	ff 45 f4             	incl   -0xc(%ebp)
f0128867:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012886d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128870:	7f e7                	jg     f0128859 <test_kexpand+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0128872:	e8 6c 45 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0128877:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012887a:	e8 27 b5 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012887f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0128882:	83 ec 0c             	sub    $0xc,%esp
f0128885:	68 00 00 60 00       	push   $0x600000
f012888a:	e8 d2 f1 fd ff       	call   f0107a61 <kmalloc>
f012888f:	83 c4 10             	add    $0x10,%esp
f0128892:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128898:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012889e:	89 c1                	mov    %eax,%ecx
f01288a0:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01288a7:	10 00 00 
f01288aa:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01288b0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01288b5:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f01288bb:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01288c1:	ba 00 00 00 00       	mov    $0x0,%edx
f01288c6:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f01288cc:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01288d2:	29 d0                	sub    %edx,%eax
f01288d4:	89 c3                	mov    %eax,%ebx
f01288d6:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f01288dd:	10 00 00 
f01288e0:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01288e5:	0f b6 d0             	movzbl %al,%edx
f01288e8:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01288ee:	01 d0                	add    %edx,%eax
f01288f0:	48                   	dec    %eax
f01288f1:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01288f7:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01288fd:	ba 00 00 00 00       	mov    $0x0,%edx
f0128902:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0128908:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012890e:	29 d0                	sub    %edx,%eax
f0128910:	01 c3                	add    %eax,%ebx
f0128912:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0128919:	10 00 00 
f012891c:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0128921:	0f b6 c0             	movzbl %al,%eax
f0128924:	c1 e0 04             	shl    $0x4,%eax
f0128927:	89 c2                	mov    %eax,%edx
f0128929:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012892f:	01 d0                	add    %edx,%eax
f0128931:	48                   	dec    %eax
f0128932:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0128938:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012893e:	ba 00 00 00 00       	mov    $0x0,%edx
f0128943:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0128949:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012894f:	29 d0                	sub    %edx,%eax
f0128951:	01 d8                	add    %ebx,%eax
f0128953:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0128958:	39 c1                	cmp    %eax,%ecx
f012895a:	74 17                	je     f0128973 <test_kexpand+0x94b>
f012895c:	83 ec 04             	sub    $0x4,%esp
f012895f:	68 60 b2 13 f0       	push   $0xf013b260
f0128964:	68 8d 0b 00 00       	push   $0xb8d
f0128969:	68 7a b1 13 f0       	push   $0xf013b17a
f012896e:	e8 92 78 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128973:	e8 2e b4 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0128978:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012897b:	74 17                	je     f0128994 <test_kexpand+0x96c>
f012897d:	83 ec 04             	sub    $0x4,%esp
f0128980:	68 94 b1 13 f0       	push   $0xf013b194
f0128985:	68 8e 0b 00 00       	push   $0xb8e
f012898a:	68 7a b1 13 f0       	push   $0xf013b17a
f012898f:	e8 71 78 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128994:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128997:	e8 47 44 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012899c:	29 c3                	sub    %eax,%ebx
f012899e:	89 d8                	mov    %ebx,%eax
f01289a0:	3d 00 06 00 00       	cmp    $0x600,%eax
f01289a5:	74 17                	je     f01289be <test_kexpand+0x996>
f01289a7:	83 ec 04             	sub    $0x4,%esp
f01289aa:	68 fc b1 13 f0       	push   $0xf013b1fc
f01289af:	68 8f 0b 00 00       	push   $0xb8f
f01289b4:	68 7a b1 13 f0       	push   $0xf013b17a
f01289b9:	e8 47 78 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f01289be:	c7 85 d4 fe ff ff ff 	movl   $0x17ffff,-0x12c(%ebp)
f01289c5:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f01289c8:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01289ce:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f01289d4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01289db:	eb 1a                	jmp    f01289f7 <test_kexpand+0x9cf>
		{
			arr[i] = i ;
f01289dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01289e0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01289e7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01289ed:	01 c2                	add    %eax,%edx
f01289ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01289f2:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f01289f4:	ff 45 f4             	incl   -0xc(%ebp)
f01289f7:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01289fd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128a00:	7d db                	jge    f01289dd <test_kexpand+0x9b5>
			arr[i] = i ;
		}
	}

	//Expand last allocated variable to 7 MB instead of 6 MB
	int newLastIndex = (7*Mega)/sizeof(uint32) - 1;
f0128a02:	c7 85 24 ff ff ff ff 	movl   $0x1bffff,-0xdc(%ebp)
f0128a09:	ff 1b 00 
	{
		freeFrames = sys_calculate_free_frames() ;
f0128a0c:	e8 d2 43 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0128a11:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128a14:	e8 8d b3 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0128a19:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(7*Mega) ;
f0128a1c:	83 ec 0c             	sub    $0xc,%esp
f0128a1f:	68 00 00 70 00       	push   $0x700000
f0128a24:	e8 fe f2 fd ff       	call   f0107d27 <kexpand>
f0128a29:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128a2c:	e8 75 b3 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0128a31:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128a34:	74 19                	je     f0128a4f <test_kexpand+0xa27>
f0128a36:	68 14 bf 13 f0       	push   $0xf013bf14
f0128a3b:	68 45 bf 13 f0       	push   $0xf013bf45
f0128a40:	68 a0 0b 00 00       	push   $0xba0
f0128a45:	68 7a b1 13 f0       	push   $0xf013b17a
f0128a4a:	e8 b6 77 fd ff       	call   f0100205 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 256) ;
f0128a4f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128a52:	e8 8c 43 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0128a57:	29 c3                	sub    %eax,%ebx
f0128a59:	89 d8                	mov    %ebx,%eax
f0128a5b:	3d 00 01 00 00       	cmp    $0x100,%eax
f0128a60:	74 19                	je     f0128a7b <test_kexpand+0xa53>
f0128a62:	68 5c bf 13 f0       	push   $0xf013bf5c
f0128a67:	68 45 bf 13 f0       	push   $0xf013bf45
f0128a6c:	68 a1 0b 00 00       	push   $0xba1
f0128a71:	68 7a b1 13 f0       	push   $0xf013b17a
f0128a76:	e8 8a 77 fd ff       	call   f0100205 <_panic>

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0128a7b:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0128a81:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0128a84:	eb 1a                	jmp    f0128aa0 <test_kexpand+0xa78>
		{
			arr[i] = i ;
f0128a86:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128a89:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128a90:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128a96:	01 c2                	add    %eax,%edx
f0128a98:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128a9b:	89 02                	mov    %eax,(%edx)
		kexpand(7*Mega) ;

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
		assert(freeFrames - sys_calculate_free_frames() == 256) ;

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0128a9d:	ff 45 f4             	incl   -0xc(%ebp)
f0128aa0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128aa3:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0128aa9:	7c db                	jl     f0128a86 <test_kexpand+0xa5e>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0128aab:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128ab2:	eb 37                	jmp    f0128aeb <test_kexpand+0xac3>
		{
			assert(arr[i] ==i);
f0128ab4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128ab7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128abe:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128ac4:	01 d0                	add    %edx,%eax
f0128ac6:	8b 10                	mov    (%eax),%edx
f0128ac8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128acb:	39 c2                	cmp    %eax,%edx
f0128acd:	74 19                	je     f0128ae8 <test_kexpand+0xac0>
f0128acf:	68 8c bf 13 f0       	push   $0xf013bf8c
f0128ad4:	68 45 bf 13 f0       	push   $0xf013bf45
f0128ad9:	68 ad 0b 00 00       	push   $0xbad
f0128ade:	68 7a b1 13 f0       	push   $0xf013b17a
f0128ae3:	e8 1d 77 fd ff       	call   f0100205 <_panic>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0128ae8:	ff 45 f4             	incl   -0xc(%ebp)
f0128aeb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128aee:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0128af4:	7c be                	jl     f0128ab4 <test_kexpand+0xa8c>
		}
	}

	//Expand it again to 10 MB instead of 7 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0128af6:	e8 e8 42 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0128afb:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128afe:	e8 a3 b2 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0128b03:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(10*Mega) ;
f0128b06:	83 ec 0c             	sub    $0xc,%esp
f0128b09:	68 00 00 a0 00       	push   $0xa00000
f0128b0e:	e8 14 f2 fd ff       	call   f0107d27 <kexpand>
f0128b13:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128b16:	e8 8b b2 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0128b1b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128b1e:	74 19                	je     f0128b39 <test_kexpand+0xb11>
f0128b20:	68 14 bf 13 f0       	push   $0xf013bf14
f0128b25:	68 45 bf 13 f0       	push   $0xf013bf45
f0128b2a:	68 b8 0b 00 00       	push   $0xbb8
f0128b2f:	68 7a b1 13 f0       	push   $0xf013b17a
f0128b34:	e8 cc 76 fd ff       	call   f0100205 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 768) ;
f0128b39:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128b3c:	e8 a2 42 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0128b41:	29 c3                	sub    %eax,%ebx
f0128b43:	89 d8                	mov    %ebx,%eax
f0128b45:	3d 00 03 00 00       	cmp    $0x300,%eax
f0128b4a:	74 19                	je     f0128b65 <test_kexpand+0xb3d>
f0128b4c:	68 98 bf 13 f0       	push   $0xf013bf98
f0128b51:	68 45 bf 13 f0       	push   $0xf013bf45
f0128b56:	68 b9 0b 00 00       	push   $0xbb9
f0128b5b:	68 7a b1 13 f0       	push   $0xf013b17a
f0128b60:	e8 a0 76 fd ff       	call   f0100205 <_panic>


	//Allocate after expanding last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0128b65:	e8 79 42 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0128b6a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128b6d:	e8 34 b2 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0128b72:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0128b75:	83 ec 0c             	sub    $0xc,%esp
f0128b78:	68 00 00 40 00       	push   $0x400000
f0128b7d:	e8 df ee fd ff       	call   f0107a61 <kmalloc>
f0128b82:	83 c4 10             	add    $0x10,%esp
f0128b85:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)

		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 10*Mega)) panic("Wrong start address after kexpand()... ");
f0128b8b:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0128b91:	89 c1                	mov    %eax,%ecx
f0128b93:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0128b9a:	10 00 00 
f0128b9d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0128ba3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128ba8:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0128bae:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128bb4:	ba 00 00 00 00       	mov    $0x0,%edx
f0128bb9:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0128bbf:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128bc5:	29 d0                	sub    %edx,%eax
f0128bc7:	89 c3                	mov    %eax,%ebx
f0128bc9:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0128bd0:	10 00 00 
f0128bd3:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0128bd8:	0f b6 d0             	movzbl %al,%edx
f0128bdb:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0128be1:	01 d0                	add    %edx,%eax
f0128be3:	48                   	dec    %eax
f0128be4:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0128bea:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128bf0:	ba 00 00 00 00       	mov    $0x0,%edx
f0128bf5:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0128bfb:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128c01:	29 d0                	sub    %edx,%eax
f0128c03:	01 c3                	add    %eax,%ebx
f0128c05:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0128c0c:	10 00 00 
f0128c0f:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0128c14:	0f b6 c0             	movzbl %al,%eax
f0128c17:	c1 e0 04             	shl    $0x4,%eax
f0128c1a:	89 c2                	mov    %eax,%edx
f0128c1c:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0128c22:	01 d0                	add    %edx,%eax
f0128c24:	48                   	dec    %eax
f0128c25:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0128c2b:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0128c31:	ba 00 00 00 00       	mov    $0x0,%edx
f0128c36:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0128c3c:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0128c42:	29 d0                	sub    %edx,%eax
f0128c44:	01 d8                	add    %ebx,%eax
f0128c46:	2d 00 80 ef 08       	sub    $0x8ef8000,%eax
f0128c4b:	39 c1                	cmp    %eax,%ecx
f0128c4d:	74 17                	je     f0128c66 <test_kexpand+0xc3e>
f0128c4f:	83 ec 04             	sub    $0x4,%esp
f0128c52:	68 c8 bf 13 f0       	push   $0xf013bfc8
f0128c57:	68 c4 0b 00 00       	push   $0xbc4
f0128c5c:	68 7a b1 13 f0       	push   $0xf013b17a
f0128c61:	e8 9f 75 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128c66:	e8 3b b1 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0128c6b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128c6e:	74 17                	je     f0128c87 <test_kexpand+0xc5f>
f0128c70:	83 ec 04             	sub    $0x4,%esp
f0128c73:	68 94 b1 13 f0       	push   $0xf013b194
f0128c78:	68 c5 0b 00 00       	push   $0xbc5
f0128c7d:	68 7a b1 13 f0       	push   $0xf013b17a
f0128c82:	e8 7e 75 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128c87:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128c8a:	e8 54 41 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0128c8f:	29 c3                	sub    %eax,%ebx
f0128c91:	89 d8                	mov    %ebx,%eax
f0128c93:	3d 00 04 00 00       	cmp    $0x400,%eax
f0128c98:	74 17                	je     f0128cb1 <test_kexpand+0xc89>
f0128c9a:	83 ec 04             	sub    $0x4,%esp
f0128c9d:	68 fc b1 13 f0       	push   $0xf013b1fc
f0128ca2:	68 c6 0b 00 00       	push   $0xbc6
f0128ca7:	68 7a b1 13 f0       	push   $0xf013b17a
f0128cac:	e8 54 75 fd ff       	call   f0100205 <_panic>
	}

	//kfree the expanded variable
	{
		//kfree 10 MB (expanded)
		freeFrames = sys_calculate_free_frames() ;
f0128cb1:	e8 2d 41 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0128cb6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128cb9:	e8 e8 b0 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0128cbe:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0128cc1:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0128cc7:	83 ec 0c             	sub    $0xc,%esp
f0128cca:	50                   	push   %eax
f0128ccb:	e8 a7 ee fd ff       	call   f0107b77 <kfree>
f0128cd0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128cd3:	e8 ce b0 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0128cd8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128cdb:	74 17                	je     f0128cf4 <test_kexpand+0xccc>
f0128cdd:	83 ec 04             	sub    $0x4,%esp
f0128ce0:	68 94 b1 13 f0       	push   $0xf013b194
f0128ce5:	68 cf 0b 00 00       	push   $0xbcf
f0128cea:	68 7a b1 13 f0       	push   $0xf013b17a
f0128cef:	e8 11 75 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 10*Mega/PAGE_SIZE) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0128cf4:	e8 ea 40 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0128cf9:	89 c2                	mov    %eax,%edx
f0128cfb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0128cfe:	29 c2                	sub    %eax,%edx
f0128d00:	89 d0                	mov    %edx,%eax
f0128d02:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f0128d07:	74 17                	je     f0128d20 <test_kexpand+0xcf8>
f0128d09:	83 ec 04             	sub    $0x4,%esp
f0128d0c:	68 2c ba 13 f0       	push   $0xf013ba2c
f0128d11:	68 d0 0b 00 00       	push   $0xbd0
f0128d16:	68 7a b1 13 f0       	push   $0xf013b17a
f0128d1b:	e8 e5 74 fd ff       	call   f0100205 <_panic>
	}

	//Expand last allocated variable to 4 MB + 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0128d20:	e8 be 40 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0128d25:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128d28:	e8 79 b0 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0128d2d:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(4*Mega + 20*kilo) ;
f0128d30:	83 ec 0c             	sub    $0xc,%esp
f0128d33:	68 00 50 40 00       	push   $0x405000
f0128d38:	e8 ea ef fd ff       	call   f0107d27 <kexpand>
f0128d3d:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128d40:	e8 61 b0 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0128d45:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128d48:	74 19                	je     f0128d63 <test_kexpand+0xd3b>
f0128d4a:	68 14 bf 13 f0       	push   $0xf013bf14
f0128d4f:	68 45 bf 13 f0       	push   $0xf013bf45
f0128d54:	68 da 0b 00 00       	push   $0xbda
f0128d59:	68 7a b1 13 f0       	push   $0xf013b17a
f0128d5e:	e8 a2 74 fd ff       	call   f0100205 <_panic>
		assert(freeFrames - sys_calculate_free_frames()  == 5) ;
f0128d63:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128d66:	e8 78 40 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0128d6b:	29 c3                	sub    %eax,%ebx
f0128d6d:	89 d8                	mov    %ebx,%eax
f0128d6f:	83 f8 05             	cmp    $0x5,%eax
f0128d72:	74 19                	je     f0128d8d <test_kexpand+0xd65>
f0128d74:	68 f0 bf 13 f0       	push   $0xf013bff0
f0128d79:	68 45 bf 13 f0       	push   $0xf013bf45
f0128d7e:	68 db 0b 00 00       	push   $0xbdb
f0128d83:	68 7a b1 13 f0       	push   $0xf013b17a
f0128d88:	e8 78 74 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0128d8d:	83 ec 0c             	sub    $0xc,%esp
f0128d90:	68 d8 be 13 f0       	push   $0xf013bed8
f0128d95:	e8 74 7f fd ff       	call   f0100d0e <cprintf>
f0128d9a:	83 c4 10             	add    $0x10,%esp

	return 1;
f0128d9d:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0128da2:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0128da5:	5b                   	pop    %ebx
f0128da6:	5f                   	pop    %edi
f0128da7:	5d                   	pop    %ebp
f0128da8:	c3                   	ret    

f0128da9 <test_kshrink>:

extern void kshrink(uint32 newSize) ;

int test_kshrink()
{
f0128da9:	55                   	push   %ebp
f0128daa:	89 e5                	mov    %esp,%ebp
f0128dac:	57                   	push   %edi
f0128dad:	53                   	push   %ebx
f0128dae:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	char minByte = 1<<7;
f0128db4:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0128db8:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0128dbc:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0128dc2:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0128dc8:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0128dcf:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0128dd6:	e8 08 40 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0128ddb:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0128dde:	8d 95 a4 fe ff ff    	lea    -0x15c(%ebp),%edx
f0128de4:	b9 14 00 00 00       	mov    $0x14,%ecx
f0128de9:	b8 00 00 00 00       	mov    $0x0,%eax
f0128dee:	89 d7                	mov    %edx,%edi
f0128df0:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f0128df2:	8d 95 54 fe ff ff    	lea    -0x1ac(%ebp),%edx
f0128df8:	b9 14 00 00 00       	mov    $0x14,%ecx
f0128dfd:	b8 00 00 00 00       	mov    $0x0,%eax
f0128e02:	89 d7                	mov    %edx,%edi
f0128e04:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0128e06:	e8 d8 3f fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0128e0b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128e0e:	e8 93 af fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0128e13:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0128e16:	83 ec 0c             	sub    $0xc,%esp
f0128e19:	68 00 fc 1f 00       	push   $0x1ffc00
f0128e1e:	e8 3e ec fd ff       	call   f0107a61 <kmalloc>
f0128e23:	83 c4 10             	add    $0x10,%esp
f0128e26:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128e2c:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0128e32:	89 c1                	mov    %eax,%ecx
f0128e34:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0128e3b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0128e3e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128e43:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0128e46:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0128e49:	ba 00 00 00 00       	mov    $0x0,%edx
f0128e4e:	f7 75 d4             	divl   -0x2c(%ebp)
f0128e51:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0128e54:	29 d0                	sub    %edx,%eax
f0128e56:	89 c3                	mov    %eax,%ebx
f0128e58:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0128e5f:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0128e64:	0f b6 d0             	movzbl %al,%edx
f0128e67:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0128e6a:	01 d0                	add    %edx,%eax
f0128e6c:	48                   	dec    %eax
f0128e6d:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0128e70:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0128e73:	ba 00 00 00 00       	mov    $0x0,%edx
f0128e78:	f7 75 cc             	divl   -0x34(%ebp)
f0128e7b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0128e7e:	29 d0                	sub    %edx,%eax
f0128e80:	01 c3                	add    %eax,%ebx
f0128e82:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0128e89:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0128e8e:	0f b6 c0             	movzbl %al,%eax
f0128e91:	c1 e0 04             	shl    $0x4,%eax
f0128e94:	89 c2                	mov    %eax,%edx
f0128e96:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0128e99:	01 d0                	add    %edx,%eax
f0128e9b:	48                   	dec    %eax
f0128e9c:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0128e9f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0128ea2:	ba 00 00 00 00       	mov    $0x0,%edx
f0128ea7:	f7 75 c4             	divl   -0x3c(%ebp)
f0128eaa:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0128ead:	29 d0                	sub    %edx,%eax
f0128eaf:	01 d8                	add    %ebx,%eax
f0128eb1:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0128eb6:	39 c1                	cmp    %eax,%ecx
f0128eb8:	74 17                	je     f0128ed1 <test_kshrink+0x128>
f0128eba:	83 ec 04             	sub    $0x4,%esp
f0128ebd:	68 60 b2 13 f0       	push   $0xf013b260
f0128ec2:	68 01 0c 00 00       	push   $0xc01
f0128ec7:	68 7a b1 13 f0       	push   $0xf013b17a
f0128ecc:	e8 34 73 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128ed1:	e8 d0 ae fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0128ed6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128ed9:	74 17                	je     f0128ef2 <test_kshrink+0x149>
f0128edb:	83 ec 04             	sub    $0x4,%esp
f0128ede:	68 94 b1 13 f0       	push   $0xf013b194
f0128ee3:	68 02 0c 00 00       	push   $0xc02
f0128ee8:	68 7a b1 13 f0       	push   $0xf013b17a
f0128eed:	e8 13 73 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128ef2:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128ef5:	e8 e9 3e fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0128efa:	29 c3                	sub    %eax,%ebx
f0128efc:	89 d8                	mov    %ebx,%eax
f0128efe:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128f03:	74 17                	je     f0128f1c <test_kshrink+0x173>
f0128f05:	83 ec 04             	sub    $0x4,%esp
f0128f08:	68 fc b1 13 f0       	push   $0xf013b1fc
f0128f0d:	68 03 0c 00 00       	push   $0xc03
f0128f12:	68 7a b1 13 f0       	push   $0xf013b17a
f0128f17:	e8 e9 72 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0128f1c:	c7 85 a4 fe ff ff ff 	movl   $0x1ffbff,-0x15c(%ebp)
f0128f23:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0128f26:	e8 b8 3e fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0128f2b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128f2e:	e8 73 ae fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0128f33:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0128f36:	83 ec 0c             	sub    $0xc,%esp
f0128f39:	68 00 fc 1f 00       	push   $0x1ffc00
f0128f3e:	e8 1e eb fd ff       	call   f0107a61 <kmalloc>
f0128f43:	83 c4 10             	add    $0x10,%esp
f0128f46:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128f4c:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0128f52:	89 c1                	mov    %eax,%ecx
f0128f54:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0128f5b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0128f5e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128f63:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0128f66:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0128f69:	ba 00 00 00 00       	mov    $0x0,%edx
f0128f6e:	f7 75 bc             	divl   -0x44(%ebp)
f0128f71:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0128f74:	29 d0                	sub    %edx,%eax
f0128f76:	89 c3                	mov    %eax,%ebx
f0128f78:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0128f7f:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0128f84:	0f b6 d0             	movzbl %al,%edx
f0128f87:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0128f8a:	01 d0                	add    %edx,%eax
f0128f8c:	48                   	dec    %eax
f0128f8d:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0128f90:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0128f93:	ba 00 00 00 00       	mov    $0x0,%edx
f0128f98:	f7 75 b4             	divl   -0x4c(%ebp)
f0128f9b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0128f9e:	29 d0                	sub    %edx,%eax
f0128fa0:	01 c3                	add    %eax,%ebx
f0128fa2:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0128fa9:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0128fae:	0f b6 c0             	movzbl %al,%eax
f0128fb1:	c1 e0 04             	shl    $0x4,%eax
f0128fb4:	89 c2                	mov    %eax,%edx
f0128fb6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0128fb9:	01 d0                	add    %edx,%eax
f0128fbb:	48                   	dec    %eax
f0128fbc:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0128fbf:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0128fc2:	ba 00 00 00 00       	mov    $0x0,%edx
f0128fc7:	f7 75 ac             	divl   -0x54(%ebp)
f0128fca:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0128fcd:	29 d0                	sub    %edx,%eax
f0128fcf:	01 d8                	add    %ebx,%eax
f0128fd1:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0128fd6:	39 c1                	cmp    %eax,%ecx
f0128fd8:	74 17                	je     f0128ff1 <test_kshrink+0x248>
f0128fda:	83 ec 04             	sub    $0x4,%esp
f0128fdd:	68 60 b2 13 f0       	push   $0xf013b260
f0128fe2:	68 0a 0c 00 00       	push   $0xc0a
f0128fe7:	68 7a b1 13 f0       	push   $0xf013b17a
f0128fec:	e8 14 72 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128ff1:	e8 b0 ad fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0128ff6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128ff9:	74 17                	je     f0129012 <test_kshrink+0x269>
f0128ffb:	83 ec 04             	sub    $0x4,%esp
f0128ffe:	68 94 b1 13 f0       	push   $0xf013b194
f0129003:	68 0b 0c 00 00       	push   $0xc0b
f0129008:	68 7a b1 13 f0       	push   $0xf013b17a
f012900d:	e8 f3 71 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129012:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129015:	e8 c9 3d fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012901a:	29 c3                	sub    %eax,%ebx
f012901c:	89 d8                	mov    %ebx,%eax
f012901e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129023:	74 17                	je     f012903c <test_kshrink+0x293>
f0129025:	83 ec 04             	sub    $0x4,%esp
f0129028:	68 fc b1 13 f0       	push   $0xf013b1fc
f012902d:	68 0c 0c 00 00       	push   $0xc0c
f0129032:	68 7a b1 13 f0       	push   $0xf013b17a
f0129037:	e8 c9 71 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f012903c:	c7 85 a8 fe ff ff ff 	movl   $0x1ffbff,-0x158(%ebp)
f0129043:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129046:	e8 98 3d fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012904b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012904e:	e8 53 ad fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0129053:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0129056:	83 ec 0c             	sub    $0xc,%esp
f0129059:	68 00 08 00 00       	push   $0x800
f012905e:	e8 fe e9 fd ff       	call   f0107a61 <kmalloc>
f0129063:	83 c4 10             	add    $0x10,%esp
f0129066:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012906c:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0129072:	89 c1                	mov    %eax,%ecx
f0129074:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012907b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012907e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129083:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0129086:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0129089:	ba 00 00 00 00       	mov    $0x0,%edx
f012908e:	f7 75 a4             	divl   -0x5c(%ebp)
f0129091:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0129094:	29 d0                	sub    %edx,%eax
f0129096:	89 c3                	mov    %eax,%ebx
f0129098:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012909f:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01290a4:	0f b6 d0             	movzbl %al,%edx
f01290a7:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01290aa:	01 d0                	add    %edx,%eax
f01290ac:	48                   	dec    %eax
f01290ad:	89 45 98             	mov    %eax,-0x68(%ebp)
f01290b0:	8b 45 98             	mov    -0x68(%ebp),%eax
f01290b3:	ba 00 00 00 00       	mov    $0x0,%edx
f01290b8:	f7 75 9c             	divl   -0x64(%ebp)
f01290bb:	8b 45 98             	mov    -0x68(%ebp),%eax
f01290be:	29 d0                	sub    %edx,%eax
f01290c0:	01 c3                	add    %eax,%ebx
f01290c2:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01290c9:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01290ce:	0f b6 c0             	movzbl %al,%eax
f01290d1:	c1 e0 04             	shl    $0x4,%eax
f01290d4:	89 c2                	mov    %eax,%edx
f01290d6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01290d9:	01 d0                	add    %edx,%eax
f01290db:	48                   	dec    %eax
f01290dc:	89 45 90             	mov    %eax,-0x70(%ebp)
f01290df:	8b 45 90             	mov    -0x70(%ebp),%eax
f01290e2:	ba 00 00 00 00       	mov    $0x0,%edx
f01290e7:	f7 75 94             	divl   -0x6c(%ebp)
f01290ea:	8b 45 90             	mov    -0x70(%ebp),%eax
f01290ed:	29 d0                	sub    %edx,%eax
f01290ef:	01 d8                	add    %ebx,%eax
f01290f1:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01290f6:	39 c1                	cmp    %eax,%ecx
f01290f8:	74 17                	je     f0129111 <test_kshrink+0x368>
f01290fa:	83 ec 04             	sub    $0x4,%esp
f01290fd:	68 60 b2 13 f0       	push   $0xf013b260
f0129102:	68 13 0c 00 00       	push   $0xc13
f0129107:	68 7a b1 13 f0       	push   $0xf013b17a
f012910c:	e8 f4 70 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129111:	e8 90 ac fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0129116:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129119:	74 17                	je     f0129132 <test_kshrink+0x389>
f012911b:	83 ec 04             	sub    $0x4,%esp
f012911e:	68 94 b1 13 f0       	push   $0xf013b194
f0129123:	68 14 0c 00 00       	push   $0xc14
f0129128:	68 7a b1 13 f0       	push   $0xf013b17a
f012912d:	e8 d3 70 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129132:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129135:	e8 a9 3c fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012913a:	29 c3                	sub    %eax,%ebx
f012913c:	89 d8                	mov    %ebx,%eax
f012913e:	83 f8 01             	cmp    $0x1,%eax
f0129141:	74 17                	je     f012915a <test_kshrink+0x3b1>
f0129143:	83 ec 04             	sub    $0x4,%esp
f0129146:	68 fc b1 13 f0       	push   $0xf013b1fc
f012914b:	68 15 0c 00 00       	push   $0xc15
f0129150:	68 7a b1 13 f0       	push   $0xf013b17a
f0129155:	e8 ab 70 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f012915a:	c7 85 ac fe ff ff ff 	movl   $0x7ff,-0x154(%ebp)
f0129161:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0129164:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012916a:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012916d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129174:	eb 0e                	jmp    f0129184 <test_kshrink+0x3db>
		{
			ptr[i] = 2 ;
f0129176:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129179:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012917c:	01 d0                	add    %edx,%eax
f012917e:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0129181:	ff 45 f4             	incl   -0xc(%ebp)
f0129184:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012918a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012918d:	7f e7                	jg     f0129176 <test_kshrink+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012918f:	e8 4f 3c fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0129194:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129197:	e8 0a ac fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012919c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012919f:	83 ec 0c             	sub    $0xc,%esp
f01291a2:	68 00 08 00 00       	push   $0x800
f01291a7:	e8 b5 e8 fd ff       	call   f0107a61 <kmalloc>
f01291ac:	83 c4 10             	add    $0x10,%esp
f01291af:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01291b5:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01291bb:	89 c1                	mov    %eax,%ecx
f01291bd:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01291c4:	8b 45 88             	mov    -0x78(%ebp),%eax
f01291c7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01291cc:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01291cf:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01291d2:	ba 00 00 00 00       	mov    $0x0,%edx
f01291d7:	f7 75 88             	divl   -0x78(%ebp)
f01291da:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01291dd:	29 d0                	sub    %edx,%eax
f01291df:	89 c3                	mov    %eax,%ebx
f01291e1:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01291e8:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01291ed:	0f b6 d0             	movzbl %al,%edx
f01291f0:	8b 45 80             	mov    -0x80(%ebp),%eax
f01291f3:	01 d0                	add    %edx,%eax
f01291f5:	48                   	dec    %eax
f01291f6:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01291fc:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0129202:	ba 00 00 00 00       	mov    $0x0,%edx
f0129207:	f7 75 80             	divl   -0x80(%ebp)
f012920a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0129210:	29 d0                	sub    %edx,%eax
f0129212:	01 c3                	add    %eax,%ebx
f0129214:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f012921b:	10 00 00 
f012921e:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0129223:	0f b6 c0             	movzbl %al,%eax
f0129226:	c1 e0 04             	shl    $0x4,%eax
f0129229:	89 c2                	mov    %eax,%edx
f012922b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0129231:	01 d0                	add    %edx,%eax
f0129233:	48                   	dec    %eax
f0129234:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f012923a:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0129240:	ba 00 00 00 00       	mov    $0x0,%edx
f0129245:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f012924b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0129251:	29 d0                	sub    %edx,%eax
f0129253:	01 d8                	add    %ebx,%eax
f0129255:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012925a:	39 c1                	cmp    %eax,%ecx
f012925c:	74 17                	je     f0129275 <test_kshrink+0x4cc>
f012925e:	83 ec 04             	sub    $0x4,%esp
f0129261:	68 60 b2 13 f0       	push   $0xf013b260
f0129266:	68 21 0c 00 00       	push   $0xc21
f012926b:	68 7a b1 13 f0       	push   $0xf013b17a
f0129270:	e8 90 6f fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129275:	e8 2c ab fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012927a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012927d:	74 17                	je     f0129296 <test_kshrink+0x4ed>
f012927f:	83 ec 04             	sub    $0x4,%esp
f0129282:	68 94 b1 13 f0       	push   $0xf013b194
f0129287:	68 22 0c 00 00       	push   $0xc22
f012928c:	68 7a b1 13 f0       	push   $0xf013b17a
f0129291:	e8 6f 6f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129296:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129299:	e8 45 3b fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012929e:	29 c3                	sub    %eax,%ebx
f01292a0:	89 d8                	mov    %ebx,%eax
f01292a2:	83 f8 01             	cmp    $0x1,%eax
f01292a5:	74 17                	je     f01292be <test_kshrink+0x515>
f01292a7:	83 ec 04             	sub    $0x4,%esp
f01292aa:	68 fc b1 13 f0       	push   $0xf013b1fc
f01292af:	68 23 0c 00 00       	push   $0xc23
f01292b4:	68 7a b1 13 f0       	push   $0xf013b17a
f01292b9:	e8 47 6f fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f01292be:	c7 85 b0 fe ff ff ff 	movl   $0x7ff,-0x150(%ebp)
f01292c5:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01292c8:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01292ce:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01292d1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01292d8:	eb 0e                	jmp    f01292e8 <test_kshrink+0x53f>
		{
			ptr[i] = 3 ;
f01292da:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01292dd:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01292e0:	01 d0                	add    %edx,%eax
f01292e2:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01292e5:	ff 45 f4             	incl   -0xc(%ebp)
f01292e8:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01292ee:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01292f1:	7f e7                	jg     f01292da <test_kshrink+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01292f3:	e8 eb 3a fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01292f8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01292fb:	e8 a6 aa fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0129300:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0129303:	83 ec 0c             	sub    $0xc,%esp
f0129306:	68 00 1c 00 00       	push   $0x1c00
f012930b:	e8 51 e7 fd ff       	call   f0107a61 <kmalloc>
f0129310:	83 c4 10             	add    $0x10,%esp
f0129313:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129319:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012931f:	89 c1                	mov    %eax,%ecx
f0129321:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0129328:	10 00 00 
f012932b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0129331:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129336:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f012933c:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0129342:	ba 00 00 00 00       	mov    $0x0,%edx
f0129347:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f012934d:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0129353:	29 d0                	sub    %edx,%eax
f0129355:	89 c3                	mov    %eax,%ebx
f0129357:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f012935e:	10 00 00 
f0129361:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0129366:	0f b6 d0             	movzbl %al,%edx
f0129369:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012936f:	01 d0                	add    %edx,%eax
f0129371:	48                   	dec    %eax
f0129372:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0129378:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012937e:	ba 00 00 00 00       	mov    $0x0,%edx
f0129383:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0129389:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012938f:	29 d0                	sub    %edx,%eax
f0129391:	01 c3                	add    %eax,%ebx
f0129393:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f012939a:	10 00 00 
f012939d:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01293a2:	0f b6 c0             	movzbl %al,%eax
f01293a5:	c1 e0 04             	shl    $0x4,%eax
f01293a8:	89 c2                	mov    %eax,%edx
f01293aa:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01293b0:	01 d0                	add    %edx,%eax
f01293b2:	48                   	dec    %eax
f01293b3:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01293b9:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01293bf:	ba 00 00 00 00       	mov    $0x0,%edx
f01293c4:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01293ca:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01293d0:	29 d0                	sub    %edx,%eax
f01293d2:	01 d8                	add    %ebx,%eax
f01293d4:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01293d9:	39 c1                	cmp    %eax,%ecx
f01293db:	74 17                	je     f01293f4 <test_kshrink+0x64b>
f01293dd:	83 ec 04             	sub    $0x4,%esp
f01293e0:	68 60 b2 13 f0       	push   $0xf013b260
f01293e5:	68 2f 0c 00 00       	push   $0xc2f
f01293ea:	68 7a b1 13 f0       	push   $0xf013b17a
f01293ef:	e8 11 6e fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01293f4:	e8 ad a9 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f01293f9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01293fc:	74 17                	je     f0129415 <test_kshrink+0x66c>
f01293fe:	83 ec 04             	sub    $0x4,%esp
f0129401:	68 94 b1 13 f0       	push   $0xf013b194
f0129406:	68 30 0c 00 00       	push   $0xc30
f012940b:	68 7a b1 13 f0       	push   $0xf013b17a
f0129410:	e8 f0 6d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129415:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129418:	e8 c6 39 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012941d:	29 c3                	sub    %eax,%ebx
f012941f:	89 d8                	mov    %ebx,%eax
f0129421:	83 f8 02             	cmp    $0x2,%eax
f0129424:	74 17                	je     f012943d <test_kshrink+0x694>
f0129426:	83 ec 04             	sub    $0x4,%esp
f0129429:	68 fc b1 13 f0       	push   $0xf013b1fc
f012942e:	68 31 0c 00 00       	push   $0xc31
f0129433:	68 7a b1 13 f0       	push   $0xf013b17a
f0129438:	e8 c8 6d fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f012943d:	c7 85 b4 fe ff ff ff 	movl   $0x1bff,-0x14c(%ebp)
f0129444:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0129447:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012944d:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0129450:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129457:	eb 0e                	jmp    f0129467 <test_kshrink+0x6be>
		{
			ptr[i] = 4 ;
f0129459:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012945c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012945f:	01 d0                	add    %edx,%eax
f0129461:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0129464:	ff 45 f4             	incl   -0xc(%ebp)
f0129467:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012946d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129470:	7f e7                	jg     f0129459 <test_kshrink+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0129472:	e8 6c 39 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0129477:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012947a:	e8 27 a9 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012947f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0129482:	83 ec 0c             	sub    $0xc,%esp
f0129485:	68 00 fc 2f 00       	push   $0x2ffc00
f012948a:	e8 d2 e5 fd ff       	call   f0107a61 <kmalloc>
f012948f:	83 c4 10             	add    $0x10,%esp
f0129492:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129498:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012949e:	89 c1                	mov    %eax,%ecx
f01294a0:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01294a7:	10 00 00 
f01294aa:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01294b0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01294b5:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01294bb:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01294c1:	ba 00 00 00 00       	mov    $0x0,%edx
f01294c6:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01294cc:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01294d2:	29 d0                	sub    %edx,%eax
f01294d4:	89 c3                	mov    %eax,%ebx
f01294d6:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01294dd:	10 00 00 
f01294e0:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01294e5:	0f b6 d0             	movzbl %al,%edx
f01294e8:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01294ee:	01 d0                	add    %edx,%eax
f01294f0:	48                   	dec    %eax
f01294f1:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01294f7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01294fd:	ba 00 00 00 00       	mov    $0x0,%edx
f0129502:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0129508:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012950e:	29 d0                	sub    %edx,%eax
f0129510:	01 c3                	add    %eax,%ebx
f0129512:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0129519:	10 00 00 
f012951c:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0129521:	0f b6 c0             	movzbl %al,%eax
f0129524:	c1 e0 04             	shl    $0x4,%eax
f0129527:	89 c2                	mov    %eax,%edx
f0129529:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012952f:	01 d0                	add    %edx,%eax
f0129531:	48                   	dec    %eax
f0129532:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0129538:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012953e:	ba 00 00 00 00       	mov    $0x0,%edx
f0129543:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0129549:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012954f:	29 d0                	sub    %edx,%eax
f0129551:	01 d8                	add    %ebx,%eax
f0129553:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0129558:	39 c1                	cmp    %eax,%ecx
f012955a:	74 17                	je     f0129573 <test_kshrink+0x7ca>
f012955c:	83 ec 04             	sub    $0x4,%esp
f012955f:	68 60 b2 13 f0       	push   $0xf013b260
f0129564:	68 3d 0c 00 00       	push   $0xc3d
f0129569:	68 7a b1 13 f0       	push   $0xf013b17a
f012956e:	e8 92 6c fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129573:	e8 2e a8 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0129578:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012957b:	74 17                	je     f0129594 <test_kshrink+0x7eb>
f012957d:	83 ec 04             	sub    $0x4,%esp
f0129580:	68 94 b1 13 f0       	push   $0xf013b194
f0129585:	68 3e 0c 00 00       	push   $0xc3e
f012958a:	68 7a b1 13 f0       	push   $0xf013b17a
f012958f:	e8 71 6c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129594:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129597:	e8 47 38 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012959c:	29 c3                	sub    %eax,%ebx
f012959e:	89 d8                	mov    %ebx,%eax
f01295a0:	3d 00 03 00 00       	cmp    $0x300,%eax
f01295a5:	74 17                	je     f01295be <test_kshrink+0x815>
f01295a7:	83 ec 04             	sub    $0x4,%esp
f01295aa:	68 fc b1 13 f0       	push   $0xf013b1fc
f01295af:	68 3f 0c 00 00       	push   $0xc3f
f01295b4:	68 7a b1 13 f0       	push   $0xf013b17a
f01295b9:	e8 47 6c fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f01295be:	c7 85 b8 fe ff ff ff 	movl   $0x2ffbff,-0x148(%ebp)
f01295c5:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f01295c8:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01295ce:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01295d1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01295d8:	eb 0e                	jmp    f01295e8 <test_kshrink+0x83f>
		{
			ptr[i] = 5 ;
f01295da:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01295dd:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01295e0:	01 d0                	add    %edx,%eax
f01295e2:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01295e5:	ff 45 f4             	incl   -0xc(%ebp)
f01295e8:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01295ee:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01295f1:	7f e7                	jg     f01295da <test_kshrink+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01295f3:	e8 eb 37 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01295f8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01295fb:	e8 a6 a7 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0129600:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0129603:	83 ec 0c             	sub    $0xc,%esp
f0129606:	68 00 00 60 00       	push   $0x600000
f012960b:	e8 51 e4 fd ff       	call   f0107a61 <kmalloc>
f0129610:	83 c4 10             	add    $0x10,%esp
f0129613:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129619:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012961f:	89 c1                	mov    %eax,%ecx
f0129621:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0129628:	10 00 00 
f012962b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0129631:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129636:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f012963c:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0129642:	ba 00 00 00 00       	mov    $0x0,%edx
f0129647:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f012964d:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0129653:	29 d0                	sub    %edx,%eax
f0129655:	89 c3                	mov    %eax,%ebx
f0129657:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f012965e:	10 00 00 
f0129661:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0129666:	0f b6 d0             	movzbl %al,%edx
f0129669:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012966f:	01 d0                	add    %edx,%eax
f0129671:	48                   	dec    %eax
f0129672:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0129678:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012967e:	ba 00 00 00 00       	mov    $0x0,%edx
f0129683:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0129689:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012968f:	29 d0                	sub    %edx,%eax
f0129691:	01 c3                	add    %eax,%ebx
f0129693:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f012969a:	10 00 00 
f012969d:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01296a2:	0f b6 c0             	movzbl %al,%eax
f01296a5:	c1 e0 04             	shl    $0x4,%eax
f01296a8:	89 c2                	mov    %eax,%edx
f01296aa:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01296b0:	01 d0                	add    %edx,%eax
f01296b2:	48                   	dec    %eax
f01296b3:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01296b9:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01296bf:	ba 00 00 00 00       	mov    $0x0,%edx
f01296c4:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f01296ca:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01296d0:	29 d0                	sub    %edx,%eax
f01296d2:	01 d8                	add    %ebx,%eax
f01296d4:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01296d9:	39 c1                	cmp    %eax,%ecx
f01296db:	74 17                	je     f01296f4 <test_kshrink+0x94b>
f01296dd:	83 ec 04             	sub    $0x4,%esp
f01296e0:	68 60 b2 13 f0       	push   $0xf013b260
f01296e5:	68 4b 0c 00 00       	push   $0xc4b
f01296ea:	68 7a b1 13 f0       	push   $0xf013b17a
f01296ef:	e8 11 6b fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01296f4:	e8 ad a6 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f01296f9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01296fc:	74 17                	je     f0129715 <test_kshrink+0x96c>
f01296fe:	83 ec 04             	sub    $0x4,%esp
f0129701:	68 94 b1 13 f0       	push   $0xf013b194
f0129706:	68 4c 0c 00 00       	push   $0xc4c
f012970b:	68 7a b1 13 f0       	push   $0xf013b17a
f0129710:	e8 f0 6a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129715:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129718:	e8 c6 36 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012971d:	29 c3                	sub    %eax,%ebx
f012971f:	89 d8                	mov    %ebx,%eax
f0129721:	3d 00 06 00 00       	cmp    $0x600,%eax
f0129726:	74 17                	je     f012973f <test_kshrink+0x996>
f0129728:	83 ec 04             	sub    $0x4,%esp
f012972b:	68 fc b1 13 f0       	push   $0xf013b1fc
f0129730:	68 4d 0c 00 00       	push   $0xc4d
f0129735:	68 7a b1 13 f0       	push   $0xf013b17a
f012973a:	e8 c6 6a fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f012973f:	c7 85 bc fe ff ff ff 	movl   $0x17ffff,-0x144(%ebp)
f0129746:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f0129749:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012974f:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0129755:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012975c:	eb 1a                	jmp    f0129778 <test_kshrink+0x9cf>
		{
			arr[i] = i ;
f012975e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129761:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0129768:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012976e:	01 c2                	add    %eax,%edx
f0129770:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129773:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0129775:	ff 45 f4             	incl   -0xc(%ebp)
f0129778:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012977e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129781:	7d db                	jge    f012975e <test_kshrink+0x9b5>
		}
	}

	//Shrink last allocated variable to 5 MB instead of 6 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0129783:	e8 5b 36 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0129788:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012978b:	e8 16 a6 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0129790:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(5*Mega) ;
f0129793:	83 ec 0c             	sub    $0xc,%esp
f0129796:	68 00 00 50 00       	push   $0x500000
f012979b:	e8 6a e5 fd ff       	call   f0107d0a <kshrink>
f01297a0:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01297a3:	e8 fe a5 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f01297a8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01297ab:	74 19                	je     f01297c6 <test_kshrink+0xa1d>
f01297ad:	68 14 bf 13 f0       	push   $0xf013bf14
f01297b2:	68 45 bf 13 f0       	push   $0xf013bf45
f01297b7:	68 5d 0c 00 00       	push   $0xc5d
f01297bc:	68 7a b1 13 f0       	push   $0xf013b17a
f01297c1:	e8 3f 6a fd ff       	call   f0100205 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 256) ;
f01297c6:	e8 18 36 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f01297cb:	89 c2                	mov    %eax,%edx
f01297cd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01297d0:	29 c2                	sub    %eax,%edx
f01297d2:	89 d0                	mov    %edx,%eax
f01297d4:	3d 00 01 00 00       	cmp    $0x100,%eax
f01297d9:	74 19                	je     f01297f4 <test_kshrink+0xa4b>
f01297db:	68 20 c0 13 f0       	push   $0xf013c020
f01297e0:	68 45 bf 13 f0       	push   $0xf013bf45
f01297e5:	68 5e 0c 00 00       	push   $0xc5e
f01297ea:	68 7a b1 13 f0       	push   $0xf013b17a
f01297ef:	e8 11 6a fd ff       	call   f0100205 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
f01297f4:	c7 85 24 ff ff ff ff 	movl   $0x13ffff,-0xdc(%ebp)
f01297fb:	ff 13 00 
	{
		for (i = 0; i <= newLastIndex ; ++i)
f01297fe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129805:	eb 37                	jmp    f012983e <test_kshrink+0xa95>
		{
			assert(arr[i] == i);
f0129807:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012980a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0129811:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0129817:	01 d0                	add    %edx,%eax
f0129819:	8b 10                	mov    (%eax),%edx
f012981b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012981e:	39 c2                	cmp    %eax,%edx
f0129820:	74 19                	je     f012983b <test_kshrink+0xa92>
f0129822:	68 50 c0 13 f0       	push   $0xf013c050
f0129827:	68 45 bf 13 f0       	push   $0xf013bf45
f012982c:	68 66 0c 00 00       	push   $0xc66
f0129831:	68 7a b1 13 f0       	push   $0xf013b17a
f0129836:	e8 ca 69 fd ff       	call   f0100205 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
	{
		for (i = 0; i <= newLastIndex ; ++i)
f012983b:	ff 45 f4             	incl   -0xc(%ebp)
f012983e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129841:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0129847:	7e be                	jle    f0129807 <test_kshrink+0xa5e>
			assert(arr[i] == i);
		}

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0129849:	83 ec 0c             	sub    $0xc,%esp
f012984c:	6a 03                	push   $0x3
f012984e:	e8 30 3a fe ff       	call   f010d283 <sys_bypassPageFault>
f0129853:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[6];
f0129856:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012985c:	89 45 8c             	mov    %eax,-0x74(%ebp)
		ptr[5*Mega] = 10;
f012985f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129862:	05 00 00 50 00       	add    $0x500000,%eax
f0129867:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega])) ;
f012986a:	e8 02 3a fe ff       	call   f010d271 <sys_rcr2>
f012986f:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0129872:	81 c2 00 00 50 00    	add    $0x500000,%edx
f0129878:	39 d0                	cmp    %edx,%eax
f012987a:	74 19                	je     f0129895 <test_kshrink+0xaec>
f012987c:	68 5c c0 13 f0       	push   $0xf013c05c
f0129881:	68 45 bf 13 f0       	push   $0xf013bf45
f0129886:	68 6f 0c 00 00       	push   $0xc6f
f012988b:	68 7a b1 13 f0       	push   $0xf013b17a
f0129890:	e8 70 69 fd ff       	call   f0100205 <_panic>

		ptr[5*Mega+4*kilo] = 10;
f0129895:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129898:	05 00 10 50 00       	add    $0x501000,%eax
f012989d:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega+4*kilo])) ;
f01298a0:	e8 cc 39 fe ff       	call   f010d271 <sys_rcr2>
f01298a5:	8b 55 8c             	mov    -0x74(%ebp),%edx
f01298a8:	81 c2 00 10 50 00    	add    $0x501000,%edx
f01298ae:	39 d0                	cmp    %edx,%eax
f01298b0:	74 19                	je     f01298cb <test_kshrink+0xb22>
f01298b2:	68 84 c0 13 f0       	push   $0xf013c084
f01298b7:	68 45 bf 13 f0       	push   $0xf013bf45
f01298bc:	68 72 0c 00 00       	push   $0xc72
f01298c1:	68 7a b1 13 f0       	push   $0xf013b17a
f01298c6:	e8 3a 69 fd ff       	call   f0100205 <_panic>

		ptr[6*Mega - kilo] = 10;
f01298cb:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01298ce:	05 00 fc 5f 00       	add    $0x5ffc00,%eax
f01298d3:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[6*Mega - kilo])) ;
f01298d6:	e8 96 39 fe ff       	call   f010d271 <sys_rcr2>
f01298db:	8b 55 8c             	mov    -0x74(%ebp),%edx
f01298de:	81 c2 00 fc 5f 00    	add    $0x5ffc00,%edx
f01298e4:	39 d0                	cmp    %edx,%eax
f01298e6:	74 19                	je     f0129901 <test_kshrink+0xb58>
f01298e8:	68 b0 c0 13 f0       	push   $0xf013c0b0
f01298ed:	68 45 bf 13 f0       	push   $0xf013bf45
f01298f2:	68 75 0c 00 00       	push   $0xc75
f01298f7:	68 7a b1 13 f0       	push   $0xf013b17a
f01298fc:	e8 04 69 fd ff       	call   f0100205 <_panic>

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0129901:	83 ec 0c             	sub    $0xc,%esp
f0129904:	6a 00                	push   $0x0
f0129906:	e8 78 39 fe ff       	call   f010d283 <sys_bypassPageFault>
f012990b:	83 c4 10             	add    $0x10,%esp
	}

	//Shrink it again to 2 MB instead of 5 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f012990e:	e8 d0 34 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0129913:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129916:	e8 8b a4 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012991b:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(2*Mega) ;
f012991e:	83 ec 0c             	sub    $0xc,%esp
f0129921:	68 00 00 20 00       	push   $0x200000
f0129926:	e8 df e3 fd ff       	call   f0107d0a <kshrink>
f012992b:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f012992e:	e8 73 a4 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0129933:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129936:	74 19                	je     f0129951 <test_kshrink+0xba8>
f0129938:	68 14 bf 13 f0       	push   $0xf013bf14
f012993d:	68 45 bf 13 f0       	push   $0xf013bf45
f0129942:	68 82 0c 00 00       	push   $0xc82
f0129947:	68 7a b1 13 f0       	push   $0xf013b17a
f012994c:	e8 b4 68 fd ff       	call   f0100205 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 768) ;
f0129951:	e8 8d 34 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0129956:	89 c2                	mov    %eax,%edx
f0129958:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012995b:	29 c2                	sub    %eax,%edx
f012995d:	89 d0                	mov    %edx,%eax
f012995f:	3d 00 03 00 00       	cmp    $0x300,%eax
f0129964:	74 19                	je     f012997f <test_kshrink+0xbd6>
f0129966:	68 dc c0 13 f0       	push   $0xf013c0dc
f012996b:	68 45 bf 13 f0       	push   $0xf013bf45
f0129970:	68 83 0c 00 00       	push   $0xc83
f0129975:	68 7a b1 13 f0       	push   $0xf013b17a
f012997a:	e8 86 68 fd ff       	call   f0100205 <_panic>


	//Allocate after shrinking last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f012997f:	e8 5f 34 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0129984:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129987:	e8 1a a4 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012998c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f012998f:	83 ec 0c             	sub    $0xc,%esp
f0129992:	68 00 00 40 00       	push   $0x400000
f0129997:	e8 c5 e0 fd ff       	call   f0107a61 <kmalloc>
f012999c:	83 c4 10             	add    $0x10,%esp
f012999f:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		cprintf("ACTUAL = %x, DESIRED = %x\n", (uint32) ptr_allocations[7] ,(ACTUAL_START + 7*Mega + 16*kilo + 2*Mega));
f01299a5:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f01299ac:	10 00 00 
f01299af:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01299b5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01299ba:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f01299c0:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01299c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01299cb:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f01299d1:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01299d7:	29 d0                	sub    %edx,%eax
f01299d9:	89 c1                	mov    %eax,%ecx
f01299db:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f01299e2:	10 00 00 
f01299e5:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01299ea:	0f b6 d0             	movzbl %al,%edx
f01299ed:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01299f3:	01 d0                	add    %edx,%eax
f01299f5:	48                   	dec    %eax
f01299f6:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f01299fc:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129a02:	ba 00 00 00 00       	mov    $0x0,%edx
f0129a07:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0129a0d:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129a13:	29 d0                	sub    %edx,%eax
f0129a15:	01 c1                	add    %eax,%ecx
f0129a17:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0129a1e:	10 00 00 
f0129a21:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0129a26:	0f b6 c0             	movzbl %al,%eax
f0129a29:	c1 e0 04             	shl    $0x4,%eax
f0129a2c:	89 c2                	mov    %eax,%edx
f0129a2e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0129a34:	01 d0                	add    %edx,%eax
f0129a36:	48                   	dec    %eax
f0129a37:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0129a3d:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0129a43:	ba 00 00 00 00       	mov    $0x0,%edx
f0129a48:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0129a4e:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0129a54:	29 d0                	sub    %edx,%eax
f0129a56:	01 c8                	add    %ecx,%eax
f0129a58:	8d 90 00 80 90 f6    	lea    -0x96f8000(%eax),%edx
f0129a5e:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0129a64:	83 ec 04             	sub    $0x4,%esp
f0129a67:	52                   	push   %edx
f0129a68:	50                   	push   %eax
f0129a69:	68 0c c1 13 f0       	push   $0xf013c10c
f0129a6e:	e8 9b 72 fd ff       	call   f0100d0e <cprintf>
f0129a73:	83 c4 10             	add    $0x10,%esp
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 2*Mega)) panic("Wrong start address after kshrink()... check the updating of your data structures");
f0129a76:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0129a7c:	89 c1                	mov    %eax,%ecx
f0129a7e:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0129a85:	10 00 00 
f0129a88:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0129a8e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129a93:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0129a99:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0129a9f:	ba 00 00 00 00       	mov    $0x0,%edx
f0129aa4:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0129aaa:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0129ab0:	29 d0                	sub    %edx,%eax
f0129ab2:	89 c3                	mov    %eax,%ebx
f0129ab4:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0129abb:	10 00 00 
f0129abe:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0129ac3:	0f b6 d0             	movzbl %al,%edx
f0129ac6:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0129acc:	01 d0                	add    %edx,%eax
f0129ace:	48                   	dec    %eax
f0129acf:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0129ad5:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0129adb:	ba 00 00 00 00       	mov    $0x0,%edx
f0129ae0:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0129ae6:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0129aec:	29 d0                	sub    %edx,%eax
f0129aee:	01 c3                	add    %eax,%ebx
f0129af0:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0129af7:	10 00 00 
f0129afa:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0129aff:	0f b6 c0             	movzbl %al,%eax
f0129b02:	c1 e0 04             	shl    $0x4,%eax
f0129b05:	89 c2                	mov    %eax,%edx
f0129b07:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0129b0d:	01 d0                	add    %edx,%eax
f0129b0f:	48                   	dec    %eax
f0129b10:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0129b16:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0129b1c:	ba 00 00 00 00       	mov    $0x0,%edx
f0129b21:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0129b27:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0129b2d:	29 d0                	sub    %edx,%eax
f0129b2f:	01 d8                	add    %ebx,%eax
f0129b31:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f0129b36:	39 c1                	cmp    %eax,%ecx
f0129b38:	74 17                	je     f0129b51 <test_kshrink+0xda8>
f0129b3a:	83 ec 04             	sub    $0x4,%esp
f0129b3d:	68 28 c1 13 f0       	push   $0xf013c128
f0129b42:	68 8e 0c 00 00       	push   $0xc8e
f0129b47:	68 7a b1 13 f0       	push   $0xf013b17a
f0129b4c:	e8 b4 66 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129b51:	e8 50 a2 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0129b56:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129b59:	74 17                	je     f0129b72 <test_kshrink+0xdc9>
f0129b5b:	83 ec 04             	sub    $0x4,%esp
f0129b5e:	68 94 b1 13 f0       	push   $0xf013b194
f0129b63:	68 8f 0c 00 00       	push   $0xc8f
f0129b68:	68 7a b1 13 f0       	push   $0xf013b17a
f0129b6d:	e8 93 66 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129b72:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129b75:	e8 69 32 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0129b7a:	29 c3                	sub    %eax,%ebx
f0129b7c:	89 d8                	mov    %ebx,%eax
f0129b7e:	3d 00 04 00 00       	cmp    $0x400,%eax
f0129b83:	74 17                	je     f0129b9c <test_kshrink+0xdf3>
f0129b85:	83 ec 04             	sub    $0x4,%esp
f0129b88:	68 fc b1 13 f0       	push   $0xf013b1fc
f0129b8d:	68 90 0c 00 00       	push   $0xc90
f0129b92:	68 7a b1 13 f0       	push   $0xf013b17a
f0129b97:	e8 69 66 fd ff       	call   f0100205 <_panic>


	//kfree the shrunk variable
	{
		//kfree 2 MB (shrunk)
		freeFrames = sys_calculate_free_frames() ;
f0129b9c:	e8 42 32 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0129ba1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129ba4:	e8 fd a1 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0129ba9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0129bac:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0129bb2:	83 ec 0c             	sub    $0xc,%esp
f0129bb5:	50                   	push   %eax
f0129bb6:	e8 bc df fd ff       	call   f0107b77 <kfree>
f0129bbb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129bbe:	e8 e3 a1 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0129bc3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129bc6:	74 17                	je     f0129bdf <test_kshrink+0xe36>
f0129bc8:	83 ec 04             	sub    $0x4,%esp
f0129bcb:	68 94 b1 13 f0       	push   $0xf013b194
f0129bd0:	68 9a 0c 00 00       	push   $0xc9a
f0129bd5:	68 7a b1 13 f0       	push   $0xf013b17a
f0129bda:	e8 26 66 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0129bdf:	e8 ff 31 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0129be4:	89 c2                	mov    %eax,%edx
f0129be6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0129be9:	29 c2                	sub    %eax,%edx
f0129beb:	89 d0                	mov    %edx,%eax
f0129bed:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129bf2:	74 17                	je     f0129c0b <test_kshrink+0xe62>
f0129bf4:	83 ec 04             	sub    $0x4,%esp
f0129bf7:	68 2c ba 13 f0       	push   $0xf013ba2c
f0129bfc:	68 9b 0c 00 00       	push   $0xc9b
f0129c01:	68 7a b1 13 f0       	push   $0xf013b17a
f0129c06:	e8 fa 65 fd ff       	call   f0100205 <_panic>
	}

	//Shrink last allocated variable to 4 MB - 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0129c0b:	e8 d3 31 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0129c10:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129c13:	e8 8e a1 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0129c18:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(4*Mega - 20*kilo) ;
f0129c1b:	83 ec 0c             	sub    $0xc,%esp
f0129c1e:	68 00 b0 3f 00       	push   $0x3fb000
f0129c23:	e8 e2 e0 fd ff       	call   f0107d0a <kshrink>
f0129c28:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0129c2b:	e8 76 a1 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0129c30:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129c33:	74 19                	je     f0129c4e <test_kshrink+0xea5>
f0129c35:	68 14 bf 13 f0       	push   $0xf013bf14
f0129c3a:	68 45 bf 13 f0       	push   $0xf013bf45
f0129c3f:	68 a5 0c 00 00       	push   $0xca5
f0129c44:	68 7a b1 13 f0       	push   $0xf013b17a
f0129c49:	e8 b7 65 fd ff       	call   f0100205 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 5) ;
f0129c4e:	e8 90 31 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0129c53:	89 c2                	mov    %eax,%edx
f0129c55:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0129c58:	29 c2                	sub    %eax,%edx
f0129c5a:	89 d0                	mov    %edx,%eax
f0129c5c:	83 f8 05             	cmp    $0x5,%eax
f0129c5f:	74 19                	je     f0129c7a <test_kshrink+0xed1>
f0129c61:	68 7c c1 13 f0       	push   $0xf013c17c
f0129c66:	68 45 bf 13 f0       	push   $0xf013bf45
f0129c6b:	68 a6 0c 00 00       	push   $0xca6
f0129c70:	68 7a b1 13 f0       	push   $0xf013b17a
f0129c75:	e8 8b 65 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0129c7a:	83 ec 0c             	sub    $0xc,%esp
f0129c7d:	68 d8 be 13 f0       	push   $0xf013bed8
f0129c82:	e8 87 70 fd ff       	call   f0100d0e <cprintf>
f0129c87:	83 c4 10             	add    $0x10,%esp

	return 1;
f0129c8a:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0129c8f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0129c92:	5b                   	pop    %ebx
f0129c93:	5f                   	pop    %edi
f0129c94:	5d                   	pop    %ebp
f0129c95:	c3                   	ret    

f0129c96 <test_kfreelast>:


int test_kfreelast()
{
f0129c96:	55                   	push   %ebp
f0129c97:	89 e5                	mov    %esp,%ebp
f0129c99:	57                   	push   %edi
f0129c9a:	53                   	push   %ebx
f0129c9b:	81 ec 90 02 00 00    	sub    $0x290,%esp
	char minByte = 1<<7;
f0129ca1:	c6 45 eb 80          	movb   $0x80,-0x15(%ebp)
	char maxByte = 0x7F;
f0129ca5:	c6 45 ea 7f          	movb   $0x7f,-0x16(%ebp)
	short minShort = 1<<15 ;
f0129ca9:	66 c7 45 e8 00 80    	movw   $0x8000,-0x18(%ebp)
	short maxShort = 0x7FFF;
f0129caf:	66 c7 45 e6 ff 7f    	movw   $0x7fff,-0x1a(%ebp)
	int minInt = 1<<31 ;
f0129cb5:	c7 45 e0 00 00 00 80 	movl   $0x80000000,-0x20(%ebp)
	int maxInt = 0x7FFFFFFF;
f0129cbc:	c7 45 dc ff ff ff 7f 	movl   $0x7fffffff,-0x24(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0129cc3:	e8 1b 31 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0129cc8:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//malloc some spaces
	int i, ce, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0129ccb:	8d 95 0c fe ff ff    	lea    -0x1f4(%ebp),%edx
f0129cd1:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129cd6:	b8 00 00 00 00       	mov    $0x0,%eax
f0129cdb:	89 d7                	mov    %edx,%edi
f0129cdd:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0129cdf:	8d 95 bc fd ff ff    	lea    -0x244(%ebp),%edx
f0129ce5:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129cea:	b8 00 00 00 00       	mov    $0x0,%eax
f0129cef:	89 d7                	mov    %edx,%edi
f0129cf1:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0129cf3:	8d 95 6c fd ff ff    	lea    -0x294(%ebp),%edx
f0129cf9:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129cfe:	b8 00 00 00 00       	mov    $0x0,%eax
f0129d03:	89 d7                	mov    %edx,%edi
f0129d05:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0129d07:	e8 d7 30 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0129d0c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129d0f:	e8 92 a0 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0129d14:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0129d17:	83 ec 0c             	sub    $0xc,%esp
f0129d1a:	68 00 fc 1f 00       	push   $0x1ffc00
f0129d1f:	e8 3d dd fd ff       	call   f0107a61 <kmalloc>
f0129d24:	83 c4 10             	add    $0x10,%esp
f0129d27:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129d2d:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0129d33:	89 c1                	mov    %eax,%ecx
f0129d35:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0129d3c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0129d3f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129d44:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0129d47:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0129d4a:	ba 00 00 00 00       	mov    $0x0,%edx
f0129d4f:	f7 75 cc             	divl   -0x34(%ebp)
f0129d52:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0129d55:	29 d0                	sub    %edx,%eax
f0129d57:	89 c3                	mov    %eax,%ebx
f0129d59:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0129d60:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0129d65:	0f b6 d0             	movzbl %al,%edx
f0129d68:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0129d6b:	01 d0                	add    %edx,%eax
f0129d6d:	48                   	dec    %eax
f0129d6e:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0129d71:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0129d74:	ba 00 00 00 00       	mov    $0x0,%edx
f0129d79:	f7 75 c4             	divl   -0x3c(%ebp)
f0129d7c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0129d7f:	29 d0                	sub    %edx,%eax
f0129d81:	01 c3                	add    %eax,%ebx
f0129d83:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0129d8a:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0129d8f:	0f b6 c0             	movzbl %al,%eax
f0129d92:	c1 e0 04             	shl    $0x4,%eax
f0129d95:	89 c2                	mov    %eax,%edx
f0129d97:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0129d9a:	01 d0                	add    %edx,%eax
f0129d9c:	48                   	dec    %eax
f0129d9d:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0129da0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0129da3:	ba 00 00 00 00       	mov    $0x0,%edx
f0129da8:	f7 75 bc             	divl   -0x44(%ebp)
f0129dab:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0129dae:	29 d0                	sub    %edx,%eax
f0129db0:	01 d8                	add    %ebx,%eax
f0129db2:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0129db7:	39 c1                	cmp    %eax,%ecx
f0129db9:	74 17                	je     f0129dd2 <test_kfreelast+0x13c>
f0129dbb:	83 ec 04             	sub    $0x4,%esp
f0129dbe:	68 60 b2 13 f0       	push   $0xf013b260
f0129dc3:	68 ca 0c 00 00       	push   $0xcca
f0129dc8:	68 7a b1 13 f0       	push   $0xf013b17a
f0129dcd:	e8 33 64 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129dd2:	e8 cf 9f fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0129dd7:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129dda:	74 17                	je     f0129df3 <test_kfreelast+0x15d>
f0129ddc:	83 ec 04             	sub    $0x4,%esp
f0129ddf:	68 94 b1 13 f0       	push   $0xf013b194
f0129de4:	68 cb 0c 00 00       	push   $0xccb
f0129de9:	68 7a b1 13 f0       	push   $0xf013b17a
f0129dee:	e8 12 64 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129df3:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129df6:	e8 e8 2f fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0129dfb:	29 c3                	sub    %eax,%ebx
f0129dfd:	89 d8                	mov    %ebx,%eax
f0129dff:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129e04:	74 17                	je     f0129e1d <test_kfreelast+0x187>
f0129e06:	83 ec 04             	sub    $0x4,%esp
f0129e09:	68 fc b1 13 f0       	push   $0xf013b1fc
f0129e0e:	68 cc 0c 00 00       	push   $0xccc
f0129e13:	68 7a b1 13 f0       	push   $0xf013b17a
f0129e18:	e8 e8 63 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0129e1d:	c7 85 0c fe ff ff ff 	movl   $0x1ffbff,-0x1f4(%ebp)
f0129e24:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0129e27:	e8 b7 2f fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0129e2c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129e2f:	e8 72 9f fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0129e34:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0129e37:	83 ec 0c             	sub    $0xc,%esp
f0129e3a:	68 00 fc 1f 00       	push   $0x1ffc00
f0129e3f:	e8 1d dc fd ff       	call   f0107a61 <kmalloc>
f0129e44:	83 c4 10             	add    $0x10,%esp
f0129e47:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129e4d:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0129e53:	89 c1                	mov    %eax,%ecx
f0129e55:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0129e5c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0129e5f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129e64:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0129e67:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0129e6a:	ba 00 00 00 00       	mov    $0x0,%edx
f0129e6f:	f7 75 b4             	divl   -0x4c(%ebp)
f0129e72:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0129e75:	29 d0                	sub    %edx,%eax
f0129e77:	89 c3                	mov    %eax,%ebx
f0129e79:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0129e80:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0129e85:	0f b6 d0             	movzbl %al,%edx
f0129e88:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0129e8b:	01 d0                	add    %edx,%eax
f0129e8d:	48                   	dec    %eax
f0129e8e:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0129e91:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0129e94:	ba 00 00 00 00       	mov    $0x0,%edx
f0129e99:	f7 75 ac             	divl   -0x54(%ebp)
f0129e9c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0129e9f:	29 d0                	sub    %edx,%eax
f0129ea1:	01 c3                	add    %eax,%ebx
f0129ea3:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0129eaa:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0129eaf:	0f b6 c0             	movzbl %al,%eax
f0129eb2:	c1 e0 04             	shl    $0x4,%eax
f0129eb5:	89 c2                	mov    %eax,%edx
f0129eb7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0129eba:	01 d0                	add    %edx,%eax
f0129ebc:	48                   	dec    %eax
f0129ebd:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0129ec0:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0129ec3:	ba 00 00 00 00       	mov    $0x0,%edx
f0129ec8:	f7 75 a4             	divl   -0x5c(%ebp)
f0129ecb:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0129ece:	29 d0                	sub    %edx,%eax
f0129ed0:	01 d8                	add    %ebx,%eax
f0129ed2:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0129ed7:	39 c1                	cmp    %eax,%ecx
f0129ed9:	74 17                	je     f0129ef2 <test_kfreelast+0x25c>
f0129edb:	83 ec 04             	sub    $0x4,%esp
f0129ede:	68 60 b2 13 f0       	push   $0xf013b260
f0129ee3:	68 d3 0c 00 00       	push   $0xcd3
f0129ee8:	68 7a b1 13 f0       	push   $0xf013b17a
f0129eed:	e8 13 63 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129ef2:	e8 af 9e fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0129ef7:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129efa:	74 17                	je     f0129f13 <test_kfreelast+0x27d>
f0129efc:	83 ec 04             	sub    $0x4,%esp
f0129eff:	68 94 b1 13 f0       	push   $0xf013b194
f0129f04:	68 d4 0c 00 00       	push   $0xcd4
f0129f09:	68 7a b1 13 f0       	push   $0xf013b17a
f0129f0e:	e8 f2 62 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129f13:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129f16:	e8 c8 2e fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0129f1b:	29 c3                	sub    %eax,%ebx
f0129f1d:	89 d8                	mov    %ebx,%eax
f0129f1f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129f24:	74 17                	je     f0129f3d <test_kfreelast+0x2a7>
f0129f26:	83 ec 04             	sub    $0x4,%esp
f0129f29:	68 fc b1 13 f0       	push   $0xf013b1fc
f0129f2e:	68 d5 0c 00 00       	push   $0xcd5
f0129f33:	68 7a b1 13 f0       	push   $0xf013b17a
f0129f38:	e8 c8 62 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0129f3d:	c7 85 10 fe ff ff ff 	movl   $0x1ffbff,-0x1f0(%ebp)
f0129f44:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129f47:	e8 97 2e fe ff       	call   f010cde3 <sys_calculate_free_frames>
f0129f4c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129f4f:	e8 52 9e fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0129f54:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0129f57:	83 ec 0c             	sub    $0xc,%esp
f0129f5a:	68 00 08 00 00       	push   $0x800
f0129f5f:	e8 fd da fd ff       	call   f0107a61 <kmalloc>
f0129f64:	83 c4 10             	add    $0x10,%esp
f0129f67:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129f6d:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0129f73:	89 c1                	mov    %eax,%ecx
f0129f75:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0129f7c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129f7f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129f84:	89 45 98             	mov    %eax,-0x68(%ebp)
f0129f87:	8b 45 98             	mov    -0x68(%ebp),%eax
f0129f8a:	ba 00 00 00 00       	mov    $0x0,%edx
f0129f8f:	f7 75 9c             	divl   -0x64(%ebp)
f0129f92:	8b 45 98             	mov    -0x68(%ebp),%eax
f0129f95:	29 d0                	sub    %edx,%eax
f0129f97:	89 c3                	mov    %eax,%ebx
f0129f99:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0129fa0:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0129fa5:	0f b6 d0             	movzbl %al,%edx
f0129fa8:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0129fab:	01 d0                	add    %edx,%eax
f0129fad:	48                   	dec    %eax
f0129fae:	89 45 90             	mov    %eax,-0x70(%ebp)
f0129fb1:	8b 45 90             	mov    -0x70(%ebp),%eax
f0129fb4:	ba 00 00 00 00       	mov    $0x0,%edx
f0129fb9:	f7 75 94             	divl   -0x6c(%ebp)
f0129fbc:	8b 45 90             	mov    -0x70(%ebp),%eax
f0129fbf:	29 d0                	sub    %edx,%eax
f0129fc1:	01 c3                	add    %eax,%ebx
f0129fc3:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0129fca:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0129fcf:	0f b6 c0             	movzbl %al,%eax
f0129fd2:	c1 e0 04             	shl    $0x4,%eax
f0129fd5:	89 c2                	mov    %eax,%edx
f0129fd7:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129fda:	01 d0                	add    %edx,%eax
f0129fdc:	48                   	dec    %eax
f0129fdd:	89 45 88             	mov    %eax,-0x78(%ebp)
f0129fe0:	8b 45 88             	mov    -0x78(%ebp),%eax
f0129fe3:	ba 00 00 00 00       	mov    $0x0,%edx
f0129fe8:	f7 75 8c             	divl   -0x74(%ebp)
f0129feb:	8b 45 88             	mov    -0x78(%ebp),%eax
f0129fee:	29 d0                	sub    %edx,%eax
f0129ff0:	01 d8                	add    %ebx,%eax
f0129ff2:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0129ff7:	39 c1                	cmp    %eax,%ecx
f0129ff9:	74 17                	je     f012a012 <test_kfreelast+0x37c>
f0129ffb:	83 ec 04             	sub    $0x4,%esp
f0129ffe:	68 60 b2 13 f0       	push   $0xf013b260
f012a003:	68 dc 0c 00 00       	push   $0xcdc
f012a008:	68 7a b1 13 f0       	push   $0xf013b17a
f012a00d:	e8 f3 61 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a012:	e8 8f 9d fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012a017:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a01a:	74 17                	je     f012a033 <test_kfreelast+0x39d>
f012a01c:	83 ec 04             	sub    $0x4,%esp
f012a01f:	68 94 b1 13 f0       	push   $0xf013b194
f012a024:	68 dd 0c 00 00       	push   $0xcdd
f012a029:	68 7a b1 13 f0       	push   $0xf013b17a
f012a02e:	e8 d2 61 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a033:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a036:	e8 a8 2d fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012a03b:	29 c3                	sub    %eax,%ebx
f012a03d:	89 d8                	mov    %ebx,%eax
f012a03f:	83 f8 01             	cmp    $0x1,%eax
f012a042:	74 17                	je     f012a05b <test_kfreelast+0x3c5>
f012a044:	83 ec 04             	sub    $0x4,%esp
f012a047:	68 fc b1 13 f0       	push   $0xf013b1fc
f012a04c:	68 de 0c 00 00       	push   $0xcde
f012a051:	68 7a b1 13 f0       	push   $0xf013b17a
f012a056:	e8 aa 61 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f012a05b:	c7 85 14 fe ff ff ff 	movl   $0x7ff,-0x1ec(%ebp)
f012a062:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f012a065:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012a06b:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012a06e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a075:	eb 0e                	jmp    f012a085 <test_kfreelast+0x3ef>
		{
			ptr[i] = 2 ;
f012a077:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a07a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a07d:	01 d0                	add    %edx,%eax
f012a07f:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012a082:	ff 45 f4             	incl   -0xc(%ebp)
f012a085:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012a08b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a08e:	7f e7                	jg     f012a077 <test_kfreelast+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012a090:	e8 4e 2d fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012a095:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a098:	e8 09 9d fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012a09d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012a0a0:	83 ec 0c             	sub    $0xc,%esp
f012a0a3:	68 00 08 00 00       	push   $0x800
f012a0a8:	e8 b4 d9 fd ff       	call   f0107a61 <kmalloc>
f012a0ad:	83 c4 10             	add    $0x10,%esp
f012a0b0:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a0b6:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012a0bc:	89 c1                	mov    %eax,%ecx
f012a0be:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f012a0c5:	8b 45 80             	mov    -0x80(%ebp),%eax
f012a0c8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a0cd:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f012a0d3:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012a0d9:	ba 00 00 00 00       	mov    $0x0,%edx
f012a0de:	f7 75 80             	divl   -0x80(%ebp)
f012a0e1:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012a0e7:	29 d0                	sub    %edx,%eax
f012a0e9:	89 c3                	mov    %eax,%ebx
f012a0eb:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f012a0f2:	10 00 00 
f012a0f5:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012a0fa:	0f b6 d0             	movzbl %al,%edx
f012a0fd:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012a103:	01 d0                	add    %edx,%eax
f012a105:	48                   	dec    %eax
f012a106:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f012a10c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012a112:	ba 00 00 00 00       	mov    $0x0,%edx
f012a117:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f012a11d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012a123:	29 d0                	sub    %edx,%eax
f012a125:	01 c3                	add    %eax,%ebx
f012a127:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f012a12e:	10 00 00 
f012a131:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012a136:	0f b6 c0             	movzbl %al,%eax
f012a139:	c1 e0 04             	shl    $0x4,%eax
f012a13c:	89 c2                	mov    %eax,%edx
f012a13e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012a144:	01 d0                	add    %edx,%eax
f012a146:	48                   	dec    %eax
f012a147:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f012a14d:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012a153:	ba 00 00 00 00       	mov    $0x0,%edx
f012a158:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f012a15e:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012a164:	29 d0                	sub    %edx,%eax
f012a166:	01 d8                	add    %ebx,%eax
f012a168:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012a16d:	39 c1                	cmp    %eax,%ecx
f012a16f:	74 17                	je     f012a188 <test_kfreelast+0x4f2>
f012a171:	83 ec 04             	sub    $0x4,%esp
f012a174:	68 60 b2 13 f0       	push   $0xf013b260
f012a179:	68 ea 0c 00 00       	push   $0xcea
f012a17e:	68 7a b1 13 f0       	push   $0xf013b17a
f012a183:	e8 7d 60 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a188:	e8 19 9c fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012a18d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a190:	74 17                	je     f012a1a9 <test_kfreelast+0x513>
f012a192:	83 ec 04             	sub    $0x4,%esp
f012a195:	68 94 b1 13 f0       	push   $0xf013b194
f012a19a:	68 eb 0c 00 00       	push   $0xceb
f012a19f:	68 7a b1 13 f0       	push   $0xf013b17a
f012a1a4:	e8 5c 60 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a1a9:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a1ac:	e8 32 2c fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012a1b1:	29 c3                	sub    %eax,%ebx
f012a1b3:	89 d8                	mov    %ebx,%eax
f012a1b5:	83 f8 01             	cmp    $0x1,%eax
f012a1b8:	74 17                	je     f012a1d1 <test_kfreelast+0x53b>
f012a1ba:	83 ec 04             	sub    $0x4,%esp
f012a1bd:	68 fc b1 13 f0       	push   $0xf013b1fc
f012a1c2:	68 ec 0c 00 00       	push   $0xcec
f012a1c7:	68 7a b1 13 f0       	push   $0xf013b17a
f012a1cc:	e8 34 60 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012a1d1:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f012a1d8:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012a1db:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012a1e1:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012a1e4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a1eb:	eb 0e                	jmp    f012a1fb <test_kfreelast+0x565>
		{
			ptr[i] = 3 ;
f012a1ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a1f0:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a1f3:	01 d0                	add    %edx,%eax
f012a1f5:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012a1f8:	ff 45 f4             	incl   -0xc(%ebp)
f012a1fb:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012a201:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a204:	7f e7                	jg     f012a1ed <test_kfreelast+0x557>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012a206:	e8 d8 2b fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012a20b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a20e:	e8 93 9b fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012a213:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012a216:	83 ec 0c             	sub    $0xc,%esp
f012a219:	68 00 1c 00 00       	push   $0x1c00
f012a21e:	e8 3e d8 fd ff       	call   f0107a61 <kmalloc>
f012a223:	83 c4 10             	add    $0x10,%esp
f012a226:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a22c:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012a232:	89 c1                	mov    %eax,%ecx
f012a234:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f012a23b:	10 00 00 
f012a23e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012a244:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a249:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f012a24f:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012a255:	ba 00 00 00 00       	mov    $0x0,%edx
f012a25a:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f012a260:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012a266:	29 d0                	sub    %edx,%eax
f012a268:	89 c3                	mov    %eax,%ebx
f012a26a:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f012a271:	10 00 00 
f012a274:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012a279:	0f b6 d0             	movzbl %al,%edx
f012a27c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012a282:	01 d0                	add    %edx,%eax
f012a284:	48                   	dec    %eax
f012a285:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f012a28b:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012a291:	ba 00 00 00 00       	mov    $0x0,%edx
f012a296:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f012a29c:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012a2a2:	29 d0                	sub    %edx,%eax
f012a2a4:	01 c3                	add    %eax,%ebx
f012a2a6:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f012a2ad:	10 00 00 
f012a2b0:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012a2b5:	0f b6 c0             	movzbl %al,%eax
f012a2b8:	c1 e0 04             	shl    $0x4,%eax
f012a2bb:	89 c2                	mov    %eax,%edx
f012a2bd:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012a2c3:	01 d0                	add    %edx,%eax
f012a2c5:	48                   	dec    %eax
f012a2c6:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f012a2cc:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012a2d2:	ba 00 00 00 00       	mov    $0x0,%edx
f012a2d7:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f012a2dd:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012a2e3:	29 d0                	sub    %edx,%eax
f012a2e5:	01 d8                	add    %ebx,%eax
f012a2e7:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012a2ec:	39 c1                	cmp    %eax,%ecx
f012a2ee:	74 17                	je     f012a307 <test_kfreelast+0x671>
f012a2f0:	83 ec 04             	sub    $0x4,%esp
f012a2f3:	68 60 b2 13 f0       	push   $0xf013b260
f012a2f8:	68 f8 0c 00 00       	push   $0xcf8
f012a2fd:	68 7a b1 13 f0       	push   $0xf013b17a
f012a302:	e8 fe 5e fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a307:	e8 9a 9a fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012a30c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a30f:	74 17                	je     f012a328 <test_kfreelast+0x692>
f012a311:	83 ec 04             	sub    $0x4,%esp
f012a314:	68 94 b1 13 f0       	push   $0xf013b194
f012a319:	68 f9 0c 00 00       	push   $0xcf9
f012a31e:	68 7a b1 13 f0       	push   $0xf013b17a
f012a323:	e8 dd 5e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a328:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a32b:	e8 b3 2a fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012a330:	29 c3                	sub    %eax,%ebx
f012a332:	89 d8                	mov    %ebx,%eax
f012a334:	83 f8 02             	cmp    $0x2,%eax
f012a337:	74 17                	je     f012a350 <test_kfreelast+0x6ba>
f012a339:	83 ec 04             	sub    $0x4,%esp
f012a33c:	68 fc b1 13 f0       	push   $0xf013b1fc
f012a341:	68 fa 0c 00 00       	push   $0xcfa
f012a346:	68 7a b1 13 f0       	push   $0xf013b17a
f012a34b:	e8 b5 5e fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f012a350:	c7 85 1c fe ff ff ff 	movl   $0x1bff,-0x1e4(%ebp)
f012a357:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f012a35a:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012a360:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012a363:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a36a:	eb 0e                	jmp    f012a37a <test_kfreelast+0x6e4>
		{
			ptr[i] = 4 ;
f012a36c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a36f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a372:	01 d0                	add    %edx,%eax
f012a374:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012a377:	ff 45 f4             	incl   -0xc(%ebp)
f012a37a:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012a380:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a383:	7f e7                	jg     f012a36c <test_kfreelast+0x6d6>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012a385:	e8 59 2a fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012a38a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a38d:	e8 14 9a fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012a392:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012a395:	83 ec 0c             	sub    $0xc,%esp
f012a398:	68 00 fc 2f 00       	push   $0x2ffc00
f012a39d:	e8 bf d6 fd ff       	call   f0107a61 <kmalloc>
f012a3a2:	83 c4 10             	add    $0x10,%esp
f012a3a5:	89 85 80 fd ff ff    	mov    %eax,-0x280(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a3ab:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012a3b1:	89 c1                	mov    %eax,%ecx
f012a3b3:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f012a3ba:	10 00 00 
f012a3bd:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012a3c3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a3c8:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f012a3ce:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012a3d4:	ba 00 00 00 00       	mov    $0x0,%edx
f012a3d9:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f012a3df:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012a3e5:	29 d0                	sub    %edx,%eax
f012a3e7:	89 c3                	mov    %eax,%ebx
f012a3e9:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f012a3f0:	10 00 00 
f012a3f3:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012a3f8:	0f b6 d0             	movzbl %al,%edx
f012a3fb:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012a401:	01 d0                	add    %edx,%eax
f012a403:	48                   	dec    %eax
f012a404:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f012a40a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012a410:	ba 00 00 00 00       	mov    $0x0,%edx
f012a415:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f012a41b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012a421:	29 d0                	sub    %edx,%eax
f012a423:	01 c3                	add    %eax,%ebx
f012a425:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f012a42c:	10 00 00 
f012a42f:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012a434:	0f b6 c0             	movzbl %al,%eax
f012a437:	c1 e0 04             	shl    $0x4,%eax
f012a43a:	89 c2                	mov    %eax,%edx
f012a43c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012a442:	01 d0                	add    %edx,%eax
f012a444:	48                   	dec    %eax
f012a445:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f012a44b:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012a451:	ba 00 00 00 00       	mov    $0x0,%edx
f012a456:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f012a45c:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012a462:	29 d0                	sub    %edx,%eax
f012a464:	01 d8                	add    %ebx,%eax
f012a466:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012a46b:	39 c1                	cmp    %eax,%ecx
f012a46d:	74 17                	je     f012a486 <test_kfreelast+0x7f0>
f012a46f:	83 ec 04             	sub    $0x4,%esp
f012a472:	68 60 b2 13 f0       	push   $0xf013b260
f012a477:	68 06 0d 00 00       	push   $0xd06
f012a47c:	68 7a b1 13 f0       	push   $0xf013b17a
f012a481:	e8 7f 5d fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a486:	e8 1b 99 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012a48b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a48e:	74 17                	je     f012a4a7 <test_kfreelast+0x811>
f012a490:	83 ec 04             	sub    $0x4,%esp
f012a493:	68 94 b1 13 f0       	push   $0xf013b194
f012a498:	68 07 0d 00 00       	push   $0xd07
f012a49d:	68 7a b1 13 f0       	push   $0xf013b17a
f012a4a2:	e8 5e 5d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a4a7:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a4aa:	e8 34 29 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012a4af:	29 c3                	sub    %eax,%ebx
f012a4b1:	89 d8                	mov    %ebx,%eax
f012a4b3:	3d 00 03 00 00       	cmp    $0x300,%eax
f012a4b8:	74 17                	je     f012a4d1 <test_kfreelast+0x83b>
f012a4ba:	83 ec 04             	sub    $0x4,%esp
f012a4bd:	68 fc b1 13 f0       	push   $0xf013b1fc
f012a4c2:	68 08 0d 00 00       	push   $0xd08
f012a4c7:	68 7a b1 13 f0       	push   $0xf013b17a
f012a4cc:	e8 34 5d fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f012a4d1:	c7 85 20 fe ff ff ff 	movl   $0x2ffbff,-0x1e0(%ebp)
f012a4d8:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f012a4db:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012a4e1:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012a4e4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a4eb:	eb 0e                	jmp    f012a4fb <test_kfreelast+0x865>
		{
			ptr[i] = 5 ;
f012a4ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a4f0:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a4f3:	01 d0                	add    %edx,%eax
f012a4f5:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012a4f8:	ff 45 f4             	incl   -0xc(%ebp)
f012a4fb:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012a501:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a504:	7f e7                	jg     f012a4ed <test_kfreelast+0x857>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012a506:	e8 d8 28 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012a50b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a50e:	e8 93 98 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012a513:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f012a516:	83 ec 0c             	sub    $0xc,%esp
f012a519:	68 00 fc 5f 00       	push   $0x5ffc00
f012a51e:	e8 3e d5 fd ff       	call   f0107a61 <kmalloc>
f012a523:	83 c4 10             	add    $0x10,%esp
f012a526:	89 85 84 fd ff ff    	mov    %eax,-0x27c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a52c:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f012a532:	89 c1                	mov    %eax,%ecx
f012a534:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f012a53b:	10 00 00 
f012a53e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012a544:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a549:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f012a54f:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012a555:	ba 00 00 00 00       	mov    $0x0,%edx
f012a55a:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f012a560:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012a566:	29 d0                	sub    %edx,%eax
f012a568:	89 c3                	mov    %eax,%ebx
f012a56a:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f012a571:	10 00 00 
f012a574:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012a579:	0f b6 d0             	movzbl %al,%edx
f012a57c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012a582:	01 d0                	add    %edx,%eax
f012a584:	48                   	dec    %eax
f012a585:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f012a58b:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a591:	ba 00 00 00 00       	mov    $0x0,%edx
f012a596:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f012a59c:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a5a2:	29 d0                	sub    %edx,%eax
f012a5a4:	01 c3                	add    %eax,%ebx
f012a5a6:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f012a5ad:	10 00 00 
f012a5b0:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012a5b5:	0f b6 c0             	movzbl %al,%eax
f012a5b8:	c1 e0 04             	shl    $0x4,%eax
f012a5bb:	89 c2                	mov    %eax,%edx
f012a5bd:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012a5c3:	01 d0                	add    %edx,%eax
f012a5c5:	48                   	dec    %eax
f012a5c6:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f012a5cc:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a5d2:	ba 00 00 00 00       	mov    $0x0,%edx
f012a5d7:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f012a5dd:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a5e3:	29 d0                	sub    %edx,%eax
f012a5e5:	01 d8                	add    %ebx,%eax
f012a5e7:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012a5ec:	39 c1                	cmp    %eax,%ecx
f012a5ee:	74 17                	je     f012a607 <test_kfreelast+0x971>
f012a5f0:	83 ec 04             	sub    $0x4,%esp
f012a5f3:	68 60 b2 13 f0       	push   $0xf013b260
f012a5f8:	68 14 0d 00 00       	push   $0xd14
f012a5fd:	68 7a b1 13 f0       	push   $0xf013b17a
f012a602:	e8 fe 5b fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a607:	e8 9a 97 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012a60c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a60f:	74 17                	je     f012a628 <test_kfreelast+0x992>
f012a611:	83 ec 04             	sub    $0x4,%esp
f012a614:	68 94 b1 13 f0       	push   $0xf013b194
f012a619:	68 15 0d 00 00       	push   $0xd15
f012a61e:	68 7a b1 13 f0       	push   $0xf013b17a
f012a623:	e8 dd 5b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a628:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a62b:	e8 b3 27 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012a630:	29 c3                	sub    %eax,%ebx
f012a632:	89 d8                	mov    %ebx,%eax
f012a634:	3d 00 06 00 00       	cmp    $0x600,%eax
f012a639:	74 17                	je     f012a652 <test_kfreelast+0x9bc>
f012a63b:	83 ec 04             	sub    $0x4,%esp
f012a63e:	68 fc b1 13 f0       	push   $0xf013b1fc
f012a643:	68 16 0d 00 00       	push   $0xd16
f012a648:	68 7a b1 13 f0       	push   $0xf013b17a
f012a64d:	e8 b3 5b fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f012a652:	c7 85 24 fe ff ff ff 	movl   $0x5ffbff,-0x1dc(%ebp)
f012a659:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012a65c:	e8 82 27 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012a661:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a664:	e8 3d 97 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012a669:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012a66c:	83 ec 0c             	sub    $0xc,%esp
f012a66f:	68 00 38 00 00       	push   $0x3800
f012a674:	e8 e8 d3 fd ff       	call   f0107a61 <kmalloc>
f012a679:	83 c4 10             	add    $0x10,%esp
f012a67c:	89 85 88 fd ff ff    	mov    %eax,-0x278(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a682:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012a688:	89 c1                	mov    %eax,%ecx
f012a68a:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f012a691:	10 00 00 
f012a694:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a69a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a69f:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f012a6a5:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012a6ab:	ba 00 00 00 00       	mov    $0x0,%edx
f012a6b0:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f012a6b6:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012a6bc:	29 d0                	sub    %edx,%eax
f012a6be:	89 c3                	mov    %eax,%ebx
f012a6c0:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f012a6c7:	10 00 00 
f012a6ca:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012a6cf:	0f b6 d0             	movzbl %al,%edx
f012a6d2:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012a6d8:	01 d0                	add    %edx,%eax
f012a6da:	48                   	dec    %eax
f012a6db:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f012a6e1:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012a6e7:	ba 00 00 00 00       	mov    $0x0,%edx
f012a6ec:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f012a6f2:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012a6f8:	29 d0                	sub    %edx,%eax
f012a6fa:	01 c3                	add    %eax,%ebx
f012a6fc:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f012a703:	10 00 00 
f012a706:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012a70b:	0f b6 c0             	movzbl %al,%eax
f012a70e:	c1 e0 04             	shl    $0x4,%eax
f012a711:	89 c2                	mov    %eax,%edx
f012a713:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012a719:	01 d0                	add    %edx,%eax
f012a71b:	48                   	dec    %eax
f012a71c:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f012a722:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012a728:	ba 00 00 00 00       	mov    $0x0,%edx
f012a72d:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f012a733:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012a739:	29 d0                	sub    %edx,%eax
f012a73b:	01 d8                	add    %ebx,%eax
f012a73d:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012a742:	39 c1                	cmp    %eax,%ecx
f012a744:	74 17                	je     f012a75d <test_kfreelast+0xac7>
f012a746:	83 ec 04             	sub    $0x4,%esp
f012a749:	68 60 b2 13 f0       	push   $0xf013b260
f012a74e:	68 1d 0d 00 00       	push   $0xd1d
f012a753:	68 7a b1 13 f0       	push   $0xf013b17a
f012a758:	e8 a8 5a fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a75d:	e8 44 96 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012a762:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a765:	74 17                	je     f012a77e <test_kfreelast+0xae8>
f012a767:	83 ec 04             	sub    $0x4,%esp
f012a76a:	68 94 b1 13 f0       	push   $0xf013b194
f012a76f:	68 1e 0d 00 00       	push   $0xd1e
f012a774:	68 7a b1 13 f0       	push   $0xf013b17a
f012a779:	e8 87 5a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a77e:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a781:	e8 5d 26 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012a786:	29 c3                	sub    %eax,%ebx
f012a788:	89 d8                	mov    %ebx,%eax
f012a78a:	83 f8 04             	cmp    $0x4,%eax
f012a78d:	74 17                	je     f012a7a6 <test_kfreelast+0xb10>
f012a78f:	83 ec 04             	sub    $0x4,%esp
f012a792:	68 fc b1 13 f0       	push   $0xf013b1fc
f012a797:	68 1f 0d 00 00       	push   $0xd1f
f012a79c:	68 7a b1 13 f0       	push   $0xf013b17a
f012a7a1:	e8 5f 5a fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f012a7a6:	c7 85 28 fe ff ff ff 	movl   $0x37ff,-0x1d8(%ebp)
f012a7ad:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f012a7b0:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012a7b6:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012a7b9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a7c0:	eb 0e                	jmp    f012a7d0 <test_kfreelast+0xb3a>
		{
			ptr[i] = 7 ;
f012a7c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a7c5:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a7c8:	01 d0                	add    %edx,%eax
f012a7ca:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012a7cd:	ff 45 f4             	incl   -0xc(%ebp)
f012a7d0:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012a7d6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a7d9:	7f e7                	jg     f012a7c2 <test_kfreelast+0xb2c>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f012a7db:	e8 03 26 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012a7e0:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012a7e6:	e8 bb 95 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012a7eb:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[0]);
f012a7f1:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012a7f7:	83 ec 0c             	sub    $0xc,%esp
f012a7fa:	50                   	push   %eax
f012a7fb:	e8 77 d3 fd ff       	call   f0107b77 <kfree>
f012a800:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a803:	e8 9e 95 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012a808:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012a80e:	74 17                	je     f012a827 <test_kfreelast+0xb91>
f012a810:	83 ec 04             	sub    $0x4,%esp
f012a813:	68 94 b1 13 f0       	push   $0xf013b194
f012a818:	68 2e 0d 00 00       	push   $0xd2e
f012a81d:	68 7a b1 13 f0       	push   $0xf013b17a
f012a822:	e8 de 59 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012a827:	e8 b7 25 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012a82c:	89 c2                	mov    %eax,%edx
f012a82e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012a834:	29 c2                	sub    %eax,%edx
f012a836:	89 d0                	mov    %edx,%eax
f012a838:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a83d:	74 17                	je     f012a856 <test_kfreelast+0xbc0>
f012a83f:	83 ec 04             	sub    $0x4,%esp
f012a842:	68 04 b9 13 f0       	push   $0xf013b904
f012a847:	68 2f 0d 00 00       	push   $0xd2f
f012a84c:	68 7a b1 13 f0       	push   $0xf013b17a
f012a851:	e8 af 59 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012a856:	e8 88 25 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012a85b:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a861:	e8 40 95 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012a866:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[1]);
f012a86c:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f012a872:	83 ec 0c             	sub    $0xc,%esp
f012a875:	50                   	push   %eax
f012a876:	e8 fc d2 fd ff       	call   f0107b77 <kfree>
f012a87b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a87e:	e8 23 95 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012a883:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012a889:	74 17                	je     f012a8a2 <test_kfreelast+0xc0c>
f012a88b:	83 ec 04             	sub    $0x4,%esp
f012a88e:	68 94 b1 13 f0       	push   $0xf013b194
f012a893:	68 35 0d 00 00       	push   $0xd35
f012a898:	68 7a b1 13 f0       	push   $0xf013b17a
f012a89d:	e8 63 59 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f012a8a2:	e8 3c 25 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012a8a7:	89 c2                	mov    %eax,%edx
f012a8a9:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012a8af:	29 c2                	sub    %eax,%edx
f012a8b1:	89 d0                	mov    %edx,%eax
f012a8b3:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a8b8:	74 17                	je     f012a8d1 <test_kfreelast+0xc3b>
f012a8ba:	83 ec 04             	sub    $0x4,%esp
f012a8bd:	68 04 b9 13 f0       	push   $0xf013b904
f012a8c2:	68 36 0d 00 00       	push   $0xd36
f012a8c7:	68 7a b1 13 f0       	push   $0xf013b17a
f012a8cc:	e8 34 59 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012a8d1:	e8 0d 25 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012a8d6:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a8dc:	e8 c5 94 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012a8e1:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[6]);
f012a8e7:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f012a8ed:	83 ec 0c             	sub    $0xc,%esp
f012a8f0:	50                   	push   %eax
f012a8f1:	e8 81 d2 fd ff       	call   f0107b77 <kfree>
f012a8f6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a8f9:	e8 a8 94 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012a8fe:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012a904:	74 17                	je     f012a91d <test_kfreelast+0xc87>
f012a906:	83 ec 04             	sub    $0x4,%esp
f012a909:	68 94 b1 13 f0       	push   $0xf013b194
f012a90e:	68 3c 0d 00 00       	push   $0xd3c
f012a913:	68 7a b1 13 f0       	push   $0xf013b17a
f012a918:	e8 e8 58 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012a91d:	e8 c1 24 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012a922:	89 c2                	mov    %eax,%edx
f012a924:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012a92a:	29 c2                	sub    %eax,%edx
f012a92c:	89 d0                	mov    %edx,%eax
f012a92e:	3d 00 06 00 00       	cmp    $0x600,%eax
f012a933:	74 17                	je     f012a94c <test_kfreelast+0xcb6>
f012a935:	83 ec 04             	sub    $0x4,%esp
f012a938:	68 04 b9 13 f0       	push   $0xf013b904
f012a93d:	68 3d 0d 00 00       	push   $0xd3d
f012a942:	68 7a b1 13 f0       	push   $0xf013b17a
f012a947:	e8 b9 58 fd ff       	call   f0100205 <_panic>
	}

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f012a94c:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012a952:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012a955:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a95c:	eb 1e                	jmp    f012a97c <test_kfreelast+0xce6>
		{
			sums[2] += ptr[i] ;
f012a95e:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012a964:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a967:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a96a:	01 c8                	add    %ecx,%eax
f012a96c:	8a 00                	mov    (%eax),%al
f012a96e:	0f be c0             	movsbl %al,%eax
f012a971:	01 d0                	add    %edx,%eax
f012a973:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012a979:	ff 45 f4             	incl   -0xc(%ebp)
f012a97c:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012a982:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a985:	7f d7                	jg     f012a95e <test_kfreelast+0xcc8>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f012a987:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012a98d:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012a993:	01 c0                	add    %eax,%eax
f012a995:	39 c2                	cmp    %eax,%edx
f012a997:	74 17                	je     f012a9b0 <test_kfreelast+0xd1a>
f012a999:	83 ec 04             	sub    $0x4,%esp
f012a99c:	68 60 b9 13 f0       	push   $0xf013b960
f012a9a1:	68 48 0d 00 00       	push   $0xd48
f012a9a6:	68 7a b1 13 f0       	push   $0xf013b17a
f012a9ab:	e8 55 58 fd ff       	call   f0100205 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f012a9b0:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012a9b6:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012a9b9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a9c0:	eb 1e                	jmp    f012a9e0 <test_kfreelast+0xd4a>
		{
			sums[3] += ptr[i] ;
f012a9c2:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012a9c8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a9cb:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a9ce:	01 c8                	add    %ecx,%eax
f012a9d0:	8a 00                	mov    (%eax),%al
f012a9d2:	0f be c0             	movsbl %al,%eax
f012a9d5:	01 d0                	add    %edx,%eax
f012a9d7:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012a9dd:	ff 45 f4             	incl   -0xc(%ebp)
f012a9e0:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012a9e6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a9e9:	7f d7                	jg     f012a9c2 <test_kfreelast+0xd2c>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f012a9eb:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012a9f1:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012a9f7:	89 c1                	mov    %eax,%ecx
f012a9f9:	01 c9                	add    %ecx,%ecx
f012a9fb:	01 c8                	add    %ecx,%eax
f012a9fd:	39 c2                	cmp    %eax,%edx
f012a9ff:	74 17                	je     f012aa18 <test_kfreelast+0xd82>
f012aa01:	83 ec 04             	sub    $0x4,%esp
f012aa04:	68 60 b9 13 f0       	push   $0xf013b960
f012aa09:	68 50 0d 00 00       	push   $0xd50
f012aa0e:	68 7a b1 13 f0       	push   $0xf013b17a
f012aa13:	e8 ed 57 fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f012aa18:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012aa1e:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012aa21:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012aa28:	eb 1e                	jmp    f012aa48 <test_kfreelast+0xdb2>
		{
			sums[4] += ptr[i] ;
f012aa2a:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f012aa30:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012aa33:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012aa36:	01 c8                	add    %ecx,%eax
f012aa38:	8a 00                	mov    (%eax),%al
f012aa3a:	0f be c0             	movsbl %al,%eax
f012aa3d:	01 d0                	add    %edx,%eax
f012aa3f:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012aa45:	ff 45 f4             	incl   -0xc(%ebp)
f012aa48:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012aa4e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012aa51:	7f d7                	jg     f012aa2a <test_kfreelast+0xd94>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f012aa53:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f012aa59:	8b 95 1c fe ff ff    	mov    -0x1e4(%ebp),%edx
f012aa5f:	c1 e2 02             	shl    $0x2,%edx
f012aa62:	39 d0                	cmp    %edx,%eax
f012aa64:	74 17                	je     f012aa7d <test_kfreelast+0xde7>
f012aa66:	83 ec 04             	sub    $0x4,%esp
f012aa69:	68 60 b9 13 f0       	push   $0xf013b960
f012aa6e:	68 58 0d 00 00       	push   $0xd58
f012aa73:	68 7a b1 13 f0       	push   $0xf013b17a
f012aa78:	e8 88 57 fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f012aa7d:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012aa83:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012aa86:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012aa8d:	eb 1e                	jmp    f012aaad <test_kfreelast+0xe17>
		{
			sums[5] += ptr[i] ;
f012aa8f:	8b 95 d0 fd ff ff    	mov    -0x230(%ebp),%edx
f012aa95:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012aa98:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012aa9b:	01 c8                	add    %ecx,%eax
f012aa9d:	8a 00                	mov    (%eax),%al
f012aa9f:	0f be c0             	movsbl %al,%eax
f012aaa2:	01 d0                	add    %edx,%eax
f012aaa4:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012aaaa:	ff 45 f4             	incl   -0xc(%ebp)
f012aaad:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012aab3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012aab6:	7f d7                	jg     f012aa8f <test_kfreelast+0xdf9>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f012aab8:	8b 8d d0 fd ff ff    	mov    -0x230(%ebp),%ecx
f012aabe:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f012aac4:	89 d0                	mov    %edx,%eax
f012aac6:	c1 e0 02             	shl    $0x2,%eax
f012aac9:	01 d0                	add    %edx,%eax
f012aacb:	39 c1                	cmp    %eax,%ecx
f012aacd:	74 17                	je     f012aae6 <test_kfreelast+0xe50>
f012aacf:	83 ec 04             	sub    $0x4,%esp
f012aad2:	68 60 b9 13 f0       	push   $0xf013b960
f012aad7:	68 60 0d 00 00       	push   $0xd60
f012aadc:	68 7a b1 13 f0       	push   $0xf013b17a
f012aae1:	e8 1f 57 fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f012aae6:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012aaec:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012aaef:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012aaf6:	eb 1e                	jmp    f012ab16 <test_kfreelast+0xe80>
		{
			sums[7] += ptr[i] ;
f012aaf8:	8b 95 d8 fd ff ff    	mov    -0x228(%ebp),%edx
f012aafe:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012ab01:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ab04:	01 c8                	add    %ecx,%eax
f012ab06:	8a 00                	mov    (%eax),%al
f012ab08:	0f be c0             	movsbl %al,%eax
f012ab0b:	01 d0                	add    %edx,%eax
f012ab0d:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012ab13:	ff 45 f4             	incl   -0xc(%ebp)
f012ab16:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012ab1c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ab1f:	7f d7                	jg     f012aaf8 <test_kfreelast+0xe62>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f012ab21:	8b 8d d8 fd ff ff    	mov    -0x228(%ebp),%ecx
f012ab27:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f012ab2d:	89 d0                	mov    %edx,%eax
f012ab2f:	01 c0                	add    %eax,%eax
f012ab31:	01 d0                	add    %edx,%eax
f012ab33:	01 c0                	add    %eax,%eax
f012ab35:	01 d0                	add    %edx,%eax
f012ab37:	39 c1                	cmp    %eax,%ecx
f012ab39:	74 17                	je     f012ab52 <test_kfreelast+0xebc>
f012ab3b:	83 ec 04             	sub    $0x4,%esp
f012ab3e:	68 60 b9 13 f0       	push   $0xf013b960
f012ab43:	68 68 0d 00 00       	push   $0xd68
f012ab48:	68 7a b1 13 f0       	push   $0xf013b17a
f012ab4d:	e8 b3 56 fd ff       	call   f0100205 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f012ab52:	e8 8c 22 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012ab57:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ab5a:	e8 47 92 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012ab5f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f012ab62:	83 ec 0c             	sub    $0xc,%esp
f012ab65:	68 00 50 00 00       	push   $0x5000
f012ab6a:	e8 f2 ce fd ff       	call   f0107a61 <kmalloc>
f012ab6f:	83 c4 10             	add    $0x10,%esp
f012ab72:	89 85 8c fd ff ff    	mov    %eax,-0x274(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012ab78:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012ab7e:	89 c1                	mov    %eax,%ecx
f012ab80:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f012ab87:	10 00 00 
f012ab8a:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012ab90:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ab95:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f012ab9b:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012aba1:	ba 00 00 00 00       	mov    $0x0,%edx
f012aba6:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f012abac:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012abb2:	29 d0                	sub    %edx,%eax
f012abb4:	89 c3                	mov    %eax,%ebx
f012abb6:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f012abbd:	10 00 00 
f012abc0:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012abc5:	0f b6 d0             	movzbl %al,%edx
f012abc8:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012abce:	01 d0                	add    %edx,%eax
f012abd0:	48                   	dec    %eax
f012abd1:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f012abd7:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012abdd:	ba 00 00 00 00       	mov    $0x0,%edx
f012abe2:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f012abe8:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012abee:	29 d0                	sub    %edx,%eax
f012abf0:	01 c3                	add    %eax,%ebx
f012abf2:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f012abf9:	10 00 00 
f012abfc:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012ac01:	0f b6 c0             	movzbl %al,%eax
f012ac04:	c1 e0 04             	shl    $0x4,%eax
f012ac07:	89 c2                	mov    %eax,%edx
f012ac09:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012ac0f:	01 d0                	add    %edx,%eax
f012ac11:	48                   	dec    %eax
f012ac12:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f012ac18:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012ac1e:	ba 00 00 00 00       	mov    $0x0,%edx
f012ac23:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f012ac29:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012ac2f:	29 d0                	sub    %edx,%eax
f012ac31:	01 d8                	add    %ebx,%eax
f012ac33:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012ac38:	39 c1                	cmp    %eax,%ecx
f012ac3a:	74 17                	je     f012ac53 <test_kfreelast+0xfbd>
f012ac3c:	83 ec 04             	sub    $0x4,%esp
f012ac3f:	68 60 b2 13 f0       	push   $0xf013b260
f012ac44:	68 71 0d 00 00       	push   $0xd71
f012ac49:	68 7a b1 13 f0       	push   $0xf013b17a
f012ac4e:	e8 b2 55 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012ac53:	e8 4e 91 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012ac58:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ac5b:	74 17                	je     f012ac74 <test_kfreelast+0xfde>
f012ac5d:	83 ec 04             	sub    $0x4,%esp
f012ac60:	68 94 b1 13 f0       	push   $0xf013b194
f012ac65:	68 72 0d 00 00       	push   $0xd72
f012ac6a:	68 7a b1 13 f0       	push   $0xf013b17a
f012ac6f:	e8 91 55 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f012ac74:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012ac77:	e8 67 21 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012ac7c:	29 c3                	sub    %eax,%ebx
f012ac7e:	89 d8                	mov    %ebx,%eax
f012ac80:	83 f8 05             	cmp    $0x5,%eax
f012ac83:	74 17                	je     f012ac9c <test_kfreelast+0x1006>
f012ac85:	83 ec 04             	sub    $0x4,%esp
f012ac88:	68 fc b1 13 f0       	push   $0xf013b1fc
f012ac8d:	68 73 0d 00 00       	push   $0xd73
f012ac92:	68 7a b1 13 f0       	push   $0xf013b17a
f012ac97:	e8 69 55 fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f012ac9c:	c7 85 2c fe ff ff ff 	movl   $0x4fff,-0x1d4(%ebp)
f012aca3:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f012aca6:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012acac:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f012acaf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012acb6:	eb 0e                	jmp    f012acc6 <test_kfreelast+0x1030>
		{
			ptr[i] = 8 ;
f012acb8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012acbb:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012acbe:	01 d0                	add    %edx,%eax
f012acc0:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f012acc3:	ff 45 f4             	incl   -0xc(%ebp)
f012acc6:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012accc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012accf:	7f e7                	jg     f012acb8 <test_kfreelast+0x1022>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012acd1:	e8 0d 21 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012acd6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012acd9:	e8 c8 90 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012acde:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f012ace1:	83 ec 0c             	sub    $0xc,%esp
f012ace4:	68 00 00 10 00       	push   $0x100000
f012ace9:	e8 73 cd fd ff       	call   f0107a61 <kmalloc>
f012acee:	83 c4 10             	add    $0x10,%esp
f012acf1:	89 85 90 fd ff ff    	mov    %eax,-0x270(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012acf7:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012acfd:	89 c1                	mov    %eax,%ecx
f012acff:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f012ad06:	10 00 00 
f012ad09:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ad0f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ad14:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f012ad1a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ad20:	ba 00 00 00 00       	mov    $0x0,%edx
f012ad25:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f012ad2b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ad31:	29 d0                	sub    %edx,%eax
f012ad33:	89 c3                	mov    %eax,%ebx
f012ad35:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f012ad3c:	10 00 00 
f012ad3f:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012ad44:	0f b6 d0             	movzbl %al,%edx
f012ad47:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ad4d:	01 d0                	add    %edx,%eax
f012ad4f:	48                   	dec    %eax
f012ad50:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f012ad56:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012ad5c:	ba 00 00 00 00       	mov    $0x0,%edx
f012ad61:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f012ad67:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012ad6d:	29 d0                	sub    %edx,%eax
f012ad6f:	01 c3                	add    %eax,%ebx
f012ad71:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f012ad78:	10 00 00 
f012ad7b:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012ad80:	0f b6 c0             	movzbl %al,%eax
f012ad83:	c1 e0 04             	shl    $0x4,%eax
f012ad86:	89 c2                	mov    %eax,%edx
f012ad88:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012ad8e:	01 d0                	add    %edx,%eax
f012ad90:	48                   	dec    %eax
f012ad91:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f012ad97:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012ad9d:	ba 00 00 00 00       	mov    $0x0,%edx
f012ada2:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f012ada8:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012adae:	29 d0                	sub    %edx,%eax
f012adb0:	01 d8                	add    %ebx,%eax
f012adb2:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012adb7:	39 c1                	cmp    %eax,%ecx
f012adb9:	74 17                	je     f012add2 <test_kfreelast+0x113c>
f012adbb:	83 ec 04             	sub    $0x4,%esp
f012adbe:	68 60 b2 13 f0       	push   $0xf013b260
f012adc3:	68 7f 0d 00 00       	push   $0xd7f
f012adc8:	68 7a b1 13 f0       	push   $0xf013b17a
f012adcd:	e8 33 54 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012add2:	e8 cf 8f fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012add7:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012adda:	74 17                	je     f012adf3 <test_kfreelast+0x115d>
f012addc:	83 ec 04             	sub    $0x4,%esp
f012addf:	68 94 b1 13 f0       	push   $0xf013b194
f012ade4:	68 80 0d 00 00       	push   $0xd80
f012ade9:	68 7a b1 13 f0       	push   $0xf013b17a
f012adee:	e8 12 54 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012adf3:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012adf6:	e8 e8 1f fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012adfb:	29 c3                	sub    %eax,%ebx
f012adfd:	89 d8                	mov    %ebx,%eax
f012adff:	3d 00 01 00 00       	cmp    $0x100,%eax
f012ae04:	74 17                	je     f012ae1d <test_kfreelast+0x1187>
f012ae06:	83 ec 04             	sub    $0x4,%esp
f012ae09:	68 fc b1 13 f0       	push   $0xf013b1fc
f012ae0e:	68 81 0d 00 00       	push   $0xd81
f012ae13:	68 7a b1 13 f0       	push   $0xf013b17a
f012ae18:	e8 e8 53 fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f012ae1d:	c7 85 30 fe ff ff ff 	movl   $0xfffff,-0x1d0(%ebp)
f012ae24:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f012ae27:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012ae2d:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f012ae30:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ae37:	eb 0e                	jmp    f012ae47 <test_kfreelast+0x11b1>
		{
			ptr[i] = 9 ;
f012ae39:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ae3c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ae3f:	01 d0                	add    %edx,%eax
f012ae41:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f012ae44:	ff 45 f4             	incl   -0xc(%ebp)
f012ae47:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012ae4d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ae50:	7f e7                	jg     f012ae39 <test_kfreelast+0x11a3>
		{
			ptr[i] = 9 ;
		}
	}

	ce = 0;
f012ae52:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kfree last allocated space
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012ae59:	e8 85 1f fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012ae5e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ae61:	e8 40 8f fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012ae66:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012ae69:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012ae6f:	83 ec 0c             	sub    $0xc,%esp
f012ae72:	50                   	push   %eax
f012ae73:	e8 ff cc fd ff       	call   f0107b77 <kfree>
f012ae78:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012ae7b:	e8 26 8f fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012ae80:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ae83:	74 17                	je     f012ae9c <test_kfreelast+0x1206>
f012ae85:	83 ec 04             	sub    $0x4,%esp
f012ae88:	68 94 b1 13 f0       	push   $0xf013b194
f012ae8d:	68 91 0d 00 00       	push   $0xd91
f012ae92:	68 7a b1 13 f0       	push   $0xf013b17a
f012ae97:	e8 69 53 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f012ae9c:	e8 42 1f fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012aea1:	89 c2                	mov    %eax,%edx
f012aea3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012aea6:	29 c2                	sub    %eax,%edx
f012aea8:	89 d0                	mov    %edx,%eax
f012aeaa:	3d 00 01 00 00       	cmp    $0x100,%eax
f012aeaf:	74 17                	je     f012aec8 <test_kfreelast+0x1232>
f012aeb1:	83 ec 04             	sub    $0x4,%esp
f012aeb4:	68 04 b9 13 f0       	push   $0xf013b904
f012aeb9:	68 92 0d 00 00       	push   $0xd92
f012aebe:	68 7a b1 13 f0       	push   $0xf013b17a
f012aec3:	e8 3d 53 fd ff       	call   f0100205 <_panic>
	}

	//Allocate after kfree last [25%]
	{
		//30 KB
		freeFrames = sys_calculate_free_frames() ;
f012aec8:	e8 16 1f fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012aecd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012aed0:	e8 d1 8e fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012aed5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[10] = kmalloc(30*kilo);
f012aed8:	83 ec 0c             	sub    $0xc,%esp
f012aedb:	68 00 78 00 00       	push   $0x7800
f012aee0:	e8 7c cb fd ff       	call   f0107a61 <kmalloc>
f012aee5:	83 c4 10             	add    $0x10,%esp
f012aee8:	89 85 94 fd ff ff    	mov    %eax,-0x26c(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012aeee:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012aef4:	89 c1                	mov    %eax,%ecx
f012aef6:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f012aefd:	10 00 00 
f012af00:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012af06:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012af0b:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f012af11:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012af17:	ba 00 00 00 00       	mov    $0x0,%edx
f012af1c:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f012af22:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012af28:	29 d0                	sub    %edx,%eax
f012af2a:	89 c3                	mov    %eax,%ebx
f012af2c:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f012af33:	10 00 00 
f012af36:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012af3b:	0f b6 d0             	movzbl %al,%edx
f012af3e:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012af44:	01 d0                	add    %edx,%eax
f012af46:	48                   	dec    %eax
f012af47:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f012af4d:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012af53:	ba 00 00 00 00       	mov    $0x0,%edx
f012af58:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f012af5e:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012af64:	29 d0                	sub    %edx,%eax
f012af66:	01 c3                	add    %eax,%ebx
f012af68:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f012af6f:	10 00 00 
f012af72:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012af77:	0f b6 c0             	movzbl %al,%eax
f012af7a:	c1 e0 04             	shl    $0x4,%eax
f012af7d:	89 c2                	mov    %eax,%edx
f012af7f:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012af85:	01 d0                	add    %edx,%eax
f012af87:	48                   	dec    %eax
f012af88:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f012af8e:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012af94:	ba 00 00 00 00       	mov    $0x0,%edx
f012af99:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f012af9f:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012afa5:	29 d0                	sub    %edx,%eax
f012afa7:	01 d8                	add    %ebx,%eax
f012afa9:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012afae:	39 c1                	cmp    %eax,%ecx
f012afb0:	74 17                	je     f012afc9 <test_kfreelast+0x1333>
f012afb2:	83 ec 04             	sub    $0x4,%esp
f012afb5:	68 60 b2 13 f0       	push   $0xf013b260
f012afba:	68 9b 0d 00 00       	push   $0xd9b
f012afbf:	68 7a b1 13 f0       	push   $0xf013b17a
f012afc4:	e8 3c 52 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012afc9:	e8 d8 8d fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012afce:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012afd1:	74 17                	je     f012afea <test_kfreelast+0x1354>
f012afd3:	83 ec 04             	sub    $0x4,%esp
f012afd6:	68 94 b1 13 f0       	push   $0xf013b194
f012afdb:	68 9c 0d 00 00       	push   $0xd9c
f012afe0:	68 7a b1 13 f0       	push   $0xf013b17a
f012afe5:	e8 1b 52 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
f012afea:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012afed:	e8 f1 1d fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012aff2:	29 c3                	sub    %eax,%ebx
f012aff4:	89 d8                	mov    %ebx,%eax
f012aff6:	83 f8 08             	cmp    $0x8,%eax
f012aff9:	74 17                	je     f012b012 <test_kfreelast+0x137c>
f012affb:	83 ec 04             	sub    $0x4,%esp
f012affe:	68 fc b1 13 f0       	push   $0xf013b1fc
f012b003:	68 9d 0d 00 00       	push   $0xd9d
f012b008:	68 7a b1 13 f0       	push   $0xf013b17a
f012b00d:	e8 f3 51 fd ff       	call   f0100205 <_panic>
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
f012b012:	c7 85 34 fe ff ff ff 	movl   $0x77ff,-0x1cc(%ebp)
f012b019:	77 00 00 
		ptr = (char*)ptr_allocations[10];
f012b01c:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012b022:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f012b025:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b02c:	eb 0e                	jmp    f012b03c <test_kfreelast+0x13a6>
		{
			ptr[i] = 10 ;
f012b02e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b031:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b034:	01 d0                	add    %edx,%eax
f012b036:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f012b039:	ff 45 f4             	incl   -0xc(%ebp)
f012b03c:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f012b042:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b045:	7f e7                	jg     f012b02e <test_kfreelast+0x1398>
		{
			ptr[i] = 10 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012b047:	e8 97 1d fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012b04c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b04f:	e8 52 8d fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012b054:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[11] = kmalloc(1*Mega);
f012b057:	83 ec 0c             	sub    $0xc,%esp
f012b05a:	68 00 00 10 00       	push   $0x100000
f012b05f:	e8 fd c9 fd ff       	call   f0107a61 <kmalloc>
f012b064:	83 c4 10             	add    $0x10,%esp
f012b067:	89 85 98 fd ff ff    	mov    %eax,-0x268(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012b06d:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012b073:	89 c1                	mov    %eax,%ecx
f012b075:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f012b07c:	10 00 00 
f012b07f:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b085:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b08a:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f012b090:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012b096:	ba 00 00 00 00       	mov    $0x0,%edx
f012b09b:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f012b0a1:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012b0a7:	29 d0                	sub    %edx,%eax
f012b0a9:	89 c3                	mov    %eax,%ebx
f012b0ab:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f012b0b2:	10 00 00 
f012b0b5:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012b0ba:	0f b6 d0             	movzbl %al,%edx
f012b0bd:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012b0c3:	01 d0                	add    %edx,%eax
f012b0c5:	48                   	dec    %eax
f012b0c6:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f012b0cc:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b0d2:	ba 00 00 00 00       	mov    $0x0,%edx
f012b0d7:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f012b0dd:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b0e3:	29 d0                	sub    %edx,%eax
f012b0e5:	01 c3                	add    %eax,%ebx
f012b0e7:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f012b0ee:	10 00 00 
f012b0f1:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012b0f6:	0f b6 c0             	movzbl %al,%eax
f012b0f9:	c1 e0 04             	shl    $0x4,%eax
f012b0fc:	89 c2                	mov    %eax,%edx
f012b0fe:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012b104:	01 d0                	add    %edx,%eax
f012b106:	48                   	dec    %eax
f012b107:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f012b10d:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012b113:	ba 00 00 00 00       	mov    $0x0,%edx
f012b118:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f012b11e:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012b124:	29 d0                	sub    %edx,%eax
f012b126:	01 d8                	add    %ebx,%eax
f012b128:	2d 00 70 2e 09       	sub    $0x92e7000,%eax
f012b12d:	39 c1                	cmp    %eax,%ecx
f012b12f:	74 17                	je     f012b148 <test_kfreelast+0x14b2>
f012b131:	83 ec 04             	sub    $0x4,%esp
f012b134:	68 60 b2 13 f0       	push   $0xf013b260
f012b139:	68 a9 0d 00 00       	push   $0xda9
f012b13e:	68 7a b1 13 f0       	push   $0xf013b17a
f012b143:	e8 bd 50 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012b148:	e8 59 8c fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012b14d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b150:	74 17                	je     f012b169 <test_kfreelast+0x14d3>
f012b152:	83 ec 04             	sub    $0x4,%esp
f012b155:	68 94 b1 13 f0       	push   $0xf013b194
f012b15a:	68 aa 0d 00 00       	push   $0xdaa
f012b15f:	68 7a b1 13 f0       	push   $0xf013b17a
f012b164:	e8 9c 50 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012b169:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b16c:	e8 72 1c fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012b171:	29 c3                	sub    %eax,%ebx
f012b173:	89 d8                	mov    %ebx,%eax
f012b175:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b17a:	74 17                	je     f012b193 <test_kfreelast+0x14fd>
f012b17c:	83 ec 04             	sub    $0x4,%esp
f012b17f:	68 fc b1 13 f0       	push   $0xf013b1fc
f012b184:	68 ab 0d 00 00       	push   $0xdab
f012b189:	68 7a b1 13 f0       	push   $0xf013b17a
f012b18e:	e8 72 50 fd ff       	call   f0100205 <_panic>
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
f012b193:	c7 85 38 fe ff ff ff 	movl   $0xfffff,-0x1c8(%ebp)
f012b19a:	ff 0f 00 
		ptr = (char*)ptr_allocations[11];
f012b19d:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012b1a3:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f012b1a6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b1ad:	eb 0e                	jmp    f012b1bd <test_kfreelast+0x1527>
		{
			ptr[i] = 11 ;
f012b1af:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b1b2:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b1b5:	01 d0                	add    %edx,%eax
f012b1b7:	c6 00 0b             	movb   $0xb,(%eax)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f012b1ba:	ff 45 f4             	incl   -0xc(%ebp)
f012b1bd:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f012b1c3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b1c6:	7f e7                	jg     f012b1af <test_kfreelast+0x1519>
		{
			ptr[i] = 11 ;
		}
	}
	ce += 25;
f012b1c8:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
	cprintf("\nkfreelast: current evaluation = %d%\n", ce);
f012b1cc:	83 ec 08             	sub    $0x8,%esp
f012b1cf:	ff 75 f0             	pushl  -0x10(%ebp)
f012b1d2:	68 ac c1 13 f0       	push   $0xf013c1ac
f012b1d7:	e8 32 5b fd ff       	call   f0100d0e <cprintf>
f012b1dc:	83 c4 10             	add    $0x10,%esp

	int f = 0;
f012b1df:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	//kfree last allocated two spaces
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012b1e6:	e8 f8 1b fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012b1eb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b1ee:	e8 b3 8b fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012b1f3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[11]);
f012b1f6:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012b1fc:	83 ec 0c             	sub    $0xc,%esp
f012b1ff:	50                   	push   %eax
f012b200:	e8 72 c9 fd ff       	call   f0107b77 <kfree>
f012b205:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b208:	e8 99 8b fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012b20d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b210:	74 1d                	je     f012b22f <test_kfreelast+0x1599>
f012b212:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b216:	75 17                	jne    f012b22f <test_kfreelast+0x1599>
f012b218:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b21f:	83 ec 0c             	sub    $0xc,%esp
f012b222:	68 d4 c1 13 f0       	push   $0xf013c1d4
f012b227:	e8 e2 5a fd ff       	call   f0100d0e <cprintf>
f012b22c:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 256) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b22f:	e8 af 1b fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012b234:	89 c2                	mov    %eax,%edx
f012b236:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b239:	29 c2                	sub    %eax,%edx
f012b23b:	89 d0                	mov    %edx,%eax
f012b23d:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b242:	74 1d                	je     f012b261 <test_kfreelast+0x15cb>
f012b244:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b248:	75 17                	jne    f012b261 <test_kfreelast+0x15cb>
f012b24a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b251:	83 ec 0c             	sub    $0xc,%esp
f012b254:	68 40 c2 13 f0       	push   $0xf013c240
f012b259:	e8 b0 5a fd ff       	call   f0100d0e <cprintf>
f012b25e:	83 c4 10             	add    $0x10,%esp

		//kfree 30 KB
		freeFrames = sys_calculate_free_frames() ;
f012b261:	e8 7d 1b fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012b266:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b269:	e8 38 8b fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012b26e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[10]);
f012b271:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012b277:	83 ec 0c             	sub    $0xc,%esp
f012b27a:	50                   	push   %eax
f012b27b:	e8 f7 c8 fd ff       	call   f0107b77 <kfree>
f012b280:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b283:	e8 1e 8b fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012b288:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b28b:	74 1d                	je     f012b2aa <test_kfreelast+0x1614>
f012b28d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b291:	75 17                	jne    f012b2aa <test_kfreelast+0x1614>
f012b293:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b29a:	83 ec 0c             	sub    $0xc,%esp
f012b29d:	68 d4 c1 13 f0       	push   $0xf013c1d4
f012b2a2:	e8 67 5a fd ff       	call   f0100d0e <cprintf>
f012b2a7:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 8) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b2aa:	e8 34 1b fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012b2af:	89 c2                	mov    %eax,%edx
f012b2b1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b2b4:	29 c2                	sub    %eax,%edx
f012b2b6:	89 d0                	mov    %edx,%eax
f012b2b8:	83 f8 08             	cmp    $0x8,%eax
f012b2bb:	74 1d                	je     f012b2da <test_kfreelast+0x1644>
f012b2bd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b2c1:	75 17                	jne    f012b2da <test_kfreelast+0x1644>
f012b2c3:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b2ca:	83 ec 0c             	sub    $0xc,%esp
f012b2cd:	68 40 c2 13 f0       	push   $0xf013c240
f012b2d2:	e8 37 5a fd ff       	call   f0100d0e <cprintf>
f012b2d7:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfree last allocated two spaces (in order) [10%]
	{
		//10 KB
		freeFrames = sys_calculate_free_frames() ;
f012b2da:	e8 04 1b fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012b2df:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b2e2:	e8 bf 8a fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012b2e7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[12] = kmalloc(10*kilo);
f012b2ea:	83 ec 0c             	sub    $0xc,%esp
f012b2ed:	68 00 28 00 00       	push   $0x2800
f012b2f2:	e8 6a c7 fd ff       	call   f0107a61 <kmalloc>
f012b2f7:	83 c4 10             	add    $0x10,%esp
f012b2fa:	89 85 9c fd ff ff    	mov    %eax,-0x264(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012b300:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b306:	89 c1                	mov    %eax,%ecx
f012b308:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f012b30f:	10 00 00 
f012b312:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012b318:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b31d:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f012b323:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012b329:	ba 00 00 00 00       	mov    $0x0,%edx
f012b32e:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f012b334:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012b33a:	29 d0                	sub    %edx,%eax
f012b33c:	89 c3                	mov    %eax,%ebx
f012b33e:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f012b345:	10 00 00 
f012b348:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012b34d:	0f b6 d0             	movzbl %al,%edx
f012b350:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012b356:	01 d0                	add    %edx,%eax
f012b358:	48                   	dec    %eax
f012b359:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f012b35f:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012b365:	ba 00 00 00 00       	mov    $0x0,%edx
f012b36a:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f012b370:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012b376:	29 d0                	sub    %edx,%eax
f012b378:	01 c3                	add    %eax,%ebx
f012b37a:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f012b381:	10 00 00 
f012b384:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012b389:	0f b6 c0             	movzbl %al,%eax
f012b38c:	c1 e0 04             	shl    $0x4,%eax
f012b38f:	89 c2                	mov    %eax,%edx
f012b391:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012b397:	01 d0                	add    %edx,%eax
f012b399:	48                   	dec    %eax
f012b39a:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f012b3a0:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012b3a6:	ba 00 00 00 00       	mov    $0x0,%edx
f012b3ab:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f012b3b1:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012b3b7:	29 d0                	sub    %edx,%eax
f012b3b9:	01 d8                	add    %ebx,%eax
f012b3bb:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012b3c0:	39 c1                	cmp    %eax,%ecx
f012b3c2:	74 1d                	je     f012b3e1 <test_kfreelast+0x174b>
f012b3c4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b3c8:	75 17                	jne    f012b3e1 <test_kfreelast+0x174b>
f012b3ca:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b3d1:	83 ec 0c             	sub    $0xc,%esp
f012b3d4:	68 78 c2 13 f0       	push   $0xf013c278
f012b3d9:	e8 30 59 fd ff       	call   f0100d0e <cprintf>
f012b3de:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b3e1:	e8 c0 89 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012b3e6:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b3e9:	74 1d                	je     f012b408 <test_kfreelast+0x1772>
f012b3eb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b3ef:	75 17                	jne    f012b408 <test_kfreelast+0x1772>
f012b3f1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b3f8:	83 ec 0c             	sub    $0xc,%esp
f012b3fb:	68 d4 c1 13 f0       	push   $0xf013c1d4
f012b400:	e8 09 59 fd ff       	call   f0100d0e <cprintf>
f012b405:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012b408:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b40b:	e8 d3 19 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012b410:	29 c3                	sub    %eax,%ebx
f012b412:	89 d8                	mov    %ebx,%eax
f012b414:	83 f8 03             	cmp    $0x3,%eax
f012b417:	74 1d                	je     f012b436 <test_kfreelast+0x17a0>
f012b419:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b41d:	75 17                	jne    f012b436 <test_kfreelast+0x17a0>
f012b41f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b426:	83 ec 0c             	sub    $0xc,%esp
f012b429:	68 e0 c2 13 f0       	push   $0xf013c2e0
f012b42e:	e8 db 58 fd ff       	call   f0100d0e <cprintf>
f012b433:	83 c4 10             	add    $0x10,%esp
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
f012b436:	c7 85 3c fe ff ff ff 	movl   $0x27ff,-0x1c4(%ebp)
f012b43d:	27 00 00 
		ptr = (char*)ptr_allocations[12];
f012b440:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b446:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012b449:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b450:	eb 0e                	jmp    f012b460 <test_kfreelast+0x17ca>
		{
			ptr[i] = 12 ;
f012b452:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b455:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b458:	01 d0                	add    %edx,%eax
f012b45a:	c6 00 0c             	movb   $0xc,(%eax)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012b45d:	ff 45 f4             	incl   -0xc(%ebp)
f012b460:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012b466:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b469:	7f e7                	jg     f012b452 <test_kfreelast+0x17bc>
		{
			ptr[i] = 12 ;
		}
	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b46b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b46f:	75 17                	jne    f012b488 <test_kfreelast+0x17f2>
f012b471:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012b475:	83 ec 08             	sub    $0x8,%esp
f012b478:	ff 75 f0             	pushl  -0x10(%ebp)
f012b47b:	68 ac c1 13 f0       	push   $0xf013c1ac
f012b480:	e8 89 58 fd ff       	call   f0100d0e <cprintf>
f012b485:	83 c4 10             	add    $0x10,%esp
f012b488:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
f012b48f:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b495:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012b498:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b49f:	eb 1e                	jmp    f012b4bf <test_kfreelast+0x1829>
		{
			sums[12] += ptr[i] ;
f012b4a1:	8b 95 ec fd ff ff    	mov    -0x214(%ebp),%edx
f012b4a7:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b4aa:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b4ad:	01 c8                	add    %ecx,%eax
f012b4af:	8a 00                	mov    (%eax),%al
f012b4b1:	0f be c0             	movsbl %al,%eax
f012b4b4:	01 d0                	add    %edx,%eax
f012b4b6:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012b4bc:	ff 45 f4             	incl   -0xc(%ebp)
f012b4bf:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012b4c5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b4c8:	7f d7                	jg     f012b4a1 <test_kfreelast+0x180b>
		{
			sums[12] += ptr[i] ;
		}
		if (sums[12] != 12*lastIndices[12])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012b4ca:	8b 8d ec fd ff ff    	mov    -0x214(%ebp),%ecx
f012b4d0:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f012b4d6:	89 d0                	mov    %edx,%eax
f012b4d8:	01 c0                	add    %eax,%eax
f012b4da:	01 d0                	add    %edx,%eax
f012b4dc:	c1 e0 02             	shl    $0x2,%eax
f012b4df:	39 c1                	cmp    %eax,%ecx
f012b4e1:	74 1d                	je     f012b500 <test_kfreelast+0x186a>
f012b4e3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b4e7:	75 17                	jne    f012b500 <test_kfreelast+0x186a>
f012b4e9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b4f0:	83 ec 0c             	sub    $0xc,%esp
f012b4f3:	68 24 c3 13 f0       	push   $0xf013c324
f012b4f8:	e8 11 58 fd ff       	call   f0100d0e <cprintf>
f012b4fd:	83 c4 10             	add    $0x10,%esp


		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012b500:	83 ec 0c             	sub    $0xc,%esp
f012b503:	6a 03                	push   $0x3
f012b505:	e8 79 1d fe ff       	call   f010d283 <sys_bypassPageFault>
f012b50a:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[12] + 12*kilo;
f012b50d:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b513:	05 00 30 00 00       	add    $0x3000,%eax
f012b518:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 30*kilo; ++i)
f012b51b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b522:	eb 3c                	jmp    f012b560 <test_kfreelast+0x18ca>
		{
			ptr[i] = 10;
f012b524:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b527:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b52a:	01 d0                	add    %edx,%eax
f012b52c:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012b52f:	e8 3d 1d fe ff       	call   f010d271 <sys_rcr2>
f012b534:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b537:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012b53a:	01 ca                	add    %ecx,%edx
f012b53c:	39 d0                	cmp    %edx,%eax
f012b53e:	74 1d                	je     f012b55d <test_kfreelast+0x18c7>
f012b540:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b544:	75 17                	jne    f012b55d <test_kfreelast+0x18c7>
f012b546:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b54d:	83 ec 0c             	sub    $0xc,%esp
f012b550:	68 58 c3 13 f0       	push   $0xf013c358
f012b555:	e8 b4 57 fd ff       	call   f0100d0e <cprintf>
f012b55a:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[12] + 12*kilo;

		for (i = 0; i < 30*kilo; ++i)
f012b55d:	ff 45 f4             	incl   -0xc(%ebp)
f012b560:	81 7d f4 ff 77 00 00 	cmpl   $0x77ff,-0xc(%ebp)
f012b567:	7e bb                	jle    f012b524 <test_kfreelast+0x188e>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012b569:	83 ec 0c             	sub    $0xc,%esp
f012b56c:	6a 00                	push   $0x0
f012b56e:	e8 10 1d fe ff       	call   f010d283 <sys_bypassPageFault>
f012b573:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b576:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b57a:	75 17                	jne    f012b593 <test_kfreelast+0x18fd>
f012b57c:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012b580:	83 ec 08             	sub    $0x8,%esp
f012b583:	ff 75 f0             	pushl  -0x10(%ebp)
f012b586:	68 ac c1 13 f0       	push   $0xf013c1ac
f012b58b:	e8 7e 57 fd ff       	call   f0100d0e <cprintf>
f012b590:	83 c4 10             	add    $0x10,%esp
f012b593:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree last allocated three spaces [but with different order]
	{
		//kfree 10 KB
		freeFrames = sys_calculate_free_frames() ;
f012b59a:	e8 44 18 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012b59f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b5a2:	e8 ff 87 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012b5a7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[12]);
f012b5aa:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b5b0:	83 ec 0c             	sub    $0xc,%esp
f012b5b3:	50                   	push   %eax
f012b5b4:	e8 be c5 fd ff       	call   f0107b77 <kfree>
f012b5b9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b5bc:	e8 e5 87 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012b5c1:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b5c4:	74 1d                	je     f012b5e3 <test_kfreelast+0x194d>
f012b5c6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b5ca:	75 17                	jne    f012b5e3 <test_kfreelast+0x194d>
f012b5cc:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b5d3:	83 ec 0c             	sub    $0xc,%esp
f012b5d6:	68 d4 c1 13 f0       	push   $0xf013c1d4
f012b5db:	e8 2e 57 fd ff       	call   f0100d0e <cprintf>
f012b5e0:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b5e3:	e8 fb 17 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012b5e8:	89 c2                	mov    %eax,%edx
f012b5ea:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b5ed:	29 c2                	sub    %eax,%edx
f012b5ef:	89 d0                	mov    %edx,%eax
f012b5f1:	83 f8 03             	cmp    $0x3,%eax
f012b5f4:	74 1d                	je     f012b613 <test_kfreelast+0x197d>
f012b5f6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b5fa:	75 17                	jne    f012b613 <test_kfreelast+0x197d>
f012b5fc:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b603:	83 ec 0c             	sub    $0xc,%esp
f012b606:	68 40 c2 13 f0       	push   $0xf013c240
f012b60b:	e8 fe 56 fd ff       	call   f0100d0e <cprintf>
f012b610:	83 c4 10             	add    $0x10,%esp

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f012b613:	e8 cb 17 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012b618:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b61b:	e8 86 87 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012b620:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[7]);
f012b623:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012b629:	83 ec 0c             	sub    $0xc,%esp
f012b62c:	50                   	push   %eax
f012b62d:	e8 45 c5 fd ff       	call   f0107b77 <kfree>
f012b632:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b635:	e8 6c 87 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012b63a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b63d:	74 1d                	je     f012b65c <test_kfreelast+0x19c6>
f012b63f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b643:	75 17                	jne    f012b65c <test_kfreelast+0x19c6>
f012b645:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b64c:	83 ec 0c             	sub    $0xc,%esp
f012b64f:	68 d4 c1 13 f0       	push   $0xf013c1d4
f012b654:	e8 b5 56 fd ff       	call   f0100d0e <cprintf>
f012b659:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 4) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b65c:	e8 82 17 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012b661:	89 c2                	mov    %eax,%edx
f012b663:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b666:	29 c2                	sub    %eax,%edx
f012b668:	89 d0                	mov    %edx,%eax
f012b66a:	83 f8 04             	cmp    $0x4,%eax
f012b66d:	74 1d                	je     f012b68c <test_kfreelast+0x19f6>
f012b66f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b673:	75 17                	jne    f012b68c <test_kfreelast+0x19f6>
f012b675:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b67c:	83 ec 0c             	sub    $0xc,%esp
f012b67f:	68 40 c2 13 f0       	push   $0xf013c240
f012b684:	e8 85 56 fd ff       	call   f0100d0e <cprintf>
f012b689:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012b68c:	e8 52 17 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012b691:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b694:	e8 0d 87 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012b699:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012b69c:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012b6a2:	83 ec 0c             	sub    $0xc,%esp
f012b6a5:	50                   	push   %eax
f012b6a6:	e8 cc c4 fd ff       	call   f0107b77 <kfree>
f012b6ab:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b6ae:	e8 f3 86 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012b6b3:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b6b6:	74 1d                	je     f012b6d5 <test_kfreelast+0x1a3f>
f012b6b8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b6bc:	75 17                	jne    f012b6d5 <test_kfreelast+0x1a3f>
f012b6be:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b6c5:	83 ec 0c             	sub    $0xc,%esp
f012b6c8:	68 d4 c1 13 f0       	push   $0xf013c1d4
f012b6cd:	e8 3c 56 fd ff       	call   f0100d0e <cprintf>
f012b6d2:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 5) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b6d5:	e8 09 17 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012b6da:	89 c2                	mov    %eax,%edx
f012b6dc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b6df:	29 c2                	sub    %eax,%edx
f012b6e1:	89 d0                	mov    %edx,%eax
f012b6e3:	83 f8 05             	cmp    $0x5,%eax
f012b6e6:	74 1d                	je     f012b705 <test_kfreelast+0x1a6f>
f012b6e8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b6ec:	75 17                	jne    f012b705 <test_kfreelast+0x1a6f>
f012b6ee:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b6f5:	83 ec 0c             	sub    $0xc,%esp
f012b6f8:	68 40 c2 13 f0       	push   $0xf013c240
f012b6fd:	e8 0c 56 fd ff       	call   f0100d0e <cprintf>
f012b702:	83 c4 10             	add    $0x10,%esp


	//Allocate after kfree last allocated 3 spaces with different order [25%]
	{
		//50 KB
		freeFrames = sys_calculate_free_frames() ;
f012b705:	e8 d9 16 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012b70a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b70d:	e8 94 86 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012b712:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[13] = kmalloc(50*kilo);
f012b715:	83 ec 0c             	sub    $0xc,%esp
f012b718:	68 00 c8 00 00       	push   $0xc800
f012b71d:	e8 3f c3 fd ff       	call   f0107a61 <kmalloc>
f012b722:	83 c4 10             	add    $0x10,%esp
f012b725:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012b72b:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012b731:	89 c1                	mov    %eax,%ecx
f012b733:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f012b73a:	10 00 00 
f012b73d:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012b743:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b748:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f012b74e:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012b754:	ba 00 00 00 00       	mov    $0x0,%edx
f012b759:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f012b75f:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012b765:	29 d0                	sub    %edx,%eax
f012b767:	89 c3                	mov    %eax,%ebx
f012b769:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f012b770:	10 00 00 
f012b773:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012b778:	0f b6 d0             	movzbl %al,%edx
f012b77b:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012b781:	01 d0                	add    %edx,%eax
f012b783:	48                   	dec    %eax
f012b784:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f012b78a:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012b790:	ba 00 00 00 00       	mov    $0x0,%edx
f012b795:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f012b79b:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012b7a1:	29 d0                	sub    %edx,%eax
f012b7a3:	01 c3                	add    %eax,%ebx
f012b7a5:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f012b7ac:	10 00 00 
f012b7af:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012b7b4:	0f b6 c0             	movzbl %al,%eax
f012b7b7:	c1 e0 04             	shl    $0x4,%eax
f012b7ba:	89 c2                	mov    %eax,%edx
f012b7bc:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012b7c2:	01 d0                	add    %edx,%eax
f012b7c4:	48                   	dec    %eax
f012b7c5:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f012b7cb:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012b7d1:	ba 00 00 00 00       	mov    $0x0,%edx
f012b7d6:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f012b7dc:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012b7e2:	29 d0                	sub    %edx,%eax
f012b7e4:	01 d8                	add    %ebx,%eax
f012b7e6:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012b7eb:	39 c1                	cmp    %eax,%ecx
f012b7ed:	74 1d                	je     f012b80c <test_kfreelast+0x1b76>
f012b7ef:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b7f3:	75 17                	jne    f012b80c <test_kfreelast+0x1b76>
f012b7f5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b7fc:	83 ec 0c             	sub    $0xc,%esp
f012b7ff:	68 78 c2 13 f0       	push   $0xf013c278
f012b804:	e8 05 55 fd ff       	call   f0100d0e <cprintf>
f012b809:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b80c:	e8 95 85 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012b811:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b814:	74 1d                	je     f012b833 <test_kfreelast+0x1b9d>
f012b816:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b81a:	75 17                	jne    f012b833 <test_kfreelast+0x1b9d>
f012b81c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b823:	83 ec 0c             	sub    $0xc,%esp
f012b826:	68 d4 c1 13 f0       	push   $0xf013c1d4
f012b82b:	e8 de 54 fd ff       	call   f0100d0e <cprintf>
f012b830:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012b833:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b836:	e8 a8 15 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012b83b:	29 c3                	sub    %eax,%ebx
f012b83d:	89 d8                	mov    %ebx,%eax
f012b83f:	83 f8 0d             	cmp    $0xd,%eax
f012b842:	74 1d                	je     f012b861 <test_kfreelast+0x1bcb>
f012b844:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b848:	75 17                	jne    f012b861 <test_kfreelast+0x1bcb>
f012b84a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b851:	83 ec 0c             	sub    $0xc,%esp
f012b854:	68 e0 c2 13 f0       	push   $0xf013c2e0
f012b859:	e8 b0 54 fd ff       	call   f0100d0e <cprintf>
f012b85e:	83 c4 10             	add    $0x10,%esp
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
f012b861:	c7 85 40 fe ff ff ff 	movl   $0xc7ff,-0x1c0(%ebp)
f012b868:	c7 00 00 
		ptr = (char*)ptr_allocations[13];
f012b86b:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012b871:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f012b874:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b87b:	eb 0e                	jmp    f012b88b <test_kfreelast+0x1bf5>
		{
			ptr[i] = 13 ;
f012b87d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b880:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b883:	01 d0                	add    %edx,%eax
f012b885:	c6 00 0d             	movb   $0xd,(%eax)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f012b888:	ff 45 f4             	incl   -0xc(%ebp)
f012b88b:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012b891:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b894:	7f e7                	jg     f012b87d <test_kfreelast+0x1be7>
		{
			ptr[i] = 13 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012b896:	e8 48 15 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012b89b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b89e:	e8 03 85 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012b8a3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[14] = kmalloc(3*Mega-kilo);
f012b8a6:	83 ec 0c             	sub    $0xc,%esp
f012b8a9:	68 00 fc 2f 00       	push   $0x2ffc00
f012b8ae:	e8 ae c1 fd ff       	call   f0107a61 <kmalloc>
f012b8b3:	83 c4 10             	add    $0x10,%esp
f012b8b6:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012b8bc:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012b8c2:	89 c1                	mov    %eax,%ecx
f012b8c4:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f012b8cb:	10 00 00 
f012b8ce:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b8d4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b8d9:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f012b8df:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012b8e5:	ba 00 00 00 00       	mov    $0x0,%edx
f012b8ea:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f012b8f0:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012b8f6:	29 d0                	sub    %edx,%eax
f012b8f8:	89 c3                	mov    %eax,%ebx
f012b8fa:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f012b901:	10 00 00 
f012b904:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012b909:	0f b6 d0             	movzbl %al,%edx
f012b90c:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012b912:	01 d0                	add    %edx,%eax
f012b914:	48                   	dec    %eax
f012b915:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f012b91b:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012b921:	ba 00 00 00 00       	mov    $0x0,%edx
f012b926:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f012b92c:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012b932:	29 d0                	sub    %edx,%eax
f012b934:	01 c3                	add    %eax,%ebx
f012b936:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f012b93d:	10 00 00 
f012b940:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012b945:	0f b6 c0             	movzbl %al,%eax
f012b948:	c1 e0 04             	shl    $0x4,%eax
f012b94b:	89 c2                	mov    %eax,%edx
f012b94d:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012b953:	01 d0                	add    %edx,%eax
f012b955:	48                   	dec    %eax
f012b956:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f012b95c:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b962:	ba 00 00 00 00       	mov    $0x0,%edx
f012b967:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f012b96d:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b973:	29 d0                	sub    %edx,%eax
f012b975:	01 d8                	add    %ebx,%eax
f012b977:	2d 00 b0 8e 09       	sub    $0x98eb000,%eax
f012b97c:	39 c1                	cmp    %eax,%ecx
f012b97e:	74 1d                	je     f012b99d <test_kfreelast+0x1d07>
f012b980:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b984:	75 17                	jne    f012b99d <test_kfreelast+0x1d07>
f012b986:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b98d:	83 ec 0c             	sub    $0xc,%esp
f012b990:	68 78 c2 13 f0       	push   $0xf013c278
f012b995:	e8 74 53 fd ff       	call   f0100d0e <cprintf>
f012b99a:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b99d:	e8 04 84 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012b9a2:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b9a5:	74 1d                	je     f012b9c4 <test_kfreelast+0x1d2e>
f012b9a7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b9ab:	75 17                	jne    f012b9c4 <test_kfreelast+0x1d2e>
f012b9ad:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b9b4:	83 ec 0c             	sub    $0xc,%esp
f012b9b7:	68 d4 c1 13 f0       	push   $0xf013c1d4
f012b9bc:	e8 4d 53 fd ff       	call   f0100d0e <cprintf>
f012b9c1:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012b9c4:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b9c7:	e8 17 14 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012b9cc:	29 c3                	sub    %eax,%ebx
f012b9ce:	89 d8                	mov    %ebx,%eax
f012b9d0:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b9d5:	74 1d                	je     f012b9f4 <test_kfreelast+0x1d5e>
f012b9d7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b9db:	75 17                	jne    f012b9f4 <test_kfreelast+0x1d5e>
f012b9dd:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b9e4:	83 ec 0c             	sub    $0xc,%esp
f012b9e7:	68 e0 c2 13 f0       	push   $0xf013c2e0
f012b9ec:	e8 1d 53 fd ff       	call   f0100d0e <cprintf>
f012b9f1:	83 c4 10             	add    $0x10,%esp
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
f012b9f4:	c7 85 44 fe ff ff ff 	movl   $0x2ffbff,-0x1bc(%ebp)
f012b9fb:	fb 2f 00 
		ptr = (char*)ptr_allocations[14];
f012b9fe:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012ba04:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012ba07:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ba0e:	eb 0e                	jmp    f012ba1e <test_kfreelast+0x1d88>
		{
			ptr[i] = 14 ;
f012ba10:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ba13:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ba16:	01 d0                	add    %edx,%eax
f012ba18:	c6 00 0e             	movb   $0xe,(%eax)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012ba1b:	ff 45 f4             	incl   -0xc(%ebp)
f012ba1e:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ba24:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ba27:	7f e7                	jg     f012ba10 <test_kfreelast+0x1d7a>
		{
			ptr[i] = 14 ;
		}
	}

	if (!f) {ce += 25;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012ba29:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ba2d:	75 17                	jne    f012ba46 <test_kfreelast+0x1db0>
f012ba2f:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
f012ba33:	83 ec 08             	sub    $0x8,%esp
f012ba36:	ff 75 f0             	pushl  -0x10(%ebp)
f012ba39:	68 ac c1 13 f0       	push   $0xf013c1ac
f012ba3e:	e8 cb 52 fd ff       	call   f0100d0e <cprintf>
f012ba43:	83 c4 10             	add    $0x10,%esp
f012ba46:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree one of the newly allocated space that override a previously allocated one
	{
		//kfree 50 KB
		freeFrames = sys_calculate_free_frames() ;
f012ba4d:	e8 91 13 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012ba52:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ba55:	e8 4c 83 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012ba5a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[13]);
f012ba5d:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012ba63:	83 ec 0c             	sub    $0xc,%esp
f012ba66:	50                   	push   %eax
f012ba67:	e8 0b c1 fd ff       	call   f0107b77 <kfree>
f012ba6c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ba6f:	e8 32 83 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012ba74:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ba77:	74 1d                	je     f012ba96 <test_kfreelast+0x1e00>
f012ba79:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ba7d:	75 17                	jne    f012ba96 <test_kfreelast+0x1e00>
f012ba7f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ba86:	83 ec 0c             	sub    $0xc,%esp
f012ba89:	68 d4 c1 13 f0       	push   $0xf013c1d4
f012ba8e:	e8 7b 52 fd ff       	call   f0100d0e <cprintf>
f012ba93:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 13) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012ba96:	e8 48 13 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012ba9b:	89 c2                	mov    %eax,%edx
f012ba9d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012baa0:	29 c2                	sub    %eax,%edx
f012baa2:	89 d0                	mov    %edx,%eax
f012baa4:	83 f8 0d             	cmp    $0xd,%eax
f012baa7:	74 1d                	je     f012bac6 <test_kfreelast+0x1e30>
f012baa9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012baad:	75 17                	jne    f012bac6 <test_kfreelast+0x1e30>
f012baaf:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bab6:	83 ec 0c             	sub    $0xc,%esp
f012bab9:	68 40 c2 13 f0       	push   $0xf013c240
f012babe:	e8 4b 52 fd ff       	call   f0100d0e <cprintf>
f012bac3:	83 c4 10             	add    $0x10,%esp
	{
		//50 KB

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012bac6:	83 ec 0c             	sub    $0xc,%esp
f012bac9:	6a 03                	push   $0x3
f012bacb:	e8 b3 17 fe ff       	call   f010d283 <sys_bypassPageFault>
f012bad0:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[13];
f012bad3:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012bad9:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 50*kilo; ++i)
f012badc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012bae3:	eb 3c                	jmp    f012bb21 <test_kfreelast+0x1e8b>
		{
			ptr[i] = 10;
f012bae5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012bae8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012baeb:	01 d0                	add    %edx,%eax
f012baed:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012baf0:	e8 7c 17 fe ff       	call   f010d271 <sys_rcr2>
f012baf5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012baf8:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012bafb:	01 ca                	add    %ecx,%edx
f012bafd:	39 d0                	cmp    %edx,%eax
f012baff:	74 1d                	je     f012bb1e <test_kfreelast+0x1e88>
f012bb01:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bb05:	75 17                	jne    f012bb1e <test_kfreelast+0x1e88>
f012bb07:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bb0e:	83 ec 0c             	sub    $0xc,%esp
f012bb11:	68 58 c3 13 f0       	push   $0xf013c358
f012bb16:	e8 f3 51 fd ff       	call   f0100d0e <cprintf>
f012bb1b:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[13];

		for (i = 0; i < 50*kilo; ++i)
f012bb1e:	ff 45 f4             	incl   -0xc(%ebp)
f012bb21:	81 7d f4 ff c7 00 00 	cmpl   $0xc7ff,-0xc(%ebp)
f012bb28:	7e bb                	jle    f012bae5 <test_kfreelast+0x1e4f>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012bb2a:	83 ec 0c             	sub    $0xc,%esp
f012bb2d:	6a 00                	push   $0x0
f012bb2f:	e8 4f 17 fe ff       	call   f010d283 <sys_bypassPageFault>
f012bb34:	83 c4 10             	add    $0x10,%esp


		//3 MB
		ptr = (char*)ptr_allocations[14];
f012bb37:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012bb3d:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012bb40:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012bb47:	eb 1e                	jmp    f012bb67 <test_kfreelast+0x1ed1>
		{
			sums[14] += ptr[i] ;
f012bb49:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012bb4f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012bb52:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bb55:	01 c8                	add    %ecx,%eax
f012bb57:	8a 00                	mov    (%eax),%al
f012bb59:	0f be c0             	movsbl %al,%eax
f012bb5c:	01 d0                	add    %edx,%eax
f012bb5e:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		sys_bypassPageFault(0);


		//3 MB
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012bb64:	ff 45 f4             	incl   -0xc(%ebp)
f012bb67:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012bb6d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012bb70:	7f d7                	jg     f012bb49 <test_kfreelast+0x1eb3>
		{
			sums[14] += ptr[i] ;
		}
		if (sums[14] != 14*lastIndices[14])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012bb72:	8b 8d f4 fd ff ff    	mov    -0x20c(%ebp),%ecx
f012bb78:	8b 95 44 fe ff ff    	mov    -0x1bc(%ebp),%edx
f012bb7e:	89 d0                	mov    %edx,%eax
f012bb80:	01 c0                	add    %eax,%eax
f012bb82:	01 d0                	add    %edx,%eax
f012bb84:	01 c0                	add    %eax,%eax
f012bb86:	01 d0                	add    %edx,%eax
f012bb88:	01 c0                	add    %eax,%eax
f012bb8a:	39 c1                	cmp    %eax,%ecx
f012bb8c:	74 1d                	je     f012bbab <test_kfreelast+0x1f15>
f012bb8e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bb92:	75 17                	jne    f012bbab <test_kfreelast+0x1f15>
f012bb94:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bb9b:	83 ec 0c             	sub    $0xc,%esp
f012bb9e:	68 24 c3 13 f0       	push   $0xf013c324
f012bba3:	e8 66 51 fd ff       	call   f0100d0e <cprintf>
f012bba8:	83 c4 10             	add    $0x10,%esp
	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012bbab:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bbaf:	75 17                	jne    f012bbc8 <test_kfreelast+0x1f32>
f012bbb1:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012bbb5:	83 ec 08             	sub    $0x8,%esp
f012bbb8:	ff 75 f0             	pushl  -0x10(%ebp)
f012bbbb:	68 ac c1 13 f0       	push   $0xf013c1ac
f012bbc0:	e8 49 51 fd ff       	call   f0100d0e <cprintf>
f012bbc5:	83 c4 10             	add    $0x10,%esp
f012bbc8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree all remaining allocations
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f012bbcf:	e8 0f 12 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012bbd4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bbd7:	e8 ca 81 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012bbdc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[4]);
f012bbdf:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012bbe5:	83 ec 0c             	sub    $0xc,%esp
f012bbe8:	50                   	push   %eax
f012bbe9:	e8 89 bf fd ff       	call   f0107b77 <kfree>
f012bbee:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bbf1:	e8 b0 81 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012bbf6:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bbf9:	74 1d                	je     f012bc18 <test_kfreelast+0x1f82>
f012bbfb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bbff:	75 17                	jne    f012bc18 <test_kfreelast+0x1f82>
f012bc01:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bc08:	83 ec 0c             	sub    $0xc,%esp
f012bc0b:	68 d4 c1 13 f0       	push   $0xf013c1d4
f012bc10:	e8 f9 50 fd ff       	call   f0100d0e <cprintf>
f012bc15:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 2) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012bc18:	e8 c6 11 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012bc1d:	89 c2                	mov    %eax,%edx
f012bc1f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bc22:	29 c2                	sub    %eax,%edx
f012bc24:	89 d0                	mov    %edx,%eax
f012bc26:	83 f8 02             	cmp    $0x2,%eax
f012bc29:	74 1d                	je     f012bc48 <test_kfreelast+0x1fb2>
f012bc2b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bc2f:	75 17                	jne    f012bc48 <test_kfreelast+0x1fb2>
f012bc31:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bc38:	83 ec 0c             	sub    $0xc,%esp
f012bc3b:	68 40 c2 13 f0       	push   $0xf013c240
f012bc40:	e8 c9 50 fd ff       	call   f0100d0e <cprintf>
f012bc45:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012bc48:	e8 96 11 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012bc4d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bc50:	e8 51 81 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012bc55:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[14]);
f012bc58:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012bc5e:	83 ec 0c             	sub    $0xc,%esp
f012bc61:	50                   	push   %eax
f012bc62:	e8 10 bf fd ff       	call   f0107b77 <kfree>
f012bc67:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bc6a:	e8 37 81 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012bc6f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bc72:	74 1d                	je     f012bc91 <test_kfreelast+0x1ffb>
f012bc74:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bc78:	75 17                	jne    f012bc91 <test_kfreelast+0x1ffb>
f012bc7a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bc81:	83 ec 0c             	sub    $0xc,%esp
f012bc84:	68 d4 c1 13 f0       	push   $0xf013c1d4
f012bc89:	e8 80 50 fd ff       	call   f0100d0e <cprintf>
f012bc8e:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012bc91:	e8 4d 11 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012bc96:	89 c2                	mov    %eax,%edx
f012bc98:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bc9b:	29 c2                	sub    %eax,%edx
f012bc9d:	89 d0                	mov    %edx,%eax
f012bc9f:	3d 00 03 00 00       	cmp    $0x300,%eax
f012bca4:	74 1d                	je     f012bcc3 <test_kfreelast+0x202d>
f012bca6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bcaa:	75 17                	jne    f012bcc3 <test_kfreelast+0x202d>
f012bcac:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bcb3:	83 ec 0c             	sub    $0xc,%esp
f012bcb6:	68 40 c2 13 f0       	push   $0xf013c240
f012bcbb:	e8 4e 50 fd ff       	call   f0100d0e <cprintf>
f012bcc0:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012bcc3:	e8 1b 11 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012bcc8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bccb:	e8 d6 80 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012bcd0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[5]);
f012bcd3:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012bcd9:	83 ec 0c             	sub    $0xc,%esp
f012bcdc:	50                   	push   %eax
f012bcdd:	e8 95 be fd ff       	call   f0107b77 <kfree>
f012bce2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bce5:	e8 bc 80 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012bcea:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bced:	74 1d                	je     f012bd0c <test_kfreelast+0x2076>
f012bcef:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bcf3:	75 17                	jne    f012bd0c <test_kfreelast+0x2076>
f012bcf5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bcfc:	83 ec 0c             	sub    $0xc,%esp
f012bcff:	68 d4 c1 13 f0       	push   $0xf013c1d4
f012bd04:	e8 05 50 fd ff       	call   f0100d0e <cprintf>
f012bd09:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012bd0c:	e8 d2 10 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012bd11:	89 c2                	mov    %eax,%edx
f012bd13:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bd16:	29 c2                	sub    %eax,%edx
f012bd18:	89 d0                	mov    %edx,%eax
f012bd1a:	3d 00 03 00 00       	cmp    $0x300,%eax
f012bd1f:	74 1d                	je     f012bd3e <test_kfreelast+0x20a8>
f012bd21:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bd25:	75 17                	jne    f012bd3e <test_kfreelast+0x20a8>
f012bd27:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bd2e:	83 ec 0c             	sub    $0xc,%esp
f012bd31:	68 40 c2 13 f0       	push   $0xf013c240
f012bd36:	e8 d3 4f fd ff       	call   f0100d0e <cprintf>
f012bd3b:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012bd3e:	e8 a0 10 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012bd43:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bd46:	e8 5b 80 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012bd4b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012bd4e:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012bd54:	83 ec 0c             	sub    $0xc,%esp
f012bd57:	50                   	push   %eax
f012bd58:	e8 1a be fd ff       	call   f0107b77 <kfree>
f012bd5d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bd60:	e8 41 80 fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012bd65:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bd68:	74 1d                	je     f012bd87 <test_kfreelast+0x20f1>
f012bd6a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bd6e:	75 17                	jne    f012bd87 <test_kfreelast+0x20f1>
f012bd70:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bd77:	83 ec 0c             	sub    $0xc,%esp
f012bd7a:	68 d4 c1 13 f0       	push   $0xf013c1d4
f012bd7f:	e8 8a 4f fd ff       	call   f0100d0e <cprintf>
f012bd84:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012bd87:	e8 57 10 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012bd8c:	89 c2                	mov    %eax,%edx
f012bd8e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bd91:	29 c2                	sub    %eax,%edx
f012bd93:	89 d0                	mov    %edx,%eax
f012bd95:	83 f8 01             	cmp    $0x1,%eax
f012bd98:	74 1d                	je     f012bdb7 <test_kfreelast+0x2121>
f012bd9a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bd9e:	75 17                	jne    f012bdb7 <test_kfreelast+0x2121>
f012bda0:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bda7:	83 ec 0c             	sub    $0xc,%esp
f012bdaa:	68 40 c2 13 f0       	push   $0xf013c240
f012bdaf:	e8 5a 4f fd ff       	call   f0100d0e <cprintf>
f012bdb4:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012bdb7:	e8 27 10 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012bdbc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bdbf:	e8 e2 7f fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012bdc4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[3]);
f012bdc7:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012bdcd:	83 ec 0c             	sub    $0xc,%esp
f012bdd0:	50                   	push   %eax
f012bdd1:	e8 a1 bd fd ff       	call   f0107b77 <kfree>
f012bdd6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bdd9:	e8 c8 7f fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012bdde:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bde1:	74 1d                	je     f012be00 <test_kfreelast+0x216a>
f012bde3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bde7:	75 17                	jne    f012be00 <test_kfreelast+0x216a>
f012bde9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bdf0:	83 ec 0c             	sub    $0xc,%esp
f012bdf3:	68 d4 c1 13 f0       	push   $0xf013c1d4
f012bdf8:	e8 11 4f fd ff       	call   f0100d0e <cprintf>
f012bdfd:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012be00:	e8 de 0f fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012be05:	89 c2                	mov    %eax,%edx
f012be07:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012be0a:	29 c2                	sub    %eax,%edx
f012be0c:	89 d0                	mov    %edx,%eax
f012be0e:	83 f8 01             	cmp    $0x1,%eax
f012be11:	74 1d                	je     f012be30 <test_kfreelast+0x219a>
f012be13:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012be17:	75 17                	jne    f012be30 <test_kfreelast+0x219a>
f012be19:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012be20:	83 ec 0c             	sub    $0xc,%esp
f012be23:	68 40 c2 13 f0       	push   $0xf013c240
f012be28:	e8 e1 4e fd ff       	call   f0100d0e <cprintf>
f012be2d:	83 c4 10             	add    $0x10,%esp

		if(start_freeFrames != (sys_calculate_free_frames())) if (!f) {f=1; cprintf("\nWrong kfree: not all pages removed correctly at end");}
f012be30:	e8 ae 0f fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012be35:	89 c2                	mov    %eax,%edx
f012be37:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012be3a:	39 c2                	cmp    %eax,%edx
f012be3c:	74 1d                	je     f012be5b <test_kfreelast+0x21c5>
f012be3e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012be42:	75 17                	jne    f012be5b <test_kfreelast+0x21c5>
f012be44:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012be4b:	83 ec 0c             	sub    $0xc,%esp
f012be4e:	68 a0 c3 13 f0       	push   $0xf013c3a0
f012be53:	e8 b6 4e fd ff       	call   f0100d0e <cprintf>
f012be58:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012be5b:	83 ec 0c             	sub    $0xc,%esp
f012be5e:	6a 03                	push   $0x3
f012be60:	e8 1e 14 fe ff       	call   f010d283 <sys_bypassPageFault>
f012be65:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 15; ++i)
f012be68:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012be6f:	e9 8e 00 00 00       	jmp    f012bf02 <test_kfreelast+0x226c>
		{
			ptr = (char *) ptr_allocations[i];
f012be74:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012be77:	8b 84 85 6c fd ff ff 	mov    -0x294(%ebp,%eax,4),%eax
f012be7e:	89 45 84             	mov    %eax,-0x7c(%ebp)
			ptr[0] = 10;
f012be81:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012be84:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012be87:	e8 e5 13 fe ff       	call   f010d271 <sys_rcr2>
f012be8c:	89 c2                	mov    %eax,%edx
f012be8e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012be91:	39 c2                	cmp    %eax,%edx
f012be93:	74 1d                	je     f012beb2 <test_kfreelast+0x221c>
f012be95:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012be99:	75 17                	jne    f012beb2 <test_kfreelast+0x221c>
f012be9b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bea2:	83 ec 0c             	sub    $0xc,%esp
f012bea5:	68 58 c3 13 f0       	push   $0xf013c358
f012beaa:	e8 5f 4e fd ff       	call   f0100d0e <cprintf>
f012beaf:	83 c4 10             	add    $0x10,%esp
			ptr[lastIndices[i]] = 10;
f012beb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012beb5:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012bebc:	89 c2                	mov    %eax,%edx
f012bebe:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bec1:	01 d0                	add    %edx,%eax
f012bec3:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012bec6:	e8 a6 13 fe ff       	call   f010d271 <sys_rcr2>
f012becb:	89 c2                	mov    %eax,%edx
f012becd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012bed0:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012bed7:	89 c1                	mov    %eax,%ecx
f012bed9:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bedc:	01 c8                	add    %ecx,%eax
f012bede:	39 c2                	cmp    %eax,%edx
f012bee0:	74 1d                	je     f012beff <test_kfreelast+0x2269>
f012bee2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bee6:	75 17                	jne    f012beff <test_kfreelast+0x2269>
f012bee8:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012beef:	83 ec 0c             	sub    $0xc,%esp
f012bef2:	68 58 c3 13 f0       	push   $0xf013c358
f012bef7:	e8 12 4e fd ff       	call   f0100d0e <cprintf>
f012befc:	83 c4 10             	add    $0x10,%esp
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 15; ++i)
f012beff:	ff 45 f4             	incl   -0xc(%ebp)
f012bf02:	83 7d f4 0e          	cmpl   $0xe,-0xc(%ebp)
f012bf06:	0f 8e 68 ff ff ff    	jle    f012be74 <test_kfreelast+0x21de>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012bf0c:	83 ec 0c             	sub    $0xc,%esp
f012bf0f:	6a 00                	push   $0x0
f012bf11:	e8 6d 13 fe ff       	call   f010d283 <sys_bypassPageFault>
f012bf16:	83 c4 10             	add    $0x10,%esp
	}

	//kfree non-exist item
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012bf19:	e8 c5 0e fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012bf1e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bf21:	e8 80 7e fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012bf26:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[0]);
f012bf29:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012bf2f:	83 ec 0c             	sub    $0xc,%esp
f012bf32:	50                   	push   %eax
f012bf33:	e8 3f bc fd ff       	call   f0107b77 <kfree>
f012bf38:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bf3b:	e8 66 7e fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012bf40:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bf43:	74 1d                	je     f012bf62 <test_kfreelast+0x22cc>
f012bf45:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bf49:	75 17                	jne    f012bf62 <test_kfreelast+0x22cc>
f012bf4b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bf52:	83 ec 0c             	sub    $0xc,%esp
f012bf55:	68 d4 c1 13 f0       	push   $0xf013c1d4
f012bf5a:	e8 af 4d fd ff       	call   f0100d0e <cprintf>
f012bf5f:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012bf62:	e8 7c 0e fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012bf67:	89 c2                	mov    %eax,%edx
f012bf69:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bf6c:	39 c2                	cmp    %eax,%edx
f012bf6e:	74 1d                	je     f012bf8d <test_kfreelast+0x22f7>
f012bf70:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bf74:	75 17                	jne    f012bf8d <test_kfreelast+0x22f7>
f012bf76:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bf7d:	83 ec 0c             	sub    $0xc,%esp
f012bf80:	68 d8 c3 13 f0       	push   $0xf013c3d8
f012bf85:	e8 84 4d fd ff       	call   f0100d0e <cprintf>
f012bf8a:	83 c4 10             	add    $0x10,%esp

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012bf8d:	e8 51 0e fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012bf92:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bf95:	e8 0c 7e fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012bf9a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012bf9d:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012bfa3:	83 ec 0c             	sub    $0xc,%esp
f012bfa6:	50                   	push   %eax
f012bfa7:	e8 cb bb fd ff       	call   f0107b77 <kfree>
f012bfac:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bfaf:	e8 f2 7d fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012bfb4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bfb7:	74 1d                	je     f012bfd6 <test_kfreelast+0x2340>
f012bfb9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bfbd:	75 17                	jne    f012bfd6 <test_kfreelast+0x2340>
f012bfbf:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bfc6:	83 ec 0c             	sub    $0xc,%esp
f012bfc9:	68 d4 c1 13 f0       	push   $0xf013c1d4
f012bfce:	e8 3b 4d fd ff       	call   f0100d0e <cprintf>
f012bfd3:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012bfd6:	e8 08 0e fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012bfdb:	89 c2                	mov    %eax,%edx
f012bfdd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bfe0:	39 c2                	cmp    %eax,%edx
f012bfe2:	74 1d                	je     f012c001 <test_kfreelast+0x236b>
f012bfe4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bfe8:	75 17                	jne    f012c001 <test_kfreelast+0x236b>
f012bfea:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bff1:	83 ec 0c             	sub    $0xc,%esp
f012bff4:	68 d8 c3 13 f0       	push   $0xf013c3d8
f012bff9:	e8 10 4d fd ff       	call   f0100d0e <cprintf>
f012bffe:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012c001:	e8 dd 0d fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012c006:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c009:	e8 98 7d fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012c00e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012c011:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012c017:	83 ec 0c             	sub    $0xc,%esp
f012c01a:	50                   	push   %eax
f012c01b:	e8 57 bb fd ff       	call   f0107b77 <kfree>
f012c020:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c023:	e8 7e 7d fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012c028:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c02b:	74 1d                	je     f012c04a <test_kfreelast+0x23b4>
f012c02d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c031:	75 17                	jne    f012c04a <test_kfreelast+0x23b4>
f012c033:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c03a:	83 ec 0c             	sub    $0xc,%esp
f012c03d:	68 d4 c1 13 f0       	push   $0xf013c1d4
f012c042:	e8 c7 4c fd ff       	call   f0100d0e <cprintf>
f012c047:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012c04a:	e8 94 0d fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012c04f:	89 c2                	mov    %eax,%edx
f012c051:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c054:	39 c2                	cmp    %eax,%edx
f012c056:	74 1d                	je     f012c075 <test_kfreelast+0x23df>
f012c058:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c05c:	75 17                	jne    f012c075 <test_kfreelast+0x23df>
f012c05e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c065:	83 ec 0c             	sub    $0xc,%esp
f012c068:	68 d8 c3 13 f0       	push   $0xf013c3d8
f012c06d:	e8 9c 4c fd ff       	call   f0100d0e <cprintf>
f012c072:	83 c4 10             	add    $0x10,%esp

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012c075:	e8 69 0d fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012c07a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c07d:	e8 24 7d fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012c082:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012c085:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012c08b:	83 ec 0c             	sub    $0xc,%esp
f012c08e:	50                   	push   %eax
f012c08f:	e8 e3 ba fd ff       	call   f0107b77 <kfree>
f012c094:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c097:	e8 0a 7d fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012c09c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c09f:	74 1d                	je     f012c0be <test_kfreelast+0x2428>
f012c0a1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c0a5:	75 17                	jne    f012c0be <test_kfreelast+0x2428>
f012c0a7:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c0ae:	83 ec 0c             	sub    $0xc,%esp
f012c0b1:	68 d4 c1 13 f0       	push   $0xf013c1d4
f012c0b6:	e8 53 4c fd ff       	call   f0100d0e <cprintf>
f012c0bb:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012c0be:	e8 20 0d fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012c0c3:	89 c2                	mov    %eax,%edx
f012c0c5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c0c8:	39 c2                	cmp    %eax,%edx
f012c0ca:	74 1d                	je     f012c0e9 <test_kfreelast+0x2453>
f012c0cc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c0d0:	75 17                	jne    f012c0e9 <test_kfreelast+0x2453>
f012c0d2:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c0d9:	83 ec 0c             	sub    $0xc,%esp
f012c0dc:	68 d8 c3 13 f0       	push   $0xf013c3d8
f012c0e1:	e8 28 4c fd ff       	call   f0100d0e <cprintf>
f012c0e6:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012c0e9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c0ed:	75 17                	jne    f012c106 <test_kfreelast+0x2470>
f012c0ef:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012c0f3:	83 ec 08             	sub    $0x8,%esp
f012c0f6:	ff 75 f0             	pushl  -0x10(%ebp)
f012c0f9:	68 ac c1 13 f0       	push   $0xf013c1ac
f012c0fe:	e8 0b 4c fd ff       	call   f0100d0e <cprintf>
f012c103:	83 c4 10             	add    $0x10,%esp
f012c106:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//cprintf("\nCongratulations!! your modification is run successfully.\n");

	return 1;
f012c10d:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012c112:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012c115:	5b                   	pop    %ebx
f012c116:	5f                   	pop    %edi
f012c117:	5d                   	pop    %ebp
f012c118:	c3                   	ret    

f012c119 <test_krealloc>:

int test_krealloc() {
f012c119:	55                   	push   %ebp
f012c11a:	89 e5                	mov    %esp,%ebp
f012c11c:	57                   	push   %edi
f012c11d:	53                   	push   %ebx
f012c11e:	81 ec 50 02 00 00    	sub    $0x250,%esp
	cprintf("==============================================\n");
f012c124:	83 ec 0c             	sub    $0xc,%esp
f012c127:	68 bc b0 13 f0       	push   $0xf013b0bc
f012c12c:	e8 dd 4b fd ff       	call   f0100d0e <cprintf>
f012c131:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012c134:	83 ec 0c             	sub    $0xc,%esp
f012c137:	68 ec b0 13 f0       	push   $0xf013b0ec
f012c13c:	e8 cd 4b fd ff       	call   f0100d0e <cprintf>
f012c141:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012c144:	83 ec 0c             	sub    $0xc,%esp
f012c147:	68 bc b0 13 f0       	push   $0xf013b0bc
f012c14c:	e8 bd 4b fd ff       	call   f0100d0e <cprintf>
f012c151:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012c154:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012c158:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012c15c:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012c162:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012c168:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012c16f:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012c176:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f012c17c:	b9 14 00 00 00       	mov    $0x14,%ecx
f012c181:	b8 00 00 00 00       	mov    $0x0,%eax
f012c186:	89 d7                	mov    %edx,%edi
f012c188:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012c18a:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012c191:	8d 95 08 fe ff ff    	lea    -0x1f8(%ebp),%edx
f012c197:	b9 14 00 00 00       	mov    $0x14,%ecx
f012c19c:	b8 00 00 00 00       	mov    $0x0,%eax
f012c1a1:	89 d7                	mov    %edx,%edi
f012c1a3:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012c1a5:	8d 95 b8 fd ff ff    	lea    -0x248(%ebp),%edx
f012c1ab:	b9 14 00 00 00       	mov    $0x14,%ecx
f012c1b0:	b8 00 00 00 00       	mov    $0x0,%eax
f012c1b5:	89 d7                	mov    %edx,%edi
f012c1b7:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c1b9:	e8 25 0c fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012c1be:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012c1c1:	83 ec 08             	sub    $0x8,%esp
f012c1c4:	68 00 fc 0f 00       	push   $0xffc00
f012c1c9:	6a 00                	push   $0x0
f012c1cb:	e8 74 bb fd ff       	call   f0107d44 <krealloc>
f012c1d0:	83 c4 10             	add    $0x10,%esp
f012c1d3:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012c1d9:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c1df:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012c1e4:	77 17                	ja     f012c1fd <test_krealloc+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c1e6:	83 ec 04             	sub    $0x4,%esp
f012c1e9:	68 20 c4 13 f0       	push   $0xf013c420
f012c1ee:	68 e2 0e 00 00       	push   $0xee2
f012c1f3:	68 7a b1 13 f0       	push   $0xf013b17a
f012c1f8:	e8 08 40 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012c1fd:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c203:	89 c1                	mov    %eax,%ecx
f012c205:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012c20c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012c20f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c214:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012c217:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012c21a:	ba 00 00 00 00       	mov    $0x0,%edx
f012c21f:	f7 75 b4             	divl   -0x4c(%ebp)
f012c222:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012c225:	29 d0                	sub    %edx,%eax
f012c227:	89 c3                	mov    %eax,%ebx
f012c229:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012c230:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012c235:	0f b6 d0             	movzbl %al,%edx
f012c238:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012c23b:	01 d0                	add    %edx,%eax
f012c23d:	48                   	dec    %eax
f012c23e:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012c241:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012c244:	ba 00 00 00 00       	mov    $0x0,%edx
f012c249:	f7 75 ac             	divl   -0x54(%ebp)
f012c24c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012c24f:	29 d0                	sub    %edx,%eax
f012c251:	01 c3                	add    %eax,%ebx
f012c253:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012c25a:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012c25f:	0f b6 c0             	movzbl %al,%eax
f012c262:	c1 e0 04             	shl    $0x4,%eax
f012c265:	89 c2                	mov    %eax,%edx
f012c267:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012c26a:	01 d0                	add    %edx,%eax
f012c26c:	48                   	dec    %eax
f012c26d:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012c270:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012c273:	ba 00 00 00 00       	mov    $0x0,%edx
f012c278:	f7 75 a4             	divl   -0x5c(%ebp)
f012c27b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012c27e:	29 d0                	sub    %edx,%eax
f012c280:	01 d8                	add    %ebx,%eax
f012c282:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012c287:	39 c1                	cmp    %eax,%ecx
f012c289:	74 17                	je     f012c2a2 <test_krealloc+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012c28b:	83 ec 04             	sub    $0x4,%esp
f012c28e:	68 5c c4 13 f0       	push   $0xf013c45c
f012c293:	68 e4 0e 00 00       	push   $0xee4
f012c298:	68 7a b1 13 f0       	push   $0xf013b17a
f012c29d:	e8 63 3f fd ff       	call   f0100205 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c2a2:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c2a5:	e8 39 0b fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012c2aa:	29 c3                	sub    %eax,%ebx
f012c2ac:	89 d8                	mov    %ebx,%eax
f012c2ae:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c2b3:	74 17                	je     f012c2cc <test_krealloc+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012c2b5:	83 ec 04             	sub    $0x4,%esp
f012c2b8:	68 8e c4 13 f0       	push   $0xf013c48e
f012c2bd:	68 e7 0e 00 00       	push   $0xee7
f012c2c2:	68 7a b1 13 f0       	push   $0xf013b17a
f012c2c7:	e8 39 3f fd ff       	call   f0100205 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012c2cc:	c7 85 08 fe ff ff ff 	movl   $0xffbff,-0x1f8(%ebp)
f012c2d3:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c2d6:	e8 08 0b fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012c2db:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012c2de:	83 ec 08             	sub    $0x8,%esp
f012c2e1:	68 00 fc 0f 00       	push   $0xffc00
f012c2e6:	6a 00                	push   $0x0
f012c2e8:	e8 57 ba fd ff       	call   f0107d44 <krealloc>
f012c2ed:	83 c4 10             	add    $0x10,%esp
f012c2f0:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012c2f6:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c2fc:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012c301:	77 17                	ja     f012c31a <test_krealloc+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c303:	83 ec 04             	sub    $0x4,%esp
f012c306:	68 20 c4 13 f0       	push   $0xf013c420
f012c30b:	68 ef 0e 00 00       	push   $0xeef
f012c310:	68 7a b1 13 f0       	push   $0xf013b17a
f012c315:	e8 eb 3e fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012c31a:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c320:	89 c1                	mov    %eax,%ecx
f012c322:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012c329:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012c32c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c331:	89 45 98             	mov    %eax,-0x68(%ebp)
f012c334:	8b 45 98             	mov    -0x68(%ebp),%eax
f012c337:	ba 00 00 00 00       	mov    $0x0,%edx
f012c33c:	f7 75 9c             	divl   -0x64(%ebp)
f012c33f:	8b 45 98             	mov    -0x68(%ebp),%eax
f012c342:	29 d0                	sub    %edx,%eax
f012c344:	89 c3                	mov    %eax,%ebx
f012c346:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012c34d:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012c352:	0f b6 d0             	movzbl %al,%edx
f012c355:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012c358:	01 d0                	add    %edx,%eax
f012c35a:	48                   	dec    %eax
f012c35b:	89 45 90             	mov    %eax,-0x70(%ebp)
f012c35e:	8b 45 90             	mov    -0x70(%ebp),%eax
f012c361:	ba 00 00 00 00       	mov    $0x0,%edx
f012c366:	f7 75 94             	divl   -0x6c(%ebp)
f012c369:	8b 45 90             	mov    -0x70(%ebp),%eax
f012c36c:	29 d0                	sub    %edx,%eax
f012c36e:	01 c3                	add    %eax,%ebx
f012c370:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012c377:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012c37c:	0f b6 c0             	movzbl %al,%eax
f012c37f:	c1 e0 04             	shl    $0x4,%eax
f012c382:	89 c2                	mov    %eax,%edx
f012c384:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012c387:	01 d0                	add    %edx,%eax
f012c389:	48                   	dec    %eax
f012c38a:	89 45 88             	mov    %eax,-0x78(%ebp)
f012c38d:	8b 45 88             	mov    -0x78(%ebp),%eax
f012c390:	ba 00 00 00 00       	mov    $0x0,%edx
f012c395:	f7 75 8c             	divl   -0x74(%ebp)
f012c398:	8b 45 88             	mov    -0x78(%ebp),%eax
f012c39b:	29 d0                	sub    %edx,%eax
f012c39d:	01 d8                	add    %ebx,%eax
f012c39f:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012c3a4:	39 c1                	cmp    %eax,%ecx
f012c3a6:	74 17                	je     f012c3bf <test_krealloc+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012c3a8:	83 ec 04             	sub    $0x4,%esp
f012c3ab:	68 5c c4 13 f0       	push   $0xf013c45c
f012c3b0:	68 f1 0e 00 00       	push   $0xef1
f012c3b5:	68 7a b1 13 f0       	push   $0xf013b17a
f012c3ba:	e8 46 3e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c3bf:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c3c2:	e8 1c 0a fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012c3c7:	29 c3                	sub    %eax,%ebx
f012c3c9:	89 d8                	mov    %ebx,%eax
f012c3cb:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c3d0:	74 17                	je     f012c3e9 <test_krealloc+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012c3d2:	83 ec 04             	sub    $0x4,%esp
f012c3d5:	68 8e c4 13 f0       	push   $0xf013c48e
f012c3da:	68 f3 0e 00 00       	push   $0xef3
f012c3df:	68 7a b1 13 f0       	push   $0xf013b17a
f012c3e4:	e8 1c 3e fd ff       	call   f0100205 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012c3e9:	c7 85 0c fe ff ff ff 	movl   $0xffbff,-0x1f4(%ebp)
f012c3f0:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c3f3:	e8 eb 09 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012c3f8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012c3fb:	83 ec 08             	sub    $0x8,%esp
f012c3fe:	68 00 fc 0f 00       	push   $0xffc00
f012c403:	6a 00                	push   $0x0
f012c405:	e8 3a b9 fd ff       	call   f0107d44 <krealloc>
f012c40a:	83 c4 10             	add    $0x10,%esp
f012c40d:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012c413:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c419:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012c41e:	77 17                	ja     f012c437 <test_krealloc+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c420:	83 ec 04             	sub    $0x4,%esp
f012c423:	68 20 c4 13 f0       	push   $0xf013c420
f012c428:	68 fb 0e 00 00       	push   $0xefb
f012c42d:	68 7a b1 13 f0       	push   $0xf013b17a
f012c432:	e8 ce 3d fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012c437:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c43d:	89 c1                	mov    %eax,%ecx
f012c43f:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012c446:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012c449:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c44e:	89 45 80             	mov    %eax,-0x80(%ebp)
f012c451:	8b 45 80             	mov    -0x80(%ebp),%eax
f012c454:	ba 00 00 00 00       	mov    $0x0,%edx
f012c459:	f7 75 84             	divl   -0x7c(%ebp)
f012c45c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012c45f:	29 d0                	sub    %edx,%eax
f012c461:	89 c3                	mov    %eax,%ebx
f012c463:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012c46a:	10 00 00 
f012c46d:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012c472:	0f b6 d0             	movzbl %al,%edx
f012c475:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012c47b:	01 d0                	add    %edx,%eax
f012c47d:	48                   	dec    %eax
f012c47e:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012c484:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012c48a:	ba 00 00 00 00       	mov    $0x0,%edx
f012c48f:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012c495:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012c49b:	29 d0                	sub    %edx,%eax
f012c49d:	01 c3                	add    %eax,%ebx
f012c49f:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012c4a6:	10 00 00 
f012c4a9:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012c4ae:	0f b6 c0             	movzbl %al,%eax
f012c4b1:	c1 e0 04             	shl    $0x4,%eax
f012c4b4:	89 c2                	mov    %eax,%edx
f012c4b6:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012c4bc:	01 d0                	add    %edx,%eax
f012c4be:	48                   	dec    %eax
f012c4bf:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012c4c5:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012c4cb:	ba 00 00 00 00       	mov    $0x0,%edx
f012c4d0:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012c4d6:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012c4dc:	29 d0                	sub    %edx,%eax
f012c4de:	01 d8                	add    %ebx,%eax
f012c4e0:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012c4e5:	39 c1                	cmp    %eax,%ecx
f012c4e7:	74 17                	je     f012c500 <test_krealloc+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012c4e9:	83 ec 04             	sub    $0x4,%esp
f012c4ec:	68 5c c4 13 f0       	push   $0xf013c45c
f012c4f1:	68 fd 0e 00 00       	push   $0xefd
f012c4f6:	68 7a b1 13 f0       	push   $0xf013b17a
f012c4fb:	e8 05 3d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c500:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c503:	e8 db 08 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012c508:	29 c3                	sub    %eax,%ebx
f012c50a:	89 d8                	mov    %ebx,%eax
f012c50c:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c511:	74 17                	je     f012c52a <test_krealloc+0x411>
			panic("krealloc: Wrong allocation: ");
f012c513:	83 ec 04             	sub    $0x4,%esp
f012c516:	68 8e c4 13 f0       	push   $0xf013c48e
f012c51b:	68 ff 0e 00 00       	push   $0xeff
f012c520:	68 7a b1 13 f0       	push   $0xf013b17a
f012c525:	e8 db 3c fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012c52a:	c7 85 10 fe ff ff ff 	movl   $0x3feff,-0x1f0(%ebp)
f012c531:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c534:	e8 aa 08 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012c539:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012c53c:	83 ec 08             	sub    $0x8,%esp
f012c53f:	68 00 fc 0f 00       	push   $0xffc00
f012c544:	6a 00                	push   $0x0
f012c546:	e8 f9 b7 fd ff       	call   f0107d44 <krealloc>
f012c54b:	83 c4 10             	add    $0x10,%esp
f012c54e:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012c554:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c55a:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012c55f:	77 17                	ja     f012c578 <test_krealloc+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c561:	83 ec 04             	sub    $0x4,%esp
f012c564:	68 20 c4 13 f0       	push   $0xf013c420
f012c569:	68 06 0f 00 00       	push   $0xf06
f012c56e:	68 7a b1 13 f0       	push   $0xf013b17a
f012c573:	e8 8d 3c fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012c578:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c57e:	89 c1                	mov    %eax,%ecx
f012c580:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012c587:	10 00 00 
f012c58a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012c590:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c595:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012c59b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012c5a1:	ba 00 00 00 00       	mov    $0x0,%edx
f012c5a6:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012c5ac:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012c5b2:	29 d0                	sub    %edx,%eax
f012c5b4:	89 c3                	mov    %eax,%ebx
f012c5b6:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012c5bd:	10 00 00 
f012c5c0:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012c5c5:	0f b6 d0             	movzbl %al,%edx
f012c5c8:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012c5ce:	01 d0                	add    %edx,%eax
f012c5d0:	48                   	dec    %eax
f012c5d1:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012c5d7:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012c5dd:	ba 00 00 00 00       	mov    $0x0,%edx
f012c5e2:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012c5e8:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012c5ee:	29 d0                	sub    %edx,%eax
f012c5f0:	01 c3                	add    %eax,%ebx
f012c5f2:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012c5f9:	10 00 00 
f012c5fc:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012c601:	0f b6 c0             	movzbl %al,%eax
f012c604:	c1 e0 04             	shl    $0x4,%eax
f012c607:	89 c2                	mov    %eax,%edx
f012c609:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012c60f:	01 d0                	add    %edx,%eax
f012c611:	48                   	dec    %eax
f012c612:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012c618:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012c61e:	ba 00 00 00 00       	mov    $0x0,%edx
f012c623:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012c629:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012c62f:	29 d0                	sub    %edx,%eax
f012c631:	01 d8                	add    %ebx,%eax
f012c633:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012c638:	39 c1                	cmp    %eax,%ecx
f012c63a:	74 17                	je     f012c653 <test_krealloc+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012c63c:	83 ec 04             	sub    $0x4,%esp
f012c63f:	68 5c c4 13 f0       	push   $0xf013c45c
f012c644:	68 08 0f 00 00       	push   $0xf08
f012c649:	68 7a b1 13 f0       	push   $0xf013b17a
f012c64e:	e8 b2 3b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c653:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c656:	e8 88 07 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012c65b:	29 c3                	sub    %eax,%ebx
f012c65d:	89 d8                	mov    %ebx,%eax
f012c65f:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c664:	74 17                	je     f012c67d <test_krealloc+0x564>
			panic("krealloc: Wrong allocation: ");
f012c666:	83 ec 04             	sub    $0x4,%esp
f012c669:	68 8e c4 13 f0       	push   $0xf013c48e
f012c66e:	68 0a 0f 00 00       	push   $0xf0a
f012c673:	68 7a b1 13 f0       	push   $0xf013b17a
f012c678:	e8 88 3b fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012c67d:	c7 85 14 fe ff ff ff 	movl   $0x3feff,-0x1ec(%ebp)
f012c684:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012c687:	e8 57 07 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012c68c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012c68f:	83 ec 08             	sub    $0x8,%esp
f012c692:	68 00 fc 1f 00       	push   $0x1ffc00
f012c697:	6a 00                	push   $0x0
f012c699:	e8 a6 b6 fd ff       	call   f0107d44 <krealloc>
f012c69e:	83 c4 10             	add    $0x10,%esp
f012c6a1:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012c6a7:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c6ad:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012c6b2:	77 17                	ja     f012c6cb <test_krealloc+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c6b4:	83 ec 04             	sub    $0x4,%esp
f012c6b7:	68 20 c4 13 f0       	push   $0xf013c420
f012c6bc:	68 11 0f 00 00       	push   $0xf11
f012c6c1:	68 7a b1 13 f0       	push   $0xf013b17a
f012c6c6:	e8 3a 3b fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012c6cb:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c6d1:	89 c1                	mov    %eax,%ecx
f012c6d3:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012c6da:	10 00 00 
f012c6dd:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012c6e3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c6e8:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012c6ee:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012c6f4:	ba 00 00 00 00       	mov    $0x0,%edx
f012c6f9:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012c6ff:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012c705:	29 d0                	sub    %edx,%eax
f012c707:	89 c3                	mov    %eax,%ebx
f012c709:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012c710:	10 00 00 
f012c713:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012c718:	0f b6 d0             	movzbl %al,%edx
f012c71b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012c721:	01 d0                	add    %edx,%eax
f012c723:	48                   	dec    %eax
f012c724:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012c72a:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012c730:	ba 00 00 00 00       	mov    $0x0,%edx
f012c735:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012c73b:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012c741:	29 d0                	sub    %edx,%eax
f012c743:	01 c3                	add    %eax,%ebx
f012c745:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012c74c:	10 00 00 
f012c74f:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012c754:	0f b6 c0             	movzbl %al,%eax
f012c757:	c1 e0 04             	shl    $0x4,%eax
f012c75a:	89 c2                	mov    %eax,%edx
f012c75c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012c762:	01 d0                	add    %edx,%eax
f012c764:	48                   	dec    %eax
f012c765:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012c76b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012c771:	ba 00 00 00 00       	mov    $0x0,%edx
f012c776:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012c77c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012c782:	29 d0                	sub    %edx,%eax
f012c784:	01 d8                	add    %ebx,%eax
f012c786:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012c78b:	39 c1                	cmp    %eax,%ecx
f012c78d:	74 17                	je     f012c7a6 <test_krealloc+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012c78f:	83 ec 04             	sub    $0x4,%esp
f012c792:	68 5c c4 13 f0       	push   $0xf013c45c
f012c797:	68 13 0f 00 00       	push   $0xf13
f012c79c:	68 7a b1 13 f0       	push   $0xf013b17a
f012c7a1:	e8 5f 3a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012c7a6:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c7a9:	e8 35 06 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012c7ae:	29 c3                	sub    %eax,%ebx
f012c7b0:	89 d8                	mov    %ebx,%eax
f012c7b2:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c7b7:	74 17                	je     f012c7d0 <test_krealloc+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012c7b9:	83 ec 04             	sub    $0x4,%esp
f012c7bc:	68 8e c4 13 f0       	push   $0xf013c48e
f012c7c1:	68 15 0f 00 00       	push   $0xf15
f012c7c6:	68 7a b1 13 f0       	push   $0xf013b17a
f012c7cb:	e8 35 3a fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012c7d0:	c7 85 18 fe ff ff ff 	movl   $0xffdff,-0x1e8(%ebp)
f012c7d7:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012c7da:	e8 04 06 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012c7df:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012c7e2:	83 ec 08             	sub    $0x8,%esp
f012c7e5:	68 00 fc 1f 00       	push   $0x1ffc00
f012c7ea:	6a 00                	push   $0x0
f012c7ec:	e8 53 b5 fd ff       	call   f0107d44 <krealloc>
f012c7f1:	83 c4 10             	add    $0x10,%esp
f012c7f4:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012c7fa:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012c800:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012c805:	77 17                	ja     f012c81e <test_krealloc+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c807:	83 ec 04             	sub    $0x4,%esp
f012c80a:	68 20 c4 13 f0       	push   $0xf013c420
f012c80f:	68 1c 0f 00 00       	push   $0xf1c
f012c814:	68 7a b1 13 f0       	push   $0xf013b17a
f012c819:	e8 e7 39 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012c81e:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012c824:	89 c1                	mov    %eax,%ecx
f012c826:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012c82d:	10 00 00 
f012c830:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012c836:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c83b:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012c841:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012c847:	ba 00 00 00 00       	mov    $0x0,%edx
f012c84c:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012c852:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012c858:	29 d0                	sub    %edx,%eax
f012c85a:	89 c3                	mov    %eax,%ebx
f012c85c:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012c863:	10 00 00 
f012c866:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012c86b:	0f b6 d0             	movzbl %al,%edx
f012c86e:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012c874:	01 d0                	add    %edx,%eax
f012c876:	48                   	dec    %eax
f012c877:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012c87d:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c883:	ba 00 00 00 00       	mov    $0x0,%edx
f012c888:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012c88e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c894:	29 d0                	sub    %edx,%eax
f012c896:	01 c3                	add    %eax,%ebx
f012c898:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012c89f:	10 00 00 
f012c8a2:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012c8a7:	0f b6 c0             	movzbl %al,%eax
f012c8aa:	c1 e0 04             	shl    $0x4,%eax
f012c8ad:	89 c2                	mov    %eax,%edx
f012c8af:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012c8b5:	01 d0                	add    %edx,%eax
f012c8b7:	48                   	dec    %eax
f012c8b8:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012c8be:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c8c4:	ba 00 00 00 00       	mov    $0x0,%edx
f012c8c9:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012c8cf:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c8d5:	29 d0                	sub    %edx,%eax
f012c8d7:	01 d8                	add    %ebx,%eax
f012c8d9:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012c8de:	39 c1                	cmp    %eax,%ecx
f012c8e0:	74 17                	je     f012c8f9 <test_krealloc+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012c8e2:	83 ec 04             	sub    $0x4,%esp
f012c8e5:	68 5c c4 13 f0       	push   $0xf013c45c
f012c8ea:	68 1e 0f 00 00       	push   $0xf1e
f012c8ef:	68 7a b1 13 f0       	push   $0xf013b17a
f012c8f4:	e8 0c 39 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012c8f9:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c8fc:	e8 e2 04 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012c901:	29 c3                	sub    %eax,%ebx
f012c903:	89 d8                	mov    %ebx,%eax
f012c905:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c90a:	74 17                	je     f012c923 <test_krealloc+0x80a>
			panic("krealloc: Wrong allocation: ");
f012c90c:	83 ec 04             	sub    $0x4,%esp
f012c90f:	68 8e c4 13 f0       	push   $0xf013c48e
f012c914:	68 20 0f 00 00       	push   $0xf20
f012c919:	68 7a b1 13 f0       	push   $0xf013b17a
f012c91e:	e8 e2 38 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012c923:	c7 85 1c fe ff ff ff 	movl   $0xffdff,-0x1e4(%ebp)
f012c92a:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012c92d:	e8 b1 04 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012c932:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012c935:	83 ec 08             	sub    $0x8,%esp
f012c938:	68 00 fc 2f 00       	push   $0x2ffc00
f012c93d:	6a 00                	push   $0x0
f012c93f:	e8 00 b4 fd ff       	call   f0107d44 <krealloc>
f012c944:	83 c4 10             	add    $0x10,%esp
f012c947:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012c94d:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c953:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012c958:	77 17                	ja     f012c971 <test_krealloc+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c95a:	83 ec 04             	sub    $0x4,%esp
f012c95d:	68 20 c4 13 f0       	push   $0xf013c420
f012c962:	68 27 0f 00 00       	push   $0xf27
f012c967:	68 7a b1 13 f0       	push   $0xf013b17a
f012c96c:	e8 94 38 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012c971:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c977:	89 c1                	mov    %eax,%ecx
f012c979:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012c980:	10 00 00 
f012c983:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c989:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c98e:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012c994:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c99a:	ba 00 00 00 00       	mov    $0x0,%edx
f012c99f:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012c9a5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c9ab:	29 d0                	sub    %edx,%eax
f012c9ad:	89 c3                	mov    %eax,%ebx
f012c9af:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012c9b6:	10 00 00 
f012c9b9:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012c9be:	0f b6 d0             	movzbl %al,%edx
f012c9c1:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012c9c7:	01 d0                	add    %edx,%eax
f012c9c9:	48                   	dec    %eax
f012c9ca:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012c9d0:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012c9d6:	ba 00 00 00 00       	mov    $0x0,%edx
f012c9db:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012c9e1:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012c9e7:	29 d0                	sub    %edx,%eax
f012c9e9:	01 c3                	add    %eax,%ebx
f012c9eb:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012c9f2:	10 00 00 
f012c9f5:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012c9fa:	0f b6 c0             	movzbl %al,%eax
f012c9fd:	c1 e0 04             	shl    $0x4,%eax
f012ca00:	89 c2                	mov    %eax,%edx
f012ca02:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012ca08:	01 d0                	add    %edx,%eax
f012ca0a:	48                   	dec    %eax
f012ca0b:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012ca11:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012ca17:	ba 00 00 00 00       	mov    $0x0,%edx
f012ca1c:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012ca22:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012ca28:	29 d0                	sub    %edx,%eax
f012ca2a:	01 d8                	add    %ebx,%eax
f012ca2c:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012ca31:	39 c1                	cmp    %eax,%ecx
f012ca33:	74 17                	je     f012ca4c <test_krealloc+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012ca35:	83 ec 04             	sub    $0x4,%esp
f012ca38:	68 5c c4 13 f0       	push   $0xf013c45c
f012ca3d:	68 29 0f 00 00       	push   $0xf29
f012ca42:	68 7a b1 13 f0       	push   $0xf013b17a
f012ca47:	e8 b9 37 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012ca4c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ca4f:	e8 8f 03 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012ca54:	29 c3                	sub    %eax,%ebx
f012ca56:	89 d8                	mov    %ebx,%eax
f012ca58:	3d 00 03 00 00       	cmp    $0x300,%eax
f012ca5d:	74 17                	je     f012ca76 <test_krealloc+0x95d>
			panic("Wrong allocation: ");
f012ca5f:	83 ec 04             	sub    $0x4,%esp
f012ca62:	68 c4 b5 13 f0       	push   $0xf013b5c4
f012ca67:	68 2b 0f 00 00       	push   $0xf2b
f012ca6c:	68 7a b1 13 f0       	push   $0xf013b17a
f012ca71:	e8 8f 37 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012ca76:	c7 85 20 fe ff ff 7f 	movl   $0x5ff7f,-0x1e0(%ebp)
f012ca7d:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012ca80:	e8 5e 03 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012ca85:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012ca88:	83 ec 08             	sub    $0x8,%esp
f012ca8b:	68 00 fc 2f 00       	push   $0x2ffc00
f012ca90:	6a 00                	push   $0x0
f012ca92:	e8 ad b2 fd ff       	call   f0107d44 <krealloc>
f012ca97:	83 c4 10             	add    $0x10,%esp
f012ca9a:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012caa0:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012caa6:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012caab:	77 17                	ja     f012cac4 <test_krealloc+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012caad:	83 ec 04             	sub    $0x4,%esp
f012cab0:	68 20 c4 13 f0       	push   $0xf013c420
f012cab5:	68 32 0f 00 00       	push   $0xf32
f012caba:	68 7a b1 13 f0       	push   $0xf013b17a
f012cabf:	e8 41 37 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012cac4:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012caca:	89 c1                	mov    %eax,%ecx
f012cacc:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012cad3:	10 00 00 
f012cad6:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012cadc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012cae1:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012cae7:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012caed:	ba 00 00 00 00       	mov    $0x0,%edx
f012caf2:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012caf8:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012cafe:	29 d0                	sub    %edx,%eax
f012cb00:	89 c3                	mov    %eax,%ebx
f012cb02:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012cb09:	10 00 00 
f012cb0c:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012cb11:	0f b6 d0             	movzbl %al,%edx
f012cb14:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012cb1a:	01 d0                	add    %edx,%eax
f012cb1c:	48                   	dec    %eax
f012cb1d:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012cb23:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012cb29:	ba 00 00 00 00       	mov    $0x0,%edx
f012cb2e:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012cb34:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012cb3a:	29 d0                	sub    %edx,%eax
f012cb3c:	01 c3                	add    %eax,%ebx
f012cb3e:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012cb45:	10 00 00 
f012cb48:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012cb4d:	0f b6 c0             	movzbl %al,%eax
f012cb50:	c1 e0 04             	shl    $0x4,%eax
f012cb53:	89 c2                	mov    %eax,%edx
f012cb55:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012cb5b:	01 d0                	add    %edx,%eax
f012cb5d:	48                   	dec    %eax
f012cb5e:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012cb64:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012cb6a:	ba 00 00 00 00       	mov    $0x0,%edx
f012cb6f:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012cb75:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012cb7b:	29 d0                	sub    %edx,%eax
f012cb7d:	01 d8                	add    %ebx,%eax
f012cb7f:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012cb84:	39 c1                	cmp    %eax,%ecx
f012cb86:	74 17                	je     f012cb9f <test_krealloc+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012cb88:	83 ec 04             	sub    $0x4,%esp
f012cb8b:	68 5c c4 13 f0       	push   $0xf013c45c
f012cb90:	68 34 0f 00 00       	push   $0xf34
f012cb95:	68 7a b1 13 f0       	push   $0xf013b17a
f012cb9a:	e8 66 36 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012cb9f:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012cba2:	e8 3c 02 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012cba7:	29 c3                	sub    %eax,%ebx
f012cba9:	89 d8                	mov    %ebx,%eax
f012cbab:	3d 00 03 00 00       	cmp    $0x300,%eax
f012cbb0:	74 17                	je     f012cbc9 <test_krealloc+0xab0>
			panic("krealloc: Wrong allocation: ");
f012cbb2:	83 ec 04             	sub    $0x4,%esp
f012cbb5:	68 8e c4 13 f0       	push   $0xf013c48e
f012cbba:	68 36 0f 00 00       	push   $0xf36
f012cbbf:	68 7a b1 13 f0       	push   $0xf013b17a
f012cbc4:	e8 3c 36 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012cbc9:	c7 85 24 fe ff ff 7f 	movl   $0x5ff7f,-0x1dc(%ebp)
f012cbd0:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012cbd3:	e8 0b 02 fe ff       	call   f010cde3 <sys_calculate_free_frames>
f012cbd8:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012cbdb:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012cbe2:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012cbe5:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012cbeb:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012cbf1:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012cbf7:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012cbfa:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012cbfc:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012cc02:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012cc08:	01 c2                	add    %eax,%edx
f012cc0a:	8a 45 ce             	mov    -0x32(%ebp),%al
f012cc0d:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012cc0f:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cc15:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012cc1b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012cc22:	eb 11                	jmp    f012cc35 <test_krealloc+0xb1c>
			ptr[i] = 2;
f012cc24:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012cc27:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012cc2d:	01 d0                	add    %edx,%eax
f012cc2f:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012cc32:	ff 45 f4             	incl   -0xc(%ebp)
f012cc35:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012cc3b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012cc3e:	7d e4                	jge    f012cc24 <test_krealloc+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012cc40:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012cc46:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012cc4c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012cc52:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012cc58:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012cc5e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012cc65:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012cc6b:	01 d0                	add    %edx,%eax
f012cc6d:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012cc73:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012cc79:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012cc7f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012cc86:	eb 1b                	jmp    f012cca3 <test_krealloc+0xb8a>
			intArr[i] = 4;
f012cc88:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012cc8b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012cc92:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012cc98:	01 d0                	add    %edx,%eax
f012cc9a:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012cca0:	ff 45 f0             	incl   -0x10(%ebp)
f012cca3:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012cca9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012ccac:	7d da                	jge    f012cc88 <test_krealloc+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012ccae:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012ccb4:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012ccba:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012ccc1:	eb 17                	jmp    f012ccda <test_krealloc+0xbc1>
			shortArr[i] = 5;
f012ccc3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012ccc6:	01 c0                	add    %eax,%eax
f012ccc8:	89 c2                	mov    %eax,%edx
f012ccca:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ccd0:	01 d0                	add    %edx,%eax
f012ccd2:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012ccd7:	ff 45 ec             	incl   -0x14(%ebp)
f012ccda:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012cce0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012cce3:	7d de                	jge    f012ccc3 <test_krealloc+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012cce5:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012cceb:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012ccf1:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ccf7:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012ccfc:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012cd02:	01 c0                	add    %eax,%eax
f012cd04:	89 c2                	mov    %eax,%edx
f012cd06:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cd0c:	01 d0                	add    %edx,%eax
f012cd0e:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012cd13:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012cd19:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012cd1f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012cd26:	eb 49                	jmp    f012cd71 <test_krealloc+0xc58>
			structArr[i].a = 7;
f012cd28:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012cd2b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cd32:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cd38:	01 d0                	add    %edx,%eax
f012cd3a:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012cd3d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012cd40:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cd47:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cd4d:	01 d0                	add    %edx,%eax
f012cd4f:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012cd55:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012cd58:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cd5f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cd65:	01 d0                	add    %edx,%eax
f012cd67:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012cd6e:	ff 45 e8             	incl   -0x18(%ebp)
f012cd71:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cd77:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012cd7a:	7d ac                	jge    f012cd28 <test_krealloc+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012cd7c:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012cd82:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012cd88:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cd8e:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012cd91:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cd97:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012cd9d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cda3:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012cdaa:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012cdb0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cdb7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cdbd:	01 d0                	add    %edx,%eax
f012cdbf:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012cdc2:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012cdc8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cdcf:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cdd5:	01 d0                	add    %edx,%eax
f012cdd7:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012cddd:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012cde3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cdea:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cdf0:	01 d0                	add    %edx,%eax
f012cdf2:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012cdf9:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012cdff:	8a 00                	mov    (%eax),%al
f012ce01:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012ce04:	75 17                	jne    f012ce1d <test_krealloc+0xd04>
f012ce06:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ce0c:	89 c2                	mov    %eax,%edx
f012ce0e:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012ce14:	01 d0                	add    %edx,%eax
f012ce16:	8a 00                	mov    (%eax),%al
f012ce18:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012ce1b:	74 17                	je     f012ce34 <test_krealloc+0xd1b>
			panic(
f012ce1d:	83 ec 04             	sub    $0x4,%esp
f012ce20:	68 ac c4 13 f0       	push   $0xf013c4ac
f012ce25:	68 79 0f 00 00       	push   $0xf79
f012ce2a:	68 7a b1 13 f0       	push   $0xf013b17a
f012ce2f:	e8 d1 33 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012ce34:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012ce3a:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012ce40:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012ce46:	8a 00                	mov    (%eax),%al
f012ce48:	3c 02                	cmp    $0x2,%al
f012ce4a:	75 16                	jne    f012ce62 <test_krealloc+0xd49>
f012ce4c:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012ce52:	89 c2                	mov    %eax,%edx
f012ce54:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012ce5a:	01 d0                	add    %edx,%eax
f012ce5c:	8a 00                	mov    (%eax),%al
f012ce5e:	3c 02                	cmp    $0x2,%al
f012ce60:	74 20                	je     f012ce82 <test_krealloc+0xd69>
			panic(
f012ce62:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012ce68:	8a 00                	mov    (%eax),%al
f012ce6a:	0f be c0             	movsbl %al,%eax
f012ce6d:	50                   	push   %eax
f012ce6e:	68 ec c4 13 f0       	push   $0xf013c4ec
f012ce73:	68 7f 0f 00 00       	push   $0xf7f
f012ce78:	68 7a b1 13 f0       	push   $0xf013b17a
f012ce7d:	e8 83 33 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012ce82:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012ce88:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012ce8e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ce94:	8b 00                	mov    (%eax),%eax
f012ce96:	83 f8 03             	cmp    $0x3,%eax
f012ce99:	75 1c                	jne    f012ceb7 <test_krealloc+0xd9e>
f012ce9b:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012cea1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012cea8:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ceae:	01 d0                	add    %edx,%eax
f012ceb0:	8b 00                	mov    (%eax),%eax
f012ceb2:	83 f8 03             	cmp    $0x3,%eax
f012ceb5:	74 17                	je     f012cece <test_krealloc+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012ceb7:	83 ec 04             	sub    $0x4,%esp
f012ceba:	68 38 c5 13 f0       	push   $0xf013c538
f012cebf:	68 83 0f 00 00       	push   $0xf83
f012cec4:	68 7a b1 13 f0       	push   $0xf013b17a
f012cec9:	e8 37 33 fd ff       	call   f0100205 <_panic>

		intArr = (int*) ptr_allocations[3];
f012cece:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012ced4:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012ceda:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012cee0:	8b 00                	mov    (%eax),%eax
f012cee2:	83 f8 04             	cmp    $0x4,%eax
f012cee5:	75 1c                	jne    f012cf03 <test_krealloc+0xdea>
f012cee7:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012ceed:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012cef4:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012cefa:	01 d0                	add    %edx,%eax
f012cefc:	8b 00                	mov    (%eax),%eax
f012cefe:	83 f8 04             	cmp    $0x4,%eax
f012cf01:	74 17                	je     f012cf1a <test_krealloc+0xe01>
			panic(
f012cf03:	83 ec 04             	sub    $0x4,%esp
f012cf06:	68 ac c4 13 f0       	push   $0xf013c4ac
f012cf0b:	68 88 0f 00 00       	push   $0xf88
f012cf10:	68 7a b1 13 f0       	push   $0xf013b17a
f012cf15:	e8 eb 32 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012cf1a:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cf20:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012cf26:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cf2c:	66 8b 00             	mov    (%eax),%ax
f012cf2f:	66 83 f8 05          	cmp    $0x5,%ax
f012cf33:	75 1b                	jne    f012cf50 <test_krealloc+0xe37>
f012cf35:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012cf3b:	01 c0                	add    %eax,%eax
f012cf3d:	89 c2                	mov    %eax,%edx
f012cf3f:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cf45:	01 d0                	add    %edx,%eax
f012cf47:	66 8b 00             	mov    (%eax),%ax
f012cf4a:	66 83 f8 05          	cmp    $0x5,%ax
f012cf4e:	74 17                	je     f012cf67 <test_krealloc+0xe4e>
			panic(
f012cf50:	83 ec 04             	sub    $0x4,%esp
f012cf53:	68 ac c4 13 f0       	push   $0xf013c4ac
f012cf58:	68 8d 0f 00 00       	push   $0xf8d
f012cf5d:	68 7a b1 13 f0       	push   $0xf013b17a
f012cf62:	e8 9e 32 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012cf67:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012cf6d:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012cf73:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cf79:	66 8b 00             	mov    (%eax),%ax
f012cf7c:	66 83 f8 06          	cmp    $0x6,%ax
f012cf80:	75 1b                	jne    f012cf9d <test_krealloc+0xe84>
f012cf82:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012cf88:	01 c0                	add    %eax,%eax
f012cf8a:	89 c2                	mov    %eax,%edx
f012cf8c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cf92:	01 d0                	add    %edx,%eax
f012cf94:	66 8b 00             	mov    (%eax),%ax
f012cf97:	66 83 f8 06          	cmp    $0x6,%ax
f012cf9b:	74 17                	je     f012cfb4 <test_krealloc+0xe9b>
			panic(
f012cf9d:	83 ec 04             	sub    $0x4,%esp
f012cfa0:	68 ac c4 13 f0       	push   $0xf013c4ac
f012cfa5:	68 92 0f 00 00       	push   $0xf92
f012cfaa:	68 7a b1 13 f0       	push   $0xf013b17a
f012cfaf:	e8 51 32 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012cfb4:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012cfba:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012cfc0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cfc6:	8a 00                	mov    (%eax),%al
f012cfc8:	3c 07                	cmp    $0x7,%al
f012cfca:	75 1b                	jne    f012cfe7 <test_krealloc+0xece>
f012cfcc:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cfd2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cfd9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cfdf:	01 d0                	add    %edx,%eax
f012cfe1:	8a 00                	mov    (%eax),%al
f012cfe3:	3c 07                	cmp    $0x7,%al
f012cfe5:	74 17                	je     f012cffe <test_krealloc+0xee5>
			panic(
f012cfe7:	83 ec 04             	sub    $0x4,%esp
f012cfea:	68 ac c4 13 f0       	push   $0xf013c4ac
f012cfef:	68 97 0f 00 00       	push   $0xf97
f012cff4:	68 7a b1 13 f0       	push   $0xf013b17a
f012cff9:	e8 07 32 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012cffe:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d004:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d008:	66 83 f8 07          	cmp    $0x7,%ax
f012d00c:	75 1f                	jne    f012d02d <test_krealloc+0xf14>
f012d00e:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d014:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d01b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d021:	01 d0                	add    %edx,%eax
f012d023:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d027:	66 83 f8 07          	cmp    $0x7,%ax
f012d02b:	74 17                	je     f012d044 <test_krealloc+0xf2b>
			panic(
f012d02d:	83 ec 04             	sub    $0x4,%esp
f012d030:	68 ac c4 13 f0       	push   $0xf013c4ac
f012d035:	68 9a 0f 00 00       	push   $0xf9a
f012d03a:	68 7a b1 13 f0       	push   $0xf013b17a
f012d03f:	e8 c1 31 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012d044:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d04a:	8b 40 04             	mov    0x4(%eax),%eax
f012d04d:	83 f8 07             	cmp    $0x7,%eax
f012d050:	75 1d                	jne    f012d06f <test_krealloc+0xf56>
f012d052:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d058:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d05f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d065:	01 d0                	add    %edx,%eax
f012d067:	8b 40 04             	mov    0x4(%eax),%eax
f012d06a:	83 f8 07             	cmp    $0x7,%eax
f012d06d:	74 17                	je     f012d086 <test_krealloc+0xf6d>
			panic(
f012d06f:	83 ec 04             	sub    $0x4,%esp
f012d072:	68 ac c4 13 f0       	push   $0xf013c4ac
f012d077:	68 9d 0f 00 00       	push   $0xf9d
f012d07c:	68 7a b1 13 f0       	push   $0xf013b17a
f012d081:	e8 7f 31 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012d086:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012d08c:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012d092:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d098:	8a 00                	mov    (%eax),%al
f012d09a:	3c 08                	cmp    $0x8,%al
f012d09c:	75 1b                	jne    f012d0b9 <test_krealloc+0xfa0>
f012d09e:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012d0a4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d0ab:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d0b1:	01 d0                	add    %edx,%eax
f012d0b3:	8a 00                	mov    (%eax),%al
f012d0b5:	3c 08                	cmp    $0x8,%al
f012d0b7:	74 17                	je     f012d0d0 <test_krealloc+0xfb7>
			panic(
f012d0b9:	83 ec 04             	sub    $0x4,%esp
f012d0bc:	68 ac c4 13 f0       	push   $0xf013c4ac
f012d0c1:	68 a2 0f 00 00       	push   $0xfa2
f012d0c6:	68 7a b1 13 f0       	push   $0xf013b17a
f012d0cb:	e8 35 31 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012d0d0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d0d6:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d0da:	66 83 f8 08          	cmp    $0x8,%ax
f012d0de:	75 1f                	jne    f012d0ff <test_krealloc+0xfe6>
f012d0e0:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012d0e6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d0ed:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d0f3:	01 d0                	add    %edx,%eax
f012d0f5:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d0f9:	66 83 f8 08          	cmp    $0x8,%ax
f012d0fd:	74 17                	je     f012d116 <test_krealloc+0xffd>
			panic(
f012d0ff:	83 ec 04             	sub    $0x4,%esp
f012d102:	68 ac c4 13 f0       	push   $0xf013c4ac
f012d107:	68 a5 0f 00 00       	push   $0xfa5
f012d10c:	68 7a b1 13 f0       	push   $0xf013b17a
f012d111:	e8 ef 30 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012d116:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d11c:	8b 40 04             	mov    0x4(%eax),%eax
f012d11f:	83 f8 08             	cmp    $0x8,%eax
f012d122:	75 1d                	jne    f012d141 <test_krealloc+0x1028>
f012d124:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012d12a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d131:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d137:	01 d0                	add    %edx,%eax
f012d139:	8b 40 04             	mov    0x4(%eax),%eax
f012d13c:	83 f8 08             	cmp    $0x8,%eax
f012d13f:	74 17                	je     f012d158 <test_krealloc+0x103f>
			panic(
f012d141:	83 ec 04             	sub    $0x4,%esp
f012d144:	68 ac c4 13 f0       	push   $0xf013c4ac
f012d149:	68 a8 0f 00 00       	push   $0xfa8
f012d14e:	68 7a b1 13 f0       	push   $0xf013b17a
f012d153:	e8 ad 30 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012d158:	e8 86 fc fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012d15d:	89 c2                	mov    %eax,%edx
f012d15f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d162:	39 c2                	cmp    %eax,%edx
f012d164:	74 17                	je     f012d17d <test_krealloc+0x1064>
			panic(
f012d166:	83 ec 04             	sub    $0x4,%esp
f012d169:	68 6c c5 13 f0       	push   $0xf013c56c
f012d16e:	68 ac 0f 00 00       	push   $0xfac
f012d173:	68 7a b1 13 f0       	push   $0xf013b17a
f012d178:	e8 88 30 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012d17d:	83 ec 0c             	sub    $0xc,%esp
f012d180:	68 b8 c5 13 f0       	push   $0xf013c5b8
f012d185:	e8 84 3b fd ff       	call   f0100d0e <cprintf>
f012d18a:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012d18d:	e8 51 fc fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012d192:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d195:	e8 0c 6c fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012d19a:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012d1a0:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012d1a6:	83 ec 08             	sub    $0x8,%esp
f012d1a9:	6a 00                	push   $0x0
f012d1ab:	50                   	push   %eax
f012d1ac:	e8 93 ab fd ff       	call   f0107d44 <krealloc>
f012d1b1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d1b4:	e8 ed 6b fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012d1b9:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d1bf:	74 17                	je     f012d1d8 <test_krealloc+0x10bf>
			panic(
f012d1c1:	83 ec 04             	sub    $0x4,%esp
f012d1c4:	68 dc c5 13 f0       	push   $0xf013c5dc
f012d1c9:	68 b9 0f 00 00       	push   $0xfb9
f012d1ce:	68 7a b1 13 f0       	push   $0xf013b17a
f012d1d3:	e8 2d 30 fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012d1d8:	e8 06 fc fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012d1dd:	89 c2                	mov    %eax,%edx
f012d1df:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d1e2:	29 c2                	sub    %eax,%edx
f012d1e4:	89 d0                	mov    %edx,%eax
f012d1e6:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d1eb:	74 17                	je     f012d204 <test_krealloc+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012d1ed:	83 ec 04             	sub    $0x4,%esp
f012d1f0:	68 50 c6 13 f0       	push   $0xf013c650
f012d1f5:	68 bb 0f 00 00       	push   $0xfbb
f012d1fa:	68 7a b1 13 f0       	push   $0xf013b17a
f012d1ff:	e8 01 30 fd ff       	call   f0100205 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012d204:	e8 da fb fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012d209:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d20c:	e8 95 6b fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012d211:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012d217:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d21d:	83 ec 08             	sub    $0x8,%esp
f012d220:	6a 00                	push   $0x0
f012d222:	50                   	push   %eax
f012d223:	e8 1c ab fd ff       	call   f0107d44 <krealloc>
f012d228:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d22b:	e8 76 6b fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012d230:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d236:	74 17                	je     f012d24f <test_krealloc+0x1136>
			panic(
f012d238:	83 ec 04             	sub    $0x4,%esp
f012d23b:	68 dc c5 13 f0       	push   $0xf013c5dc
f012d240:	68 c4 0f 00 00       	push   $0xfc4
f012d245:	68 7a b1 13 f0       	push   $0xf013b17a
f012d24a:	e8 b6 2f fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012d24f:	e8 8f fb fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012d254:	89 c2                	mov    %eax,%edx
f012d256:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d259:	29 c2                	sub    %eax,%edx
f012d25b:	89 d0                	mov    %edx,%eax
f012d25d:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d262:	74 17                	je     f012d27b <test_krealloc+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012d264:	83 ec 04             	sub    $0x4,%esp
f012d267:	68 50 c6 13 f0       	push   $0xf013c650
f012d26c:	68 c6 0f 00 00       	push   $0xfc6
f012d271:	68 7a b1 13 f0       	push   $0xf013b17a
f012d276:	e8 8a 2f fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012d27b:	e8 63 fb fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012d280:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d283:	e8 1e 6b fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012d288:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012d28e:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012d294:	83 ec 08             	sub    $0x8,%esp
f012d297:	6a 00                	push   $0x0
f012d299:	50                   	push   %eax
f012d29a:	e8 a5 aa fd ff       	call   f0107d44 <krealloc>
f012d29f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d2a2:	e8 ff 6a fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012d2a7:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d2ad:	74 17                	je     f012d2c6 <test_krealloc+0x11ad>
			panic(
f012d2af:	83 ec 04             	sub    $0x4,%esp
f012d2b2:	68 94 b1 13 f0       	push   $0xf013b194
f012d2b7:	68 ce 0f 00 00       	push   $0xfce
f012d2bc:	68 7a b1 13 f0       	push   $0xf013b17a
f012d2c1:	e8 3f 2f fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012d2c6:	e8 18 fb fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012d2cb:	89 c2                	mov    %eax,%edx
f012d2cd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d2d0:	29 c2                	sub    %eax,%edx
f012d2d2:	89 d0                	mov    %edx,%eax
f012d2d4:	3d 00 02 00 00       	cmp    $0x200,%eax
f012d2d9:	74 17                	je     f012d2f2 <test_krealloc+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012d2db:	83 ec 04             	sub    $0x4,%esp
f012d2de:	68 50 c6 13 f0       	push   $0xf013c650
f012d2e3:	68 d0 0f 00 00       	push   $0xfd0
f012d2e8:	68 7a b1 13 f0       	push   $0xf013b17a
f012d2ed:	e8 13 2f fd ff       	call   f0100205 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012d2f2:	e8 ec fa fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012d2f7:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d2fa:	e8 a7 6a fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012d2ff:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012d305:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012d30b:	83 ec 08             	sub    $0x8,%esp
f012d30e:	6a 00                	push   $0x0
f012d310:	50                   	push   %eax
f012d311:	e8 2e aa fd ff       	call   f0107d44 <krealloc>
f012d316:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d319:	e8 88 6a fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012d31e:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d324:	74 17                	je     f012d33d <test_krealloc+0x1224>
			panic(
f012d326:	83 ec 04             	sub    $0x4,%esp
f012d329:	68 dc c5 13 f0       	push   $0xf013c5dc
f012d32e:	68 d8 0f 00 00       	push   $0xfd8
f012d333:	68 7a b1 13 f0       	push   $0xf013b17a
f012d338:	e8 c8 2e fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012d33d:	e8 a1 fa fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012d342:	89 c2                	mov    %eax,%edx
f012d344:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d347:	29 c2                	sub    %eax,%edx
f012d349:	89 d0                	mov    %edx,%eax
f012d34b:	3d 00 03 00 00       	cmp    $0x300,%eax
f012d350:	74 17                	je     f012d369 <test_krealloc+0x1250>
			panic(
f012d352:	83 ec 04             	sub    $0x4,%esp
f012d355:	68 84 c6 13 f0       	push   $0xf013c684
f012d35a:	68 db 0f 00 00       	push   $0xfdb
f012d35f:	68 7a b1 13 f0       	push   $0xf013b17a
f012d364:	e8 9c 2e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d369:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012d370:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012d377:	eb 48                	jmp    f012d3c1 <test_krealloc+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012d379:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012d37c:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f012d381:	83 ec 04             	sub    $0x4,%esp
f012d384:	8d 8d b4 fd ff ff    	lea    -0x24c(%ebp),%ecx
f012d38a:	51                   	push   %ecx
f012d38b:	52                   	push   %edx
f012d38c:	50                   	push   %eax
f012d38d:	e8 fd 96 fd ff       	call   f0106a8f <get_page_table>
f012d392:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012d395:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
f012d39b:	85 c0                	test   %eax,%eax
f012d39d:	75 17                	jne    f012d3b6 <test_krealloc+0x129d>
					panic(
f012d39f:	83 ec 04             	sub    $0x4,%esp
f012d3a2:	68 7c ba 13 f0       	push   $0xf013ba7c
f012d3a7:	68 e7 0f 00 00       	push   $0xfe7
f012d3ac:	68 7a b1 13 f0       	push   $0xf013b17a
f012d3b1:	e8 4f 2e fd ff       	call   f0100205 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d3b6:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012d3bd:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012d3c1:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012d3c5:	78 b2                	js     f012d379 <test_krealloc+0x1260>
f012d3c7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012d3cb:	7f 09                	jg     f012d3d6 <test_krealloc+0x12bd>
f012d3cd:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012d3d4:	76 a3                	jbe    f012d379 <test_krealloc+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012d3d6:	83 ec 0c             	sub    $0xc,%esp
f012d3d9:	68 c3 c6 13 f0       	push   $0xf013c6c3
f012d3de:	e8 2b 39 fd ff       	call   f0100d0e <cprintf>
f012d3e3:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012d3e6:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d3ec:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d3f2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d3f9:	eb 21                	jmp    f012d41c <test_krealloc+0x1303>
			sums[0] += ptr[i];
f012d3fb:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d401:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012d404:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d40a:	01 c8                	add    %ecx,%eax
f012d40c:	8a 00                	mov    (%eax),%al
f012d40e:	0f be c0             	movsbl %al,%eax
f012d411:	01 d0                	add    %edx,%eax
f012d413:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d419:	ff 45 dc             	incl   -0x24(%ebp)
f012d41c:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012d422:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d425:	7d d4                	jge    f012d3fb <test_krealloc+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012d427:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012d42d:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012d433:	42                   	inc    %edx
f012d434:	01 d2                	add    %edx,%edx
f012d436:	39 d0                	cmp    %edx,%eax
f012d438:	74 17                	je     f012d451 <test_krealloc+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012d43a:	83 ec 04             	sub    $0x4,%esp
f012d43d:	68 cc c6 13 f0       	push   $0xf013c6cc
f012d442:	68 f9 0f 00 00       	push   $0xff9
f012d447:	68 7a b1 13 f0       	push   $0xf013b17a
f012d44c:	e8 b4 2d fd ff       	call   f0100205 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012d451:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012d457:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012d45d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d464:	eb 25                	jmp    f012d48b <test_krealloc+0x1372>
			sums[1] += intArr[i];
f012d466:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012d46c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d46f:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012d476:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d47c:	01 c8                	add    %ecx,%eax
f012d47e:	8b 00                	mov    (%eax),%eax
f012d480:	01 d0                	add    %edx,%eax
f012d482:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012d488:	ff 45 dc             	incl   -0x24(%ebp)
f012d48b:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012d491:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d494:	7d d0                	jge    f012d466 <test_krealloc+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012d496:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f012d49c:	8b 95 14 fe ff ff    	mov    -0x1ec(%ebp),%edx
f012d4a2:	42                   	inc    %edx
f012d4a3:	c1 e2 02             	shl    $0x2,%edx
f012d4a6:	39 d0                	cmp    %edx,%eax
f012d4a8:	74 17                	je     f012d4c1 <test_krealloc+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012d4aa:	83 ec 04             	sub    $0x4,%esp
f012d4ad:	68 cc c6 13 f0       	push   $0xf013c6cc
f012d4b2:	68 03 10 00 00       	push   $0x1003
f012d4b7:	68 7a b1 13 f0       	push   $0xf013b17a
f012d4bc:	e8 44 2d fd ff       	call   f0100205 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012d4c1:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d4c7:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012d4cd:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d4d4:	eb 24                	jmp    f012d4fa <test_krealloc+0x13e1>
			sums[2] += shortArr[i];
f012d4d6:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012d4dc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d4df:	01 c0                	add    %eax,%eax
f012d4e1:	89 c1                	mov    %eax,%ecx
f012d4e3:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d4e9:	01 c8                	add    %ecx,%eax
f012d4eb:	66 8b 00             	mov    (%eax),%ax
f012d4ee:	98                   	cwtl   
f012d4ef:	01 d0                	add    %edx,%eax
f012d4f1:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012d4f7:	ff 45 dc             	incl   -0x24(%ebp)
f012d4fa:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d500:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d503:	7d d1                	jge    f012d4d6 <test_krealloc+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012d505:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012d50b:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d511:	8d 48 01             	lea    0x1(%eax),%ecx
f012d514:	89 c8                	mov    %ecx,%eax
f012d516:	c1 e0 02             	shl    $0x2,%eax
f012d519:	01 c8                	add    %ecx,%eax
f012d51b:	39 c2                	cmp    %eax,%edx
f012d51d:	74 17                	je     f012d536 <test_krealloc+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012d51f:	83 ec 04             	sub    $0x4,%esp
f012d522:	68 cc c6 13 f0       	push   $0xf013c6cc
f012d527:	68 0d 10 00 00       	push   $0x100d
f012d52c:	68 7a b1 13 f0       	push   $0xf013b17a
f012d531:	e8 cf 2c fd ff       	call   f0100205 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012d536:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d53c:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012d542:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d549:	eb 70                	jmp    f012d5bb <test_krealloc+0x14a2>
			sums[3] += structArr[i].a;
f012d54b:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012d551:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d554:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d55b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d561:	01 c8                	add    %ecx,%eax
f012d563:	8a 00                	mov    (%eax),%al
f012d565:	0f be c0             	movsbl %al,%eax
f012d568:	01 d0                	add    %edx,%eax
f012d56a:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
			sums[4] += structArr[i].b;
f012d570:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012d576:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d579:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d580:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d586:	01 c8                	add    %ecx,%eax
f012d588:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d58c:	98                   	cwtl   
f012d58d:	01 d0                	add    %edx,%eax
f012d58f:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
			sums[5] += structArr[i].c;
f012d595:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f012d59b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d59e:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d5a5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d5ab:	01 c8                	add    %ecx,%eax
f012d5ad:	8b 40 04             	mov    0x4(%eax),%eax
f012d5b0:	01 d0                	add    %edx,%eax
f012d5b2:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012d5b8:	ff 45 dc             	incl   -0x24(%ebp)
f012d5bb:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d5c1:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d5c4:	7d 85                	jge    f012d54b <test_krealloc+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012d5c6:	8b 8d c4 fd ff ff    	mov    -0x23c(%ebp),%ecx
f012d5cc:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d5d2:	8d 50 01             	lea    0x1(%eax),%edx
f012d5d5:	89 d0                	mov    %edx,%eax
f012d5d7:	01 c0                	add    %eax,%eax
f012d5d9:	01 d0                	add    %edx,%eax
f012d5db:	01 c0                	add    %eax,%eax
f012d5dd:	01 d0                	add    %edx,%eax
f012d5df:	39 c1                	cmp    %eax,%ecx
f012d5e1:	75 3a                	jne    f012d61d <test_krealloc+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012d5e3:	8b 8d c8 fd ff ff    	mov    -0x238(%ebp),%ecx
f012d5e9:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d5ef:	8d 50 01             	lea    0x1(%eax),%edx
f012d5f2:	89 d0                	mov    %edx,%eax
f012d5f4:	01 c0                	add    %eax,%eax
f012d5f6:	01 d0                	add    %edx,%eax
f012d5f8:	01 c0                	add    %eax,%eax
f012d5fa:	01 d0                	add    %edx,%eax
f012d5fc:	39 c1                	cmp    %eax,%ecx
f012d5fe:	75 1d                	jne    f012d61d <test_krealloc+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012d600:	8b 8d cc fd ff ff    	mov    -0x234(%ebp),%ecx
f012d606:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d60c:	8d 50 01             	lea    0x1(%eax),%edx
f012d60f:	89 d0                	mov    %edx,%eax
f012d611:	01 c0                	add    %eax,%eax
f012d613:	01 d0                	add    %edx,%eax
f012d615:	01 c0                	add    %eax,%eax
f012d617:	01 d0                	add    %edx,%eax
f012d619:	39 c1                	cmp    %eax,%ecx
f012d61b:	74 17                	je     f012d634 <test_krealloc+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012d61d:	83 ec 04             	sub    $0x4,%esp
f012d620:	68 cc c6 13 f0       	push   $0xf013c6cc
f012d625:	68 1b 10 00 00       	push   $0x101b
f012d62a:	68 7a b1 13 f0       	push   $0xf013b17a
f012d62f:	e8 d1 2b fd ff       	call   f0100205 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012d634:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012d63b:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012d63e:	e8 a0 f7 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012d643:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012d646:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d64c:	83 ec 08             	sub    $0x8,%esp
f012d64f:	68 00 3c 00 00       	push   $0x3c00
f012d654:	50                   	push   %eax
f012d655:	e8 ea a6 fd ff       	call   f0107d44 <krealloc>
f012d65a:	83 c4 10             	add    $0x10,%esp
f012d65d:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d663:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012d669:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d66e:	77 17                	ja     f012d687 <test_krealloc+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d670:	83 ec 04             	sub    $0x4,%esp
f012d673:	68 20 c4 13 f0       	push   $0xf013c420
f012d678:	68 27 10 00 00       	push   $0x1027
f012d67d:	68 7a b1 13 f0       	push   $0xf013b17a
f012d682:	e8 7e 2b fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012d687:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d68d:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012d693:	74 17                	je     f012d6ac <test_krealloc+0x1593>
			panic(
f012d695:	83 ec 04             	sub    $0x4,%esp
f012d698:	68 04 c7 13 f0       	push   $0xf013c704
f012d69d:	68 2a 10 00 00       	push   $0x102a
f012d6a2:	68 7a b1 13 f0       	push   $0xf013b17a
f012d6a7:	e8 59 2b fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d6ac:	e8 32 f7 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012d6b1:	89 c2                	mov    %eax,%edx
f012d6b3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d6b6:	39 c2                	cmp    %eax,%edx
f012d6b8:	74 17                	je     f012d6d1 <test_krealloc+0x15b8>
			panic(
f012d6ba:	83 ec 04             	sub    $0x4,%esp
f012d6bd:	68 70 c7 13 f0       	push   $0xf013c770
f012d6c2:	68 2d 10 00 00       	push   $0x102d
f012d6c7:	68 7a b1 13 f0       	push   $0xf013b17a
f012d6cc:	e8 34 2b fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012d6d1:	e8 0d f7 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012d6d6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012d6d9:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d6df:	83 ec 08             	sub    $0x8,%esp
f012d6e2:	68 00 fc 0f 00       	push   $0xffc00
f012d6e7:	50                   	push   %eax
f012d6e8:	e8 57 a6 fd ff       	call   f0107d44 <krealloc>
f012d6ed:	83 c4 10             	add    $0x10,%esp
f012d6f0:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d6f6:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012d6fc:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d701:	77 17                	ja     f012d71a <test_krealloc+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d703:	83 ec 04             	sub    $0x4,%esp
f012d706:	68 20 c4 13 f0       	push   $0xf013c420
f012d70b:	68 33 10 00 00       	push   $0x1033
f012d710:	68 7a b1 13 f0       	push   $0xf013b17a
f012d715:	e8 eb 2a fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012d71a:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d720:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012d726:	74 17                	je     f012d73f <test_krealloc+0x1626>
			panic(
f012d728:	83 ec 04             	sub    $0x4,%esp
f012d72b:	68 04 c7 13 f0       	push   $0xf013c704
f012d730:	68 36 10 00 00       	push   $0x1036
f012d735:	68 7a b1 13 f0       	push   $0xf013b17a
f012d73a:	e8 c6 2a fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d73f:	e8 9f f6 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012d744:	89 c2                	mov    %eax,%edx
f012d746:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d749:	39 c2                	cmp    %eax,%edx
f012d74b:	74 17                	je     f012d764 <test_krealloc+0x164b>
			panic(
f012d74d:	83 ec 04             	sub    $0x4,%esp
f012d750:	68 70 c7 13 f0       	push   $0xf013c770
f012d755:	68 39 10 00 00       	push   $0x1039
f012d75a:	68 7a b1 13 f0       	push   $0xf013b17a
f012d75f:	e8 a1 2a fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012d764:	e8 7a f6 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012d769:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012d76c:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d772:	83 ec 08             	sub    $0x8,%esp
f012d775:	68 00 fc 0f 00       	push   $0xffc00
f012d77a:	50                   	push   %eax
f012d77b:	e8 c4 a5 fd ff       	call   f0107d44 <krealloc>
f012d780:	83 c4 10             	add    $0x10,%esp
f012d783:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d789:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012d78f:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d794:	77 17                	ja     f012d7ad <test_krealloc+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d796:	83 ec 04             	sub    $0x4,%esp
f012d799:	68 20 c4 13 f0       	push   $0xf013c420
f012d79e:	68 3f 10 00 00       	push   $0x103f
f012d7a3:	68 7a b1 13 f0       	push   $0xf013b17a
f012d7a8:	e8 58 2a fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012d7ad:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d7b3:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012d7b9:	74 17                	je     f012d7d2 <test_krealloc+0x16b9>
			panic(
f012d7bb:	83 ec 04             	sub    $0x4,%esp
f012d7be:	68 04 c7 13 f0       	push   $0xf013c704
f012d7c3:	68 42 10 00 00       	push   $0x1042
f012d7c8:	68 7a b1 13 f0       	push   $0xf013b17a
f012d7cd:	e8 33 2a fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d7d2:	e8 0c f6 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012d7d7:	89 c2                	mov    %eax,%edx
f012d7d9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d7dc:	39 c2                	cmp    %eax,%edx
f012d7de:	74 17                	je     f012d7f7 <test_krealloc+0x16de>
			panic(
f012d7e0:	83 ec 04             	sub    $0x4,%esp
f012d7e3:	68 70 c7 13 f0       	push   $0xf013c770
f012d7e8:	68 45 10 00 00       	push   $0x1045
f012d7ed:	68 7a b1 13 f0       	push   $0xf013b17a
f012d7f2:	e8 0e 2a fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012d7f7:	e8 e7 f5 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012d7fc:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012d7ff:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012d805:	83 ec 08             	sub    $0x8,%esp
f012d808:	68 00 fc 0f 00       	push   $0xffc00
f012d80d:	50                   	push   %eax
f012d80e:	e8 31 a5 fd ff       	call   f0107d44 <krealloc>
f012d813:	83 c4 10             	add    $0x10,%esp
f012d816:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d81c:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012d822:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d827:	77 17                	ja     f012d840 <test_krealloc+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d829:	83 ec 04             	sub    $0x4,%esp
f012d82c:	68 20 c4 13 f0       	push   $0xf013c420
f012d831:	68 4d 10 00 00       	push   $0x104d
f012d836:	68 7a b1 13 f0       	push   $0xf013b17a
f012d83b:	e8 c5 29 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[3])
f012d840:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012d846:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012d84c:	74 17                	je     f012d865 <test_krealloc+0x174c>
			panic(
f012d84e:	83 ec 04             	sub    $0x4,%esp
f012d851:	68 b4 c7 13 f0       	push   $0xf013c7b4
f012d856:	68 50 10 00 00       	push   $0x1050
f012d85b:	68 7a b1 13 f0       	push   $0xf013b17a
f012d860:	e8 a0 29 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d865:	e8 79 f5 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012d86a:	89 c2                	mov    %eax,%edx
f012d86c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d86f:	39 c2                	cmp    %eax,%edx
f012d871:	74 17                	je     f012d88a <test_krealloc+0x1771>
			panic(
f012d873:	83 ec 04             	sub    $0x4,%esp
f012d876:	68 70 c7 13 f0       	push   $0xf013c770
f012d87b:	68 53 10 00 00       	push   $0x1053
f012d880:	68 7a b1 13 f0       	push   $0xf013b17a
f012d885:	e8 7b 29 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012d88a:	83 ec 0c             	sub    $0xc,%esp
f012d88d:	68 93 b9 13 f0       	push   $0xf013b993
f012d892:	e8 77 34 fd ff       	call   f0100d0e <cprintf>
f012d897:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012d89a:	e8 44 f5 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012d89f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1],
f012d8a2:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d8a8:	83 ec 08             	sub    $0x8,%esp
f012d8ab:	68 00 18 10 00       	push   $0x101800
f012d8b0:	50                   	push   %eax
f012d8b1:	e8 8e a4 fd ff       	call   f0107d44 <krealloc>
f012d8b6:	83 c4 10             	add    $0x10,%esp
f012d8b9:	89 45 bc             	mov    %eax,-0x44(%ebp)
				(1 * Mega - kilo) + (7 * kilo));
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d8bc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d8bf:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d8c4:	77 17                	ja     f012d8dd <test_krealloc+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d8c6:	83 ec 04             	sub    $0x4,%esp
f012d8c9:	68 20 c4 13 f0       	push   $0xf013c420
f012d8ce:	68 5c 10 00 00       	push   $0x105c
f012d8d3:	68 7a b1 13 f0       	push   $0xf013b17a
f012d8d8:	e8 28 29 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012d8dd:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d8e3:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d8e6:	74 17                	je     f012d8ff <test_krealloc+0x17e6>
			panic(
f012d8e8:	83 ec 04             	sub    $0x4,%esp
f012d8eb:	68 14 c8 13 f0       	push   $0xf013c814
f012d8f0:	68 5f 10 00 00       	push   $0x105f
f012d8f5:	68 7a b1 13 f0       	push   $0xf013b17a
f012d8fa:	e8 06 29 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012d8ff:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d902:	e8 dc f4 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012d907:	29 c3                	sub    %eax,%ebx
f012d909:	89 d8                	mov    %ebx,%eax
f012d90b:	83 f8 02             	cmp    $0x2,%eax
f012d90e:	74 17                	je     f012d927 <test_krealloc+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012d910:	83 ec 04             	sub    $0x4,%esp
f012d913:	68 90 c8 13 f0       	push   $0xf013c890
f012d918:	68 61 10 00 00       	push   $0x1061
f012d91d:	68 7a b1 13 f0       	push   $0xf013b17a
f012d922:	e8 de 28 fd ff       	call   f0100205 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012d927:	e8 b7 f4 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012d92c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012d92f:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d935:	83 ec 08             	sub    $0x8,%esp
f012d938:	68 00 fc 3f 00       	push   $0x3ffc00
f012d93d:	50                   	push   %eax
f012d93e:	e8 01 a4 fd ff       	call   f0107d44 <krealloc>
f012d943:	83 c4 10             	add    $0x10,%esp
f012d946:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d949:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d94c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d951:	77 17                	ja     f012d96a <test_krealloc+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d953:	83 ec 04             	sub    $0x4,%esp
f012d956:	68 20 c4 13 f0       	push   $0xf013c420
f012d95b:	68 67 10 00 00       	push   $0x1067
f012d960:	68 7a b1 13 f0       	push   $0xf013b17a
f012d965:	e8 9b 28 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012d96a:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d970:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d973:	74 17                	je     f012d98c <test_krealloc+0x1873>
			panic(
f012d975:	83 ec 04             	sub    $0x4,%esp
f012d978:	68 14 c8 13 f0       	push   $0xf013c814
f012d97d:	68 6a 10 00 00       	push   $0x106a
f012d982:	68 7a b1 13 f0       	push   $0xf013b17a
f012d987:	e8 79 28 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012d98c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d98f:	e8 4f f4 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012d994:	29 c3                	sub    %eax,%ebx
f012d996:	89 d8                	mov    %ebx,%eax
f012d998:	3d 00 02 00 00       	cmp    $0x200,%eax
f012d99d:	74 17                	je     f012d9b6 <test_krealloc+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012d99f:	83 ec 04             	sub    $0x4,%esp
f012d9a2:	68 90 c8 13 f0       	push   $0xf013c890
f012d9a7:	68 6d 10 00 00       	push   $0x106d
f012d9ac:	68 7a b1 13 f0       	push   $0xf013b17a
f012d9b1:	e8 4f 28 fd ff       	call   f0100205 <_panic>


	}
	cprintf("\b\b\b60%");
f012d9b6:	83 ec 0c             	sub    $0xc,%esp
f012d9b9:	68 d8 b9 13 f0       	push   $0xf013b9d8
f012d9be:	e8 4b 33 fd ff       	call   f0100d0e <cprintf>
f012d9c3:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012d9c6:	e8 18 f4 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012d9cb:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012d9ce:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d9d4:	83 ec 08             	sub    $0x8,%esp
f012d9d7:	68 00 fc 9f 00       	push   $0x9ffc00
f012d9dc:	50                   	push   %eax
f012d9dd:	e8 62 a3 fd ff       	call   f0107d44 <krealloc>
f012d9e2:	83 c4 10             	add    $0x10,%esp
f012d9e5:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d9e8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d9eb:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d9f0:	77 17                	ja     f012da09 <test_krealloc+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d9f2:	83 ec 04             	sub    $0x4,%esp
f012d9f5:	68 20 c4 13 f0       	push   $0xf013c420
f012d9fa:	68 78 10 00 00       	push   $0x1078
f012d9ff:	68 7a b1 13 f0       	push   $0xf013b17a
f012da04:	e8 fc 27 fd ff       	call   f0100205 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (14 * Mega))
f012da09:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012da10:	10 00 00 
f012da13:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012da19:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012da1e:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012da24:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012da2a:	ba 00 00 00 00       	mov    $0x0,%edx
f012da2f:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012da35:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012da3b:	29 d0                	sub    %edx,%eax
f012da3d:	89 c1                	mov    %eax,%ecx
f012da3f:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012da46:	10 00 00 
f012da49:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012da4e:	0f b6 d0             	movzbl %al,%edx
f012da51:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012da57:	01 d0                	add    %edx,%eax
f012da59:	48                   	dec    %eax
f012da5a:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012da60:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012da66:	ba 00 00 00 00       	mov    $0x0,%edx
f012da6b:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012da71:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012da77:	29 d0                	sub    %edx,%eax
f012da79:	01 c1                	add    %eax,%ecx
f012da7b:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012da82:	10 00 00 
f012da85:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012da8a:	0f b6 c0             	movzbl %al,%eax
f012da8d:	c1 e0 04             	shl    $0x4,%eax
f012da90:	89 c2                	mov    %eax,%edx
f012da92:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012da98:	01 d0                	add    %edx,%eax
f012da9a:	48                   	dec    %eax
f012da9b:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012daa1:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012daa7:	ba 00 00 00 00       	mov    $0x0,%edx
f012daac:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012dab2:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012dab8:	29 d0                	sub    %edx,%eax
f012daba:	01 c8                	add    %ecx,%eax
f012dabc:	8d 90 00 40 e0 f6    	lea    -0x91fc000(%eax),%edx
f012dac2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012dac5:	39 c2                	cmp    %eax,%edx
f012dac7:	74 18                	je     f012dae1 <test_krealloc+0x19c8>
			panic(
f012dac9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012dacc:	50                   	push   %eax
f012dacd:	68 c4 c8 13 f0       	push   $0xf013c8c4
f012dad2:	68 7c 10 00 00       	push   $0x107c
f012dad7:	68 7a b1 13 f0       	push   $0xf013b17a
f012dadc:	e8 24 27 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012dae1:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012dae7:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012daea:	75 17                	jne    f012db03 <test_krealloc+0x19ea>
			panic(
f012daec:	83 ec 04             	sub    $0x4,%esp
f012daef:	68 08 c9 13 f0       	push   $0xf013c908
f012daf4:	68 7f 10 00 00       	push   $0x107f
f012daf9:	68 7a b1 13 f0       	push   $0xf013b17a
f012dafe:	e8 02 27 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012db03:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012db06:	e8 d8 f2 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012db0b:	29 c3                	sub    %eax,%ebx
f012db0d:	89 d8                	mov    %ebx,%eax
f012db0f:	3d 00 06 00 00       	cmp    $0x600,%eax
f012db14:	74 17                	je     f012db2d <test_krealloc+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012db16:	83 ec 04             	sub    $0x4,%esp
f012db19:	68 90 c8 13 f0       	push   $0xf013c890
f012db1e:	68 82 10 00 00       	push   $0x1082
f012db23:	68 7a b1 13 f0       	push   $0xf013b17a
f012db28:	e8 d8 26 fd ff       	call   f0100205 <_panic>

		ptr_allocations[4] = newAddress;
f012db2d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012db30:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 6 MB
		freeFrames = sys_calculate_free_frames();
f012db36:	e8 a8 f2 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012db3b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (6 * Mega - kilo));
f012db3e:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012db44:	83 ec 08             	sub    $0x8,%esp
f012db47:	68 00 fc 5f 00       	push   $0x5ffc00
f012db4c:	50                   	push   %eax
f012db4d:	e8 f2 a1 fd ff       	call   f0107d44 <krealloc>
f012db52:	83 c4 10             	add    $0x10,%esp
f012db55:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012db58:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012db5b:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012db60:	77 17                	ja     f012db79 <test_krealloc+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012db62:	83 ec 04             	sub    $0x4,%esp
f012db65:	68 20 c4 13 f0       	push   $0xf013c420
f012db6a:	68 8b 10 00 00       	push   $0x108b
f012db6f:	68 7a b1 13 f0       	push   $0xf013b17a
f012db74:	e8 8c 26 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[6])
f012db79:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012db7f:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012db82:	74 17                	je     f012db9b <test_krealloc+0x1a82>
			panic(
f012db84:	83 ec 04             	sub    $0x4,%esp
f012db87:	68 14 c8 13 f0       	push   $0xf013c814
f012db8c:	68 8e 10 00 00       	push   $0x108e
f012db91:	68 7a b1 13 f0       	push   $0xf013b17a
f012db96:	e8 6a 26 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 768)
f012db9b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012db9e:	e8 40 f2 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012dba3:	29 c3                	sub    %eax,%ebx
f012dba5:	89 d8                	mov    %ebx,%eax
f012dba7:	3d 00 03 00 00       	cmp    $0x300,%eax
f012dbac:	74 17                	je     f012dbc5 <test_krealloc+0x1aac>
			panic("krealloc: pages in memory are not loaded correctly");
f012dbae:	83 ec 04             	sub    $0x4,%esp
f012dbb1:	68 90 c8 13 f0       	push   $0xf013c890
f012dbb6:	68 91 10 00 00       	push   $0x1091
f012dbbb:	68 7a b1 13 f0       	push   $0xf013b17a
f012dbc0:	e8 40 26 fd ff       	call   f0100205 <_panic>

		//Reallocate 1st 3 MB (already reallocated to 6 MB) to 20 MB. It should return new VA

		freeFrames = sys_calculate_free_frames();
f012dbc5:	e8 19 f2 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012dbca:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012dbcd:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012dbd3:	83 ec 08             	sub    $0x8,%esp
f012dbd6:	68 00 fc 3f 01       	push   $0x13ffc00
f012dbdb:	50                   	push   %eax
f012dbdc:	e8 63 a1 fd ff       	call   f0107d44 <krealloc>
f012dbe1:	83 c4 10             	add    $0x10,%esp
f012dbe4:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012dbe7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012dbea:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012dbef:	77 17                	ja     f012dc08 <test_krealloc+0x1aef>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dbf1:	83 ec 04             	sub    $0x4,%esp
f012dbf4:	68 20 c4 13 f0       	push   $0xf013c420
f012dbf9:	68 98 10 00 00       	push   $0x1098
f012dbfe:	68 7a b1 13 f0       	push   $0xf013b17a
f012dc03:	e8 fd 25 fd ff       	call   f0100205 <_panic>
		if (newAddress == ptr_allocations[6])
f012dc08:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012dc0e:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012dc11:	75 17                	jne    f012dc2a <test_krealloc+0x1b11>
			panic(
f012dc13:	83 ec 04             	sub    $0x4,%esp
f012dc16:	68 08 c9 13 f0       	push   $0xf013c908
f012dc1b:	68 9b 10 00 00       	push   $0x109b
f012dc20:	68 7a b1 13 f0       	push   $0xf013b17a
f012dc25:	e8 db 25 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		if ((uint32) newAddress != ACTUAL_START + (24 * Mega))
f012dc2a:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012dc31:	10 00 00 
f012dc34:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012dc3a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012dc3f:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012dc45:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012dc4b:	ba 00 00 00 00       	mov    $0x0,%edx
f012dc50:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012dc56:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012dc5c:	29 d0                	sub    %edx,%eax
f012dc5e:	89 c1                	mov    %eax,%ecx
f012dc60:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012dc67:	10 00 00 
f012dc6a:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012dc6f:	0f b6 d0             	movzbl %al,%edx
f012dc72:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012dc78:	01 d0                	add    %edx,%eax
f012dc7a:	48                   	dec    %eax
f012dc7b:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012dc81:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012dc87:	ba 00 00 00 00       	mov    $0x0,%edx
f012dc8c:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012dc92:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012dc98:	29 d0                	sub    %edx,%eax
f012dc9a:	01 c1                	add    %eax,%ecx
f012dc9c:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012dca3:	10 00 00 
f012dca6:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012dcab:	0f b6 c0             	movzbl %al,%eax
f012dcae:	c1 e0 04             	shl    $0x4,%eax
f012dcb1:	89 c2                	mov    %eax,%edx
f012dcb3:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012dcb9:	01 d0                	add    %edx,%eax
f012dcbb:	48                   	dec    %eax
f012dcbc:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012dcc2:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012dcc8:	ba 00 00 00 00       	mov    $0x0,%edx
f012dccd:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012dcd3:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012dcd9:	29 d0                	sub    %edx,%eax
f012dcdb:	01 c8                	add    %ecx,%eax
f012dcdd:	8d 90 00 40 80 f7    	lea    -0x87fc000(%eax),%edx
f012dce3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012dce6:	39 c2                	cmp    %eax,%edx
f012dce8:	74 17                	je     f012dd01 <test_krealloc+0x1be8>
			panic("krealloc: Wrong start address for reallocated space");
f012dcea:	83 ec 04             	sub    $0x4,%esp
f012dced:	68 8c c9 13 f0       	push   $0xf013c98c
f012dcf2:	68 9d 10 00 00       	push   $0x109d
f012dcf7:	68 7a b1 13 f0       	push   $0xf013b17a
f012dcfc:	e8 04 25 fd ff       	call   f0100205 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 3584)
f012dd01:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012dd04:	e8 da f0 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012dd09:	29 c3                	sub    %eax,%ebx
f012dd0b:	89 d8                	mov    %ebx,%eax
f012dd0d:	3d 00 0e 00 00       	cmp    $0xe00,%eax
f012dd12:	74 17                	je     f012dd2b <test_krealloc+0x1c12>
			panic("krealloc: pages in memory are not loaded correctly");
f012dd14:	83 ec 04             	sub    $0x4,%esp
f012dd17:	68 90 c8 13 f0       	push   $0xf013c890
f012dd1c:	68 a0 10 00 00       	push   $0x10a0
f012dd21:	68 7a b1 13 f0       	push   $0xf013b17a
f012dd26:	e8 da 24 fd ff       	call   f0100205 <_panic>

		ptr_allocations[6] = newAddress;
f012dd2b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012dd2e:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012dd34:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012dd3a:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012dd40:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012dd47:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012dd4a:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012dd51:	eb 21                	jmp    f012dd74 <test_krealloc+0x1c5b>
			sums[0] += ptr[i];
f012dd53:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012dd59:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012dd5c:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012dd62:	01 c8                	add    %ecx,%eax
f012dd64:	8a 00                	mov    (%eax),%al
f012dd66:	0f be c0             	movsbl %al,%eax
f012dd69:	01 d0                	add    %edx,%eax
f012dd6b:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012dd71:	ff 45 d8             	incl   -0x28(%ebp)
f012dd74:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012dd7a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012dd7d:	7d d4                	jge    f012dd53 <test_krealloc+0x1c3a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012dd7f:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012dd85:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012dd8b:	42                   	inc    %edx
f012dd8c:	01 d2                	add    %edx,%edx
f012dd8e:	39 d0                	cmp    %edx,%eax
f012dd90:	74 17                	je     f012dda9 <test_krealloc+0x1c90>
			panic("krealloc: invalid read after re-allocations");
f012dd92:	83 ec 04             	sub    $0x4,%esp
f012dd95:	68 c0 c9 13 f0       	push   $0xf013c9c0
f012dd9a:	68 ae 10 00 00       	push   $0x10ae
f012dd9f:	68 7a b1 13 f0       	push   $0xf013b17a
f012dda4:	e8 5c 24 fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012dda9:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012ddaf:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012ddb5:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012ddbc:	00 00 00 
		sums[1] = 0;
f012ddbf:	c7 85 bc fd ff ff 00 	movl   $0x0,-0x244(%ebp)
f012ddc6:	00 00 00 
		sums[2] = 0;
f012ddc9:	c7 85 c0 fd ff ff 00 	movl   $0x0,-0x240(%ebp)
f012ddd0:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012ddd3:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012ddda:	eb 70                	jmp    f012de4c <test_krealloc+0x1d33>
			sums[0] += structArr[i].a;
f012dddc:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012dde2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012dde5:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012ddec:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ddf2:	01 c8                	add    %ecx,%eax
f012ddf4:	8a 00                	mov    (%eax),%al
f012ddf6:	0f be c0             	movsbl %al,%eax
f012ddf9:	01 d0                	add    %edx,%eax
f012ddfb:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
			sums[1] += structArr[i].b;
f012de01:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012de07:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012de0a:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012de11:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012de17:	01 c8                	add    %ecx,%eax
f012de19:	66 8b 40 02          	mov    0x2(%eax),%ax
f012de1d:	98                   	cwtl   
f012de1e:	01 d0                	add    %edx,%eax
f012de20:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
			sums[2] += structArr[i].c;
f012de26:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012de2c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012de2f:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012de36:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012de3c:	01 c8                	add    %ecx,%eax
f012de3e:	8b 40 04             	mov    0x4(%eax),%eax
f012de41:	01 d0                	add    %edx,%eax
f012de43:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012de49:	ff 45 d8             	incl   -0x28(%ebp)
f012de4c:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012de52:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012de55:	7d 85                	jge    f012dddc <test_krealloc+0x1cc3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012de57:	8b 8d b8 fd ff ff    	mov    -0x248(%ebp),%ecx
f012de5d:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012de63:	8d 50 01             	lea    0x1(%eax),%edx
f012de66:	89 d0                	mov    %edx,%eax
f012de68:	01 c0                	add    %eax,%eax
f012de6a:	01 d0                	add    %edx,%eax
f012de6c:	01 c0                	add    %eax,%eax
f012de6e:	01 d0                	add    %edx,%eax
f012de70:	39 c1                	cmp    %eax,%ecx
f012de72:	75 3a                	jne    f012deae <test_krealloc+0x1d95>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012de74:	8b 8d bc fd ff ff    	mov    -0x244(%ebp),%ecx
f012de7a:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012de80:	8d 50 01             	lea    0x1(%eax),%edx
f012de83:	89 d0                	mov    %edx,%eax
f012de85:	01 c0                	add    %eax,%eax
f012de87:	01 d0                	add    %edx,%eax
f012de89:	01 c0                	add    %eax,%eax
f012de8b:	01 d0                	add    %edx,%eax
f012de8d:	39 c1                	cmp    %eax,%ecx
f012de8f:	75 1d                	jne    f012deae <test_krealloc+0x1d95>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012de91:	8b 8d c0 fd ff ff    	mov    -0x240(%ebp),%ecx
f012de97:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012de9d:	8d 50 01             	lea    0x1(%eax),%edx
f012dea0:	89 d0                	mov    %edx,%eax
f012dea2:	01 c0                	add    %eax,%eax
f012dea4:	01 d0                	add    %edx,%eax
f012dea6:	01 c0                	add    %eax,%eax
f012dea8:	01 d0                	add    %edx,%eax
f012deaa:	39 c1                	cmp    %eax,%ecx
f012deac:	74 17                	je     f012dec5 <test_krealloc+0x1dac>
			panic("krealloc: invalid read after re-allocations");
f012deae:	83 ec 04             	sub    $0x4,%esp
f012deb1:	68 c0 c9 13 f0       	push   $0xf013c9c0
f012deb6:	68 c0 10 00 00       	push   $0x10c0
f012debb:	68 7a b1 13 f0       	push   $0xf013b17a
f012dec0:	e8 40 23 fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012dec5:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012decb:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012ded1:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012ded8:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012dedb:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012dee2:	eb 24                	jmp    f012df08 <test_krealloc+0x1def>
			sums[0] += shortArr[i];
f012dee4:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012deea:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012deed:	01 c0                	add    %eax,%eax
f012deef:	89 c1                	mov    %eax,%ecx
f012def1:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012def7:	01 c8                	add    %ecx,%eax
f012def9:	66 8b 00             	mov    (%eax),%ax
f012defc:	98                   	cwtl   
f012defd:	01 d0                	add    %edx,%eax
f012deff:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012df05:	ff 45 d8             	incl   -0x28(%ebp)
f012df08:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012df0e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012df11:	7d d1                	jge    f012dee4 <test_krealloc+0x1dcb>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012df13:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012df19:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012df1f:	8d 48 01             	lea    0x1(%eax),%ecx
f012df22:	89 c8                	mov    %ecx,%eax
f012df24:	c1 e0 02             	shl    $0x2,%eax
f012df27:	01 c8                	add    %ecx,%eax
f012df29:	39 c2                	cmp    %eax,%edx
f012df2b:	74 17                	je     f012df44 <test_krealloc+0x1e2b>
			panic("krealloc: invalid read after re-allocations");
f012df2d:	83 ec 04             	sub    $0x4,%esp
f012df30:	68 c0 c9 13 f0       	push   $0xf013c9c0
f012df35:	68 ca 10 00 00       	push   $0x10ca
f012df3a:	68 7a b1 13 f0       	push   $0xf013b17a
f012df3f:	e8 c1 22 fd ff       	call   f0100205 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012df44:	e8 9a ee fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012df49:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012df4c:	e8 55 5e fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012df51:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f012df57:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012df5d:	83 ec 08             	sub    $0x8,%esp
f012df60:	6a 00                	push   $0x0
f012df62:	50                   	push   %eax
f012df63:	e8 dc 9d fd ff       	call   f0107d44 <krealloc>
f012df68:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012df6b:	e8 36 5e fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012df70:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012df76:	74 17                	je     f012df8f <test_krealloc+0x1e76>
			panic(
f012df78:	83 ec 04             	sub    $0x4,%esp
f012df7b:	68 94 b1 13 f0       	push   $0xf013b194
f012df80:	68 d2 10 00 00       	push   $0x10d2
f012df85:	68 7a b1 13 f0       	push   $0xf013b17a
f012df8a:	e8 76 22 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012df8f:	e8 4f ee fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012df94:	89 c2                	mov    %eax,%edx
f012df96:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012df99:	29 c2                	sub    %eax,%edx
f012df9b:	89 d0                	mov    %edx,%eax
f012df9d:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012dfa2:	74 17                	je     f012dfbb <test_krealloc+0x1ea2>
			panic("krealloc: pages in memory are not freed correctly");
f012dfa4:	83 ec 04             	sub    $0x4,%esp
f012dfa7:	68 50 c6 13 f0       	push   $0xf013c650
f012dfac:	68 d4 10 00 00       	push   $0x10d4
f012dfb1:	68 7a b1 13 f0       	push   $0xf013b17a
f012dfb6:	e8 4a 22 fd ff       	call   f0100205 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012dfbb:	e8 23 ee fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012dfc0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012dfc3:	e8 de 5d fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012dfc8:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f012dfce:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012dfd4:	83 ec 0c             	sub    $0xc,%esp
f012dfd7:	50                   	push   %eax
f012dfd8:	e8 9a 9b fd ff       	call   f0107b77 <kfree>
f012dfdd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012dfe0:	e8 c1 5d fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012dfe5:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012dfeb:	74 17                	je     f012e004 <test_krealloc+0x1eeb>
			panic(
f012dfed:	83 ec 04             	sub    $0x4,%esp
f012dff0:	68 94 b1 13 f0       	push   $0xf013b194
f012dff5:	68 dc 10 00 00       	push   $0x10dc
f012dffa:	68 7a b1 13 f0       	push   $0xf013b17a
f012dfff:	e8 01 22 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012e004:	e8 da ed fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012e009:	89 c2                	mov    %eax,%edx
f012e00b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e00e:	29 c2                	sub    %eax,%edx
f012e010:	89 d0                	mov    %edx,%eax
f012e012:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012e017:	74 17                	je     f012e030 <test_krealloc+0x1f17>
			panic("krealloc: pages in memory are not freed correctly");
f012e019:	83 ec 04             	sub    $0x4,%esp
f012e01c:	68 50 c6 13 f0       	push   $0xf013c650
f012e021:	68 de 10 00 00       	push   $0x10de
f012e026:	68 7a b1 13 f0       	push   $0xf013b17a
f012e02b:	e8 d5 21 fd ff       	call   f0100205 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012e030:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012e037:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012e03e:	eb 48                	jmp    f012e088 <test_krealloc+0x1f6f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012e040:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012e043:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f012e048:	83 ec 04             	sub    $0x4,%esp
f012e04b:	8d 8d b0 fd ff ff    	lea    -0x250(%ebp),%ecx
f012e051:	51                   	push   %ecx
f012e052:	52                   	push   %edx
f012e053:	50                   	push   %eax
f012e054:	e8 36 8a fd ff       	call   f0106a8f <get_page_table>
f012e059:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012e05c:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f012e062:	85 c0                	test   %eax,%eax
f012e064:	75 17                	jne    f012e07d <test_krealloc+0x1f64>
					panic(
f012e066:	83 ec 04             	sub    $0x4,%esp
f012e069:	68 7c ba 13 f0       	push   $0xf013ba7c
f012e06e:	68 eb 10 00 00       	push   $0x10eb
f012e073:	68 7a b1 13 f0       	push   $0xf013b17a
f012e078:	e8 88 21 fd ff       	call   f0100205 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012e07d:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012e084:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012e088:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012e08c:	78 b2                	js     f012e040 <test_krealloc+0x1f27>
f012e08e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012e092:	7f 09                	jg     f012e09d <test_krealloc+0x1f84>
f012e094:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012e09b:	76 a3                	jbe    f012e040 <test_krealloc+0x1f27>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012e09d:	83 ec 0c             	sub    $0xc,%esp
f012e0a0:	68 5e b3 13 f0       	push   $0xf013b35e
f012e0a5:	e8 64 2c fd ff       	call   f0100d0e <cprintf>
f012e0aa:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc completed successfully.\n");
f012e0ad:	83 ec 0c             	sub    $0xc,%esp
f012e0b0:	68 ec c9 13 f0       	push   $0xf013c9ec
f012e0b5:	e8 54 2c fd ff       	call   f0100d0e <cprintf>
f012e0ba:	83 c4 10             	add    $0x10,%esp
	return 0;
f012e0bd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012e0c2:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012e0c5:	5b                   	pop    %ebx
f012e0c6:	5f                   	pop    %edi
f012e0c7:	5d                   	pop    %ebp
f012e0c8:	c3                   	ret    

f012e0c9 <test_krealloc_BF>:


int test_krealloc_BF() {
f012e0c9:	55                   	push   %ebp
f012e0ca:	89 e5                	mov    %esp,%ebp
f012e0cc:	57                   	push   %edi
f012e0cd:	53                   	push   %ebx
f012e0ce:	81 ec 60 02 00 00    	sub    $0x260,%esp
	cprintf("==============================================\n");
f012e0d4:	83 ec 0c             	sub    $0xc,%esp
f012e0d7:	68 bc b0 13 f0       	push   $0xf013b0bc
f012e0dc:	e8 2d 2c fd ff       	call   f0100d0e <cprintf>
f012e0e1:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012e0e4:	83 ec 0c             	sub    $0xc,%esp
f012e0e7:	68 ec b0 13 f0       	push   $0xf013b0ec
f012e0ec:	e8 1d 2c fd ff       	call   f0100d0e <cprintf>
f012e0f1:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012e0f4:	83 ec 0c             	sub    $0xc,%esp
f012e0f7:	68 bc b0 13 f0       	push   $0xf013b0bc
f012e0fc:	e8 0d 2c fd ff       	call   f0100d0e <cprintf>
f012e101:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012e104:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012e108:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012e10c:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012e112:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012e118:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012e11f:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012e126:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f012e12c:	b9 14 00 00 00       	mov    $0x14,%ecx
f012e131:	b8 00 00 00 00       	mov    $0x0,%eax
f012e136:	89 d7                	mov    %edx,%edi
f012e138:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012e13a:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012e141:	8d 95 f0 fd ff ff    	lea    -0x210(%ebp),%edx
f012e147:	b9 14 00 00 00       	mov    $0x14,%ecx
f012e14c:	b8 00 00 00 00       	mov    $0x0,%eax
f012e151:	89 d7                	mov    %edx,%edi
f012e153:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012e155:	8d 95 a0 fd ff ff    	lea    -0x260(%ebp),%edx
f012e15b:	b9 14 00 00 00       	mov    $0x14,%ecx
f012e160:	b8 00 00 00 00       	mov    $0x0,%eax
f012e165:	89 d7                	mov    %edx,%edi
f012e167:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012e169:	e8 75 ec fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012e16e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012e171:	83 ec 08             	sub    $0x8,%esp
f012e174:	68 00 fc 0f 00       	push   $0xffc00
f012e179:	6a 00                	push   $0x0
f012e17b:	e8 c4 9b fd ff       	call   f0107d44 <krealloc>
f012e180:	83 c4 10             	add    $0x10,%esp
f012e183:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012e189:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012e18f:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e194:	77 17                	ja     f012e1ad <test_krealloc_BF+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e196:	83 ec 04             	sub    $0x4,%esp
f012e199:	68 20 c4 13 f0       	push   $0xf013c420
f012e19e:	68 1a 11 00 00       	push   $0x111a
f012e1a3:	68 7a b1 13 f0       	push   $0xf013b17a
f012e1a8:	e8 58 20 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012e1ad:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012e1b3:	89 c1                	mov    %eax,%ecx
f012e1b5:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012e1bc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012e1bf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e1c4:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012e1c7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012e1ca:	ba 00 00 00 00       	mov    $0x0,%edx
f012e1cf:	f7 75 b4             	divl   -0x4c(%ebp)
f012e1d2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012e1d5:	29 d0                	sub    %edx,%eax
f012e1d7:	89 c3                	mov    %eax,%ebx
f012e1d9:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012e1e0:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012e1e5:	0f b6 d0             	movzbl %al,%edx
f012e1e8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012e1eb:	01 d0                	add    %edx,%eax
f012e1ed:	48                   	dec    %eax
f012e1ee:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012e1f1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012e1f4:	ba 00 00 00 00       	mov    $0x0,%edx
f012e1f9:	f7 75 ac             	divl   -0x54(%ebp)
f012e1fc:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012e1ff:	29 d0                	sub    %edx,%eax
f012e201:	01 c3                	add    %eax,%ebx
f012e203:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012e20a:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012e20f:	0f b6 c0             	movzbl %al,%eax
f012e212:	c1 e0 04             	shl    $0x4,%eax
f012e215:	89 c2                	mov    %eax,%edx
f012e217:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012e21a:	01 d0                	add    %edx,%eax
f012e21c:	48                   	dec    %eax
f012e21d:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012e220:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012e223:	ba 00 00 00 00       	mov    $0x0,%edx
f012e228:	f7 75 a4             	divl   -0x5c(%ebp)
f012e22b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012e22e:	29 d0                	sub    %edx,%eax
f012e230:	01 d8                	add    %ebx,%eax
f012e232:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012e237:	39 c1                	cmp    %eax,%ecx
f012e239:	74 17                	je     f012e252 <test_krealloc_BF+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012e23b:	83 ec 04             	sub    $0x4,%esp
f012e23e:	68 5c c4 13 f0       	push   $0xf013c45c
f012e243:	68 1c 11 00 00       	push   $0x111c
f012e248:	68 7a b1 13 f0       	push   $0xf013b17a
f012e24d:	e8 b3 1f fd ff       	call   f0100205 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e252:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e255:	e8 89 eb fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012e25a:	29 c3                	sub    %eax,%ebx
f012e25c:	89 d8                	mov    %ebx,%eax
f012e25e:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e263:	74 17                	je     f012e27c <test_krealloc_BF+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012e265:	83 ec 04             	sub    $0x4,%esp
f012e268:	68 8e c4 13 f0       	push   $0xf013c48e
f012e26d:	68 1f 11 00 00       	push   $0x111f
f012e272:	68 7a b1 13 f0       	push   $0xf013b17a
f012e277:	e8 89 1f fd ff       	call   f0100205 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012e27c:	c7 85 f0 fd ff ff ff 	movl   $0xffbff,-0x210(%ebp)
f012e283:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012e286:	e8 58 eb fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012e28b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012e28e:	83 ec 08             	sub    $0x8,%esp
f012e291:	68 00 fc 0f 00       	push   $0xffc00
f012e296:	6a 00                	push   $0x0
f012e298:	e8 a7 9a fd ff       	call   f0107d44 <krealloc>
f012e29d:	83 c4 10             	add    $0x10,%esp
f012e2a0:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012e2a6:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e2ac:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012e2b1:	77 17                	ja     f012e2ca <test_krealloc_BF+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e2b3:	83 ec 04             	sub    $0x4,%esp
f012e2b6:	68 20 c4 13 f0       	push   $0xf013c420
f012e2bb:	68 27 11 00 00       	push   $0x1127
f012e2c0:	68 7a b1 13 f0       	push   $0xf013b17a
f012e2c5:	e8 3b 1f fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012e2ca:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e2d0:	89 c1                	mov    %eax,%ecx
f012e2d2:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012e2d9:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012e2dc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e2e1:	89 45 98             	mov    %eax,-0x68(%ebp)
f012e2e4:	8b 45 98             	mov    -0x68(%ebp),%eax
f012e2e7:	ba 00 00 00 00       	mov    $0x0,%edx
f012e2ec:	f7 75 9c             	divl   -0x64(%ebp)
f012e2ef:	8b 45 98             	mov    -0x68(%ebp),%eax
f012e2f2:	29 d0                	sub    %edx,%eax
f012e2f4:	89 c3                	mov    %eax,%ebx
f012e2f6:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012e2fd:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012e302:	0f b6 d0             	movzbl %al,%edx
f012e305:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012e308:	01 d0                	add    %edx,%eax
f012e30a:	48                   	dec    %eax
f012e30b:	89 45 90             	mov    %eax,-0x70(%ebp)
f012e30e:	8b 45 90             	mov    -0x70(%ebp),%eax
f012e311:	ba 00 00 00 00       	mov    $0x0,%edx
f012e316:	f7 75 94             	divl   -0x6c(%ebp)
f012e319:	8b 45 90             	mov    -0x70(%ebp),%eax
f012e31c:	29 d0                	sub    %edx,%eax
f012e31e:	01 c3                	add    %eax,%ebx
f012e320:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012e327:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012e32c:	0f b6 c0             	movzbl %al,%eax
f012e32f:	c1 e0 04             	shl    $0x4,%eax
f012e332:	89 c2                	mov    %eax,%edx
f012e334:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012e337:	01 d0                	add    %edx,%eax
f012e339:	48                   	dec    %eax
f012e33a:	89 45 88             	mov    %eax,-0x78(%ebp)
f012e33d:	8b 45 88             	mov    -0x78(%ebp),%eax
f012e340:	ba 00 00 00 00       	mov    $0x0,%edx
f012e345:	f7 75 8c             	divl   -0x74(%ebp)
f012e348:	8b 45 88             	mov    -0x78(%ebp),%eax
f012e34b:	29 d0                	sub    %edx,%eax
f012e34d:	01 d8                	add    %ebx,%eax
f012e34f:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012e354:	39 c1                	cmp    %eax,%ecx
f012e356:	74 17                	je     f012e36f <test_krealloc_BF+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012e358:	83 ec 04             	sub    $0x4,%esp
f012e35b:	68 5c c4 13 f0       	push   $0xf013c45c
f012e360:	68 29 11 00 00       	push   $0x1129
f012e365:	68 7a b1 13 f0       	push   $0xf013b17a
f012e36a:	e8 96 1e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e36f:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e372:	e8 6c ea fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012e377:	29 c3                	sub    %eax,%ebx
f012e379:	89 d8                	mov    %ebx,%eax
f012e37b:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e380:	74 17                	je     f012e399 <test_krealloc_BF+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012e382:	83 ec 04             	sub    $0x4,%esp
f012e385:	68 8e c4 13 f0       	push   $0xf013c48e
f012e38a:	68 2b 11 00 00       	push   $0x112b
f012e38f:	68 7a b1 13 f0       	push   $0xf013b17a
f012e394:	e8 6c 1e fd ff       	call   f0100205 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012e399:	c7 85 f4 fd ff ff ff 	movl   $0xffbff,-0x20c(%ebp)
f012e3a0:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012e3a3:	e8 3b ea fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012e3a8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012e3ab:	83 ec 08             	sub    $0x8,%esp
f012e3ae:	68 00 fc 0f 00       	push   $0xffc00
f012e3b3:	6a 00                	push   $0x0
f012e3b5:	e8 8a 99 fd ff       	call   f0107d44 <krealloc>
f012e3ba:	83 c4 10             	add    $0x10,%esp
f012e3bd:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012e3c3:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e3c9:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012e3ce:	77 17                	ja     f012e3e7 <test_krealloc_BF+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e3d0:	83 ec 04             	sub    $0x4,%esp
f012e3d3:	68 20 c4 13 f0       	push   $0xf013c420
f012e3d8:	68 33 11 00 00       	push   $0x1133
f012e3dd:	68 7a b1 13 f0       	push   $0xf013b17a
f012e3e2:	e8 1e 1e fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012e3e7:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e3ed:	89 c1                	mov    %eax,%ecx
f012e3ef:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012e3f6:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012e3f9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e3fe:	89 45 80             	mov    %eax,-0x80(%ebp)
f012e401:	8b 45 80             	mov    -0x80(%ebp),%eax
f012e404:	ba 00 00 00 00       	mov    $0x0,%edx
f012e409:	f7 75 84             	divl   -0x7c(%ebp)
f012e40c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012e40f:	29 d0                	sub    %edx,%eax
f012e411:	89 c3                	mov    %eax,%ebx
f012e413:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012e41a:	10 00 00 
f012e41d:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012e422:	0f b6 d0             	movzbl %al,%edx
f012e425:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012e42b:	01 d0                	add    %edx,%eax
f012e42d:	48                   	dec    %eax
f012e42e:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012e434:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012e43a:	ba 00 00 00 00       	mov    $0x0,%edx
f012e43f:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012e445:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012e44b:	29 d0                	sub    %edx,%eax
f012e44d:	01 c3                	add    %eax,%ebx
f012e44f:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012e456:	10 00 00 
f012e459:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012e45e:	0f b6 c0             	movzbl %al,%eax
f012e461:	c1 e0 04             	shl    $0x4,%eax
f012e464:	89 c2                	mov    %eax,%edx
f012e466:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012e46c:	01 d0                	add    %edx,%eax
f012e46e:	48                   	dec    %eax
f012e46f:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012e475:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012e47b:	ba 00 00 00 00       	mov    $0x0,%edx
f012e480:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012e486:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012e48c:	29 d0                	sub    %edx,%eax
f012e48e:	01 d8                	add    %ebx,%eax
f012e490:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012e495:	39 c1                	cmp    %eax,%ecx
f012e497:	74 17                	je     f012e4b0 <test_krealloc_BF+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012e499:	83 ec 04             	sub    $0x4,%esp
f012e49c:	68 5c c4 13 f0       	push   $0xf013c45c
f012e4a1:	68 35 11 00 00       	push   $0x1135
f012e4a6:	68 7a b1 13 f0       	push   $0xf013b17a
f012e4ab:	e8 55 1d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e4b0:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e4b3:	e8 2b e9 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012e4b8:	29 c3                	sub    %eax,%ebx
f012e4ba:	89 d8                	mov    %ebx,%eax
f012e4bc:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e4c1:	74 17                	je     f012e4da <test_krealloc_BF+0x411>
			panic("krealloc: Wrong allocation: ");
f012e4c3:	83 ec 04             	sub    $0x4,%esp
f012e4c6:	68 8e c4 13 f0       	push   $0xf013c48e
f012e4cb:	68 37 11 00 00       	push   $0x1137
f012e4d0:	68 7a b1 13 f0       	push   $0xf013b17a
f012e4d5:	e8 2b 1d fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012e4da:	c7 85 f8 fd ff ff ff 	movl   $0x3feff,-0x208(%ebp)
f012e4e1:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012e4e4:	e8 fa e8 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012e4e9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012e4ec:	83 ec 08             	sub    $0x8,%esp
f012e4ef:	68 00 fc 0f 00       	push   $0xffc00
f012e4f4:	6a 00                	push   $0x0
f012e4f6:	e8 49 98 fd ff       	call   f0107d44 <krealloc>
f012e4fb:	83 c4 10             	add    $0x10,%esp
f012e4fe:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012e504:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e50a:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012e50f:	77 17                	ja     f012e528 <test_krealloc_BF+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e511:	83 ec 04             	sub    $0x4,%esp
f012e514:	68 20 c4 13 f0       	push   $0xf013c420
f012e519:	68 3e 11 00 00       	push   $0x113e
f012e51e:	68 7a b1 13 f0       	push   $0xf013b17a
f012e523:	e8 dd 1c fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012e528:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e52e:	89 c1                	mov    %eax,%ecx
f012e530:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012e537:	10 00 00 
f012e53a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012e540:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e545:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012e54b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012e551:	ba 00 00 00 00       	mov    $0x0,%edx
f012e556:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012e55c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012e562:	29 d0                	sub    %edx,%eax
f012e564:	89 c3                	mov    %eax,%ebx
f012e566:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012e56d:	10 00 00 
f012e570:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012e575:	0f b6 d0             	movzbl %al,%edx
f012e578:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012e57e:	01 d0                	add    %edx,%eax
f012e580:	48                   	dec    %eax
f012e581:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012e587:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012e58d:	ba 00 00 00 00       	mov    $0x0,%edx
f012e592:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012e598:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012e59e:	29 d0                	sub    %edx,%eax
f012e5a0:	01 c3                	add    %eax,%ebx
f012e5a2:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012e5a9:	10 00 00 
f012e5ac:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012e5b1:	0f b6 c0             	movzbl %al,%eax
f012e5b4:	c1 e0 04             	shl    $0x4,%eax
f012e5b7:	89 c2                	mov    %eax,%edx
f012e5b9:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012e5bf:	01 d0                	add    %edx,%eax
f012e5c1:	48                   	dec    %eax
f012e5c2:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012e5c8:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012e5ce:	ba 00 00 00 00       	mov    $0x0,%edx
f012e5d3:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012e5d9:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012e5df:	29 d0                	sub    %edx,%eax
f012e5e1:	01 d8                	add    %ebx,%eax
f012e5e3:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012e5e8:	39 c1                	cmp    %eax,%ecx
f012e5ea:	74 17                	je     f012e603 <test_krealloc_BF+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012e5ec:	83 ec 04             	sub    $0x4,%esp
f012e5ef:	68 5c c4 13 f0       	push   $0xf013c45c
f012e5f4:	68 40 11 00 00       	push   $0x1140
f012e5f9:	68 7a b1 13 f0       	push   $0xf013b17a
f012e5fe:	e8 02 1c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e603:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e606:	e8 d8 e7 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012e60b:	29 c3                	sub    %eax,%ebx
f012e60d:	89 d8                	mov    %ebx,%eax
f012e60f:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e614:	74 17                	je     f012e62d <test_krealloc_BF+0x564>
			panic("krealloc: Wrong allocation: ");
f012e616:	83 ec 04             	sub    $0x4,%esp
f012e619:	68 8e c4 13 f0       	push   $0xf013c48e
f012e61e:	68 42 11 00 00       	push   $0x1142
f012e623:	68 7a b1 13 f0       	push   $0xf013b17a
f012e628:	e8 d8 1b fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012e62d:	c7 85 fc fd ff ff ff 	movl   $0x3feff,-0x204(%ebp)
f012e634:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012e637:	e8 a7 e7 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012e63c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012e63f:	83 ec 08             	sub    $0x8,%esp
f012e642:	68 00 fc 1f 00       	push   $0x1ffc00
f012e647:	6a 00                	push   $0x0
f012e649:	e8 f6 96 fd ff       	call   f0107d44 <krealloc>
f012e64e:	83 c4 10             	add    $0x10,%esp
f012e651:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012e657:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e65d:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012e662:	77 17                	ja     f012e67b <test_krealloc_BF+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e664:	83 ec 04             	sub    $0x4,%esp
f012e667:	68 20 c4 13 f0       	push   $0xf013c420
f012e66c:	68 49 11 00 00       	push   $0x1149
f012e671:	68 7a b1 13 f0       	push   $0xf013b17a
f012e676:	e8 8a 1b fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012e67b:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e681:	89 c1                	mov    %eax,%ecx
f012e683:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012e68a:	10 00 00 
f012e68d:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012e693:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e698:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012e69e:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012e6a4:	ba 00 00 00 00       	mov    $0x0,%edx
f012e6a9:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012e6af:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012e6b5:	29 d0                	sub    %edx,%eax
f012e6b7:	89 c3                	mov    %eax,%ebx
f012e6b9:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012e6c0:	10 00 00 
f012e6c3:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012e6c8:	0f b6 d0             	movzbl %al,%edx
f012e6cb:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012e6d1:	01 d0                	add    %edx,%eax
f012e6d3:	48                   	dec    %eax
f012e6d4:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012e6da:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012e6e0:	ba 00 00 00 00       	mov    $0x0,%edx
f012e6e5:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012e6eb:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012e6f1:	29 d0                	sub    %edx,%eax
f012e6f3:	01 c3                	add    %eax,%ebx
f012e6f5:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012e6fc:	10 00 00 
f012e6ff:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012e704:	0f b6 c0             	movzbl %al,%eax
f012e707:	c1 e0 04             	shl    $0x4,%eax
f012e70a:	89 c2                	mov    %eax,%edx
f012e70c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012e712:	01 d0                	add    %edx,%eax
f012e714:	48                   	dec    %eax
f012e715:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012e71b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012e721:	ba 00 00 00 00       	mov    $0x0,%edx
f012e726:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012e72c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012e732:	29 d0                	sub    %edx,%eax
f012e734:	01 d8                	add    %ebx,%eax
f012e736:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012e73b:	39 c1                	cmp    %eax,%ecx
f012e73d:	74 17                	je     f012e756 <test_krealloc_BF+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012e73f:	83 ec 04             	sub    $0x4,%esp
f012e742:	68 5c c4 13 f0       	push   $0xf013c45c
f012e747:	68 4b 11 00 00       	push   $0x114b
f012e74c:	68 7a b1 13 f0       	push   $0xf013b17a
f012e751:	e8 af 1a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012e756:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e759:	e8 85 e6 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012e75e:	29 c3                	sub    %eax,%ebx
f012e760:	89 d8                	mov    %ebx,%eax
f012e762:	3d 00 02 00 00       	cmp    $0x200,%eax
f012e767:	74 17                	je     f012e780 <test_krealloc_BF+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012e769:	83 ec 04             	sub    $0x4,%esp
f012e76c:	68 8e c4 13 f0       	push   $0xf013c48e
f012e771:	68 4d 11 00 00       	push   $0x114d
f012e776:	68 7a b1 13 f0       	push   $0xf013b17a
f012e77b:	e8 85 1a fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012e780:	c7 85 00 fe ff ff ff 	movl   $0xffdff,-0x200(%ebp)
f012e787:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012e78a:	e8 54 e6 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012e78f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012e792:	83 ec 08             	sub    $0x8,%esp
f012e795:	68 00 fc 1f 00       	push   $0x1ffc00
f012e79a:	6a 00                	push   $0x0
f012e79c:	e8 a3 95 fd ff       	call   f0107d44 <krealloc>
f012e7a1:	83 c4 10             	add    $0x10,%esp
f012e7a4:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012e7aa:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012e7b0:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012e7b5:	77 17                	ja     f012e7ce <test_krealloc_BF+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e7b7:	83 ec 04             	sub    $0x4,%esp
f012e7ba:	68 20 c4 13 f0       	push   $0xf013c420
f012e7bf:	68 54 11 00 00       	push   $0x1154
f012e7c4:	68 7a b1 13 f0       	push   $0xf013b17a
f012e7c9:	e8 37 1a fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012e7ce:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012e7d4:	89 c1                	mov    %eax,%ecx
f012e7d6:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012e7dd:	10 00 00 
f012e7e0:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012e7e6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e7eb:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012e7f1:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012e7f7:	ba 00 00 00 00       	mov    $0x0,%edx
f012e7fc:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012e802:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012e808:	29 d0                	sub    %edx,%eax
f012e80a:	89 c3                	mov    %eax,%ebx
f012e80c:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012e813:	10 00 00 
f012e816:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012e81b:	0f b6 d0             	movzbl %al,%edx
f012e81e:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012e824:	01 d0                	add    %edx,%eax
f012e826:	48                   	dec    %eax
f012e827:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012e82d:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012e833:	ba 00 00 00 00       	mov    $0x0,%edx
f012e838:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012e83e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012e844:	29 d0                	sub    %edx,%eax
f012e846:	01 c3                	add    %eax,%ebx
f012e848:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012e84f:	10 00 00 
f012e852:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012e857:	0f b6 c0             	movzbl %al,%eax
f012e85a:	c1 e0 04             	shl    $0x4,%eax
f012e85d:	89 c2                	mov    %eax,%edx
f012e85f:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012e865:	01 d0                	add    %edx,%eax
f012e867:	48                   	dec    %eax
f012e868:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012e86e:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012e874:	ba 00 00 00 00       	mov    $0x0,%edx
f012e879:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012e87f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012e885:	29 d0                	sub    %edx,%eax
f012e887:	01 d8                	add    %ebx,%eax
f012e889:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012e88e:	39 c1                	cmp    %eax,%ecx
f012e890:	74 17                	je     f012e8a9 <test_krealloc_BF+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012e892:	83 ec 04             	sub    $0x4,%esp
f012e895:	68 5c c4 13 f0       	push   $0xf013c45c
f012e89a:	68 56 11 00 00       	push   $0x1156
f012e89f:	68 7a b1 13 f0       	push   $0xf013b17a
f012e8a4:	e8 5c 19 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012e8a9:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e8ac:	e8 32 e5 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012e8b1:	29 c3                	sub    %eax,%ebx
f012e8b3:	89 d8                	mov    %ebx,%eax
f012e8b5:	3d 00 02 00 00       	cmp    $0x200,%eax
f012e8ba:	74 17                	je     f012e8d3 <test_krealloc_BF+0x80a>
			panic("krealloc: Wrong allocation: ");
f012e8bc:	83 ec 04             	sub    $0x4,%esp
f012e8bf:	68 8e c4 13 f0       	push   $0xf013c48e
f012e8c4:	68 58 11 00 00       	push   $0x1158
f012e8c9:	68 7a b1 13 f0       	push   $0xf013b17a
f012e8ce:	e8 32 19 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012e8d3:	c7 85 04 fe ff ff ff 	movl   $0xffdff,-0x1fc(%ebp)
f012e8da:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012e8dd:	e8 01 e5 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012e8e2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012e8e5:	83 ec 08             	sub    $0x8,%esp
f012e8e8:	68 00 fc 2f 00       	push   $0x2ffc00
f012e8ed:	6a 00                	push   $0x0
f012e8ef:	e8 50 94 fd ff       	call   f0107d44 <krealloc>
f012e8f4:	83 c4 10             	add    $0x10,%esp
f012e8f7:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012e8fd:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e903:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012e908:	77 17                	ja     f012e921 <test_krealloc_BF+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e90a:	83 ec 04             	sub    $0x4,%esp
f012e90d:	68 20 c4 13 f0       	push   $0xf013c420
f012e912:	68 5f 11 00 00       	push   $0x115f
f012e917:	68 7a b1 13 f0       	push   $0xf013b17a
f012e91c:	e8 e4 18 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012e921:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e927:	89 c1                	mov    %eax,%ecx
f012e929:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012e930:	10 00 00 
f012e933:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012e939:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e93e:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012e944:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012e94a:	ba 00 00 00 00       	mov    $0x0,%edx
f012e94f:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012e955:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012e95b:	29 d0                	sub    %edx,%eax
f012e95d:	89 c3                	mov    %eax,%ebx
f012e95f:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012e966:	10 00 00 
f012e969:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012e96e:	0f b6 d0             	movzbl %al,%edx
f012e971:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012e977:	01 d0                	add    %edx,%eax
f012e979:	48                   	dec    %eax
f012e97a:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012e980:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012e986:	ba 00 00 00 00       	mov    $0x0,%edx
f012e98b:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012e991:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012e997:	29 d0                	sub    %edx,%eax
f012e999:	01 c3                	add    %eax,%ebx
f012e99b:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012e9a2:	10 00 00 
f012e9a5:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012e9aa:	0f b6 c0             	movzbl %al,%eax
f012e9ad:	c1 e0 04             	shl    $0x4,%eax
f012e9b0:	89 c2                	mov    %eax,%edx
f012e9b2:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012e9b8:	01 d0                	add    %edx,%eax
f012e9ba:	48                   	dec    %eax
f012e9bb:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012e9c1:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012e9c7:	ba 00 00 00 00       	mov    $0x0,%edx
f012e9cc:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012e9d2:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012e9d8:	29 d0                	sub    %edx,%eax
f012e9da:	01 d8                	add    %ebx,%eax
f012e9dc:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012e9e1:	39 c1                	cmp    %eax,%ecx
f012e9e3:	74 17                	je     f012e9fc <test_krealloc_BF+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012e9e5:	83 ec 04             	sub    $0x4,%esp
f012e9e8:	68 5c c4 13 f0       	push   $0xf013c45c
f012e9ed:	68 61 11 00 00       	push   $0x1161
f012e9f2:	68 7a b1 13 f0       	push   $0xf013b17a
f012e9f7:	e8 09 18 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012e9fc:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e9ff:	e8 df e3 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012ea04:	29 c3                	sub    %eax,%ebx
f012ea06:	89 d8                	mov    %ebx,%eax
f012ea08:	3d 00 03 00 00       	cmp    $0x300,%eax
f012ea0d:	74 17                	je     f012ea26 <test_krealloc_BF+0x95d>
			panic("Wrong allocation: ");
f012ea0f:	83 ec 04             	sub    $0x4,%esp
f012ea12:	68 c4 b5 13 f0       	push   $0xf013b5c4
f012ea17:	68 63 11 00 00       	push   $0x1163
f012ea1c:	68 7a b1 13 f0       	push   $0xf013b17a
f012ea21:	e8 df 17 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012ea26:	c7 85 08 fe ff ff 7f 	movl   $0x5ff7f,-0x1f8(%ebp)
f012ea2d:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012ea30:	e8 ae e3 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012ea35:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012ea38:	83 ec 08             	sub    $0x8,%esp
f012ea3b:	68 00 fc 2f 00       	push   $0x2ffc00
f012ea40:	6a 00                	push   $0x0
f012ea42:	e8 fd 92 fd ff       	call   f0107d44 <krealloc>
f012ea47:	83 c4 10             	add    $0x10,%esp
f012ea4a:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012ea50:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012ea56:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012ea5b:	77 17                	ja     f012ea74 <test_krealloc_BF+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ea5d:	83 ec 04             	sub    $0x4,%esp
f012ea60:	68 20 c4 13 f0       	push   $0xf013c420
f012ea65:	68 6a 11 00 00       	push   $0x116a
f012ea6a:	68 7a b1 13 f0       	push   $0xf013b17a
f012ea6f:	e8 91 17 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012ea74:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012ea7a:	89 c1                	mov    %eax,%ecx
f012ea7c:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012ea83:	10 00 00 
f012ea86:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012ea8c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ea91:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012ea97:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012ea9d:	ba 00 00 00 00       	mov    $0x0,%edx
f012eaa2:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012eaa8:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012eaae:	29 d0                	sub    %edx,%eax
f012eab0:	89 c3                	mov    %eax,%ebx
f012eab2:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012eab9:	10 00 00 
f012eabc:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012eac1:	0f b6 d0             	movzbl %al,%edx
f012eac4:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012eaca:	01 d0                	add    %edx,%eax
f012eacc:	48                   	dec    %eax
f012eacd:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012ead3:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012ead9:	ba 00 00 00 00       	mov    $0x0,%edx
f012eade:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012eae4:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012eaea:	29 d0                	sub    %edx,%eax
f012eaec:	01 c3                	add    %eax,%ebx
f012eaee:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012eaf5:	10 00 00 
f012eaf8:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012eafd:	0f b6 c0             	movzbl %al,%eax
f012eb00:	c1 e0 04             	shl    $0x4,%eax
f012eb03:	89 c2                	mov    %eax,%edx
f012eb05:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012eb0b:	01 d0                	add    %edx,%eax
f012eb0d:	48                   	dec    %eax
f012eb0e:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012eb14:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012eb1a:	ba 00 00 00 00       	mov    $0x0,%edx
f012eb1f:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012eb25:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012eb2b:	29 d0                	sub    %edx,%eax
f012eb2d:	01 d8                	add    %ebx,%eax
f012eb2f:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012eb34:	39 c1                	cmp    %eax,%ecx
f012eb36:	74 17                	je     f012eb4f <test_krealloc_BF+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012eb38:	83 ec 04             	sub    $0x4,%esp
f012eb3b:	68 5c c4 13 f0       	push   $0xf013c45c
f012eb40:	68 6c 11 00 00       	push   $0x116c
f012eb45:	68 7a b1 13 f0       	push   $0xf013b17a
f012eb4a:	e8 b6 16 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012eb4f:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012eb52:	e8 8c e2 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012eb57:	29 c3                	sub    %eax,%ebx
f012eb59:	89 d8                	mov    %ebx,%eax
f012eb5b:	3d 00 03 00 00       	cmp    $0x300,%eax
f012eb60:	74 17                	je     f012eb79 <test_krealloc_BF+0xab0>
			panic("krealloc: Wrong allocation: ");
f012eb62:	83 ec 04             	sub    $0x4,%esp
f012eb65:	68 8e c4 13 f0       	push   $0xf013c48e
f012eb6a:	68 6e 11 00 00       	push   $0x116e
f012eb6f:	68 7a b1 13 f0       	push   $0xf013b17a
f012eb74:	e8 8c 16 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012eb79:	c7 85 0c fe ff ff 7f 	movl   $0x5ff7f,-0x1f4(%ebp)
f012eb80:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012eb83:	e8 5b e2 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012eb88:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012eb8b:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012eb92:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012eb95:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012eb9b:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012eba1:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012eba7:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012ebaa:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012ebac:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012ebb2:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012ebb8:	01 c2                	add    %eax,%edx
f012ebba:	8a 45 ce             	mov    -0x32(%ebp),%al
f012ebbd:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012ebbf:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ebc5:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012ebcb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ebd2:	eb 11                	jmp    f012ebe5 <test_krealloc_BF+0xb1c>
			ptr[i] = 2;
f012ebd4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ebd7:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012ebdd:	01 d0                	add    %edx,%eax
f012ebdf:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012ebe2:	ff 45 f4             	incl   -0xc(%ebp)
f012ebe5:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012ebeb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ebee:	7d e4                	jge    f012ebd4 <test_krealloc_BF+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012ebf0:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012ebf6:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012ebfc:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ec02:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012ec08:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012ec0e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ec15:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ec1b:	01 d0                	add    %edx,%eax
f012ec1d:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012ec23:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012ec29:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012ec2f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012ec36:	eb 1b                	jmp    f012ec53 <test_krealloc_BF+0xb8a>
			intArr[i] = 4;
f012ec38:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ec3b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ec42:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ec48:	01 d0                	add    %edx,%eax
f012ec4a:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012ec50:	ff 45 f0             	incl   -0x10(%ebp)
f012ec53:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012ec59:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012ec5c:	7d da                	jge    f012ec38 <test_krealloc_BF+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012ec5e:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ec64:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012ec6a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012ec71:	eb 17                	jmp    f012ec8a <test_krealloc_BF+0xbc1>
			shortArr[i] = 5;
f012ec73:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012ec76:	01 c0                	add    %eax,%eax
f012ec78:	89 c2                	mov    %eax,%edx
f012ec7a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ec80:	01 d0                	add    %edx,%eax
f012ec82:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012ec87:	ff 45 ec             	incl   -0x14(%ebp)
f012ec8a:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012ec90:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012ec93:	7d de                	jge    f012ec73 <test_krealloc_BF+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012ec95:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012ec9b:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012eca1:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012eca7:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012ecac:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012ecb2:	01 c0                	add    %eax,%eax
f012ecb4:	89 c2                	mov    %eax,%edx
f012ecb6:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ecbc:	01 d0                	add    %edx,%eax
f012ecbe:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012ecc3:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ecc9:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012eccf:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012ecd6:	eb 49                	jmp    f012ed21 <test_krealloc_BF+0xc58>
			structArr[i].a = 7;
f012ecd8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012ecdb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ece2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ece8:	01 d0                	add    %edx,%eax
f012ecea:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012eced:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012ecf0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ecf7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ecfd:	01 d0                	add    %edx,%eax
f012ecff:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012ed05:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012ed08:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ed0f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ed15:	01 d0                	add    %edx,%eax
f012ed17:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012ed1e:	ff 45 e8             	incl   -0x18(%ebp)
f012ed21:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ed27:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012ed2a:	7d ac                	jge    f012ecd8 <test_krealloc_BF+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012ed2c:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012ed32:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012ed38:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ed3e:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012ed41:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ed47:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012ed4d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ed53:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012ed5a:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012ed60:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ed67:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ed6d:	01 d0                	add    %edx,%eax
f012ed6f:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012ed72:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012ed78:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ed7f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ed85:	01 d0                	add    %edx,%eax
f012ed87:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012ed8d:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012ed93:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ed9a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012eda0:	01 d0                	add    %edx,%eax
f012eda2:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012eda9:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012edaf:	8a 00                	mov    (%eax),%al
f012edb1:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012edb4:	75 17                	jne    f012edcd <test_krealloc_BF+0xd04>
f012edb6:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012edbc:	89 c2                	mov    %eax,%edx
f012edbe:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012edc4:	01 d0                	add    %edx,%eax
f012edc6:	8a 00                	mov    (%eax),%al
f012edc8:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012edcb:	74 17                	je     f012ede4 <test_krealloc_BF+0xd1b>
			panic(
f012edcd:	83 ec 04             	sub    $0x4,%esp
f012edd0:	68 ac c4 13 f0       	push   $0xf013c4ac
f012edd5:	68 b1 11 00 00       	push   $0x11b1
f012edda:	68 7a b1 13 f0       	push   $0xf013b17a
f012eddf:	e8 21 14 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012ede4:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012edea:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012edf0:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012edf6:	8a 00                	mov    (%eax),%al
f012edf8:	3c 02                	cmp    $0x2,%al
f012edfa:	75 16                	jne    f012ee12 <test_krealloc_BF+0xd49>
f012edfc:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012ee02:	89 c2                	mov    %eax,%edx
f012ee04:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012ee0a:	01 d0                	add    %edx,%eax
f012ee0c:	8a 00                	mov    (%eax),%al
f012ee0e:	3c 02                	cmp    $0x2,%al
f012ee10:	74 20                	je     f012ee32 <test_krealloc_BF+0xd69>
			panic(
f012ee12:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012ee18:	8a 00                	mov    (%eax),%al
f012ee1a:	0f be c0             	movsbl %al,%eax
f012ee1d:	50                   	push   %eax
f012ee1e:	68 ec c4 13 f0       	push   $0xf013c4ec
f012ee23:	68 b7 11 00 00       	push   $0x11b7
f012ee28:	68 7a b1 13 f0       	push   $0xf013b17a
f012ee2d:	e8 d3 13 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012ee32:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012ee38:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012ee3e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ee44:	8b 00                	mov    (%eax),%eax
f012ee46:	83 f8 03             	cmp    $0x3,%eax
f012ee49:	75 1c                	jne    f012ee67 <test_krealloc_BF+0xd9e>
f012ee4b:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012ee51:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ee58:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ee5e:	01 d0                	add    %edx,%eax
f012ee60:	8b 00                	mov    (%eax),%eax
f012ee62:	83 f8 03             	cmp    $0x3,%eax
f012ee65:	74 17                	je     f012ee7e <test_krealloc_BF+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012ee67:	83 ec 04             	sub    $0x4,%esp
f012ee6a:	68 38 c5 13 f0       	push   $0xf013c538
f012ee6f:	68 bb 11 00 00       	push   $0x11bb
f012ee74:	68 7a b1 13 f0       	push   $0xf013b17a
f012ee79:	e8 87 13 fd ff       	call   f0100205 <_panic>

		intArr = (int*) ptr_allocations[3];
f012ee7e:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012ee84:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012ee8a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ee90:	8b 00                	mov    (%eax),%eax
f012ee92:	83 f8 04             	cmp    $0x4,%eax
f012ee95:	75 1c                	jne    f012eeb3 <test_krealloc_BF+0xdea>
f012ee97:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012ee9d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012eea4:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012eeaa:	01 d0                	add    %edx,%eax
f012eeac:	8b 00                	mov    (%eax),%eax
f012eeae:	83 f8 04             	cmp    $0x4,%eax
f012eeb1:	74 17                	je     f012eeca <test_krealloc_BF+0xe01>
			panic(
f012eeb3:	83 ec 04             	sub    $0x4,%esp
f012eeb6:	68 ac c4 13 f0       	push   $0xf013c4ac
f012eebb:	68 c0 11 00 00       	push   $0x11c0
f012eec0:	68 7a b1 13 f0       	push   $0xf013b17a
f012eec5:	e8 3b 13 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012eeca:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012eed0:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012eed6:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012eedc:	66 8b 00             	mov    (%eax),%ax
f012eedf:	66 83 f8 05          	cmp    $0x5,%ax
f012eee3:	75 1b                	jne    f012ef00 <test_krealloc_BF+0xe37>
f012eee5:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012eeeb:	01 c0                	add    %eax,%eax
f012eeed:	89 c2                	mov    %eax,%edx
f012eeef:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012eef5:	01 d0                	add    %edx,%eax
f012eef7:	66 8b 00             	mov    (%eax),%ax
f012eefa:	66 83 f8 05          	cmp    $0x5,%ax
f012eefe:	74 17                	je     f012ef17 <test_krealloc_BF+0xe4e>
			panic(
f012ef00:	83 ec 04             	sub    $0x4,%esp
f012ef03:	68 ac c4 13 f0       	push   $0xf013c4ac
f012ef08:	68 c5 11 00 00       	push   $0x11c5
f012ef0d:	68 7a b1 13 f0       	push   $0xf013b17a
f012ef12:	e8 ee 12 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012ef17:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012ef1d:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012ef23:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ef29:	66 8b 00             	mov    (%eax),%ax
f012ef2c:	66 83 f8 06          	cmp    $0x6,%ax
f012ef30:	75 1b                	jne    f012ef4d <test_krealloc_BF+0xe84>
f012ef32:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012ef38:	01 c0                	add    %eax,%eax
f012ef3a:	89 c2                	mov    %eax,%edx
f012ef3c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ef42:	01 d0                	add    %edx,%eax
f012ef44:	66 8b 00             	mov    (%eax),%ax
f012ef47:	66 83 f8 06          	cmp    $0x6,%ax
f012ef4b:	74 17                	je     f012ef64 <test_krealloc_BF+0xe9b>
			panic(
f012ef4d:	83 ec 04             	sub    $0x4,%esp
f012ef50:	68 ac c4 13 f0       	push   $0xf013c4ac
f012ef55:	68 ca 11 00 00       	push   $0x11ca
f012ef5a:	68 7a b1 13 f0       	push   $0xf013b17a
f012ef5f:	e8 a1 12 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012ef64:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ef6a:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012ef70:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ef76:	8a 00                	mov    (%eax),%al
f012ef78:	3c 07                	cmp    $0x7,%al
f012ef7a:	75 1b                	jne    f012ef97 <test_krealloc_BF+0xece>
f012ef7c:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ef82:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ef89:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ef8f:	01 d0                	add    %edx,%eax
f012ef91:	8a 00                	mov    (%eax),%al
f012ef93:	3c 07                	cmp    $0x7,%al
f012ef95:	74 17                	je     f012efae <test_krealloc_BF+0xee5>
			panic(
f012ef97:	83 ec 04             	sub    $0x4,%esp
f012ef9a:	68 ac c4 13 f0       	push   $0xf013c4ac
f012ef9f:	68 cf 11 00 00       	push   $0x11cf
f012efa4:	68 7a b1 13 f0       	push   $0xf013b17a
f012efa9:	e8 57 12 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012efae:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012efb4:	66 8b 40 02          	mov    0x2(%eax),%ax
f012efb8:	66 83 f8 07          	cmp    $0x7,%ax
f012efbc:	75 1f                	jne    f012efdd <test_krealloc_BF+0xf14>
f012efbe:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012efc4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012efcb:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012efd1:	01 d0                	add    %edx,%eax
f012efd3:	66 8b 40 02          	mov    0x2(%eax),%ax
f012efd7:	66 83 f8 07          	cmp    $0x7,%ax
f012efdb:	74 17                	je     f012eff4 <test_krealloc_BF+0xf2b>
			panic(
f012efdd:	83 ec 04             	sub    $0x4,%esp
f012efe0:	68 ac c4 13 f0       	push   $0xf013c4ac
f012efe5:	68 d2 11 00 00       	push   $0x11d2
f012efea:	68 7a b1 13 f0       	push   $0xf013b17a
f012efef:	e8 11 12 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012eff4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012effa:	8b 40 04             	mov    0x4(%eax),%eax
f012effd:	83 f8 07             	cmp    $0x7,%eax
f012f000:	75 1d                	jne    f012f01f <test_krealloc_BF+0xf56>
f012f002:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f008:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f00f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f015:	01 d0                	add    %edx,%eax
f012f017:	8b 40 04             	mov    0x4(%eax),%eax
f012f01a:	83 f8 07             	cmp    $0x7,%eax
f012f01d:	74 17                	je     f012f036 <test_krealloc_BF+0xf6d>
			panic(
f012f01f:	83 ec 04             	sub    $0x4,%esp
f012f022:	68 ac c4 13 f0       	push   $0xf013c4ac
f012f027:	68 d5 11 00 00       	push   $0x11d5
f012f02c:	68 7a b1 13 f0       	push   $0xf013b17a
f012f031:	e8 cf 11 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012f036:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012f03c:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012f042:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f048:	8a 00                	mov    (%eax),%al
f012f04a:	3c 08                	cmp    $0x8,%al
f012f04c:	75 1b                	jne    f012f069 <test_krealloc_BF+0xfa0>
f012f04e:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012f054:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f05b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f061:	01 d0                	add    %edx,%eax
f012f063:	8a 00                	mov    (%eax),%al
f012f065:	3c 08                	cmp    $0x8,%al
f012f067:	74 17                	je     f012f080 <test_krealloc_BF+0xfb7>
			panic(
f012f069:	83 ec 04             	sub    $0x4,%esp
f012f06c:	68 ac c4 13 f0       	push   $0xf013c4ac
f012f071:	68 da 11 00 00       	push   $0x11da
f012f076:	68 7a b1 13 f0       	push   $0xf013b17a
f012f07b:	e8 85 11 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012f080:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f086:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f08a:	66 83 f8 08          	cmp    $0x8,%ax
f012f08e:	75 1f                	jne    f012f0af <test_krealloc_BF+0xfe6>
f012f090:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012f096:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f09d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f0a3:	01 d0                	add    %edx,%eax
f012f0a5:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f0a9:	66 83 f8 08          	cmp    $0x8,%ax
f012f0ad:	74 17                	je     f012f0c6 <test_krealloc_BF+0xffd>
			panic(
f012f0af:	83 ec 04             	sub    $0x4,%esp
f012f0b2:	68 ac c4 13 f0       	push   $0xf013c4ac
f012f0b7:	68 dd 11 00 00       	push   $0x11dd
f012f0bc:	68 7a b1 13 f0       	push   $0xf013b17a
f012f0c1:	e8 3f 11 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012f0c6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f0cc:	8b 40 04             	mov    0x4(%eax),%eax
f012f0cf:	83 f8 08             	cmp    $0x8,%eax
f012f0d2:	75 1d                	jne    f012f0f1 <test_krealloc_BF+0x1028>
f012f0d4:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012f0da:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f0e1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f0e7:	01 d0                	add    %edx,%eax
f012f0e9:	8b 40 04             	mov    0x4(%eax),%eax
f012f0ec:	83 f8 08             	cmp    $0x8,%eax
f012f0ef:	74 17                	je     f012f108 <test_krealloc_BF+0x103f>
			panic(
f012f0f1:	83 ec 04             	sub    $0x4,%esp
f012f0f4:	68 ac c4 13 f0       	push   $0xf013c4ac
f012f0f9:	68 e0 11 00 00       	push   $0x11e0
f012f0fe:	68 7a b1 13 f0       	push   $0xf013b17a
f012f103:	e8 fd 10 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012f108:	e8 d6 dc fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012f10d:	89 c2                	mov    %eax,%edx
f012f10f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f112:	39 c2                	cmp    %eax,%edx
f012f114:	74 17                	je     f012f12d <test_krealloc_BF+0x1064>
			panic(
f012f116:	83 ec 04             	sub    $0x4,%esp
f012f119:	68 6c c5 13 f0       	push   $0xf013c56c
f012f11e:	68 e4 11 00 00       	push   $0x11e4
f012f123:	68 7a b1 13 f0       	push   $0xf013b17a
f012f128:	e8 d8 10 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012f12d:	83 ec 0c             	sub    $0xc,%esp
f012f130:	68 b8 c5 13 f0       	push   $0xf013c5b8
f012f135:	e8 d4 1b fd ff       	call   f0100d0e <cprintf>
f012f13a:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012f13d:	e8 a1 dc fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012f142:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f145:	e8 5c 4c fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012f14a:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012f150:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012f156:	83 ec 08             	sub    $0x8,%esp
f012f159:	6a 00                	push   $0x0
f012f15b:	50                   	push   %eax
f012f15c:	e8 e3 8b fd ff       	call   f0107d44 <krealloc>
f012f161:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f164:	e8 3d 4c fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012f169:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f16f:	74 17                	je     f012f188 <test_krealloc_BF+0x10bf>
			panic(
f012f171:	83 ec 04             	sub    $0x4,%esp
f012f174:	68 dc c5 13 f0       	push   $0xf013c5dc
f012f179:	68 f1 11 00 00       	push   $0x11f1
f012f17e:	68 7a b1 13 f0       	push   $0xf013b17a
f012f183:	e8 7d 10 fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012f188:	e8 56 dc fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012f18d:	89 c2                	mov    %eax,%edx
f012f18f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f192:	29 c2                	sub    %eax,%edx
f012f194:	89 d0                	mov    %edx,%eax
f012f196:	3d 00 01 00 00       	cmp    $0x100,%eax
f012f19b:	74 17                	je     f012f1b4 <test_krealloc_BF+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012f19d:	83 ec 04             	sub    $0x4,%esp
f012f1a0:	68 50 c6 13 f0       	push   $0xf013c650
f012f1a5:	68 f3 11 00 00       	push   $0x11f3
f012f1aa:	68 7a b1 13 f0       	push   $0xf013b17a
f012f1af:	e8 51 10 fd ff       	call   f0100205 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012f1b4:	e8 2a dc fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012f1b9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f1bc:	e8 e5 4b fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012f1c1:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012f1c7:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012f1cd:	83 ec 08             	sub    $0x8,%esp
f012f1d0:	6a 00                	push   $0x0
f012f1d2:	50                   	push   %eax
f012f1d3:	e8 6c 8b fd ff       	call   f0107d44 <krealloc>
f012f1d8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f1db:	e8 c6 4b fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012f1e0:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f1e6:	74 17                	je     f012f1ff <test_krealloc_BF+0x1136>
			panic(
f012f1e8:	83 ec 04             	sub    $0x4,%esp
f012f1eb:	68 dc c5 13 f0       	push   $0xf013c5dc
f012f1f0:	68 fc 11 00 00       	push   $0x11fc
f012f1f5:	68 7a b1 13 f0       	push   $0xf013b17a
f012f1fa:	e8 06 10 fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012f1ff:	e8 df db fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012f204:	89 c2                	mov    %eax,%edx
f012f206:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f209:	29 c2                	sub    %eax,%edx
f012f20b:	89 d0                	mov    %edx,%eax
f012f20d:	3d 00 01 00 00       	cmp    $0x100,%eax
f012f212:	74 17                	je     f012f22b <test_krealloc_BF+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012f214:	83 ec 04             	sub    $0x4,%esp
f012f217:	68 50 c6 13 f0       	push   $0xf013c650
f012f21c:	68 fe 11 00 00       	push   $0x11fe
f012f221:	68 7a b1 13 f0       	push   $0xf013b17a
f012f226:	e8 da 0f fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012f22b:	e8 b3 db fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012f230:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f233:	e8 6e 4b fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012f238:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012f23e:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012f244:	83 ec 08             	sub    $0x8,%esp
f012f247:	6a 00                	push   $0x0
f012f249:	50                   	push   %eax
f012f24a:	e8 f5 8a fd ff       	call   f0107d44 <krealloc>
f012f24f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f252:	e8 4f 4b fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012f257:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f25d:	74 17                	je     f012f276 <test_krealloc_BF+0x11ad>
			panic(
f012f25f:	83 ec 04             	sub    $0x4,%esp
f012f262:	68 94 b1 13 f0       	push   $0xf013b194
f012f267:	68 06 12 00 00       	push   $0x1206
f012f26c:	68 7a b1 13 f0       	push   $0xf013b17a
f012f271:	e8 8f 0f fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012f276:	e8 68 db fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012f27b:	89 c2                	mov    %eax,%edx
f012f27d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f280:	29 c2                	sub    %eax,%edx
f012f282:	89 d0                	mov    %edx,%eax
f012f284:	3d 00 02 00 00       	cmp    $0x200,%eax
f012f289:	74 17                	je     f012f2a2 <test_krealloc_BF+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012f28b:	83 ec 04             	sub    $0x4,%esp
f012f28e:	68 50 c6 13 f0       	push   $0xf013c650
f012f293:	68 08 12 00 00       	push   $0x1208
f012f298:	68 7a b1 13 f0       	push   $0xf013b17a
f012f29d:	e8 63 0f fd ff       	call   f0100205 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012f2a2:	e8 3c db fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012f2a7:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f2aa:	e8 f7 4a fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012f2af:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012f2b5:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012f2bb:	83 ec 08             	sub    $0x8,%esp
f012f2be:	6a 00                	push   $0x0
f012f2c0:	50                   	push   %eax
f012f2c1:	e8 7e 8a fd ff       	call   f0107d44 <krealloc>
f012f2c6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f2c9:	e8 d8 4a fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012f2ce:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f2d4:	74 17                	je     f012f2ed <test_krealloc_BF+0x1224>
			panic(
f012f2d6:	83 ec 04             	sub    $0x4,%esp
f012f2d9:	68 dc c5 13 f0       	push   $0xf013c5dc
f012f2de:	68 10 12 00 00       	push   $0x1210
f012f2e3:	68 7a b1 13 f0       	push   $0xf013b17a
f012f2e8:	e8 18 0f fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012f2ed:	e8 f1 da fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012f2f2:	89 c2                	mov    %eax,%edx
f012f2f4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f2f7:	29 c2                	sub    %eax,%edx
f012f2f9:	89 d0                	mov    %edx,%eax
f012f2fb:	3d 00 03 00 00       	cmp    $0x300,%eax
f012f300:	74 17                	je     f012f319 <test_krealloc_BF+0x1250>
			panic(
f012f302:	83 ec 04             	sub    $0x4,%esp
f012f305:	68 84 c6 13 f0       	push   $0xf013c684
f012f30a:	68 13 12 00 00       	push   $0x1213
f012f30f:	68 7a b1 13 f0       	push   $0xf013b17a
f012f314:	e8 ec 0e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012f319:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012f320:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012f327:	eb 48                	jmp    f012f371 <test_krealloc_BF+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012f329:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012f32c:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f012f331:	83 ec 04             	sub    $0x4,%esp
f012f334:	8d 8d 9c fd ff ff    	lea    -0x264(%ebp),%ecx
f012f33a:	51                   	push   %ecx
f012f33b:	52                   	push   %edx
f012f33c:	50                   	push   %eax
f012f33d:	e8 4d 77 fd ff       	call   f0106a8f <get_page_table>
f012f342:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012f345:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012f34b:	85 c0                	test   %eax,%eax
f012f34d:	75 17                	jne    f012f366 <test_krealloc_BF+0x129d>
					panic(
f012f34f:	83 ec 04             	sub    $0x4,%esp
f012f352:	68 7c ba 13 f0       	push   $0xf013ba7c
f012f357:	68 1f 12 00 00       	push   $0x121f
f012f35c:	68 7a b1 13 f0       	push   $0xf013b17a
f012f361:	e8 9f 0e fd ff       	call   f0100205 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012f366:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012f36d:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012f371:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012f375:	78 b2                	js     f012f329 <test_krealloc_BF+0x1260>
f012f377:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012f37b:	7f 09                	jg     f012f386 <test_krealloc_BF+0x12bd>
f012f37d:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012f384:	76 a3                	jbe    f012f329 <test_krealloc_BF+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012f386:	83 ec 0c             	sub    $0xc,%esp
f012f389:	68 c3 c6 13 f0       	push   $0xf013c6c3
f012f38e:	e8 7b 19 fd ff       	call   f0100d0e <cprintf>
f012f393:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012f396:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f39c:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012f3a2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f3a9:	eb 21                	jmp    f012f3cc <test_krealloc_BF+0x1303>
			sums[0] += ptr[i];
f012f3ab:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012f3b1:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012f3b4:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012f3ba:	01 c8                	add    %ecx,%eax
f012f3bc:	8a 00                	mov    (%eax),%al
f012f3be:	0f be c0             	movsbl %al,%eax
f012f3c1:	01 d0                	add    %edx,%eax
f012f3c3:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012f3c9:	ff 45 dc             	incl   -0x24(%ebp)
f012f3cc:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012f3d2:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f3d5:	7d d4                	jge    f012f3ab <test_krealloc_BF+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012f3d7:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012f3dd:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012f3e3:	42                   	inc    %edx
f012f3e4:	01 d2                	add    %edx,%edx
f012f3e6:	39 d0                	cmp    %edx,%eax
f012f3e8:	74 17                	je     f012f401 <test_krealloc_BF+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012f3ea:	83 ec 04             	sub    $0x4,%esp
f012f3ed:	68 cc c6 13 f0       	push   $0xf013c6cc
f012f3f2:	68 31 12 00 00       	push   $0x1231
f012f3f7:	68 7a b1 13 f0       	push   $0xf013b17a
f012f3fc:	e8 04 0e fd ff       	call   f0100205 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012f401:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012f407:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012f40d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f414:	eb 25                	jmp    f012f43b <test_krealloc_BF+0x1372>
			sums[1] += intArr[i];
f012f416:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012f41c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f41f:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012f426:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012f42c:	01 c8                	add    %ecx,%eax
f012f42e:	8b 00                	mov    (%eax),%eax
f012f430:	01 d0                	add    %edx,%eax
f012f432:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012f438:	ff 45 dc             	incl   -0x24(%ebp)
f012f43b:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012f441:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f444:	7d d0                	jge    f012f416 <test_krealloc_BF+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012f446:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012f44c:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012f452:	42                   	inc    %edx
f012f453:	c1 e2 02             	shl    $0x2,%edx
f012f456:	39 d0                	cmp    %edx,%eax
f012f458:	74 17                	je     f012f471 <test_krealloc_BF+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012f45a:	83 ec 04             	sub    $0x4,%esp
f012f45d:	68 cc c6 13 f0       	push   $0xf013c6cc
f012f462:	68 3b 12 00 00       	push   $0x123b
f012f467:	68 7a b1 13 f0       	push   $0xf013b17a
f012f46c:	e8 94 0d fd ff       	call   f0100205 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012f471:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f477:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012f47d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f484:	eb 24                	jmp    f012f4aa <test_krealloc_BF+0x13e1>
			sums[2] += shortArr[i];
f012f486:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012f48c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f48f:	01 c0                	add    %eax,%eax
f012f491:	89 c1                	mov    %eax,%ecx
f012f493:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f499:	01 c8                	add    %ecx,%eax
f012f49b:	66 8b 00             	mov    (%eax),%ax
f012f49e:	98                   	cwtl   
f012f49f:	01 d0                	add    %edx,%eax
f012f4a1:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012f4a7:	ff 45 dc             	incl   -0x24(%ebp)
f012f4aa:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f4b0:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f4b3:	7d d1                	jge    f012f486 <test_krealloc_BF+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012f4b5:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012f4bb:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f4c1:	8d 48 01             	lea    0x1(%eax),%ecx
f012f4c4:	89 c8                	mov    %ecx,%eax
f012f4c6:	c1 e0 02             	shl    $0x2,%eax
f012f4c9:	01 c8                	add    %ecx,%eax
f012f4cb:	39 c2                	cmp    %eax,%edx
f012f4cd:	74 17                	je     f012f4e6 <test_krealloc_BF+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012f4cf:	83 ec 04             	sub    $0x4,%esp
f012f4d2:	68 cc c6 13 f0       	push   $0xf013c6cc
f012f4d7:	68 45 12 00 00       	push   $0x1245
f012f4dc:	68 7a b1 13 f0       	push   $0xf013b17a
f012f4e1:	e8 1f 0d fd ff       	call   f0100205 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012f4e6:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f4ec:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012f4f2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f4f9:	eb 70                	jmp    f012f56b <test_krealloc_BF+0x14a2>
			sums[3] += structArr[i].a;
f012f4fb:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f012f501:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f504:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f50b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f511:	01 c8                	add    %ecx,%eax
f012f513:	8a 00                	mov    (%eax),%al
f012f515:	0f be c0             	movsbl %al,%eax
f012f518:	01 d0                	add    %edx,%eax
f012f51a:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
			sums[4] += structArr[i].b;
f012f520:	8b 95 b0 fd ff ff    	mov    -0x250(%ebp),%edx
f012f526:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f529:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f530:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f536:	01 c8                	add    %ecx,%eax
f012f538:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f53c:	98                   	cwtl   
f012f53d:	01 d0                	add    %edx,%eax
f012f53f:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
			sums[5] += structArr[i].c;
f012f545:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f012f54b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f54e:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f555:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f55b:	01 c8                	add    %ecx,%eax
f012f55d:	8b 40 04             	mov    0x4(%eax),%eax
f012f560:	01 d0                	add    %edx,%eax
f012f562:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012f568:	ff 45 dc             	incl   -0x24(%ebp)
f012f56b:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f571:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f574:	7d 85                	jge    f012f4fb <test_krealloc_BF+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012f576:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f012f57c:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f582:	8d 50 01             	lea    0x1(%eax),%edx
f012f585:	89 d0                	mov    %edx,%eax
f012f587:	01 c0                	add    %eax,%eax
f012f589:	01 d0                	add    %edx,%eax
f012f58b:	01 c0                	add    %eax,%eax
f012f58d:	01 d0                	add    %edx,%eax
f012f58f:	39 c1                	cmp    %eax,%ecx
f012f591:	75 3a                	jne    f012f5cd <test_krealloc_BF+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012f593:	8b 8d b0 fd ff ff    	mov    -0x250(%ebp),%ecx
f012f599:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f59f:	8d 50 01             	lea    0x1(%eax),%edx
f012f5a2:	89 d0                	mov    %edx,%eax
f012f5a4:	01 c0                	add    %eax,%eax
f012f5a6:	01 d0                	add    %edx,%eax
f012f5a8:	01 c0                	add    %eax,%eax
f012f5aa:	01 d0                	add    %edx,%eax
f012f5ac:	39 c1                	cmp    %eax,%ecx
f012f5ae:	75 1d                	jne    f012f5cd <test_krealloc_BF+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012f5b0:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f012f5b6:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f5bc:	8d 50 01             	lea    0x1(%eax),%edx
f012f5bf:	89 d0                	mov    %edx,%eax
f012f5c1:	01 c0                	add    %eax,%eax
f012f5c3:	01 d0                	add    %edx,%eax
f012f5c5:	01 c0                	add    %eax,%eax
f012f5c7:	01 d0                	add    %edx,%eax
f012f5c9:	39 c1                	cmp    %eax,%ecx
f012f5cb:	74 17                	je     f012f5e4 <test_krealloc_BF+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012f5cd:	83 ec 04             	sub    $0x4,%esp
f012f5d0:	68 cc c6 13 f0       	push   $0xf013c6cc
f012f5d5:	68 53 12 00 00       	push   $0x1253
f012f5da:	68 7a b1 13 f0       	push   $0xf013b17a
f012f5df:	e8 21 0c fd ff       	call   f0100205 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012f5e4:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012f5eb:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012f5ee:	e8 f0 d7 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012f5f3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012f5f6:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f5fc:	83 ec 08             	sub    $0x8,%esp
f012f5ff:	68 00 3c 00 00       	push   $0x3c00
f012f604:	50                   	push   %eax
f012f605:	e8 3a 87 fd ff       	call   f0107d44 <krealloc>
f012f60a:	83 c4 10             	add    $0x10,%esp
f012f60d:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f613:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012f619:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f61e:	77 17                	ja     f012f637 <test_krealloc_BF+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f620:	83 ec 04             	sub    $0x4,%esp
f012f623:	68 20 c4 13 f0       	push   $0xf013c420
f012f628:	68 5f 12 00 00       	push   $0x125f
f012f62d:	68 7a b1 13 f0       	push   $0xf013b17a
f012f632:	e8 ce 0b fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012f637:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f63d:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012f643:	74 17                	je     f012f65c <test_krealloc_BF+0x1593>
			panic(
f012f645:	83 ec 04             	sub    $0x4,%esp
f012f648:	68 04 c7 13 f0       	push   $0xf013c704
f012f64d:	68 62 12 00 00       	push   $0x1262
f012f652:	68 7a b1 13 f0       	push   $0xf013b17a
f012f657:	e8 a9 0b fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012f65c:	e8 82 d7 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012f661:	89 c2                	mov    %eax,%edx
f012f663:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f666:	39 c2                	cmp    %eax,%edx
f012f668:	74 17                	je     f012f681 <test_krealloc_BF+0x15b8>
			panic(
f012f66a:	83 ec 04             	sub    $0x4,%esp
f012f66d:	68 70 c7 13 f0       	push   $0xf013c770
f012f672:	68 65 12 00 00       	push   $0x1265
f012f677:	68 7a b1 13 f0       	push   $0xf013b17a
f012f67c:	e8 84 0b fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012f681:	e8 5d d7 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012f686:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012f689:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f68f:	83 ec 08             	sub    $0x8,%esp
f012f692:	68 00 fc 0f 00       	push   $0xffc00
f012f697:	50                   	push   %eax
f012f698:	e8 a7 86 fd ff       	call   f0107d44 <krealloc>
f012f69d:	83 c4 10             	add    $0x10,%esp
f012f6a0:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f6a6:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012f6ac:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f6b1:	77 17                	ja     f012f6ca <test_krealloc_BF+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f6b3:	83 ec 04             	sub    $0x4,%esp
f012f6b6:	68 20 c4 13 f0       	push   $0xf013c420
f012f6bb:	68 6b 12 00 00       	push   $0x126b
f012f6c0:	68 7a b1 13 f0       	push   $0xf013b17a
f012f6c5:	e8 3b 0b fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012f6ca:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f6d0:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012f6d6:	74 17                	je     f012f6ef <test_krealloc_BF+0x1626>
			panic(
f012f6d8:	83 ec 04             	sub    $0x4,%esp
f012f6db:	68 04 c7 13 f0       	push   $0xf013c704
f012f6e0:	68 6e 12 00 00       	push   $0x126e
f012f6e5:	68 7a b1 13 f0       	push   $0xf013b17a
f012f6ea:	e8 16 0b fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012f6ef:	e8 ef d6 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012f6f4:	89 c2                	mov    %eax,%edx
f012f6f6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f6f9:	39 c2                	cmp    %eax,%edx
f012f6fb:	74 17                	je     f012f714 <test_krealloc_BF+0x164b>
			panic(
f012f6fd:	83 ec 04             	sub    $0x4,%esp
f012f700:	68 70 c7 13 f0       	push   $0xf013c770
f012f705:	68 71 12 00 00       	push   $0x1271
f012f70a:	68 7a b1 13 f0       	push   $0xf013b17a
f012f70f:	e8 f1 0a fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012f714:	e8 ca d6 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012f719:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012f71c:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f722:	83 ec 08             	sub    $0x8,%esp
f012f725:	68 00 fc 0f 00       	push   $0xffc00
f012f72a:	50                   	push   %eax
f012f72b:	e8 14 86 fd ff       	call   f0107d44 <krealloc>
f012f730:	83 c4 10             	add    $0x10,%esp
f012f733:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f739:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012f73f:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f744:	77 17                	ja     f012f75d <test_krealloc_BF+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f746:	83 ec 04             	sub    $0x4,%esp
f012f749:	68 20 c4 13 f0       	push   $0xf013c420
f012f74e:	68 77 12 00 00       	push   $0x1277
f012f753:	68 7a b1 13 f0       	push   $0xf013b17a
f012f758:	e8 a8 0a fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012f75d:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f763:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012f769:	74 17                	je     f012f782 <test_krealloc_BF+0x16b9>
			panic(
f012f76b:	83 ec 04             	sub    $0x4,%esp
f012f76e:	68 04 c7 13 f0       	push   $0xf013c704
f012f773:	68 7a 12 00 00       	push   $0x127a
f012f778:	68 7a b1 13 f0       	push   $0xf013b17a
f012f77d:	e8 83 0a fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012f782:	e8 5c d6 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012f787:	89 c2                	mov    %eax,%edx
f012f789:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f78c:	39 c2                	cmp    %eax,%edx
f012f78e:	74 17                	je     f012f7a7 <test_krealloc_BF+0x16de>
			panic(
f012f790:	83 ec 04             	sub    $0x4,%esp
f012f793:	68 70 c7 13 f0       	push   $0xf013c770
f012f798:	68 7d 12 00 00       	push   $0x127d
f012f79d:	68 7a b1 13 f0       	push   $0xf013b17a
f012f7a2:	e8 5e 0a fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012f7a7:	e8 37 d6 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012f7ac:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012f7af:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012f7b5:	83 ec 08             	sub    $0x8,%esp
f012f7b8:	68 00 fc 0f 00       	push   $0xffc00
f012f7bd:	50                   	push   %eax
f012f7be:	e8 81 85 fd ff       	call   f0107d44 <krealloc>
f012f7c3:	83 c4 10             	add    $0x10,%esp
f012f7c6:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f7cc:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012f7d2:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f7d7:	77 17                	ja     f012f7f0 <test_krealloc_BF+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f7d9:	83 ec 04             	sub    $0x4,%esp
f012f7dc:	68 20 c4 13 f0       	push   $0xf013c420
f012f7e1:	68 85 12 00 00       	push   $0x1285
f012f7e6:	68 7a b1 13 f0       	push   $0xf013b17a
f012f7eb:	e8 15 0a fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[3])
f012f7f0:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012f7f6:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012f7fc:	74 17                	je     f012f815 <test_krealloc_BF+0x174c>
			panic(
f012f7fe:	83 ec 04             	sub    $0x4,%esp
f012f801:	68 b4 c7 13 f0       	push   $0xf013c7b4
f012f806:	68 88 12 00 00       	push   $0x1288
f012f80b:	68 7a b1 13 f0       	push   $0xf013b17a
f012f810:	e8 f0 09 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012f815:	e8 c9 d5 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012f81a:	89 c2                	mov    %eax,%edx
f012f81c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f81f:	39 c2                	cmp    %eax,%edx
f012f821:	74 17                	je     f012f83a <test_krealloc_BF+0x1771>
			panic(
f012f823:	83 ec 04             	sub    $0x4,%esp
f012f826:	68 70 c7 13 f0       	push   $0xf013c770
f012f82b:	68 8b 12 00 00       	push   $0x128b
f012f830:	68 7a b1 13 f0       	push   $0xf013b17a
f012f835:	e8 cb 09 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012f83a:	83 ec 0c             	sub    $0xc,%esp
f012f83d:	68 93 b9 13 f0       	push   $0xf013b993
f012f842:	e8 c7 14 fd ff       	call   f0100d0e <cprintf>
f012f847:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012f84a:	e8 94 d5 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012f84f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], (1 * Mega - kilo) + (7 * kilo));
f012f852:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f858:	83 ec 08             	sub    $0x8,%esp
f012f85b:	68 00 18 10 00       	push   $0x101800
f012f860:	50                   	push   %eax
f012f861:	e8 de 84 fd ff       	call   f0107d44 <krealloc>
f012f866:	83 c4 10             	add    $0x10,%esp
f012f869:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f86c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f86f:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f874:	77 17                	ja     f012f88d <test_krealloc_BF+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f876:	83 ec 04             	sub    $0x4,%esp
f012f879:	68 20 c4 13 f0       	push   $0xf013c420
f012f87e:	68 93 12 00 00       	push   $0x1293
f012f883:	68 7a b1 13 f0       	push   $0xf013b17a
f012f888:	e8 78 09 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012f88d:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f893:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f896:	74 17                	je     f012f8af <test_krealloc_BF+0x17e6>
			panic(
f012f898:	83 ec 04             	sub    $0x4,%esp
f012f89b:	68 14 c8 13 f0       	push   $0xf013c814
f012f8a0:	68 96 12 00 00       	push   $0x1296
f012f8a5:	68 7a b1 13 f0       	push   $0xf013b17a
f012f8aa:	e8 56 09 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012f8af:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f8b2:	e8 2c d5 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012f8b7:	29 c3                	sub    %eax,%ebx
f012f8b9:	89 d8                	mov    %ebx,%eax
f012f8bb:	83 f8 02             	cmp    $0x2,%eax
f012f8be:	74 17                	je     f012f8d7 <test_krealloc_BF+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012f8c0:	83 ec 04             	sub    $0x4,%esp
f012f8c3:	68 90 c8 13 f0       	push   $0xf013c890
f012f8c8:	68 98 12 00 00       	push   $0x1298
f012f8cd:	68 7a b1 13 f0       	push   $0xf013b17a
f012f8d2:	e8 2e 09 fd ff       	call   f0100205 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012f8d7:	e8 07 d5 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012f8dc:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012f8df:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f8e5:	83 ec 08             	sub    $0x8,%esp
f012f8e8:	68 00 fc 3f 00       	push   $0x3ffc00
f012f8ed:	50                   	push   %eax
f012f8ee:	e8 51 84 fd ff       	call   f0107d44 <krealloc>
f012f8f3:	83 c4 10             	add    $0x10,%esp
f012f8f6:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f8f9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f8fc:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f901:	77 17                	ja     f012f91a <test_krealloc_BF+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f903:	83 ec 04             	sub    $0x4,%esp
f012f906:	68 20 c4 13 f0       	push   $0xf013c420
f012f90b:	68 9e 12 00 00       	push   $0x129e
f012f910:	68 7a b1 13 f0       	push   $0xf013b17a
f012f915:	e8 eb 08 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012f91a:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f920:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f923:	74 17                	je     f012f93c <test_krealloc_BF+0x1873>
			panic(
f012f925:	83 ec 04             	sub    $0x4,%esp
f012f928:	68 14 c8 13 f0       	push   $0xf013c814
f012f92d:	68 a1 12 00 00       	push   $0x12a1
f012f932:	68 7a b1 13 f0       	push   $0xf013b17a
f012f937:	e8 c9 08 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012f93c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f93f:	e8 9f d4 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012f944:	29 c3                	sub    %eax,%ebx
f012f946:	89 d8                	mov    %ebx,%eax
f012f948:	3d 00 02 00 00       	cmp    $0x200,%eax
f012f94d:	74 17                	je     f012f966 <test_krealloc_BF+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012f94f:	83 ec 04             	sub    $0x4,%esp
f012f952:	68 90 c8 13 f0       	push   $0xf013c890
f012f957:	68 a4 12 00 00       	push   $0x12a4
f012f95c:	68 7a b1 13 f0       	push   $0xf013b17a
f012f961:	e8 9f 08 fd ff       	call   f0100205 <_panic>


	}
	cprintf("\b\b\b60%");
f012f966:	83 ec 0c             	sub    $0xc,%esp
f012f969:	68 d8 b9 13 f0       	push   $0xf013b9d8
f012f96e:	e8 9b 13 fd ff       	call   f0100d0e <cprintf>
f012f973:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012f976:	e8 68 d4 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012f97b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012f97e:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f984:	83 ec 08             	sub    $0x8,%esp
f012f987:	68 00 fc 9f 00       	push   $0x9ffc00
f012f98c:	50                   	push   %eax
f012f98d:	e8 b2 83 fd ff       	call   f0107d44 <krealloc>
f012f992:	83 c4 10             	add    $0x10,%esp
f012f995:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f998:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f99b:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f9a0:	77 17                	ja     f012f9b9 <test_krealloc_BF+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f9a2:	83 ec 04             	sub    $0x4,%esp
f012f9a5:	68 20 c4 13 f0       	push   $0xf013c420
f012f9aa:	68 af 12 00 00       	push   $0x12af
f012f9af:	68 7a b1 13 f0       	push   $0xf013b17a
f012f9b4:	e8 4c 08 fd ff       	call   f0100205 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (11 * Mega))
f012f9b9:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012f9c0:	10 00 00 
f012f9c3:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012f9c9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012f9ce:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012f9d4:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012f9da:	ba 00 00 00 00       	mov    $0x0,%edx
f012f9df:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012f9e5:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012f9eb:	29 d0                	sub    %edx,%eax
f012f9ed:	89 c1                	mov    %eax,%ecx
f012f9ef:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012f9f6:	10 00 00 
f012f9f9:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012f9fe:	0f b6 d0             	movzbl %al,%edx
f012fa01:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012fa07:	01 d0                	add    %edx,%eax
f012fa09:	48                   	dec    %eax
f012fa0a:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012fa10:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012fa16:	ba 00 00 00 00       	mov    $0x0,%edx
f012fa1b:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012fa21:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012fa27:	29 d0                	sub    %edx,%eax
f012fa29:	01 c1                	add    %eax,%ecx
f012fa2b:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012fa32:	10 00 00 
f012fa35:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012fa3a:	0f b6 c0             	movzbl %al,%eax
f012fa3d:	c1 e0 04             	shl    $0x4,%eax
f012fa40:	89 c2                	mov    %eax,%edx
f012fa42:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012fa48:	01 d0                	add    %edx,%eax
f012fa4a:	48                   	dec    %eax
f012fa4b:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012fa51:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012fa57:	ba 00 00 00 00       	mov    $0x0,%edx
f012fa5c:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012fa62:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012fa68:	29 d0                	sub    %edx,%eax
f012fa6a:	01 c8                	add    %ecx,%eax
f012fa6c:	8d 90 00 40 b0 f6    	lea    -0x94fc000(%eax),%edx
f012fa72:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fa75:	39 c2                	cmp    %eax,%edx
f012fa77:	74 18                	je     f012fa91 <test_krealloc_BF+0x19c8>
			panic(
f012fa79:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fa7c:	50                   	push   %eax
f012fa7d:	68 c4 c8 13 f0       	push   $0xf013c8c4
f012fa82:	68 b3 12 00 00       	push   $0x12b3
f012fa87:	68 7a b1 13 f0       	push   $0xf013b17a
f012fa8c:	e8 74 07 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012fa91:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012fa97:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012fa9a:	75 17                	jne    f012fab3 <test_krealloc_BF+0x19ea>
			panic(
f012fa9c:	83 ec 04             	sub    $0x4,%esp
f012fa9f:	68 08 c9 13 f0       	push   $0xf013c908
f012faa4:	68 b6 12 00 00       	push   $0x12b6
f012faa9:	68 7a b1 13 f0       	push   $0xf013b17a
f012faae:	e8 52 07 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012fab3:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012fab6:	e8 28 d3 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012fabb:	29 c3                	sub    %eax,%ebx
f012fabd:	89 d8                	mov    %ebx,%eax
f012fabf:	3d 00 06 00 00       	cmp    $0x600,%eax
f012fac4:	74 17                	je     f012fadd <test_krealloc_BF+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012fac6:	83 ec 04             	sub    $0x4,%esp
f012fac9:	68 90 c8 13 f0       	push   $0xf013c890
f012face:	68 b9 12 00 00       	push   $0x12b9
f012fad3:	68 7a b1 13 f0       	push   $0xf013b17a
f012fad8:	e8 28 07 fd ff       	call   f0100205 <_panic>

		ptr_allocations[4] = newAddress;
f012fadd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fae0:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 4 MB
		freeFrames = sys_calculate_free_frames();
f012fae6:	e8 f8 d2 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012faeb:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (4 * Mega - kilo));
f012faee:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012faf4:	83 ec 08             	sub    $0x8,%esp
f012faf7:	68 00 fc 3f 00       	push   $0x3ffc00
f012fafc:	50                   	push   %eax
f012fafd:	e8 42 82 fd ff       	call   f0107d44 <krealloc>
f012fb02:	83 c4 10             	add    $0x10,%esp
f012fb05:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012fb08:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fb0b:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fb10:	77 17                	ja     f012fb29 <test_krealloc_BF+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fb12:	83 ec 04             	sub    $0x4,%esp
f012fb15:	68 20 c4 13 f0       	push   $0xf013c420
f012fb1a:	68 c2 12 00 00       	push   $0x12c2
f012fb1f:	68 7a b1 13 f0       	push   $0xf013b17a
f012fb24:	e8 dc 06 fd ff       	call   f0100205 <_panic>
		if (newAddress == ptr_allocations[6])
f012fb29:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012fb2f:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012fb32:	75 17                	jne    f012fb4b <test_krealloc_BF+0x1a82>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012fb34:	83 ec 04             	sub    $0x4,%esp
f012fb37:	68 08 c9 13 f0       	push   $0xf013c908
f012fb3c:	68 c4 12 00 00       	push   $0x12c4
f012fb41:	68 7a b1 13 f0       	push   $0xf013b17a
f012fb46:	e8 ba 06 fd ff       	call   f0100205 <_panic>
		if ((uint32)newAddress != ACTUAL_START + 4 * Mega) panic("krealloc: Wrong start address for allocated space");
f012fb4b:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012fb52:	10 00 00 
f012fb55:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012fb5b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012fb60:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012fb66:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012fb6c:	ba 00 00 00 00       	mov    $0x0,%edx
f012fb71:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012fb77:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012fb7d:	29 d0                	sub    %edx,%eax
f012fb7f:	89 c1                	mov    %eax,%ecx
f012fb81:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012fb88:	10 00 00 
f012fb8b:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012fb90:	0f b6 d0             	movzbl %al,%edx
f012fb93:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012fb99:	01 d0                	add    %edx,%eax
f012fb9b:	48                   	dec    %eax
f012fb9c:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012fba2:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012fba8:	ba 00 00 00 00       	mov    $0x0,%edx
f012fbad:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012fbb3:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012fbb9:	29 d0                	sub    %edx,%eax
f012fbbb:	01 c1                	add    %eax,%ecx
f012fbbd:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012fbc4:	10 00 00 
f012fbc7:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012fbcc:	0f b6 c0             	movzbl %al,%eax
f012fbcf:	c1 e0 04             	shl    $0x4,%eax
f012fbd2:	89 c2                	mov    %eax,%edx
f012fbd4:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012fbda:	01 d0                	add    %edx,%eax
f012fbdc:	48                   	dec    %eax
f012fbdd:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012fbe3:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012fbe9:	ba 00 00 00 00       	mov    $0x0,%edx
f012fbee:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012fbf4:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012fbfa:	29 d0                	sub    %edx,%eax
f012fbfc:	01 c8                	add    %ecx,%eax
f012fbfe:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f012fc04:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fc07:	39 c2                	cmp    %eax,%edx
f012fc09:	74 17                	je     f012fc22 <test_krealloc_BF+0x1b59>
f012fc0b:	83 ec 04             	sub    $0x4,%esp
f012fc0e:	68 5c c4 13 f0       	push   $0xf013c45c
f012fc13:	68 c5 12 00 00       	push   $0x12c5
f012fc18:	68 7a b1 13 f0       	push   $0xf013b17a
f012fc1d:	e8 e3 05 fd ff       	call   f0100205 <_panic>

		//1 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 256)
f012fc22:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012fc25:	e8 b9 d1 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012fc2a:	29 c3                	sub    %eax,%ebx
f012fc2c:	89 d8                	mov    %ebx,%eax
f012fc2e:	3d 00 01 00 00       	cmp    $0x100,%eax
f012fc33:	74 17                	je     f012fc4c <test_krealloc_BF+0x1b83>
			panic("krealloc: pages in memory are not loaded correctly");
f012fc35:	83 ec 04             	sub    $0x4,%esp
f012fc38:	68 90 c8 13 f0       	push   $0xf013c890
f012fc3d:	68 c9 12 00 00       	push   $0x12c9
f012fc42:	68 7a b1 13 f0       	push   $0xf013b17a
f012fc47:	e8 b9 05 fd ff       	call   f0100205 <_panic>
		ptr_allocations[6] = newAddress;
f012fc4c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fc4f:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		//Reallocate 1st 3 MB (already reallocated to 4 MB) to 20 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012fc55:	e8 89 d1 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012fc5a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012fc5d:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012fc63:	83 ec 08             	sub    $0x8,%esp
f012fc66:	68 00 fc 3f 01       	push   $0x13ffc00
f012fc6b:	50                   	push   %eax
f012fc6c:	e8 d3 80 fd ff       	call   f0107d44 <krealloc>
f012fc71:	83 c4 10             	add    $0x10,%esp
f012fc74:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012fc77:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fc7a:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fc7f:	77 17                	ja     f012fc98 <test_krealloc_BF+0x1bcf>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fc81:	83 ec 04             	sub    $0x4,%esp
f012fc84:	68 20 c4 13 f0       	push   $0xf013c420
f012fc89:	68 cf 12 00 00       	push   $0x12cf
f012fc8e:	68 7a b1 13 f0       	push   $0xf013b17a
f012fc93:	e8 6d 05 fd ff       	call   f0100205 <_panic>
		if (newAddress == ptr_allocations[6])
f012fc98:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012fc9e:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012fca1:	75 17                	jne    f012fcba <test_krealloc_BF+0x1bf1>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012fca3:	83 ec 04             	sub    $0x4,%esp
f012fca6:	68 08 c9 13 f0       	push   $0xf013c908
f012fcab:	68 d1 12 00 00       	push   $0x12d1
f012fcb0:	68 7a b1 13 f0       	push   $0xf013b17a
f012fcb5:	e8 4b 05 fd ff       	call   f0100205 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (21 * Mega))
f012fcba:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f012fcc1:	10 00 00 
f012fcc4:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012fcca:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012fccf:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f012fcd5:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012fcdb:	ba 00 00 00 00       	mov    $0x0,%edx
f012fce0:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f012fce6:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012fcec:	29 d0                	sub    %edx,%eax
f012fcee:	89 c1                	mov    %eax,%ecx
f012fcf0:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f012fcf7:	10 00 00 
f012fcfa:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012fcff:	0f b6 d0             	movzbl %al,%edx
f012fd02:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012fd08:	01 d0                	add    %edx,%eax
f012fd0a:	48                   	dec    %eax
f012fd0b:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f012fd11:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012fd17:	ba 00 00 00 00       	mov    $0x0,%edx
f012fd1c:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f012fd22:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012fd28:	29 d0                	sub    %edx,%eax
f012fd2a:	01 c1                	add    %eax,%ecx
f012fd2c:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f012fd33:	10 00 00 
f012fd36:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f012fd3b:	0f b6 c0             	movzbl %al,%eax
f012fd3e:	c1 e0 04             	shl    $0x4,%eax
f012fd41:	89 c2                	mov    %eax,%edx
f012fd43:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012fd49:	01 d0                	add    %edx,%eax
f012fd4b:	48                   	dec    %eax
f012fd4c:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f012fd52:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012fd58:	ba 00 00 00 00       	mov    $0x0,%edx
f012fd5d:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f012fd63:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012fd69:	29 d0                	sub    %edx,%eax
f012fd6b:	01 c8                	add    %ecx,%eax
f012fd6d:	8d 90 00 40 50 f7    	lea    -0x8afc000(%eax),%edx
f012fd73:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fd76:	39 c2                	cmp    %eax,%edx
f012fd78:	74 17                	je     f012fd91 <test_krealloc_BF+0x1cc8>
			panic("krealloc: Wrong start address for reallocated space\n");
f012fd7a:	83 ec 04             	sub    $0x4,%esp
f012fd7d:	68 28 ca 13 f0       	push   $0xf013ca28
f012fd82:	68 d3 12 00 00       	push   $0x12d3
f012fd87:	68 7a b1 13 f0       	push   $0xf013b17a
f012fd8c:	e8 74 04 fd ff       	call   f0100205 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != (16 * Mega) / PAGE_SIZE)
f012fd91:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012fd94:	e8 4a d0 fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012fd99:	29 c3                	sub    %eax,%ebx
f012fd9b:	89 d8                	mov    %ebx,%eax
f012fd9d:	3d 00 10 00 00       	cmp    $0x1000,%eax
f012fda2:	74 17                	je     f012fdbb <test_krealloc_BF+0x1cf2>
			panic("krealloc: pages in memory are not loaded correctly");
f012fda4:	83 ec 04             	sub    $0x4,%esp
f012fda7:	68 90 c8 13 f0       	push   $0xf013c890
f012fdac:	68 d6 12 00 00       	push   $0x12d6
f012fdb1:	68 7a b1 13 f0       	push   $0xf013b17a
f012fdb6:	e8 4a 04 fd ff       	call   f0100205 <_panic>

		ptr_allocations[6] = newAddress;
f012fdbb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fdbe:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012fdc4:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012fdca:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012fdd0:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012fdd7:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012fdda:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012fde1:	eb 21                	jmp    f012fe04 <test_krealloc_BF+0x1d3b>
			sums[0] += ptr[i];
f012fde3:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012fde9:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012fdec:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012fdf2:	01 c8                	add    %ecx,%eax
f012fdf4:	8a 00                	mov    (%eax),%al
f012fdf6:	0f be c0             	movsbl %al,%eax
f012fdf9:	01 d0                	add    %edx,%eax
f012fdfb:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012fe01:	ff 45 d8             	incl   -0x28(%ebp)
f012fe04:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012fe0a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012fe0d:	7d d4                	jge    f012fde3 <test_krealloc_BF+0x1d1a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012fe0f:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012fe15:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012fe1b:	42                   	inc    %edx
f012fe1c:	01 d2                	add    %edx,%edx
f012fe1e:	39 d0                	cmp    %edx,%eax
f012fe20:	74 17                	je     f012fe39 <test_krealloc_BF+0x1d70>
			panic("krealloc: invalid read after re-allocations");
f012fe22:	83 ec 04             	sub    $0x4,%esp
f012fe25:	68 c0 c9 13 f0       	push   $0xf013c9c0
f012fe2a:	68 e4 12 00 00       	push   $0x12e4
f012fe2f:	68 7a b1 13 f0       	push   $0xf013b17a
f012fe34:	e8 cc 03 fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012fe39:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012fe3f:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012fe45:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012fe4c:	00 00 00 
		sums[1] = 0;
f012fe4f:	c7 85 a4 fd ff ff 00 	movl   $0x0,-0x25c(%ebp)
f012fe56:	00 00 00 
		sums[2] = 0;
f012fe59:	c7 85 a8 fd ff ff 00 	movl   $0x0,-0x258(%ebp)
f012fe60:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012fe63:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012fe6a:	eb 70                	jmp    f012fedc <test_krealloc_BF+0x1e13>
			sums[0] += structArr[i].a;
f012fe6c:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012fe72:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012fe75:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012fe7c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012fe82:	01 c8                	add    %ecx,%eax
f012fe84:	8a 00                	mov    (%eax),%al
f012fe86:	0f be c0             	movsbl %al,%eax
f012fe89:	01 d0                	add    %edx,%eax
f012fe8b:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
			sums[1] += structArr[i].b;
f012fe91:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012fe97:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012fe9a:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012fea1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012fea7:	01 c8                	add    %ecx,%eax
f012fea9:	66 8b 40 02          	mov    0x2(%eax),%ax
f012fead:	98                   	cwtl   
f012feae:	01 d0                	add    %edx,%eax
f012feb0:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
			sums[2] += structArr[i].c;
f012feb6:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012febc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012febf:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012fec6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012fecc:	01 c8                	add    %ecx,%eax
f012fece:	8b 40 04             	mov    0x4(%eax),%eax
f012fed1:	01 d0                	add    %edx,%eax
f012fed3:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012fed9:	ff 45 d8             	incl   -0x28(%ebp)
f012fedc:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012fee2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012fee5:	7d 85                	jge    f012fe6c <test_krealloc_BF+0x1da3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012fee7:	8b 8d a0 fd ff ff    	mov    -0x260(%ebp),%ecx
f012feed:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012fef3:	8d 50 01             	lea    0x1(%eax),%edx
f012fef6:	89 d0                	mov    %edx,%eax
f012fef8:	01 c0                	add    %eax,%eax
f012fefa:	01 d0                	add    %edx,%eax
f012fefc:	01 c0                	add    %eax,%eax
f012fefe:	01 d0                	add    %edx,%eax
f012ff00:	39 c1                	cmp    %eax,%ecx
f012ff02:	75 3a                	jne    f012ff3e <test_krealloc_BF+0x1e75>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012ff04:	8b 8d a4 fd ff ff    	mov    -0x25c(%ebp),%ecx
f012ff0a:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ff10:	8d 50 01             	lea    0x1(%eax),%edx
f012ff13:	89 d0                	mov    %edx,%eax
f012ff15:	01 c0                	add    %eax,%eax
f012ff17:	01 d0                	add    %edx,%eax
f012ff19:	01 c0                	add    %eax,%eax
f012ff1b:	01 d0                	add    %edx,%eax
f012ff1d:	39 c1                	cmp    %eax,%ecx
f012ff1f:	75 1d                	jne    f012ff3e <test_krealloc_BF+0x1e75>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012ff21:	8b 8d a8 fd ff ff    	mov    -0x258(%ebp),%ecx
f012ff27:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ff2d:	8d 50 01             	lea    0x1(%eax),%edx
f012ff30:	89 d0                	mov    %edx,%eax
f012ff32:	01 c0                	add    %eax,%eax
f012ff34:	01 d0                	add    %edx,%eax
f012ff36:	01 c0                	add    %eax,%eax
f012ff38:	01 d0                	add    %edx,%eax
f012ff3a:	39 c1                	cmp    %eax,%ecx
f012ff3c:	74 17                	je     f012ff55 <test_krealloc_BF+0x1e8c>
			panic("krealloc: invalid read after re-allocations");
f012ff3e:	83 ec 04             	sub    $0x4,%esp
f012ff41:	68 c0 c9 13 f0       	push   $0xf013c9c0
f012ff46:	68 f6 12 00 00       	push   $0x12f6
f012ff4b:	68 7a b1 13 f0       	push   $0xf013b17a
f012ff50:	e8 b0 02 fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012ff55:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ff5b:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012ff61:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012ff68:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012ff6b:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012ff72:	eb 24                	jmp    f012ff98 <test_krealloc_BF+0x1ecf>
			sums[0] += shortArr[i];
f012ff74:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012ff7a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012ff7d:	01 c0                	add    %eax,%eax
f012ff7f:	89 c1                	mov    %eax,%ecx
f012ff81:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ff87:	01 c8                	add    %ecx,%eax
f012ff89:	66 8b 00             	mov    (%eax),%ax
f012ff8c:	98                   	cwtl   
f012ff8d:	01 d0                	add    %edx,%eax
f012ff8f:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012ff95:	ff 45 d8             	incl   -0x28(%ebp)
f012ff98:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012ff9e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012ffa1:	7d d1                	jge    f012ff74 <test_krealloc_BF+0x1eab>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012ffa3:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012ffa9:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012ffaf:	8d 48 01             	lea    0x1(%eax),%ecx
f012ffb2:	89 c8                	mov    %ecx,%eax
f012ffb4:	c1 e0 02             	shl    $0x2,%eax
f012ffb7:	01 c8                	add    %ecx,%eax
f012ffb9:	39 c2                	cmp    %eax,%edx
f012ffbb:	74 17                	je     f012ffd4 <test_krealloc_BF+0x1f0b>
			panic("krealloc: invalid read after re-allocations");
f012ffbd:	83 ec 04             	sub    $0x4,%esp
f012ffc0:	68 c0 c9 13 f0       	push   $0xf013c9c0
f012ffc5:	68 00 13 00 00       	push   $0x1300
f012ffca:	68 7a b1 13 f0       	push   $0xf013b17a
f012ffcf:	e8 31 02 fd ff       	call   f0100205 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012ffd4:	e8 0a ce fd ff       	call   f010cde3 <sys_calculate_free_frames>
f012ffd9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ffdc:	e8 c5 3d fd ff       	call   f0103da6 <pf_calculate_free_frames>
f012ffe1:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f012ffe7:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ffed:	83 ec 08             	sub    $0x8,%esp
f012fff0:	6a 00                	push   $0x0
f012fff2:	50                   	push   %eax
f012fff3:	e8 4c 7d fd ff       	call   f0107d44 <krealloc>
f012fff8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012fffb:	e8 a6 3d fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0130000:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f0130006:	74 17                	je     f013001f <test_krealloc_BF+0x1f56>
			panic(
f0130008:	83 ec 04             	sub    $0x4,%esp
f013000b:	68 94 b1 13 f0       	push   $0xf013b194
f0130010:	68 08 13 00 00       	push   $0x1308
f0130015:	68 7a b1 13 f0       	push   $0xf013b17a
f013001a:	e8 e6 01 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f013001f:	e8 bf cd fd ff       	call   f010cde3 <sys_calculate_free_frames>
f0130024:	89 c2                	mov    %eax,%edx
f0130026:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0130029:	29 c2                	sub    %eax,%edx
f013002b:	89 d0                	mov    %edx,%eax
f013002d:	3d 00 14 00 00       	cmp    $0x1400,%eax
f0130032:	74 17                	je     f013004b <test_krealloc_BF+0x1f82>
			panic("krealloc: pages in memory are not freed correctly");
f0130034:	83 ec 04             	sub    $0x4,%esp
f0130037:	68 50 c6 13 f0       	push   $0xf013c650
f013003c:	68 0a 13 00 00       	push   $0x130a
f0130041:	68 7a b1 13 f0       	push   $0xf013b17a
f0130046:	e8 ba 01 fd ff       	call   f0100205 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f013004b:	e8 93 cd fd ff       	call   f010cde3 <sys_calculate_free_frames>
f0130050:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0130053:	e8 4e 3d fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0130058:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f013005e:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0130064:	83 ec 0c             	sub    $0xc,%esp
f0130067:	50                   	push   %eax
f0130068:	e8 0a 7b fd ff       	call   f0107b77 <kfree>
f013006d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f0130070:	e8 31 3d fd ff       	call   f0103da6 <pf_calculate_free_frames>
f0130075:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f013007b:	74 17                	je     f0130094 <test_krealloc_BF+0x1fcb>
			panic(
f013007d:	83 ec 04             	sub    $0x4,%esp
f0130080:	68 94 b1 13 f0       	push   $0xf013b194
f0130085:	68 12 13 00 00       	push   $0x1312
f013008a:	68 7a b1 13 f0       	push   $0xf013b17a
f013008f:	e8 71 01 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f0130094:	e8 4a cd fd ff       	call   f010cde3 <sys_calculate_free_frames>
f0130099:	89 c2                	mov    %eax,%edx
f013009b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f013009e:	29 c2                	sub    %eax,%edx
f01300a0:	89 d0                	mov    %edx,%eax
f01300a2:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f01300a7:	74 17                	je     f01300c0 <test_krealloc_BF+0x1ff7>
			panic("krealloc: pages in memory are not freed correctly");
f01300a9:	83 ec 04             	sub    $0x4,%esp
f01300ac:	68 50 c6 13 f0       	push   $0xf013c650
f01300b1:	68 14 13 00 00       	push   $0x1314
f01300b6:	68 7a b1 13 f0       	push   $0xf013b17a
f01300bb:	e8 45 01 fd ff       	call   f0100205 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f01300c0:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f01300c7:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f01300ce:	eb 48                	jmp    f0130118 <test_krealloc_BF+0x204f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f01300d0:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01300d3:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f01300d8:	83 ec 04             	sub    $0x4,%esp
f01300db:	8d 8d 98 fd ff ff    	lea    -0x268(%ebp),%ecx
f01300e1:	51                   	push   %ecx
f01300e2:	52                   	push   %edx
f01300e3:	50                   	push   %eax
f01300e4:	e8 a6 69 fd ff       	call   f0106a8f <get_page_table>
f01300e9:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f01300ec:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f01300f2:	85 c0                	test   %eax,%eax
f01300f4:	75 17                	jne    f013010d <test_krealloc_BF+0x2044>
					panic(
f01300f6:	83 ec 04             	sub    $0x4,%esp
f01300f9:	68 7c ba 13 f0       	push   $0xf013ba7c
f01300fe:	68 21 13 00 00       	push   $0x1321
f0130103:	68 7a b1 13 f0       	push   $0xf013b17a
f0130108:	e8 f8 00 fd ff       	call   f0100205 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f013010d:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f0130114:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f0130118:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f013011c:	78 b2                	js     f01300d0 <test_krealloc_BF+0x2007>
f013011e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0130122:	7f 09                	jg     f013012d <test_krealloc_BF+0x2064>
f0130124:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f013012b:	76 a3                	jbe    f01300d0 <test_krealloc_BF+0x2007>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f013012d:	83 ec 0c             	sub    $0xc,%esp
f0130130:	68 5e b3 13 f0       	push   $0xf013b35e
f0130135:	e8 d4 0b fd ff       	call   f0100d0e <cprintf>
f013013a:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc BF completed successfully.\n");
f013013d:	83 ec 0c             	sub    $0xc,%esp
f0130140:	68 60 ca 13 f0       	push   $0xf013ca60
f0130145:	e8 c4 0b fd ff       	call   f0100d0e <cprintf>
f013014a:	83 c4 10             	add    $0x10,%esp
	return 0;
f013014d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0130152:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0130155:	5b                   	pop    %ebx
f0130156:	5f                   	pop    %edi
f0130157:	5d                   	pop    %ebp
f0130158:	c3                   	ret    

f0130159 <test_initialize_dyn_block_system>:

//2022
int test_initialize_dyn_block_system(int freeFrames_before, int freeDiskFrames_before, int freeFrames_after, int freeDiskFrames_after)
{
f0130159:	55                   	push   %ebp
f013015a:	89 e5                	mov    %esp,%ebp
f013015c:	83 ec 28             	sub    $0x28,%esp
		panic("USE_KHEAP = 0 & it shall be 1. Go to 'inc/memlayout.h' and set USE_KHEAP by 1. Then, repeat the test again.");
	if(STATIC_MEMBLOCK_ALLOC != 0)
		panic("STATIC_MEMBLOCK_ALLOC = 1 & it shall be 0. Go to 'inc/dynamic_allocator.h' and set STATIC_MEMBLOCK_ALLOC by 0. Then, repeat the test again.");

	//Check MAX_MEM_BLOCK_CNT
	if(MAX_MEM_BLOCK_CNT != ((0xFFFFF000-0xF6000000)/4096))
f013015f:	a1 00 27 86 f0       	mov    0xf0862700,%eax
f0130164:	3d ff 9f 00 00       	cmp    $0x9fff,%eax
f0130169:	74 17                	je     f0130182 <test_initialize_dyn_block_system+0x29>
	{
		panic("Wrong initialize: MAX_MEM_BLOCK_CNT is not set with the correct size of the array");
f013016b:	83 ec 04             	sub    $0x4,%esp
f013016e:	68 a0 ca 13 f0       	push   $0xf013caa0
f0130173:	68 39 13 00 00       	push   $0x1339
f0130178:	68 7a b1 13 f0       	push   $0xf013b17a
f013017d:	e8 83 00 fd ff       	call   f0100205 <_panic>
	}

	//Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != MAX_MEM_BLOCK_CNT-1)
f0130182:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f0130187:	8b 15 00 27 86 f0    	mov    0xf0862700,%edx
f013018d:	4a                   	dec    %edx
f013018e:	39 d0                	cmp    %edx,%eax
f0130190:	74 17                	je     f01301a9 <test_initialize_dyn_block_system+0x50>
	{
		panic("Wrong initialize: Wrong size for the AvailableMemBlocksList");
f0130192:	83 ec 04             	sub    $0x4,%esp
f0130195:	68 f4 ca 13 f0       	push   $0xf013caf4
f013019a:	68 3f 13 00 00       	push   $0x133f
f013019f:	68 7a b1 13 f0       	push   $0xf013b17a
f01301a4:	e8 5c 00 fd ff       	call   f0100205 <_panic>
	}

	//Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f01301a9:	a1 d0 26 86 f0       	mov    0xf08626d0,%eax
f01301ae:	85 c0                	test   %eax,%eax
f01301b0:	74 17                	je     f01301c9 <test_initialize_dyn_block_system+0x70>
	{
		panic("Wrong initialize: Wrong size for the AllocMemBlocksList");
f01301b2:	83 ec 04             	sub    $0x4,%esp
f01301b5:	68 30 cb 13 f0       	push   $0xf013cb30
f01301ba:	68 45 13 00 00       	push   $0x1345
f01301bf:	68 7a b1 13 f0       	push   $0xf013b17a
f01301c4:	e8 3c 00 fd ff       	call   f0100205 <_panic>
	}

	//Check number of nodes in FreeMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 1)
f01301c9:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f01301ce:	83 f8 01             	cmp    $0x1,%eax
f01301d1:	74 17                	je     f01301ea <test_initialize_dyn_block_system+0x91>
	{
		panic("Wrong initialize: Wrong size for the FreeMemBlocksList");
f01301d3:	83 ec 04             	sub    $0x4,%esp
f01301d6:	68 68 cb 13 f0       	push   $0xf013cb68
f01301db:	68 4b 13 00 00       	push   $0x134b
f01301e0:	68 7a b1 13 f0       	push   $0xf013b17a
f01301e5:	e8 1b 00 fd ff       	call   f0100205 <_panic>
	}

	//Check content of FreeMemBlocksList
	struct MemBlock* block = LIST_FIRST(&FreeMemBlocksList);
f01301ea:	a1 60 27 86 f0       	mov    0xf0862760,%eax
f01301ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(block == NULL || block->size != (KERNEL_HEAP_MAX-0xF6000000-DYNAMIC_ALLOCATOR_DS) || block->sva != 0xF6000000+DYNAMIC_ALLOCATOR_DS)
f01301f2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01301f6:	74 66                	je     f013025e <test_initialize_dyn_block_system+0x105>
f01301f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01301fb:	8b 48 0c             	mov    0xc(%eax),%ecx
f01301fe:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f0130205:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0130208:	05 ef ff 09 00       	add    $0x9ffef,%eax
f013020d:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0130210:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0130213:	ba 00 00 00 00       	mov    $0x0,%edx
f0130218:	f7 75 ec             	divl   -0x14(%ebp)
f013021b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013021e:	29 d0                	sub    %edx,%eax
f0130220:	ba 00 f0 ff 09       	mov    $0x9fff000,%edx
f0130225:	29 c2                	sub    %eax,%edx
f0130227:	89 d0                	mov    %edx,%eax
f0130229:	39 c1                	cmp    %eax,%ecx
f013022b:	75 31                	jne    f013025e <test_initialize_dyn_block_system+0x105>
f013022d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130230:	8b 48 08             	mov    0x8(%eax),%ecx
f0130233:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f013023a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013023d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0130242:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0130245:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0130248:	ba 00 00 00 00       	mov    $0x0,%edx
f013024d:	f7 75 e4             	divl   -0x1c(%ebp)
f0130250:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0130253:	29 d0                	sub    %edx,%eax
f0130255:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f013025a:	39 c1                	cmp    %eax,%ecx
f013025c:	74 17                	je     f0130275 <test_initialize_dyn_block_system+0x11c>
	{
		panic("Wrong initialize: Wrong content for the FreeMemBlocksList.");
f013025e:	83 ec 04             	sub    $0x4,%esp
f0130261:	68 a0 cb 13 f0       	push   $0xf013cba0
f0130266:	68 52 13 00 00       	push   $0x1352
f013026b:	68 7a b1 13 f0       	push   $0xf013b17a
f0130270:	e8 90 ff fc ff       	call   f0100205 <_panic>
	}

	//Check number of disk and memory frames
	if ((freeDiskFrames_after - freeDiskFrames_before) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0130275:	8b 45 14             	mov    0x14(%ebp),%eax
f0130278:	3b 45 0c             	cmp    0xc(%ebp),%eax
f013027b:	74 17                	je     f0130294 <test_initialize_dyn_block_system+0x13b>
f013027d:	83 ec 04             	sub    $0x4,%esp
f0130280:	68 94 b1 13 f0       	push   $0xf013b194
f0130285:	68 56 13 00 00       	push   $0x1356
f013028a:	68 7a b1 13 f0       	push   $0xf013b17a
f013028f:	e8 71 ff fc ff       	call   f0100205 <_panic>
	if ((freeFrames_before - freeFrames_after) != 160) panic("Wrong allocation: pages are not loaded successfully into memory %d", (freeFrames_before - freeFrames_after));
f0130294:	8b 45 08             	mov    0x8(%ebp),%eax
f0130297:	2b 45 10             	sub    0x10(%ebp),%eax
f013029a:	3d a0 00 00 00       	cmp    $0xa0,%eax
f013029f:	74 1b                	je     f01302bc <test_initialize_dyn_block_system+0x163>
f01302a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01302a4:	2b 45 10             	sub    0x10(%ebp),%eax
f01302a7:	50                   	push   %eax
f01302a8:	68 dc cb 13 f0       	push   $0xf013cbdc
f01302ad:	68 57 13 00 00       	push   $0x1357
f01302b2:	68 7a b1 13 f0       	push   $0xf013b17a
f01302b7:	e8 49 ff fc ff       	call   f0100205 <_panic>

	//Checking permissions on the allocated spaces
	{
		uint32 a = 0xF6000000;
f01302bc:	c7 45 f4 00 00 00 f6 	movl   $0xf6000000,-0xc(%ebp)
		while(1)
		{
			if (CB(ptr_page_directory, a, 0)!=1 || CB(ptr_page_directory, a, 1)!=1 || CB(ptr_page_directory, a, 2)!=0)
f01302c3:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f01302c8:	83 ec 04             	sub    $0x4,%esp
f01302cb:	6a 00                	push   $0x0
f01302cd:	ff 75 f4             	pushl  -0xc(%ebp)
f01302d0:	50                   	push   %eax
f01302d1:	e8 e9 5f fe ff       	call   f01162bf <CB>
f01302d6:	83 c4 10             	add    $0x10,%esp
f01302d9:	83 f8 01             	cmp    $0x1,%eax
f01302dc:	75 35                	jne    f0130313 <test_initialize_dyn_block_system+0x1ba>
f01302de:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f01302e3:	83 ec 04             	sub    $0x4,%esp
f01302e6:	6a 01                	push   $0x1
f01302e8:	ff 75 f4             	pushl  -0xc(%ebp)
f01302eb:	50                   	push   %eax
f01302ec:	e8 ce 5f fe ff       	call   f01162bf <CB>
f01302f1:	83 c4 10             	add    $0x10,%esp
f01302f4:	83 f8 01             	cmp    $0x1,%eax
f01302f7:	75 1a                	jne    f0130313 <test_initialize_dyn_block_system+0x1ba>
f01302f9:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f01302fe:	83 ec 04             	sub    $0x4,%esp
f0130301:	6a 02                	push   $0x2
f0130303:	ff 75 f4             	pushl  -0xc(%ebp)
f0130306:	50                   	push   %eax
f0130307:	e8 b3 5f fe ff       	call   f01162bf <CB>
f013030c:	83 c4 10             	add    $0x10,%esp
f013030f:	85 c0                	test   %eax,%eax
f0130311:	74 17                	je     f013032a <test_initialize_dyn_block_system+0x1d1>
				panic("Wrong initialize: Wrong permissions - pages mapped with wrong permissions. Check them again.");
f0130313:	83 ec 04             	sub    $0x4,%esp
f0130316:	68 20 cc 13 f0       	push   $0xf013cc20
f013031b:	68 5f 13 00 00       	push   $0x135f
f0130320:	68 7a b1 13 f0       	push   $0xf013b17a
f0130325:	e8 db fe fc ff       	call   f0100205 <_panic>

			a+=4096;
f013032a:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
			if(a == (0xF6000000+DYNAMIC_ALLOCATOR_DS))
f0130331:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0130338:	8b 45 dc             	mov    -0x24(%ebp),%eax
f013033b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0130340:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0130343:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0130346:	ba 00 00 00 00       	mov    $0x0,%edx
f013034b:	f7 75 dc             	divl   -0x24(%ebp)
f013034e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0130351:	29 d0                	sub    %edx,%eax
f0130353:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0130358:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f013035b:	74 05                	je     f0130362 <test_initialize_dyn_block_system+0x209>
				break;
		}
f013035d:	e9 61 ff ff ff       	jmp    f01302c3 <test_initialize_dyn_block_system+0x16a>
			if (CB(ptr_page_directory, a, 0)!=1 || CB(ptr_page_directory, a, 1)!=1 || CB(ptr_page_directory, a, 2)!=0)
				panic("Wrong initialize: Wrong permissions - pages mapped with wrong permissions. Check them again.");

			a+=4096;
			if(a == (0xF6000000+DYNAMIC_ALLOCATOR_DS))
				break;
f0130362:	90                   	nop
		}
	}

	//===============================================//
	cprintf("\nCongratulations!! test initialize_dyn_block_system of KHEAP completed successfully.\n");
f0130363:	83 ec 0c             	sub    $0xc,%esp
f0130366:	68 80 cc 13 f0       	push   $0xf013cc80
f013036b:	e8 9e 09 fd ff       	call   f0100d0e <cprintf>
f0130370:	83 c4 10             	add    $0x10,%esp
	return 0;
f0130373:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0130378:	c9                   	leave  
f0130379:	c3                   	ret    

f013037a <nearest_pow2_ceil>:
#include <kern/cpu/sched.h>
#include <kern/disk/pagefile_manager.h>
#include <kern/mem/memory_manager.h>
#include "../cons/console.h"

inline unsigned int nearest_pow2_ceil(unsigned int x) {
f013037a:	55                   	push   %ebp
f013037b:	89 e5                	mov    %esp,%ebp
f013037d:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f0130380:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0130384:	77 07                	ja     f013038d <nearest_pow2_ceil+0x13>
f0130386:	b8 01 00 00 00       	mov    $0x1,%eax
f013038b:	eb 20                	jmp    f01303ad <nearest_pow2_ceil+0x33>
    int power = 2;
f013038d:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f0130394:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f0130397:	eb 08                	jmp    f01303a1 <nearest_pow2_ceil+0x27>
    	power <<= 1;
f0130399:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013039c:	01 c0                	add    %eax,%eax
f013039e:	89 45 fc             	mov    %eax,-0x4(%ebp)

inline unsigned int nearest_pow2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    int power = 2;
    x--;
    while (x >>= 1) {
f01303a1:	d1 6d 08             	shrl   0x8(%ebp)
f01303a4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01303a8:	75 ef                	jne    f0130399 <nearest_pow2_ceil+0x1f>
    	power <<= 1;
    }
    return power;
f01303aa:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f01303ad:	c9                   	leave  
f01303ae:	c3                   	ret    

f01303af <log2_ceil>:
inline unsigned int log2_ceil(unsigned int x) {
f01303af:	55                   	push   %ebp
f01303b0:	89 e5                	mov    %esp,%ebp
f01303b2:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f01303b5:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f01303b9:	77 07                	ja     f01303c2 <log2_ceil+0x13>
f01303bb:	b8 01 00 00 00       	mov    $0x1,%eax
f01303c0:	eb 1b                	jmp    f01303dd <log2_ceil+0x2e>
    //int power = 2;
    int bits_cnt = 2 ;
f01303c2:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f01303c9:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f01303cc:	eb 03                	jmp    f01303d1 <log2_ceil+0x22>
    	//power <<= 1;
    	bits_cnt++ ;
f01303ce:	ff 45 fc             	incl   -0x4(%ebp)
inline unsigned int log2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    //int power = 2;
    int bits_cnt = 2 ;
    x--;
    while (x >>= 1) {
f01303d1:	d1 6d 08             	shrl   0x8(%ebp)
f01303d4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01303d8:	75 f4                	jne    f01303ce <log2_ceil+0x1f>
    	//power <<= 1;
    	bits_cnt++ ;
    }
    return bits_cnt;
f01303da:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f01303dd:	c9                   	leave  
f01303de:	c3                   	ret    

f01303df <detect_loop_in_FrameInfo_list>:
void detect_loop_in_FrameInfo_list(struct FrameInfo_List* fi_list)
{
f01303df:	55                   	push   %ebp
f01303e0:	89 e5                	mov    %esp,%ebp
f01303e2:	83 ec 18             	sub    $0x18,%esp
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
f01303e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01303e8:	8b 00                	mov    (%eax),%eax
f01303ea:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);
f01303ed:	8b 45 08             	mov    0x8(%ebp),%eax
f01303f0:	8b 00                	mov    (%eax),%eax
f01303f2:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f01303f5:	eb 52                	jmp    f0130449 <detect_loop_in_FrameInfo_list+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f01303f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01303fa:	8b 00                	mov    (%eax),%eax
f01303fc:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f01303ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130402:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130405:	75 12                	jne    f0130419 <detect_loop_in_FrameInfo_list+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f0130407:	83 ec 0c             	sub    $0xc,%esp
f013040a:	68 d8 cc 13 f0       	push   $0xf013ccd8
f013040f:	e8 fa 08 fd ff       	call   f0100d0e <cprintf>
f0130414:	83 c4 10             	add    $0x10,%esp
			break;
f0130417:	eb 3f                	jmp    f0130458 <detect_loop_in_FrameInfo_list+0x79>
		}

		if (fastPtr == NULL) {
f0130419:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013041d:	74 38                	je     f0130457 <detect_loop_in_FrameInfo_list+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f013041f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130422:	8b 00                	mov    (%eax),%eax
f0130424:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f0130427:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013042a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f013042d:	75 12                	jne    f0130441 <detect_loop_in_FrameInfo_list+0x62>
			cprintf("loop detected in list\n");
f013042f:	83 ec 0c             	sub    $0xc,%esp
f0130432:	68 f4 cc 13 f0       	push   $0xf013ccf4
f0130437:	e8 d2 08 fd ff       	call   f0100d0e <cprintf>
f013043c:	83 c4 10             	add    $0x10,%esp
			break;
f013043f:	eb 17                	jmp    f0130458 <detect_loop_in_FrameInfo_list+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f0130441:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130444:	8b 00                	mov    (%eax),%eax
f0130446:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);


	while (slowPtr && fastPtr) {
f0130449:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013044d:	74 09                	je     f0130458 <detect_loop_in_FrameInfo_list+0x79>
f013044f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130453:	75 a2                	jne    f01303f7 <detect_loop_in_FrameInfo_list+0x18>
f0130455:	eb 01                	jmp    f0130458 <detect_loop_in_FrameInfo_list+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f0130457:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished  loop detection\n");
f0130458:	83 ec 0c             	sub    $0xc,%esp
f013045b:	68 0b cd 13 f0       	push   $0xf013cd0b
f0130460:	e8 a9 08 fd ff       	call   f0100d0e <cprintf>
f0130465:	83 c4 10             	add    $0x10,%esp
}
f0130468:	90                   	nop
f0130469:	c9                   	leave  
f013046a:	c3                   	ret    

f013046b <scarce_memory>:

void scarce_memory()
{
f013046b:	55                   	push   %ebp
f013046c:	89 e5                	mov    %esp,%ebp
f013046e:	83 ec 28             	sub    $0x28,%esp
	uint32 total_size_tobe_allocated = ((100 - memory_scarce_threshold_percentage)*number_of_frames)/100;
f0130471:	a1 ec 26 86 f0       	mov    0xf08626ec,%eax
f0130476:	ba 64 00 00 00       	mov    $0x64,%edx
f013047b:	29 c2                	sub    %eax,%edx
f013047d:	a1 0c 27 86 f0       	mov    0xf086270c,%eax
f0130482:	0f af c2             	imul   %edx,%eax
f0130485:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f013048a:	f7 e2                	mul    %edx
f013048c:	89 d0                	mov    %edx,%eax
f013048e:	c1 e8 05             	shr    $0x5,%eax
f0130491:	89 45 f4             	mov    %eax,-0xc(%ebp)
//	cprintf("total_size_tobe_allocated %d\n", number_of_frames);
	if (((100 - memory_scarce_threshold_percentage)*number_of_frames) % 100 > 0)
f0130494:	a1 ec 26 86 f0       	mov    0xf08626ec,%eax
f0130499:	ba 64 00 00 00       	mov    $0x64,%edx
f013049e:	29 c2                	sub    %eax,%edx
f01304a0:	a1 0c 27 86 f0       	mov    0xf086270c,%eax
f01304a5:	89 d1                	mov    %edx,%ecx
f01304a7:	0f af c8             	imul   %eax,%ecx
f01304aa:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f01304af:	f7 e1                	mul    %ecx
f01304b1:	c1 ea 05             	shr    $0x5,%edx
f01304b4:	89 d0                	mov    %edx,%eax
f01304b6:	c1 e0 02             	shl    $0x2,%eax
f01304b9:	01 d0                	add    %edx,%eax
f01304bb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01304c2:	01 d0                	add    %edx,%eax
f01304c4:	c1 e0 02             	shl    $0x2,%eax
f01304c7:	29 c1                	sub    %eax,%ecx
f01304c9:	89 ca                	mov    %ecx,%edx
f01304cb:	85 d2                	test   %edx,%edx
f01304cd:	74 03                	je     f01304d2 <scarce_memory+0x67>
		total_size_tobe_allocated++;
f01304cf:	ff 45 f4             	incl   -0xc(%ebp)

	uint32 size_of_already_allocated = number_of_frames - LIST_SIZE(&free_frame_list) ;
f01304d2:	8b 15 0c 27 86 f0    	mov    0xf086270c,%edx
f01304d8:	a1 20 27 86 f0       	mov    0xf0862720,%eax
f01304dd:	29 c2                	sub    %eax,%edx
f01304df:	89 d0                	mov    %edx,%eax
f01304e1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
f01304e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01304e7:	2b 45 ec             	sub    -0x14(%ebp),%eax
f01304ea:	89 45 e8             	mov    %eax,-0x18(%ebp)
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
f01304ed:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f01304f4:	eb 12                	jmp    f0130508 <scarce_memory+0x9d>
	{
		allocate_frame(&ptr_tmp_FI) ;
f01304f6:	83 ec 0c             	sub    $0xc,%esp
f01304f9:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f01304fc:	50                   	push   %eax
f01304fd:	e8 ce 63 fd ff       	call   f01068d0 <allocate_frame>
f0130502:	83 c4 10             	add    $0x10,%esp
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f0130505:	ff 45 f0             	incl   -0x10(%ebp)
f0130508:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013050b:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f013050e:	76 e6                	jbe    f01304f6 <scarce_memory+0x8b>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f0130510:	90                   	nop
f0130511:	c9                   	leave  
f0130512:	c3                   	ret    

f0130513 <calc_no_pages_tobe_removed_from_ready_exit_queues>:

uint32 calc_no_pages_tobe_removed_from_ready_exit_queues(uint32 WS_or_MEMORY_flag)
{
f0130513:	55                   	push   %ebp
f0130514:	89 e5                	mov    %esp,%ebp
f0130516:	83 ec 38             	sub    $0x38,%esp
	uint32 no_of_pages_tobe_removed_from_ready = 0;
f0130519:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 no_of_pages_tobe_removed_from_exit = 0;
f0130520:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
f0130527:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
f013052e:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0130532:	0f 85 d0 01 00 00    	jne    f0130708 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f5>
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f0130538:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f013053f:	e9 de 00 00 00       	jmp    f0130622 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x10f>
		{
			struct Env * ptr_ready_env = NULL;
f0130544:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f013054b:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f0130550:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0130553:	c1 e2 04             	shl    $0x4,%edx
f0130556:	01 d0                	add    %edx,%eax
f0130558:	8b 00                	mov    (%eax),%eax
f013055a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f013055d:	e9 85 00 00 00       	jmp    f01305e7 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xd4>
			{
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_ready_env);
f0130562:	83 ec 0c             	sub    $0xc,%esp
f0130565:	ff 75 e4             	pushl  -0x1c(%ebp)
f0130568:	e8 67 7a fd ff       	call   f0107fd4 <env_page_ws_get_size>
f013056d:	83 c4 10             	add    $0x10,%esp
f0130570:	89 45 d0             	mov    %eax,-0x30(%ebp)
				int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f0130573:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f0130578:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f013057e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0130581:	0f af c2             	imul   %edx,%eax
f0130584:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f0130589:	f7 e2                	mul    %edx
f013058b:	89 d0                	mov    %edx,%eax
f013058d:	c1 e8 05             	shr    $0x5,%eax
f0130590:	89 45 e0             	mov    %eax,-0x20(%ebp)
				if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f0130593:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f0130598:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f013059e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01305a1:	89 d1                	mov    %edx,%ecx
f01305a3:	0f af c8             	imul   %eax,%ecx
f01305a6:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f01305ab:	f7 e1                	mul    %ecx
f01305ad:	c1 ea 05             	shr    $0x5,%edx
f01305b0:	89 d0                	mov    %edx,%eax
f01305b2:	c1 e0 02             	shl    $0x2,%eax
f01305b5:	01 d0                	add    %edx,%eax
f01305b7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01305be:	01 d0                	add    %edx,%eax
f01305c0:	c1 e0 02             	shl    $0x2,%eax
f01305c3:	29 c1                	sub    %eax,%ecx
f01305c5:	89 ca                	mov    %ecx,%edx
f01305c7:	85 d2                	test   %edx,%edx
f01305c9:	74 03                	je     f01305ce <calc_no_pages_tobe_removed_from_ready_exit_queues+0xbb>
					num_of_pages_to_be_removed++;
f01305cb:	ff 45 e0             	incl   -0x20(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
f01305ce:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01305d1:	01 45 f4             	add    %eax,-0xc(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
		{
			struct Env * ptr_ready_env = NULL;
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f01305d4:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f01305d9:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01305dc:	c1 e2 04             	shl    $0x4,%edx
f01305df:	01 d0                	add    %edx,%eax
f01305e1:	8b 40 08             	mov    0x8(%eax),%eax
f01305e4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01305e7:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f01305ec:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01305ef:	c1 e2 04             	shl    $0x4,%edx
f01305f2:	01 d0                	add    %edx,%eax
f01305f4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01305f8:	74 08                	je     f0130602 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xef>
f01305fa:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01305fd:	8b 52 44             	mov    0x44(%edx),%edx
f0130600:	eb 05                	jmp    f0130607 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xf4>
f0130602:	ba 00 00 00 00       	mov    $0x0,%edx
f0130607:	89 50 08             	mov    %edx,0x8(%eax)
f013060a:	8b 40 08             	mov    0x8(%eax),%eax
f013060d:	85 c0                	test   %eax,%eax
f013060f:	0f 85 4d ff ff ff    	jne    f0130562 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4f>
f0130615:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130619:	0f 85 43 ff ff ff    	jne    f0130562 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4f>
	uint32 no_of_pages_tobe_removed_from_ready = 0;
	uint32 no_of_pages_tobe_removed_from_exit = 0;
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f013061f:	ff 45 e8             	incl   -0x18(%ebp)
f0130622:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0130627:	0f b6 c0             	movzbl %al,%eax
f013062a:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f013062d:	0f 8f 11 ff ff ff    	jg     f0130544 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x31>
					num_of_pages_to_be_removed++;
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
f0130633:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f013063a:	a1 f0 26 86 f0       	mov    0xf08626f0,%eax
f013063f:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0130642:	eb 19                	jmp    f013065d <calc_no_pages_tobe_removed_from_ready_exit_queues+0x14a>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
f0130644:	83 ec 0c             	sub    $0xc,%esp
f0130647:	ff 75 dc             	pushl  -0x24(%ebp)
f013064a:	e8 85 79 fd ff       	call   f0107fd4 <env_page_ws_get_size>
f013064f:	83 c4 10             	add    $0x10,%esp
f0130652:	01 45 f0             	add    %eax,-0x10(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f0130655:	a1 f8 26 86 f0       	mov    0xf08626f8,%eax
f013065a:	89 45 dc             	mov    %eax,-0x24(%ebp)
f013065d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0130661:	74 08                	je     f013066b <calc_no_pages_tobe_removed_from_ready_exit_queues+0x158>
f0130663:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0130666:	8b 40 44             	mov    0x44(%eax),%eax
f0130669:	eb 05                	jmp    f0130670 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x15d>
f013066b:	b8 00 00 00 00       	mov    $0x0,%eax
f0130670:	a3 f8 26 86 f0       	mov    %eax,0xf08626f8
f0130675:	a1 f8 26 86 f0       	mov    0xf08626f8,%eax
f013067a:	85 c0                	test   %eax,%eax
f013067c:	75 c6                	jne    f0130644 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x131>
f013067e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0130682:	75 c0                	jne    f0130644 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x131>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
		}

		if(curenv != NULL)
f0130684:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f0130689:	85 c0                	test   %eax,%eax
f013068b:	0f 84 ec 00 00 00    	je     f013077d <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26a>
		{
			int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f0130691:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f0130696:	83 ec 0c             	sub    $0xc,%esp
f0130699:	50                   	push   %eax
f013069a:	e8 35 79 fd ff       	call   f0107fd4 <env_page_ws_get_size>
f013069f:	83 c4 10             	add    $0x10,%esp
f01306a2:	89 45 cc             	mov    %eax,-0x34(%ebp)
			int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f01306a5:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f01306aa:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f01306b0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01306b3:	0f af c2             	imul   %edx,%eax
f01306b6:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f01306bb:	f7 e2                	mul    %edx
f01306bd:	89 d0                	mov    %edx,%eax
f01306bf:	c1 e8 05             	shr    $0x5,%eax
f01306c2:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f01306c5:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f01306ca:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f01306d0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01306d3:	89 d1                	mov    %edx,%ecx
f01306d5:	0f af c8             	imul   %eax,%ecx
f01306d8:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f01306dd:	f7 e1                	mul    %ecx
f01306df:	c1 ea 05             	shr    $0x5,%edx
f01306e2:	89 d0                	mov    %edx,%eax
f01306e4:	c1 e0 02             	shl    $0x2,%eax
f01306e7:	01 d0                	add    %edx,%eax
f01306e9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01306f0:	01 d0                	add    %edx,%eax
f01306f2:	c1 e0 02             	shl    $0x2,%eax
f01306f5:	29 c1                	sub    %eax,%ecx
f01306f7:	89 ca                	mov    %ecx,%edx
f01306f9:	85 d2                	test   %edx,%edx
f01306fb:	74 03                	je     f0130700 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1ed>
				num_of_pages_to_be_removed++;
f01306fd:	ff 45 d8             	incl   -0x28(%ebp)
			no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f0130700:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0130703:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0130706:	eb 75                	jmp    f013077d <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26a>
		}
	}
	else	// THEN RAPID PROCESS SHALL BE FREED ONLY
	{
		int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f0130708:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f013070d:	83 ec 0c             	sub    $0xc,%esp
f0130710:	50                   	push   %eax
f0130711:	e8 be 78 fd ff       	call   f0107fd4 <env_page_ws_get_size>
f0130716:	83 c4 10             	add    $0x10,%esp
f0130719:	89 45 c8             	mov    %eax,-0x38(%ebp)
		int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f013071c:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f0130721:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130727:	8b 45 c8             	mov    -0x38(%ebp),%eax
f013072a:	0f af c2             	imul   %edx,%eax
f013072d:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f0130732:	f7 e2                	mul    %edx
f0130734:	89 d0                	mov    %edx,%eax
f0130736:	c1 e8 05             	shr    $0x5,%eax
f0130739:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f013073c:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f0130741:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130747:	8b 45 c8             	mov    -0x38(%ebp),%eax
f013074a:	89 d1                	mov    %edx,%ecx
f013074c:	0f af c8             	imul   %eax,%ecx
f013074f:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0130754:	f7 e1                	mul    %ecx
f0130756:	c1 ea 05             	shr    $0x5,%edx
f0130759:	89 d0                	mov    %edx,%eax
f013075b:	c1 e0 02             	shl    $0x2,%eax
f013075e:	01 d0                	add    %edx,%eax
f0130760:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130767:	01 d0                	add    %edx,%eax
f0130769:	c1 e0 02             	shl    $0x2,%eax
f013076c:	29 c1                	sub    %eax,%ecx
f013076e:	89 ca                	mov    %ecx,%edx
f0130770:	85 d2                	test   %edx,%edx
f0130772:	74 03                	je     f0130777 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x264>
			num_of_pages_to_be_removed++;
f0130774:	ff 45 d4             	incl   -0x2c(%ebp)
		no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f0130777:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f013077a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}

	return no_of_pages_tobe_removed_from_curenv + no_of_pages_tobe_removed_from_ready + no_of_pages_tobe_removed_from_exit;
f013077d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0130780:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130783:	01 c2                	add    %eax,%edx
f0130785:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130788:	01 d0                	add    %edx,%eax
}
f013078a:	c9                   	leave  
f013078b:	c3                   	ret    

f013078c <schenv>:


void schenv()
{
f013078c:	55                   	push   %ebp
f013078d:	89 e5                	mov    %esp,%ebp
f013078f:	83 ec 18             	sub    $0x18,%esp
	__nl = 0;
f0130792:	c6 05 a4 27 86 f0 00 	movb   $0x0,0xf08627a4
	__ne = NULL;
f0130799:	c7 05 34 27 86 f0 00 	movl   $0x0,0xf0862734
f01307a0:	00 00 00 
	for (int i = 0; i < num_of_ready_queues; ++i)
f01307a3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01307aa:	eb 3f                	jmp    f01307eb <schenv+0x5f>
	{
		if (queue_size(&(env_ready_queues[i])))
f01307ac:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f01307b1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01307b4:	c1 e2 04             	shl    $0x4,%edx
f01307b7:	01 d0                	add    %edx,%eax
f01307b9:	83 ec 0c             	sub    $0xc,%esp
f01307bc:	50                   	push   %eax
f01307bd:	e8 a1 3c fd ff       	call   f0104463 <queue_size>
f01307c2:	83 c4 10             	add    $0x10,%esp
f01307c5:	85 c0                	test   %eax,%eax
f01307c7:	74 1f                	je     f01307e8 <schenv+0x5c>
		{
			__ne = LIST_LAST(&(env_ready_queues[i]));
f01307c9:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f01307ce:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01307d1:	c1 e2 04             	shl    $0x4,%edx
f01307d4:	01 d0                	add    %edx,%eax
f01307d6:	8b 40 04             	mov    0x4(%eax),%eax
f01307d9:	a3 34 27 86 f0       	mov    %eax,0xf0862734
			__nl = i;
f01307de:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01307e1:	a2 a4 27 86 f0       	mov    %al,0xf08627a4
			break;
f01307e6:	eb 10                	jmp    f01307f8 <schenv+0x6c>

void schenv()
{
	__nl = 0;
	__ne = NULL;
	for (int i = 0; i < num_of_ready_queues; ++i)
f01307e8:	ff 45 f4             	incl   -0xc(%ebp)
f01307eb:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f01307f0:	0f b6 c0             	movzbl %al,%eax
f01307f3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01307f6:	7f b4                	jg     f01307ac <schenv+0x20>
			__ne = LIST_LAST(&(env_ready_queues[i]));
			__nl = i;
			break;
		}
	}
	if (curenv != NULL)
f01307f8:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f01307fd:	85 c0                	test   %eax,%eax
f01307ff:	0f 84 86 00 00 00    	je     f013088b <schenv+0xff>
	{
		if (__ne != NULL)
f0130805:	a1 34 27 86 f0       	mov    0xf0862734,%eax
f013080a:	85 c0                	test   %eax,%eax
f013080c:	74 4b                	je     f0130859 <schenv+0xcd>
		{
			if ((__pl + 1) < __nl)
f013080e:	a0 dc 26 86 f0       	mov    0xf08626dc,%al
f0130813:	0f b6 c0             	movzbl %al,%eax
f0130816:	8d 50 01             	lea    0x1(%eax),%edx
f0130819:	a0 a4 27 86 f0       	mov    0xf08627a4,%al
f013081e:	0f b6 c0             	movzbl %al,%eax
f0130821:	39 c2                	cmp    %eax,%edx
f0130823:	7d 66                	jge    f013088b <schenv+0xff>
			{
				__ne = curenv;
f0130825:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f013082a:	a3 34 27 86 f0       	mov    %eax,0xf0862734
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f013082f:	a0 dc 26 86 f0       	mov    0xf08626dc,%al
f0130834:	0f b6 c0             	movzbl %al,%eax
f0130837:	8a 15 7c 27 86 f0    	mov    0xf086277c,%dl
f013083d:	0f b6 d2             	movzbl %dl,%edx
f0130840:	4a                   	dec    %edx
f0130841:	39 d0                	cmp    %edx,%eax
f0130843:	7d 08                	jge    f013084d <schenv+0xc1>
f0130845:	a0 dc 26 86 f0       	mov    0xf08626dc,%al
f013084a:	40                   	inc    %eax
f013084b:	eb 05                	jmp    f0130852 <schenv+0xc6>
f013084d:	a0 dc 26 86 f0       	mov    0xf08626dc,%al
f0130852:	a2 a4 27 86 f0       	mov    %al,0xf08627a4
		{
			__ne = curenv;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f0130857:	eb 32                	jmp    f013088b <schenv+0xff>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = curenv;
f0130859:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f013085e:	a3 34 27 86 f0       	mov    %eax,0xf0862734
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f0130863:	a0 dc 26 86 f0       	mov    0xf08626dc,%al
f0130868:	0f b6 c0             	movzbl %al,%eax
f013086b:	8a 15 7c 27 86 f0    	mov    0xf086277c,%dl
f0130871:	0f b6 d2             	movzbl %dl,%edx
f0130874:	4a                   	dec    %edx
f0130875:	39 d0                	cmp    %edx,%eax
f0130877:	7d 08                	jge    f0130881 <schenv+0xf5>
f0130879:	a0 dc 26 86 f0       	mov    0xf08626dc,%al
f013087e:	40                   	inc    %eax
f013087f:	eb 05                	jmp    f0130886 <schenv+0xfa>
f0130881:	a0 dc 26 86 f0       	mov    0xf08626dc,%al
f0130886:	a2 a4 27 86 f0       	mov    %al,0xf08627a4
		}
	}
}
f013088b:	90                   	nop
f013088c:	c9                   	leave  
f013088d:	c3                   	ret    

f013088e <chksch>:

void chksch(uint8 onoff)
{
f013088e:	55                   	push   %ebp
f013088f:	89 e5                	mov    %esp,%ebp
f0130891:	83 ec 04             	sub    $0x4,%esp
f0130894:	8b 45 08             	mov    0x8(%ebp),%eax
f0130897:	88 45 fc             	mov    %al,-0x4(%ebp)
	__pe = NULL;
f013089a:	c7 05 90 27 86 f0 00 	movl   $0x0,0xf0862790
f01308a1:	00 00 00 
	__ne = NULL;
f01308a4:	c7 05 34 27 86 f0 00 	movl   $0x0,0xf0862734
f01308ab:	00 00 00 
	__pl = 0 ;
f01308ae:	c6 05 dc 26 86 f0 00 	movb   $0x0,0xf08626dc
	__nl = 0 ;
f01308b5:	c6 05 a4 27 86 f0 00 	movb   $0x0,0xf08627a4
	__chkstatus = onoff;
f01308bc:	8a 45 fc             	mov    -0x4(%ebp),%al
f01308bf:	a2 30 27 86 f0       	mov    %al,0xf0862730
}
f01308c4:	90                   	nop
f01308c5:	c9                   	leave  
f01308c6:	c3                   	ret    

f01308c7 <chk1>:
void chk1()
{
f01308c7:	55                   	push   %ebp
f01308c8:	89 e5                	mov    %esp,%ebp
f01308ca:	83 ec 08             	sub    $0x8,%esp
	if (__chkstatus == 0)
f01308cd:	a0 30 27 86 f0       	mov    0xf0862730,%al
f01308d2:	84 c0                	test   %al,%al
f01308d4:	74 2b                	je     f0130901 <chk1+0x3a>
		return ;
	__pe = curenv;
f01308d6:	a1 f4 1d 86 f0       	mov    0xf0861df4,%eax
f01308db:	a3 90 27 86 f0       	mov    %eax,0xf0862790
	__pl = __nl ;
f01308e0:	a0 a4 27 86 f0       	mov    0xf08627a4,%al
f01308e5:	a2 dc 26 86 f0       	mov    %al,0xf08626dc
	if (__pe == NULL)
f01308ea:	a1 90 27 86 f0       	mov    0xf0862790,%eax
f01308ef:	85 c0                	test   %eax,%eax
f01308f1:	75 07                	jne    f01308fa <chk1+0x33>
	{
		__pl = 0;
f01308f3:	c6 05 dc 26 86 f0 00 	movb   $0x0,0xf08626dc
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
f01308fa:	e8 8d fe ff ff       	call   f013078c <schenv>
f01308ff:	eb 01                	jmp    f0130902 <chk1+0x3b>
	__chkstatus = onoff;
}
void chk1()
{
	if (__chkstatus == 0)
		return ;
f0130901:	90                   	nop
	{
		__pl = 0;
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
}
f0130902:	c9                   	leave  
f0130903:	c3                   	ret    

f0130904 <chk2>:
void chk2(struct Env* __se)
{
f0130904:	55                   	push   %ebp
f0130905:	89 e5                	mov    %esp,%ebp
f0130907:	53                   	push   %ebx
f0130908:	83 ec 14             	sub    $0x14,%esp
	if (__chkstatus == 0)
f013090b:	a0 30 27 86 f0       	mov    0xf0862730,%al
f0130910:	84 c0                	test   %al,%al
f0130912:	0f 84 43 02 00 00    	je     f0130b5b <chk2+0x257>
		return ;

	//cprintf("chk2: next = %s @ level %d\n", __ne == NULL? "NULL" : __ne->prog_name, __nl);

	assert_endall(__se == __ne);
f0130918:	a1 34 27 86 f0       	mov    0xf0862734,%eax
f013091d:	39 45 08             	cmp    %eax,0x8(%ebp)
f0130920:	74 19                	je     f013093b <chk2+0x37>
f0130922:	68 25 cd 13 f0       	push   $0xf013cd25
f0130927:	68 32 cd 13 f0       	push   $0xf013cd32
f013092c:	68 c0 00 00 00       	push   $0xc0
f0130931:	68 47 cd 13 f0       	push   $0xf013cd47
f0130936:	e8 80 f9 fc ff       	call   f01002bb <_panic_all>
	//cprintf("%d - %d\n", kclock_read_cnt0_latch() , TIMER_DIV((1000/quantums[__nl])));

	if (__ne != NULL)
f013093b:	a1 34 27 86 f0       	mov    0xf0862734,%eax
f0130940:	85 c0                	test   %eax,%eax
f0130942:	0f 84 25 01 00 00    	je     f0130a6d <chk2+0x169>
	{
		uint16 upper = TIMER_DIV((1000/quantums[__nl])) ;
f0130948:	8b 15 28 27 86 f0    	mov    0xf0862728,%edx
f013094e:	a0 a4 27 86 f0       	mov    0xf08627a4,%al
f0130953:	0f b6 c0             	movzbl %al,%eax
f0130956:	01 d0                	add    %edx,%eax
f0130958:	8a 00                	mov    (%eax),%al
f013095a:	0f b6 d8             	movzbl %al,%ebx
f013095d:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0130962:	99                   	cltd   
f0130963:	f7 fb                	idiv   %ebx
f0130965:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f013096b:	8b 15 28 27 86 f0    	mov    0xf0862728,%edx
f0130971:	a0 a4 27 86 f0       	mov    0xf08627a4,%al
f0130976:	0f b6 c0             	movzbl %al,%eax
f0130979:	01 d0                	add    %edx,%eax
f013097b:	8a 00                	mov    (%eax),%al
f013097d:	0f b6 d8             	movzbl %al,%ebx
f0130980:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0130985:	99                   	cltd   
f0130986:	f7 fb                	idiv   %ebx
f0130988:	89 c3                	mov    %eax,%ebx
f013098a:	89 c8                	mov    %ecx,%eax
f013098c:	99                   	cltd   
f013098d:	f7 fb                	idiv   %ebx
f013098f:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		upper = upper % 2 == 1? upper+1 : upper ;
f0130993:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0130997:	83 e0 01             	and    $0x1,%eax
f013099a:	66 85 c0             	test   %ax,%ax
f013099d:	74 07                	je     f01309a6 <chk2+0xa2>
f013099f:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f01309a3:	40                   	inc    %eax
f01309a4:	eb 04                	jmp    f01309aa <chk2+0xa6>
f01309a6:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f01309aa:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		uint16 lower = 90 * upper / 100 ;
f01309ae:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
f01309b2:	89 d0                	mov    %edx,%eax
f01309b4:	c1 e0 02             	shl    $0x2,%eax
f01309b7:	01 d0                	add    %edx,%eax
f01309b9:	01 c0                	add    %eax,%eax
f01309bb:	01 d0                	add    %edx,%eax
f01309bd:	c1 e0 02             	shl    $0x2,%eax
f01309c0:	01 d0                	add    %edx,%eax
f01309c2:	01 c0                	add    %eax,%eax
f01309c4:	89 c1                	mov    %eax,%ecx
f01309c6:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f01309cb:	f7 e9                	imul   %ecx
f01309cd:	c1 fa 05             	sar    $0x5,%edx
f01309d0:	89 c8                	mov    %ecx,%eax
f01309d2:	c1 f8 1f             	sar    $0x1f,%eax
f01309d5:	29 c2                	sub    %eax,%edx
f01309d7:	89 d0                	mov    %edx,%eax
f01309d9:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
		uint16 current = kclock_read_cnt0();
f01309dd:	e8 52 39 fd ff       	call   f0104334 <kclock_read_cnt0>
f01309e2:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;
f01309e6:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f01309ea:	66 3b 45 ec          	cmp    -0x14(%ebp),%ax
f01309ee:	76 0a                	jbe    f01309fa <chk2+0xf6>
f01309f0:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f01309f4:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f01309f8:	76 19                	jbe    f0130a13 <chk2+0x10f>
f01309fa:	68 60 cd 13 f0       	push   $0xf013cd60
f01309ff:	68 32 cd 13 f0       	push   $0xf013cd32
f0130a04:	68 ca 00 00 00       	push   $0xca
f0130a09:	68 47 cd 13 f0       	push   $0xf013cd47
f0130a0e:	e8 a8 f8 fc ff       	call   f01002bb <_panic_all>

		for (int i = 0; i < num_of_ready_queues; ++i)
f0130a13:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130a1a:	eb 44                	jmp    f0130a60 <chk2+0x15c>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
f0130a1c:	a1 34 27 86 f0       	mov    0xf0862734,%eax
f0130a21:	8b 40 4c             	mov    0x4c(%eax),%eax
f0130a24:	89 c2                	mov    %eax,%edx
f0130a26:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f0130a2b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0130a2e:	c1 e1 04             	shl    $0x4,%ecx
f0130a31:	01 c8                	add    %ecx,%eax
f0130a33:	83 ec 08             	sub    $0x8,%esp
f0130a36:	52                   	push   %edx
f0130a37:	50                   	push   %eax
f0130a38:	e8 40 3c fd ff       	call   f010467d <find_env_in_queue>
f0130a3d:	83 c4 10             	add    $0x10,%esp
f0130a40:	85 c0                	test   %eax,%eax
f0130a42:	74 19                	je     f0130a5d <chk2+0x159>
f0130a44:	68 84 cd 13 f0       	push   $0xf013cd84
f0130a49:	68 32 cd 13 f0       	push   $0xf013cd32
f0130a4e:	68 ce 00 00 00       	push   $0xce
f0130a53:	68 47 cd 13 f0       	push   $0xf013cd47
f0130a58:	e8 5e f8 fc ff       	call   f01002bb <_panic_all>
		uint16 lower = 90 * upper / 100 ;
		uint16 current = kclock_read_cnt0();
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;

		for (int i = 0; i < num_of_ready_queues; ++i)
f0130a5d:	ff 45 f4             	incl   -0xc(%ebp)
f0130a60:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0130a65:	0f b6 c0             	movzbl %al,%eax
f0130a68:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130a6b:	7f af                	jg     f0130a1c <chk2+0x118>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
		}
	}
	if (__pe != NULL && __pe != __ne)
f0130a6d:	a1 90 27 86 f0       	mov    0xf0862790,%eax
f0130a72:	85 c0                	test   %eax,%eax
f0130a74:	0f 84 e2 00 00 00    	je     f0130b5c <chk2+0x258>
f0130a7a:	8b 15 90 27 86 f0    	mov    0xf0862790,%edx
f0130a80:	a1 34 27 86 f0       	mov    0xf0862734,%eax
f0130a85:	39 c2                	cmp    %eax,%edx
f0130a87:	0f 84 cf 00 00 00    	je     f0130b5c <chk2+0x258>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
f0130a8d:	a0 dc 26 86 f0       	mov    0xf08626dc,%al
f0130a92:	0f b6 c0             	movzbl %al,%eax
f0130a95:	8a 15 7c 27 86 f0    	mov    0xf086277c,%dl
f0130a9b:	0f b6 d2             	movzbl %dl,%edx
f0130a9e:	4a                   	dec    %edx
f0130a9f:	39 d0                	cmp    %edx,%eax
f0130aa1:	74 08                	je     f0130aab <chk2+0x1a7>
f0130aa3:	a0 dc 26 86 f0       	mov    0xf08626dc,%al
f0130aa8:	40                   	inc    %eax
f0130aa9:	eb 05                	jmp    f0130ab0 <chk2+0x1ac>
f0130aab:	a0 dc 26 86 f0       	mov    0xf08626dc,%al
f0130ab0:	88 45 e9             	mov    %al,-0x17(%ebp)
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
f0130ab3:	a1 90 27 86 f0       	mov    0xf0862790,%eax
f0130ab8:	8b 40 4c             	mov    0x4c(%eax),%eax
f0130abb:	89 c2                	mov    %eax,%edx
f0130abd:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f0130ac2:	0f b6 4d e9          	movzbl -0x17(%ebp),%ecx
f0130ac6:	c1 e1 04             	shl    $0x4,%ecx
f0130ac9:	01 c8                	add    %ecx,%eax
f0130acb:	83 ec 08             	sub    $0x8,%esp
f0130ace:	52                   	push   %edx
f0130acf:	50                   	push   %eax
f0130ad0:	e8 a8 3b fd ff       	call   f010467d <find_env_in_queue>
f0130ad5:	83 c4 10             	add    $0x10,%esp
f0130ad8:	85 c0                	test   %eax,%eax
f0130ada:	75 19                	jne    f0130af5 <chk2+0x1f1>
f0130adc:	68 c4 cd 13 f0       	push   $0xf013cdc4
f0130ae1:	68 32 cd 13 f0       	push   $0xf013cd32
f0130ae6:	68 d4 00 00 00       	push   $0xd4
f0130aeb:	68 47 cd 13 f0       	push   $0xf013cd47
f0130af0:	e8 c6 f7 fc ff       	call   f01002bb <_panic_all>
		for (int i = 0; i < num_of_ready_queues; ++i)
f0130af5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0130afc:	eb 4e                	jmp    f0130b4c <chk2+0x248>
		{
			if (i == __tl) continue;
f0130afe:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f0130b02:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0130b05:	74 41                	je     f0130b48 <chk2+0x244>
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
f0130b07:	a1 90 27 86 f0       	mov    0xf0862790,%eax
f0130b0c:	8b 40 4c             	mov    0x4c(%eax),%eax
f0130b0f:	89 c2                	mov    %eax,%edx
f0130b11:	a1 e4 26 86 f0       	mov    0xf08626e4,%eax
f0130b16:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0130b19:	c1 e1 04             	shl    $0x4,%ecx
f0130b1c:	01 c8                	add    %ecx,%eax
f0130b1e:	83 ec 08             	sub    $0x8,%esp
f0130b21:	52                   	push   %edx
f0130b22:	50                   	push   %eax
f0130b23:	e8 55 3b fd ff       	call   f010467d <find_env_in_queue>
f0130b28:	83 c4 10             	add    $0x10,%esp
f0130b2b:	85 c0                	test   %eax,%eax
f0130b2d:	74 1a                	je     f0130b49 <chk2+0x245>
f0130b2f:	68 08 ce 13 f0       	push   $0xf013ce08
f0130b34:	68 32 cd 13 f0       	push   $0xf013cd32
f0130b39:	68 d8 00 00 00       	push   $0xd8
f0130b3e:	68 47 cd 13 f0       	push   $0xf013cd47
f0130b43:	e8 73 f7 fc ff       	call   f01002bb <_panic_all>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
		{
			if (i == __tl) continue;
f0130b48:	90                   	nop
	}
	if (__pe != NULL && __pe != __ne)
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
f0130b49:	ff 45 f0             	incl   -0x10(%ebp)
f0130b4c:	a0 7c 27 86 f0       	mov    0xf086277c,%al
f0130b51:	0f b6 c0             	movzbl %al,%eax
f0130b54:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0130b57:	7f a5                	jg     f0130afe <chk2+0x1fa>
f0130b59:	eb 01                	jmp    f0130b5c <chk2+0x258>
	schenv();
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f0130b5b:	90                   	nop
		{
			if (i == __tl) continue;
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
		}
	}
}
f0130b5c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0130b5f:	c9                   	leave  
f0130b60:	c3                   	ret    

f0130b61 <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f0130b61:	55                   	push   %ebp
f0130b62:	89 e5                	mov    %esp,%ebp
f0130b64:	83 ec 18             	sub    $0x18,%esp

	//2016
	// check phys mem
	#if USE_KHEAP
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f0130b67:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130b6e:	eb 40                	jmp    f0130bb0 <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f0130b70:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130b73:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f0130b79:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0130b7e:	83 ec 08             	sub    $0x8,%esp
f0130b81:	52                   	push   %edx
f0130b82:	50                   	push   %eax
f0130b83:	e8 9b 01 00 00       	call   f0130d23 <check_va2pa>
f0130b88:	83 c4 10             	add    $0x10,%esp
f0130b8b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130b8e:	74 19                	je     f0130ba9 <check_boot_pgdir+0x48>
f0130b90:	68 48 ce 13 f0       	push   $0xf013ce48
f0130b95:	68 32 cd 13 f0       	push   $0xf013cd32
f0130b9a:	68 fa 00 00 00       	push   $0xfa
f0130b9f:	68 47 cd 13 f0       	push   $0xf013cd47
f0130ba4:	e8 5c f6 fc ff       	call   f0100205 <_panic>

	//2016
	// check phys mem
	#if USE_KHEAP
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f0130ba9:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0130bb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130bb3:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f0130bb9:	a1 74 27 86 f0       	mov    0xf0862774,%eax
f0130bbe:	39 c2                	cmp    %eax,%edx
f0130bc0:	72 ae                	jb     f0130b70 <check_boot_pgdir+0xf>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f0130bc2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130bc9:	eb 74                	jmp    f0130c3f <check_boot_pgdir+0xde>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f0130bcb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130bce:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f0130bd4:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0130bd9:	83 ec 08             	sub    $0x8,%esp
f0130bdc:	52                   	push   %edx
f0130bdd:	50                   	push   %eax
f0130bde:	e8 40 01 00 00       	call   f0130d23 <check_va2pa>
f0130be3:	83 c4 10             	add    $0x10,%esp
f0130be6:	c7 45 f0 00 a0 18 f0 	movl   $0xf018a000,-0x10(%ebp)
f0130bed:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f0130bf4:	77 17                	ja     f0130c0d <check_boot_pgdir+0xac>
f0130bf6:	ff 75 f0             	pushl  -0x10(%ebp)
f0130bf9:	68 80 ce 13 f0       	push   $0xf013ce80
f0130bfe:	68 04 01 00 00       	push   $0x104
f0130c03:	68 47 cd 13 f0       	push   $0xf013cd47
f0130c08:	e8 f8 f5 fc ff       	call   f0100205 <_panic>
f0130c0d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0130c10:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f0130c16:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130c19:	01 ca                	add    %ecx,%edx
f0130c1b:	39 d0                	cmp    %edx,%eax
f0130c1d:	74 19                	je     f0130c38 <check_boot_pgdir+0xd7>
f0130c1f:	68 b4 ce 13 f0       	push   $0xf013ceb4
f0130c24:	68 32 cd 13 f0       	push   $0xf013cd32
f0130c29:	68 04 01 00 00       	push   $0x104
f0130c2e:	68 47 cd 13 f0       	push   $0xf013cd47
f0130c33:	e8 cd f5 fc ff       	call   f0100205 <_panic>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f0130c38:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0130c3f:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f0130c46:	76 83                	jbe    f0130bcb <check_boot_pgdir+0x6a>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f0130c48:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130c4f:	e9 af 00 00 00       	jmp    f0130d03 <check_boot_pgdir+0x1a2>
		switch (i) {
f0130c54:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130c57:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f0130c5c:	74 11                	je     f0130c6f <check_boot_pgdir+0x10e>
f0130c5e:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f0130c63:	72 36                	jb     f0130c9b <check_boot_pgdir+0x13a>
f0130c65:	2d bd 03 00 00       	sub    $0x3bd,%eax
f0130c6a:	83 f8 02             	cmp    $0x2,%eax
f0130c6d:	77 2c                	ja     f0130c9b <check_boot_pgdir+0x13a>
		case PDX(UVPT):
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f0130c6f:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0130c74:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130c77:	c1 e2 02             	shl    $0x2,%edx
f0130c7a:	01 d0                	add    %edx,%eax
f0130c7c:	8b 00                	mov    (%eax),%eax
f0130c7e:	85 c0                	test   %eax,%eax
f0130c80:	75 7a                	jne    f0130cfc <check_boot_pgdir+0x19b>
f0130c82:	68 36 cf 13 f0       	push   $0xf013cf36
f0130c87:	68 32 cd 13 f0       	push   $0xf013cd32
f0130c8c:	68 0f 01 00 00       	push   $0x10f
f0130c91:	68 47 cd 13 f0       	push   $0xf013cd47
f0130c96:	e8 6a f5 fc ff       	call   f0100205 <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f0130c9b:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f0130ca2:	76 2c                	jbe    f0130cd0 <check_boot_pgdir+0x16f>
				assert(ptr_page_directory[i]);
f0130ca4:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0130ca9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130cac:	c1 e2 02             	shl    $0x2,%edx
f0130caf:	01 d0                	add    %edx,%eax
f0130cb1:	8b 00                	mov    (%eax),%eax
f0130cb3:	85 c0                	test   %eax,%eax
f0130cb5:	75 48                	jne    f0130cff <check_boot_pgdir+0x19e>
f0130cb7:	68 36 cf 13 f0       	push   $0xf013cf36
f0130cbc:	68 32 cd 13 f0       	push   $0xf013cd32
f0130cc1:	68 13 01 00 00       	push   $0x113
f0130cc6:	68 47 cd 13 f0       	push   $0xf013cd47
f0130ccb:	e8 35 f5 fc ff       	call   f0100205 <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f0130cd0:	a1 78 27 86 f0       	mov    0xf0862778,%eax
f0130cd5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130cd8:	c1 e2 02             	shl    $0x2,%edx
f0130cdb:	01 d0                	add    %edx,%eax
f0130cdd:	8b 00                	mov    (%eax),%eax
f0130cdf:	85 c0                	test   %eax,%eax
f0130ce1:	74 1c                	je     f0130cff <check_boot_pgdir+0x19e>
f0130ce3:	68 4c cf 13 f0       	push   $0xf013cf4c
f0130ce8:	68 32 cd 13 f0       	push   $0xf013cd32
f0130ced:	68 15 01 00 00       	push   $0x115
f0130cf2:	68 47 cd 13 f0       	push   $0xf013cd47
f0130cf7:	e8 09 f5 fc ff       	call   f0100205 <_panic>
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f0130cfc:	90                   	nop
f0130cfd:	eb 01                	jmp    f0130d00 <check_boot_pgdir+0x19f>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f0130cff:	90                   	nop
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f0130d00:	ff 45 f4             	incl   -0xc(%ebp)
f0130d03:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0130d0a:	0f 86 44 ff ff ff    	jbe    f0130c54 <check_boot_pgdir+0xf3>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("check_boot_pgdir() succeeded!\n");
f0130d10:	83 ec 0c             	sub    $0xc,%esp
f0130d13:	68 68 cf 13 f0       	push   $0xf013cf68
f0130d18:	e8 f1 ff fc ff       	call   f0100d0e <cprintf>
f0130d1d:	83 c4 10             	add    $0x10,%esp
}
f0130d20:	90                   	nop
f0130d21:	c9                   	leave  
f0130d22:	c3                   	ret    

f0130d23 <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f0130d23:	55                   	push   %ebp
f0130d24:	89 e5                	mov    %esp,%ebp
f0130d26:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f0130d29:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130d2c:	c1 e8 16             	shr    $0x16,%eax
f0130d2f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130d36:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d39:	01 d0                	add    %edx,%eax
f0130d3b:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f0130d3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130d41:	8b 00                	mov    (%eax),%eax
f0130d43:	83 e0 01             	and    $0x1,%eax
f0130d46:	85 c0                	test   %eax,%eax
f0130d48:	75 0a                	jne    f0130d54 <check_va2pa+0x31>
		return ~0;
f0130d4a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0130d4f:	e9 87 00 00 00       	jmp    f0130ddb <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f0130d54:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130d57:	8b 00                	mov    (%eax),%eax
f0130d59:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0130d5e:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130d61:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130d64:	c1 e8 0c             	shr    $0xc,%eax
f0130d67:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0130d6a:	a1 0c 27 86 f0       	mov    0xf086270c,%eax
f0130d6f:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0130d72:	72 17                	jb     f0130d8b <check_va2pa+0x68>
f0130d74:	ff 75 f0             	pushl  -0x10(%ebp)
f0130d77:	68 88 cf 13 f0       	push   $0xf013cf88
f0130d7c:	68 2b 01 00 00       	push   $0x12b
f0130d81:	68 47 cd 13 f0       	push   $0xf013cd47
f0130d86:	e8 7a f4 fc ff       	call   f0100205 <_panic>
f0130d8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130d8e:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0130d93:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f0130d96:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130d99:	c1 e8 0c             	shr    $0xc,%eax
f0130d9c:	25 ff 03 00 00       	and    $0x3ff,%eax
f0130da1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130da8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0130dab:	01 d0                	add    %edx,%eax
f0130dad:	8b 00                	mov    (%eax),%eax
f0130daf:	83 e0 01             	and    $0x1,%eax
f0130db2:	85 c0                	test   %eax,%eax
f0130db4:	75 07                	jne    f0130dbd <check_va2pa+0x9a>
		return ~0;
f0130db6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0130dbb:	eb 1e                	jmp    f0130ddb <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f0130dbd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130dc0:	c1 e8 0c             	shr    $0xc,%eax
f0130dc3:	25 ff 03 00 00       	and    $0x3ff,%eax
f0130dc8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130dcf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0130dd2:	01 d0                	add    %edx,%eax
f0130dd4:	8b 00                	mov    (%eax),%eax
f0130dd6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0130ddb:	c9                   	leave  
f0130ddc:	c3                   	ret    

f0130ddd <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f0130ddd:	55                   	push   %ebp
f0130dde:	89 e5                	mov    %esp,%ebp
f0130de0:	53                   	push   %ebx
f0130de1:	83 ec 14             	sub    $0x14,%esp
f0130de4:	8b 45 10             	mov    0x10(%ebp),%eax
f0130de7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130dea:	8b 45 14             	mov    0x14(%ebp),%eax
f0130ded:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f0130df0:	8b 45 18             	mov    0x18(%ebp),%eax
f0130df3:	ba 00 00 00 00       	mov    $0x0,%edx
f0130df8:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f0130dfb:	77 55                	ja     f0130e52 <printnum+0x75>
f0130dfd:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f0130e00:	72 05                	jb     f0130e07 <printnum+0x2a>
f0130e02:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0130e05:	77 4b                	ja     f0130e52 <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f0130e07:	8b 45 1c             	mov    0x1c(%ebp),%eax
f0130e0a:	8d 58 ff             	lea    -0x1(%eax),%ebx
f0130e0d:	8b 45 18             	mov    0x18(%ebp),%eax
f0130e10:	ba 00 00 00 00       	mov    $0x0,%edx
f0130e15:	52                   	push   %edx
f0130e16:	50                   	push   %eax
f0130e17:	ff 75 f4             	pushl  -0xc(%ebp)
f0130e1a:	ff 75 f0             	pushl  -0x10(%ebp)
f0130e1d:	e8 0e 23 00 00       	call   f0133130 <__udivdi3>
f0130e22:	83 c4 10             	add    $0x10,%esp
f0130e25:	83 ec 04             	sub    $0x4,%esp
f0130e28:	ff 75 20             	pushl  0x20(%ebp)
f0130e2b:	53                   	push   %ebx
f0130e2c:	ff 75 18             	pushl  0x18(%ebp)
f0130e2f:	52                   	push   %edx
f0130e30:	50                   	push   %eax
f0130e31:	ff 75 0c             	pushl  0xc(%ebp)
f0130e34:	ff 75 08             	pushl  0x8(%ebp)
f0130e37:	e8 a1 ff ff ff       	call   f0130ddd <printnum>
f0130e3c:	83 c4 20             	add    $0x20,%esp
f0130e3f:	eb 1a                	jmp    f0130e5b <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f0130e41:	83 ec 08             	sub    $0x8,%esp
f0130e44:	ff 75 0c             	pushl  0xc(%ebp)
f0130e47:	ff 75 20             	pushl  0x20(%ebp)
f0130e4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e4d:	ff d0                	call   *%eax
f0130e4f:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f0130e52:	ff 4d 1c             	decl   0x1c(%ebp)
f0130e55:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f0130e59:	7f e6                	jg     f0130e41 <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f0130e5b:	8b 4d 18             	mov    0x18(%ebp),%ecx
f0130e5e:	bb 00 00 00 00       	mov    $0x0,%ebx
f0130e63:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130e66:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130e69:	53                   	push   %ebx
f0130e6a:	51                   	push   %ecx
f0130e6b:	52                   	push   %edx
f0130e6c:	50                   	push   %eax
f0130e6d:	e8 ce 23 00 00       	call   f0133240 <__umoddi3>
f0130e72:	83 c4 10             	add    $0x10,%esp
f0130e75:	05 d4 d1 13 f0       	add    $0xf013d1d4,%eax
f0130e7a:	8a 00                	mov    (%eax),%al
f0130e7c:	0f be c0             	movsbl %al,%eax
f0130e7f:	83 ec 08             	sub    $0x8,%esp
f0130e82:	ff 75 0c             	pushl  0xc(%ebp)
f0130e85:	50                   	push   %eax
f0130e86:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e89:	ff d0                	call   *%eax
f0130e8b:	83 c4 10             	add    $0x10,%esp
}
f0130e8e:	90                   	nop
f0130e8f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0130e92:	c9                   	leave  
f0130e93:	c3                   	ret    

f0130e94 <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f0130e94:	55                   	push   %ebp
f0130e95:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f0130e97:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f0130e9b:	7e 1c                	jle    f0130eb9 <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f0130e9d:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ea0:	8b 00                	mov    (%eax),%eax
f0130ea2:	8d 50 08             	lea    0x8(%eax),%edx
f0130ea5:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ea8:	89 10                	mov    %edx,(%eax)
f0130eaa:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ead:	8b 00                	mov    (%eax),%eax
f0130eaf:	83 e8 08             	sub    $0x8,%eax
f0130eb2:	8b 50 04             	mov    0x4(%eax),%edx
f0130eb5:	8b 00                	mov    (%eax),%eax
f0130eb7:	eb 40                	jmp    f0130ef9 <getuint+0x65>
	else if (lflag)
f0130eb9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130ebd:	74 1e                	je     f0130edd <getuint+0x49>
		return va_arg(*ap, unsigned long);
f0130ebf:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ec2:	8b 00                	mov    (%eax),%eax
f0130ec4:	8d 50 04             	lea    0x4(%eax),%edx
f0130ec7:	8b 45 08             	mov    0x8(%ebp),%eax
f0130eca:	89 10                	mov    %edx,(%eax)
f0130ecc:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ecf:	8b 00                	mov    (%eax),%eax
f0130ed1:	83 e8 04             	sub    $0x4,%eax
f0130ed4:	8b 00                	mov    (%eax),%eax
f0130ed6:	ba 00 00 00 00       	mov    $0x0,%edx
f0130edb:	eb 1c                	jmp    f0130ef9 <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f0130edd:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ee0:	8b 00                	mov    (%eax),%eax
f0130ee2:	8d 50 04             	lea    0x4(%eax),%edx
f0130ee5:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ee8:	89 10                	mov    %edx,(%eax)
f0130eea:	8b 45 08             	mov    0x8(%ebp),%eax
f0130eed:	8b 00                	mov    (%eax),%eax
f0130eef:	83 e8 04             	sub    $0x4,%eax
f0130ef2:	8b 00                	mov    (%eax),%eax
f0130ef4:	ba 00 00 00 00       	mov    $0x0,%edx
}
f0130ef9:	5d                   	pop    %ebp
f0130efa:	c3                   	ret    

f0130efb <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f0130efb:	55                   	push   %ebp
f0130efc:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f0130efe:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f0130f02:	7e 1c                	jle    f0130f20 <getint+0x25>
		return va_arg(*ap, long long);
f0130f04:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f07:	8b 00                	mov    (%eax),%eax
f0130f09:	8d 50 08             	lea    0x8(%eax),%edx
f0130f0c:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f0f:	89 10                	mov    %edx,(%eax)
f0130f11:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f14:	8b 00                	mov    (%eax),%eax
f0130f16:	83 e8 08             	sub    $0x8,%eax
f0130f19:	8b 50 04             	mov    0x4(%eax),%edx
f0130f1c:	8b 00                	mov    (%eax),%eax
f0130f1e:	eb 38                	jmp    f0130f58 <getint+0x5d>
	else if (lflag)
f0130f20:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130f24:	74 1a                	je     f0130f40 <getint+0x45>
		return va_arg(*ap, long);
f0130f26:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f29:	8b 00                	mov    (%eax),%eax
f0130f2b:	8d 50 04             	lea    0x4(%eax),%edx
f0130f2e:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f31:	89 10                	mov    %edx,(%eax)
f0130f33:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f36:	8b 00                	mov    (%eax),%eax
f0130f38:	83 e8 04             	sub    $0x4,%eax
f0130f3b:	8b 00                	mov    (%eax),%eax
f0130f3d:	99                   	cltd   
f0130f3e:	eb 18                	jmp    f0130f58 <getint+0x5d>
	else
		return va_arg(*ap, int);
f0130f40:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f43:	8b 00                	mov    (%eax),%eax
f0130f45:	8d 50 04             	lea    0x4(%eax),%edx
f0130f48:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f4b:	89 10                	mov    %edx,(%eax)
f0130f4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f50:	8b 00                	mov    (%eax),%eax
f0130f52:	83 e8 04             	sub    $0x4,%eax
f0130f55:	8b 00                	mov    (%eax),%eax
f0130f57:	99                   	cltd   
}
f0130f58:	5d                   	pop    %ebp
f0130f59:	c3                   	ret    

f0130f5a <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f0130f5a:	55                   	push   %ebp
f0130f5b:	89 e5                	mov    %esp,%ebp
f0130f5d:	56                   	push   %esi
f0130f5e:	53                   	push   %ebx
f0130f5f:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f0130f62:	eb 17                	jmp    f0130f7b <vprintfmt+0x21>
			if (ch == '\0')
f0130f64:	85 db                	test   %ebx,%ebx
f0130f66:	0f 84 af 03 00 00    	je     f013131b <vprintfmt+0x3c1>
				return;
			putch(ch, putdat);
f0130f6c:	83 ec 08             	sub    $0x8,%esp
f0130f6f:	ff 75 0c             	pushl  0xc(%ebp)
f0130f72:	53                   	push   %ebx
f0130f73:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f76:	ff d0                	call   *%eax
f0130f78:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f0130f7b:	8b 45 10             	mov    0x10(%ebp),%eax
f0130f7e:	8d 50 01             	lea    0x1(%eax),%edx
f0130f81:	89 55 10             	mov    %edx,0x10(%ebp)
f0130f84:	8a 00                	mov    (%eax),%al
f0130f86:	0f b6 d8             	movzbl %al,%ebx
f0130f89:	83 fb 25             	cmp    $0x25,%ebx
f0130f8c:	75 d6                	jne    f0130f64 <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f0130f8e:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f0130f92:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f0130f99:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f0130fa0:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f0130fa7:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f0130fae:	8b 45 10             	mov    0x10(%ebp),%eax
f0130fb1:	8d 50 01             	lea    0x1(%eax),%edx
f0130fb4:	89 55 10             	mov    %edx,0x10(%ebp)
f0130fb7:	8a 00                	mov    (%eax),%al
f0130fb9:	0f b6 d8             	movzbl %al,%ebx
f0130fbc:	8d 43 dd             	lea    -0x23(%ebx),%eax
f0130fbf:	83 f8 55             	cmp    $0x55,%eax
f0130fc2:	0f 87 2b 03 00 00    	ja     f01312f3 <vprintfmt+0x399>
f0130fc8:	8b 04 85 f8 d1 13 f0 	mov    -0xfec2e08(,%eax,4),%eax
f0130fcf:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f0130fd1:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f0130fd5:	eb d7                	jmp    f0130fae <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f0130fd7:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f0130fdb:	eb d1                	jmp    f0130fae <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f0130fdd:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f0130fe4:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0130fe7:	89 d0                	mov    %edx,%eax
f0130fe9:	c1 e0 02             	shl    $0x2,%eax
f0130fec:	01 d0                	add    %edx,%eax
f0130fee:	01 c0                	add    %eax,%eax
f0130ff0:	01 d8                	add    %ebx,%eax
f0130ff2:	83 e8 30             	sub    $0x30,%eax
f0130ff5:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f0130ff8:	8b 45 10             	mov    0x10(%ebp),%eax
f0130ffb:	8a 00                	mov    (%eax),%al
f0130ffd:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f0131000:	83 fb 2f             	cmp    $0x2f,%ebx
f0131003:	7e 3e                	jle    f0131043 <vprintfmt+0xe9>
f0131005:	83 fb 39             	cmp    $0x39,%ebx
f0131008:	7f 39                	jg     f0131043 <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f013100a:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f013100d:	eb d5                	jmp    f0130fe4 <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f013100f:	8b 45 14             	mov    0x14(%ebp),%eax
f0131012:	83 c0 04             	add    $0x4,%eax
f0131015:	89 45 14             	mov    %eax,0x14(%ebp)
f0131018:	8b 45 14             	mov    0x14(%ebp),%eax
f013101b:	83 e8 04             	sub    $0x4,%eax
f013101e:	8b 00                	mov    (%eax),%eax
f0131020:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f0131023:	eb 1f                	jmp    f0131044 <vprintfmt+0xea>

		case '.':
			if (width < 0)
f0131025:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0131029:	79 83                	jns    f0130fae <vprintfmt+0x54>
				width = 0;
f013102b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f0131032:	e9 77 ff ff ff       	jmp    f0130fae <vprintfmt+0x54>

		case '#':
			altflag = 1;
f0131037:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f013103e:	e9 6b ff ff ff       	jmp    f0130fae <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f0131043:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f0131044:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0131048:	0f 89 60 ff ff ff    	jns    f0130fae <vprintfmt+0x54>
				width = precision, precision = -1;
f013104e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0131051:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0131054:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f013105b:	e9 4e ff ff ff       	jmp    f0130fae <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f0131060:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f0131063:	e9 46 ff ff ff       	jmp    f0130fae <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f0131068:	8b 45 14             	mov    0x14(%ebp),%eax
f013106b:	83 c0 04             	add    $0x4,%eax
f013106e:	89 45 14             	mov    %eax,0x14(%ebp)
f0131071:	8b 45 14             	mov    0x14(%ebp),%eax
f0131074:	83 e8 04             	sub    $0x4,%eax
f0131077:	8b 00                	mov    (%eax),%eax
f0131079:	83 ec 08             	sub    $0x8,%esp
f013107c:	ff 75 0c             	pushl  0xc(%ebp)
f013107f:	50                   	push   %eax
f0131080:	8b 45 08             	mov    0x8(%ebp),%eax
f0131083:	ff d0                	call   *%eax
f0131085:	83 c4 10             	add    $0x10,%esp
			break;
f0131088:	e9 89 02 00 00       	jmp    f0131316 <vprintfmt+0x3bc>

		// error message
		case 'e':
			err = va_arg(ap, int);
f013108d:	8b 45 14             	mov    0x14(%ebp),%eax
f0131090:	83 c0 04             	add    $0x4,%eax
f0131093:	89 45 14             	mov    %eax,0x14(%ebp)
f0131096:	8b 45 14             	mov    0x14(%ebp),%eax
f0131099:	83 e8 04             	sub    $0x4,%eax
f013109c:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f013109e:	85 db                	test   %ebx,%ebx
f01310a0:	79 02                	jns    f01310a4 <vprintfmt+0x14a>
				err = -err;
f01310a2:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f01310a4:	83 fb 64             	cmp    $0x64,%ebx
f01310a7:	7f 0b                	jg     f01310b4 <vprintfmt+0x15a>
f01310a9:	8b 34 9d 40 d0 13 f0 	mov    -0xfec2fc0(,%ebx,4),%esi
f01310b0:	85 f6                	test   %esi,%esi
f01310b2:	75 19                	jne    f01310cd <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f01310b4:	53                   	push   %ebx
f01310b5:	68 e5 d1 13 f0       	push   $0xf013d1e5
f01310ba:	ff 75 0c             	pushl  0xc(%ebp)
f01310bd:	ff 75 08             	pushl  0x8(%ebp)
f01310c0:	e8 5e 02 00 00       	call   f0131323 <printfmt>
f01310c5:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f01310c8:	e9 49 02 00 00       	jmp    f0131316 <vprintfmt+0x3bc>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f01310cd:	56                   	push   %esi
f01310ce:	68 ee d1 13 f0       	push   $0xf013d1ee
f01310d3:	ff 75 0c             	pushl  0xc(%ebp)
f01310d6:	ff 75 08             	pushl  0x8(%ebp)
f01310d9:	e8 45 02 00 00       	call   f0131323 <printfmt>
f01310de:	83 c4 10             	add    $0x10,%esp
			break;
f01310e1:	e9 30 02 00 00       	jmp    f0131316 <vprintfmt+0x3bc>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f01310e6:	8b 45 14             	mov    0x14(%ebp),%eax
f01310e9:	83 c0 04             	add    $0x4,%eax
f01310ec:	89 45 14             	mov    %eax,0x14(%ebp)
f01310ef:	8b 45 14             	mov    0x14(%ebp),%eax
f01310f2:	83 e8 04             	sub    $0x4,%eax
f01310f5:	8b 30                	mov    (%eax),%esi
f01310f7:	85 f6                	test   %esi,%esi
f01310f9:	75 05                	jne    f0131100 <vprintfmt+0x1a6>
				p = "(null)";
f01310fb:	be f1 d1 13 f0       	mov    $0xf013d1f1,%esi
			if (width > 0 && padc != '-')
f0131100:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0131104:	7e 6d                	jle    f0131173 <vprintfmt+0x219>
f0131106:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f013110a:	74 67                	je     f0131173 <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f013110c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f013110f:	83 ec 08             	sub    $0x8,%esp
f0131112:	50                   	push   %eax
f0131113:	56                   	push   %esi
f0131114:	e8 12 05 00 00       	call   f013162b <strnlen>
f0131119:	83 c4 10             	add    $0x10,%esp
f013111c:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f013111f:	eb 16                	jmp    f0131137 <vprintfmt+0x1dd>
					putch(padc, putdat);
f0131121:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f0131125:	83 ec 08             	sub    $0x8,%esp
f0131128:	ff 75 0c             	pushl  0xc(%ebp)
f013112b:	50                   	push   %eax
f013112c:	8b 45 08             	mov    0x8(%ebp),%eax
f013112f:	ff d0                	call   *%eax
f0131131:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f0131134:	ff 4d e4             	decl   -0x1c(%ebp)
f0131137:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f013113b:	7f e4                	jg     f0131121 <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f013113d:	eb 34                	jmp    f0131173 <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f013113f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0131143:	74 1c                	je     f0131161 <vprintfmt+0x207>
f0131145:	83 fb 1f             	cmp    $0x1f,%ebx
f0131148:	7e 05                	jle    f013114f <vprintfmt+0x1f5>
f013114a:	83 fb 7e             	cmp    $0x7e,%ebx
f013114d:	7e 12                	jle    f0131161 <vprintfmt+0x207>
					putch('?', putdat);
f013114f:	83 ec 08             	sub    $0x8,%esp
f0131152:	ff 75 0c             	pushl  0xc(%ebp)
f0131155:	6a 3f                	push   $0x3f
f0131157:	8b 45 08             	mov    0x8(%ebp),%eax
f013115a:	ff d0                	call   *%eax
f013115c:	83 c4 10             	add    $0x10,%esp
f013115f:	eb 0f                	jmp    f0131170 <vprintfmt+0x216>
				else
					putch(ch, putdat);
f0131161:	83 ec 08             	sub    $0x8,%esp
f0131164:	ff 75 0c             	pushl  0xc(%ebp)
f0131167:	53                   	push   %ebx
f0131168:	8b 45 08             	mov    0x8(%ebp),%eax
f013116b:	ff d0                	call   *%eax
f013116d:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f0131170:	ff 4d e4             	decl   -0x1c(%ebp)
f0131173:	89 f0                	mov    %esi,%eax
f0131175:	8d 70 01             	lea    0x1(%eax),%esi
f0131178:	8a 00                	mov    (%eax),%al
f013117a:	0f be d8             	movsbl %al,%ebx
f013117d:	85 db                	test   %ebx,%ebx
f013117f:	74 24                	je     f01311a5 <vprintfmt+0x24b>
f0131181:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0131185:	78 b8                	js     f013113f <vprintfmt+0x1e5>
f0131187:	ff 4d e0             	decl   -0x20(%ebp)
f013118a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f013118e:	79 af                	jns    f013113f <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f0131190:	eb 13                	jmp    f01311a5 <vprintfmt+0x24b>
				putch(' ', putdat);
f0131192:	83 ec 08             	sub    $0x8,%esp
f0131195:	ff 75 0c             	pushl  0xc(%ebp)
f0131198:	6a 20                	push   $0x20
f013119a:	8b 45 08             	mov    0x8(%ebp),%eax
f013119d:	ff d0                	call   *%eax
f013119f:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f01311a2:	ff 4d e4             	decl   -0x1c(%ebp)
f01311a5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01311a9:	7f e7                	jg     f0131192 <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f01311ab:	e9 66 01 00 00       	jmp    f0131316 <vprintfmt+0x3bc>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f01311b0:	83 ec 08             	sub    $0x8,%esp
f01311b3:	ff 75 e8             	pushl  -0x18(%ebp)
f01311b6:	8d 45 14             	lea    0x14(%ebp),%eax
f01311b9:	50                   	push   %eax
f01311ba:	e8 3c fd ff ff       	call   f0130efb <getint>
f01311bf:	83 c4 10             	add    $0x10,%esp
f01311c2:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01311c5:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f01311c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01311cb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01311ce:	85 d2                	test   %edx,%edx
f01311d0:	79 23                	jns    f01311f5 <vprintfmt+0x29b>
				putch('-', putdat);
f01311d2:	83 ec 08             	sub    $0x8,%esp
f01311d5:	ff 75 0c             	pushl  0xc(%ebp)
f01311d8:	6a 2d                	push   $0x2d
f01311da:	8b 45 08             	mov    0x8(%ebp),%eax
f01311dd:	ff d0                	call   *%eax
f01311df:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f01311e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01311e5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01311e8:	f7 d8                	neg    %eax
f01311ea:	83 d2 00             	adc    $0x0,%edx
f01311ed:	f7 da                	neg    %edx
f01311ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01311f2:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f01311f5:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f01311fc:	e9 bc 00 00 00       	jmp    f01312bd <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f0131201:	83 ec 08             	sub    $0x8,%esp
f0131204:	ff 75 e8             	pushl  -0x18(%ebp)
f0131207:	8d 45 14             	lea    0x14(%ebp),%eax
f013120a:	50                   	push   %eax
f013120b:	e8 84 fc ff ff       	call   f0130e94 <getuint>
f0131210:	83 c4 10             	add    $0x10,%esp
f0131213:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0131216:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f0131219:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f0131220:	e9 98 00 00 00       	jmp    f01312bd <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f0131225:	83 ec 08             	sub    $0x8,%esp
f0131228:	ff 75 0c             	pushl  0xc(%ebp)
f013122b:	6a 58                	push   $0x58
f013122d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131230:	ff d0                	call   *%eax
f0131232:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f0131235:	83 ec 08             	sub    $0x8,%esp
f0131238:	ff 75 0c             	pushl  0xc(%ebp)
f013123b:	6a 58                	push   $0x58
f013123d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131240:	ff d0                	call   *%eax
f0131242:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f0131245:	83 ec 08             	sub    $0x8,%esp
f0131248:	ff 75 0c             	pushl  0xc(%ebp)
f013124b:	6a 58                	push   $0x58
f013124d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131250:	ff d0                	call   *%eax
f0131252:	83 c4 10             	add    $0x10,%esp
			break;
f0131255:	e9 bc 00 00 00       	jmp    f0131316 <vprintfmt+0x3bc>

		// pointer
		case 'p':
			putch('0', putdat);
f013125a:	83 ec 08             	sub    $0x8,%esp
f013125d:	ff 75 0c             	pushl  0xc(%ebp)
f0131260:	6a 30                	push   $0x30
f0131262:	8b 45 08             	mov    0x8(%ebp),%eax
f0131265:	ff d0                	call   *%eax
f0131267:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f013126a:	83 ec 08             	sub    $0x8,%esp
f013126d:	ff 75 0c             	pushl  0xc(%ebp)
f0131270:	6a 78                	push   $0x78
f0131272:	8b 45 08             	mov    0x8(%ebp),%eax
f0131275:	ff d0                	call   *%eax
f0131277:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f013127a:	8b 45 14             	mov    0x14(%ebp),%eax
f013127d:	83 c0 04             	add    $0x4,%eax
f0131280:	89 45 14             	mov    %eax,0x14(%ebp)
f0131283:	8b 45 14             	mov    0x14(%ebp),%eax
f0131286:	83 e8 04             	sub    $0x4,%eax
f0131289:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f013128b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f013128e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f0131295:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f013129c:	eb 1f                	jmp    f01312bd <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f013129e:	83 ec 08             	sub    $0x8,%esp
f01312a1:	ff 75 e8             	pushl  -0x18(%ebp)
f01312a4:	8d 45 14             	lea    0x14(%ebp),%eax
f01312a7:	50                   	push   %eax
f01312a8:	e8 e7 fb ff ff       	call   f0130e94 <getuint>
f01312ad:	83 c4 10             	add    $0x10,%esp
f01312b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01312b3:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f01312b6:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f01312bd:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f01312c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01312c4:	83 ec 04             	sub    $0x4,%esp
f01312c7:	52                   	push   %edx
f01312c8:	ff 75 e4             	pushl  -0x1c(%ebp)
f01312cb:	50                   	push   %eax
f01312cc:	ff 75 f4             	pushl  -0xc(%ebp)
f01312cf:	ff 75 f0             	pushl  -0x10(%ebp)
f01312d2:	ff 75 0c             	pushl  0xc(%ebp)
f01312d5:	ff 75 08             	pushl  0x8(%ebp)
f01312d8:	e8 00 fb ff ff       	call   f0130ddd <printnum>
f01312dd:	83 c4 20             	add    $0x20,%esp
			break;
f01312e0:	eb 34                	jmp    f0131316 <vprintfmt+0x3bc>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f01312e2:	83 ec 08             	sub    $0x8,%esp
f01312e5:	ff 75 0c             	pushl  0xc(%ebp)
f01312e8:	53                   	push   %ebx
f01312e9:	8b 45 08             	mov    0x8(%ebp),%eax
f01312ec:	ff d0                	call   *%eax
f01312ee:	83 c4 10             	add    $0x10,%esp
			break;
f01312f1:	eb 23                	jmp    f0131316 <vprintfmt+0x3bc>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f01312f3:	83 ec 08             	sub    $0x8,%esp
f01312f6:	ff 75 0c             	pushl  0xc(%ebp)
f01312f9:	6a 25                	push   $0x25
f01312fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01312fe:	ff d0                	call   *%eax
f0131300:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f0131303:	ff 4d 10             	decl   0x10(%ebp)
f0131306:	eb 03                	jmp    f013130b <vprintfmt+0x3b1>
f0131308:	ff 4d 10             	decl   0x10(%ebp)
f013130b:	8b 45 10             	mov    0x10(%ebp),%eax
f013130e:	48                   	dec    %eax
f013130f:	8a 00                	mov    (%eax),%al
f0131311:	3c 25                	cmp    $0x25,%al
f0131313:	75 f3                	jne    f0131308 <vprintfmt+0x3ae>
				/* do nothing */;
			break;
f0131315:	90                   	nop
		}
	}
f0131316:	e9 47 fc ff ff       	jmp    f0130f62 <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f013131b:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f013131c:	8d 65 f8             	lea    -0x8(%ebp),%esp
f013131f:	5b                   	pop    %ebx
f0131320:	5e                   	pop    %esi
f0131321:	5d                   	pop    %ebp
f0131322:	c3                   	ret    

f0131323 <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f0131323:	55                   	push   %ebp
f0131324:	89 e5                	mov    %esp,%ebp
f0131326:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0131329:	8d 45 10             	lea    0x10(%ebp),%eax
f013132c:	83 c0 04             	add    $0x4,%eax
f013132f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f0131332:	8b 45 10             	mov    0x10(%ebp),%eax
f0131335:	ff 75 f4             	pushl  -0xc(%ebp)
f0131338:	50                   	push   %eax
f0131339:	ff 75 0c             	pushl  0xc(%ebp)
f013133c:	ff 75 08             	pushl  0x8(%ebp)
f013133f:	e8 16 fc ff ff       	call   f0130f5a <vprintfmt>
f0131344:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f0131347:	90                   	nop
f0131348:	c9                   	leave  
f0131349:	c3                   	ret    

f013134a <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f013134a:	55                   	push   %ebp
f013134b:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f013134d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131350:	8b 40 08             	mov    0x8(%eax),%eax
f0131353:	8d 50 01             	lea    0x1(%eax),%edx
f0131356:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131359:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f013135c:	8b 45 0c             	mov    0xc(%ebp),%eax
f013135f:	8b 10                	mov    (%eax),%edx
f0131361:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131364:	8b 40 04             	mov    0x4(%eax),%eax
f0131367:	39 c2                	cmp    %eax,%edx
f0131369:	73 12                	jae    f013137d <sprintputch+0x33>
		*b->buf++ = ch;
f013136b:	8b 45 0c             	mov    0xc(%ebp),%eax
f013136e:	8b 00                	mov    (%eax),%eax
f0131370:	8d 48 01             	lea    0x1(%eax),%ecx
f0131373:	8b 55 0c             	mov    0xc(%ebp),%edx
f0131376:	89 0a                	mov    %ecx,(%edx)
f0131378:	8b 55 08             	mov    0x8(%ebp),%edx
f013137b:	88 10                	mov    %dl,(%eax)
}
f013137d:	90                   	nop
f013137e:	5d                   	pop    %ebp
f013137f:	c3                   	ret    

f0131380 <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f0131380:	55                   	push   %ebp
f0131381:	89 e5                	mov    %esp,%ebp
f0131383:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f0131386:	8b 45 08             	mov    0x8(%ebp),%eax
f0131389:	89 45 ec             	mov    %eax,-0x14(%ebp)
f013138c:	8b 45 0c             	mov    0xc(%ebp),%eax
f013138f:	8d 50 ff             	lea    -0x1(%eax),%edx
f0131392:	8b 45 08             	mov    0x8(%ebp),%eax
f0131395:	01 d0                	add    %edx,%eax
f0131397:	89 45 f0             	mov    %eax,-0x10(%ebp)
f013139a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f01313a1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01313a5:	74 06                	je     f01313ad <vsnprintf+0x2d>
f01313a7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01313ab:	7f 07                	jg     f01313b4 <vsnprintf+0x34>
		return -E_INVAL;
f01313ad:	b8 03 00 00 00       	mov    $0x3,%eax
f01313b2:	eb 20                	jmp    f01313d4 <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f01313b4:	ff 75 14             	pushl  0x14(%ebp)
f01313b7:	ff 75 10             	pushl  0x10(%ebp)
f01313ba:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01313bd:	50                   	push   %eax
f01313be:	68 4a 13 13 f0       	push   $0xf013134a
f01313c3:	e8 92 fb ff ff       	call   f0130f5a <vprintfmt>
f01313c8:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f01313cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01313ce:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f01313d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01313d4:	c9                   	leave  
f01313d5:	c3                   	ret    

f01313d6 <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f01313d6:	55                   	push   %ebp
f01313d7:	89 e5                	mov    %esp,%ebp
f01313d9:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f01313dc:	8d 45 10             	lea    0x10(%ebp),%eax
f01313df:	83 c0 04             	add    $0x4,%eax
f01313e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f01313e5:	8b 45 10             	mov    0x10(%ebp),%eax
f01313e8:	ff 75 f4             	pushl  -0xc(%ebp)
f01313eb:	50                   	push   %eax
f01313ec:	ff 75 0c             	pushl  0xc(%ebp)
f01313ef:	ff 75 08             	pushl  0x8(%ebp)
f01313f2:	e8 89 ff ff ff       	call   f0131380 <vsnprintf>
f01313f7:	83 c4 10             	add    $0x10,%esp
f01313fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f01313fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0131400:	c9                   	leave  
f0131401:	c3                   	ret    

f0131402 <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f0131402:	55                   	push   %ebp
f0131403:	89 e5                	mov    %esp,%ebp
f0131405:	83 ec 18             	sub    $0x18,%esp
		int i, c, echoing;

	if (prompt != NULL)
f0131408:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013140c:	74 13                	je     f0131421 <readline+0x1f>
		cprintf("%s", prompt);
f013140e:	83 ec 08             	sub    $0x8,%esp
f0131411:	ff 75 08             	pushl  0x8(%ebp)
f0131414:	68 50 d3 13 f0       	push   $0xf013d350
f0131419:	e8 f0 f8 fc ff       	call   f0100d0e <cprintf>
f013141e:	83 c4 10             	add    $0x10,%esp

	i = 0;
f0131421:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f0131428:	83 ec 0c             	sub    $0xc,%esp
f013142b:	6a 00                	push   $0x0
f013142d:	e8 89 f8 fc ff       	call   f0100cbb <iscons>
f0131432:	83 c4 10             	add    $0x10,%esp
f0131435:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f0131438:	e8 65 f8 fc ff       	call   f0100ca2 <getchar>
f013143d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f0131440:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0131444:	79 22                	jns    f0131468 <readline+0x66>
			if (c != -E_EOF)
f0131446:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f013144a:	0f 84 ad 00 00 00    	je     f01314fd <readline+0xfb>
				cprintf("read error: %e\n", c);
f0131450:	83 ec 08             	sub    $0x8,%esp
f0131453:	ff 75 ec             	pushl  -0x14(%ebp)
f0131456:	68 53 d3 13 f0       	push   $0xf013d353
f013145b:	e8 ae f8 fc ff       	call   f0100d0e <cprintf>
f0131460:	83 c4 10             	add    $0x10,%esp
			return;
f0131463:	e9 95 00 00 00       	jmp    f01314fd <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f0131468:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f013146c:	7e 34                	jle    f01314a2 <readline+0xa0>
f013146e:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f0131475:	7f 2b                	jg     f01314a2 <readline+0xa0>
			if (echoing)
f0131477:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013147b:	74 0e                	je     f013148b <readline+0x89>
				cputchar(c);
f013147d:	83 ec 0c             	sub    $0xc,%esp
f0131480:	ff 75 ec             	pushl  -0x14(%ebp)
f0131483:	e8 03 f8 fc ff       	call   f0100c8b <cputchar>
f0131488:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f013148b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013148e:	8d 50 01             	lea    0x1(%eax),%edx
f0131491:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0131494:	89 c2                	mov    %eax,%edx
f0131496:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131499:	01 d0                	add    %edx,%eax
f013149b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f013149e:	88 10                	mov    %dl,(%eax)
f01314a0:	eb 56                	jmp    f01314f8 <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f01314a2:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f01314a6:	75 1f                	jne    f01314c7 <readline+0xc5>
f01314a8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01314ac:	7e 19                	jle    f01314c7 <readline+0xc5>
			if (echoing)
f01314ae:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01314b2:	74 0e                	je     f01314c2 <readline+0xc0>
				cputchar(c);
f01314b4:	83 ec 0c             	sub    $0xc,%esp
f01314b7:	ff 75 ec             	pushl  -0x14(%ebp)
f01314ba:	e8 cc f7 fc ff       	call   f0100c8b <cputchar>
f01314bf:	83 c4 10             	add    $0x10,%esp

			i--;
f01314c2:	ff 4d f4             	decl   -0xc(%ebp)
f01314c5:	eb 31                	jmp    f01314f8 <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f01314c7:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f01314cb:	74 0a                	je     f01314d7 <readline+0xd5>
f01314cd:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f01314d1:	0f 85 61 ff ff ff    	jne    f0131438 <readline+0x36>
			if (echoing)
f01314d7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01314db:	74 0e                	je     f01314eb <readline+0xe9>
				cputchar(c);
f01314dd:	83 ec 0c             	sub    $0xc,%esp
f01314e0:	ff 75 ec             	pushl  -0x14(%ebp)
f01314e3:	e8 a3 f7 fc ff       	call   f0100c8b <cputchar>
f01314e8:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f01314eb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01314ee:	8b 45 0c             	mov    0xc(%ebp),%eax
f01314f1:	01 d0                	add    %edx,%eax
f01314f3:	c6 00 00             	movb   $0x0,(%eax)
			return;
f01314f6:	eb 06                	jmp    f01314fe <readline+0xfc>
		}
	}
f01314f8:	e9 3b ff ff ff       	jmp    f0131438 <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f01314fd:	90                   	nop
			buf[i] = 0;
			return;
		}
	}

}
f01314fe:	c9                   	leave  
f01314ff:	c3                   	ret    

f0131500 <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f0131500:	55                   	push   %ebp
f0131501:	89 e5                	mov    %esp,%ebp
f0131503:	83 ec 18             	sub    $0x18,%esp
	sys_disable_interrupt();
f0131506:	e8 59 ba fd ff       	call   f010cf64 <sys_disable_interrupt>
	int i, c, echoing;

	if (prompt != NULL)
f013150b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013150f:	74 13                	je     f0131524 <atomic_readline+0x24>
		cprintf("%s", prompt);
f0131511:	83 ec 08             	sub    $0x8,%esp
f0131514:	ff 75 08             	pushl  0x8(%ebp)
f0131517:	68 50 d3 13 f0       	push   $0xf013d350
f013151c:	e8 ed f7 fc ff       	call   f0100d0e <cprintf>
f0131521:	83 c4 10             	add    $0x10,%esp

	i = 0;
f0131524:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f013152b:	83 ec 0c             	sub    $0xc,%esp
f013152e:	6a 00                	push   $0x0
f0131530:	e8 86 f7 fc ff       	call   f0100cbb <iscons>
f0131535:	83 c4 10             	add    $0x10,%esp
f0131538:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f013153b:	e8 62 f7 fc ff       	call   f0100ca2 <getchar>
f0131540:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f0131543:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0131547:	79 23                	jns    f013156c <atomic_readline+0x6c>
			if (c != -E_EOF)
f0131549:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f013154d:	74 13                	je     f0131562 <atomic_readline+0x62>
				cprintf("read error: %e\n", c);
f013154f:	83 ec 08             	sub    $0x8,%esp
f0131552:	ff 75 ec             	pushl  -0x14(%ebp)
f0131555:	68 53 d3 13 f0       	push   $0xf013d353
f013155a:	e8 af f7 fc ff       	call   f0100d0e <cprintf>
f013155f:	83 c4 10             	add    $0x10,%esp
			sys_enable_interrupt();
f0131562:	e8 17 ba fd ff       	call   f010cf7e <sys_enable_interrupt>
			return;
f0131567:	e9 9a 00 00 00       	jmp    f0131606 <atomic_readline+0x106>
		} else if (c >= ' ' && i < BUFLEN-1) {
f013156c:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f0131570:	7e 34                	jle    f01315a6 <atomic_readline+0xa6>
f0131572:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f0131579:	7f 2b                	jg     f01315a6 <atomic_readline+0xa6>
			if (echoing)
f013157b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013157f:	74 0e                	je     f013158f <atomic_readline+0x8f>
				cputchar(c);
f0131581:	83 ec 0c             	sub    $0xc,%esp
f0131584:	ff 75 ec             	pushl  -0x14(%ebp)
f0131587:	e8 ff f6 fc ff       	call   f0100c8b <cputchar>
f013158c:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f013158f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131592:	8d 50 01             	lea    0x1(%eax),%edx
f0131595:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0131598:	89 c2                	mov    %eax,%edx
f013159a:	8b 45 0c             	mov    0xc(%ebp),%eax
f013159d:	01 d0                	add    %edx,%eax
f013159f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01315a2:	88 10                	mov    %dl,(%eax)
f01315a4:	eb 5b                	jmp    f0131601 <atomic_readline+0x101>
		} else if (c == '\b' && i > 0) {
f01315a6:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f01315aa:	75 1f                	jne    f01315cb <atomic_readline+0xcb>
f01315ac:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01315b0:	7e 19                	jle    f01315cb <atomic_readline+0xcb>
			if (echoing)
f01315b2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01315b6:	74 0e                	je     f01315c6 <atomic_readline+0xc6>
				cputchar(c);
f01315b8:	83 ec 0c             	sub    $0xc,%esp
f01315bb:	ff 75 ec             	pushl  -0x14(%ebp)
f01315be:	e8 c8 f6 fc ff       	call   f0100c8b <cputchar>
f01315c3:	83 c4 10             	add    $0x10,%esp
			i--;
f01315c6:	ff 4d f4             	decl   -0xc(%ebp)
f01315c9:	eb 36                	jmp    f0131601 <atomic_readline+0x101>
		} else if (c == '\n' || c == '\r') {
f01315cb:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f01315cf:	74 0a                	je     f01315db <atomic_readline+0xdb>
f01315d1:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f01315d5:	0f 85 60 ff ff ff    	jne    f013153b <atomic_readline+0x3b>
			if (echoing)
f01315db:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01315df:	74 0e                	je     f01315ef <atomic_readline+0xef>
				cputchar(c);
f01315e1:	83 ec 0c             	sub    $0xc,%esp
f01315e4:	ff 75 ec             	pushl  -0x14(%ebp)
f01315e7:	e8 9f f6 fc ff       	call   f0100c8b <cputchar>
f01315ec:	83 c4 10             	add    $0x10,%esp
			buf[i] = 0;
f01315ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01315f2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01315f5:	01 d0                	add    %edx,%eax
f01315f7:	c6 00 00             	movb   $0x0,(%eax)
			sys_enable_interrupt();
f01315fa:	e8 7f b9 fd ff       	call   f010cf7e <sys_enable_interrupt>
			return;
f01315ff:	eb 05                	jmp    f0131606 <atomic_readline+0x106>
		}
	}
f0131601:	e9 35 ff ff ff       	jmp    f013153b <atomic_readline+0x3b>
}
f0131606:	c9                   	leave  
f0131607:	c3                   	ret    

f0131608 <strlen>:

#include <inc/string.h>

int
strlen(const char *s)
{
f0131608:	55                   	push   %ebp
f0131609:	89 e5                	mov    %esp,%ebp
f013160b:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f013160e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0131615:	eb 06                	jmp    f013161d <strlen+0x15>
		n++;
f0131617:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f013161a:	ff 45 08             	incl   0x8(%ebp)
f013161d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131620:	8a 00                	mov    (%eax),%al
f0131622:	84 c0                	test   %al,%al
f0131624:	75 f1                	jne    f0131617 <strlen+0xf>
		n++;
	return n;
f0131626:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0131629:	c9                   	leave  
f013162a:	c3                   	ret    

f013162b <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f013162b:	55                   	push   %ebp
f013162c:	89 e5                	mov    %esp,%ebp
f013162e:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f0131631:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0131638:	eb 09                	jmp    f0131643 <strnlen+0x18>
		n++;
f013163a:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f013163d:	ff 45 08             	incl   0x8(%ebp)
f0131640:	ff 4d 0c             	decl   0xc(%ebp)
f0131643:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0131647:	74 09                	je     f0131652 <strnlen+0x27>
f0131649:	8b 45 08             	mov    0x8(%ebp),%eax
f013164c:	8a 00                	mov    (%eax),%al
f013164e:	84 c0                	test   %al,%al
f0131650:	75 e8                	jne    f013163a <strnlen+0xf>
		n++;
	return n;
f0131652:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0131655:	c9                   	leave  
f0131656:	c3                   	ret    

f0131657 <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f0131657:	55                   	push   %ebp
f0131658:	89 e5                	mov    %esp,%ebp
f013165a:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f013165d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131660:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f0131663:	90                   	nop
f0131664:	8b 45 08             	mov    0x8(%ebp),%eax
f0131667:	8d 50 01             	lea    0x1(%eax),%edx
f013166a:	89 55 08             	mov    %edx,0x8(%ebp)
f013166d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0131670:	8d 4a 01             	lea    0x1(%edx),%ecx
f0131673:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0131676:	8a 12                	mov    (%edx),%dl
f0131678:	88 10                	mov    %dl,(%eax)
f013167a:	8a 00                	mov    (%eax),%al
f013167c:	84 c0                	test   %al,%al
f013167e:	75 e4                	jne    f0131664 <strcpy+0xd>
		/* do nothing */;
	return ret;
f0131680:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0131683:	c9                   	leave  
f0131684:	c3                   	ret    

f0131685 <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f0131685:	55                   	push   %ebp
f0131686:	89 e5                	mov    %esp,%ebp
f0131688:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f013168b:	8b 45 08             	mov    0x8(%ebp),%eax
f013168e:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f0131691:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0131698:	eb 1f                	jmp    f01316b9 <strncpy+0x34>
		*dst++ = *src;
f013169a:	8b 45 08             	mov    0x8(%ebp),%eax
f013169d:	8d 50 01             	lea    0x1(%eax),%edx
f01316a0:	89 55 08             	mov    %edx,0x8(%ebp)
f01316a3:	8b 55 0c             	mov    0xc(%ebp),%edx
f01316a6:	8a 12                	mov    (%edx),%dl
f01316a8:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f01316aa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01316ad:	8a 00                	mov    (%eax),%al
f01316af:	84 c0                	test   %al,%al
f01316b1:	74 03                	je     f01316b6 <strncpy+0x31>
			src++;
f01316b3:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f01316b6:	ff 45 fc             	incl   -0x4(%ebp)
f01316b9:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01316bc:	3b 45 10             	cmp    0x10(%ebp),%eax
f01316bf:	72 d9                	jb     f013169a <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f01316c1:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01316c4:	c9                   	leave  
f01316c5:	c3                   	ret    

f01316c6 <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f01316c6:	55                   	push   %ebp
f01316c7:	89 e5                	mov    %esp,%ebp
f01316c9:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f01316cc:	8b 45 08             	mov    0x8(%ebp),%eax
f01316cf:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f01316d2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01316d6:	74 30                	je     f0131708 <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f01316d8:	eb 16                	jmp    f01316f0 <strlcpy+0x2a>
			*dst++ = *src++;
f01316da:	8b 45 08             	mov    0x8(%ebp),%eax
f01316dd:	8d 50 01             	lea    0x1(%eax),%edx
f01316e0:	89 55 08             	mov    %edx,0x8(%ebp)
f01316e3:	8b 55 0c             	mov    0xc(%ebp),%edx
f01316e6:	8d 4a 01             	lea    0x1(%edx),%ecx
f01316e9:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f01316ec:	8a 12                	mov    (%edx),%dl
f01316ee:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f01316f0:	ff 4d 10             	decl   0x10(%ebp)
f01316f3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01316f7:	74 09                	je     f0131702 <strlcpy+0x3c>
f01316f9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01316fc:	8a 00                	mov    (%eax),%al
f01316fe:	84 c0                	test   %al,%al
f0131700:	75 d8                	jne    f01316da <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f0131702:	8b 45 08             	mov    0x8(%ebp),%eax
f0131705:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f0131708:	8b 55 08             	mov    0x8(%ebp),%edx
f013170b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013170e:	29 c2                	sub    %eax,%edx
f0131710:	89 d0                	mov    %edx,%eax
}
f0131712:	c9                   	leave  
f0131713:	c3                   	ret    

f0131714 <strcmp>:

int
strcmp(const char *p, const char *q)
{
f0131714:	55                   	push   %ebp
f0131715:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f0131717:	eb 06                	jmp    f013171f <strcmp+0xb>
		p++, q++;
f0131719:	ff 45 08             	incl   0x8(%ebp)
f013171c:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f013171f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131722:	8a 00                	mov    (%eax),%al
f0131724:	84 c0                	test   %al,%al
f0131726:	74 0e                	je     f0131736 <strcmp+0x22>
f0131728:	8b 45 08             	mov    0x8(%ebp),%eax
f013172b:	8a 10                	mov    (%eax),%dl
f013172d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131730:	8a 00                	mov    (%eax),%al
f0131732:	38 c2                	cmp    %al,%dl
f0131734:	74 e3                	je     f0131719 <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f0131736:	8b 45 08             	mov    0x8(%ebp),%eax
f0131739:	8a 00                	mov    (%eax),%al
f013173b:	0f b6 d0             	movzbl %al,%edx
f013173e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131741:	8a 00                	mov    (%eax),%al
f0131743:	0f b6 c0             	movzbl %al,%eax
f0131746:	29 c2                	sub    %eax,%edx
f0131748:	89 d0                	mov    %edx,%eax
}
f013174a:	5d                   	pop    %ebp
f013174b:	c3                   	ret    

f013174c <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f013174c:	55                   	push   %ebp
f013174d:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f013174f:	eb 09                	jmp    f013175a <strncmp+0xe>
		n--, p++, q++;
f0131751:	ff 4d 10             	decl   0x10(%ebp)
f0131754:	ff 45 08             	incl   0x8(%ebp)
f0131757:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f013175a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f013175e:	74 17                	je     f0131777 <strncmp+0x2b>
f0131760:	8b 45 08             	mov    0x8(%ebp),%eax
f0131763:	8a 00                	mov    (%eax),%al
f0131765:	84 c0                	test   %al,%al
f0131767:	74 0e                	je     f0131777 <strncmp+0x2b>
f0131769:	8b 45 08             	mov    0x8(%ebp),%eax
f013176c:	8a 10                	mov    (%eax),%dl
f013176e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131771:	8a 00                	mov    (%eax),%al
f0131773:	38 c2                	cmp    %al,%dl
f0131775:	74 da                	je     f0131751 <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f0131777:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f013177b:	75 07                	jne    f0131784 <strncmp+0x38>
		return 0;
f013177d:	b8 00 00 00 00       	mov    $0x0,%eax
f0131782:	eb 14                	jmp    f0131798 <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f0131784:	8b 45 08             	mov    0x8(%ebp),%eax
f0131787:	8a 00                	mov    (%eax),%al
f0131789:	0f b6 d0             	movzbl %al,%edx
f013178c:	8b 45 0c             	mov    0xc(%ebp),%eax
f013178f:	8a 00                	mov    (%eax),%al
f0131791:	0f b6 c0             	movzbl %al,%eax
f0131794:	29 c2                	sub    %eax,%edx
f0131796:	89 d0                	mov    %edx,%eax
}
f0131798:	5d                   	pop    %ebp
f0131799:	c3                   	ret    

f013179a <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f013179a:	55                   	push   %ebp
f013179b:	89 e5                	mov    %esp,%ebp
f013179d:	83 ec 04             	sub    $0x4,%esp
f01317a0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01317a3:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f01317a6:	eb 12                	jmp    f01317ba <strchr+0x20>
		if (*s == c)
f01317a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01317ab:	8a 00                	mov    (%eax),%al
f01317ad:	3a 45 fc             	cmp    -0x4(%ebp),%al
f01317b0:	75 05                	jne    f01317b7 <strchr+0x1d>
			return (char *) s;
f01317b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01317b5:	eb 11                	jmp    f01317c8 <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f01317b7:	ff 45 08             	incl   0x8(%ebp)
f01317ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01317bd:	8a 00                	mov    (%eax),%al
f01317bf:	84 c0                	test   %al,%al
f01317c1:	75 e5                	jne    f01317a8 <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f01317c3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01317c8:	c9                   	leave  
f01317c9:	c3                   	ret    

f01317ca <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f01317ca:	55                   	push   %ebp
f01317cb:	89 e5                	mov    %esp,%ebp
f01317cd:	83 ec 04             	sub    $0x4,%esp
f01317d0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01317d3:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f01317d6:	eb 0d                	jmp    f01317e5 <strfind+0x1b>
		if (*s == c)
f01317d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01317db:	8a 00                	mov    (%eax),%al
f01317dd:	3a 45 fc             	cmp    -0x4(%ebp),%al
f01317e0:	74 0e                	je     f01317f0 <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f01317e2:	ff 45 08             	incl   0x8(%ebp)
f01317e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01317e8:	8a 00                	mov    (%eax),%al
f01317ea:	84 c0                	test   %al,%al
f01317ec:	75 ea                	jne    f01317d8 <strfind+0xe>
f01317ee:	eb 01                	jmp    f01317f1 <strfind+0x27>
		if (*s == c)
			break;
f01317f0:	90                   	nop
	return (char *) s;
f01317f1:	8b 45 08             	mov    0x8(%ebp),%eax
}
f01317f4:	c9                   	leave  
f01317f5:	c3                   	ret    

f01317f6 <memset>:


void *
memset(void *v, int c, uint32 n)
{
f01317f6:	55                   	push   %ebp
f01317f7:	89 e5                	mov    %esp,%ebp
f01317f9:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f01317fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01317ff:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f0131802:	8b 45 10             	mov    0x10(%ebp),%eax
f0131805:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f0131808:	eb 0e                	jmp    f0131818 <memset+0x22>
		*p++ = c;
f013180a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013180d:	8d 50 01             	lea    0x1(%eax),%edx
f0131810:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0131813:	8b 55 0c             	mov    0xc(%ebp),%edx
f0131816:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f0131818:	ff 4d f8             	decl   -0x8(%ebp)
f013181b:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f013181f:	79 e9                	jns    f013180a <memset+0x14>
		*p++ = c;

	return v;
f0131821:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131824:	c9                   	leave  
f0131825:	c3                   	ret    

f0131826 <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f0131826:	55                   	push   %ebp
f0131827:	89 e5                	mov    %esp,%ebp
f0131829:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f013182c:	8b 45 0c             	mov    0xc(%ebp),%eax
f013182f:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0131832:	8b 45 08             	mov    0x8(%ebp),%eax
f0131835:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f0131838:	eb 16                	jmp    f0131850 <memcpy+0x2a>
		*d++ = *s++;
f013183a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f013183d:	8d 50 01             	lea    0x1(%eax),%edx
f0131840:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0131843:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131846:	8d 4a 01             	lea    0x1(%edx),%ecx
f0131849:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f013184c:	8a 12                	mov    (%edx),%dl
f013184e:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f0131850:	8b 45 10             	mov    0x10(%ebp),%eax
f0131853:	8d 50 ff             	lea    -0x1(%eax),%edx
f0131856:	89 55 10             	mov    %edx,0x10(%ebp)
f0131859:	85 c0                	test   %eax,%eax
f013185b:	75 dd                	jne    f013183a <memcpy+0x14>
		*d++ = *s++;

	return dst;
f013185d:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131860:	c9                   	leave  
f0131861:	c3                   	ret    

f0131862 <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f0131862:	55                   	push   %ebp
f0131863:	89 e5                	mov    %esp,%ebp
f0131865:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f0131868:	8b 45 0c             	mov    0xc(%ebp),%eax
f013186b:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f013186e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131871:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f0131874:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131877:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f013187a:	73 50                	jae    f01318cc <memmove+0x6a>
f013187c:	8b 55 fc             	mov    -0x4(%ebp),%edx
f013187f:	8b 45 10             	mov    0x10(%ebp),%eax
f0131882:	01 d0                	add    %edx,%eax
f0131884:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0131887:	76 43                	jbe    f01318cc <memmove+0x6a>
		s += n;
f0131889:	8b 45 10             	mov    0x10(%ebp),%eax
f013188c:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f013188f:	8b 45 10             	mov    0x10(%ebp),%eax
f0131892:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f0131895:	eb 10                	jmp    f01318a7 <memmove+0x45>
			*--d = *--s;
f0131897:	ff 4d f8             	decl   -0x8(%ebp)
f013189a:	ff 4d fc             	decl   -0x4(%ebp)
f013189d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01318a0:	8a 10                	mov    (%eax),%dl
f01318a2:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01318a5:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f01318a7:	8b 45 10             	mov    0x10(%ebp),%eax
f01318aa:	8d 50 ff             	lea    -0x1(%eax),%edx
f01318ad:	89 55 10             	mov    %edx,0x10(%ebp)
f01318b0:	85 c0                	test   %eax,%eax
f01318b2:	75 e3                	jne    f0131897 <memmove+0x35>
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
f01318b4:	eb 23                	jmp    f01318d9 <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f01318b6:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01318b9:	8d 50 01             	lea    0x1(%eax),%edx
f01318bc:	89 55 f8             	mov    %edx,-0x8(%ebp)
f01318bf:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01318c2:	8d 4a 01             	lea    0x1(%edx),%ecx
f01318c5:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f01318c8:	8a 12                	mov    (%edx),%dl
f01318ca:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f01318cc:	8b 45 10             	mov    0x10(%ebp),%eax
f01318cf:	8d 50 ff             	lea    -0x1(%eax),%edx
f01318d2:	89 55 10             	mov    %edx,0x10(%ebp)
f01318d5:	85 c0                	test   %eax,%eax
f01318d7:	75 dd                	jne    f01318b6 <memmove+0x54>
			*d++ = *s++;

	return dst;
f01318d9:	8b 45 08             	mov    0x8(%ebp),%eax
}
f01318dc:	c9                   	leave  
f01318dd:	c3                   	ret    

f01318de <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f01318de:	55                   	push   %ebp
f01318df:	89 e5                	mov    %esp,%ebp
f01318e1:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f01318e4:	8b 45 08             	mov    0x8(%ebp),%eax
f01318e7:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f01318ea:	8b 45 0c             	mov    0xc(%ebp),%eax
f01318ed:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f01318f0:	eb 2a                	jmp    f013191c <memcmp+0x3e>
		if (*s1 != *s2)
f01318f2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01318f5:	8a 10                	mov    (%eax),%dl
f01318f7:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01318fa:	8a 00                	mov    (%eax),%al
f01318fc:	38 c2                	cmp    %al,%dl
f01318fe:	74 16                	je     f0131916 <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f0131900:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131903:	8a 00                	mov    (%eax),%al
f0131905:	0f b6 d0             	movzbl %al,%edx
f0131908:	8b 45 f8             	mov    -0x8(%ebp),%eax
f013190b:	8a 00                	mov    (%eax),%al
f013190d:	0f b6 c0             	movzbl %al,%eax
f0131910:	29 c2                	sub    %eax,%edx
f0131912:	89 d0                	mov    %edx,%eax
f0131914:	eb 18                	jmp    f013192e <memcmp+0x50>
		s1++, s2++;
f0131916:	ff 45 fc             	incl   -0x4(%ebp)
f0131919:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f013191c:	8b 45 10             	mov    0x10(%ebp),%eax
f013191f:	8d 50 ff             	lea    -0x1(%eax),%edx
f0131922:	89 55 10             	mov    %edx,0x10(%ebp)
f0131925:	85 c0                	test   %eax,%eax
f0131927:	75 c9                	jne    f01318f2 <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f0131929:	b8 00 00 00 00       	mov    $0x0,%eax
}
f013192e:	c9                   	leave  
f013192f:	c3                   	ret    

f0131930 <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f0131930:	55                   	push   %ebp
f0131931:	89 e5                	mov    %esp,%ebp
f0131933:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f0131936:	8b 55 08             	mov    0x8(%ebp),%edx
f0131939:	8b 45 10             	mov    0x10(%ebp),%eax
f013193c:	01 d0                	add    %edx,%eax
f013193e:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f0131941:	eb 15                	jmp    f0131958 <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f0131943:	8b 45 08             	mov    0x8(%ebp),%eax
f0131946:	8a 00                	mov    (%eax),%al
f0131948:	0f b6 d0             	movzbl %al,%edx
f013194b:	8b 45 0c             	mov    0xc(%ebp),%eax
f013194e:	0f b6 c0             	movzbl %al,%eax
f0131951:	39 c2                	cmp    %eax,%edx
f0131953:	74 0d                	je     f0131962 <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f0131955:	ff 45 08             	incl   0x8(%ebp)
f0131958:	8b 45 08             	mov    0x8(%ebp),%eax
f013195b:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f013195e:	72 e3                	jb     f0131943 <memfind+0x13>
f0131960:	eb 01                	jmp    f0131963 <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f0131962:	90                   	nop
	return (void *) s;
f0131963:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131966:	c9                   	leave  
f0131967:	c3                   	ret    

f0131968 <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f0131968:	55                   	push   %ebp
f0131969:	89 e5                	mov    %esp,%ebp
f013196b:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f013196e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f0131975:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f013197c:	eb 03                	jmp    f0131981 <strtol+0x19>
		s++;
f013197e:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0131981:	8b 45 08             	mov    0x8(%ebp),%eax
f0131984:	8a 00                	mov    (%eax),%al
f0131986:	3c 20                	cmp    $0x20,%al
f0131988:	74 f4                	je     f013197e <strtol+0x16>
f013198a:	8b 45 08             	mov    0x8(%ebp),%eax
f013198d:	8a 00                	mov    (%eax),%al
f013198f:	3c 09                	cmp    $0x9,%al
f0131991:	74 eb                	je     f013197e <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f0131993:	8b 45 08             	mov    0x8(%ebp),%eax
f0131996:	8a 00                	mov    (%eax),%al
f0131998:	3c 2b                	cmp    $0x2b,%al
f013199a:	75 05                	jne    f01319a1 <strtol+0x39>
		s++;
f013199c:	ff 45 08             	incl   0x8(%ebp)
f013199f:	eb 13                	jmp    f01319b4 <strtol+0x4c>
	else if (*s == '-')
f01319a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01319a4:	8a 00                	mov    (%eax),%al
f01319a6:	3c 2d                	cmp    $0x2d,%al
f01319a8:	75 0a                	jne    f01319b4 <strtol+0x4c>
		s++, neg = 1;
f01319aa:	ff 45 08             	incl   0x8(%ebp)
f01319ad:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f01319b4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01319b8:	74 06                	je     f01319c0 <strtol+0x58>
f01319ba:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f01319be:	75 20                	jne    f01319e0 <strtol+0x78>
f01319c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01319c3:	8a 00                	mov    (%eax),%al
f01319c5:	3c 30                	cmp    $0x30,%al
f01319c7:	75 17                	jne    f01319e0 <strtol+0x78>
f01319c9:	8b 45 08             	mov    0x8(%ebp),%eax
f01319cc:	40                   	inc    %eax
f01319cd:	8a 00                	mov    (%eax),%al
f01319cf:	3c 78                	cmp    $0x78,%al
f01319d1:	75 0d                	jne    f01319e0 <strtol+0x78>
		s += 2, base = 16;
f01319d3:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f01319d7:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f01319de:	eb 28                	jmp    f0131a08 <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f01319e0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01319e4:	75 15                	jne    f01319fb <strtol+0x93>
f01319e6:	8b 45 08             	mov    0x8(%ebp),%eax
f01319e9:	8a 00                	mov    (%eax),%al
f01319eb:	3c 30                	cmp    $0x30,%al
f01319ed:	75 0c                	jne    f01319fb <strtol+0x93>
		s++, base = 8;
f01319ef:	ff 45 08             	incl   0x8(%ebp)
f01319f2:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f01319f9:	eb 0d                	jmp    f0131a08 <strtol+0xa0>
	else if (base == 0)
f01319fb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01319ff:	75 07                	jne    f0131a08 <strtol+0xa0>
		base = 10;
f0131a01:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f0131a08:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a0b:	8a 00                	mov    (%eax),%al
f0131a0d:	3c 2f                	cmp    $0x2f,%al
f0131a0f:	7e 19                	jle    f0131a2a <strtol+0xc2>
f0131a11:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a14:	8a 00                	mov    (%eax),%al
f0131a16:	3c 39                	cmp    $0x39,%al
f0131a18:	7f 10                	jg     f0131a2a <strtol+0xc2>
			dig = *s - '0';
f0131a1a:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a1d:	8a 00                	mov    (%eax),%al
f0131a1f:	0f be c0             	movsbl %al,%eax
f0131a22:	83 e8 30             	sub    $0x30,%eax
f0131a25:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131a28:	eb 42                	jmp    f0131a6c <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f0131a2a:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a2d:	8a 00                	mov    (%eax),%al
f0131a2f:	3c 60                	cmp    $0x60,%al
f0131a31:	7e 19                	jle    f0131a4c <strtol+0xe4>
f0131a33:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a36:	8a 00                	mov    (%eax),%al
f0131a38:	3c 7a                	cmp    $0x7a,%al
f0131a3a:	7f 10                	jg     f0131a4c <strtol+0xe4>
			dig = *s - 'a' + 10;
f0131a3c:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a3f:	8a 00                	mov    (%eax),%al
f0131a41:	0f be c0             	movsbl %al,%eax
f0131a44:	83 e8 57             	sub    $0x57,%eax
f0131a47:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131a4a:	eb 20                	jmp    f0131a6c <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f0131a4c:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a4f:	8a 00                	mov    (%eax),%al
f0131a51:	3c 40                	cmp    $0x40,%al
f0131a53:	7e 39                	jle    f0131a8e <strtol+0x126>
f0131a55:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a58:	8a 00                	mov    (%eax),%al
f0131a5a:	3c 5a                	cmp    $0x5a,%al
f0131a5c:	7f 30                	jg     f0131a8e <strtol+0x126>
			dig = *s - 'A' + 10;
f0131a5e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a61:	8a 00                	mov    (%eax),%al
f0131a63:	0f be c0             	movsbl %al,%eax
f0131a66:	83 e8 37             	sub    $0x37,%eax
f0131a69:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f0131a6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131a6f:	3b 45 10             	cmp    0x10(%ebp),%eax
f0131a72:	7d 19                	jge    f0131a8d <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f0131a74:	ff 45 08             	incl   0x8(%ebp)
f0131a77:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131a7a:	0f af 45 10          	imul   0x10(%ebp),%eax
f0131a7e:	89 c2                	mov    %eax,%edx
f0131a80:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131a83:	01 d0                	add    %edx,%eax
f0131a85:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f0131a88:	e9 7b ff ff ff       	jmp    f0131a08 <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f0131a8d:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f0131a8e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0131a92:	74 08                	je     f0131a9c <strtol+0x134>
		*endptr = (char *) s;
f0131a94:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131a97:	8b 55 08             	mov    0x8(%ebp),%edx
f0131a9a:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f0131a9c:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0131aa0:	74 07                	je     f0131aa9 <strtol+0x141>
f0131aa2:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131aa5:	f7 d8                	neg    %eax
f0131aa7:	eb 03                	jmp    f0131aac <strtol+0x144>
f0131aa9:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0131aac:	c9                   	leave  
f0131aad:	c3                   	ret    

f0131aae <ltostr>:

void
ltostr(long value, char *str)
{
f0131aae:	55                   	push   %ebp
f0131aaf:	89 e5                	mov    %esp,%ebp
f0131ab1:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f0131ab4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f0131abb:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f0131ac2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131ac6:	79 13                	jns    f0131adb <ltostr+0x2d>
	{
		neg = 1;
f0131ac8:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f0131acf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131ad2:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f0131ad5:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f0131ad8:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f0131adb:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ade:	b9 0a 00 00 00       	mov    $0xa,%ecx
f0131ae3:	99                   	cltd   
f0131ae4:	f7 f9                	idiv   %ecx
f0131ae6:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f0131ae9:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131aec:	8d 50 01             	lea    0x1(%eax),%edx
f0131aef:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0131af2:	89 c2                	mov    %eax,%edx
f0131af4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131af7:	01 d0                	add    %edx,%eax
f0131af9:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131afc:	83 c2 30             	add    $0x30,%edx
f0131aff:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f0131b01:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0131b04:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0131b09:	f7 e9                	imul   %ecx
f0131b0b:	c1 fa 02             	sar    $0x2,%edx
f0131b0e:	89 c8                	mov    %ecx,%eax
f0131b10:	c1 f8 1f             	sar    $0x1f,%eax
f0131b13:	29 c2                	sub    %eax,%edx
f0131b15:	89 d0                	mov    %edx,%eax
f0131b17:	89 45 08             	mov    %eax,0x8(%ebp)
	} while (value % 10 != 0);
f0131b1a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0131b1d:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0131b22:	f7 e9                	imul   %ecx
f0131b24:	c1 fa 02             	sar    $0x2,%edx
f0131b27:	89 c8                	mov    %ecx,%eax
f0131b29:	c1 f8 1f             	sar    $0x1f,%eax
f0131b2c:	29 c2                	sub    %eax,%edx
f0131b2e:	89 d0                	mov    %edx,%eax
f0131b30:	c1 e0 02             	shl    $0x2,%eax
f0131b33:	01 d0                	add    %edx,%eax
f0131b35:	01 c0                	add    %eax,%eax
f0131b37:	29 c1                	sub    %eax,%ecx
f0131b39:	89 ca                	mov    %ecx,%edx
f0131b3b:	85 d2                	test   %edx,%edx
f0131b3d:	75 9c                	jne    f0131adb <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f0131b3f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f0131b46:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131b49:	48                   	dec    %eax
f0131b4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f0131b4d:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0131b51:	74 3d                	je     f0131b90 <ltostr+0xe2>
		start = 1 ;
f0131b53:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f0131b5a:	eb 34                	jmp    f0131b90 <ltostr+0xe2>
	{
		char tmp = str[start] ;
f0131b5c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131b5f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131b62:	01 d0                	add    %edx,%eax
f0131b64:	8a 00                	mov    (%eax),%al
f0131b66:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f0131b69:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131b6c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131b6f:	01 c2                	add    %eax,%edx
f0131b71:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0131b74:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131b77:	01 c8                	add    %ecx,%eax
f0131b79:	8a 00                	mov    (%eax),%al
f0131b7b:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f0131b7d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131b80:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131b83:	01 c2                	add    %eax,%edx
f0131b85:	8a 45 eb             	mov    -0x15(%ebp),%al
f0131b88:	88 02                	mov    %al,(%edx)
		start++ ;
f0131b8a:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f0131b8d:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f0131b90:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b93:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0131b96:	7c c4                	jl     f0131b5c <ltostr+0xae>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f0131b98:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0131b9b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131b9e:	01 d0                	add    %edx,%eax
f0131ba0:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f0131ba3:	90                   	nop
f0131ba4:	c9                   	leave  
f0131ba5:	c3                   	ret    

f0131ba6 <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f0131ba6:	55                   	push   %ebp
f0131ba7:	89 e5                	mov    %esp,%ebp
f0131ba9:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f0131bac:	ff 75 08             	pushl  0x8(%ebp)
f0131baf:	e8 54 fa ff ff       	call   f0131608 <strlen>
f0131bb4:	83 c4 04             	add    $0x4,%esp
f0131bb7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f0131bba:	ff 75 0c             	pushl  0xc(%ebp)
f0131bbd:	e8 46 fa ff ff       	call   f0131608 <strlen>
f0131bc2:	83 c4 04             	add    $0x4,%esp
f0131bc5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f0131bc8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f0131bcf:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0131bd6:	eb 17                	jmp    f0131bef <strcconcat+0x49>
		final[s] = str1[s] ;
f0131bd8:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131bdb:	8b 45 10             	mov    0x10(%ebp),%eax
f0131bde:	01 c2                	add    %eax,%edx
f0131be0:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0131be3:	8b 45 08             	mov    0x8(%ebp),%eax
f0131be6:	01 c8                	add    %ecx,%eax
f0131be8:	8a 00                	mov    (%eax),%al
f0131bea:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f0131bec:	ff 45 fc             	incl   -0x4(%ebp)
f0131bef:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131bf2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0131bf5:	7c e1                	jl     f0131bd8 <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f0131bf7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f0131bfe:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f0131c05:	eb 1f                	jmp    f0131c26 <strcconcat+0x80>
		final[s++] = str2[i] ;
f0131c07:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131c0a:	8d 50 01             	lea    0x1(%eax),%edx
f0131c0d:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0131c10:	89 c2                	mov    %eax,%edx
f0131c12:	8b 45 10             	mov    0x10(%ebp),%eax
f0131c15:	01 c2                	add    %eax,%edx
f0131c17:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f0131c1a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131c1d:	01 c8                	add    %ecx,%eax
f0131c1f:	8a 00                	mov    (%eax),%al
f0131c21:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f0131c23:	ff 45 f8             	incl   -0x8(%ebp)
f0131c26:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131c29:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0131c2c:	7c d9                	jl     f0131c07 <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f0131c2e:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131c31:	8b 45 10             	mov    0x10(%ebp),%eax
f0131c34:	01 d0                	add    %edx,%eax
f0131c36:	c6 00 00             	movb   $0x0,(%eax)
}
f0131c39:	90                   	nop
f0131c3a:	c9                   	leave  
f0131c3b:	c3                   	ret    

f0131c3c <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f0131c3c:	55                   	push   %ebp
f0131c3d:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f0131c3f:	8b 45 14             	mov    0x14(%ebp),%eax
f0131c42:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f0131c48:	8b 45 14             	mov    0x14(%ebp),%eax
f0131c4b:	8b 00                	mov    (%eax),%eax
f0131c4d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0131c54:	8b 45 10             	mov    0x10(%ebp),%eax
f0131c57:	01 d0                	add    %edx,%eax
f0131c59:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0131c5f:	eb 0c                	jmp    f0131c6d <strsplit+0x31>
			*string++ = 0;
f0131c61:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c64:	8d 50 01             	lea    0x1(%eax),%edx
f0131c67:	89 55 08             	mov    %edx,0x8(%ebp)
f0131c6a:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0131c6d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c70:	8a 00                	mov    (%eax),%al
f0131c72:	84 c0                	test   %al,%al
f0131c74:	74 18                	je     f0131c8e <strsplit+0x52>
f0131c76:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c79:	8a 00                	mov    (%eax),%al
f0131c7b:	0f be c0             	movsbl %al,%eax
f0131c7e:	50                   	push   %eax
f0131c7f:	ff 75 0c             	pushl  0xc(%ebp)
f0131c82:	e8 13 fb ff ff       	call   f013179a <strchr>
f0131c87:	83 c4 08             	add    $0x8,%esp
f0131c8a:	85 c0                	test   %eax,%eax
f0131c8c:	75 d3                	jne    f0131c61 <strsplit+0x25>
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
f0131c8e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c91:	8a 00                	mov    (%eax),%al
f0131c93:	84 c0                	test   %al,%al
f0131c95:	74 5a                	je     f0131cf1 <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1)
f0131c97:	8b 45 14             	mov    0x14(%ebp),%eax
f0131c9a:	8b 00                	mov    (%eax),%eax
f0131c9c:	83 f8 0f             	cmp    $0xf,%eax
f0131c9f:	75 07                	jne    f0131ca8 <strsplit+0x6c>
		{
			return 0;
f0131ca1:	b8 00 00 00 00       	mov    $0x0,%eax
f0131ca6:	eb 66                	jmp    f0131d0e <strsplit+0xd2>
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f0131ca8:	8b 45 14             	mov    0x14(%ebp),%eax
f0131cab:	8b 00                	mov    (%eax),%eax
f0131cad:	8d 48 01             	lea    0x1(%eax),%ecx
f0131cb0:	8b 55 14             	mov    0x14(%ebp),%edx
f0131cb3:	89 0a                	mov    %ecx,(%edx)
f0131cb5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0131cbc:	8b 45 10             	mov    0x10(%ebp),%eax
f0131cbf:	01 c2                	add    %eax,%edx
f0131cc1:	8b 45 08             	mov    0x8(%ebp),%eax
f0131cc4:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f0131cc6:	eb 03                	jmp    f0131ccb <strsplit+0x8f>
			string++;
f0131cc8:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f0131ccb:	8b 45 08             	mov    0x8(%ebp),%eax
f0131cce:	8a 00                	mov    (%eax),%al
f0131cd0:	84 c0                	test   %al,%al
f0131cd2:	74 8b                	je     f0131c5f <strsplit+0x23>
f0131cd4:	8b 45 08             	mov    0x8(%ebp),%eax
f0131cd7:	8a 00                	mov    (%eax),%al
f0131cd9:	0f be c0             	movsbl %al,%eax
f0131cdc:	50                   	push   %eax
f0131cdd:	ff 75 0c             	pushl  0xc(%ebp)
f0131ce0:	e8 b5 fa ff ff       	call   f013179a <strchr>
f0131ce5:	83 c4 08             	add    $0x8,%esp
f0131ce8:	85 c0                	test   %eax,%eax
f0131cea:	74 dc                	je     f0131cc8 <strsplit+0x8c>
			string++;
	}
f0131cec:	e9 6e ff ff ff       	jmp    f0131c5f <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f0131cf1:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f0131cf2:	8b 45 14             	mov    0x14(%ebp),%eax
f0131cf5:	8b 00                	mov    (%eax),%eax
f0131cf7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0131cfe:	8b 45 10             	mov    0x10(%ebp),%eax
f0131d01:	01 d0                	add    %edx,%eax
f0131d03:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f0131d09:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0131d0e:	c9                   	leave  
f0131d0f:	c3                   	ret    

f0131d10 <ide_wait_ready>:
#define IDE_ERR		0x01

static int diskno = 0;

static int ide_wait_ready(bool check_error)
{
f0131d10:	55                   	push   %ebp
f0131d11:	89 e5                	mov    %esp,%ebp
f0131d13:	83 ec 10             	sub    $0x10,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f0131d16:	90                   	nop
f0131d17:	c7 45 f8 f7 01 00 00 	movl   $0x1f7,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0131d1e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131d21:	89 c2                	mov    %eax,%edx
f0131d23:	ec                   	in     (%dx),%al
f0131d24:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0131d27:	8a 45 f7             	mov    -0x9(%ebp),%al
f0131d2a:	0f b6 c0             	movzbl %al,%eax
f0131d2d:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0131d30:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131d33:	25 c0 00 00 00       	and    $0xc0,%eax
f0131d38:	83 f8 40             	cmp    $0x40,%eax
f0131d3b:	75 da                	jne    f0131d17 <ide_wait_ready+0x7>
		/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f0131d3d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131d41:	74 11                	je     f0131d54 <ide_wait_ready+0x44>
f0131d43:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131d46:	83 e0 21             	and    $0x21,%eax
f0131d49:	85 c0                	test   %eax,%eax
f0131d4b:	74 07                	je     f0131d54 <ide_wait_ready+0x44>
	{
 		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
f0131d4d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0131d52:	eb 05                	jmp    f0131d59 <ide_wait_ready+0x49>
	}
	return 0;
f0131d54:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131d59:	c9                   	leave  
f0131d5a:	c3                   	ret    

f0131d5b <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f0131d5b:	55                   	push   %ebp
f0131d5c:	89 e5                	mov    %esp,%ebp
f0131d5e:	57                   	push   %edi
f0131d5f:	53                   	push   %ebx
f0131d60:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f0131d63:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0131d6a:	76 16                	jbe    f0131d82 <ide_read+0x27>
f0131d6c:	68 63 d3 13 f0       	push   $0xf013d363
f0131d71:	68 70 d3 13 f0       	push   $0xf013d370
f0131d76:	6a 25                	push   $0x25
f0131d78:	68 85 d3 13 f0       	push   $0xf013d385
f0131d7d:	e8 83 e4 fc ff       	call   f0100205 <_panic>

	ide_wait_ready(0);
f0131d82:	83 ec 0c             	sub    $0xc,%esp
f0131d85:	6a 00                	push   $0x0
f0131d87:	e8 84 ff ff ff       	call   f0131d10 <ide_wait_ready>
f0131d8c:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f0131d8f:	8b 45 10             	mov    0x10(%ebp),%eax
f0131d92:	0f b6 c0             	movzbl %al,%eax
f0131d95:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0131d9c:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0131d9f:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0131da2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131da5:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0131da6:	8b 45 08             	mov    0x8(%ebp),%eax
f0131da9:	0f b6 c0             	movzbl %al,%eax
f0131dac:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0131db3:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0131db6:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0131db9:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131dbc:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f0131dbd:	8b 45 08             	mov    0x8(%ebp),%eax
f0131dc0:	c1 e8 08             	shr    $0x8,%eax
f0131dc3:	0f b6 c0             	movzbl %al,%eax
f0131dc6:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f0131dcd:	88 45 d4             	mov    %al,-0x2c(%ebp)
f0131dd0:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0131dd3:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131dd6:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f0131dd7:	8b 45 08             	mov    0x8(%ebp),%eax
f0131dda:	c1 e8 10             	shr    $0x10,%eax
f0131ddd:	0f b6 c0             	movzbl %al,%eax
f0131de0:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f0131de7:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0131dea:	8a 45 d5             	mov    -0x2b(%ebp),%al
f0131ded:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0131df0:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0131df1:	a1 ac 26 86 f0       	mov    0xf08626ac,%eax
f0131df6:	83 e0 01             	and    $0x1,%eax
f0131df9:	c1 e0 04             	shl    $0x4,%eax
f0131dfc:	88 c2                	mov    %al,%dl
f0131dfe:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e01:	c1 e8 18             	shr    $0x18,%eax
f0131e04:	83 e0 0f             	and    $0xf,%eax
f0131e07:	09 d0                	or     %edx,%eax
f0131e09:	83 c8 e0             	or     $0xffffffe0,%eax
f0131e0c:	0f b6 c0             	movzbl %al,%eax
f0131e0f:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0131e16:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0131e19:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0131e1c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0131e1f:	ee                   	out    %al,(%dx)
f0131e20:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0131e27:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f0131e2b:	8a 45 d7             	mov    -0x29(%ebp),%al
f0131e2e:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0131e31:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0131e32:	eb 55                	jmp    f0131e89 <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0131e34:	83 ec 0c             	sub    $0xc,%esp
f0131e37:	6a 01                	push   $0x1
f0131e39:	e8 d2 fe ff ff       	call   f0131d10 <ide_wait_ready>
f0131e3e:	83 c4 10             	add    $0x10,%esp
f0131e41:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0131e44:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0131e48:	79 05                	jns    f0131e4f <ide_read+0xf4>
			return r;
f0131e4a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0131e4d:	eb 45                	jmp    f0131e94 <ide_read+0x139>
f0131e4f:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0131e56:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131e59:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0131e5c:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f0131e63:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131e66:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0131e69:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0131e6c:	89 cb                	mov    %ecx,%ebx
f0131e6e:	89 df                	mov    %ebx,%edi
f0131e70:	89 c1                	mov    %eax,%ecx
f0131e72:	fc                   	cld    
f0131e73:	f2 6d                	repnz insl (%dx),%es:(%edi)
f0131e75:	89 c8                	mov    %ecx,%eax
f0131e77:	89 fb                	mov    %edi,%ebx
f0131e79:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0131e7c:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0131e7f:	ff 4d 10             	decl   0x10(%ebp)
f0131e82:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0131e89:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131e8d:	75 a5                	jne    f0131e34 <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f0131e8f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131e94:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0131e97:	5b                   	pop    %ebx
f0131e98:	5f                   	pop    %edi
f0131e99:	5d                   	pop    %ebp
f0131e9a:	c3                   	ret    

f0131e9b <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f0131e9b:	55                   	push   %ebp
f0131e9c:	89 e5                	mov    %esp,%ebp
f0131e9e:	56                   	push   %esi
f0131e9f:	53                   	push   %ebx
f0131ea0:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f0131ea3:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0131eaa:	76 16                	jbe    f0131ec2 <ide_write+0x27>
f0131eac:	68 63 d3 13 f0       	push   $0xf013d363
f0131eb1:	68 70 d3 13 f0       	push   $0xf013d370
f0131eb6:	6a 3e                	push   $0x3e
f0131eb8:	68 85 d3 13 f0       	push   $0xf013d385
f0131ebd:	e8 43 e3 fc ff       	call   f0100205 <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f0131ec2:	83 ec 0c             	sub    $0xc,%esp
f0131ec5:	6a 00                	push   $0x0
f0131ec7:	e8 44 fe ff ff       	call   f0131d10 <ide_wait_ready>
f0131ecc:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f0131ecf:	8b 45 10             	mov    0x10(%ebp),%eax
f0131ed2:	0f b6 c0             	movzbl %al,%eax
f0131ed5:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0131edc:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0131edf:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0131ee2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131ee5:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0131ee6:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ee9:	0f b6 c0             	movzbl %al,%eax
f0131eec:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0131ef3:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0131ef6:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0131ef9:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131efc:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f0131efd:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f00:	c1 e8 08             	shr    $0x8,%eax
f0131f03:	0f b6 c0             	movzbl %al,%eax
f0131f06:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f0131f0d:	88 45 d4             	mov    %al,-0x2c(%ebp)
f0131f10:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0131f13:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131f16:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f0131f17:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f1a:	c1 e8 10             	shr    $0x10,%eax
f0131f1d:	0f b6 c0             	movzbl %al,%eax
f0131f20:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f0131f27:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0131f2a:	8a 45 d5             	mov    -0x2b(%ebp),%al
f0131f2d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0131f30:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0131f31:	a1 ac 26 86 f0       	mov    0xf08626ac,%eax
f0131f36:	83 e0 01             	and    $0x1,%eax
f0131f39:	c1 e0 04             	shl    $0x4,%eax
f0131f3c:	88 c2                	mov    %al,%dl
f0131f3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f41:	c1 e8 18             	shr    $0x18,%eax
f0131f44:	83 e0 0f             	and    $0xf,%eax
f0131f47:	09 d0                	or     %edx,%eax
f0131f49:	83 c8 e0             	or     $0xffffffe0,%eax
f0131f4c:	0f b6 c0             	movzbl %al,%eax
f0131f4f:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0131f56:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0131f59:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0131f5c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0131f5f:	ee                   	out    %al,(%dx)
f0131f60:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0131f67:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f0131f6b:	8a 45 d7             	mov    -0x29(%ebp),%al
f0131f6e:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0131f71:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0131f72:	eb 55                	jmp    f0131fc9 <ide_write+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0131f74:	83 ec 0c             	sub    $0xc,%esp
f0131f77:	6a 01                	push   $0x1
f0131f79:	e8 92 fd ff ff       	call   f0131d10 <ide_wait_ready>
f0131f7e:	83 c4 10             	add    $0x10,%esp
f0131f81:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0131f84:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0131f88:	79 05                	jns    f0131f8f <ide_write+0xf4>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f0131f8a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0131f8d:	eb 45                	jmp    f0131fd4 <ide_write+0x139>
f0131f8f:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0131f96:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131f99:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0131f9c:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f0131fa3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131fa6:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0131fa9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0131fac:	89 cb                	mov    %ecx,%ebx
f0131fae:	89 de                	mov    %ebx,%esi
f0131fb0:	89 c1                	mov    %eax,%ecx
f0131fb2:	fc                   	cld    
f0131fb3:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f0131fb5:	89 c8                	mov    %ecx,%eax
f0131fb7:	89 f3                	mov    %esi,%ebx
f0131fb9:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0131fbc:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0131fbf:	ff 4d 10             	decl   0x10(%ebp)
f0131fc2:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0131fc9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131fcd:	75 a5                	jne    f0131f74 <ide_write+0xd9>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f0131fcf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131fd4:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0131fd7:	5b                   	pop    %ebx
f0131fd8:	5e                   	pop    %esi
f0131fd9:	5d                   	pop    %ebp
f0131fda:	c3                   	ret    

f0131fdb <print_mem_block_lists>:
//===========================
// PRINT MEM BLOCK LISTS:
//===========================

void print_mem_block_lists()
{
f0131fdb:	55                   	push   %ebp
f0131fdc:	89 e5                	mov    %esp,%ebp
f0131fde:	83 ec 18             	sub    $0x18,%esp
	cprintf("\n=========================================\n");
f0131fe1:	83 ec 0c             	sub    $0xc,%esp
f0131fe4:	68 90 d3 13 f0       	push   $0xf013d390
f0131fe9:	e8 20 ed fc ff       	call   f0100d0e <cprintf>
f0131fee:	83 c4 10             	add    $0x10,%esp
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
f0131ff1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nFreeMemBlocksList:\n");
f0131ff8:	83 ec 0c             	sub    $0xc,%esp
f0131ffb:	68 bc d3 13 f0       	push   $0xf013d3bc
f0132000:	e8 09 ed fc ff       	call   f0100d0e <cprintf>
f0132005:	83 c4 10             	add    $0x10,%esp
	uint8 sorted = 1 ;
f0132008:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &FreeMemBlocksList)
f013200c:	a1 60 27 86 f0       	mov    0xf0862760,%eax
f0132011:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132014:	eb 56                	jmp    f013206c <print_mem_block_lists+0x91>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f0132016:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013201a:	74 1c                	je     f0132038 <print_mem_block_lists+0x5d>
f013201c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013201f:	8b 50 08             	mov    0x8(%eax),%edx
f0132022:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132025:	8b 48 08             	mov    0x8(%eax),%ecx
f0132028:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013202b:	8b 40 0c             	mov    0xc(%eax),%eax
f013202e:	01 c8                	add    %ecx,%eax
f0132030:	39 c2                	cmp    %eax,%edx
f0132032:	73 04                	jae    f0132038 <print_mem_block_lists+0x5d>
			sorted = 0 ;
f0132034:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f0132038:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013203b:	8b 50 08             	mov    0x8(%eax),%edx
f013203e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132041:	8b 40 0c             	mov    0xc(%eax),%eax
f0132044:	01 c2                	add    %eax,%edx
f0132046:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132049:	8b 40 08             	mov    0x8(%eax),%eax
f013204c:	83 ec 04             	sub    $0x4,%esp
f013204f:	52                   	push   %edx
f0132050:	50                   	push   %eax
f0132051:	68 d1 d3 13 f0       	push   $0xf013d3d1
f0132056:	e8 b3 ec fc ff       	call   f0100d0e <cprintf>
f013205b:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f013205e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132061:	89 45 f0             	mov    %eax,-0x10(%ebp)
	cprintf("\n=========================================\n");
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
	cprintf("\nFreeMemBlocksList:\n");
	uint8 sorted = 1 ;
	LIST_FOREACH(blk, &FreeMemBlocksList)
f0132064:	a1 68 27 86 f0       	mov    0xf0862768,%eax
f0132069:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013206c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132070:	74 07                	je     f0132079 <print_mem_block_lists+0x9e>
f0132072:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132075:	8b 00                	mov    (%eax),%eax
f0132077:	eb 05                	jmp    f013207e <print_mem_block_lists+0xa3>
f0132079:	b8 00 00 00 00       	mov    $0x0,%eax
f013207e:	a3 68 27 86 f0       	mov    %eax,0xf0862768
f0132083:	a1 68 27 86 f0       	mov    0xf0862768,%eax
f0132088:	85 c0                	test   %eax,%eax
f013208a:	75 8a                	jne    f0132016 <print_mem_block_lists+0x3b>
f013208c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132090:	75 84                	jne    f0132016 <print_mem_block_lists+0x3b>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;
f0132092:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f0132096:	75 10                	jne    f01320a8 <print_mem_block_lists+0xcd>
f0132098:	83 ec 0c             	sub    $0xc,%esp
f013209b:	68 e0 d3 13 f0       	push   $0xf013d3e0
f01320a0:	e8 69 ec fc ff       	call   f0100d0e <cprintf>
f01320a5:	83 c4 10             	add    $0x10,%esp

	lastBlk = NULL ;
f01320a8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nAllocMemBlocksList:\n");
f01320af:	83 ec 0c             	sub    $0xc,%esp
f01320b2:	68 04 d4 13 f0       	push   $0xf013d404
f01320b7:	e8 52 ec fc ff       	call   f0100d0e <cprintf>
f01320bc:	83 c4 10             	add    $0x10,%esp
	sorted = 1 ;
f01320bf:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &AllocMemBlocksList)
f01320c3:	a1 c4 26 86 f0       	mov    0xf08626c4,%eax
f01320c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01320cb:	eb 56                	jmp    f0132123 <print_mem_block_lists+0x148>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f01320cd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01320d1:	74 1c                	je     f01320ef <print_mem_block_lists+0x114>
f01320d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320d6:	8b 50 08             	mov    0x8(%eax),%edx
f01320d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01320dc:	8b 48 08             	mov    0x8(%eax),%ecx
f01320df:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01320e2:	8b 40 0c             	mov    0xc(%eax),%eax
f01320e5:	01 c8                	add    %ecx,%eax
f01320e7:	39 c2                	cmp    %eax,%edx
f01320e9:	73 04                	jae    f01320ef <print_mem_block_lists+0x114>
			sorted = 0 ;
f01320eb:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f01320ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320f2:	8b 50 08             	mov    0x8(%eax),%edx
f01320f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320f8:	8b 40 0c             	mov    0xc(%eax),%eax
f01320fb:	01 c2                	add    %eax,%edx
f01320fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132100:	8b 40 08             	mov    0x8(%eax),%eax
f0132103:	83 ec 04             	sub    $0x4,%esp
f0132106:	52                   	push   %edx
f0132107:	50                   	push   %eax
f0132108:	68 d1 d3 13 f0       	push   $0xf013d3d1
f013210d:	e8 fc eb fc ff       	call   f0100d0e <cprintf>
f0132112:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f0132115:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132118:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;

	lastBlk = NULL ;
	cprintf("\nAllocMemBlocksList:\n");
	sorted = 1 ;
	LIST_FOREACH(blk, &AllocMemBlocksList)
f013211b:	a1 cc 26 86 f0       	mov    0xf08626cc,%eax
f0132120:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132123:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132127:	74 07                	je     f0132130 <print_mem_block_lists+0x155>
f0132129:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013212c:	8b 00                	mov    (%eax),%eax
f013212e:	eb 05                	jmp    f0132135 <print_mem_block_lists+0x15a>
f0132130:	b8 00 00 00 00       	mov    $0x0,%eax
f0132135:	a3 cc 26 86 f0       	mov    %eax,0xf08626cc
f013213a:	a1 cc 26 86 f0       	mov    0xf08626cc,%eax
f013213f:	85 c0                	test   %eax,%eax
f0132141:	75 8a                	jne    f01320cd <print_mem_block_lists+0xf2>
f0132143:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132147:	75 84                	jne    f01320cd <print_mem_block_lists+0xf2>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nAllocMemBlocksList is NOT SORTED!!\n") ;
f0132149:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f013214d:	75 10                	jne    f013215f <print_mem_block_lists+0x184>
f013214f:	83 ec 0c             	sub    $0xc,%esp
f0132152:	68 1c d4 13 f0       	push   $0xf013d41c
f0132157:	e8 b2 eb fc ff       	call   f0100d0e <cprintf>
f013215c:	83 c4 10             	add    $0x10,%esp
	cprintf("\n=========================================\n");
f013215f:	83 ec 0c             	sub    $0xc,%esp
f0132162:	68 90 d3 13 f0       	push   $0xf013d390
f0132167:	e8 a2 eb fc ff       	call   f0100d0e <cprintf>
f013216c:	83 c4 10             	add    $0x10,%esp

}
f013216f:	90                   	nop
f0132170:	c9                   	leave  
f0132171:	c3                   	ret    

f0132172 <initialize_MemBlocksList>:

//===============================
// [1] INITIALIZE AVAILABLE LIST:
//===============================
void initialize_MemBlocksList(uint32 numOfBlocks)
{
f0132172:	55                   	push   %ebp
f0132173:	89 e5                	mov    %esp,%ebp
f0132175:	83 ec 18             	sub    $0x18,%esp
	LIST_INIT(&AvailableMemBlocksList);
f0132178:	c7 05 94 27 86 f0 00 	movl   $0x0,0xf0862794
f013217f:	00 00 00 
f0132182:	c7 05 98 27 86 f0 00 	movl   $0x0,0xf0862798
f0132189:	00 00 00 
f013218c:	c7 05 a0 27 86 f0 00 	movl   $0x0,0xf08627a0
f0132193:	00 00 00 

	int i ;
	for (i = 0 ; i < numOfBlocks ; i++ ){
f0132196:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f013219d:	e9 9e 00 00 00       	jmp    f0132240 <initialize_MemBlocksList+0xce>
LIST_INSERT_HEAD(&AvailableMemBlocksList , &(MemBlockNodes[i]));
f01321a2:	a1 d4 26 86 f0       	mov    0xf08626d4,%eax
f01321a7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01321aa:	c1 e2 04             	shl    $0x4,%edx
f01321ad:	01 d0                	add    %edx,%eax
f01321af:	85 c0                	test   %eax,%eax
f01321b1:	75 14                	jne    f01321c7 <initialize_MemBlocksList+0x55>
f01321b3:	83 ec 04             	sub    $0x4,%esp
f01321b6:	68 44 d4 13 f0       	push   $0xf013d444
f01321bb:	6a 3d                	push   $0x3d
f01321bd:	68 67 d4 13 f0       	push   $0xf013d467
f01321c2:	e8 3e e0 fc ff       	call   f0100205 <_panic>
f01321c7:	a1 d4 26 86 f0       	mov    0xf08626d4,%eax
f01321cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01321cf:	c1 e2 04             	shl    $0x4,%edx
f01321d2:	01 d0                	add    %edx,%eax
f01321d4:	8b 15 94 27 86 f0    	mov    0xf0862794,%edx
f01321da:	89 10                	mov    %edx,(%eax)
f01321dc:	8b 00                	mov    (%eax),%eax
f01321de:	85 c0                	test   %eax,%eax
f01321e0:	74 18                	je     f01321fa <initialize_MemBlocksList+0x88>
f01321e2:	a1 94 27 86 f0       	mov    0xf0862794,%eax
f01321e7:	8b 15 d4 26 86 f0    	mov    0xf08626d4,%edx
f01321ed:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01321f0:	c1 e1 04             	shl    $0x4,%ecx
f01321f3:	01 ca                	add    %ecx,%edx
f01321f5:	89 50 04             	mov    %edx,0x4(%eax)
f01321f8:	eb 12                	jmp    f013220c <initialize_MemBlocksList+0x9a>
f01321fa:	a1 d4 26 86 f0       	mov    0xf08626d4,%eax
f01321ff:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132202:	c1 e2 04             	shl    $0x4,%edx
f0132205:	01 d0                	add    %edx,%eax
f0132207:	a3 98 27 86 f0       	mov    %eax,0xf0862798
f013220c:	a1 d4 26 86 f0       	mov    0xf08626d4,%eax
f0132211:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132214:	c1 e2 04             	shl    $0x4,%edx
f0132217:	01 d0                	add    %edx,%eax
f0132219:	a3 94 27 86 f0       	mov    %eax,0xf0862794
f013221e:	a1 d4 26 86 f0       	mov    0xf08626d4,%eax
f0132223:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132226:	c1 e2 04             	shl    $0x4,%edx
f0132229:	01 d0                	add    %edx,%eax
f013222b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132232:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f0132237:	40                   	inc    %eax
f0132238:	a3 a0 27 86 f0       	mov    %eax,0xf08627a0
void initialize_MemBlocksList(uint32 numOfBlocks)
{
	LIST_INIT(&AvailableMemBlocksList);

	int i ;
	for (i = 0 ; i < numOfBlocks ; i++ ){
f013223d:	ff 45 f4             	incl   -0xc(%ebp)
f0132240:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132243:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132246:	0f 82 56 ff ff ff    	jb     f01321a2 <initialize_MemBlocksList+0x30>

//	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] initialize_MemBlocksList
//	// Write your code here, remove the panic and write your code
//	panic("initialize_MemBlocksList() is not implemented yet...!!");

}
f013224c:	90                   	nop
f013224d:	c9                   	leave  
f013224e:	c3                   	ret    

f013224f <find_block>:

//===============================
// [2] FIND BLOCK:
//===============================
struct MemBlock *find_block(struct MemBlock_List *blockList, uint32 va)
{
f013224f:	55                   	push   %ebp
f0132250:	89 e5                	mov    %esp,%ebp
f0132252:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock *tmp = blockList->lh_first;
f0132255:	8b 45 08             	mov    0x8(%ebp),%eax
f0132258:	8b 00                	mov    (%eax),%eax
f013225a:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while(tmp!=NULL){
f013225d:	eb 18                	jmp    f0132277 <find_block+0x28>

		if(tmp->sva == va){
f013225f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0132262:	8b 40 08             	mov    0x8(%eax),%eax
f0132265:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0132268:	75 05                	jne    f013226f <find_block+0x20>
			return tmp ;
f013226a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013226d:	eb 11                	jmp    f0132280 <find_block+0x31>
		}
		tmp = tmp->prev_next_info.le_next;
f013226f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0132272:	8b 00                	mov    (%eax),%eax
f0132274:	89 45 fc             	mov    %eax,-0x4(%ebp)
// [2] FIND BLOCK:
//===============================
struct MemBlock *find_block(struct MemBlock_List *blockList, uint32 va)
{
	struct MemBlock *tmp = blockList->lh_first;
	while(tmp!=NULL){
f0132277:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f013227b:	75 e2                	jne    f013225f <find_block+0x10>
		if(tmp->sva == va){
			return tmp ;
		}
		tmp = tmp->prev_next_info.le_next;
	}
	return tmp ;
f013227d:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0132280:	c9                   	leave  
f0132281:	c3                   	ret    

f0132282 <insert_sorted_allocList>:
//=========================================



void insert_sorted_allocList(struct MemBlock *blockToInsert)
{
f0132282:	55                   	push   %ebp
f0132283:	89 e5                	mov    %esp,%ebp
f0132285:	83 ec 18             	sub    $0x18,%esp
    struct MemBlock *temp =AllocMemBlocksList.lh_first;
f0132288:	a1 c4 26 86 f0       	mov    0xf08626c4,%eax
f013228d:	89 45 f4             	mov    %eax,-0xc(%ebp)
   int n=LIST_SIZE(&(AllocMemBlocksList));
f0132290:	a1 d0 26 86 f0       	mov    0xf08626d0,%eax
f0132295:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if(n==0){
f0132298:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f013229c:	75 65                	jne    f0132303 <insert_sorted_allocList+0x81>
    		//LIST_INIT(&AllocMemBlocksList);
    	        LIST_INSERT_HEAD(&(AllocMemBlocksList),blockToInsert);
f013229e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01322a2:	75 14                	jne    f01322b8 <insert_sorted_allocList+0x36>
f01322a4:	83 ec 04             	sub    $0x4,%esp
f01322a7:	68 44 d4 13 f0       	push   $0xf013d444
f01322ac:	6a 62                	push   $0x62
f01322ae:	68 67 d4 13 f0       	push   $0xf013d467
f01322b3:	e8 4d df fc ff       	call   f0100205 <_panic>
f01322b8:	8b 15 c4 26 86 f0    	mov    0xf08626c4,%edx
f01322be:	8b 45 08             	mov    0x8(%ebp),%eax
f01322c1:	89 10                	mov    %edx,(%eax)
f01322c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01322c6:	8b 00                	mov    (%eax),%eax
f01322c8:	85 c0                	test   %eax,%eax
f01322ca:	74 0d                	je     f01322d9 <insert_sorted_allocList+0x57>
f01322cc:	a1 c4 26 86 f0       	mov    0xf08626c4,%eax
f01322d1:	8b 55 08             	mov    0x8(%ebp),%edx
f01322d4:	89 50 04             	mov    %edx,0x4(%eax)
f01322d7:	eb 08                	jmp    f01322e1 <insert_sorted_allocList+0x5f>
f01322d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01322dc:	a3 c8 26 86 f0       	mov    %eax,0xf08626c8
f01322e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01322e4:	a3 c4 26 86 f0       	mov    %eax,0xf08626c4
f01322e9:	8b 45 08             	mov    0x8(%ebp),%eax
f01322ec:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01322f3:	a1 d0 26 86 f0       	mov    0xf08626d0,%eax
f01322f8:	40                   	inc    %eax
f01322f9:	a3 d0 26 86 f0       	mov    %eax,0xf08626d0
    	    			break;
    	    			}
    	    			temp=temp->prev_next_info.le_next;
    	}
    }
}
f01322fe:	e9 14 01 00 00       	jmp    f0132417 <insert_sorted_allocList+0x195>
    struct MemBlock *temp =AllocMemBlocksList.lh_first;
   int n=LIST_SIZE(&(AllocMemBlocksList));
    if(n==0){
    		//LIST_INIT(&AllocMemBlocksList);
    	        LIST_INSERT_HEAD(&(AllocMemBlocksList),blockToInsert);
    	    }else if (blockToInsert->sva > AllocMemBlocksList.lh_last->sva ){
f0132303:	8b 45 08             	mov    0x8(%ebp),%eax
f0132306:	8b 50 08             	mov    0x8(%eax),%edx
f0132309:	a1 c8 26 86 f0       	mov    0xf08626c8,%eax
f013230e:	8b 40 08             	mov    0x8(%eax),%eax
f0132311:	39 c2                	cmp    %eax,%edx
f0132313:	76 65                	jbe    f013237a <insert_sorted_allocList+0xf8>
    	        LIST_INSERT_TAIL( &(AllocMemBlocksList) , blockToInsert);
f0132315:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132319:	75 14                	jne    f013232f <insert_sorted_allocList+0xad>
f013231b:	83 ec 04             	sub    $0x4,%esp
f013231e:	68 80 d4 13 f0       	push   $0xf013d480
f0132323:	6a 64                	push   $0x64
f0132325:	68 67 d4 13 f0       	push   $0xf013d467
f013232a:	e8 d6 de fc ff       	call   f0100205 <_panic>
f013232f:	8b 15 c8 26 86 f0    	mov    0xf08626c8,%edx
f0132335:	8b 45 08             	mov    0x8(%ebp),%eax
f0132338:	89 50 04             	mov    %edx,0x4(%eax)
f013233b:	8b 45 08             	mov    0x8(%ebp),%eax
f013233e:	8b 40 04             	mov    0x4(%eax),%eax
f0132341:	85 c0                	test   %eax,%eax
f0132343:	74 0c                	je     f0132351 <insert_sorted_allocList+0xcf>
f0132345:	a1 c8 26 86 f0       	mov    0xf08626c8,%eax
f013234a:	8b 55 08             	mov    0x8(%ebp),%edx
f013234d:	89 10                	mov    %edx,(%eax)
f013234f:	eb 08                	jmp    f0132359 <insert_sorted_allocList+0xd7>
f0132351:	8b 45 08             	mov    0x8(%ebp),%eax
f0132354:	a3 c4 26 86 f0       	mov    %eax,0xf08626c4
f0132359:	8b 45 08             	mov    0x8(%ebp),%eax
f013235c:	a3 c8 26 86 f0       	mov    %eax,0xf08626c8
f0132361:	8b 45 08             	mov    0x8(%ebp),%eax
f0132364:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013236a:	a1 d0 26 86 f0       	mov    0xf08626d0,%eax
f013236f:	40                   	inc    %eax
f0132370:	a3 d0 26 86 f0       	mov    %eax,0xf08626d0
    	    			break;
    	    			}
    	    			temp=temp->prev_next_info.le_next;
    	}
    }
}
f0132375:	e9 9d 00 00 00       	jmp    f0132417 <insert_sorted_allocList+0x195>
    	    }else if (blockToInsert->sva > AllocMemBlocksList.lh_last->sva ){
    	        LIST_INSERT_TAIL( &(AllocMemBlocksList) , blockToInsert);
    	    }
    	    else {
    	int i;
    	for(i=0; i<n ; i++){
f013237a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0132381:	e9 85 00 00 00       	jmp    f013240b <insert_sorted_allocList+0x189>

    	    	if(blockToInsert->sva < temp->sva){
f0132386:	8b 45 08             	mov    0x8(%ebp),%eax
f0132389:	8b 50 08             	mov    0x8(%eax),%edx
f013238c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013238f:	8b 40 08             	mov    0x8(%eax),%eax
f0132392:	39 c2                	cmp    %eax,%edx
f0132394:	73 6a                	jae    f0132400 <insert_sorted_allocList+0x17e>
    	    		LIST_INSERT_BEFORE(&(AllocMemBlocksList),temp,blockToInsert);
f0132396:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013239a:	74 06                	je     f01323a2 <insert_sorted_allocList+0x120>
f013239c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01323a0:	75 14                	jne    f01323b6 <insert_sorted_allocList+0x134>
f01323a2:	83 ec 04             	sub    $0x4,%esp
f01323a5:	68 a4 d4 13 f0       	push   $0xf013d4a4
f01323aa:	6a 6b                	push   $0x6b
f01323ac:	68 67 d4 13 f0       	push   $0xf013d467
f01323b1:	e8 4f de fc ff       	call   f0100205 <_panic>
f01323b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01323b9:	8b 50 04             	mov    0x4(%eax),%edx
f01323bc:	8b 45 08             	mov    0x8(%ebp),%eax
f01323bf:	89 50 04             	mov    %edx,0x4(%eax)
f01323c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01323c5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01323c8:	89 10                	mov    %edx,(%eax)
f01323ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01323cd:	8b 40 04             	mov    0x4(%eax),%eax
f01323d0:	85 c0                	test   %eax,%eax
f01323d2:	74 0d                	je     f01323e1 <insert_sorted_allocList+0x15f>
f01323d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01323d7:	8b 40 04             	mov    0x4(%eax),%eax
f01323da:	8b 55 08             	mov    0x8(%ebp),%edx
f01323dd:	89 10                	mov    %edx,(%eax)
f01323df:	eb 08                	jmp    f01323e9 <insert_sorted_allocList+0x167>
f01323e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01323e4:	a3 c4 26 86 f0       	mov    %eax,0xf08626c4
f01323e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01323ec:	8b 55 08             	mov    0x8(%ebp),%edx
f01323ef:	89 50 04             	mov    %edx,0x4(%eax)
f01323f2:	a1 d0 26 86 f0       	mov    0xf08626d0,%eax
f01323f7:	40                   	inc    %eax
f01323f8:	a3 d0 26 86 f0       	mov    %eax,0xf08626d0
    	    			break;
f01323fd:	90                   	nop
    	    			}
    	    			temp=temp->prev_next_info.le_next;
    	}
    }
}
f01323fe:	eb 17                	jmp    f0132417 <insert_sorted_allocList+0x195>

    	    	if(blockToInsert->sva < temp->sva){
    	    		LIST_INSERT_BEFORE(&(AllocMemBlocksList),temp,blockToInsert);
    	    			break;
    	    			}
    	    			temp=temp->prev_next_info.le_next;
f0132400:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132403:	8b 00                	mov    (%eax),%eax
f0132405:	89 45 f4             	mov    %eax,-0xc(%ebp)
    	    }else if (blockToInsert->sva > AllocMemBlocksList.lh_last->sva ){
    	        LIST_INSERT_TAIL( &(AllocMemBlocksList) , blockToInsert);
    	    }
    	    else {
    	int i;
    	for(i=0; i<n ; i++){
f0132408:	ff 45 f0             	incl   -0x10(%ebp)
f013240b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013240e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0132411:	0f 8c 6f ff ff ff    	jl     f0132386 <insert_sorted_allocList+0x104>
    	    			break;
    	    			}
    	    			temp=temp->prev_next_info.le_next;
    	}
    }
}
f0132417:	90                   	nop
f0132418:	c9                   	leave  
f0132419:	c3                   	ret    

f013241a <alloc_block_FF>:

//=========================================
// [4] ALLOCATE BLOCK BY FIRST FIT:
//=========================================
struct MemBlock *alloc_block_FF(uint32 size)
{
f013241a:	55                   	push   %ebp
f013241b:	89 e5                	mov    %esp,%ebp
f013241d:	83 ec 18             	sub    $0x18,%esp
    struct MemBlock *pointertempp = FreeMemBlocksList.lh_first  ;
f0132420:	a1 60 27 86 f0       	mov    0xf0862760,%eax
f0132425:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (pointertempp!= NULL){
f0132428:	e9 7c 01 00 00       	jmp    f01325a9 <alloc_block_FF+0x18f>
        if (pointertempp->size > size){
f013242d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132430:	8b 40 0c             	mov    0xc(%eax),%eax
f0132433:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132436:	0f 86 cf 00 00 00    	jbe    f013250b <alloc_block_FF+0xf1>
            struct MemBlock *ptrnew =LIST_FIRST(&(AvailableMemBlocksList));
f013243c:	a1 94 27 86 f0       	mov    0xf0862794,%eax
f0132441:	89 45 f0             	mov    %eax,-0x10(%ebp)
            struct MemBlock *newBlock = ptrnew;
f0132444:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132447:	89 45 ec             	mov    %eax,-0x14(%ebp)
             newBlock->size = size;
f013244a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013244d:	8b 55 08             	mov    0x8(%ebp),%edx
f0132450:	89 50 0c             	mov    %edx,0xc(%eax)
             newBlock->sva = pointertempp->sva ;
f0132453:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132456:	8b 50 08             	mov    0x8(%eax),%edx
f0132459:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013245c:	89 50 08             	mov    %edx,0x8(%eax)
              pointertempp->size = pointertempp->size - size;
f013245f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132462:	8b 40 0c             	mov    0xc(%eax),%eax
f0132465:	2b 45 08             	sub    0x8(%ebp),%eax
f0132468:	89 c2                	mov    %eax,%edx
f013246a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013246d:	89 50 0c             	mov    %edx,0xc(%eax)
              pointertempp->sva =pointertempp->sva + size ;
f0132470:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132473:	8b 50 08             	mov    0x8(%eax),%edx
f0132476:	8b 45 08             	mov    0x8(%ebp),%eax
f0132479:	01 c2                	add    %eax,%edx
f013247b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013247e:	89 50 08             	mov    %edx,0x8(%eax)
            LIST_REMOVE(&(AvailableMemBlocksList),newBlock );
f0132481:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0132485:	75 17                	jne    f013249e <alloc_block_FF+0x84>
f0132487:	83 ec 04             	sub    $0x4,%esp
f013248a:	68 d9 d4 13 f0       	push   $0xf013d4d9
f013248f:	68 83 00 00 00       	push   $0x83
f0132494:	68 67 d4 13 f0       	push   $0xf013d467
f0132499:	e8 67 dd fc ff       	call   f0100205 <_panic>
f013249e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01324a1:	8b 00                	mov    (%eax),%eax
f01324a3:	85 c0                	test   %eax,%eax
f01324a5:	74 10                	je     f01324b7 <alloc_block_FF+0x9d>
f01324a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01324aa:	8b 00                	mov    (%eax),%eax
f01324ac:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01324af:	8b 52 04             	mov    0x4(%edx),%edx
f01324b2:	89 50 04             	mov    %edx,0x4(%eax)
f01324b5:	eb 0b                	jmp    f01324c2 <alloc_block_FF+0xa8>
f01324b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01324ba:	8b 40 04             	mov    0x4(%eax),%eax
f01324bd:	a3 98 27 86 f0       	mov    %eax,0xf0862798
f01324c2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01324c5:	8b 40 04             	mov    0x4(%eax),%eax
f01324c8:	85 c0                	test   %eax,%eax
f01324ca:	74 0f                	je     f01324db <alloc_block_FF+0xc1>
f01324cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01324cf:	8b 40 04             	mov    0x4(%eax),%eax
f01324d2:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01324d5:	8b 12                	mov    (%edx),%edx
f01324d7:	89 10                	mov    %edx,(%eax)
f01324d9:	eb 0a                	jmp    f01324e5 <alloc_block_FF+0xcb>
f01324db:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01324de:	8b 00                	mov    (%eax),%eax
f01324e0:	a3 94 27 86 f0       	mov    %eax,0xf0862794
f01324e5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01324e8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01324ee:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01324f1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01324f8:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f01324fd:	48                   	dec    %eax
f01324fe:	a3 a0 27 86 f0       	mov    %eax,0xf08627a0
                    return newBlock ;
f0132503:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132506:	e9 ad 00 00 00       	jmp    f01325b8 <alloc_block_FF+0x19e>
                    }
        else if (pointertempp->size == size){
f013250b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013250e:	8b 40 0c             	mov    0xc(%eax),%eax
f0132511:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132514:	0f 85 87 00 00 00    	jne    f01325a1 <alloc_block_FF+0x187>
                        LIST_REMOVE(&(FreeMemBlocksList),pointertempp);
f013251a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013251e:	75 17                	jne    f0132537 <alloc_block_FF+0x11d>
f0132520:	83 ec 04             	sub    $0x4,%esp
f0132523:	68 d9 d4 13 f0       	push   $0xf013d4d9
f0132528:	68 87 00 00 00       	push   $0x87
f013252d:	68 67 d4 13 f0       	push   $0xf013d467
f0132532:	e8 ce dc fc ff       	call   f0100205 <_panic>
f0132537:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013253a:	8b 00                	mov    (%eax),%eax
f013253c:	85 c0                	test   %eax,%eax
f013253e:	74 10                	je     f0132550 <alloc_block_FF+0x136>
f0132540:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132543:	8b 00                	mov    (%eax),%eax
f0132545:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132548:	8b 52 04             	mov    0x4(%edx),%edx
f013254b:	89 50 04             	mov    %edx,0x4(%eax)
f013254e:	eb 0b                	jmp    f013255b <alloc_block_FF+0x141>
f0132550:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132553:	8b 40 04             	mov    0x4(%eax),%eax
f0132556:	a3 64 27 86 f0       	mov    %eax,0xf0862764
f013255b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013255e:	8b 40 04             	mov    0x4(%eax),%eax
f0132561:	85 c0                	test   %eax,%eax
f0132563:	74 0f                	je     f0132574 <alloc_block_FF+0x15a>
f0132565:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132568:	8b 40 04             	mov    0x4(%eax),%eax
f013256b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013256e:	8b 12                	mov    (%edx),%edx
f0132570:	89 10                	mov    %edx,(%eax)
f0132572:	eb 0a                	jmp    f013257e <alloc_block_FF+0x164>
f0132574:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132577:	8b 00                	mov    (%eax),%eax
f0132579:	a3 60 27 86 f0       	mov    %eax,0xf0862760
f013257e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132581:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132587:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013258a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132591:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f0132596:	48                   	dec    %eax
f0132597:	a3 6c 27 86 f0       	mov    %eax,0xf086276c
                        return  pointertempp;
f013259c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013259f:	eb 17                	jmp    f01325b8 <alloc_block_FF+0x19e>
                }
        pointertempp = pointertempp->prev_next_info.le_next;
f01325a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01325a4:	8b 00                	mov    (%eax),%eax
f01325a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
// [4] ALLOCATE BLOCK BY FIRST FIT:
//=========================================
struct MemBlock *alloc_block_FF(uint32 size)
{
    struct MemBlock *pointertempp = FreeMemBlocksList.lh_first  ;
    while (pointertempp!= NULL){
f01325a9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01325ad:	0f 85 7a fe ff ff    	jne    f013242d <alloc_block_FF+0x13>
                        LIST_REMOVE(&(FreeMemBlocksList),pointertempp);
                        return  pointertempp;
                }
        pointertempp = pointertempp->prev_next_info.le_next;
    }
    return 0 ;
f01325b3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01325b8:	c9                   	leave  
f01325b9:	c3                   	ret    

f01325ba <alloc_block_BF>:

//=========================================
// [5] ALLOCATE BLOCK BY BEST FIT:
//=========================================
struct MemBlock *alloc_block_BF(uint32 size)
{
f01325ba:	55                   	push   %ebp
f01325bb:	89 e5                	mov    %esp,%ebp
f01325bd:	83 ec 28             	sub    $0x28,%esp
	struct MemBlock *elementiterator = FreeMemBlocksList.lh_first;
f01325c0:	a1 60 27 86 f0       	mov    0xf0862760,%eax
f01325c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct MemBlock *pointer2 = NULL;
f01325c8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 differsize= 999999999;
f01325cf:	c7 45 ec ff c9 9a 3b 	movl   $0x3b9ac9ff,-0x14(%ebp)

	LIST_FOREACH(elementiterator , &(FreeMemBlocksList)){
f01325d6:	a1 60 27 86 f0       	mov    0xf0862760,%eax
f01325db:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01325de:	e9 d0 00 00 00       	jmp    f01326b3 <alloc_block_BF+0xf9>
		if (elementiterator->size >= size){
f01325e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01325e6:	8b 40 0c             	mov    0xc(%eax),%eax
f01325e9:	3b 45 08             	cmp    0x8(%ebp),%eax
f01325ec:	0f 82 b8 00 00 00    	jb     f01326aa <alloc_block_BF+0xf0>
			uint32 differance = elementiterator->size - size ;
f01325f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01325f5:	8b 40 0c             	mov    0xc(%eax),%eax
f01325f8:	2b 45 08             	sub    0x8(%ebp),%eax
f01325fb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			if (differance < differsize){
f01325fe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132601:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0132604:	0f 83 a1 00 00 00    	jae    f01326ab <alloc_block_BF+0xf1>
				differsize = differance ;
f013260a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013260d:	89 45 ec             	mov    %eax,-0x14(%ebp)
				pointer2 = elementiterator ;
f0132610:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132613:	89 45 f0             	mov    %eax,-0x10(%ebp)
				if (differsize == 0){
f0132616:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f013261a:	0f 85 8b 00 00 00    	jne    f01326ab <alloc_block_BF+0xf1>
					LIST_REMOVE(&(FreeMemBlocksList), elementiterator);
f0132620:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132624:	75 17                	jne    f013263d <alloc_block_BF+0x83>
f0132626:	83 ec 04             	sub    $0x4,%esp
f0132629:	68 d9 d4 13 f0       	push   $0xf013d4d9
f013262e:	68 a0 00 00 00       	push   $0xa0
f0132633:	68 67 d4 13 f0       	push   $0xf013d467
f0132638:	e8 c8 db fc ff       	call   f0100205 <_panic>
f013263d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132640:	8b 00                	mov    (%eax),%eax
f0132642:	85 c0                	test   %eax,%eax
f0132644:	74 10                	je     f0132656 <alloc_block_BF+0x9c>
f0132646:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132649:	8b 00                	mov    (%eax),%eax
f013264b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013264e:	8b 52 04             	mov    0x4(%edx),%edx
f0132651:	89 50 04             	mov    %edx,0x4(%eax)
f0132654:	eb 0b                	jmp    f0132661 <alloc_block_BF+0xa7>
f0132656:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132659:	8b 40 04             	mov    0x4(%eax),%eax
f013265c:	a3 64 27 86 f0       	mov    %eax,0xf0862764
f0132661:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132664:	8b 40 04             	mov    0x4(%eax),%eax
f0132667:	85 c0                	test   %eax,%eax
f0132669:	74 0f                	je     f013267a <alloc_block_BF+0xc0>
f013266b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013266e:	8b 40 04             	mov    0x4(%eax),%eax
f0132671:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132674:	8b 12                	mov    (%edx),%edx
f0132676:	89 10                	mov    %edx,(%eax)
f0132678:	eb 0a                	jmp    f0132684 <alloc_block_BF+0xca>
f013267a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013267d:	8b 00                	mov    (%eax),%eax
f013267f:	a3 60 27 86 f0       	mov    %eax,0xf0862760
f0132684:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132687:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013268d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132690:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132697:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f013269c:	48                   	dec    %eax
f013269d:	a3 6c 27 86 f0       	mov    %eax,0xf086276c
					return elementiterator;
f01326a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01326a5:	e9 0c 01 00 00       	jmp    f01327b6 <alloc_block_BF+0x1fc>
				}
			}
		}
		else {
			continue ;
f01326aa:	90                   	nop
{
	struct MemBlock *elementiterator = FreeMemBlocksList.lh_first;
	struct MemBlock *pointer2 = NULL;
	uint32 differsize= 999999999;

	LIST_FOREACH(elementiterator , &(FreeMemBlocksList)){
f01326ab:	a1 68 27 86 f0       	mov    0xf0862768,%eax
f01326b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01326b3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01326b7:	74 07                	je     f01326c0 <alloc_block_BF+0x106>
f01326b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01326bc:	8b 00                	mov    (%eax),%eax
f01326be:	eb 05                	jmp    f01326c5 <alloc_block_BF+0x10b>
f01326c0:	b8 00 00 00 00       	mov    $0x0,%eax
f01326c5:	a3 68 27 86 f0       	mov    %eax,0xf0862768
f01326ca:	a1 68 27 86 f0       	mov    0xf0862768,%eax
f01326cf:	85 c0                	test   %eax,%eax
f01326d1:	0f 85 0c ff ff ff    	jne    f01325e3 <alloc_block_BF+0x29>
f01326d7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01326db:	0f 85 02 ff ff ff    	jne    f01325e3 <alloc_block_BF+0x29>
		}
		else {
			continue ;
		}
	}
	if (pointer2 != NULL){
f01326e1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01326e5:	0f 84 c6 00 00 00    	je     f01327b1 <alloc_block_BF+0x1f7>
		struct MemBlock *blockToUpdate = LIST_FIRST(&(AvailableMemBlocksList));
f01326eb:	a1 94 27 86 f0       	mov    0xf0862794,%eax
f01326f0:	89 45 e8             	mov    %eax,-0x18(%ebp)
		blockToUpdate->size = size ;
f01326f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01326f6:	8b 55 08             	mov    0x8(%ebp),%edx
f01326f9:	89 50 0c             	mov    %edx,0xc(%eax)
		blockToUpdate->sva = pointer2->sva;
f01326fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01326ff:	8b 50 08             	mov    0x8(%eax),%edx
f0132702:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132705:	89 50 08             	mov    %edx,0x8(%eax)
		pointer2->size = pointer2->size -size;
f0132708:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013270b:	8b 40 0c             	mov    0xc(%eax),%eax
f013270e:	2b 45 08             	sub    0x8(%ebp),%eax
f0132711:	89 c2                	mov    %eax,%edx
f0132713:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132716:	89 50 0c             	mov    %edx,0xc(%eax)
		pointer2->sva = pointer2->sva + size ;
f0132719:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013271c:	8b 50 08             	mov    0x8(%eax),%edx
f013271f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132722:	01 c2                	add    %eax,%edx
f0132724:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132727:	89 50 08             	mov    %edx,0x8(%eax)
		LIST_REMOVE(&(AvailableMemBlocksList), blockToUpdate);
f013272a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f013272e:	75 17                	jne    f0132747 <alloc_block_BF+0x18d>
f0132730:	83 ec 04             	sub    $0x4,%esp
f0132733:	68 d9 d4 13 f0       	push   $0xf013d4d9
f0132738:	68 af 00 00 00       	push   $0xaf
f013273d:	68 67 d4 13 f0       	push   $0xf013d467
f0132742:	e8 be da fc ff       	call   f0100205 <_panic>
f0132747:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013274a:	8b 00                	mov    (%eax),%eax
f013274c:	85 c0                	test   %eax,%eax
f013274e:	74 10                	je     f0132760 <alloc_block_BF+0x1a6>
f0132750:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132753:	8b 00                	mov    (%eax),%eax
f0132755:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132758:	8b 52 04             	mov    0x4(%edx),%edx
f013275b:	89 50 04             	mov    %edx,0x4(%eax)
f013275e:	eb 0b                	jmp    f013276b <alloc_block_BF+0x1b1>
f0132760:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132763:	8b 40 04             	mov    0x4(%eax),%eax
f0132766:	a3 98 27 86 f0       	mov    %eax,0xf0862798
f013276b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013276e:	8b 40 04             	mov    0x4(%eax),%eax
f0132771:	85 c0                	test   %eax,%eax
f0132773:	74 0f                	je     f0132784 <alloc_block_BF+0x1ca>
f0132775:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132778:	8b 40 04             	mov    0x4(%eax),%eax
f013277b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f013277e:	8b 12                	mov    (%edx),%edx
f0132780:	89 10                	mov    %edx,(%eax)
f0132782:	eb 0a                	jmp    f013278e <alloc_block_BF+0x1d4>
f0132784:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132787:	8b 00                	mov    (%eax),%eax
f0132789:	a3 94 27 86 f0       	mov    %eax,0xf0862794
f013278e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132791:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132797:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013279a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01327a1:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f01327a6:	48                   	dec    %eax
f01327a7:	a3 a0 27 86 f0       	mov    %eax,0xf08627a0
		return blockToUpdate;
f01327ac:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01327af:	eb 05                	jmp    f01327b6 <alloc_block_BF+0x1fc>
	}

	return NULL;
f01327b1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01327b6:	c9                   	leave  
f01327b7:	c3                   	ret    

f01327b8 <alloc_block_NF>:
//=========================================
// [7] ALLOCATE BLOCK BY NEXT FIT:
//=========================================
struct MemBlock *alloc_block_NF(uint32 size)

{
f01327b8:	55                   	push   %ebp
f01327b9:	89 e5                	mov    %esp,%ebp
f01327bb:	83 ec 18             	sub    $0x18,%esp
	struct MemBlock *updated= FreeMemBlocksList.lh_first  ;
f01327be:	a1 60 27 86 f0       	mov    0xf0862760,%eax
f01327c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	    while (updated!= NULL){
f01327c6:	e9 7c 01 00 00       	jmp    f0132947 <alloc_block_NF+0x18f>
	        if (updated->size > size){
f01327cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01327ce:	8b 40 0c             	mov    0xc(%eax),%eax
f01327d1:	3b 45 08             	cmp    0x8(%ebp),%eax
f01327d4:	0f 86 cf 00 00 00    	jbe    f01328a9 <alloc_block_NF+0xf1>
	            struct MemBlock *ptrnew =LIST_FIRST(&(AvailableMemBlocksList));
f01327da:	a1 94 27 86 f0       	mov    0xf0862794,%eax
f01327df:	89 45 f0             	mov    %eax,-0x10(%ebp)
	            struct MemBlock *newBlock = ptrnew;
f01327e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01327e5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	             newBlock->size = size;
f01327e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01327eb:	8b 55 08             	mov    0x8(%ebp),%edx
f01327ee:	89 50 0c             	mov    %edx,0xc(%eax)
	             newBlock->sva =updated->sva ;
f01327f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01327f4:	8b 50 08             	mov    0x8(%eax),%edx
f01327f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01327fa:	89 50 08             	mov    %edx,0x8(%eax)
	              updated->size = updated->size - size;
f01327fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132800:	8b 40 0c             	mov    0xc(%eax),%eax
f0132803:	2b 45 08             	sub    0x8(%ebp),%eax
f0132806:	89 c2                	mov    %eax,%edx
f0132808:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013280b:	89 50 0c             	mov    %edx,0xc(%eax)
	              updated->sva =updated->sva + size ;
f013280e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132811:	8b 50 08             	mov    0x8(%eax),%edx
f0132814:	8b 45 08             	mov    0x8(%ebp),%eax
f0132817:	01 c2                	add    %eax,%edx
f0132819:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013281c:	89 50 08             	mov    %edx,0x8(%eax)
	            LIST_REMOVE(&(AvailableMemBlocksList),newBlock );
f013281f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0132823:	75 17                	jne    f013283c <alloc_block_NF+0x84>
f0132825:	83 ec 04             	sub    $0x4,%esp
f0132828:	68 d9 d4 13 f0       	push   $0xf013d4d9
f013282d:	68 c4 00 00 00       	push   $0xc4
f0132832:	68 67 d4 13 f0       	push   $0xf013d467
f0132837:	e8 c9 d9 fc ff       	call   f0100205 <_panic>
f013283c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013283f:	8b 00                	mov    (%eax),%eax
f0132841:	85 c0                	test   %eax,%eax
f0132843:	74 10                	je     f0132855 <alloc_block_NF+0x9d>
f0132845:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132848:	8b 00                	mov    (%eax),%eax
f013284a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f013284d:	8b 52 04             	mov    0x4(%edx),%edx
f0132850:	89 50 04             	mov    %edx,0x4(%eax)
f0132853:	eb 0b                	jmp    f0132860 <alloc_block_NF+0xa8>
f0132855:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132858:	8b 40 04             	mov    0x4(%eax),%eax
f013285b:	a3 98 27 86 f0       	mov    %eax,0xf0862798
f0132860:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132863:	8b 40 04             	mov    0x4(%eax),%eax
f0132866:	85 c0                	test   %eax,%eax
f0132868:	74 0f                	je     f0132879 <alloc_block_NF+0xc1>
f013286a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013286d:	8b 40 04             	mov    0x4(%eax),%eax
f0132870:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0132873:	8b 12                	mov    (%edx),%edx
f0132875:	89 10                	mov    %edx,(%eax)
f0132877:	eb 0a                	jmp    f0132883 <alloc_block_NF+0xcb>
f0132879:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013287c:	8b 00                	mov    (%eax),%eax
f013287e:	a3 94 27 86 f0       	mov    %eax,0xf0862794
f0132883:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132886:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013288c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013288f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132896:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f013289b:	48                   	dec    %eax
f013289c:	a3 a0 27 86 f0       	mov    %eax,0xf08627a0
	                    return newBlock ;
f01328a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01328a4:	e9 ad 00 00 00       	jmp    f0132956 <alloc_block_NF+0x19e>
	                    }
	        else if (updated->size == size){
f01328a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328ac:	8b 40 0c             	mov    0xc(%eax),%eax
f01328af:	3b 45 08             	cmp    0x8(%ebp),%eax
f01328b2:	0f 85 87 00 00 00    	jne    f013293f <alloc_block_NF+0x187>
	                        LIST_REMOVE(&(FreeMemBlocksList),updated);
f01328b8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01328bc:	75 17                	jne    f01328d5 <alloc_block_NF+0x11d>
f01328be:	83 ec 04             	sub    $0x4,%esp
f01328c1:	68 d9 d4 13 f0       	push   $0xf013d4d9
f01328c6:	68 c8 00 00 00       	push   $0xc8
f01328cb:	68 67 d4 13 f0       	push   $0xf013d467
f01328d0:	e8 30 d9 fc ff       	call   f0100205 <_panic>
f01328d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328d8:	8b 00                	mov    (%eax),%eax
f01328da:	85 c0                	test   %eax,%eax
f01328dc:	74 10                	je     f01328ee <alloc_block_NF+0x136>
f01328de:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328e1:	8b 00                	mov    (%eax),%eax
f01328e3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01328e6:	8b 52 04             	mov    0x4(%edx),%edx
f01328e9:	89 50 04             	mov    %edx,0x4(%eax)
f01328ec:	eb 0b                	jmp    f01328f9 <alloc_block_NF+0x141>
f01328ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328f1:	8b 40 04             	mov    0x4(%eax),%eax
f01328f4:	a3 64 27 86 f0       	mov    %eax,0xf0862764
f01328f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328fc:	8b 40 04             	mov    0x4(%eax),%eax
f01328ff:	85 c0                	test   %eax,%eax
f0132901:	74 0f                	je     f0132912 <alloc_block_NF+0x15a>
f0132903:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132906:	8b 40 04             	mov    0x4(%eax),%eax
f0132909:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013290c:	8b 12                	mov    (%edx),%edx
f013290e:	89 10                	mov    %edx,(%eax)
f0132910:	eb 0a                	jmp    f013291c <alloc_block_NF+0x164>
f0132912:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132915:	8b 00                	mov    (%eax),%eax
f0132917:	a3 60 27 86 f0       	mov    %eax,0xf0862760
f013291c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013291f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132925:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132928:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013292f:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f0132934:	48                   	dec    %eax
f0132935:	a3 6c 27 86 f0       	mov    %eax,0xf086276c
	                        return  updated;
f013293a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013293d:	eb 17                	jmp    f0132956 <alloc_block_NF+0x19e>
	                }
	        updated = updated->prev_next_info.le_next;
f013293f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132942:	8b 00                	mov    (%eax),%eax
f0132944:	89 45 f4             	mov    %eax,-0xc(%ebp)
//=========================================
struct MemBlock *alloc_block_NF(uint32 size)

{
	struct MemBlock *updated= FreeMemBlocksList.lh_first  ;
	    while (updated!= NULL){
f0132947:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013294b:	0f 85 7a fe ff ff    	jne    f01327cb <alloc_block_NF+0x13>
	                        LIST_REMOVE(&(FreeMemBlocksList),updated);
	                        return  updated;
	                }
	        updated = updated->prev_next_info.le_next;
	    }
	    return 0 ;
f0132951:	b8 00 00 00 00       	mov    $0x0,%eax
	}
f0132956:	c9                   	leave  
f0132957:	c3                   	ret    

f0132958 <insert_sorted_with_merge_freeList>:

//===================================================
// [8] INSERT BLOCK (SORTED WITH MERGE) IN FREE LIST:
//===================================================
void insert_sorted_with_merge_freeList(struct MemBlock *blockToInsert)
{
f0132958:	55                   	push   %ebp
f0132959:	89 e5                	mov    %esp,%ebp
f013295b:	83 ec 28             	sub    $0x28,%esp
struct MemBlock *ptr=FreeMemBlocksList.lh_first;
f013295e:	a1 60 27 86 f0       	mov    0xf0862760,%eax
f0132963:	89 45 f4             	mov    %eax,-0xc(%ebp)
struct MemBlock *elementnxt ;
struct MemBlock *lastptr=FreeMemBlocksList.lh_last;
f0132966:	a1 64 27 86 f0       	mov    0xf0862764,%eax
f013296b:	89 45 f0             	mov    %eax,-0x10(%ebp)
int size_of_free =LIST_SIZE(&(FreeMemBlocksList));
f013296e:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f0132973:	89 45 ec             	mov    %eax,-0x14(%ebp)
if(size_of_free == 0){
f0132976:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f013297a:	75 68                	jne    f01329e4 <insert_sorted_with_merge_freeList+0x8c>
	LIST_INSERT_HEAD(&(FreeMemBlocksList),blockToInsert);
f013297c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132980:	75 17                	jne    f0132999 <insert_sorted_with_merge_freeList+0x41>
f0132982:	83 ec 04             	sub    $0x4,%esp
f0132985:	68 44 d4 13 f0       	push   $0xf013d444
f013298a:	68 da 00 00 00       	push   $0xda
f013298f:	68 67 d4 13 f0       	push   $0xf013d467
f0132994:	e8 6c d8 fc ff       	call   f0100205 <_panic>
f0132999:	8b 15 60 27 86 f0    	mov    0xf0862760,%edx
f013299f:	8b 45 08             	mov    0x8(%ebp),%eax
f01329a2:	89 10                	mov    %edx,(%eax)
f01329a4:	8b 45 08             	mov    0x8(%ebp),%eax
f01329a7:	8b 00                	mov    (%eax),%eax
f01329a9:	85 c0                	test   %eax,%eax
f01329ab:	74 0d                	je     f01329ba <insert_sorted_with_merge_freeList+0x62>
f01329ad:	a1 60 27 86 f0       	mov    0xf0862760,%eax
f01329b2:	8b 55 08             	mov    0x8(%ebp),%edx
f01329b5:	89 50 04             	mov    %edx,0x4(%eax)
f01329b8:	eb 08                	jmp    f01329c2 <insert_sorted_with_merge_freeList+0x6a>
f01329ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01329bd:	a3 64 27 86 f0       	mov    %eax,0xf0862764
f01329c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01329c5:	a3 60 27 86 f0       	mov    %eax,0xf0862760
f01329ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01329cd:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01329d4:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f01329d9:	40                   	inc    %eax
f01329da:	a3 6c 27 86 f0       	mov    %eax,0xf086276c



	}
	}
	}
f01329df:	e9 49 07 00 00       	jmp    f013312d <insert_sorted_with_merge_freeList+0x7d5>
int size_of_free =LIST_SIZE(&(FreeMemBlocksList));
if(size_of_free == 0){
	LIST_INSERT_HEAD(&(FreeMemBlocksList),blockToInsert);

}
else if((lastptr->sva + lastptr->size) < blockToInsert->sva
f01329e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01329e7:	8b 50 08             	mov    0x8(%eax),%edx
f01329ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01329ed:	8b 40 0c             	mov    0xc(%eax),%eax
f01329f0:	01 c2                	add    %eax,%edx
f01329f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01329f5:	8b 40 08             	mov    0x8(%eax),%eax
f01329f8:	39 c2                	cmp    %eax,%edx
f01329fa:	73 77                	jae    f0132a73 <insert_sorted_with_merge_freeList+0x11b>
		&& lastptr->prev_next_info.le_next==NULL
f01329fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01329ff:	8b 00                	mov    (%eax),%eax
f0132a01:	85 c0                	test   %eax,%eax
f0132a03:	75 6e                	jne    f0132a73 <insert_sorted_with_merge_freeList+0x11b>
		&&size_of_free!=0 ){
f0132a05:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0132a09:	74 68                	je     f0132a73 <insert_sorted_with_merge_freeList+0x11b>
	LIST_INSERT_TAIL(&(FreeMemBlocksList),blockToInsert);
f0132a0b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132a0f:	75 17                	jne    f0132a28 <insert_sorted_with_merge_freeList+0xd0>
f0132a11:	83 ec 04             	sub    $0x4,%esp
f0132a14:	68 80 d4 13 f0       	push   $0xf013d480
f0132a19:	68 e0 00 00 00       	push   $0xe0
f0132a1e:	68 67 d4 13 f0       	push   $0xf013d467
f0132a23:	e8 dd d7 fc ff       	call   f0100205 <_panic>
f0132a28:	8b 15 64 27 86 f0    	mov    0xf0862764,%edx
f0132a2e:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a31:	89 50 04             	mov    %edx,0x4(%eax)
f0132a34:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a37:	8b 40 04             	mov    0x4(%eax),%eax
f0132a3a:	85 c0                	test   %eax,%eax
f0132a3c:	74 0c                	je     f0132a4a <insert_sorted_with_merge_freeList+0xf2>
f0132a3e:	a1 64 27 86 f0       	mov    0xf0862764,%eax
f0132a43:	8b 55 08             	mov    0x8(%ebp),%edx
f0132a46:	89 10                	mov    %edx,(%eax)
f0132a48:	eb 08                	jmp    f0132a52 <insert_sorted_with_merge_freeList+0xfa>
f0132a4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a4d:	a3 60 27 86 f0       	mov    %eax,0xf0862760
f0132a52:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a55:	a3 64 27 86 f0       	mov    %eax,0xf0862764
f0132a5a:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a5d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132a63:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f0132a68:	40                   	inc    %eax
f0132a69:	a3 6c 27 86 f0       	mov    %eax,0xf086276c
f0132a6e:	e9 ba 06 00 00       	jmp    f013312d <insert_sorted_with_merge_freeList+0x7d5>

}
else if((blockToInsert->size + blockToInsert->sva) < ptr->sva
f0132a73:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a76:	8b 50 0c             	mov    0xc(%eax),%edx
f0132a79:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a7c:	8b 40 08             	mov    0x8(%eax),%eax
f0132a7f:	01 c2                	add    %eax,%edx
f0132a81:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a84:	8b 40 08             	mov    0x8(%eax),%eax
f0132a87:	39 c2                	cmp    %eax,%edx
f0132a89:	73 78                	jae    f0132b03 <insert_sorted_with_merge_freeList+0x1ab>
		&& ptr->prev_next_info.le_prev==NULL
f0132a8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a8e:	8b 40 04             	mov    0x4(%eax),%eax
f0132a91:	85 c0                	test   %eax,%eax
f0132a93:	75 6e                	jne    f0132b03 <insert_sorted_with_merge_freeList+0x1ab>
		&&size_of_free!=0 ){
f0132a95:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0132a99:	74 68                	je     f0132b03 <insert_sorted_with_merge_freeList+0x1ab>
	LIST_INSERT_HEAD(&(FreeMemBlocksList),blockToInsert);
f0132a9b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132a9f:	75 17                	jne    f0132ab8 <insert_sorted_with_merge_freeList+0x160>
f0132aa1:	83 ec 04             	sub    $0x4,%esp
f0132aa4:	68 44 d4 13 f0       	push   $0xf013d444
f0132aa9:	68 e6 00 00 00       	push   $0xe6
f0132aae:	68 67 d4 13 f0       	push   $0xf013d467
f0132ab3:	e8 4d d7 fc ff       	call   f0100205 <_panic>
f0132ab8:	8b 15 60 27 86 f0    	mov    0xf0862760,%edx
f0132abe:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ac1:	89 10                	mov    %edx,(%eax)
f0132ac3:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ac6:	8b 00                	mov    (%eax),%eax
f0132ac8:	85 c0                	test   %eax,%eax
f0132aca:	74 0d                	je     f0132ad9 <insert_sorted_with_merge_freeList+0x181>
f0132acc:	a1 60 27 86 f0       	mov    0xf0862760,%eax
f0132ad1:	8b 55 08             	mov    0x8(%ebp),%edx
f0132ad4:	89 50 04             	mov    %edx,0x4(%eax)
f0132ad7:	eb 08                	jmp    f0132ae1 <insert_sorted_with_merge_freeList+0x189>
f0132ad9:	8b 45 08             	mov    0x8(%ebp),%eax
f0132adc:	a3 64 27 86 f0       	mov    %eax,0xf0862764
f0132ae1:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ae4:	a3 60 27 86 f0       	mov    %eax,0xf0862760
f0132ae9:	8b 45 08             	mov    0x8(%ebp),%eax
f0132aec:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132af3:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f0132af8:	40                   	inc    %eax
f0132af9:	a3 6c 27 86 f0       	mov    %eax,0xf086276c
f0132afe:	e9 2a 06 00 00       	jmp    f013312d <insert_sorted_with_merge_freeList+0x7d5>

}
else{
	LIST_FOREACH(ptr,&(FreeMemBlocksList)){
f0132b03:	a1 60 27 86 f0       	mov    0xf0862760,%eax
f0132b08:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132b0b:	e9 ed 05 00 00       	jmp    f01330fd <insert_sorted_with_merge_freeList+0x7a5>

		elementnxt = ptr->prev_next_info.le_next;
f0132b10:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b13:	8b 00                	mov    (%eax),%eax
f0132b15:	89 45 e8             	mov    %eax,-0x18(%ebp)
		if (elementnxt != NULL &&(ptr->size + ptr->sva) < blockToInsert->sva
f0132b18:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132b1c:	0f 84 a7 00 00 00    	je     f0132bc9 <insert_sorted_with_merge_freeList+0x271>
f0132b22:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b25:	8b 50 0c             	mov    0xc(%eax),%edx
f0132b28:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b2b:	8b 40 08             	mov    0x8(%eax),%eax
f0132b2e:	01 c2                	add    %eax,%edx
f0132b30:	8b 45 08             	mov    0x8(%ebp),%eax
f0132b33:	8b 40 08             	mov    0x8(%eax),%eax
f0132b36:	39 c2                	cmp    %eax,%edx
f0132b38:	0f 83 8b 00 00 00    	jae    f0132bc9 <insert_sorted_with_merge_freeList+0x271>
		                    && (blockToInsert->size + blockToInsert->sva)
f0132b3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0132b41:	8b 50 0c             	mov    0xc(%eax),%edx
f0132b44:	8b 45 08             	mov    0x8(%ebp),%eax
f0132b47:	8b 40 08             	mov    0x8(%eax),%eax
f0132b4a:	01 c2                	add    %eax,%edx
		                            < elementnxt->sva) { // no merge and insert between 2 blocks
f0132b4c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132b4f:	8b 40 08             	mov    0x8(%eax),%eax
else{
	LIST_FOREACH(ptr,&(FreeMemBlocksList)){

		elementnxt = ptr->prev_next_info.le_next;
		if (elementnxt != NULL &&(ptr->size + ptr->sva) < blockToInsert->sva
		                    && (blockToInsert->size + blockToInsert->sva)
f0132b52:	39 c2                	cmp    %eax,%edx
f0132b54:	73 73                	jae    f0132bc9 <insert_sorted_with_merge_freeList+0x271>
		                            < elementnxt->sva) { // no merge and insert between 2 blocks
		     LIST_INSERT_AFTER(&(FreeMemBlocksList), ptr, blockToInsert);
f0132b56:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132b5a:	74 06                	je     f0132b62 <insert_sorted_with_merge_freeList+0x20a>
f0132b5c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132b60:	75 17                	jne    f0132b79 <insert_sorted_with_merge_freeList+0x221>
f0132b62:	83 ec 04             	sub    $0x4,%esp
f0132b65:	68 f8 d4 13 f0       	push   $0xf013d4f8
f0132b6a:	68 f0 00 00 00       	push   $0xf0
f0132b6f:	68 67 d4 13 f0       	push   $0xf013d467
f0132b74:	e8 8c d6 fc ff       	call   f0100205 <_panic>
f0132b79:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b7c:	8b 10                	mov    (%eax),%edx
f0132b7e:	8b 45 08             	mov    0x8(%ebp),%eax
f0132b81:	89 10                	mov    %edx,(%eax)
f0132b83:	8b 45 08             	mov    0x8(%ebp),%eax
f0132b86:	8b 00                	mov    (%eax),%eax
f0132b88:	85 c0                	test   %eax,%eax
f0132b8a:	74 0b                	je     f0132b97 <insert_sorted_with_merge_freeList+0x23f>
f0132b8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b8f:	8b 00                	mov    (%eax),%eax
f0132b91:	8b 55 08             	mov    0x8(%ebp),%edx
f0132b94:	89 50 04             	mov    %edx,0x4(%eax)
f0132b97:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b9a:	8b 55 08             	mov    0x8(%ebp),%edx
f0132b9d:	89 10                	mov    %edx,(%eax)
f0132b9f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ba2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132ba5:	89 50 04             	mov    %edx,0x4(%eax)
f0132ba8:	8b 45 08             	mov    0x8(%ebp),%eax
f0132bab:	8b 00                	mov    (%eax),%eax
f0132bad:	85 c0                	test   %eax,%eax
f0132baf:	75 08                	jne    f0132bb9 <insert_sorted_with_merge_freeList+0x261>
f0132bb1:	8b 45 08             	mov    0x8(%ebp),%eax
f0132bb4:	a3 64 27 86 f0       	mov    %eax,0xf0862764
f0132bb9:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f0132bbe:	40                   	inc    %eax
f0132bbf:	a3 6c 27 86 f0       	mov    %eax,0xf086276c

		         break;
f0132bc4:	e9 64 05 00 00       	jmp    f013312d <insert_sorted_with_merge_freeList+0x7d5>
		            }



		else if((FreeMemBlocksList.lh_last->size + FreeMemBlocksList.lh_last->sva)==blockToInsert->sva
f0132bc9:	a1 64 27 86 f0       	mov    0xf0862764,%eax
f0132bce:	8b 50 0c             	mov    0xc(%eax),%edx
f0132bd1:	a1 64 27 86 f0       	mov    0xf0862764,%eax
f0132bd6:	8b 40 08             	mov    0x8(%eax),%eax
f0132bd9:	01 c2                	add    %eax,%edx
f0132bdb:	8b 45 08             	mov    0x8(%ebp),%eax
f0132bde:	8b 40 08             	mov    0x8(%eax),%eax
f0132be1:	39 c2                	cmp    %eax,%edx
f0132be3:	0f 85 b1 00 00 00    	jne    f0132c9a <insert_sorted_with_merge_freeList+0x342>
				&&FreeMemBlocksList.lh_last !=NULL
f0132be9:	a1 64 27 86 f0       	mov    0xf0862764,%eax
f0132bee:	85 c0                	test   %eax,%eax
f0132bf0:	0f 84 a4 00 00 00    	je     f0132c9a <insert_sorted_with_merge_freeList+0x342>
				&&FreeMemBlocksList.lh_last->prev_next_info.le_next==NULL
f0132bf6:	a1 64 27 86 f0       	mov    0xf0862764,%eax
f0132bfb:	8b 00                	mov    (%eax),%eax
f0132bfd:	85 c0                	test   %eax,%eax
f0132bff:	0f 85 95 00 00 00    	jne    f0132c9a <insert_sorted_with_merge_freeList+0x342>
			 ){

	FreeMemBlocksList.lh_last->size=FreeMemBlocksList.lh_last ->size+blockToInsert->size;
f0132c05:	a1 64 27 86 f0       	mov    0xf0862764,%eax
f0132c0a:	8b 15 64 27 86 f0    	mov    0xf0862764,%edx
f0132c10:	8b 4a 0c             	mov    0xc(%edx),%ecx
f0132c13:	8b 55 08             	mov    0x8(%ebp),%edx
f0132c16:	8b 52 0c             	mov    0xc(%edx),%edx
f0132c19:	01 ca                	add    %ecx,%edx
f0132c1b:	89 50 0c             	mov    %edx,0xc(%eax)
		blockToInsert->size =0;
f0132c1e:	8b 45 08             	mov    0x8(%ebp),%eax
f0132c21:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
		blockToInsert->sva =0;
f0132c28:	8b 45 08             	mov    0x8(%ebp),%eax
f0132c2b:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
		LIST_INSERT_HEAD(&(AvailableMemBlocksList),blockToInsert);
f0132c32:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132c36:	75 17                	jne    f0132c4f <insert_sorted_with_merge_freeList+0x2f7>
f0132c38:	83 ec 04             	sub    $0x4,%esp
f0132c3b:	68 44 d4 13 f0       	push   $0xf013d444
f0132c40:	68 ff 00 00 00       	push   $0xff
f0132c45:	68 67 d4 13 f0       	push   $0xf013d467
f0132c4a:	e8 b6 d5 fc ff       	call   f0100205 <_panic>
f0132c4f:	8b 15 94 27 86 f0    	mov    0xf0862794,%edx
f0132c55:	8b 45 08             	mov    0x8(%ebp),%eax
f0132c58:	89 10                	mov    %edx,(%eax)
f0132c5a:	8b 45 08             	mov    0x8(%ebp),%eax
f0132c5d:	8b 00                	mov    (%eax),%eax
f0132c5f:	85 c0                	test   %eax,%eax
f0132c61:	74 0d                	je     f0132c70 <insert_sorted_with_merge_freeList+0x318>
f0132c63:	a1 94 27 86 f0       	mov    0xf0862794,%eax
f0132c68:	8b 55 08             	mov    0x8(%ebp),%edx
f0132c6b:	89 50 04             	mov    %edx,0x4(%eax)
f0132c6e:	eb 08                	jmp    f0132c78 <insert_sorted_with_merge_freeList+0x320>
f0132c70:	8b 45 08             	mov    0x8(%ebp),%eax
f0132c73:	a3 98 27 86 f0       	mov    %eax,0xf0862798
f0132c78:	8b 45 08             	mov    0x8(%ebp),%eax
f0132c7b:	a3 94 27 86 f0       	mov    %eax,0xf0862794
f0132c80:	8b 45 08             	mov    0x8(%ebp),%eax
f0132c83:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132c8a:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f0132c8f:	40                   	inc    %eax
f0132c90:	a3 a0 27 86 f0       	mov    %eax,0xf08627a0

	break;
f0132c95:	e9 93 04 00 00       	jmp    f013312d <insert_sorted_with_merge_freeList+0x7d5>
	}


	else if((ptr->sva + ptr->size ) ==blockToInsert->sva
f0132c9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c9d:	8b 50 08             	mov    0x8(%eax),%edx
f0132ca0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132ca3:	8b 40 0c             	mov    0xc(%eax),%eax
f0132ca6:	01 c2                	add    %eax,%edx
f0132ca8:	8b 45 08             	mov    0x8(%ebp),%eax
f0132cab:	8b 40 08             	mov    0x8(%eax),%eax
f0132cae:	39 c2                	cmp    %eax,%edx
f0132cb0:	0f 85 ae 00 00 00    	jne    f0132d64 <insert_sorted_with_merge_freeList+0x40c>
			&& (blockToInsert->size + blockToInsert->sva
f0132cb6:	8b 45 08             	mov    0x8(%ebp),%eax
f0132cb9:	8b 50 0c             	mov    0xc(%eax),%edx
f0132cbc:	8b 45 08             	mov    0x8(%ebp),%eax
f0132cbf:	8b 40 08             	mov    0x8(%eax),%eax
f0132cc2:	01 c2                	add    %eax,%edx
					!=ptr->prev_next_info.le_next->sva ) ){
f0132cc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132cc7:	8b 00                	mov    (%eax),%eax
f0132cc9:	8b 40 08             	mov    0x8(%eax),%eax
	break;
	}


	else if((ptr->sva + ptr->size ) ==blockToInsert->sva
			&& (blockToInsert->size + blockToInsert->sva
f0132ccc:	39 c2                	cmp    %eax,%edx
f0132cce:	0f 84 90 00 00 00    	je     f0132d64 <insert_sorted_with_merge_freeList+0x40c>
					!=ptr->prev_next_info.le_next->sva ) ){
		ptr->size =ptr->size +blockToInsert->size;
f0132cd4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132cd7:	8b 50 0c             	mov    0xc(%eax),%edx
f0132cda:	8b 45 08             	mov    0x8(%ebp),%eax
f0132cdd:	8b 40 0c             	mov    0xc(%eax),%eax
f0132ce0:	01 c2                	add    %eax,%edx
f0132ce2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132ce5:	89 50 0c             	mov    %edx,0xc(%eax)
		blockToInsert->size=0;
f0132ce8:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ceb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
		blockToInsert->sva=0;
f0132cf2:	8b 45 08             	mov    0x8(%ebp),%eax
f0132cf5:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
		LIST_INSERT_HEAD(&(AvailableMemBlocksList),blockToInsert);
f0132cfc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132d00:	75 17                	jne    f0132d19 <insert_sorted_with_merge_freeList+0x3c1>
f0132d02:	83 ec 04             	sub    $0x4,%esp
f0132d05:	68 44 d4 13 f0       	push   $0xf013d444
f0132d0a:	68 0b 01 00 00       	push   $0x10b
f0132d0f:	68 67 d4 13 f0       	push   $0xf013d467
f0132d14:	e8 ec d4 fc ff       	call   f0100205 <_panic>
f0132d19:	8b 15 94 27 86 f0    	mov    0xf0862794,%edx
f0132d1f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132d22:	89 10                	mov    %edx,(%eax)
f0132d24:	8b 45 08             	mov    0x8(%ebp),%eax
f0132d27:	8b 00                	mov    (%eax),%eax
f0132d29:	85 c0                	test   %eax,%eax
f0132d2b:	74 0d                	je     f0132d3a <insert_sorted_with_merge_freeList+0x3e2>
f0132d2d:	a1 94 27 86 f0       	mov    0xf0862794,%eax
f0132d32:	8b 55 08             	mov    0x8(%ebp),%edx
f0132d35:	89 50 04             	mov    %edx,0x4(%eax)
f0132d38:	eb 08                	jmp    f0132d42 <insert_sorted_with_merge_freeList+0x3ea>
f0132d3a:	8b 45 08             	mov    0x8(%ebp),%eax
f0132d3d:	a3 98 27 86 f0       	mov    %eax,0xf0862798
f0132d42:	8b 45 08             	mov    0x8(%ebp),%eax
f0132d45:	a3 94 27 86 f0       	mov    %eax,0xf0862794
f0132d4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0132d4d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132d54:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f0132d59:	40                   	inc    %eax
f0132d5a:	a3 a0 27 86 f0       	mov    %eax,0xf08627a0

		break;
f0132d5f:	e9 c9 03 00 00       	jmp    f013312d <insert_sorted_with_merge_freeList+0x7d5>
	}
	else if((blockToInsert->size + blockToInsert->sva )
f0132d64:	8b 45 08             	mov    0x8(%ebp),%eax
f0132d67:	8b 50 0c             	mov    0xc(%eax),%edx
f0132d6a:	8b 45 08             	mov    0x8(%ebp),%eax
f0132d6d:	8b 40 08             	mov    0x8(%eax),%eax
f0132d70:	01 c2                	add    %eax,%edx
			== ptr->sva && ptr!=NULL
f0132d72:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d75:	8b 40 08             	mov    0x8(%eax),%eax
		blockToInsert->sva=0;
		LIST_INSERT_HEAD(&(AvailableMemBlocksList),blockToInsert);

		break;
	}
	else if((blockToInsert->size + blockToInsert->sva )
f0132d78:	39 c2                	cmp    %eax,%edx
f0132d7a:	0f 85 bb 00 00 00    	jne    f0132e3b <insert_sorted_with_merge_freeList+0x4e3>
			== ptr->sva && ptr!=NULL
f0132d80:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132d84:	0f 84 b1 00 00 00    	je     f0132e3b <insert_sorted_with_merge_freeList+0x4e3>
			&&ptr->prev_next_info.le_prev==NULL)
f0132d8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d8d:	8b 40 04             	mov    0x4(%eax),%eax
f0132d90:	85 c0                	test   %eax,%eax
f0132d92:	0f 85 a3 00 00 00    	jne    f0132e3b <insert_sorted_with_merge_freeList+0x4e3>
		{
		FreeMemBlocksList.lh_first->sva=blockToInsert->sva;
f0132d98:	a1 60 27 86 f0       	mov    0xf0862760,%eax
f0132d9d:	8b 55 08             	mov    0x8(%ebp),%edx
f0132da0:	8b 52 08             	mov    0x8(%edx),%edx
f0132da3:	89 50 08             	mov    %edx,0x8(%eax)
		FreeMemBlocksList.lh_first->size=FreeMemBlocksList.lh_first->size+blockToInsert->size;
f0132da6:	a1 60 27 86 f0       	mov    0xf0862760,%eax
f0132dab:	8b 15 60 27 86 f0    	mov    0xf0862760,%edx
f0132db1:	8b 4a 0c             	mov    0xc(%edx),%ecx
f0132db4:	8b 55 08             	mov    0x8(%ebp),%edx
f0132db7:	8b 52 0c             	mov    0xc(%edx),%edx
f0132dba:	01 ca                	add    %ecx,%edx
f0132dbc:	89 50 0c             	mov    %edx,0xc(%eax)
		blockToInsert->size=0;
f0132dbf:	8b 45 08             	mov    0x8(%ebp),%eax
f0132dc2:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
		blockToInsert->sva=0;
f0132dc9:	8b 45 08             	mov    0x8(%ebp),%eax
f0132dcc:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
		LIST_INSERT_HEAD(&(AvailableMemBlocksList),blockToInsert);
f0132dd3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132dd7:	75 17                	jne    f0132df0 <insert_sorted_with_merge_freeList+0x498>
f0132dd9:	83 ec 04             	sub    $0x4,%esp
f0132ddc:	68 44 d4 13 f0       	push   $0xf013d444
f0132de1:	68 17 01 00 00       	push   $0x117
f0132de6:	68 67 d4 13 f0       	push   $0xf013d467
f0132deb:	e8 15 d4 fc ff       	call   f0100205 <_panic>
f0132df0:	8b 15 94 27 86 f0    	mov    0xf0862794,%edx
f0132df6:	8b 45 08             	mov    0x8(%ebp),%eax
f0132df9:	89 10                	mov    %edx,(%eax)
f0132dfb:	8b 45 08             	mov    0x8(%ebp),%eax
f0132dfe:	8b 00                	mov    (%eax),%eax
f0132e00:	85 c0                	test   %eax,%eax
f0132e02:	74 0d                	je     f0132e11 <insert_sorted_with_merge_freeList+0x4b9>
f0132e04:	a1 94 27 86 f0       	mov    0xf0862794,%eax
f0132e09:	8b 55 08             	mov    0x8(%ebp),%edx
f0132e0c:	89 50 04             	mov    %edx,0x4(%eax)
f0132e0f:	eb 08                	jmp    f0132e19 <insert_sorted_with_merge_freeList+0x4c1>
f0132e11:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e14:	a3 98 27 86 f0       	mov    %eax,0xf0862798
f0132e19:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e1c:	a3 94 27 86 f0       	mov    %eax,0xf0862794
f0132e21:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e24:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132e2b:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f0132e30:	40                   	inc    %eax
f0132e31:	a3 a0 27 86 f0       	mov    %eax,0xf08627a0

		break;
f0132e36:	e9 f2 02 00 00       	jmp    f013312d <insert_sorted_with_merge_freeList+0x7d5>
	}

	else if(blockToInsert->sva + blockToInsert->size == ptr->sva
f0132e3b:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e3e:	8b 50 08             	mov    0x8(%eax),%edx
f0132e41:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e44:	8b 40 0c             	mov    0xc(%eax),%eax
f0132e47:	01 c2                	add    %eax,%edx
f0132e49:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e4c:	8b 40 08             	mov    0x8(%eax),%eax
f0132e4f:	39 c2                	cmp    %eax,%edx
f0132e51:	0f 85 be 00 00 00    	jne    f0132f15 <insert_sorted_with_merge_freeList+0x5bd>
		&&ptr->prev_next_info.le_prev->sva + ptr->prev_next_info.le_prev->size !=blockToInsert->sva
f0132e57:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e5a:	8b 40 04             	mov    0x4(%eax),%eax
f0132e5d:	8b 50 08             	mov    0x8(%eax),%edx
f0132e60:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e63:	8b 40 04             	mov    0x4(%eax),%eax
f0132e66:	8b 40 0c             	mov    0xc(%eax),%eax
f0132e69:	01 c2                	add    %eax,%edx
f0132e6b:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e6e:	8b 40 08             	mov    0x8(%eax),%eax
f0132e71:	39 c2                	cmp    %eax,%edx
f0132e73:	0f 84 9c 00 00 00    	je     f0132f15 <insert_sorted_with_merge_freeList+0x5bd>

			){


		ptr->sva=blockToInsert->sva;
f0132e79:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e7c:	8b 50 08             	mov    0x8(%eax),%edx
f0132e7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e82:	89 50 08             	mov    %edx,0x8(%eax)
		ptr->size=ptr->size + blockToInsert->size ;
f0132e85:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e88:	8b 50 0c             	mov    0xc(%eax),%edx
f0132e8b:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e8e:	8b 40 0c             	mov    0xc(%eax),%eax
f0132e91:	01 c2                	add    %eax,%edx
f0132e93:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e96:	89 50 0c             	mov    %edx,0xc(%eax)
		blockToInsert->size=0;
f0132e99:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e9c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
		blockToInsert->sva=0;
f0132ea3:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ea6:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
		LIST_INSERT_HEAD(&(AvailableMemBlocksList),blockToInsert);
f0132ead:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132eb1:	75 17                	jne    f0132eca <insert_sorted_with_merge_freeList+0x572>
f0132eb3:	83 ec 04             	sub    $0x4,%esp
f0132eb6:	68 44 d4 13 f0       	push   $0xf013d444
f0132ebb:	68 26 01 00 00       	push   $0x126
f0132ec0:	68 67 d4 13 f0       	push   $0xf013d467
f0132ec5:	e8 3b d3 fc ff       	call   f0100205 <_panic>
f0132eca:	8b 15 94 27 86 f0    	mov    0xf0862794,%edx
f0132ed0:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ed3:	89 10                	mov    %edx,(%eax)
f0132ed5:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ed8:	8b 00                	mov    (%eax),%eax
f0132eda:	85 c0                	test   %eax,%eax
f0132edc:	74 0d                	je     f0132eeb <insert_sorted_with_merge_freeList+0x593>
f0132ede:	a1 94 27 86 f0       	mov    0xf0862794,%eax
f0132ee3:	8b 55 08             	mov    0x8(%ebp),%edx
f0132ee6:	89 50 04             	mov    %edx,0x4(%eax)
f0132ee9:	eb 08                	jmp    f0132ef3 <insert_sorted_with_merge_freeList+0x59b>
f0132eeb:	8b 45 08             	mov    0x8(%ebp),%eax
f0132eee:	a3 98 27 86 f0       	mov    %eax,0xf0862798
f0132ef3:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ef6:	a3 94 27 86 f0       	mov    %eax,0xf0862794
f0132efb:	8b 45 08             	mov    0x8(%ebp),%eax
f0132efe:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132f05:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f0132f0a:	40                   	inc    %eax
f0132f0b:	a3 a0 27 86 f0       	mov    %eax,0xf08627a0

		break;//8
f0132f10:	e9 18 02 00 00       	jmp    f013312d <insert_sorted_with_merge_freeList+0x7d5>
	}
	else if((ptr->size + ptr->sva) == blockToInsert->sva
f0132f15:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132f18:	8b 50 0c             	mov    0xc(%eax),%edx
f0132f1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132f1e:	8b 40 08             	mov    0x8(%eax),%eax
f0132f21:	01 c2                	add    %eax,%edx
f0132f23:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f26:	8b 40 08             	mov    0x8(%eax),%eax
f0132f29:	39 c2                	cmp    %eax,%edx
f0132f2b:	0f 85 c4 01 00 00    	jne    f01330f5 <insert_sorted_with_merge_freeList+0x79d>
			&& blockToInsert->size+blockToInsert->sva == ptr->prev_next_info.le_next->sva
f0132f31:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f34:	8b 50 0c             	mov    0xc(%eax),%edx
f0132f37:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f3a:	8b 40 08             	mov    0x8(%eax),%eax
f0132f3d:	01 c2                	add    %eax,%edx
f0132f3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132f42:	8b 00                	mov    (%eax),%eax
f0132f44:	8b 40 08             	mov    0x8(%eax),%eax
f0132f47:	39 c2                	cmp    %eax,%edx
f0132f49:	0f 85 a6 01 00 00    	jne    f01330f5 <insert_sorted_with_merge_freeList+0x79d>
			&&ptr!=NULL)
f0132f4f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132f53:	0f 84 9c 01 00 00    	je     f01330f5 <insert_sorted_with_merge_freeList+0x79d>
	{

	    ptr->size =ptr->size + blockToInsert->size + ptr->prev_next_info.le_next->size;
f0132f59:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132f5c:	8b 50 0c             	mov    0xc(%eax),%edx
f0132f5f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f62:	8b 40 0c             	mov    0xc(%eax),%eax
f0132f65:	01 c2                	add    %eax,%edx
f0132f67:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132f6a:	8b 00                	mov    (%eax),%eax
f0132f6c:	8b 40 0c             	mov    0xc(%eax),%eax
f0132f6f:	01 c2                	add    %eax,%edx
f0132f71:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132f74:	89 50 0c             	mov    %edx,0xc(%eax)
	    blockToInsert->sva = 0;
f0132f77:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f7a:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	    blockToInsert->size = 0;
f0132f81:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f84:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	    LIST_INSERT_HEAD(&(AvailableMemBlocksList), blockToInsert);
f0132f8b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132f8f:	75 17                	jne    f0132fa8 <insert_sorted_with_merge_freeList+0x650>
f0132f91:	83 ec 04             	sub    $0x4,%esp
f0132f94:	68 44 d4 13 f0       	push   $0xf013d444
f0132f99:	68 32 01 00 00       	push   $0x132
f0132f9e:	68 67 d4 13 f0       	push   $0xf013d467
f0132fa3:	e8 5d d2 fc ff       	call   f0100205 <_panic>
f0132fa8:	8b 15 94 27 86 f0    	mov    0xf0862794,%edx
f0132fae:	8b 45 08             	mov    0x8(%ebp),%eax
f0132fb1:	89 10                	mov    %edx,(%eax)
f0132fb3:	8b 45 08             	mov    0x8(%ebp),%eax
f0132fb6:	8b 00                	mov    (%eax),%eax
f0132fb8:	85 c0                	test   %eax,%eax
f0132fba:	74 0d                	je     f0132fc9 <insert_sorted_with_merge_freeList+0x671>
f0132fbc:	a1 94 27 86 f0       	mov    0xf0862794,%eax
f0132fc1:	8b 55 08             	mov    0x8(%ebp),%edx
f0132fc4:	89 50 04             	mov    %edx,0x4(%eax)
f0132fc7:	eb 08                	jmp    f0132fd1 <insert_sorted_with_merge_freeList+0x679>
f0132fc9:	8b 45 08             	mov    0x8(%ebp),%eax
f0132fcc:	a3 98 27 86 f0       	mov    %eax,0xf0862798
f0132fd1:	8b 45 08             	mov    0x8(%ebp),%eax
f0132fd4:	a3 94 27 86 f0       	mov    %eax,0xf0862794
f0132fd9:	8b 45 08             	mov    0x8(%ebp),%eax
f0132fdc:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132fe3:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f0132fe8:	40                   	inc    %eax
f0132fe9:	a3 a0 27 86 f0       	mov    %eax,0xf08627a0
	    ptr->prev_next_info.le_next->sva = 0;
f0132fee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132ff1:	8b 00                	mov    (%eax),%eax
f0132ff3:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	    ptr->prev_next_info.le_next->size = 0;
f0132ffa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132ffd:	8b 00                	mov    (%eax),%eax
f0132fff:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	 struct MemBlock *temp =ptr->prev_next_info.le_next;
f0133006:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133009:	8b 00                	mov    (%eax),%eax
f013300b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	    LIST_REMOVE(&(FreeMemBlocksList),temp);
f013300e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0133012:	75 17                	jne    f013302b <insert_sorted_with_merge_freeList+0x6d3>
f0133014:	83 ec 04             	sub    $0x4,%esp
f0133017:	68 d9 d4 13 f0       	push   $0xf013d4d9
f013301c:	68 36 01 00 00       	push   $0x136
f0133021:	68 67 d4 13 f0       	push   $0xf013d467
f0133026:	e8 da d1 fc ff       	call   f0100205 <_panic>
f013302b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013302e:	8b 00                	mov    (%eax),%eax
f0133030:	85 c0                	test   %eax,%eax
f0133032:	74 10                	je     f0133044 <insert_sorted_with_merge_freeList+0x6ec>
f0133034:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0133037:	8b 00                	mov    (%eax),%eax
f0133039:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f013303c:	8b 52 04             	mov    0x4(%edx),%edx
f013303f:	89 50 04             	mov    %edx,0x4(%eax)
f0133042:	eb 0b                	jmp    f013304f <insert_sorted_with_merge_freeList+0x6f7>
f0133044:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0133047:	8b 40 04             	mov    0x4(%eax),%eax
f013304a:	a3 64 27 86 f0       	mov    %eax,0xf0862764
f013304f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0133052:	8b 40 04             	mov    0x4(%eax),%eax
f0133055:	85 c0                	test   %eax,%eax
f0133057:	74 0f                	je     f0133068 <insert_sorted_with_merge_freeList+0x710>
f0133059:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013305c:	8b 40 04             	mov    0x4(%eax),%eax
f013305f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0133062:	8b 12                	mov    (%edx),%edx
f0133064:	89 10                	mov    %edx,(%eax)
f0133066:	eb 0a                	jmp    f0133072 <insert_sorted_with_merge_freeList+0x71a>
f0133068:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013306b:	8b 00                	mov    (%eax),%eax
f013306d:	a3 60 27 86 f0       	mov    %eax,0xf0862760
f0133072:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0133075:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013307b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013307e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0133085:	a1 6c 27 86 f0       	mov    0xf086276c,%eax
f013308a:	48                   	dec    %eax
f013308b:	a3 6c 27 86 f0       	mov    %eax,0xf086276c
	    LIST_INSERT_HEAD(&(AvailableMemBlocksList), temp);
f0133090:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0133094:	75 17                	jne    f01330ad <insert_sorted_with_merge_freeList+0x755>
f0133096:	83 ec 04             	sub    $0x4,%esp
f0133099:	68 44 d4 13 f0       	push   $0xf013d444
f013309e:	68 37 01 00 00       	push   $0x137
f01330a3:	68 67 d4 13 f0       	push   $0xf013d467
f01330a8:	e8 58 d1 fc ff       	call   f0100205 <_panic>
f01330ad:	8b 15 94 27 86 f0    	mov    0xf0862794,%edx
f01330b3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01330b6:	89 10                	mov    %edx,(%eax)
f01330b8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01330bb:	8b 00                	mov    (%eax),%eax
f01330bd:	85 c0                	test   %eax,%eax
f01330bf:	74 0d                	je     f01330ce <insert_sorted_with_merge_freeList+0x776>
f01330c1:	a1 94 27 86 f0       	mov    0xf0862794,%eax
f01330c6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01330c9:	89 50 04             	mov    %edx,0x4(%eax)
f01330cc:	eb 08                	jmp    f01330d6 <insert_sorted_with_merge_freeList+0x77e>
f01330ce:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01330d1:	a3 98 27 86 f0       	mov    %eax,0xf0862798
f01330d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01330d9:	a3 94 27 86 f0       	mov    %eax,0xf0862794
f01330de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01330e1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01330e8:	a1 a0 27 86 f0       	mov    0xf08627a0,%eax
f01330ed:	40                   	inc    %eax
f01330ee:	a3 a0 27 86 f0       	mov    %eax,0xf08627a0

	    break;//9
f01330f3:	eb 38                	jmp    f013312d <insert_sorted_with_merge_freeList+0x7d5>
		&&size_of_free!=0 ){
	LIST_INSERT_HEAD(&(FreeMemBlocksList),blockToInsert);

}
else{
	LIST_FOREACH(ptr,&(FreeMemBlocksList)){
f01330f5:	a1 68 27 86 f0       	mov    0xf0862768,%eax
f01330fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01330fd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0133101:	74 07                	je     f013310a <insert_sorted_with_merge_freeList+0x7b2>
f0133103:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133106:	8b 00                	mov    (%eax),%eax
f0133108:	eb 05                	jmp    f013310f <insert_sorted_with_merge_freeList+0x7b7>
f013310a:	b8 00 00 00 00       	mov    $0x0,%eax
f013310f:	a3 68 27 86 f0       	mov    %eax,0xf0862768
f0133114:	a1 68 27 86 f0       	mov    0xf0862768,%eax
f0133119:	85 c0                	test   %eax,%eax
f013311b:	0f 85 ef f9 ff ff    	jne    f0132b10 <insert_sorted_with_merge_freeList+0x1b8>
f0133121:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0133125:	0f 85 e5 f9 ff ff    	jne    f0132b10 <insert_sorted_with_merge_freeList+0x1b8>



	}
	}
	}
f013312b:	eb 00                	jmp    f013312d <insert_sorted_with_merge_freeList+0x7d5>
f013312d:	90                   	nop
f013312e:	c9                   	leave  
f013312f:	c3                   	ret    

f0133130 <__udivdi3>:
f0133130:	55                   	push   %ebp
f0133131:	57                   	push   %edi
f0133132:	56                   	push   %esi
f0133133:	53                   	push   %ebx
f0133134:	83 ec 1c             	sub    $0x1c,%esp
f0133137:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f013313b:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f013313f:	8b 7c 24 38          	mov    0x38(%esp),%edi
f0133143:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f0133147:	89 ca                	mov    %ecx,%edx
f0133149:	89 f8                	mov    %edi,%eax
f013314b:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f013314f:	85 f6                	test   %esi,%esi
f0133151:	75 2d                	jne    f0133180 <__udivdi3+0x50>
f0133153:	39 cf                	cmp    %ecx,%edi
f0133155:	77 65                	ja     f01331bc <__udivdi3+0x8c>
f0133157:	89 fd                	mov    %edi,%ebp
f0133159:	85 ff                	test   %edi,%edi
f013315b:	75 0b                	jne    f0133168 <__udivdi3+0x38>
f013315d:	b8 01 00 00 00       	mov    $0x1,%eax
f0133162:	31 d2                	xor    %edx,%edx
f0133164:	f7 f7                	div    %edi
f0133166:	89 c5                	mov    %eax,%ebp
f0133168:	31 d2                	xor    %edx,%edx
f013316a:	89 c8                	mov    %ecx,%eax
f013316c:	f7 f5                	div    %ebp
f013316e:	89 c1                	mov    %eax,%ecx
f0133170:	89 d8                	mov    %ebx,%eax
f0133172:	f7 f5                	div    %ebp
f0133174:	89 cf                	mov    %ecx,%edi
f0133176:	89 fa                	mov    %edi,%edx
f0133178:	83 c4 1c             	add    $0x1c,%esp
f013317b:	5b                   	pop    %ebx
f013317c:	5e                   	pop    %esi
f013317d:	5f                   	pop    %edi
f013317e:	5d                   	pop    %ebp
f013317f:	c3                   	ret    
f0133180:	39 ce                	cmp    %ecx,%esi
f0133182:	77 28                	ja     f01331ac <__udivdi3+0x7c>
f0133184:	0f bd fe             	bsr    %esi,%edi
f0133187:	83 f7 1f             	xor    $0x1f,%edi
f013318a:	75 40                	jne    f01331cc <__udivdi3+0x9c>
f013318c:	39 ce                	cmp    %ecx,%esi
f013318e:	72 0a                	jb     f013319a <__udivdi3+0x6a>
f0133190:	3b 44 24 08          	cmp    0x8(%esp),%eax
f0133194:	0f 87 9e 00 00 00    	ja     f0133238 <__udivdi3+0x108>
f013319a:	b8 01 00 00 00       	mov    $0x1,%eax
f013319f:	89 fa                	mov    %edi,%edx
f01331a1:	83 c4 1c             	add    $0x1c,%esp
f01331a4:	5b                   	pop    %ebx
f01331a5:	5e                   	pop    %esi
f01331a6:	5f                   	pop    %edi
f01331a7:	5d                   	pop    %ebp
f01331a8:	c3                   	ret    
f01331a9:	8d 76 00             	lea    0x0(%esi),%esi
f01331ac:	31 ff                	xor    %edi,%edi
f01331ae:	31 c0                	xor    %eax,%eax
f01331b0:	89 fa                	mov    %edi,%edx
f01331b2:	83 c4 1c             	add    $0x1c,%esp
f01331b5:	5b                   	pop    %ebx
f01331b6:	5e                   	pop    %esi
f01331b7:	5f                   	pop    %edi
f01331b8:	5d                   	pop    %ebp
f01331b9:	c3                   	ret    
f01331ba:	66 90                	xchg   %ax,%ax
f01331bc:	89 d8                	mov    %ebx,%eax
f01331be:	f7 f7                	div    %edi
f01331c0:	31 ff                	xor    %edi,%edi
f01331c2:	89 fa                	mov    %edi,%edx
f01331c4:	83 c4 1c             	add    $0x1c,%esp
f01331c7:	5b                   	pop    %ebx
f01331c8:	5e                   	pop    %esi
f01331c9:	5f                   	pop    %edi
f01331ca:	5d                   	pop    %ebp
f01331cb:	c3                   	ret    
f01331cc:	bd 20 00 00 00       	mov    $0x20,%ebp
f01331d1:	89 eb                	mov    %ebp,%ebx
f01331d3:	29 fb                	sub    %edi,%ebx
f01331d5:	89 f9                	mov    %edi,%ecx
f01331d7:	d3 e6                	shl    %cl,%esi
f01331d9:	89 c5                	mov    %eax,%ebp
f01331db:	88 d9                	mov    %bl,%cl
f01331dd:	d3 ed                	shr    %cl,%ebp
f01331df:	89 e9                	mov    %ebp,%ecx
f01331e1:	09 f1                	or     %esi,%ecx
f01331e3:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f01331e7:	89 f9                	mov    %edi,%ecx
f01331e9:	d3 e0                	shl    %cl,%eax
f01331eb:	89 c5                	mov    %eax,%ebp
f01331ed:	89 d6                	mov    %edx,%esi
f01331ef:	88 d9                	mov    %bl,%cl
f01331f1:	d3 ee                	shr    %cl,%esi
f01331f3:	89 f9                	mov    %edi,%ecx
f01331f5:	d3 e2                	shl    %cl,%edx
f01331f7:	8b 44 24 08          	mov    0x8(%esp),%eax
f01331fb:	88 d9                	mov    %bl,%cl
f01331fd:	d3 e8                	shr    %cl,%eax
f01331ff:	09 c2                	or     %eax,%edx
f0133201:	89 d0                	mov    %edx,%eax
f0133203:	89 f2                	mov    %esi,%edx
f0133205:	f7 74 24 0c          	divl   0xc(%esp)
f0133209:	89 d6                	mov    %edx,%esi
f013320b:	89 c3                	mov    %eax,%ebx
f013320d:	f7 e5                	mul    %ebp
f013320f:	39 d6                	cmp    %edx,%esi
f0133211:	72 19                	jb     f013322c <__udivdi3+0xfc>
f0133213:	74 0b                	je     f0133220 <__udivdi3+0xf0>
f0133215:	89 d8                	mov    %ebx,%eax
f0133217:	31 ff                	xor    %edi,%edi
f0133219:	e9 58 ff ff ff       	jmp    f0133176 <__udivdi3+0x46>
f013321e:	66 90                	xchg   %ax,%ax
f0133220:	8b 54 24 08          	mov    0x8(%esp),%edx
f0133224:	89 f9                	mov    %edi,%ecx
f0133226:	d3 e2                	shl    %cl,%edx
f0133228:	39 c2                	cmp    %eax,%edx
f013322a:	73 e9                	jae    f0133215 <__udivdi3+0xe5>
f013322c:	8d 43 ff             	lea    -0x1(%ebx),%eax
f013322f:	31 ff                	xor    %edi,%edi
f0133231:	e9 40 ff ff ff       	jmp    f0133176 <__udivdi3+0x46>
f0133236:	66 90                	xchg   %ax,%ax
f0133238:	31 c0                	xor    %eax,%eax
f013323a:	e9 37 ff ff ff       	jmp    f0133176 <__udivdi3+0x46>
f013323f:	90                   	nop

f0133240 <__umoddi3>:
f0133240:	55                   	push   %ebp
f0133241:	57                   	push   %edi
f0133242:	56                   	push   %esi
f0133243:	53                   	push   %ebx
f0133244:	83 ec 1c             	sub    $0x1c,%esp
f0133247:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f013324b:	8b 74 24 34          	mov    0x34(%esp),%esi
f013324f:	8b 7c 24 38          	mov    0x38(%esp),%edi
f0133253:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f0133257:	89 44 24 0c          	mov    %eax,0xc(%esp)
f013325b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f013325f:	89 f3                	mov    %esi,%ebx
f0133261:	89 fa                	mov    %edi,%edx
f0133263:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f0133267:	89 34 24             	mov    %esi,(%esp)
f013326a:	85 c0                	test   %eax,%eax
f013326c:	75 1a                	jne    f0133288 <__umoddi3+0x48>
f013326e:	39 f7                	cmp    %esi,%edi
f0133270:	0f 86 a2 00 00 00    	jbe    f0133318 <__umoddi3+0xd8>
f0133276:	89 c8                	mov    %ecx,%eax
f0133278:	89 f2                	mov    %esi,%edx
f013327a:	f7 f7                	div    %edi
f013327c:	89 d0                	mov    %edx,%eax
f013327e:	31 d2                	xor    %edx,%edx
f0133280:	83 c4 1c             	add    $0x1c,%esp
f0133283:	5b                   	pop    %ebx
f0133284:	5e                   	pop    %esi
f0133285:	5f                   	pop    %edi
f0133286:	5d                   	pop    %ebp
f0133287:	c3                   	ret    
f0133288:	39 f0                	cmp    %esi,%eax
f013328a:	0f 87 ac 00 00 00    	ja     f013333c <__umoddi3+0xfc>
f0133290:	0f bd e8             	bsr    %eax,%ebp
f0133293:	83 f5 1f             	xor    $0x1f,%ebp
f0133296:	0f 84 ac 00 00 00    	je     f0133348 <__umoddi3+0x108>
f013329c:	bf 20 00 00 00       	mov    $0x20,%edi
f01332a1:	29 ef                	sub    %ebp,%edi
f01332a3:	89 fe                	mov    %edi,%esi
f01332a5:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f01332a9:	89 e9                	mov    %ebp,%ecx
f01332ab:	d3 e0                	shl    %cl,%eax
f01332ad:	89 d7                	mov    %edx,%edi
f01332af:	89 f1                	mov    %esi,%ecx
f01332b1:	d3 ef                	shr    %cl,%edi
f01332b3:	09 c7                	or     %eax,%edi
f01332b5:	89 e9                	mov    %ebp,%ecx
f01332b7:	d3 e2                	shl    %cl,%edx
f01332b9:	89 14 24             	mov    %edx,(%esp)
f01332bc:	89 d8                	mov    %ebx,%eax
f01332be:	d3 e0                	shl    %cl,%eax
f01332c0:	89 c2                	mov    %eax,%edx
f01332c2:	8b 44 24 08          	mov    0x8(%esp),%eax
f01332c6:	d3 e0                	shl    %cl,%eax
f01332c8:	89 44 24 04          	mov    %eax,0x4(%esp)
f01332cc:	8b 44 24 08          	mov    0x8(%esp),%eax
f01332d0:	89 f1                	mov    %esi,%ecx
f01332d2:	d3 e8                	shr    %cl,%eax
f01332d4:	09 d0                	or     %edx,%eax
f01332d6:	d3 eb                	shr    %cl,%ebx
f01332d8:	89 da                	mov    %ebx,%edx
f01332da:	f7 f7                	div    %edi
f01332dc:	89 d3                	mov    %edx,%ebx
f01332de:	f7 24 24             	mull   (%esp)
f01332e1:	89 c6                	mov    %eax,%esi
f01332e3:	89 d1                	mov    %edx,%ecx
f01332e5:	39 d3                	cmp    %edx,%ebx
f01332e7:	0f 82 87 00 00 00    	jb     f0133374 <__umoddi3+0x134>
f01332ed:	0f 84 91 00 00 00    	je     f0133384 <__umoddi3+0x144>
f01332f3:	8b 54 24 04          	mov    0x4(%esp),%edx
f01332f7:	29 f2                	sub    %esi,%edx
f01332f9:	19 cb                	sbb    %ecx,%ebx
f01332fb:	89 d8                	mov    %ebx,%eax
f01332fd:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f0133301:	d3 e0                	shl    %cl,%eax
f0133303:	89 e9                	mov    %ebp,%ecx
f0133305:	d3 ea                	shr    %cl,%edx
f0133307:	09 d0                	or     %edx,%eax
f0133309:	89 e9                	mov    %ebp,%ecx
f013330b:	d3 eb                	shr    %cl,%ebx
f013330d:	89 da                	mov    %ebx,%edx
f013330f:	83 c4 1c             	add    $0x1c,%esp
f0133312:	5b                   	pop    %ebx
f0133313:	5e                   	pop    %esi
f0133314:	5f                   	pop    %edi
f0133315:	5d                   	pop    %ebp
f0133316:	c3                   	ret    
f0133317:	90                   	nop
f0133318:	89 fd                	mov    %edi,%ebp
f013331a:	85 ff                	test   %edi,%edi
f013331c:	75 0b                	jne    f0133329 <__umoddi3+0xe9>
f013331e:	b8 01 00 00 00       	mov    $0x1,%eax
f0133323:	31 d2                	xor    %edx,%edx
f0133325:	f7 f7                	div    %edi
f0133327:	89 c5                	mov    %eax,%ebp
f0133329:	89 f0                	mov    %esi,%eax
f013332b:	31 d2                	xor    %edx,%edx
f013332d:	f7 f5                	div    %ebp
f013332f:	89 c8                	mov    %ecx,%eax
f0133331:	f7 f5                	div    %ebp
f0133333:	89 d0                	mov    %edx,%eax
f0133335:	e9 44 ff ff ff       	jmp    f013327e <__umoddi3+0x3e>
f013333a:	66 90                	xchg   %ax,%ax
f013333c:	89 c8                	mov    %ecx,%eax
f013333e:	89 f2                	mov    %esi,%edx
f0133340:	83 c4 1c             	add    $0x1c,%esp
f0133343:	5b                   	pop    %ebx
f0133344:	5e                   	pop    %esi
f0133345:	5f                   	pop    %edi
f0133346:	5d                   	pop    %ebp
f0133347:	c3                   	ret    
f0133348:	3b 04 24             	cmp    (%esp),%eax
f013334b:	72 06                	jb     f0133353 <__umoddi3+0x113>
f013334d:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f0133351:	77 0f                	ja     f0133362 <__umoddi3+0x122>
f0133353:	89 f2                	mov    %esi,%edx
f0133355:	29 f9                	sub    %edi,%ecx
f0133357:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f013335b:	89 14 24             	mov    %edx,(%esp)
f013335e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f0133362:	8b 44 24 04          	mov    0x4(%esp),%eax
f0133366:	8b 14 24             	mov    (%esp),%edx
f0133369:	83 c4 1c             	add    $0x1c,%esp
f013336c:	5b                   	pop    %ebx
f013336d:	5e                   	pop    %esi
f013336e:	5f                   	pop    %edi
f013336f:	5d                   	pop    %ebp
f0133370:	c3                   	ret    
f0133371:	8d 76 00             	lea    0x0(%esi),%esi
f0133374:	2b 04 24             	sub    (%esp),%eax
f0133377:	19 fa                	sbb    %edi,%edx
f0133379:	89 d1                	mov    %edx,%ecx
f013337b:	89 c6                	mov    %eax,%esi
f013337d:	e9 71 ff ff ff       	jmp    f01332f3 <__umoddi3+0xb3>
f0133382:	66 90                	xchg   %ax,%ax
f0133384:	39 44 24 04          	cmp    %eax,0x4(%esp)
f0133388:	72 ea                	jb     f0133374 <__umoddi3+0x134>
f013338a:	89 d9                	mov    %ebx,%ecx
f013338c:	e9 62 ff ff ff       	jmp    f01332f3 <__umoddi3+0xb3>
